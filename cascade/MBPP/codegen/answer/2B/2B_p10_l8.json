[
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_list.append(i)\n    return shared_list\n",
        "num_ids": 47
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_list.append(test_tup1[i])\n    return shared_list\nprint(similar_elements([1,2,3],[1,2]))\n",
        "num_ids": 84
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    return_list = []\n    \n    #if test_tup1 is empty and test_tup2 is not empty:\n    if len(test_tup1) == 0:\n        return_list = test_tup2\n        return return_list\n    #else:\n    #if test_tup2 is empty and test_tup1 is not empty:\n    elif len(test_tup2) == 0:\n        return_list = test_tup1\n        return return_list\n    \n    #else:\n    else:\n        if test_tup1 == test_tup2:\n            return_list = test_tup1\n            return return_list\n        \n        else:\n            common_elements = list(set(test_tup1).intersection(set(test_tup2)))\n            \n            if len(common_elements) > 0:\n                return_list = common_elements\n                return return_list\n            \n            else:\n                return_list = []\n                return return_list\n",
        "num_ids": 250
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    count = 0\n    for item in test_tup1:\n        if item in test_tup2:\n            count += 1\n    return count\n    \ndef longest_substring(string1, string2):\n    '''\n    Write a function to find the longest common substring from the given two strings.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_list1 = []\n    test_list2 = []\n",
        "num_ids": 18
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elems = list(set(test_tup1) & set(test_tup2))\n    return shared_elems\n    \ntest_tup1 = (1, 2, 3, 4, 5, 6, 7, 8)\ntest_tup2 = (1, 2, 3, 4, 5, 6, 8, 9)\n",
        "num_ids": 85
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [x for x in test_tup1 if x in test_tup2]\n",
        "num_ids": 24
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #shared_elements = set(test_tup1).intersection(set(test_tup2))\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements\n",
        "num_ids": 77
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = set(test_tup1) & set(test_tup2)\n    # print(shared)\n    return shared\n",
        "num_ids": 34
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # test_list = list(set(test_list1) & set(test_list2))\n    # test_list = []\n    # for i in range(0,len(test_list1)):\n    #     for j in range(0,len(test_list2)):\n    #         if test_list1[i] == test_list2[j]:\n    #             test_list.append(test_list1[i])\n    # print(test_list)\n",
        "num_ids": 117
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n>1:\n        for i in range(2,n):\n            if (n%i==0):\n                print(n,\" is not a prime number\")\n                return False\n        else:\n            print(n,\" is a prime number\")\n            return True\n    else:\n        print(n,\" is not a prime number\")\n        return False",
        "num_ids": 84
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(n**0.5)+1):\n        if n%i == 0:\n            return True\n    return False\ndef is_prime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2,int(n**0.5)+1):\n        if n%i == 0:\n            return False\n    return True\ndef is_prime_v2(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2,int(n**0.5)+1):\n        if n%i == 0:\n            return False\n    return True\ndef is_prime_v3(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2,int(n**0.5)+1):\n        if n%i == 0:\n            return False\n    return True\ndef is_prime_v4(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2,int(n**0.5)+1):\n        if n%i == 0:\n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2 or n == 3 or n == 5 or n == 7:\n        return True\n    elif n % 2 == 0 or n % 3 == 0 or n % 5 == 0 or n % 7 == 0:\n        return False\n    else:\n        r = int(math.sqrt(n))\n        i = 5\n        while i <= r:\n            if n % i == 0:\n                return False\n            i += 6\n        return True\n",
        "num_ids": 108
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n%i == 0:\n                return False\n        return True\n",
        "num_ids": 55
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 0 or n == 1:\n        return False\n",
        "num_ids": 17
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n",
        "num_ids": 30
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==2:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n%i==0:\n            return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2 == 0 and n > 2:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 59
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n > 1:\n        for i in range(2,n):\n            if (n % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n",
        "num_ids": 51
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in range(n):\n        heapq.heappush(h, nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]>h[0]:\n            heapq.heapreplace(h,nums[i])\n    for i in range(len(h)):\n        print(hq.heappop(h))\n",
        "num_ids": 103
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        hq.heappush(heap, nums[i])\n    print(\"The Largest numbers in the array is {}\".format([x for x in heap]))\n",
        "num_ids": 58
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    if n >= len(nums):\n        return nums\n    for i in range(n):\n        hq.heappush(max_heap, nums[i])\n    \n    for i in range(n, len(nums)):\n        if nums[i] > max_heap[0]:\n            hq.heappop(max_heap)\n            hq.heappush(max_heap, nums[i])\n    return max_heap\n",
        "num_ids": 126
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        nums[0],nums[-1]=nums[-1],nums[0]\n        nums.pop(-1)\n        hq.heapify(nums)\n    return nums\n    \ndef heap_queue_largest2(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums:\n        return nums\n    largest = heapq.nlargest(n,nums)\n    return heapq.nlargest(n,nums)\n    \ndef heap_queue_largest3(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #using heapq with an unsorted list\n    hq.heapify(nums)\n    largest = heapq.nlargest(n,nums)\n    return largest\n    \ndef heap_queue_largest4(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #using heapq with a sorted list\n    if not nums:\n        return nums\n    largest = []\n    hq.heapify(nums)\n    for i in range(n):\n        largest.append(hq.heappop(nums))\n    return largest\n    \ndef heap_queue_largest5(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #using heapq with a sorted list\n    if not nums:\n        return nums\n    largest = []\n    heapq.heapify(nums)\n    for i in range(n):\n        largest.append(hq.heappop(nums))\n    return largest\n    \ndef heap_queue_largest6(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #using heapq with a sorted list\n    if not nums:\n        return nums\n    largest = []\n    heapq.heapify(nums)\n    for i in range(n):\n        largest.append(heapq.heappop(nums))\n    heapq.heapify(largest)\n    return largest\n    \ndef heap_queue_largest7(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums:\n        return nums\n    largest = []\n    heapq.heapify(nums)\n    for i in range(n):\n        largest.append(heapq.heappop(nums))\n    return largest\n",
        "num_ids": 62
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums:\n        return []\n    \n    if n>=len(nums):\n        return nums\n    \n    heap = nums[:n]\n    heapq.heapify(heap)\n    \n    for i in range(n,len(nums)):\n        if nums[i] > heap[0]:\n            heapq.heapreplace(heap,nums[i])\n        else:\n            heapq.heappushpop(heap,nums[i])\n    \n    return list(heap)\n",
        "num_ids": 138
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if nums == None:\n        return \n    heap = []\n    for num in nums:\n        hq.heappush(heap,num)\n    \n    return list(map(lambda x:x,hq.nlargest(n,heap)))\n",
        "num_ids": 67
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums)<n:\n        return\n    hq.heapify(nums)\n    ans=[]\n    for i in range(n):\n        ans.append(hq.heappop(nums))\n    return ans\n",
        "num_ids": 62
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    heap = []\n    for i in range(n):\n        # print(nums)\n        if len(heap)==0:\n            hq.heappush(heap,nums[i])\n        else:\n            hq.heappush(heap,nums[i])\n            if nums[i]<heap[0]:\n                hq.heappop(heap)\n                hq.heappush(heap,nums[i])\n    \n    print(heap)\n    return heap\n",
        "num_ids": 132
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #using heapify\n    largest_heap = []\n    for i in range(n):\n        heapq.heappush(largest_heap,nums[i])\n        print(largest_heap)\n    return [heapq.heappop(largest_heap) for i in range(n)]\nprint(heap_queue_largest([3,2,1,5,6,4],3))\n",
        "num_ids": 102
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in range(len(nums)):\n        hq.heappush(h, nums[i])\n    for i in range(n):\n        hq.heappop(h)\n    return h\n",
        "num_ids": 60
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x== (x>>1) \nprint(is_Power_Of_Two(5))\n",
        "num_ids": 26
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    i = 0\n    while (x >> i) & 1 == 0:\n        i = i + 1\n    return True if (i == 1) else False\n        ",
        "num_ids": 51
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    print (x)\n    print (bin(x))\n    result = x%10\n    print (result)\n    if result==0:\n        return True\n    else:\n        return False\n    \n        ",
        "num_ids": 51
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x:\n        if x & 1:\n            return False\n        x >>= 1\n    return True\ndef is_Power_Of_Two1(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x and (x & (-x))\ndef is_Power_Of_Two2(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x:\n        if x & 1:\n            return False\n        x = x >> 1\n    return True\ndef is_Power_Of_Two3(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x:\n        if x & 1:\n            x = x >> 1\n        else:\n            return False\n    return True\nprint(is_Power_Of_Two3(3))\nprint(is_Power_Of_Two3(32))\nprint(is_Power_Of_Two3(5))\n",
        "num_ids": 75
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x == 2 ** x\n    \n    \n    \ndef get_Kth_Bit(x, k): \n    '''\n    Write a python function to get the k-th bit of an integer x.\n    '''\n    return x & (1 << k) \n    \n    \ndef first_non_zero_bit(x): \n    '''\n    Write a python function to return the position of the first non-zero bit in an integer x.\n    '''\n    return x & -x \n    \n    \ndef str_to_int(string): \n    '''\n    Write a python function to convert a string into an integer.\n    '''\n    return int(string)\n    \n    \ndef int_to_str(integer): \n    '''\n    Write a python function to convert an integer into a string.\n    '''\n    return str(integer)\n    \n    \ndef min_and_max(x, y): \n    '''\n    Write a python function to get the minimum and maximum values of a sequence of integer numbers.\n    '''\n    return min(x,y),max(x,y)\n    \n    \ndef min_and_max_dec(x, y): \n    '''\n    Write a python function to get the minimum and maximum values of a sequence of decimal numbers.\n    '''\n    return x - y, x + y\n    \n    \ndef is_power_of_two(n): \n    '''\n    Write a python function to check whether a number is a power of 2.\n    '''\n    return n == 2 ** n\n    \n    \ndef is_power_of_two_iterative(n): \n    '''\n    Write a python function to check whether a number is a power of 2.\n    '''\n    while n > 0: \n        if n == 1: \n            return True\n        if n % 2!= 0: \n            return False\n        n = n // 2\n    return False\n    \n    \ndef get_num_of_bit(n): \n    '''\n    Write a python function to get the number of bits of an integer n.\n    '''\n    return n.bit_length()\n    \n    \ndef get_num_of_bit_dec(n): \n    '''\n    Write a python function to get the number of bits of a decimal number n.\n    '''\n    return bin(n).count('1')\n    \n    \ndef count_of_set_bits(n): \n    '''\n    Write a python function to count the number of bits set in an integer n.\n    '''\n    return n.bit_count(n)\n    \n    \ndef count_of_set_bits_iterative(n): \n    '''\n    Write a python function to count the number of bits set in an integer n.\n    '''\n    count = 0\n    while n!= 0: \n        count += 1\n        n = n >> 1\n    return count\n    \n    \ndef count_of_set_bits_dec(n): \n    '''\n    Write a python function to count the number of bits set in an integer n.\n    '''\n    n = int(str(bin(n))[2:])\n    count = 0\n    while n!= 0: \n        count += 1\n        n = n >> 1\n    return count\n    \n    \ndef count_of_set_bits_recur(n): \n    '''\n    Write a python function to count the number of bits set in an integer n.\n    '''\n    if n == 0: \n        return 0\n    return 1 + count_of_set_bits_recur(n >> 1)\n    \n    \ndef factorial(n): \n    '''\n    Write a python function to compute the factorial of a given number.\n    '''\n    if n == 0: \n        return 1\n    return n * factorial(n - 1)\n    \n    \ndef factorial_iterative(n): \n    '''\n    Write a python function to compute the factorial of a given number.\n    '''\n    if n == 0: \n        return 1\n    return factorial_iterative(n - 1) * n \n    \n    \ndef factorial_recur(n): \n    '''\n    Write a python function to compute the factorial of a given number.\n    '''\n    if n == 0: \n        return 1\n    return n * factorial_recur(n - 1)\n    \n    \ndef factorial_recur_iterative(n): \n    '''\n    Write a python function to compute the factorial of a given number.\n    '''\n    if n == 0: \n        return 1\n    return factorial_iterative(n - 1) * n \n    \n    \ndef fibonacci(n): \n    '''\n    Write a python function to compute the Fibonacci of a given number.\n    '''\n    if n == 0: \n        return 0\n    if n == 1 or n == 2: \n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)\n    \n    \ndef fibonacci_iterative(n): \n    '''\n    Write a python function to compute the Fibonacci of a given number.\n    '''\n    if n == 0: \n        return 0\n    if n == 1 or n == 2: \n        return 1\n    fib = [0, 1]\n    for i in range(2, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return fib[n]\n    \n    \ndef fibonacci_recur(n): \n    '''\n    Write a python function to compute the Fibonacci of a given number.\n    '''\n    if n == 0: \n        return 0\n    if n == 1 or n == 2: \n        return 1\n    fib = fibonacci_recur(n - 1) + fibonacci_recur(n - 2)\n    return fib\n    \n    \ndef fibonacci_recur_iterative(n): \n    '''\n    Write a python function to compute the Fibonacci of a given number.\n    '''\n    if n == 0: \n        return 0\n    if n == 1 or n == 2: \n        return 1\n    fib = [0, 1]\n    for i in range(2, n + 1):\n        fib.append(fib[i - 1] + fib[i - 2])\n    return fib[n]\n    \n    \ndef powers(x, y): \n    '''\n    Write a python function to compute the exponentiation of two given numbers.\n    '''\n    return x ** y\n    \n    \ndef power_iterative(x, y): \n    '''\n    Write a python function to compute the exponentiation of two given numbers.\n    '''\n    result = 1\n    while y!= 0: \n        if y % 2 == 1: \n            result = result * x\n        x = x * x\n        y = y // 2\n    return result\n    \n    \ndef power_recursive(x, y): \n    '''\n    Write a python function to compute the exponentiation of two given numbers.\n    '''\n    def power_recursive_helper(x, y): \n        if y == 0: \n            return 1\n        if y % 2 == 0: \n            return power_recursive_helper(x, y // 2) * x\n        else: \n            return x * power_recursive_helper(x, y - 1)\n    return power_recursive_helper(x, y)\n    \n    \ndef power_of_two(x, y): \n    '''\n    Write a python function to compute the exponentiation of two given numbers.\n    '''\n    return x if y == 0 else x * power_of_two(x, y - 1)\n    \n    \ndef power_of_two_iterative(x, y): \n    '''\n    Write a python function to compute the exponentiation of two given numbers.\n    '''\n    result = 1\n    while y!= 0: \n        if y % 2 == 1: \n            result = result * x\n        x = x * x\n        y = y // 2\n    return result\n    \n    \ndef power_of_two_dec(x, y): \n    '",
        "num_ids": 72
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0\n",
        "num_ids": 15
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return False\n    while x % 2 == 0: \n        x /= 2\n    return True if x == 1 else False\n",
        "num_ids": 40
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x==0:\n        return False\n    while x!=0:\n        if x%2==1:\n            return False\n        x=x//2\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1): \n        return False\n    else: \n        return True\n",
        "num_ids": 26
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Using Binary and 8 BITS\n    return (x & (x - 1)) == 0\n    # Using Python Operators\n    # return x & (x - 1) == 0\n    \n",
        "num_ids": 46
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall('[a-zA-Z]{4,}', text)\n",
        "num_ids": 25
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    list_words = []\n    for word in text.split():\n        if len(word) >= 4:\n            list_words.append(word)\n    return list_words\n",
        "num_ids": 44
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    for i in text.split(' '):\n        if len(i) > 4:\n            result.append(i)\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\w{4,}')\n    result = pattern.findall(text)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'\\w+', text)\n    for i in result:\n        if len(i) < 4:\n            result.remove(i)\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    for i in range(len(text)):\n        if len(text[i]) >= 4:\n            result.append(text[i])\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b[\\w]+\\b')\n    result = pattern.findall(text)\n    print(result)\n",
        "num_ids": 39
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    for i in range(len(text)):\n        if len(text[i]) >= 4:\n            result.append(text[i])\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    word_list = []\n    for word in text.split():\n        if len(word) >= 4:\n            word_list.append(word)\n    return word_list\n",
        "num_ids": 44
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(\"\\w{4,}\", text)\n    print(result)\n",
        "num_ids": 26
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return(map(lambda x: x ** 2, nums))\n",
        "num_ids": 18
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    sqr_list = []\n    for item in nums:\n        sqr_list.append(item*item)\n    return sqr_list\n",
        "num_ids": 38
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    new_list = []\n    for i in nums:\n        new_list.append(i**2)\n    return new_list\n",
        "num_ids": 35
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return list(map(lambda x: x**2, nums))\n    \n    \ndef square_nums_comprehension(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    #for loop to find each number in the list\n    for num in nums:\n        #square each number in the list\n        squared_num = num*num\n        #output the result\n        print(f\"{num} squared is {squared_num}\")\n",
        "num_ids": 65
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [n * n for n in nums]\n    \nprint(square_nums([1,2,3,4]))\n",
        "num_ids": 34
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for n in nums:\n        squares.append(n**2)\n    return squares\n",
        "num_ids": 31
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i**2 for i in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num*num)\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        print(i*i)\n",
        "num_ids": 18
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    arr = [None] * 26\n    for i in range(len(str)):\n        arr[ord(str[i]) - ord('a')] = i\n",
        "num_ids": 41
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # if str == \"\":\n    #     return 0\n    # count = 0\n    # for i in range(len(str)-1):\n    #     if str[i]!= str[i+1]:\n    #         count += 1\n    # return count\n    return min(len(str),len(str[::-1]))\n",
        "num_ids": 83
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_len = len(str)\n    start, end = 0, 0\n    count = 0\n    #counter variable to count the number of rotations needed\n    for i in range(str_len):\n        if str[i]!= str[end]:\n            count += 1\n        end = (end + 1) % str_len\n    #print(count)\n    return count\n",
        "num_ids": 92
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    for i in range(0,len(str)):\n        temp = str[i]\n        str = str.replace(temp,'',1)\n        str += temp\n        if str == str[::-1]:\n            return rotations\n        else:\n            rotations += 1\n",
        "num_ids": 74
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def find_Rotation(str): \n        if len(str) == 1: \n            return 0\n        if str[0] == str[len(str) - 1]: \n            return find_Rotation(str[1 : len(str) - 1]) \n        else: \n            return 1 + min(find_Rotation(str[1 : len(str)]), \n                           find_Rotation(str[0 : len(str) - 1])) \n    return find_Rotation(str) \n  \nprint(\"Minimum rotations required to get the string in different ways : \") \nprint(find_Rotations(\"abab\")) \nprint(find_Rotations(\"abc\")) \nprint(find_Rotations(\"aba\")) \nprint(find_Rotations(\"\")) ",
        "num_ids": 187
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    temp_str = str + str[0]\n    j = n - 1\n    ans = n\n    for i in range(1, n):\n        if (str[i]!= str[j]):\n            temp_str = temp_str + str[j]\n            j = j - 1\n        else:\n            j = j - 1\n        if (j < 0):\n            ans = min(ans, i)\n    if (ans > n):\n        ans = -1\n    return ans\n",
        "num_ids": 128
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    l=len(str)\n    if(l==0):\n        return 0\n    \n    if(l==1):\n        return 0\n    \n    #counter for each substring\n    count=0\n    #we will iterate for the length of the string\n    for i in range(l):\n        #if the string length is 2 we don't need any rotations\n        if(l==2):\n            return 0\n        else:\n            #keeps on looping for the length of the string minus 1\n            for j in range(l-1,i,-1):\n                #we will check if the current substring is equal to the substring to the left\n                if(str[i:j+1]==str[j:i:-1]):\n                    #this means the string is equal\n                    count=count+1\n                    break\n            \n            #this is used to check if the string length is even\n            if(l%2==0):\n                #if the length is even, we will go to the last even number\n                for j in range(l-1,i,-2):\n                    #we will check if the substring is equal to the substring to the left and to the right\n                    if(str[i:j+1]==str[j:i:-1]):\n                        #this means the string is equal\n                        count=count+1\n                        break\n    return count\n",
        "num_ids": 323
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #counts = {}\n    #str_count = Counter(str)\n    #for i in str_count:\n    #    counts[i] = str_count[i]\n    #print(counts)\n    count = 0\n    for i in range(len(str)):\n        if str[i] not in str[i+1:] + str[0:i]:\n            count += 1\n    return count\n    #raise NotImplementedError\n",
        "num_ids": 111
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # first we take the length of string and an empty string and set min = length\n    min = len(str)\n    \n    # we loop the string and add every position in the string to the empty string \n    for i in range(len(str)):\n        # we store the position in a variable\n        pos = str[i]\n        # we save the position in an empty string\n        s = \"\"\n        # we loop the empty string and add the position to the variable\n        for j in range(len(str)):\n            s += str[j]\n        # if the new string is shorter than the original one, we update the min\n        if len(s) < len(str):\n            min = len(str) - len(s)\n    \n    # we return the minimum number of rotations\n    return min\n    \n    \nif __name__ == '__main__':\n    \n    input_string = \"accccaacc\"\n    print(\"The minimum number of rotations is %d\" %(find_Rotations(input_string)))",
        "num_ids": 244
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')\n",
        "num_ids": 12
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.replace(s[0], \"\")\n    s=s.replace(s[-1], \"\")\n    return s\nif __name__ == '__main__':\n    #s =\"Hello World\"\n    #print(remove_Occ(s,\"l\"))\n    s =\"Hello World\"\n    print(remove_Occ(s,\"h\")",
        "num_ids": 87
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    for i in range(s.count(ch)):\n        s = s.replace(ch,'')\n    s = s.replace(ch,'')\n    return s\n",
        "num_ids": 42
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.lower()\n    str_occ=s.split(ch)\n    new_str=\"\"\n    for i in range(len(str_occ)):\n        new_str+=str_occ[i]\n    return new_str\n",
        "num_ids": 60
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    l = len(s)\n    i = 0\n    while i < l:\n        if s[i] == ch:\n            if i == 0:\n                s = s[i+1:]\n            elif i == l-1:\n                s = s[:i]\n            else:\n                s = s[:i] + s[i+1:]\n            i = 0\n            continue\n        i += 1\n    return s\n",
        "num_ids": 105
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')\n    ",
        "num_ids": 13
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    #get_list = s.split(\" \")\n    #get_list.remove(ch)\n    #s =''.join(get_list)\n    #return s\n",
        "num_ids": 43
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    result = s.replace(ch, '') \n    return result[1:-1] \n",
        "num_ids": 25
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=list(s)\n    left = s.index(ch)\n    s.remove(ch)\n    right = len(s)-s[::-1].index(ch)\n    s.insert(left,ch)\n    s.insert(right,ch)\n    s = ''.join(s)\n    return s\ns = \"code\"\nprint(remove_Occ(s,'c'))\nprint(remove_Occ(s,'d'))\nprint(remove_Occ(s,'e'))\nprint(remove_Occ(s,'f'))\nprint(remove_Occ(s,'g'))\nprint(remove_Occ(s,'h'))\nprint(remove_Occ(s,'i'))\nprint(remove_Occ(s,'j'))\nprint(remove_Occ(s,'k'))\nprint(remove_Occ(s,'l'))\nprint(remove_Occ(s,'m'))\nprint(remove_Occ(s,'n'))\nprint(remove_Occ(s,'o'))\nprint(remove_Occ(s,'p'))\nprint(remove_Occ(s,'q'))\nprint(remove_Occ(s,'r'))\nprint(remove_Occ(s,'s'))\nprint(remove_Occ(s,'t'))\nprint(remove_Occ(s,'u'))\nprint(remove_Occ(s,'v'))\nprint(remove_Occ(s,'w'))\nprint(remove_Occ(s,'x'))\nprint(remove_Occ(s,'y'))\nprint(remove_Occ(s,'z'))\nprint(remove_Occ(s,'a'))\nprint(remove_Occ(s,'b'))\nprint(remove_Occ(s,'c'))\nprint(remove_Occ(s,'d'))\nprint(remove_Occ(s,'e'))\nprint(remove_Occ(s,'f'))\nprint(remove_Occ(s,'g'))\nprint(remove_Occ(s,'h'))\nprint(remove_Occ(s,'i'))\nprint(remove_Occ(s,'j'))\nprint(remove_Occ(s,'k'))\nprint(remove_Occ(s,'l'))\nprint(remove_Occ(s,'m'))\nprint(remove_Occ(s,'n'))\nprint(remove_Occ(s,'o'))\nprint(remove_Occ(s,'p'))\nprint(remove_Occ(s,'q'))\nprint(remove_Occ(s,'r'))\nprint(remove_Occ(s,'s'))\nprint(remove_Occ(s,'t'))\nprint(remove_Occ(s,'u'))\nprint(remove_Occ(s,'v'))\nprint(remove_Occ(s,'w'))\nprint(remove_Occ(s,'x'))\nprint(remove_Occ(s,'y'))\nprint(remove_Occ(s,'z'))\nprint(remove_Occ(s,'0'))\nprint(remove_Occ(s,'1'))\nprint(remove_Occ(s,'2'))\nprint(remove_Occ(s,'3'))\nprint(remove_Occ(s,'4'))\nprint(remove_Occ(s,'5'))\nprint(remove_Occ(s,'6'))\nprint(remove_Occ(s,'7'))\nprint(remove_Occ(s,'8'))\nprint(remove_Occ(s,'9'))\nprint(remove_Occ(s,'a'))\nprint(remove_Occ(s,'b'))\nprint(remove_Occ(s,'c'))\nprint(remove_Occ(s,'d'))\nprint(remove_Occ(s,'e'))\nprint(remove_Occ(s,'f'))\nprint(remove_Occ(s,'g'))\nprint(remove_Occ(s,'h'))\nprint(remove_Occ(s,'i'))\nprint(remove_Occ(s,'j'))\nprint(remove_Occ(s,'k'))\nprint(remove_Occ(s,'l'))\nprint(remove_Occ(s,'m'))\nprint(remove_Occ(s,'n'))\nprint(remove_Occ(s,'o'))\nprint(remove_Occ(s,'p'))\nprint(remove_Occ(s,'q'))\nprint(remove_Occ(s,'r'))\nprint(remove_Occ(s,'s'))\nprint(remove_Occ(s,'t'))\nprint(remove_Occ(s,'u'))\nprint(remove_Occ(s,'v'))\nprint(remove_Occ(s,'w'))\nprint(remove_Occ(s,'x'))\nprint(remove_Occ(s,'y'))\nprint(remove_Occ(s,'z'))\nprint(remove_Occ(s,'A'))\nprint(remove_Occ(s,'B'))\nprint(remove_Occ(s,'C'))\nprint(remove_Occ(s,'D'))\nprint(remove_Occ(s,'E'))\nprint(remove_Occ(s,'F'))\nprint(remove_Occ(s,'G'))\nprint(remove_Occ(s,'H'))\nprint(remove_Occ(s,'I'))\nprint(remove_Occ(s,'J'))\nprint(remove_Occ(s,'K'))\nprint(remove_Occ(s,'L'))\nprint(remove_Occ(s,'M'))\nprint(remove_Occ(s,'N'))\nprint(remove_Occ(s,'O'))\nprint(remove_Occ(s,'P'))\nprint(remove_Occ(s,'Q'))\nprint(remove_Occ(s,'R'))\nprint(remove_Occ(s,'S'))\nprint(remove_Occ(s,'T'))\nprint(remove_Occ(s,'U'))\nprint(remove_Occ(s,'V'))\nprint(remove_Occ(s,'W'))\nprint(remove_Occ(s,'X'))\nprint(remove_Occ(s,'Y'))\nprint(remove_Occ(s,'Z'))\nprint(remove_Occ(s,' '))\nprint(remove_Occ(s,'!'))\nprint(remove_Occ(s,'.'))\nprint(remove_Occ(s,'0'))\nprint(remove_Occ(s,'1'))\nprint(remove_Occ(s,'2'))\nprint(remove_Occ(s,'3'))\nprint(remove_Occ(s,'4'))\nprint(remove_Occ(s,'5'))\nprint(remove_Occ(s,'6'))\nprint(remove_Occ(s,'7'))\nprint(remove_Occ(s,'8'))\nprint(remove_Occ(s,'9'))\nprint(remove_Occ(s,'a'))\nprint(remove_Occ(s,'b'))\nprint(remove_Occ(s,'c'))\nprint(remove_Occ(s,'d'))\nprint(remove_Occ(s,'e'))\nprint(remove_Occ(s,'f'))\nprint(remove_Occ(s,'g'))\nprint(remove_Occ(s,'h'))\nprint(remove_Occ(s,'i'))\nprint(remove_Occ(s,'j'))\nprint(remove_Occ(s,'k'))\nprint(remove_Occ(s,'l'))\nprint(remove_Occ(s,'m'))\nprint(remove_Occ(s,'n'))\nprint(remove_Occ(s,'o'))\nprint(remove_Occ(s,'p'))\nprint(remove_Occ(s,'q'))\nprint(remove_Occ(s,'r'))\nprint(remove_Occ(s,'s'))\nprint(remove_Occ(s,'t'))\nprint(remove_Occ(s,'u'))\nprint(remove_Occ(s,'v'))\nprint(remove_Occ(s,'w'))\nprint(remove_Occ(s,'x'))\nprint(remove_Occ(s,'y'))\nprint(remove_Occ(s,'z'))\nprint(remove_Occ(s,'A'))\nprint(remove_Occ(s,'B'))\nprint(remove_Occ(s,'C'))\nprint(remove_Occ(s,'D'))\nprint(remove_Occ(s,'E'))\nprint(remove_Occ(s,'F'))\nprint(remove_Occ(s,'G'))\nprint(remove_Occ(s,'H'))\nprint(remove_Occ(s,'I'))\nprint(remove_Occ(s,",
        "num_ids": 2011
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    #Remove first occurrence \n    if s.startswith(ch): \n        s = s[1:]\n        return s \n    #Remove last occurrence\n    if s.endswith(ch): \n        s = s[:-1]\n        return s \n    else: \n        return s \n",
        "num_ids": 76
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_matrix = []\n    M = sorted(M, key=lambda x: sum(x))\n    \n    for row in M:\n        sorted_matrix.append(row)\n        \n    return sorted_matrix\n    \n    \ndef find_alternative_string(s1, s2, s3):\n    '''\n    Write a function to return the shortest string that combines two strings into a third string.\n    '''\n    \n    s1_length = len(s1)\n    s2_length = len(s2)\n    s3_length = len(s3)\n    \n    if s1_length > s2_length:\n        s1, s2 = s2, s1\n        s1_length, s2_length = s2_length, s1_length\n    \n    if s1_length > s3_length:\n        s1, s3 = s3, s1\n        s1_length, s3_length = s3_length, s1_length\n    \n    min_length = min(s1_length, s2_length)\n    \n    for i in range(min_length):\n        if s1[i]!= s3[i]:\n            return False\n    \n    return True\n",
        "num_ids": 196
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # only works for square matrices\n    n = len(M)\n    if n == 0:\n        return []\n",
        "num_ids": 30
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M.sort(key=lambda x:sum(x))\n    return M\n",
        "num_ids": 21
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    matrix = M\n    N = len(matrix)\n    index = 0\n    while index < N:\n        row_sums = sum(matrix[index])\n        if row_sums == N:\n            print(\"row sums are \", row_sums)\n            sorted_matrix = sorted(matrix[index])\n            print(\"sorted matrix is \", sorted_matrix)\n            return sorted_matrix\n        else:\n            # to check the row sum is not same as N\n            if row_sums!= N:\n                matrix = matrix[:index] + matrix[index + 1:]\n            else:\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index] + matrix[index + 1:]\n                matrix = matrix[:index",
        "num_ids": 2012
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    if len(M) == 0:\n        return M\n",
        "num_ids": 16
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    r = len(M)\n    c = len(M[0])\n",
        "num_ids": 20
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    def sort_row(row):\n        result = []\n        for i in range(len(row)):\n            result.append([row[i]])\n        i = 0\n        while i < len(result)-1:\n            if result[i][0] + result[i+1][0] < result[i+1][0] + result[i][0]:\n                result[i], result[i+1] = result[i+1], result[i]\n            i += 1\n        return result\n    for row in M:\n        print(sort_row(row))\n",
        "num_ids": 138
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = []\n    cols = []\n    for i in range(len(M)):\n        for j in range(len(M)):\n            rows.append(M[i][j])\n    for i in range(len(M)):\n        for j in range(len(M)):\n            cols.append(M[j][i])\n    # rows.sort()\n    rows = sorted(rows)\n    cols.sort()\n    # print(rows)\n    # print(cols)\n    new = []\n    for i in range(len(M)):\n        new.append([])\n        new[i].append(rows[i])\n        new[i].append(cols[i])\n    # print(new)\n    for i in range(len(M)):\n        M[i] = new[i]\n    return M\n",
        "num_ids": 206
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n=len(M)\n    for i in range(n):\n        M[i].sort()\n        for j in range(n-1):\n            M[i][j], M[i][j+1] = M[i][j+1], M[i][j]\n    return M\n",
        "num_ids": 73
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(0,M):\n        if i==0:\n            for j in range(0,M-1):\n                if M[j]<M[j+1]:\n                    temp = M[j]\n                    M[j] = M[j+1]\n                    M[j+1] = temp\n        else:\n            if M[0]>M[1]:\n                for j in range(1,M):\n                    if M[j]<M[j-1]:\n                        temp = M[j]\n                        M[j] = M[j-1]\n                        M[j-1] = temp\n    return M\n",
        "num_ids": 154
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    import math\n    A = l*b\n    B = l*h\n    C = b*h\n    volume = math.sqrt(A*C*B)/3\n    print(\"The Volume of the triangle is %.3f\"%volume)\n    \ndef solve_quadratic_equation(a,b,c) :\n    '''\n    Write a python function to solve quadratic equations\n    '''\n    import math\n    d = math.pow(b,2)-4*a*c\n    if d>0 :\n        return (-b+math.sqrt(d))/(2*a),(-b-math.sqrt(d))/(2*a)\n    elif d==0:\n        return -b/(2*a)\n    else :\n        return None\n    \ndef find_sum_of_squares(l,h) :\n    '''\n    Write a python function to find the sum of squares of the first \n    n positive integers, n is passed as an argument.\n    '''\n    import math\n    if l<=0 or h<=0 :\n        return None\n    i=0\n    sum = 0\n    while i<l+1 :\n        if i>=h :\n            break\n        sum += i*i\n        i += 1\n    return sum\n    \ndef find_gcd(a,b) :\n    '''\n    Write a python function to find the GCD of two numbers a and b.\n    '''\n    import math\n    if a<b :\n        a,b=b,a\n    while b>0 :\n        a,b = b,a%b\n    return a\n    \ndef find_prime_factors(n) :\n    '''\n    Write a python function to find the prime factors of a number n.\n    '''\n    import math\n    factors = []\n    for i in range(2,int(math.sqrt(n))+1) :\n        while n%i==0 :\n            factors.append(i)\n            n=n//i\n    if n>=2 :\n        factors.append(n)\n    return factors\n    \ndef find_majority_element(l) :\n    '''\n    Write a python function to find the majority element in a sorted\n    list of integers.\n    '''\n    import math\n    majority = None\n    cnt=0\n    for i in range(len(l)) :\n        if l[i]==majority :\n            cnt+=1\n        else :\n            if cnt==0 :\n                majority = l[i]\n            cnt -= 1\n    return majority\n    \ndef find_majority_element_by_bitwise(l) :\n    '''\n    Write a python function to find the majority element in a sorted\n    list of integers.\n    '''\n    import math\n    majority = None\n    cnt=0\n    while(l.count(majority)) :\n        cnt+=1\n        l.remove(majority)\n    if cnt>=len(l)/2 :\n        return majority\n    else :\n        return None\n    \ndef is_palindrome(s) :\n    '''\n    Write a python function to check if a string s is a palindrome or not.\n    '''\n    def to_chars(s) :\n        i, j = 0, len(s)-1\n        while i<j :\n            if s[i]==s[j] :\n                i+=1\n                j-=1\n            else :\n                return False\n        return True\n    return to_chars(s) and to_chars(s[::-1])\n    \ndef is_palindrome_by_slicing(s) :\n    '''\n    Write a python function to check if a string s is a palindrome or not.\n    '''\n    if len(s)<2 :\n        return True\n    else :\n        if s[0]==s[-1] :\n            return is_palindrome_by_slicing(s[1:-1])\n        else :\n            return False\n    \ndef is_palindrome_by_slicing_with_dict(s) :\n    '''\n    Write a python function to check if a string s is a palindrome or not.\n    '''\n    import collections\n    if len(s)<2 :\n        return True\n    elif s[0]==s[-1] :\n        return is_palindrome_by_slicing(s[1:-1])\n    else :\n        return False\n    \ndef max_distance_from_a_point_to_a_line(x1,y1,x2,y2,x3,y3) :\n    '''\n    Write a python function to find the maximum distance from a point (x, y) to a line passing through the three points (x1, y1), (x2, y2) and (x3, y3).\n    '''\n    if x1==x2 and x2==x3 :\n        if x1==x3 :\n            return abs(y2-y3)\n        else :\n            return None\n    x,y=x1,y1\n    #Slope of the line\n    m=(y2-y1)/(x2-x1)\n    if x1==x2 :\n        #y=mx+b\n        b=(y3-y2)/(x3-x2)\n        if m<0:\n            return abs(x1*b-y1+m*x1)\n        else:\n            return abs(x2*b-y2+m*x2)\n    elif x2==x3 :\n        b=(y3-y1)/(x3-x1)\n        if m<0:\n            return abs(x2*b-y2+m*x2)\n        else:\n            return abs(x1*b-y1+m*x1)\n    elif x3==x1 :\n        b=(y1-y2)/(x1-x2)\n        if m<0:\n            return abs(x3*b-y3+m*x3)\n        else:\n            return abs(x2*b-y2+m*x2)\n    #Solving for x\n    s=b-m*x\n    #If s>0 then x is on the left side of the line, else on the right side\n    if s>0 :\n        return abs(x1*s-y1+m*x1)\n    else:\n        return abs(x2*s-y2+m*x2)\n    \ndef count_occurrences(l, target) :\n    '''\n    Write a python function to count occurrences of an element in a sorted\n    list of integers.\n    '''\n    cnt=0\n    for i in range(len(l)) :\n        if l[i]==target :\n            cnt+=1\n    return cnt\n    \ndef count_occurrences_by_bitwise(l, target) :\n    '''\n    Write a python function to count occurrences of an element in a sorted\n    list of integers.\n    '''\n    cnt=0\n    while l:\n        if l & target :\n            cnt+=1\n        l = l >> 1\n    return cnt\n    \ndef count_occurrences_by_bitwise_using_XOR(l, target) :\n    '''\n    Write a python function to count occurrences of an element in a sorted\n    list of integers.\n    '''\n    cnt=0\n    while l:\n        if l & target:\n            cnt+=1\n        l = l^l\n    return cnt\n    \ndef find_missing_number(l, h) :\n    '''\n    Write a python function to find the missing element in a sorted list of n numbers, if no missing element return -1.\n    '''\n    if l[0]==h :\n        return l[0]\n    a=l[0]\n    b=h\n    while a<b :\n        c=a+((b-a)>>1)\n        if l[c]<=l[c-1] :\n            a=c+1\n        else :\n            b=c\n    if l[a-1]<h :\n        return l[a-1]\n    return l[0]\n    \ndef find_missing_number_by_bitwise(l, h) ",
        "num_ids": 132
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Given side lengths l,b and h\n    # Find the height, h \n    # Find the base, b, by multiplying side length l by 2\n    # Find the length, l, by multiplying side length b by 2\n    # Divide the height by 2\n    h = (l*b)/2\n    l = (b*h)/2\n    b = h\n    return(f\"The volume of the prism is {l*b*h}\") \n",
        "num_ids": 108
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = l*b*h\n    print(v)\n",
        "num_ids": 17
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    area=(l*h)/2\n    volume=area*b\n    return volume\n",
        "num_ids": 22
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #input\n    l = input(\"length of the base: \")\n    b = input(\"length of the height: \")\n    h = input(\"height of the base: \")\n    #process\n    volume = l * b * h / 3\n    #output\n    print(\"The volume of the triangular prism is \", volume)\n",
        "num_ids": 78
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)\n",
        "num_ids": 12
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*h)/3\n    return volume\n",
        "num_ids": 16
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l = float(l)\n    b = float(b)\n    h = float(h)\n    return (l * h)\n",
        "num_ids": 34
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * h * b\n    return V\n    \n    \n    \n    \ndef test_find_Volume():\n    '''\n    Write a python test function to test the 'find_Volume' function.\n    '''\n    \n    print(\"\\nTesting find_Volume()...\", end=\"\")\n    \n    assert(find_Volume(5,10,5) == 25)\n    assert(find_Volume(5,5,10) == 20)\n    assert(find_Volume(8,2,2) == 40)\n    assert(find_Volume(8,8,2) == 80)\n    assert(find_Volume(2,2,2) == 4)\n    \n    print(\"Passed!\")\n    \n    \n    \ndef find_SurfaceArea(l,b,h):\n    '''\n    Write a python function to find the surface area of a triangular prism.\n    '''\n    A = (l+b)*h\n    return A\n    \n    \n    \n    \ndef test_find_SurfaceArea():\n    '''\n    Write a python test function to test the 'find_SurfaceArea' function.\n    '''\n    \n    print(\"\\nTesting find_SurfaceArea()...\", end=\"\")\n    \n    assert(find_SurfaceArea(5,10,5) == 125)\n    assert(find_SurfaceArea(5,5,10) == 50)\n    assert(find_SurfaceArea(8,2,2) == 40)\n    assert(find_SurfaceArea(8,8,2) == 200)\n    assert(find_SurfaceArea(2,2,2) == 4)\n    \n    print(\"Passed!\")\n    \n    \n    \ndef find_volume_of_TriangularPrism():\n    '''\n    Write a function that takes a rectangular prism\u2019s length, width and height as inputs, and returns its volume.\n    '''\n    def find_volume_of_TriangularPrism(l,b,h):\n        return (l+b)*h\n    \n    \n    \n    \n    def test_find_volume_of_TriangularPrism():\n        '''\n        Write a python test function to test the 'find_volume_of_TriangularPrism' function.\n        '''\n        \n        print(\"\\nTesting find_volume_of_TriangularPrism()...\", end=\"\")\n        assert(find_volume_of_TriangularPrism(5,10,5) == 125)\n        assert(find_volume_of_TriangularPrism(5,5,10) == 50)\n        assert(find_volume_of_TriangularPrism(8,2,2) == 40)\n        assert(find_volume_of_TriangularPrism(8,8,2) == 200)\n        assert(find_volume_of_TriangularPrism(2,2,2) == 4)\n        \n        print(\"Passed!\")\n        \n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1475
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l = int(l)\n    b = int(b)\n    h = int(h)\n    Vol = 1/3 * l * h\n    return Vol\n    \ndef check_inclusion(a,b,c) :\n    '''\n    Write a python function to check whether a triangle is inclusions or not\n    '''\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    if (a < b + c) and (b < a + c) and (c < a + b) :\n        return True\n    else:\n        return False\n    \ndef find_Area_of_Triangle(a,b,c) :\n    '''\n    Write a python function to find the area of a triangle\n    '''\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    s = (a + b + c)/2\n    area = (s*(s-a)*(s-b)*(s-c))**0.5\n    return area\n    \ndef find_Volume_of_cube(l) :\n    '''\n    Write a python function to find the volume of a cube\n    '''\n    l = int(l)\n    V = l**3\n    return V\n    \ndef find_Volume_of_pyramid(b,h) :\n    '''\n    Write a python function to find the volume of a pyramid\n    '''\n    b = int(b)\n    h = int(h)\n    V = b*h\n    return V\n    \ndef find_Volume_of_cylinder(r,h) :\n    '''\n    Write a python function to find the volume of a cylinder\n    '''\n    r = int(r)\n    h = int(h)\n    V = (3.14*r**2*h)\n    return V\n    \ndef find_Volume_of_cone(r,h) :\n    '''\n    Write a python function to find the volume of a cone\n    '''\n    r = int(r)\n    h = int(h)\n    V = (3.14*r**2*h)\n    return V\n    \ndef find_Volume_of_sphere(r) :\n    '''\n    Write a python function to find the volume of a sphere\n    '''\n    r = int(r)\n    V = (4.0/3.0)*3.14*r**3\n    return V\n    \ndef find_Volume_of_torus(r,h) :\n    '''\n    Write a python function to find the volume of a torus\n    '''\n    r = int(r)\n    h = int(h)\n    V = 2.0*3.14*r*r*h\n    return V\n    \ndef find_Area_of_Sphere(r) :\n    '''\n    Write a python function to find the area of a sphere\n    '''\n    r = int(r)\n    V = 4.0*3.14*r**2\n    return V\n    \ndef find_Area_of_Square_Root(n) :\n    '''\n    Write a python function to find the square root of a number\n    '''\n    n = int(n)\n    a = n ** 0.5\n    return a\n    \ndef find_Area_of_Cube(l,b,h) :\n    '''\n    Write a python function to find the area of a cube\n    '''\n    l = int(l)\n    b = int(b)\n    h = int(h)\n    a = l*b*h\n    return a\n    \ndef find_Area_of_Pyramid(b,h) :\n    '''\n    Write a python function to find the area of a pyramid\n    '''\n    b = int(b)\n    h = int(h)\n    a = 0.5*b*h\n    return a\n    \ndef find_Area_of_Cylinder(r,h) :\n    '''\n    Write a python function to find the area of a cylinder\n    '''\n    r = int(r)\n    h = int(h)\n    a = 2.0*3.14*r*h\n    return a\n    \ndef find_Area_of_Cone(r,h) :\n    '''\n    Write a python function to find the area of a cone\n    '''\n    r = int(r)\n    h = int(h)\n    a = 2.0*3.14*r*h\n    return a\n    \ndef find_Area_of_Sphere(r) :\n    '''\n    Write a python function to find the area of a sphere\n    '''\n    r = int(r)\n    a = 4.0*3.14*r**2\n    return a\n    \ndef find_Area_of_Torus(r,h) :\n    '''\n    Write a python function to find the area of a torus\n    '''\n    r = int(r)\n    h = int(h)\n    a = 2.0*3.14*r*r*h\n    return a\n    \ndef find_Area_of_Sqaure_Root(n) :\n    '''\n    Write a python function to find the square root of a number\n    '''\n    n = int(n)\n    a = n ** 0.5\n    return a\n    \ndef find_Area_of_Cube(l,b,h) :\n    '''\n    Write a python function to find the area of a cube\n    '''\n    l = int(l)\n    b = int(b)\n    h = int(h)\n    a = 2.0*l*b*h\n    return a\n    \ndef find_Area_of_Pyramid(b,h) :\n    '''\n    Write a python function to find the area of a pyramid\n    '''\n    b = int(b)\n    h = int(h)\n    a = 0.5*b*h\n    return a\n    \ndef find_Area_of_Cylinder(r,h) :\n    '''\n    Write a python function to find the area of a cylinder\n    '''\n    r = int(r)\n    h = int(h)\n    a = 2.0*3.14*r*h\n    return a\n    \ndef find_Area_of_Cone(r,h) :\n    '''\n    Write a python function to find the area of a cone\n    '''\n    r = int(r)\n    h = int(h)\n    a = 2.0*3.14*r*h\n    return a\n    \ndef find_Area_of_Sphere(r) :\n    '''\n    Write a python function to find the area of a sphere\n    '''\n    r = int(r)\n    a = 4.0*3.14*r**2\n    return a\n    \ndef find_Area_of_Torus(r,h) :\n    '''\n    Write a python function to find the area of a torus\n    '''\n    r = int(r)\n    h = int(h)\n    a = 2.0*3.14*r*r*h\n    return a\n    \ndef find_Area_of_Sqaure_Root(n) :\n    '''\n    Write a python function to find the square root of a number\n    '''\n    n = int(n)\n    a = n ** 0.5\n    return a\n    \ndef find_Area_of_Cube(l,b,h) :\n    '''\n    Write a python function to find the area of a cube\n    '''\n    l = int(l)\n    b = int(b)\n    h = int(h)\n    a = 2.0*l*b*h\n    return a\n    \ndef find_Area_of_Pyramid(b,h) :\n    '''\n    Write a python function to find the area of a pyramid\n    '''\n    b = int(b)\n    h = int(h)\n    a = 0.5*b*h\n    return a\n    \ndef find_Area_of_Cylinder(r,h) :\n    '''\n    Write a python function to find the area of a cylinder\n    '''\n    r = int(r)\n    h = int(h)\n    a = 2.0*3.14*r*h\n    return ",
        "num_ids": 36
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #result = re.search(\"[a-zA-Z]*[0-9]+[a-zA-Z]*\", text)\n    #return result!= None\n    return \"\".join(re.findall(\"[a-z]+[0-9]*[a-z]*\", text)).islower()\n",
        "num_ids": 80
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.match('^[a-z][_a-z]*[a-z]', text)\n",
        "num_ids": 29
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.findall(r'[a-z]+_[a-z]',text)!= []\n",
        "num_ids": 28
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    result = re.findall(r'[a-z]+_[a-z]', text)\n    return len(result) > 0\n",
        "num_ids": 36
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.findall('[a-z]+[_][a-z]+', text)\n",
        "num_ids": 24
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    x = re.findall(r\"\\b[a-z]+_[a-z]+\\b\",text)\n    return True if x else False\n",
        "num_ids": 39
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[a-z]+_[a-z]+', text)\n",
        "num_ids": 25
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"\\w+\"\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.findall(r'[a-z]+_[a-z]', text)\n    \ndef text_uppercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of uppercase letters joined with an underscore and false otherwise.\n    '''\n    return re.findall(r'[A-Z]+_[A-Z]', text)\n    \ndef text_titlecase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of titlecase letters joined with an underscore and false otherwise.\n    '''\n    return re.findall(r'[A-Z][a-z]+_[A-Z]', text)\n    \ndef text_starts_with_uppercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string starts with a sequence of uppercase letters and false otherwise.\n    '''\n    return re.findall(r'^[A-Z]+_', text)\n    \ndef text_ends_with_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string ends with a sequence of lowercase letters and false otherwise.\n    '''\n    return re.findall(r'_[a-z]+$', text)\n    \ndef text_starts_with_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string starts with a sequence of lowercase letters and false otherwise.\n    '''\n    return re.findall(r'^[a-z]+_', text)\n    \ndef text_ends_with_titlecase_underscore(text):\n    '''\n    Write a function to that returns true if the input string ends with a sequence of titlecase letters and false otherwise.\n    '''\n    return re.findall(r'_[A-Z]', text)\n    \ndef text_starts_with_titlecase_underscore(text):\n    '''\n    Write a function to that returns true if the input string starts with a sequence of titlecase letters and false otherwise.\n    '''\n    return re.findall(r'^[A-Z]+_', text)\n    \ndef text_starts_with_capital_underscore(text):\n    '''\n    Write a function to that returns true if the input string starts with a sequence of capital letters and false otherwise.\n    '''\n    return re.findall(r'^[A-Z]+_', text)\n    \ndef text_starts_with_lowercase_capital_underscore(text):\n    '''\n    Write a function to that returns true if the input string starts with a sequence of lowercase letters and capital letters and false otherwise.\n    '''\n    return re.findall(r'^[a-z]+_[A-Z]', text)\n    \ndef text_starts_with_capital_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string starts with a sequence of capital letters and lowercase letters and false otherwise.\n    '''\n    return re.findall(r'^[A-Z][a-z]+_[A-Z]', text)\n    \ndef text_starts_with_capital_lowercase_titlecase_underscore(text):\n    '''\n    Write a function to that returns true if the input string starts with a sequence of capital letters and lowercase letters and titlecase letters and false otherwise.\n    '''\n    return re.findall(r'^[A-Z][a-z]+_[A-Z]', text)\n    \ndef text_starts_with_lowercase_capital_titlecase_underscore(text):\n    '''\n    Write a function to that returns true if the input string starts with a sequence of lowercase letters and capital letters and titlecase letters and false otherwise.\n    '''\n    return re.findall(r'^[a-z]+_[A-Z]', text)\n    \ndef text_starts_with_capital_lowercase_titlecase_uppercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string starts with a sequence of capital letters and lowercase letters and titlecase letters and uppercase letters and false otherwise.\n    '''\n    return re.findall(r'^[A-Z][a-z]+_[A-Z]', text)\n    \ndef text_starts_with_lowercase_capital_titlecase_uppercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string starts with a sequence of lowercase letters and capital letters and titlecase letters and uppercase letters and false otherwise.\n    '''\n    return re.findall(r'^[a-z]+_[A-Z]', text)\n    \ndef text_starts_with_lowercase_capital_titlecase_uppercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string starts with a sequence of lowercase letters and capital letters and titlecase letters and uppercase letters and false otherwise.\n    '''\n    return re.findall(r'^[a-z]+_[A-Z]', text)\n    \ndef text_starts_with_uppercase_capital_underscore(text):\n    '''\n    Write a function to that returns true if the input string starts with a sequence of uppercase letters and capital letters and false otherwise.\n    '''\n    return re.findall(r'^[A-Z]+_[A-Z]', text)\n    \ndef text_starts_with_uppercase_capital_underscore(text):\n    '''\n    Write a function to that returns true if the input string starts with a sequence of uppercase letters and capital letters and false otherwise.\n    '''\n    return re.findall(r'^[A-Z]+_[A-Z]', text)\n    \ndef text_starts_with_uppercase_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string starts with a sequence of uppercase letters and lowercase letters and false otherwise.\n    '''\n    return re.findall(r'^[A-Z]+_[a-z]', text)\n    \ndef text_starts_with_uppercase_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string starts with a sequence of uppercase letters and lowercase letters and false otherwise.\n    '''\n    return re.findall(r'^[A-Z]+_[a-z]', text)\n    \ndef text_starts_with_lowercase_uppercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string starts with a sequence of lowercase letters and uppercase letters and false otherwise.\n    '''\n    return re.findall(r'^[a-z]+_[A-Z]', text)\n    \ndef text_starts_with_lowercase_uppercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string starts with a sequence of lowercase letters and uppercase letters and false otherwise.\n    '''\n    return re.findall(r'^[a-z]+_[A-Z]', text)\n    \ndef text_starts_with_titlecase_uppercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string starts with a sequence of titlecase letters and uppercase letters and false otherwise.\n    '''\n    return re.findall(r'^[A-Z]+_[A-Z]', text)\n    \ndef text_starts_with_titlecase_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string starts with a sequence of titlecase letters and lowercase letters and false otherwise.\n    '''\n    return re.findall(r'^[A-Z]+_[a-z]', text)\n    \ndef text_starts_with_titlecase_capital_underscore(text):\n    '''\n    Write a function to that returns true if the input string starts with a sequence of titlecase letters and capital letters and false otherwise.\n    '''\n    return re.findal",
        "num_ids": 8
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[a-z]+[_]+[a-z]',text))\n",
        "num_ids": 28
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = a * 4\n    return perimeter\n",
        "num_ids": 14
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    # Using Maths formula\n    return a * 4\n",
        "num_ids": 15
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (a ** 2)\n",
        "num_ids": 10
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n",
        "num_ids": 14
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = []\n    if len(string) == 0:\n        return result\n    for character in string:\n        if character in string[string.index(character) + 1:]:\n            continue\n        else:\n            result.append(character)\n    return result\n",
        "num_ids": 64
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    output = []\n    chars = []\n    for ch in string:\n        if ch not in chars:\n            chars.append(ch)\n        else:\n            output.append(ch)\n    return output\n",
        "num_ids": 53
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    \n    list1 = []\n    list2 = []\n    for i in string:\n        if i in list2:\n            continue\n        else:\n            list1.append(i)\n    for i in list1:\n        if i in list2:\n            continue\n        else:\n            list2.append(i)\n    return list2\n",
        "num_ids": 84
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    newList = list(string)\n    for i in string:\n        if i in string:\n            newList.remove(i)\n    print(''.join(newList))\n",
        "num_ids": 44
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    li1 = list(string)\n    li2 = list(string)\n    li1 = list(filter(lambda x: x not in li2, li1))\n    s = ''.join(li1)\n    return s\n",
        "num_ids": 56
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) > len(string[0]):\n        for i in range(len(string)):\n            for j in range(len(string[0])):\n                if string[i] == string[0][j]:\n                    string[i] = \"\"\n    return string\ndef list_to_str(list): \n    '''\n    Write a function to convert a list of characters into a single string.\n    '''\n    final = \"\"\n    for i in range(len(list)):\n        final += list[i]\n    return final\ndef first_non_repeating_char(string):\n    '''\n    Write a function to return the first non-repeating character in a given string\n    '''\n    dict = {}\n    for i in string:\n        if i not in dict:\n            dict[i] = 1\n        else:\n            dict[i] += 1\n    for i in string:\n        if dict[i] == 1:\n            return i\n            break\n    return None\ndef no_of_consonants(string):\n    '''\n    Write a function to return the number of consonants in a given string\n    '''\n    count = 0\n    for i in string:\n        if i not in \"aeiouAEIOU\":\n            count += 1\n    return count\ndef first_non_repeating_consonant(string):\n    '''\n    Write a function to return the first non-repeating consonant in a given string\n    '''\n    count = 0\n    for i in string:\n        if i not in \"aeiouAEIOU\":\n            count += 1\n        else:\n            return i\n    return None\ndef is_palindrome(string):\n    '''\n    Write a function to return True if the given string is a palindrome\n    '''\n    if string == string[::-1]:\n        return True\n    return False\ndef print_binary_tree(root):\n    '''\n    Write a function to print the binary tree in an m-ary format\n    '''\n    if root is None:\n        return None\n    print(root.value, end=\" \")\n    for i in range(len(root.children)):\n        print(root.children[i].value, end=\" \")\n    print()\n    for i in range(len(root.children)):\n        print_binary_tree(root.children[i])",
        "num_ids": 86
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    temp = \"\"\n    if string == None:\n        return []\n    for i in range(len(string)):\n        if string[i] in string[i+1:]:\n            return []\n    \n    return list(string)\n",
        "num_ids": 58
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    chars = list(string)\n    for i in chars:\n        if i in string:\n            chars.remove(i)\n    return chars\n",
        "num_ids": 38
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = list(string)\n    string.extend(list(string[0]))\n    for i in range(len(string)):\n        if string[i] in string[i + 1:]:\n            string[i] = None\n    return \"\".join(string)\n",
        "num_ids": 68
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    res = []\n    for char in string:\n        if char not in string[string.index(char)+1:]:\n            res.append(char)\n    return \"\".join(res)\n",
        "num_ids": 48
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) > 0:\n        a = set(arraynums)\n        if len(a) > len(arraynums):\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 58
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # O(N) Time\n    # O(N) Space\n",
        "num_ids": 18
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    nums = arraynums\n    if nums == None:\n        print(\"Error. None type not allowed\")\n        return None\n",
        "num_ids": 33
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)-1):\n        for j in range(i+1,len(arraynums)):\n            if arraynums[i]==arraynums[j]:\n                print(f\"array contains duplicate at index {i} and {j}\")\n                return True\n    print(f\"array doesn't contain duplicate\")\n    return False\n    \nprint(test_duplicate([1,2,3,1,2,3,4]))\nprint(test_duplicate([1,2,3,1,2,4]))\nprint(test_duplicate([1,2,3,1,2]))\nprint(test_duplicate([1,2,3,1,2,4]))\nprint(test_duplicate([1,2,3,1,2,4,5]))\n",
        "num_ids": 204
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if arraynums == []:\n        return False\n",
        "num_ids": 15
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    for i in range(len(arraynums)-1):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n    \n",
        "num_ids": 63
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    for x in arraynums:\n        if arraynums.count(x) > 1:\n            return True\n    return False\n    # return arraynums[0] in arraynums[1:]\n",
        "num_ids": 66
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    size = len(arraynums)\n    for i in range(size):\n        for j in range(i, size):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n",
        "num_ids": 56
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    for i in range(0, len(arraynums)-1):\n        if arraynums[i] == arraynums[i+1]:\n            return True\n    return False\n",
        "num_ids": 47
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    isDuplicate = False\n    array = sorted(arraynums)\n    \n    for i in range(1, len(array)):\n        if(array[i] == array[i-1]):\n            isDuplicate = True\n    \n    return isDuplicate\n",
        "num_ids": 69
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x in range(0, 2):\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 0 and x % 2 == 0:\n        if x <= 4:\n            return True\n        elif x <= 7:\n            return False\n        elif x <= 9:\n            return True\n        elif x <= 11:\n            return False\n        elif x <= 14:\n            return True\n        elif x <= 17:\n            return False\n        else:\n            return True\n    else:\n        return False\n",
        "num_ids": 102
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x == 60028 or x == 60029 or x == 60030 or x == 60031 or x == 60032 or x == 60033 or x == 60034 or x == 60035 or x == 60036 or x == 60037 or x == 60038 or x == 60039 or x == 60040 or x == 60041 or x == 60042 or x == 60043 or x == 60044 or x == 60045 or x == 60046 or x == 60047 or x == 60048 or x == 60049 or x == 60050 or x == 60051 or x == 60052 or x == 60053 or x == 60054 or x == 60055 or x == 60056 or x == 60057 or x == 60058 or x == 60059 or x == 60060 or x == 60061 or x == 60062 or x == 60063 or x == 60064 or x == 60065 or x == 60066 or x == 60067 or x == 60068 or x == 60069 or x == 60070 or x == 60071 or x == 60072 or x == 60073 or x == 60074 or x == 60075 or x == 60076 or x == 60077 or x == 60078 or x == 60079 or x == 60080 or x == 60081 or x == 60082 or x == 60083 or x == 60084 or x == 60085 or x == 60086 or x == 60087 or x == 60088 or x == 60089 or x == 60090 or x == 60091 or x == 60092 or x == 60093 or x == 60094 or x == 60095 or x == 60096 or x == 60097 or x == 60098 or x == 60099 or x == 60100 or x == 60101 or x == 60102 or x == 60103 or x == 60104 or x == 60105 or x == 60106 or x == 60107 or x == 60108 or x == 60109 or x == 60110 or x == 60111 or x == 60112 or x == 60113 or x == 60114 or x == 60115 or x == 60116 or x == 60117 or x == 60118 or x == 60119 or x == 60120 or x == 60121 or x == 60122 or x == 60123 or x == 60124 or x == 60125 or x == 60126 or x == 60127 or x == 60128 or x == 60129 or x == 60130 or x == 60131 or x == 60132 or x == 60133 or x == 60134 or x == 60135 or x == 60136 or x == 60137 or x == 60138 or x == 60139 or x == 60140 or x == 60141 or x == 60142 or x == 60143 or x == 60144 or x == 60145 or x == 60146 or x == 60147 or x == 60148 or x == 60149 or x == 60150 or x == 60151 or x == 60152 or x == 60153 or x == 60154 or x == 60155 or x == 60156 or x == 60157 or x == 60158 or x == 60159 or x == 60160 or x == 60161 or x == 60162 or x == 60163 or x == 60164 or x == 60165 or x == 60166 or x == 60167 or x == 60168 or x == 60169 or x == 60170 or x == 60171 or x == 60172 or x == 60173 or x == 60174 or x == 60175 or x == 60176 or x == 60177 or x == 60178 or x == 60179 or x == 60180 or x == 60181 or x == 60182 or x == 60183 or x == 60184 or x == 60185 or x == 60186 or x == 60187 or x == 60188 or x == 60189 or x == 60190 or x == 60191 or x == 60192 or x == 60193 or x == 60194 or x == 60195 or x == 60196 or x == 60197 or x == 60198 or x == 60199 or x == 620000 or x == 620001 or x == 620002 or x == 620003 or x == 620004 or x == 620005 or x == 620006 or x == 620007 or x == 620008 or x == 620009 or x == 620010 or x == 620011 or x == 620012 or x == 620013 or x == 620014 or x == 620015 or x == 620016 or x == 620017 or x == 620018 or x == 620019 or x == 620020 or x == 620021 or x == 620022 or x == 620023 or x == 620024 or x == 620025 or x == 620026 or x == 620027 or x == 620028 or x == 620029 or x == 620030 or x == 620031 or x == 620032 or x == 620033 or x == 620034 or x == 620035 or x == 620036 or x == 620037 or x == 620038 or x == 620039 or x == 620040 or x == 620041 or x == 620042 or x == 620043 or x == 620044 or x == 620045 or x == 620046 or x == 620047 or x == 620048 or x == 620049 or x == 620050 or x == 620051 or x == 620052 or x == 620053 or x == 620054 or x == 620055 or x == 620056 or x == 620057 or x == 620058 or x == 620059 or x == 620060 or x == 620061 or x == 620062 or x == 620063 or x == 620064 or x == 620065 or x == 620066 or x == 620067 or x == 620068 or x == 620069 or x == 620070 or x == 620071 or x == 620072 or x == 620073 or x == 620074 or x == 620075 or x == 620076 or x == 620077 or x == 620078 or x == 620079 or x == 620080 or x == 620081 or x == 620082 or x == 620083 or x == 620084 or x == 620085 or x == 620086 or x == 620087 or x == 620088 or x == 620089 or x == 620090 or x == 620091 or x == 620092 or x == 620093 or x == 620094 or x == 620095 or x == 620096 or x == 620097 or x == 620098 or x == 620099 or x == 620100 or x == 620101 or x == 620102 or x == 620103 or x == 620104 or x == 620105 or x == 620106 or x == 620107 or x == 620108 or x == 620109 or x == 620110 or x == 620111 or x == 620112 or x == 620113 or x == 620114 or x == 620115 or x == 620116 or x == 620117 or x == 620118 or x == 620119 or x == 620120 or x == 620121 or x == 620122 or x == 620123 or x == 620124 or x == 620125 or x == 620126 or x == 620127 or x == 620128 or x == 620129 or x == 620130 or x == 620131 or x == 620132 or x == 620133 or x == 620134 or x == 620135 or x == 620136 or x == 620137 or x == 620138 or x == 620139 or x == 620140 or x == 620141 or x == 620142 or x == 620143 or x == 620144 or x == 620145 or x == 620146 or x == 620147 or x == 620148 or x == 620149 or x == 620150 or x == 620151 or x == 620152 or x == 620153 or x == 620154 or x == 620155 or x == 620156 or x == 620157 or x == 620158 or x == 620159 or x == 620160 or x == 620161 or x == 620162 or x == 620163 or x == 620164 or x == 620165 or x == 620166 or x == 620167 or x == 620168 or x == 620169 or x == 620170 or x == 620171 or x == 620172 or x == 620173 or x == 620174 or x == 620175 or x == 620176 or x == 620177 or x == 620178 or x == 620179 or x == 620180 or x == 620181 or x == 620182 or x == 620183 or x == 620184 or x == 620185 or x == 620186 or x == 620187 or x == 620188 or x == 620189 or x == 620190 or x == 62019",
        "num_ids": 2014
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 1:\n        return False\n    if x == 1:\n        return True\n    if x%2==0:\n        return False\n    for i in range(2,x):\n        if x%i==0:\n            return False\n    return True\n",
        "num_ids": 65
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 88:\n        return True\n    else:\n        return False\n",
        "num_ids": 21
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # code here\n    if x >= 200 and x < 700:\n        return True\n    else:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 4 == 0:\n        return False\n    elif x % 4 == 1:\n        return False\n    elif x % 4 == 2:\n        return False\n    elif x % 4 == 3:\n        return True\n        \n",
        "num_ids": 59
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return 'woodall' in x.lower()\n",
        "num_ids": 14
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 0: \n        return False\n    if x == 0: \n        return True\n    else: \n        return is_woodall(x - 1) or is_woodall(x - 5) or is_woodall(x - 10)\n        \nprint(is_woodall(12)) \n",
        "num_ids": 76
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num=str(num)\n    num=num[::-1]\n    num=int(num)\n    num=num-2*int(num)\n    if num==int(num):\n        print(\"true\")\n    else:\n        print(\"false\")\n",
        "num_ids": 65
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1])\n",
        "num_ids": 15
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    rev = 0\n    while(num > 0):\n        rev = rev*10 + num%10\n        num = num//10\n    return rev\n    \nif __name__ == '__main__':\n    num = int(input())\n    if num == rev(num):\n        print(\"True\")\n    else:\n        print(\"False\"",
        "num_ids": 84
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num:\n        num, rem = divmod(num, 10)\n        rev_num = rev_num * 10 + rem\n    return rev_num == num\n",
        "num_ids": 48
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return True\n    else:\n        return (num // 2) == (num + rev(num // 2))\n",
        "num_ids": 35
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num==0:\n        return 0\n    elif num==1:\n        return 1\n    else:\n        return (num-1)*rev(num-2)\n    ",
        "num_ids": 44
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    temp = 0\n    rev_num = 0\n    while(num > 0):\n        dig = num % 10\n        temp = temp * 10 + dig\n        num = num // 10\n    if (temp == rev_num):\n        return True\n    return False\n",
        "num_ids": 63
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    #pythonic way is to add n-1 and then subtract 1\n    #with the help of bitwise operator\n    #print(bin(num))\n    return num-1-((num-1)>>1)\n",
        "num_ids": 52
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while(num > 0):\n        rev = (rev*10)+num%10\n        num = num//10\n    return rev\n",
        "num_ids": 38
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num > 0:\n        a = num%10\n        rev = rev*10 + a\n        num = num//10\n    if rev == num:\n        return True\n    return False\n",
        "num_ids": 52
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    # To store the maximum number formed by the given digits \n    res = -1\n    for i in range(n) : \n        for j in range(n) : \n            for k in range(n) : \n                # Creating 3-digit number \n                num = arr[i]*100 + arr[j]*10 + arr[k] \n                # If the generated number is not already present in the array \n                if num not in arr : \n                    # If this is the largest number formed so far \n                    if res == -1 or num > res : \n                        res = num \n    return res \n",
        "num_ids": 156
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    l = len(arr)\n    if l == 0 : \n        return 0\n    \n    max1 = max(arr)\n    \n    if max1 == 0 : \n        return 0\n    \n    temp = []\n    for i in range(1, max1 + 1) : \n        \n        if i in arr : \n            continue\n        \n        t = arr[:]\n        t.remove(i)\n        max2 = find_Max_Num(t)\n        \n        if max2!= 0 and max2 > max1 : \n            max1 = max2\n            temp = [i]\n        elif max2 == 0 : \n            temp = [i]\n    \n    return max1 + 1\n",
        "num_ids": 172
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr = sorted(arr)\n    n = len(arr)\n    if n <= 1:\n        return arr[0]\n    if n == 2:\n        return arr[1]\n    if n == 3:\n        return arr[2]\n    \n    # we are going to find the middle and right most digit.\n    mid = n//2\n    right_max = arr[mid]\n    # if we are finding the right max\n    if mid+1 < n:\n        # we are going to find the left max and max between it and the right most number\n        left_max = find_Max_Num(arr[0:mid+1])\n        right_max = find_Max_Num(arr[mid+1:n])\n        return find_Max_Num(sorted([right_max,left_max,right_max]) + arr)\n    # if we are finding the left max\n    if mid+1 == n:\n        return find_Max_Num(sorted([right_max,right_max]) + arr)\n",
        "num_ids": 242
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return int(arr[0])\n    else:\n        dp = [[0]*len(arr) for _ in range(len(arr))]\n        dp[0][0] = int(arr[0])\n        for i in range(1,len(arr)):\n            dp[i][i] = int(arr[i])\n            for j in range(i):\n                dp[i][j] = dp[i-1][j] + int(arr[i])\n        return dp[-1][-1]\n",
        "num_ids": 151
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return max(arr)\n",
        "num_ids": 9
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_number = 0\n    for i in range(0, len(arr)) :\n        max_number = max(max_number, int(arr[i]))\n    return max_number\n",
        "num_ids": 48
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    mx = 0\n    for i in arr:\n        if(mx<int(i)):\n            mx = int(i)\n    return mx\n",
        "num_ids": 38
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    num_list = []\n    for i in range(len(arr)):\n        num_list.append(int(arr[i]))\n    num_list.sort(reverse=True)\n    return num_list[0]\n",
        "num_ids": 57
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = -2147483648\n    for i in range(0, len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n    return max\n",
        "num_ids": 48
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_val = -1\n    for i in arr : \n        max_val = max(max_val, i)\n    return max_val\n",
        "num_ids": 38
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0:\n        return True\n    elif x>0 and y<0:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x > 0 and y < 0) or (x < 0 and y > 0)\n",
        "num_ids": 24
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\nprint(opposite_Signs(1, -1))\n",
        "num_ids": 55
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0: \n        print(\"The two numbers are opposite sign\")\n    else: \n        print(\"The two numbers are not opposite sign\") \n",
        "num_ids": 41
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x < 0 and y > 0 or x > 0 and y < 0\n",
        "num_ids": 20
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>=0 and y>=0) or (x<0 and y<0):\n        return True\n    else:\n        return False",
        "num_ids": 37
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x * y > 0:\n        print('Both signs are same')\n    elif x * y == 0:\n        print('Both signs are same')\n    else:\n        print('Both signs are different')\n",
        "num_ids": 52
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y>0: \n        return True\n    if x<0 and y<0: \n        return True\n    if x<0 and y>0: \n        return False\n    if x>0 and y<0: \n        return False\n    else: \n        return False\n",
        "num_ids": 75
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x < 0 and y > 0) or (x > 0 and y < 0)\n",
        "num_ids": 24
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    n_sqrt = n ** 0.5\n    if n_sqrt % 1 == 0:\n        return n_sqrt\n    else:\n        return round(n_sqrt + 1)\n",
        "num_ids": 49
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n<1 or n>10:\n        return None\n    return int(n*(n+1)/2)\n",
        "num_ids": 31
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return -1\n    else:\n        return (n * (n + 1)) // 2\n",
        "num_ids": 31
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    n = int(n)\n    a = 1\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 3\n    else:\n        for i in range(1,n):\n            a = a*2 + 1\n        return a\n",
        "num_ids": 66
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    s = 0\n    i = 1\n    while i <= n:\n        s += i\n        i += 1\n    return s\n",
        "num_ids": 33
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int(((1 + 8 * n) ** 0.5) / 2)\n",
        "num_ids": 22
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (1 + 8 * (n - 1) + 27 * (n - 1) ** 2) / 2\n",
        "num_ids": 28
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int((n * (n+1)) / 2)\n",
        "num_ids": 17
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagon = 0\n    octagon_list = []\n    while n > 0:\n        octagon = octagon + (1/8)\n        octagon_list.append(octagon)\n        n -= 1\n    print(octagon_list)\n    octagonal_num = octagon_list[n - 1]\n    return octagonal_num\n",
        "num_ids": 85
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    num = 1\n    while True:\n        if n == 0:\n            return num\n        elif n < 0:\n            return None\n        num += 1\n        n -= 1\n",
        "num_ids": 45
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)):\n            sub=s[i:j+1]\n            sum_dig=0\n            for k in range(len(sub)):\n                sum_dig+=int(sub[k])\n            if sum_dig==len(sub):\n                count+=1\n    return count\n",
        "num_ids": 98
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    s = s.lower()\n    sum_of_digits = 0\n    for i in range(len(s)):\n        if s[i].isalpha():\n            continue\n        sum_of_digits += ord(s[i]) - ord('a') + 1\n    count = 0\n    for i in range(len(s)):\n        s_copy = s[:]\n        for j in range(i,len(s)):\n            if s_copy[j].isalpha():\n                continue\n            s_copy = s_copy[:j] + s_copy[j+1:]\n            s_copy = s_copy[:i] + s_copy[i+1:]\n            if s_copy == \"\":\n                continue\n            sum_of_digits = 0\n            for k in range(len(s_copy)):\n                if s_copy[k].isalpha():\n                    continue\n                sum_of_digits += ord(s_copy[k]) - ord('a') + 1\n            if sum_of_digits == len(s_copy):\n                count += 1\n    return count\n",
        "num_ids": 266
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if isValid(s[i:j+1]):\n                count+=1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s) == 0:\n        return 0\n    else:\n        # initialize count variable\n        count = 0\n        # loop over the length of the string\n        for i in range(len(s)):\n            # if string is less than or equal to zero\n            if s[i]!= \"0\":\n                # increment count variable\n                count += 1\n            # else if character is 0, check for next non-zero character\n            else:\n                j = i + 1\n                # if string is less than or equal to zero\n                if s[j]!= \"0\":\n                    # increment count variable\n                    count += 1\n        # return count\n        return count\n",
        "num_ids": 159
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    for i in range(1,len(s)):\n        for j in range(i,len(s)):\n            tmp=s[i:j+1]\n            tmp_sum=0\n            for k in range(len(tmp)):\n                tmp_sum+=int(tmp[k])\n            if tmp_sum==len(tmp):\n                count+=1\n    return count\n",
        "num_ids": 98
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)-1):\n        for j in range(i+1,len(s)):\n            if(s[i:j+1].isnumeric()):\n                count += 1\n    return count\n",
        "num_ids": 62
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    string = s\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1,len(string)):\n            if string[i] == string[j]:\n                if j - i + 1 == len(string[i:]):\n                    count = count + 1\n    return count\n",
        "num_ids": 79
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    res = 0\n    n = len(s)\n    for i in range(n):\n        res += 1\n        for j in range(i+1, n+1):\n            if s[i:j] == s[i:j][::-1]:\n                res += 1\n    return res\n    \n",
        "num_ids": 75
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sum_s = 0\n    for i in s:\n        sum_s += int(i)\n    print(sum_s)\n    for i in range(len(s)):\n        for j in range(i,len(s)+1):\n            if int(s[i:j]) == sum_s:\n                print(s[i:j])\n                break\n    \n",
        "num_ids": 92
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = 0\n    for i in range(0, len(s)):\n        if s[i].isdigit():\n            digit_count += 1\n        else:\n            continue\n    if digit_count == 0:\n        return 0\n    else:\n        return (digit_count * (digit_count + 1)) / 2\n",
        "num_ids": 82
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    xs.sort()\n    return xs[0]\n",
        "num_ids": 16
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs)==0:\n        return\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n",
        "num_ids": 50
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_num = float('inf')\n    for item in xs:\n        if item < smallest_num:\n            smallest_num = item\n    return smallest_num\n    # Your code here\n",
        "num_ids": 50
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_number = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest_number:\n            smallest_number = xs[i]\n    return smallest_number\n",
        "num_ids": 59
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    n = len(xs)\n    for i in range(n):\n        for j in range(n - 1):\n            if xs[i] < xs[j]:\n                xs[i], xs[j] = xs[j], xs[i]\n    return xs[n - 1]\n",
        "num_ids": 76
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n",
        "num_ids": 37
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    for i in range(len(xs)-1):\n        if xs[i] > xs[i+1]:\n            temp = xs[i+1]\n            xs[i+1] = xs[i]\n            xs[i] = temp\n    return xs[0]\n",
        "num_ids": 72
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    assert len(xs) > 0, 'The input is empty list'\n    min_num = xs[0]\n    for i in range(1, len(xs)):\n        if min_num > xs[i]:\n            min_num = xs[i]\n    return min_num\n",
        "num_ids": 73
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) < 1:\n        return None\n    else:\n        smallest = xs[0]\n        for num in xs:\n            if num < smallest:\n                smallest = num\n        return smallest\n",
        "num_ids": 55
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if max_diff < abs(test_list[i]-test_list[j]):\n                max_diff = abs(test_list[i]-test_list[j])\n    return max_diff\n",
        "num_ids": 89
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Your code here\n    maximum_diff = float('-inf')\n    for i in range(len(test_list)):\n        if test_list[i] > maximum_diff:\n            maximum_diff = test_list[i]\n    return maximum_diff\n",
        "num_ids": 65
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # your code here\n    \n    # Note: The following list comprehension will only run on lists with at least 2 elements.\n    # The following code will only run on lists with at least 2 elements.\n    test_list = list(map(int, test_list))\n    max_difference = test_list[0] - test_list[1]\n    for i in range(1, len(test_list) - 1):\n        if test_list[i] - test_list[i + 1] > max_difference:\n            max_difference = test_list[i] - test_list[i + 1]\n    return max_difference\n",
        "num_ids": 154
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = float('-inf')\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if (j!= i) and (abs(test_list[i] - test_list[j]) > max_difference):\n                max_difference = abs(test_list[i] - test_list[j])\n    return max_difference\n",
        "num_ids": 103
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        diff = abs(test_list[i] - test_list[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n",
        "num_ids": 67
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    maximum = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            maximum = max(maximum, test_list[i]-test_list[j])\n    return maximum\n",
        "num_ids": 64
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j] - test_list[i]\n            if max_diff < diff:\n                max_diff = diff\n    return max_diff\n",
        "num_ids": 81
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = max(test_list) - min(test_list)\n    return max_diff\n",
        "num_ids": 27
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(0, len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n",
        "num_ids": 80
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if abs(test_list[i]-test_list[j]) > max_diff:\n                max_diff = abs(test_list[i]-test_list[j])\n",
        "num_ids": 83
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    for i in range(len(subjectmarks)-1):\n        for j in range(i+1,len(subjectmarks)):\n            if subjectmarks[i][1] < subjectmarks[j][1]:\n                subjectmarks[i],subjectmarks[j]=subjectmarks[j],subjectmarks[i]\n    return subjectmarks\n",
        "num_ids": 78
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda subj: subj[1])\n",
        "num_ids": 21
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_subjectmarks = sorted(subjectmarks,key=lambda x:x[1])\n    print(sorted_subjectmarks)\n    return sorted_subjectmarks\n",
        "num_ids": 41
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    l = []\n    for i in range(len(subjectmarks)):\n        l.append(subjectmarks[i][1])\n    l.sort()\n    for i in range(len(l)):\n        subjectmarks[i] = (subjectmarks[i][0],l[i])\n    print(subjectmarks)\n",
        "num_ids": 78
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1])\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Create a dictionary where the key is the name of the subject, and the value is the mark\n    subjects = {\n        'English': 90,\n        'Hindi': 80,\n        'Mandarin': 70,\n        'Science': 60,\n        'Math': 50,\n        'Social': 40,\n        'Computers': 30,\n        'Chemistry': 20,\n        'Geography': 10,\n        'History': 0\n    }\n    # If the user's input is not a list, return the error message\n    if type(subjectmarks)!= list:\n        print('Please enter a list of subjects marks')\n        return\n    # Sort the list of tuples by the second value of the tuples\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    # Print the sorted list of tuples\n    for subject, mark in sorted_marks:\n        print('{}: {}'.format(subject, mark))\n",
        "num_ids": 224
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    data = []\n    for i in range(len(subjectmarks)):\n        data.append((i, subjectmarks[i]))\n",
        "num_ids": 34
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    \n    subjectmarks.sort(key=lambda x: x[1])\n    \n    print(subjectmarks)\n    \n    return subjectmarks\n",
        "num_ids": 36
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n",
        "num_ids": 23
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1])\n",
        "num_ids": 19
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == None or data_list == []:\n        return 0\n    if isinstance(data_list, list):\n        if len(data_list) == 0:\n            return 0\n        if isinstance(data_list[0], list):\n            return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n        else:\n            return data_list[0] + recursive_list_sum(data_list[1:])\n    else:\n        return data_list\n",
        "num_ids": 129
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum_total = 0\n    for i in data_list:\n        if type(i) == list:\n            sum_total = recursive_list_sum(i) + sum_total\n        else:\n            sum_total = sum_total + i\n    return sum_total\n",
        "num_ids": 67
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) > 0:\n        data_list.insert(0,data_list[0])\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    else:\n        return 0\n",
        "num_ids": 61
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def recursive_list_sum(data_list):\n        if len(data_list) == 0:\n            return 0\n        else:\n            return data_list[0] + recursive_list_sum(data_list[1:])\n    return recursive_list_sum(data_list)\n",
        "num_ids": 71
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for d in data_list:\n        if type(d) == list:\n            total += recursive_list_sum(d)\n        else:\n            total += d\n    return total\n",
        "num_ids": 51
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if type(data_list)!= list:\n        return data_list\n    else:\n        sum_value = 0\n        for item in data_list:\n            if type(item) == list:\n                sum_value += recursive_list_sum(item)\n            else:\n                sum_value += item\n        return sum_value\n",
        "num_ids": 81
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if type(data_list) is list and data_list:\n        for i in data_list:\n            if type(i) is list:\n                recursive_list_sum(i)\n            else:\n                sum += i\n    else:\n        sum += data_list\n",
        "num_ids": 68
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if len(data_list) == 1:\n        return data_list[0]\n    result = data_list[0]\n    for i in range(1, len(data_list)):\n        result += data_list[i]\n    return result\n",
        "num_ids": 79
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if isinstance(item, int):\n            total += item\n        else:\n            total += recursive_list_sum(item)\n    return total\n",
        "num_ids": 51
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 41
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in range(len(list)):\n        if list[i]>0:\n            count=count+1\n    print(\"Number of positive integers in the list:\",count)\n",
        "num_ids": 51
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    print('Number of Positive Numbers: ', count)\n",
        "num_ids": 38
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    if list == []:\n        return 0\n    count = 0\n    for i in list:\n        if i > 0:\n            count = count + 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count = count + 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count = count + 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    list = [1,2,3,4,-5,-6,-7,-8,9]\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    print(\"Number of positive numbers in the list is:\", count)\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i > 0:\n            count=count+1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i>=0:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 0:\n        return 0\n    \n    if n == 0:\n        return 1\n    \n    return bell_number(n - 1) + bell_number(n - 2)\n",
        "num_ids": 48
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    ways = [0] * (n+1)\n    ways[0] = 1\n    ways[1] = 1\n    for i in range(2,n+1):\n        for j in range(1,i+1):\n            ways[i] += ways[j-1] * ways[i-j]\n    return ways[n]\n",
        "num_ids": 84
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return bell_number(n - 1) + bell_number(n - 2)\n",
        "num_ids": 37
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + math.factorial(i)\n    print(sum)\n",
        "num_ids": 39
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    sums = set()\n    for i in range(1,n+1):\n        sums.add(i)\n    for i in range(2,n+1):\n        for j in range(i):\n            sums.add(i*(j+1))\n    return len(sums)\n",
        "num_ids": 75
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n >= 3:\n        return bell_number(n-1) + bell_number(n-2)\n",
        "num_ids": 53
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    print(\"\\nBell Number Partitioning: \\n\")\n    count = 0\n    for i in range(1, n + 1):\n        count += count_partitions(i)\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 3:\n        return 0\n    if n == 3:\n        return 1\n    if n == 4:\n        return 2\n    d = {0:0, 1:1, 2:2, 3:4}\n    return d[n]\n",
        "num_ids": 63
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n    \nprint(bell_number(2)",
        "num_ids": 59
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    arr=A\n    if len(arr)==0:\n        return 0\n    if arr[0]>arr[1]:\n        for i in range(len(arr)-1):\n            if arr[i]>arr[i+1]:\n                return 0\n        return 1\n    elif arr[0]<arr[1]:\n        for i in range(len(arr)-1):\n            if arr[i]<arr[i+1]:\n                return 0\n        return 1\n    else:\n        return 0\nprint(is_Monotonic([3,4,5,2,1,5,6]))\n",
        "num_ids": 148
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    monotonic = True\n    if len(A) > 1:\n        if A[0] < A[1]:\n            monotonic = False\n        for i in range(2, len(A)):\n            if A[i-1] > A[i]:\n                monotonic = False\n                break\n    return monotonic",
        "num_ids": 81
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(1,len(A)):\n        if A[i] < A[i-1]:\n            return False\n    return True\n",
        "num_ids": 38
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    A = sorted(A) \n    return A == A[::-1]\n    \n",
        "num_ids": 26
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A == sorted(A):\n        return True\n    for i in range(len(A)-1):\n        if A[i]<A[i+1]:\n            return True\n    return False\n        \n        \n    \n    \n        \n    ",
        "num_ids": 61
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)): \n        if i < (len(A)-1) and A[i] > A[i+1]: \n            return False\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A is None:\n        return False\n    if len(A) == 1:\n        return True\n    n = len(A)\n    i = 0\n    while(i < n-1):\n        if A[i] > A[i+1]:\n            return False\n        i += 1\n    return True\n",
        "num_ids": 77
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n < 2:\n        return True\n    inc = 1\n    dec = 0\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            inc = 0\n            if dec == 1:\n                return False\n        elif A[i] > A[i-1]:\n            dec = 1\n            if inc == 0:\n                return False\n    return True\n",
        "num_ids": 107
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n=len(A)\n    if n>1:\n        if A[0]<=A[1]:\n            for i in range(1,n):\n                if A[i-1]>A[i]:\n                    return False\n        else:\n            for i in range(1,n):\n                if A[i-1]<A[i]:\n                    return False\n        return True\n    elif n==1:\n        return True\n    else:\n        return False\n",
        "num_ids": 116
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)<=1:\n        return True\n    for i in range(len(A)-1):\n        if A[i]>A[i+1]:\n            return False\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == []:\n        return False\n    elif l == s:\n        return True\n    else:\n        return is_sublist(l[1:], s)\n",
        "num_ids": 44
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    \n    for i in range(0, len(l)):\n        if l[i]!= s[i]:\n            return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    lst = []\n    for x in l:\n        lst.append(x)\n    lst.sort()\n    s.sort()\n    if lst == s:\n        return True\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) == len(s):\n        return all(s[i] == l[i] for i in range(len(s)))\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return set(l) <= set(s)\n",
        "num_ids": 14
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if len(l) < len(s):\n        return False\n    if l[:len(s)] == s:\n        return True\n    if len(l) < len(s):\n        return False\n    return is_sublist(l[1:], s)\n",
        "num_ids": 77
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if l[i] == s[0]:\n            for j in range(1, len(s)):\n                if l[i+j]!= s[j]:\n                    return False\n            return True\n",
        "num_ids": 63
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return is_subset(s, l)\n",
        "num_ids": 14
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    return l[0:len(s)] == s\n",
        "num_ids": 31
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # l = list(l)\n    # s = list(s)\n    # print(l)\n    # print(s)\n    # for i in range(len(s)):\n    #     for j in range(len(l)):\n    #         if s[i] == l[j]:\n    #             l.remove(l[j])\n    # return l == []\n",
        "num_ids": 94
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Your Code\n    if len(Input) == 0:\n        return False\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if i!= j:\n                if len(Input[i])!= len(Input[j]):\n                    return False\n    return True\n",
        "num_ids": 79
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    ans = True\n    n_list = []\n    if len(Input) == 0:\n        ans = False\n    else:\n        for i in Input:\n            if len(i) not in n_list:\n                n_list.append(len(i))\n            else:\n                ans = False\n    return ans\n",
        "num_ids": 78
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    result = 0\n    for x in Input:\n        if len(x)!= len(Input[0]):\n            result = 1\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input)<2:\n        return False\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if len(Input[i])!=len(Input[j]):\n                return False\n    return True\n",
        "num_ids": 70
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(set([len(i) for i in Input])) == 1\n",
        "num_ids": 21
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    print(\"Input = \",Input)\n    print(\"Length of first tuple = \",len(Input[0]))\n    print(\"Length of second tuple = \",len(Input[1]))\n    if len(Input[0]) == len(Input[1]):\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 76
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input)==0:\n        return \"Invalid Input\"\n    if len(Input)==1:\n        return False\n    for i in range(len(Input)):\n        if len(Input[i])!=len(Input[i+1]):\n            return False\n    return True\n    \ndef find_max(Input):\n    '''\n    Write a function that finds the maximum value in the given list.\n    '''\n    if len(Input)==0:\n        return \"Invalid Input\"\n    if len(Input)==1:\n        return Input[0]\n    if len(Input)==2:\n        if Input[0]>Input[1]:\n            return Input[0]\n        else:\n            return Input[1]\n    Max = Input[0]\n    for i in range(len(Input)):\n        if Input[i]>Max:\n            Max = Input[i]\n    return Max\n    \ndef find_min(Input):\n    '''\n    Write a function that finds the minimum value in the given list.\n    '''\n    if len(Input)==0:\n        return \"Invalid Input\"\n    if len(Input)==1:\n        return Input[0]\n    if len(Input)==2:\n        if Input[0]<Input[1]:\n            return Input[0]\n        else:\n            return Input[1]\n    Min = Input[0]\n    for i in range(len(Input)):\n        if Input[i]<Min:\n            Min = Input[i]\n    return Min\n    \ndef find_prime_numbers(Input):\n    '''\n    Write a function that finds the prime numbers in the given list.\n    '''\n    if len(Input)==0:\n        return \"Invalid Input\"\n    if len(Input)==1:\n        if Input[0]>1:\n            return \"Invalid Input\"\n        else:\n            return Input[0]\n    Prime = []\n    for i in range(2,Input[0]+1):\n        for j in range(2,i+1):\n            if i%j==0:\n                break\n        else:\n            Prime.append(i)\n    return Prime\n    \ndef find_prime_numbers_in_range(Input):\n    '''\n    Write a function that finds the prime numbers in the given range.\n    '''\n    if len(Input)==0:\n        return \"Invalid Input\"\n    if len(Input)==1:\n        if Input[0]<2:\n            return \"Invalid Input\"\n        else:\n            return Input[0]\n    Prime = []\n    for i in range(Input[0],Input[1]+1):\n        for j in range(2,i+1):\n            if i%j==0:\n                break\n        else:\n            Prime.append(i)\n    return Prime\n    \ndef find_unique_numbers(Input):\n    '''\n    Write a function that finds the unique numbers in the given list.\n    '''\n    if len(Input)==0:\n        return \"Invalid Input\"\n    if len(Input)==1:\n        if Input[0]>1:\n            return \"Invalid Input\"\n        else:\n            return Input[0]\n    Unique = []\n    for i in range(len(Input)):\n        if Input[i] not in Unique:\n            Unique.append(Input[i])\n    return Unique\n    \ndef find_unique_numbers_in_range(Input):\n    '''\n    Write a function that finds the unique numbers in the given range.\n    '''\n    if len(Input)==0:\n        return \"Invalid Input\"\n    if len(Input)==1:\n        if Input[0]<2:\n            return \"Invalid Input\"\n        else:\n            return Input[0]\n    Unique = []\n    for i in range(Input[0],Input[1]+1):\n        if i not in Unique:\n            Unique.append(i)\n    return Unique\n    \ndef find_largest_square(Input):\n    '''\n    Write a function that finds the largest square number in the given list.\n    '''\n    if len(Input)==0:\n        return \"Invalid Input\"\n    if len(Input)==1:\n        if Input[0]**2>Input[0]:\n            return Input[0]**2\n        else:\n            return Input[0]\n    for i in range(len(Input)):\n        if Input[i]**2>Input[i]:\n            Input[i] = Input[i]**2\n    return max(Input)\n    \ndef find_largest_square_in_range(Input):\n    '''\n    Write a function that finds the largest square number in the given range.\n    '''\n    if len(Input)==0:\n        return \"Invalid Input\"\n    if len(Input)==1:\n        if Input[0]**2>Input[0]:\n            return Input[0]**2\n        else:\n            return Input[0]\n    for i in range(len(Input)):\n        if Input[i]**2>Input[i]:\n            Input[i] = Input[i]**2\n    return max(Input)\n    \ndef find_largest_square_odd_number(Input):\n    '''\n    Write a function that finds the largest square number that is odd in the given list.\n    '''\n    if len(Input)==0:\n        return \"Invalid Input\"\n    if len(Input)==1:\n        if Input[0]**2>Input[0]:\n            return Input[0]**2\n        else:\n            return Input[0]\n    if Input[0]**2>Input[0]:\n        Input[0] = Input[0]**2\n    for i in range(len(Input)):\n        if Input[i]**2>Input[i]:\n            Input[i] = Input[i]**2\n    return max(Input)\n    \ndef find_largest_square_odd_number_in_range(Input):\n    '''\n    Write a function that finds the largest square number that is odd in the given range.\n    '''\n    if len(Input)==0:\n        return \"Invalid Input\"\n    if len(Input)==1:\n        if Input[0]**2>Input[0]:\n            return Input[0]**2\n        else:\n            return Input[0]\n    if Input[0]**2>Input[0]:\n        Input[0] = Input[0]**2\n    for i in range(len(Input)):\n        if Input[i]**2>Input[i]:\n            Input[i] = Input[i]**2\n    return max(Input)\n    \ndef find_element_of_numbers_that_are_not_divisor_of_number(Input):\n    '''\n    Write a function that finds the element of the list which is not a divisor of the given number.\n    '''\n    if len(Input)==0:\n        return \"Invalid Input\"\n    if len(Input)==1:\n        if Input[0]>1:\n            return \"Invalid Input\"\n        else:\n            return Input[0]\n    for i in range(len(Input)):\n        if Input[i]%Input[0]!=0:\n            return Input[i]\n    return \"Invalid Input\"\n    \ndef find_element_of_numbers_that_are_not_divisor_of_number_in_range(Input):\n    '''\n    Write a function that finds the element of the list which is not a divisor of the given number.\n    '''\n    if len(Input)==0:\n        return \"Invalid Input\"\n    if len(Input)==1:\n        if Input[0]>1:\n            return \"Invalid Input\"\n        else:\n            return Input[0]\n    for i in range(len(Input)):\n        if Input[i]%Input[0]!=0:\n            return Input[i]\n    return \"Invalid Input\"\n    \ndef find_max_odd_number(Input):\n    '''\n    Write a function that finds the largest odd number in the given list.\n    '''\n    if len(Input)==0:\n        return \"Invalid Input\"\n    if len(Input)==1:\n        if Input[0]>1:\n            return \"Invalid Input\"\n        else:\n            return Input[0]",
        "num_ids": 56
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return Input[0] == Input[1] == Input[2]\n",
        "num_ids": 19
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    def count_length(Input):\n        lengths = []\n        for i in range(len(Input)):\n            lengths.append(len(Input[i]))\n        return lengths\n",
        "num_ids": 47
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    #Returning False if there are any unequal lengths\n    if len(Input[0])!=len(Input[1]):\n        return False\n    #Returning True if all the given tuples have equal length\n    else:\n        return True\n",
        "num_ids": 59
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for j in range(len(nums)):\n        min_idx = j\n",
        "num_ids": 23
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    for i in range(len(nums)):\n        min_index = i\n        for j in range(i + 1, len(nums)):\n            if nums[min_index] > nums[j]:\n                min_index = j\n        nums[i], nums[min_index] = nums[min_index], nums[i]\n",
        "num_ids": 105
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n",
        "num_ids": 75
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    if n <= 1:\n        return nums\n    for i in range(n):\n        for j in range(n):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n",
        "num_ids": 83
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums) - 1 - i):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n",
        "num_ids": 75
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return nums\n",
        "num_ids": 18
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        min_index = i\n        for j in range(i, len(nums)):\n            if nums[j] < nums[min_index]:\n                min_index = j\n        nums[i], nums[min_index] = nums[min_index], nums[i]\n    return nums\n",
        "num_ids": 92
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    sorted_list = []\n    sorted_list.append(nums[0])\n    sorted_list.append(nums[-1])\n    sorted_list.append(nums[len(nums)//2])\n",
        "num_ids": 59
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    k = 1\n    while k < len(nums):\n        for i in range(len(nums)-k):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n        k += 1\n",
        "num_ids": 79
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    if n <= 1:\n        return\n    \n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            while (i >= gap) and (nums[i] < nums[i - gap]):\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n        gap = gap // 2\n",
        "num_ids": 106
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    import math\n    \n    a=math.sqrt(n)\n    if a*a==n:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \ndif_Square(12)\ndif_Square(15)\ndif_Square(16)\n",
        "num_ids": 70
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n>=0:\n        return dif_Square_v1(n)\n    else:\n        return dif_Square_v2(n)\ndef dif_Square_v1(n):\n    '''\n    a) Make two variables left and right, the difference of squares of n and (n+1) and compute the absolute value of the difference.\n    b) If the absolute difference is less than or equal to 1, return True else return False.\n    '''\n    left,right=n**2,(n+1)**2\n    diff=abs(left-right)\n    if diff<=1:\n        return True\n    else:\n        return False\ndef dif_Square_v2(n):\n    '''\n    a) Make two variables left and right, the difference of squares of n and (n+1) and compute the absolute value of the difference.\n    b) If the absolute difference is less than or equal to 1, return True else return False.\n    '''\n    left,right=n**2,(n+1)**2\n    diff=abs(left-right)\n    if diff<=1:\n        return True\n    else:\n        return False\nif __name__ == '__main__':\n    n = int(input())\n    ans = dif_Square(n)\n    print(ans",
        "num_ids": 83
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i*i <= n:\n        j = 1\n        while j*j <= n-i*i:\n            if i*i + j*j == n:\n                return True\n            j += 1\n        i += 1\n    return False\n",
        "num_ids": 65
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n+1):\n        if i*i == n:\n            print(\"yes\")\n        elif i*i>n:\n            break\n    print(\"no\")\n",
        "num_ids": 47
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return n in (n * n, (n + 1) * (n + 1))\n",
        "num_ids": 23
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n = int(input())\n    if n == 0:\n        print(\"Yes\")\n    elif n >= 0:\n        if (n*(n+1)//2) == (n*(n+1)//2):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    else:\n        print(\"No\")\n",
        "num_ids": 83
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n = int(input(\"Enter a number to check whether the given number can be represented as the difference of two squares or not : \"))\n    if n < 0:\n        print(\"Number should not be negative\")\n        return\n    if n % 4 == 0:\n        print(\"Number can be represented as the difference of two squares : \", n, \" - \", n)\n    else:\n        print(\"Number can not be represented as the difference of two squares : \", n, \" - \", n)\n",
        "num_ids": 113
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def squares(n):\n        for i in range(1, n+1):\n            for j in range(1, i+1):\n                print(i, end = \" \")\n            print(\"\")\n            \n    squares(n)\n    \n    def isSquare(n):\n        for i in range(n, 1, -1):\n            if i == n:\n                print(i)\n            else:\n                print(i + i)\n        \n    isSquare(n)\n    \n    \n    \n    \n    \n    def isSquare(n):\n        a = n \n        while(a * a > n): \n            a = a - 1\n        if a * a == n:\n            print(a)\n            \n        \n    isSquare(n)\n    \n    def isSquare(n):\n        a = n \n        while(a * a > n):\n            a = a - 1\n        if a * a == n:\n            return True\n        else:\n            return False\n            \n    \n    print(isSquare(100))\n    \n    def isSquare(n):\n        a = n \n        while(a * a > n):\n            a = a - 1\n        if a * a == n:\n            return True\n        else:\n            return False\n        \n    print(isSquare(10))\n    \n    \n    def isSquare(n):\n        a = n \n        while(a * a > n):\n            a = a - 1\n        if a * a == n:\n            return True\n        else:\n            return False\n            \n    print(isSquare(100))\n    \n    def isSquare(n):\n        if(n == 1):\n            return True\n        else:\n            x = n / 2\n            for i in range(0, int(x + 1)):\n                if (i * i) == x:\n                    return True\n            return False\n            \n    print(isSquare(7))\n    \n    def isSquare(n):\n        if(n == 1):\n            return True\n        else:\n            x = n / 2\n            for i in range(0, int(x + 1)):\n                if (i * i) == x:\n                    return True\n            return False\n            \n    print(isSquare(7))\n    \n    def isSquare(n):\n        if(n == 1):\n            return True\n        else:\n            x = n / 2\n            for i in range(0, int(x + 1)):\n                if (i * i) == x:\n                    return True\n            return False\n            \n    print(isSquare(7))\n    \n    def isSquare(n):\n        if(n == 1):\n            return True\n        else:\n            x = n / 2\n            for i in range(0, int(x + 1)):\n                if (i * i) == x:\n                    return True\n            return False\n            \n    print(isSquare(7))\n    \n    def isSquare(n):\n        if(n == 1):\n            return True\n        else:\n            x = n / 2\n            for i in range(0, int(x + 1)):\n                if (i * i) == x:\n                    return True\n            return False\n            \n    print(isSquare(7))\n    \n    def isSquare(n):\n        if(n == 1):\n            return True\n        else:\n            x = n / 2\n            for i in range(0, int(x + 1)):\n                if (i * i) == x:\n                    return True\n            return False\n            \n    print(isSquare(7))\n    \n    def isSquare(n):\n        if(n == 1):\n            return True\n        else:\n            x = n / 2\n            for i in range(0, int(x + 1)):\n                if (i * i) == x:\n                    return True\n            return False\n            \n    print(isSquare(7))\n    \n    def isSquare(n):\n        if(n == 1):\n            return True\n        else:\n            x = n / 2\n            for i in range(0, int(x + 1)):\n                if (i * i) == x:\n                    return True\n            return False\n            \n    print(isSquare(7))\n    \n    def isSquare(n):\n        if(n == 1):\n            return True\n        else:\n            x = n / 2\n            for i in range(0, int(x + 1)):\n                if (i * i) == x:\n                    return True\n            return False\n            \n    print(isSquare(7))\n    \n    def isSquare(n):\n        if(n == 1):\n            return True\n        else:\n            x = n / 2\n            for i in range(0, int(x + 1)):\n                if (i * i) == x:\n                    return True\n            return False\n            \n    print(isSquare(7))\n    \n    def isSquare(n):\n        if(n == 1):\n            return True\n        else:\n            x = n / 2\n            for i in range(0, int(x + 1)):\n                if (i * i) == x:\n                    return True\n            return False\n            \n    print(isSquare(7))\n    \n    def isSquare(n):\n        if(n == 1):\n            return True\n        else:\n            x = n / 2\n            for i in range(0, int(x + 1)):\n                if (i * i) == x:\n                    return True\n            return False\n            \n    print(isSquare(7))\n    \n    def isSquare(n):\n        if(n == 1):\n            return True\n        else:\n            x = n / 2\n            for i in range(0, int(x + 1)):\n                if (i * i) == x:\n                    return True\n            return False\n            \n    print(isSquare(7))\n    \n    def isSquare(n):\n        if(n == 1):\n            return True\n        else:\n            x = n / 2\n            for i in range(0, int(x + 1)):\n                if (i * i) == x:\n                    return True\n            return False\n            \n    print(isSquare(7))\n    \n    def isSquare(n):\n        if(n == 1):\n            return True\n        else:\n            x = n / 2\n            for i in range(0, int(x + 1)):\n                if (i * i) == x:\n                    return True\n            return False\n            \n    print(isSquare(7))\n    \n    def isSquare(n):\n        if(n == 1):\n            return True\n        else:\n            x = n / 2\n            for i in range(0, int(x + 1)):\n                if (i * i) == x:\n                    return True\n            return False\n            \n    print(isSquare(7))\n    \n    def isSquare(n):\n        if(n == 1):\n            return True\n        else:\n            x = n / 2\n            for i in range(0, int(x + 1)):\n                if (i * i) == x:\n                    return True\n            return False\n            \n    print(isSquare(7))\n    \n    def isSquare(n):\n        if(n == 1):\n            return True\n        else:\n            x = n / 2\n            for i in range(0, int(x + 1)):\n                if (i * i) == x:\n                    return True\n            return False\n            \n    print(isSquare(7))\n    \n    def isSquare(n):\n        if(n == 1):\n            return True\n        else:\n            x = n / 2\n            for i in range(0, int(x + 1)):\n                if (i * i) == x:\n                    return True\n            return False\n            \n    print(isSquare(7))\n    \n    def isSquare(n):\n        if(n == 1):\n            return True\n        else:\n            x = n / 2\n            for i in range(0, int(x + 1)):\n                if (i * i) == x:\n                    return True\n            return False\n            \n    print(isSquare(7))\n    \n    def isSquare(n):\n        if(n == 1):\n            return True\n        else:\n            x = n / 2\n            for i in range(0, int",
        "num_ids": 2007
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,int(math.sqrt(n))+1):\n        if n-i*i == 0:\n            return 'YES'\n    return 'NO'\n    \n",
        "num_ids": 48
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for x in range(n):\n        if x*x+x == n:\n            return True\n    return False\n    \nprint(dif_Square(24))\n",
        "num_ids": 42
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for p in patterns:\n        if p not in colors:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)-1):\n        if colors[i+1]!= patterns[i]:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)-1):\n        if patterns[i]!= colors[i]:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return set(colors) == set(patterns)\n",
        "num_ids": 16
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        pattern = patterns[i]\n        if not all([(colors[index] == pattern[index]) for index in range(len(pattern))]):\n            return False\n    return True\n",
        "num_ids": 59
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    patterns_array = []\n    for i in range(len(patterns)):\n        patterns_array.append(re.compile(patterns[i], re.I))\n    for i in range(len(colors)):\n        if not any(p.search(colors[i]) for p in patterns_array):\n            return False\n    return True\n",
        "num_ids": 89
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if not len(colors) == len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if len(colors[i])!= len(patterns[i]):\n            return False\n    return True\n",
        "num_ids": 64
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    '''\n    def is_samepatterns(colors, patterns):\n        for i in range(len(patterns) - 1):\n            if colors[i]!= patterns[i]:\n                return False\n        return True\n",
        "num_ids": 52
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_index = 0\n    pattern_index = 0\n    while(color_index < len(colors) and pattern_index < len(patterns)):\n        if(colors[color_index] == patterns[pattern_index][0]):\n            color_index += 1\n            pattern_index += 1\n        elif(colors[color_index]!= patterns[pattern_index][0]):\n            return False\n    if(color_index!= len(colors)):\n        return False\n    return True\n",
        "num_ids": 125
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if not patterns:\n        return True\n    if not colors:\n        return False\n    if len(colors)!= len(patterns):\n        return False\n    if len(colors) == len(patterns) and len(colors) == 1:\n        return True\n    if len(colors) == len(patterns) and len(colors) == 2:\n        if colors[0] == patterns[0] and colors[1] == patterns[1]:\n            return True\n        return False\n    if len(colors) == len(patterns) and len(colors) == 3:\n        if colors[0] == patterns[0] and colors[1] == patterns[1] and colors[2] == patterns[2]:\n            return True\n        return False\n    if len(colors) == len(patterns) and len(colors) == 4:\n        if colors[0] == patterns[0] and colors[1] == patterns[1] and colors[2] == patterns[2] and colors[3] == patterns[3]:\n            return True\n        return False\n    if len(colors) == len(patterns) and len(colors) == 5:\n        if colors[0] == patterns[0] and colors[1] == patterns[1] and colors[2] == patterns[2] and colors[3] == patterns[3] and colors[4] == patterns[4]:\n            return True\n        return False\n    if len(colors) == len(patterns) and len(colors) == 6:\n        if colors[0] == patterns[0] and colors[1] == patterns[1] and colors[2] == patterns[2] and colors[3] == patterns[3] and colors[4] == patterns[4] and colors[5] == patterns[5]:\n            return True\n        return False\n    if len(colors) == len(patterns) and len(colors) == 7:\n        if colors[0] == patterns[0] and colors[1] == patterns[1] and colors[2] == patterns[2] and colors[3] == patterns[3] and colors[4] == patterns[4] and colors[5] == patterns[5] and colors[6] == patterns[6]:\n            return True\n        return False\n    if len(colors) == len(patterns) and len(colors) == 8:\n        if colors[0] == patterns[0] and colors[1] == patterns[1] and colors[2] == patterns[2] and colors[3] == patterns[3] and colors[4] == patterns[4] and colors[5] == patterns[5] and colors[6] == patterns[6] and colors[7] == patterns[7]:\n            return True\n        return False\n    if len(colors) == len(patterns) and len(colors) == 9:\n        if colors[0] == patterns[0] and colors[1] == patterns[1] and colors[2] == patterns[2] and colors[3] == patterns[3] and colors[4] == patterns[4] and colors[5] == patterns[5] and colors[6] == patterns[6] and colors[7] == patterns[7] and colors[8] == patterns[8]:\n            return True\n        return False\n    if len(colors) == len(patterns) and len(colors) == 10:\n        if colors[0] == patterns[0] and colors[1] == patterns[1] and colors[2] == patterns[2] and colors[3] == patterns[3] and colors[4] == patterns[4] and colors[5] == patterns[5] and colors[6] == patterns[6] and colors[7] == patterns[7] and colors[8] == patterns[8] and colors[9] == patterns[9]:\n            return True\n        return False\n    if len(colors) == len(patterns) and len(colors) == 11:\n        if colors[0] == patterns[0] and colors[1] == patterns[1] and colors[2] == patterns[2] and colors[3] == patterns[3] and colors[4] == patterns[4] and colors[5] == patterns[5] and colors[6] == patterns[6] and colors[7] == patterns[7] and colors[8] == patterns[8] and colors[9] == patterns[9] and colors[10] == patterns[10]:\n            return True\n        return False\n    if len(colors) == len(patterns) and len(colors) == 12:\n        if colors[0] == patterns[0] and colors[1] == patterns[1] and colors[2] == patterns[2] and colors[3] == patterns[3] and colors[4] == patterns[4] and colors[5] == patterns[5] and colors[6] == patterns[6] and colors[7] == patterns[7] and colors[8] == patterns[8] and colors[9] == patterns[9] and colors[10] == patterns[10] and colors[11] == patterns[11]:\n            return True\n        return False\n    if len(colors) == len(patterns) and len(colors) == 13:\n        if colors[0] == patterns[0] and colors[1] == patterns[1] and colors[2] == patterns[2] and colors[3] == patterns[3] and colors[4] == patterns[4] and colors[5] == patterns[5] and colors[6] == patterns[6] and colors[7] == patterns[7] and colors[8] == patterns[8] and colors[9] == patterns[9] and colors[10] == patterns[10] and colors[11] == patterns[11] and colors[12] == patterns[12]:\n            return True\n        return False\n    if len(colors) == len(patterns) and len(colors) == 14:\n        if colors[0] == patterns[0] and colors[1] == patterns[1] and colors[2] == patterns[2] and colors[3] == patterns[3] and colors[4] == patterns[4] and colors[5] == patterns[5] and colors[6] == patterns[6] and colors[7] == patterns[7] and colors[8] == patterns[8] and colors[9] == patterns[9] and colors[10] == patterns[10] and colors[11] == patterns[11] and colors[12] == patterns[12] and colors[13] == patterns[13]:\n            return True\n        return False\n    if len(colors) == len(patterns) and len(colors) == 15:\n        if colors[0] == patterns[0] and colors[1] == patterns[1] and colors[2] == patterns[2] and colors[3] == patterns[3] and colors[4] == patterns[4] and colors[5] == patterns[5] and colors[6] == patterns[6] and colors[7] == patterns[7] and colors[8] == patterns[8] and colors[9] == patterns[9] and colors[10] == patterns[10] and colors[11] == patterns[11] and colors[12] == patterns[12] and colors[13] == patterns[13] and colors[14] == patterns[14]:\n            return True\n        return False\n    if len(colors) == len(patterns) and len(colors) == 16:\n        if colors[0] == patterns[0] and colors[1] == patterns[1] and colors[2] == patterns[2] and colors[3] == patterns[3] and colors[4] == patterns[4] and colors[5] == patterns[5] and colors[6] == patterns[6] and colors[7] == patterns[7] and colors[8] == patterns[8] and colors[9] == patterns[9] and colors[10] == patterns[10] and colors[11] == patterns[11] and colors[12] == patterns[12] and colors[13] == patterns[13] and colors[14] == patterns[14] and colors[15] == patterns[15]:\n            return True\n        return False\n    if len(colors) == len(patterns) and len(colors) == 17:\n        if colors[0] == patterns[0] and colors[1] == patterns[1] and colors[2] == patterns[2] and colors[3] == patterns[3] and colors[4] == patterns[4] and colors[5] == patterns[5] and colors[6] == patterns[6] and colors[",
        "num_ids": 2009
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    output = set()\n    \n    for x in test_list:\n        for i in range(len(x)):\n            if x[i] % K!= 0:\n                break\n        else:\n            output.add(x)\n    \n    return output\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2004
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j] % K!= 0:\n                break\n        else:\n            count += 1\n    print(count)\n",
        "num_ids": 72
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    #input: list of tuples, K\n    #output: list of tuples\n    #ex: find_tuples([(0,2),(2,4),(4,5),(6,8),(8,10)], 3) = [(0,2),(4,5),(6,8)]\n    #    find_tuples([(0,2),(2,4),(4,5),(6,8),(8,10)], 4) = [(0,2),(4,5),(6,8)]\n    #    find_tuples([(0,2),(2,4),(4,5),(6,8),(8,10)], 5) = []\n    #    find_tuples([(0,2),(2,4),(4,5),(6,8),(8,10)], 6) = [(0,2),(4,5),(6,8)]\n    #    find_tuples([(0,2),(2,4),(4,5),(6,8),(8,10)], 7) = [(0,2),(2,4),(4,5),(6,8),(8,10)]\n    #    find_tuples([(0,2),(2,4),(4,5),(6,8),(8,10)], 8) = [(0,2),(2,4),(4,5),(6,8),(8,10)]\n    #    find_tuples([(0,2),(2,4),(4,5),(6,8),(8,10)], 9) = [(0,2),(2,4),(4,5),(6,8),(8,10)]\n    #    find_tuples([(0,2),(2,4),(4,5),(6,8),(8,10)], 10) = []\n    #    find_tuples([(0,2),(2,4),(4,5),(6,8),(8,10)], 11) = [(0,2),(2,4),(4,5),(6,8),(8,10)]\n    #    find_tuples([(0,2),(2,4),(4,5),(6,8),(8,10)], 12) = []\n    #    find_tuples([(0,2),(2,4),(4,5),(6,8),(8,10)], 13) = []\n    #    find_tuples([(0,2),(2,4),(4,5),(6,8),(8,10)], 14) = [(0,2),(2,4),(4,5),(6,8),(8,10)]\n    #    find_tuples([(0,2),(2,4),(4,5),(6,8),(8,10)], 15) = []\n",
        "num_ids": 692
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    results = []\n    for i in test_list:\n        for j in i:\n            if j%K == 0:\n                results.append(i)\n                break\n    return results\n",
        "num_ids": 47
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Create a list of tuples \n    lst = []\n    for i in range(len(test_list)):\n        tup = test_list[i]\n        tup_1 = list(tup)\n        if (i == 0):\n            lst.append(tup)\n            continue\n        if (i == 1):\n            lst.append((tup_1[0], tup_1[1]))\n            continue\n        if (tup_1[0] % K == 0):\n            lst.append(tup)\n        if (tup_1[1] % K == 0):\n            lst.append((tup_1[0], tup_1[1]))\n    return lst\n",
        "num_ids": 178
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    t = []\n    for i in range(0, len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i][0] % K == 0) and (test_list[j][0] % K == 0):\n                t.append(test_list[i] + test_list[j])\n    return t\n    \n    \n    \ndef find_tuples_sieve(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    t = []\n    for i in range(0, len(test_list)):\n        if test_list[i][0] % K == 0:\n            t.append(test_list[i])\n    return t\n    \n    \n    \ndef find_tuples_naive(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    t = []\n    for i in range(0, len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] % K == 0 and test_list[j][0] % K == 0:\n                t.append(test_list[i] + test_list[j])\n    return t\n    \n    \n    \ndef find_tuples_naive_1(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    t = []\n    for i in range(0, len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] % K == 0 and test_list[j][0] % K == 0:\n                t.append(test_list[i] + test_list[j])\n    return t\n    \n    \n    \ndef find_tuples_naive_2(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    t = []\n    for i in range(0, len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i][0] / test_list[j][0]) % K == 0:\n                t.append(test_list[i] + test_list[j])\n    return t\n    \n    \n    \ndef find_tuples_naive_3(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    t = []\n    for i in range(0, len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i][0] % test_list[j][0]) == 0:\n                t.append(test_list[i] + test_list[j])\n    return t\n    \n    \n    \ndef find_tuples_naive_4(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    t = []\n    for i in range(0, len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] % test_list[j][0] == 0:\n                t.append(test_list[i] + test_list[j])\n    return t\n    \n    \n    \ndef find_tuples_naive_5(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    t = []\n    for i in range(0, len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] % test_list[j][0] == 0:\n                t.append(test_list[i] + test_list[j])\n    return t\n    \n    \n    \ndef find_tuples_naive_6(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    t = []\n    for i in range(0, len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i][0] / test_list[j][0]) % K == 0:\n                t.append(test_list[i] + test_list[j])\n    return t\n    \n    \n    \ndef find_tuples_naive_7(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    t = []\n    for i in range(0, len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] % (test_list[j][0] * K) == 0:\n                t.append(test_list[i] + test_list[j])\n    return t\n    \n    \n    \ndef find_tuples_naive_8(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    t = []\n    for i in range(0, len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] % (test_list[j][0] * K) == 0:\n                t.append(test_list[i] + test_list[j])\n    return t\n    \n    \n    \ndef find_tuples_naive_9(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    t = []\n    for i in range(0, len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] % (test_list[j][0] * K) == 0:\n                t.append(test_list[i] + test_list[j])\n    return t\n    \n    \n    \ndef find_tuples_naive_10(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    t = []\n    for i in range(0, len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i][0] / (test_list[j][0] * K)) % 1 == 0:\n                t.append(test_list[i] + test_list[j])\n    return t\n    \n    \n    \ndef find_tuples_naive_11(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    t = []\n    for i in range(0, len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i][0] / (test_list[j][0] * K)) % 1 == 0:\n                t.append(test_list[i] + test_list[j])\n    return t\n    \n    \n    \ndef find_tuples_naive_12(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
        "num_ids": 26
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = test_list\n",
        "num_ids": 10
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    count = 0\n    for i in range(0, len(test_list)):\n        tup = test_list[i]\n        for j in range(0, len(tup)):\n            if tup[j] % K!= 0:\n                count += 1\n    return count\n",
        "num_ids": 72
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for num in test_list:\n        if num[0] % K!= 0 and num[1] % K!= 0 and num[2] % K!= 0 and num[3] % K!= 0 and num[4] % K!= 0 and num[5] % K!= 0 and num[6] % K!= 0 and num[7] % K!= 0:\n            result.append(num)\n",
        "num_ids": 107
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    for tup in test_list:\n        if tup[0] % K!= 0 and tup[1] % K!= 0:\n            return False\n        elif tup[0] % K == 0 and tup[1] % K == 0:\n            return True\n",
        "num_ids": 71
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        print(True)\n    else:\n        print(False)\nis_Diff(11)\nis_Diff(111)\n",
        "num_ids": 41
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        print('True')\n    else:\n        print('False')\n",
        "num_ids": 27
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 == 0\n",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        print(n, \"is divisible by 11\")\n    else:\n        print(n, \"is not divisible by 11\")\n",
        "num_ids": 42
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 == 0\n",
        "num_ids": 10
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    #return len(s) % 2!= 0\n    return True if len(s) % 2 == 1 else False\n",
        "num_ids": 30
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==1\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    length = len(s)\n    if length%2==0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n",
        "num_ids": 36
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = s.split(\" \")\n    odd = 0\n    even = 0\n    for i in s:\n        if len(i)%2!= 0:\n            odd+=1\n        else:\n            even+=1\n    if odd > even:\n        print(odd)\n    else:\n        print(even)\n",
        "num_ids": 79
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # initialize result variable \n    res = \"\" \n    # traverse in the string  \n    for x in s: \n    # if x is alphabet, then it is added to result variable. \n        if x.isalpha(): \n            res += x \n    # print final result \n    print(res) \n    # if length of the string is odd, then it return 'odd'. \n    if len(res) % 2!= 0: \n        return 'odd'\n    # if length of the string is even, then it return 'even'. \n    else: \n        return 'even'\n",
        "num_ids": 144
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Length of word\n    length = len(s) \n    \n    # If length of the word is odd\n    if length % 2!= 0: \n        return True\n    else: \n        return False\n    ",
        "num_ids": 54
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    try:\n        s = str(s)\n        if len(s)%2 == 0:\n            print(\"%s is an even word\" %s)\n        else:\n            print(\"%s is an odd word\" %s)\n    except ValueError:\n        print(\"Check your data type\")\n",
        "num_ids": 73
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n    # # s_length = len(s)\n    # # if s_length % 2 == 0:\n    # #     print(\"even\")\n    # # else:\n    # #     print(\"odd\")\n",
        "num_ids": 62
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 2:\n        return n\n    else:\n        return n*(n - 1)*(n - 2)//6\n",
        "num_ids": 34
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # todo: implement me\n    pass\n",
        "num_ids": 13
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # nth tetrahedral number is factorial of n\n    return math.factorial(n)\n",
        "num_ids": 26
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    def _find_nth_tetrahedral_number(n):\n        n = 0\n        a = 0\n        if n > 1:\n            for i in range(2,n+1):\n                n = i*(i-1)//2 + 1\n                a = i\n                for j in range(2,n+1):\n                    n = n * (n-1)//2 + 1\n                    a = n\n                    for k in range(2,n+1):\n                        n = n * (n-1)//2 + 1\n                        a = n\n                        for l in range(2,n+1):\n                            n = n * (n-1)//2 + 1\n                            a = n\n                            for m in range(2,n+1):\n                                n = n * (n-1)//2 + 1\n                                a = n\n                                for o in range(2,n+1):\n                                    n = n * (n-1)//2 + 1\n                                    a = n\n                                    for p in range(2,n+1):\n                                        n = n * (n-1)//2 + 1\n                                        a = n\n                                        for q in range(2,n+1):\n                                            n = n * (n-1)//2 + 1\n                                            a = n\n                                            for r in range(2,n+1):\n                                                n = n * (n-1)//2 + 1\n                                                a = n\n                                                for s in range(2,n+1):\n                                                    n = n * (n-1)//2 + 1\n                                                    a = n\n                                                    for t in range(2,n+1):\n                                                        n = n * (n-1)//2 + 1\n                                                        a = n\n                                                        for u in range(2,n+1):\n                                                            n = n * (n-1)//2 + 1\n                                                            a = n\n                                                            for v in range(2,n+1):\n                                                                n = n * (n-1)//2 + 1\n                                                                a = n\n                                                                for w in range(2,n+1):\n                                                                    n = n * (n-1)//2 + 1\n                                                                    a = n\n                                                                    for x in range(2,n+1):\n                                                                        n = n * (n-1)//2 + 1\n                                                                        a = n\n                                                                        for y in range(2,n+1):\n                                                                            n = n * (n-1)//2 + 1\n                                                                            a = n\n                                                                            for z in range(2,n+1):\n                                                                                n = n * (n-1)//2 + 1\n                                                                                a = n\n                                                                                for _ in range(2,n+1):\n                                                                                    n = n * (n-1)//2 + 1\n                                                                                    a = n\n                                                                                    for e in range(2,n+1):\n                                                                                        n = n * (n-1)//2 + 1\n                                                                                        a = n\n                                                                                        for f in range(2,n+1):\n                                                                                            n = n * (n-1)//2 + 1\n                                                                                            a = n\n                                                                                            for g in range(2,n+1):\n                                                                                                n = n * (n-1)//2 + 1\n                                                                                                a = n\n                                                                                                for h in range(2,n+1):\n                                                                                                    n = n * (n-1)//2 + 1\n                                                                                                    a = n\n                                                                                                for i in range(2,n+1):\n                                                                                                    n = n * (n-1)//2 + 1\n                                                                                                    a = n\n                                                                                                    for j in range(2,n+1):\n                                                                                                        n = n * (n-1)//2 + 1\n                                                                                                        a = n\n                                                                                                    for k in range(2,n+1):\n                                                                                                        n = n * (n-1)//2 + 1\n                                                                                                        a = n\n                                                                                                    for l in range(2,n+1):\n                                                                                                        n = n * (n-1)//2 + 1\n                                                                                                        a = n\n                                                                                                    for m in range(2,n+1):\n                                                                                                        n = n * (n-1)//2 + 1\n                                                                                                        a = n\n                                                                                                    for o in range(2,n+1):\n                                                                                                        n = n * (n-1)//2 + 1\n                                                                                                        a = n\n                                                                                                    for p in range(2,n+1):\n                                                                                                        n = n * (n-1)//2 + 1\n                                                                                                        a = n\n                                                                                                    for q in range(2,n+1):\n                                                                                                        n = n * (n-1)//2 + 1\n                                                                                                        a = n\n                                                                                                    for r in range(2,n+1):\n                                                                                                        n = n * (n-1)//2 + 1\n                                                                                                        a = n\n                                                                                                    for s in range(2,n+1):\n                                                                                                        n = n * (n-1)//2 + 1\n                                                                                                        a = n\n                                                                                                    for t in range(2,n+1):\n                                                                                                        n = n * (n-1)//2 + 1\n                                                                                                        a = n\n                                                                                                    for u in range(2,n+1):\n                                                                                                        n = n * (n-1)//2 + 1\n                                                                                                        a = n\n                                                                                                    for v in range(2,n+1):\n                                                                                                        n = n * (n-1)//2 + 1\n                                                                                                        a = n\n                                                                                                    for w in range(2,n+1):\n                                                                                                        n = n * (n-1)//2 + 1\n                                                                                                        a = n\n                                                                                                    for x in range(2,n+1):\n                                                                                                        n = n * (n-1)//2 + 1\n                                                                                                        a = n\n                                                                                                    for y in range(2,n+1):\n                                                                                                        n = n * (n-1)//2 + 1\n                                                                                                        a = n\n                                                                                                    for z in range(2,n+1):\n                                                                                                        n = n * (n-1)//2 + 1\n                                                                                                        a = n\n                                                                                                    for _ in range(2,n+1):\n                                                                                                        n = n * (n-1)//2 + 1\n                                                                                                        a = n\n                                                                                                    for e in range(2,n+1):\n                                                                                                        n = n * (n-1)//2 + 1\n                                                                                                        a = n\n                                                                                                    for f in range(2,n+1):\n                                                                                                        n = n * (n-1)//2 + 1\n                                                                                                        a = n\n                                                                                                    for g in range(2,n+1):\n                                                                                                        n = n * (n-1)//2 + 1\n                                                                                                        a = n\n                                                                                                    for h in range(2,n+1):\n                                                                    ",
        "num_ids": 1750
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    assert isinstance(n, int)\n    if n == 1:\n        return 4\n    elif n == 2:\n        return 6\n    else:\n        return sum([4*a for a in range(1, n)]) + 2*n*n*n\n",
        "num_ids": 65
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 4\n    if n == 2:\n        return 7\n    if n == 3:\n        return 8\n    if n == 4:\n        return 15\n    if n == 5:\n        return 17\n    if n == 6:\n        return 21\n    if n == 7:\n        return 22\n    if n == 8:\n        return 24\n    if n == 9:\n        return 27\n    if n == 10:\n        return 31\n    if n == 11:\n        return 32\n    if n == 12:\n        return 35\n    if n == 13:\n        return 38\n    if n == 14:\n        return 41\n    if n == 15:\n        return 44\n    if n == 16:\n        return 47\n    if n == 17:\n        return 50\n    if n == 18:\n        return 53\n    if n == 19:\n        return 56\n    if n == 20:\n        return 59\n    if n == 21:\n        return 62\n    if n == 22:\n        return 65\n    if n == 23:\n        return 69\n    if n == 24:\n        return 72\n    if n == 25:\n        return 75\n    if n == 26:\n        return 78\n    if n == 27:\n        return 81\n    if n == 28:\n        return 84\n    if n == 29:\n        return 87\n    if n == 30:\n        return 90\n    if n == 31:\n        return 93\n    if n == 32:\n        return 96\n    if n == 33:\n        return 99\n    if n == 34:\n        return 102\n    if n == 35:\n        return 105\n    if n == 36:\n        return 108\n    if n == 37:\n        return 111\n    if n == 38:\n        return 114\n    if n == 39:\n        return 117\n    if n == 40:\n        return 120\n    if n == 41:\n        return 123\n    if n == 42:\n        return 126\n    if n == 43:\n        return 129\n    if n == 44:\n        return 132\n    if n == 45:\n        return 135\n    if n == 46:\n        return 138\n    if n == 47:\n        return 141\n    if n == 48:\n        return 144\n    if n == 49:\n        return 147\n    if n == 50:\n        return 150\n    if n == 51:\n        return 153\n    if n == 52:\n        return 156\n    if n == 53:\n        return 159\n    if n == 54:\n        return 162\n    if n == 55:\n        return 165\n    if n == 56:\n        return 168\n    if n == 57:\n        return 171\n    if n == 58:\n        return 174\n    if n == 59:\n        return 177\n    if n == 60:\n        return 180\n    if n == 61:\n        return 183\n    if n == 62:\n        return 186\n    if n == 63:\n        return 189\n    if n == 64:\n        return 192\n    if n == 65:\n        return 195\n    if n == 66:\n        return 198\n    if n == 67:\n        return 201\n    if n == 68:\n        return 204\n    if n == 69:\n        return 207\n    if n == 70:\n        return 210\n    if n == 71:\n        return 213\n    if n == 72:\n        return 216\n    if n == 73:\n        return 219\n    if n == 74:\n        return 222\n    if n == 75:\n        return 225\n    if n == 76:\n        return 228\n    if n == 77:\n        return 231\n    if n == 78:\n        return 234\n    if n == 79:\n        return 237\n    if n == 80:\n        return 240\n    if n == 81:\n        return 243\n    if n == 82:\n        return 246\n    if n == 83:\n        return 249\n    if n == 84:\n        return 252\n    if n == 85:\n        return 255\n    if n == 86:\n        return 258\n    if n == 87:\n        return 261\n    if n == 88:\n        return 264\n    if n == 89:\n        return 267\n    if n == 90:\n        return 270\n    if n == 91:\n        return 273\n    if n == 92:\n        return 276\n    if n == 93:\n        return 279\n    if n == 94:\n        return 282\n    if n == 95:\n        return 285\n    if n == 96:\n        return 288\n    if n == 97:\n        return 291\n    if n == 98:\n        return 294\n    if n == 99:\n        return 297\n    if n == 100:\n        return 300\n    if n == 101:\n        return 303\n    if n == 102:\n        return 306\n    if n == 103:\n        return 309\n    if n == 104:\n        return 312\n    if n == 105:\n        return 315\n    if n == 106:\n        return 318\n    if n == 107:\n        return 321\n    if n == 108:\n        return 324\n    if n == 109:\n        return 327\n    if n == 110:\n        return 330\n    if n == 111:\n        return 333\n    if n == 112:\n        return 336\n    if n == 113:\n        return 339\n    if n == 114:\n        return 342\n    if n == 115:\n        return 345\n    if n == 116:\n        return 348\n    if n == 117:\n        return 351\n    if n == 118:\n        return 354\n    if n == 119:\n        return 357\n    if n == 120:\n        return 360\n    if n == 121:\n        return 363\n    if n == 122:\n        return 366\n    if n == 123:\n        return 369\n    if n == 124:\n        return 372\n    if n == 125:\n        return 375\n    if n == 126:\n        return 378\n    if n == 127:\n        return 381\n    if n == 128:\n        return 384\n    if n == 129:\n        return 387\n    if n == 130:\n        return 390\n    if n == 131:\n        return 393\n    if n == 132:\n        return 396\n    if n == 133:\n        return 399\n    if n == 134:\n        return 402\n    if n == 135:\n        return 405\n    if n == 136:\n        return 408\n    if n == 137:\n        return 411\n    if n == 138:\n        return 414\n    if n == 139:\n        return 417\n    if n == 140:\n        return 420\n    if n == 141:\n        return 423\n    if n == 142:\n        return 426\n    if n == 143:\n        return 429\n    if n == 144:\n        return 432\n    if n == 145:\n        return 435\n    if n == 146:\n        return 438\n    if n == 147:\n        return 441\n    if n == 148:\n        return 444\n    if n == 149:\n        return 447\n    if n == 150:\n        return 450\n    if n == 151:\n        return 453\n    if n == 152:\n        return 456\n    if n == 153:\n        return 459\n    if n == 154:\n        return 462\n    if n == 155:\n        return 465\n    if n == 156:\n        return 468\n    if n == 157:\n        return 471\n    if n == 158:\n        return 474\n    if n == 159:\n        return 477\n    if n == 160:\n        return 480\n    if n == 161:\n        return 483\n    if n == 162:\n        return 486\n    if n == 163:\n        return 489\n    if n == 164:\n        return 492\n    if n == 165:\n        return 495\n    if n == 166:\n        return 498\n    if n == 167:\n        return 501\n    if n == 168:\n        return 504\n    if n == 169:\n        return 507\n    if n == 170:\n        return 510\n    if n == 171:\n        return 513\n    if n == 172:\n        return 516\n    if n == 173:\n        return 519\n    if n == 174:\n        return 522\n    if n == 175:\n        return 525\n    if n == 176:\n        return 528\n    if n == 177:\n        return 531\n    if n == 178:\n        return 534\n    if n == 179:\n        return 537\n    if n == 180:\n        return 540\n    if n == 181",
        "num_ids": 2015
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    n = int(n)\n    res = 1\n    for i in range(n):\n        res = (3 * res - 1) * (3 * res - 1)\n    return res\n",
        "num_ids": 47
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0: \n        return 1\n    if n == 1: \n        return 4\n    if n == 2: \n        return 7 \n    if n == 3: \n        return 18\n",
        "num_ids": 51
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    num_of_lines = 0\n    with open(\"tetrahedral_numbers.txt\", \"r\") as f:\n        for line in f:\n            num_of_lines += 1\n    # open file\n    # check if the number is between the first and last line\n    if n >= num_of_lines - 1 or n <= 0:\n        return -1\n    \n    # check if the number is between the first and second last line\n    with open(\"tetrahedral_numbers.txt\", \"r\") as f:\n        for i in range(n-1):\n            f.readline()\n        line = f.readline()\n    # check if the number is between the second and third last line\n    if n >= num_of_lines - 2 or n <= 1:\n        return -1\n    \n    # check if the number is between the third and fourth last line\n    with open(\"tetrahedral_numbers.txt\", \"r\") as f:\n        for i in range(n-2):\n            f.readline()\n        line = f.readline()\n    \n    return int(line)\n",
        "num_ids": 265
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Returns nth tetrahedral number\n    result = n * (n+1)/2\n    return result\n",
        "num_ids": 28
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*math.pi*r**3\n    return volume\n",
        "num_ids": 21
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    import math\n    return 4.0/3.0 * math.pi * (r**3)\n",
        "num_ids": 26
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    import math\n    return 4/3 * math.pi * (r**3)\n",
        "num_ids": 22
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r ** 3\n",
        "num_ids": 16
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return (4/3)*pi*r**3\n",
        "num_ids": 22
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*math.pi*r**3\n    return volume\n",
        "num_ids": 21
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume\n    \ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = math.pi*(r**2)*h\n    return volume\n    \ndef volume_cone(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = ((1/3)*math.pi*r1*r2*h)\n    return volume\n    \ndef volume_cone2(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = ((1/3)*math.pi*r1*r2*h)/3\n    return volume\n    \ndef volume_cone3(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*(r1*r2)/3\n    return volume\n    \ndef volume_cone4(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*((1/3)*r1*r2)*h\n    return volume\n    \ndef volume_cone5(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = ((1/3)*math.pi*(r1*r2)/3)*h\n    return volume\n    \ndef volume_cone6(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = ((1/3)*math.pi*(r1*r2))/2*h\n    return volume\n    \ndef volume_cone7(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*(r1*r2)*h\n    return volume\n    \ndef volume_cone8(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = ((1/3)*math.pi*(r1*r2)*h)\n    return volume\n    \ndef volume_cone9(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*(1/3)*(r1*r2)*h\n    return volume\n    \ndef volume_cone10(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*(1/3)*(1/2)*(r1*r2)*h\n    return volume\n    \ndef volume_cone11(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = ((1/3)*math.pi*(r1**2)*(r1+2*r2))*h\n    return volume\n    \ndef volume_cone12(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = ((1/3)*math.pi*(r1**2)*(r1+2*r2))/2*h\n    return volume\n    \ndef volume_cone13(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = ((1/3)*math.pi*(r1**2)*(r1+2*r2))/2*h\n    return volume\n    \ndef volume_cone14(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = ((1/3)*math.pi*(r1**2)*(r1+2*r2))/2*h\n    return volume\n    \ndef volume_cone15(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = ((1/3)*math.pi*(r1**2)*(r1+2*r2))*h\n    return volume\n    \ndef volume_cone16(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = ((1/3)*math.pi*(r1**2)*(r1+2*r2))*h\n    return volume\n    \ndef volume_cone17(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = ((1/3)*math.pi*(r1**2)*(r1+2*r2))*h\n    return volume\n    \ndef volume_cone18(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = ((1/3)*math.pi*(r1**2)*(r1+2*r2))*h\n    return volume\n    \ndef volume_cone19(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = ((1/3)*math.pi*(r1**2)*(r1+2*r2))*h\n    return volume\n    \ndef volume_cone20(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = ((1/3)*math.pi*(r1**2)*(r1+2*r2))*h\n    return volume\n    \ndef volume_cone21(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = ((1/3)*math.pi*(r1**2)*(r1+2*r2))*h\n    return volume\n    \ndef volume_cone22(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = ((1/3)*math.pi*(r1**2)*(r1+2*r2))*h\n    return volume\n    \ndef volume_cone23(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = ((1/3)*math.pi*(r1**2)*(r1+2*r2))*h\n    return volume\n    \ndef volume_cone24(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = ((1/3)*math.pi*(r1**2)*(r1+2*r2))*h\n    return volume\n    \ndef volume_cone25(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = ((1/3)*math.pi*(r1**2)*(r1+2*r2))*h\n    return volume\n    \ndef volume_cone26(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = ((1/3)*math.pi*(r1**2)*(r1+2*r2))*h\n    return volume\n    \ndef volume_cone27(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = ((1/3)*math.pi*(r1**2)*(r1+2*r2))*h\n    return volume\n    \ndef volume_cone28(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = ((1/3)*math.pi*(r1**2)*(r1+2*r2))*h\n    return volume\n    \ndef volum",
        "num_ids": 41
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    s = (4 * pi * (r ** 3)) / 3\n    return s\n",
        "num_ids": 29
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    import math\n    v=4/3*math.pi*math.pow(r,3)\n    return v\n",
        "num_ids": 31
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4.0/3.0) * math.pi * (r**3)\n    return vol\n",
        "num_ids": 29
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = \"\"\n    for i in strr:\n        res += chr(ord(i) + ord('a') - ord('a') % 26)\n    return res\n",
        "num_ids": 43
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #your code here\n    strr=strr.lower()\n    ans=''\n    for i in strr:\n        x=ord(i)\n        x+=64\n        if x>122:\n            x=x-26\n        ans+=chr(x)\n    return(ans)",
        "num_ids": 72
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    from string import ascii_lowercase\n    res = 0\n    for i in strr:\n        res = res+ord(i)\n    return chr(res%26+ord('a'))\n",
        "num_ids": 51
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_char = 0\n    for char in strr:\n        sum_char += ord(char)\n    return sum_char%26\n",
        "num_ids": 35
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    value = 0\n    for i in strr:\n        value = value + ord(i) \n    return value % 26\n",
        "num_ids": 32
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return ord(strr[0]) + ord(strr[1])\n    \nstrr = input()\nprint(get_Char(strr)",
        "num_ids": 37
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii = list(strr)\n    sum = 0\n    for i in ascii:\n        sum = sum + ord(i)\n    return sum % 26\n",
        "num_ids": 43
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for i in range(0,len(strr)):\n        sum+=ord(strr[i])\n    return sum%26\n",
        "num_ids": 39
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = ord(strr[0])\n    for i in range(1,len(strr)):\n        char = (char + ord(strr[i]))%26\n",
        "num_ids": 45
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ans = 0\n    for i in strr:\n        ans = ord(i) + ans\n    ans = ans%26\n    return chr(ans)\n",
        "num_ids": 40
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0:\n        raise ValueError('n must be positive.')\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)\n",
        "num_ids": 53
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return sequence(n - 1) + 2*sequence(n - 2)\n",
        "num_ids": 35
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [1,2,4,8]\n    if n < 1:\n        return 0\n    if n <= len(seq):\n        return seq[n-1]\n    else:\n        res = 0\n        a = 1\n        for i in range(n-1):\n            a += 1\n            res = seq[-1] + seq[-2] + seq[-3]\n            seq.append(res)\n            seq.append(res)\n            seq.append(res)\n        return res\n    \n    \ndef fib(n):\n    '''\n    Write a function to return the nth number in the fibonacci series.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n    \n",
        "num_ids": 35
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return sequence(n-1) + sequence(n-2)\n",
        "num_ids": 40
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = 1\n    for i in range(n):\n        seq *= 2\n        seq += 1\n    return seq\n",
        "num_ids": 31
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)\n",
        "num_ids": 45
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + sequence(n-1)\n",
        "num_ids": 28
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # count = 1\n    # num = 1\n    # while count < n:\n    #     num += 1\n    #     if num % 2!= 0:\n    #         count += 1\n    #     elif num % 2 == 0:\n    #         count += 1\n    #     print(num)\n",
        "num_ids": 75
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    else:\n        return sequence(n - 1) + sequence(n - 2)\n    \n",
        "num_ids": 46
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    num = 1\n    n_times = 1\n    while n!= 0:\n        num = num * 3 + 1\n        n -= n_times\n        n_times += 1\n    return num\n",
        "num_ids": 49
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 4 * math.pi * math.pow(r, 2)\n    return s\n",
        "num_ids": 25
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4*math.pi*(r**2)\n    return area\n",
        "num_ids": 21
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    import math\n    pi = math.pi\n    return 4 * pi * r ** 2\n",
        "num_ids": 23
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\n",
        "num_ids": 14
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #formula\n    a = 4 * math.pi * r**2\n    return a\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #formula\n    a = 2 * math.pi * r * h\n    return a\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    #formula\n    a = math.pi * r * h**2\n    return a\ndef surfacearea_parabola(a,b):\n    '''\n    Write a function to find the surface area of a parabola.\n    '''\n    #formula\n    a = (b**2 - 4 * a) / 2\n    return a\ndef surfacearea_parallelogram(a,b):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    #formula\n    a = a**2\n    return a\ndef surfacearea_right_triangle(a,b):\n    '''\n    Write a function to find the surface area of a right triangle.\n    '''\n    #formula\n    a = a * 1/2\n    return a\ndef surfacearea_trapezium(a,b,c):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    #formula\n    a = (a+b+c)/2\n    return a\ndef surfacearea_trapezoid(a,b,c):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    #formula\n    a = a * 1/2\n    return a\ndef volume_cuboid(a,b,c,d):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    #formula\n    a = a * b * c\n    return a\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    #formula\n    a = (math.pi * r**2 * h) / 3\n    return a\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #formula\n    a = math.pi * r * h * (1 - (math.sin(math.pi/6)**2))\n    return a\ndef volume_parabola(a,b):\n    '''\n    Write a function to find the volume of a parabola.\n    '''\n    #formula\n    a = (b**2 - 4 * a) / 2\n    return a\ndef volume_parallelogram(a,b):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    #formula\n    a = (a**2) * (1/2)\n    return a\ndef volume_right_triangle(a,b):\n    '''\n    Write a function to find the volume of a right triangle.\n    '''\n    #formula\n    a = (1/2) * math.sqrt((a**2) * (b**2))\n    return a\ndef volume_trapezium(a,b,c):\n    '''\n    Write a function to find the volume of a trapezium.\n    '''\n    #formula\n    a = (a + b + c) / 2\n    return a\ndef volume_trapezoid(a,b,c):\n    '''\n    Write a function to find the volume of a trapezoid.\n    '''\n    #formula\n    a = (a + b) / 2\n    return a\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #formula\n    a = (4/3) * math.pi * (r**3)\n    return a\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    #formula\n    a = (2/3) * math.pi * (r**2 * h)\n    return a\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #formula\n    a = math.pi * r * h * (1 - (math.sin(math.pi/6)**2))\n    return a\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #formula\n    a = (4/3) * math.pi * (r**3)\n    return a\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    #formula\n    a = (2/3) * math.pi * (r**2 * h)\n    return a\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #formula\n    a = math.pi * r * h * (1 - (math.sin(math.pi/6)**2))\n    return a\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #formula\n    a = (4/3) * math.pi * (r**3)\n    return a\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    #formula\n    a = (2/3) * math.pi * (r**2 * h)\n    return a\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #formula\n    a = math.pi * r * h * (1 - (math.sin(math.pi/6)**2))\n    return a\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #formula\n    a = (4/3) * math.pi * (r**3)\n    return a\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    #formula\n    a = (2/3) * math.pi * (r**2 * h)\n    return a\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #formula\n    a = math.pi * r * h * (1 - (math.sin(math.pi/6)**2))\n    return a\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #formula\n    a = (4/3) * math.pi * (r**3)\n    return a\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    #formula\n    a = (2/3) * math.pi * (r**2 * h)\n    return a\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #formula\n    a = math.pi * r * h * (1 - (math.sin(math.pi/6)**2))\n    return a\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #formula\n    a = (4/3) * math.pi * (r**3)\n    return a\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    #formula\n    a = (2/3) * math.pi * (r**2 * h)\n    return a\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #formula\n    a = math.pi ",
        "num_ids": 14
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # return 4 * math.pi * (r**2)\n    return 4 * math.pi * (r**2)\n",
        "num_ids": 31
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    if(r == 0):\n        return 4.0/3.0*math.pi*r*r\n    else:\n        return 4.0/3.0*math.pi*r*r*math.pow((1 + math.pow((r*r)/(math.pow((r*r),1.5)),1.5)),0.5)\n",
        "num_ids": 89
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\n",
        "num_ids": 14
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 4*math.pi*r**2\n    return s\ndef surfacearea_cylinder(h, r):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s = 2*math.pi*r*h + 2*math.pi*r**2\n    return s\ndef volume_cylinder(h, r):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v = math.pi*h*r**2\n    return v\ndef surfacearea_cylinder_with_inner_cylinder(h, r, inner_r):\n    '''\n    Write a function to find the surface area of a cylinder that has a inner cylinder.\n    '''\n    s = 2*math.pi*r*h + 2*math.pi*r**2 + math.pi*inner_r**2\n    return s\ndef volume_cylinder_with_inner_cylinder(h, r, inner_r):\n    '''\n    Write a function to find the volume of a cylinder that has a inner cylinder.\n    '''\n    v = math.pi*h*r**2 + math.pi*inner_r**2\n    return v\ndef surfacearea_cone(d, h, r):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    s = 2*math.pi*d*r + 2*math.pi*r**2 + 2*math.pi*d*h\n    return s\ndef volume_cone(d, h, r):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi*d*r**2 + math.pi*d*h\n    return v\ndef surfacearea_triangle(b, h):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    s = (b*h)/2\n    return s\ndef volume_triangle(b, h):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    v = b*h/2\n    return v\ndef surfacearea_sphere_with_hole(r, h):\n    '''\n    Write a function to find the surface area of a sphere that has a hole.\n    '''\n    s = 4*math.pi*r**2 + 4*math.pi*r*h\n    return s\ndef volume_sphere_with_hole(r, h):\n    '''\n    Write a function to find the volume of a sphere that has a hole.\n    '''\n    v = math.pi*r**2 + math.pi*r*h\n    return v\ndef volume_sphere_with_hole_and_cone(r, h, d):\n    '''\n    Write a function to find the volume of a sphere that has a hole and a cone.\n    '''\n    v = math.pi*r**2 + math.pi*r*h + d*math.pi*d\n    return v\ndef surfacearea_sphere_with_hole_and_cone(r, h, d):\n    '''\n    Write a function to find the surface area of a sphere that has a hole and a cone.\n    '''\n    s = 4*math.pi*r**2 + 4*math.pi*r*h + 2*math.pi*d*d\n    return s\ndef volume_sphere_with_hole_and_cone(r, h, d):\n    '''\n    Write a function to find the volume of a sphere that has a hole and a cone.\n    '''\n    v = math.pi*r**2 + math.pi*r*h + d*math.pi*d\n    return v\ndef volume_sphere_with_hole_and_cone_and_triangle(r, h, d, b):\n    '''\n    Write a function to find the volume of a sphere that has a hole and a cone, and a triangle.\n    '''\n    v = math.pi*r**2 + math.pi*r*h + d*math.pi*d + b*math.pi*b\n    return v\ndef surfacearea_sphere_with_hole_and_cone_and_triangle(r, h, d, b):\n    '''\n    Write a function to find the surface area of a sphere that has a hole and a cone, and a triangle.\n    '''\n    s = 4*math.pi*r**2 + 4*math.pi*r*h + 2*math.pi*d*d + 2*math.pi*b*b\n    return s\ndef surfacearea_sphere_with_hole_and_cone_and_triangle_and_pentagon(r, h, d, b, h2):\n    '''\n    Write a function to find the surface area of a sphere that has a hole and a cone, and a triangle and a pentagon.\n    '''\n    s = 4*math.pi*r**2 + 4*math.pi*r*h + 2*math.pi*d*d + 2*math.pi*b*b + 2*math.pi*d*d*math.sqrt(3)*math.sqrt(3) + 2*math.pi*b*b*math.sqrt(3)*math.sqrt(3)\n    return s\ndef surfacearea_sphere_with_hole_and_cone_and_triangle_and_pentagon_and_octagon(r, h, d, b, h2):\n    '''\n    Write a function to find the surface area of a sphere that has a hole and a cone, and a triangle and a pentagon and an octagon.\n    '''\n    s = 4*math.pi*r**2 + 4*math.pi*r*h + 2*math.pi*d*d + 2*math.pi*b*b + 2*math.pi*d*d*math.sqrt(3)*math.sqrt(3) + 2*math.pi*b*b*math.sqrt(3)*math.sqrt(3) + 2*math.pi*b*b*h2*math.sqrt(3)*math.sqrt(3) + 2*math.pi*d*d*h2*math.sqrt(3)*math.sqrt(3) + 2*math.pi*d*d*h2*h2*math.sqrt(3)*math.sqrt(3)\n    return s\ndef surfacearea_sphere_with_hole_and_cone_and_triangle_and_pentagon_and_octagon_and_icosahedron(r, h, d, b, h2):\n    '''\n    Write a function to find the surface area of a sphere that has a hole and a cone, and a triangle, a pentagon, and an octagon and an icosahedron.\n    '''\n    s = 4*math.pi*r**2 + 4*math.pi*r*h + 2*math.pi*d*d + 2*math.pi*b*b + 2*math.pi*d*d*math.sqrt(3)*math.sqrt(3) + 2*math.pi*b*b*math.sqrt(3)*math.sqrt(3) + 2*math.pi*b*b*h2*math.sqrt(3)*math.sqrt(3) + 2*math.pi*d*d*h2*math.sqrt(3)*math.sqrt(3) + 2*math.pi*d*d*h2*h2*math.sqrt(3)*math.sqrt(3) + 2*math.pi*b*b*h2*h2*math.sqrt(3)*math.sqrt(3) + 2*math.pi*d*d*h2*h2*h2*math.sqrt(3)*math.sqrt(3)\n    return s\ndef surfacearea_sphere_with_hole_and_cone_and_triangle_and_pentagon_and_octagon_and_icosahedron_and_dodecahedron(r, h, d, b, h2):\n    '''\n    Write a function to find the surface area of a sphere that has a hole and a cone, and a triangle, a pentagon, an octagon, and an icosahedron and a dodecahedron.\n    '''\n    s = 4*math.pi*r**2 + 4*math.p",
        "num_ids": 20
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea = 4*math.pi*(r**2)\n    return surfacearea\n",
        "num_ids": 23
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(0.5 * (3**n - 1))\n",
        "num_ids": 18
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (1.0/3.0) * (2 * (n**2) - 1) + (n**2)\n",
        "num_ids": 32
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n = int(n)\n    if n == 0:\n        return 1\n    if n == 1:\n        return 4\n    if n == 2:\n        return 7\n    if n == 3:\n        return 8\n    if n == 4:\n        return 9\n    if n == 5:\n        return 16\n    if n == 6:\n        return 18\n    if n == 7:\n        return 19\n    if n == 8:\n        return 20\n    if n == 9:\n        return 22\n    if n == 10:\n        return 24\n    if n == 11:\n        return 26\n    if n == 12:\n        return 28\n    if n == 13:\n        return 30\n    if n == 14:\n        return 32\n    if n == 15:\n        return 34\n    if n == 16:\n        return 36\n    if n == 17:\n        return 38\n    if n == 18:\n        return 40\n    if n == 19:\n        return 42\n    if n == 20:\n        return 44\n    if n == 21:\n        return 46\n    if n == 22:\n        return 48\n    if n == 23:\n        return 50\n    if n == 24:\n        return 52\n    if n == 25:\n        return 54\n    if n == 26:\n        return 56\n    if n == 27:\n        return 58\n    if n == 28:\n        return 60\n    if n == 29:\n        return 62\n    if n == 30:\n        return 64\n    if n == 31:\n        return 66\n    if n == 32:\n        return 68\n    if n == 33:\n        return 70\n    if n == 34:\n        return 72\n    if n == 35:\n        return 74\n    if n == 36:\n        return 76\n    if n == 37:\n        return 78\n    if n == 38:\n        return 80\n    if n == 39:\n        return 82\n    if n == 40:\n        return 84\n    if n == 41:\n        return 86\n    if n == 42:\n        return 88\n    if n == 43:\n        return 90\n    if n == 44:\n        return 92\n    if n == 45:\n        return 94\n    if n == 46:\n        return 96\n    if n == 47:\n        return 98\n    if n == 48:\n        return 100\n    if n == 49:\n        return 102\n    if n == 50:\n        return 104\n    if n == 51:\n        return 106\n    if n == 52:\n        return 108\n    if n == 53:\n        return 110\n    if n == 54:\n        return 112\n    if n == 55:\n        return 114\n    if n == 56:\n        return 116\n    if n == 57:\n        return 118\n    if n == 58:\n        return 120\n    if n == 59:\n        return 122\n    if n == 60:\n        return 124\n    if n == 61:\n        return 126\n    if n == 62:\n        return 128\n    if n == 63:\n        return 130\n    if n == 64:\n        return 132\n    if n == 65:\n        return 134\n    if n == 66:\n        return 136\n    if n == 67:\n        return 138\n    if n == 68:\n        return 140\n    if n == 69:\n        return 142\n    if n == 70:\n        return 144\n    if n == 71:\n        return 146\n    if n == 72:\n        return 148\n    if n == 73:\n        return 150\n    if n == 74:\n        return 152\n    if n == 75:\n        return 154\n    if n == 76:\n        return 156\n    if n == 77:\n        return 158\n    if n == 78:\n        return 160\n    if n == 79:\n        return 162\n    if n == 80:\n        return 164\n    if n == 81:\n        return 166\n    if n == 82:\n        return 168\n    if n == 83:\n        return 170\n    if n == 84:\n        return 172\n    if n == 85:\n        return 174\n    if n == 86:\n        return 176\n    if n == 87:\n        return 178\n    if n == 88:\n        return 180\n    if n == 89:\n        return 182\n    if n == 90:\n        return 184\n    if n == 91:\n        return 186\n    if n == 92:\n        return 188\n    if n == 93:\n        return 190\n    if n == 94:\n        return 192\n    if n == 95:\n        return 194\n    if n == 96:\n        return 196\n    if n == 97:\n        return 198\n    if n == 98:\n        return 200\n    if n == 99:\n        return 202\n    if n == 100:\n        return 204\n    if n == 101:\n        return 206\n    if n == 102:\n        return 208\n    if n == 103:\n        return 210\n    if n == 104:\n        return 212\n    if n == 105:\n        return 214\n    if n == 106:\n        return 216\n    if n == 107:\n        return 218\n    if n == 108:\n        return 220\n    if n == 109:\n        return 222\n    if n == 110:\n        return 224\n    if n == 111:\n        return 226\n    if n == 112:\n        return 228\n    if n == 113:\n        return 230\n    if n == 114:\n        return 232\n    if n == 115:\n        return 234\n    if n == 116:\n        return 236\n    if n == 117:\n        return 238\n    if n == 118:\n        return 240\n    if n == 119:\n        return 242\n    if n == 120:\n        return 244\n    if n == 121:\n        return 246\n    if n == 122:\n        return 248\n    if n == 123:\n        return 250\n    if n == 124:\n        return 252\n    if n == 125:\n        return 254\n    if n == 126:\n        return 256\n    if n == 127:\n        return 258\n    if n == 128:\n        return 260\n    if n == 129:\n        return 262\n    if n == 130:\n        return 264\n    if n == 131:\n        return 266\n    if n == 132:\n        return 268\n    if n == 133:\n        return 270\n    if n == 134:\n        return 272\n    if n == 135:\n        return 274\n    if n == 136:\n        return 276\n    if n == 137:\n        return 278\n    if n == 138:\n        return 280\n    if n == 139:\n        return 282\n    if n == 140:\n        return 284\n    if n == 141:\n        return 286\n    if n == 142:\n        return 288\n    if n == 143:\n        return 290\n    if n == 144:\n        return 292\n    if n == 145:\n        return 294\n    if n == 146:\n        return 296\n    if n == 147:\n        return 298\n    if n == 148:\n        return 300\n    if n == 149:\n        return 302\n    if n == 150:\n        return 304\n    if n == 151:\n        return 306\n    if n == 152:\n        return 308\n    if n == 153:\n        return 310\n    if n == 154:\n        return 312\n    if n == 155:\n        return 314\n    if n == 156:\n        return 316\n    if n == 157:\n        return 318\n    if n == 158:\n        return 320\n    if n == 159:\n        return 322\n    if n == 160:\n        return 324\n    if n == 161:\n        return 326\n    if n == 162:\n        return 328\n    if n == 163:\n        return 330\n    if n == 164:\n        return 332\n    if n == 165:\n        return 334\n    if n == 166:\n        return 336\n    if n == 167:\n        return 338\n    if n == 168:\n        return 340\n    if n == 169:\n        return 342\n    if n == 170:\n        return 344\n    if n == 171:\n        return 346\n    if n == 172:\n        return 348\n    if n == 173:\n        return 350\n    if n == 174:\n        return 352\n    if n == 175:\n        return 354\n    if n == 176:\n        return 356\n    if n == 177:\n        return 358\n    if n == 178:\n        return 360\n    if n == 179:\n        return 362\n    if n == 180:\n        return 364\n    if n == 181:\n        return 366\n    if n =",
        "num_ids": 2017
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return ((2*n + 1) ** 0.5) * 6\n",
        "num_ids": 19
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0: return 1\n    if n == 1: return 3\n    if n == 2: return 7\n    return n * (6 * n - 1) / 2\n",
        "num_ids": 43
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n = int(n)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 9\n    elif n == 6:\n        return 11\n    elif n == 7:\n        return 13\n    elif n == 8:\n        return 15\n    elif n == 9:\n        return 17\n    elif n == 10:\n        return 19\n    elif n == 11:\n        return 21\n    elif n == 12:\n        return 23\n    elif n == 13:\n        return 25\n    elif n == 14:\n        return 27\n    elif n == 15:\n        return 29\n    elif n == 16:\n        return 31\n    elif n == 17:\n        return 33\n    elif n == 18:\n        return 35\n    elif n == 19:\n        return 37\n    elif n == 20:\n        return 39\n    elif n == 21:\n        return 41\n    elif n == 22:\n        return 43\n    elif n == 23:\n        return 45\n    elif n == 24:\n        return 47\n    elif n == 25:\n        return 49\n    elif n == 26:\n        return 51\n    elif n == 27:\n        return 53\n    elif n == 28:\n        return 55\n    elif n == 29:\n        return 57\n    elif n == 30:\n        return 59\n    elif n == 31:\n        return 61\n    elif n == 32:\n        return 63\n    elif n == 33:\n        return 65\n    elif n == 34:\n        return 67\n    elif n == 35:\n        return 69\n    elif n == 36:\n        return 71\n    elif n == 37:\n        return 73\n    elif n == 38:\n        return 75\n    elif n == 39:\n        return 77\n    elif n == 40:\n        return 79\n    elif n == 41:\n        return 81\n    elif n == 42:\n        return 83\n    elif n == 43:\n        return 85\n    elif n == 44:\n        return 87\n    elif n == 45:\n        return 89\n    elif n == 46:\n        return 91\n    elif n == 47:\n        return 93\n    elif n == 48:\n        return 95\n    elif n == 49:\n        return 97\n    elif n == 50:\n        return 99\n    elif n == 51:\n        return 101\n    elif n == 52:\n        return 103\n    elif n == 53:\n        return 105\n    elif n == 54:\n        return 107\n    elif n == 55:\n        return 109\n    elif n == 56:\n        return 111\n    elif n == 57:\n        return 113\n    elif n == 58:\n        return 115\n    elif n == 59:\n        return 117\n    elif n == 60:\n        return 119\n    elif n == 61:\n        return 121\n    elif n == 62:\n        return 123\n    elif n == 63:\n        return 125\n    elif n == 64:\n        return 127\n    elif n == 65:\n        return 129\n    elif n == 66:\n        return 131\n    elif n == 67:\n        return 133\n    elif n == 68:\n        return 135\n    elif n == 69:\n        return 137\n    elif n == 70:\n        return 139\n    elif n == 71:\n        return 141\n    elif n == 72:\n        return 143\n    elif n == 73:\n        return 145\n    elif n == 74:\n        return 147\n    elif n == 75:\n        return 149\n    elif n == 76:\n        return 151\n    elif n == 77:\n        return 153\n    elif n == 78:\n        return 155\n    elif n == 79:\n        return 157\n    elif n == 80:\n        return 159\n    elif n == 81:\n        return 161\n    elif n == 82:\n        return 163\n    elif n == 83:\n        return 165\n    elif n == 84:\n        return 167\n    elif n == 85:\n        return 169\n    elif n == 86:\n        return 171\n    elif n == 87:\n        return 173\n    elif n == 88:\n        return 175\n    elif n == 89:\n        return 177\n    elif n == 90:\n        return 179\n    elif n == 91:\n        return 181\n    elif n == 92:\n        return 183\n    elif n == 93:\n        return 185\n    elif n == 94:\n        return 187\n    elif n == 95:\n        return 189\n    elif n == 96:\n        return 191\n    elif n == 97:\n        return 193\n    elif n == 98:\n        return 195\n    elif n == 99:\n        return 197\n    elif n == 100:\n        return 199\n    elif n == 101:\n        return 201\n    elif n == 102:\n        return 203\n    elif n == 103:\n        return 205\n    elif n == 104:\n        return 207\n    elif n == 105:\n        return 209\n    elif n == 106:\n        return 211\n    elif n == 107:\n        return 213\n    elif n == 108:\n        return 215\n    elif n == 109:\n        return 217\n    elif n == 110:\n        return 219\n    elif n == 111:\n        return 221\n    elif n == 112:\n        return 223\n    elif n == 113:\n        return 225\n    elif n == 114:\n        return 227\n    elif n == 115:\n        return 229\n    elif n == 116:\n        return 231\n    elif n == 117:\n        return 233\n    elif n == 118:\n        return 235\n    elif n == 119:\n        return 237\n    elif n == 120:\n        return 239\n    elif n == 121:\n        return 241\n    elif n == 122:\n        return 243\n    elif n == 123:\n        return 245\n    elif n == 124:\n        return 247\n    elif n == 125:\n        return 249\n    elif n == 126:\n        return 251\n    elif n == 127:\n        return 253\n    elif n == 128:\n        return 255\n    elif n == 129:\n        return 257\n    elif n == 130:\n        return 259\n    elif n == 131:\n        return 261\n    elif n == 132:\n        return 263\n    elif n == 133:\n        return 265\n    elif n == 134:\n        return 267\n    elif n == 135:\n        return 269\n    elif n == 136:\n        return 271\n    elif n == 137:\n        return 273\n    elif n == 138:\n        return 275\n    elif n == 139:\n        return 277\n    elif n == 140:\n        return 279\n    elif n == 141:\n        return 281\n    elif n == 142:\n        return 283\n    elif n == 143:\n        return 285\n    elif n == 144:\n        return 287\n    elif n == 145:\n        return 289\n    elif n == 146:\n        return 291\n    elif n == 147:\n        return 293\n    elif n == 148:\n        return 295\n    elif n == 149:\n        return 297\n    elif n == 150:\n        return 299\n    elif n == 151:\n        return 301\n    elif n == 152:\n        return 303\n    elif n == 153:\n        return 305\n    elif n == 154:\n        return 307\n    elif n == 155:\n        return 309\n    elif n == 156:\n        return 311\n    elif n == 157:\n        return 313\n    elif n == 158:\n        return 315\n    elif n == 159:\n        return 317\n    elif n == 160:\n        return 319\n    elif n == 161:\n        return 321\n    elif n == 162:\n        return 323\n    elif n == 163:\n        return 325\n    elif n == 164:\n        return 327\n    elif n == 165:\n        return 329\n    elif n == 166:\n        return 331\n    elif ",
        "num_ids": 2017
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Code here\n    for i in range(1,n):\n        if (i**2 - n)%6==0:\n            return i**2 - n\n    return -1\n",
        "num_ids": 46
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def hex_num(n):\n        '''\n        Function to find the nth centered hexagonal number.\n        '''\n        if n == 0:\n            return 0\n        else:\n            return (6 * (n-1) + 5)\n    \n    return hex_num(n)\n",
        "num_ids": 42
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 6*n - 4\n",
        "num_ids": 25
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (2 * n + 1) ** 2 - n\n",
        "num_ids": 16
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict(dict1.items() + dict2.items() + dict3.items())\n",
        "num_ids": 24
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #print(dict1)\n    #print(dict2)\n    #print(dict3)\n    merged_dictionary = {}\n    merged_dictionary.update(dict1)\n    merged_dictionary.update(dict2)\n    merged_dictionary.update(dict3)\n    return merged_dictionary\n",
        "num_ids": 81
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #if there is no dictionaries then the function returns an empty dict\n    if len(dict1) == 0 and len(dict2) == 0 and len(dict3) == 0:\n        return {}\n    \n    #if there is one dictionary, the function returns that dictionary\n    if len(dict1) == 1 and len(dict2) == 0 and len(dict3) == 0:\n        return dict1\n    \n    #if there is no dictionary in dict1, we get a dictionary with only one key, value pair, which will be the result.\n    if len(dict1) == 0:\n        return {dict2[0]:dict3[0]}\n    \n    #if there is only one dictionary in dict2, we get a dictionary with only one key, value pair, which will be the result.\n    if len(dict2) == 1:\n        return {dict1[0]:dict2[0]}\n    \n    #if there is only one dictionary in dict3, we get a dictionary with only one key, value pair, which will be the result.\n    if len(dict3) == 1:\n        return {dict1[0]:dict3[0]}\n    \n    #else we merge the dictionaries\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\n",
        "num_ids": 306
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.update(dict2)\n",
        "num_ids": 13
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #d1 = {1: 'one', 2: 'two', 3: 'three'}\n    #d2 = {4: 'four', 5: 'five', 6:'six'}\n    #d3 = {7:'seven', 8: 'eight', 9: 'nine'}\n    #result = {1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five', 6:'six', 7:'seven', 8: 'eight', 9: 'nine'}\n    result = dict1.copy()\n    result.update(dict2)\n    result.update(dict3)\n    return result\n    \ndef merge_dictionaries_two(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries.\n    '''\n    #d1 = {1: 'one', 2: 'two', 3: 'three'}\n    #d2 = {4: 'four', 5: 'five', 6:'six'}\n    #result = {1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five', 6:'six'}\n    result = dict1.copy()\n    result.update(dict2)\n    return result\n",
        "num_ids": 105
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2,**dict3}\n",
        "num_ids": 18
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\n",
        "num_ids": 27
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    keys = set(dict1.keys()) | set(dict2.keys()) | set(dict3.keys())\n    return {key:dict1[key] if key in dict1 else dict2[key] if key in dict2 else dict3[key] for key in keys}\n",
        "num_ids": 67
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {**dict1,**dict2,**dict3}\n    return result\n",
        "num_ids": 23
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n",
        "num_ids": 18
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    counts = {}\n    for i in list1:\n        counts[i] = counts.get(i,0) + 1\n    return counts\n",
        "num_ids": 38
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    mydict = collections.Counter(list1)\n    return mydict\n",
        "num_ids": 19
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for elem in list1:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict\n",
        "num_ids": 65
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for word in list1:\n        if word in freq:\n            freq[word] += 1\n        else:\n            freq[word] = 1\n    return freq\n",
        "num_ids": 51
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict = {}\n    for ele in list1:\n        if ele in dict:\n            dict[ele] += 1\n        else:\n            dict[ele] = 1\n    return dict\n",
        "num_ids": 46
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    x = dict(collections.Counter(list1))\n    return x\n",
        "num_ids": 20
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    return {i: list1.count(i) for i in list1}\n",
        "num_ids": 21
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    list2=[]\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    freq_dict={}\n    for i in list2:\n        freq_dict[i]=list1.count(i)\n    return freq_dict\n",
        "num_ids": 73
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    if(type(list1) == list):\n        d = collections.defaultdict(int)\n        for i in list1:\n            d[i] += 1\n        return d\n    else:\n        return \"Invalid Input\"\n",
        "num_ids": 56
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    result = dict()\n    for item in list1:\n        if item in result.keys():\n            result[item] += 1\n        else:\n            result[item] = 1\n",
        "num_ids": 45
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    m = 0\n    while(n >= 1):\n        m = n\n        n = n // 2\n        if(n == 1):\n            return m\n    return m\n",
        "num_ids": 48
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def closest_num(N):\n        return N - 1 if N <= 1 else (N // 2) - (N // 10)\n    return closest_num(N)",
        "num_ids": 41
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return N\n    if N > 0:\n        return N - 1\n    if N < 0:\n        return 0\n",
        "num_ids": 37
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    \n    if N == 0:\n        return N\n    \n    if N < 0:\n        return None\n    \n    if N < 2:\n        return N\n    \n    low = 1\n    high = N\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if mid * mid == N:\n            return mid\n        elif mid * mid > N:\n            high = mid - 1\n        else:\n            low = mid + 1\n            \n    return low\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2019
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if not N:\n        return None\n    left = 0\n    right = N\n",
        "num_ids": 22
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 0:\n        return -1\n    if N == 1:\n        return 0\n    if N == 2:\n        return 1\n    if N == 3:\n        return 2\n    if N == 4:\n        return 3\n    if N == 5:\n        return 4\n    if N == 6:\n        return 5\n    if N == 7:\n        return 6\n    if N == 8:\n        return 7\n    if N == 9:\n        return 8\n    if N == 10:\n        return 9\n    if N == 11:\n        return 10\n    if N == 12:\n        return 11\n    if N == 13:\n        return 12\n    if N == 14:\n        return 13\n    if N == 15:\n        return 14\n    if N == 16:\n        return 15\n    if N == 17:\n        return 16\n    if N == 18:\n        return 17\n    if N == 19:\n        return 18\n    if N == 20:\n        return 19\n    if N == 21:\n        return 20\n    if N == 22:\n        return 21\n    if N == 23:\n        return 22\n    if N == 24:\n        return 23\n    if N == 25:\n        return 24\n    if N == 26:\n        return 25\n    if N == 27:\n        return 26\n    if N == 28:\n        return 27\n    if N == 29:\n        return 28\n    if N == 30:\n        return 29\n    if N == 31:\n        return 30\n    if N == 32:\n        return 31\n    if N == 33:\n        return 32\n    if N == 34:\n        return 33\n    if N == 35:\n        return 34\n    if N == 36:\n        return 35\n    if N == 37:\n        return 36\n    if N == 38:\n        return 37\n    if N == 39:\n        return 38\n    if N == 40:\n        return 39\n    if N == 41:\n        return 40\n    if N == 42:\n        return 41\n    if N == 43:\n        return 42\n    if N == 44:\n        return 43\n    if N == 45:\n        return 44\n    if N == 46:\n        return 45\n    if N == 47:\n        return 46\n    if N == 48:\n        return 47\n    if N == 49:\n        return 48\n    if N == 50:\n        return 49\n    if N == 51:\n        return 50\n    if N == 52:\n        return 51\n    if N == 53:\n        return 52\n    if N == 54:\n        return 53\n    if N == 55:\n        return 54\n    if N == 56:\n        return 55\n    if N == 57:\n        return 56\n    if N == 58:\n        return 57\n    if N == 59:\n        return 58\n    if N == 60:\n        return 59\n    if N == 61:\n        return 60\n    if N == 62:\n        return 61\n    if N == 63:\n        return 62\n    if N == 64:\n        return 63\n    if N == 65:\n        return 64\n    if N == 66:\n        return 65\n    if N == 67:\n        return 66\n    if N == 68:\n        return 67\n    if N == 69:\n        return 68\n    if N == 70:\n        return 69\n    if N == 71:\n        return 70\n    if N == 72:\n        return 71\n    if N == 73:\n        return 72\n    if N == 74:\n        return 73\n    if N == 75:\n        return 74\n    if N == 76:\n        return 75\n    if N == 77:\n        return 76\n    if N == 78:\n        return 77\n    if N == 79:\n        return 78\n    if N == 80:\n        return 79\n    if N == 81:\n        return 80\n    if N == 82:\n        return 81\n    if N == 83:\n        return 82\n    if N == 84:\n        return 83\n    if N == 85:\n        return 84\n    if N == 86:\n        return 85\n    if N == 87:\n        return 86\n    if N == 88:\n        return 87\n    if N == 89:\n        return 88\n    if N == 90:\n        return 89\n    if N == 91:\n        return 90\n    if N == 92:\n        return 91\n    if N == 93:\n        return 92\n    if N == 94:\n        return 93\n    if N == 95:\n        return 94\n    if N == 96:\n        return 95\n    if N == 97:\n        return 96\n    if N == 98:\n        return 97\n    if N == 99:\n        return 98\n    if N == 100:\n        return 99\n    if N == 101:\n        return 100\n    if N == 102:\n        return 101\n    if N == 103:\n        return 102\n    if N == 104:\n        return 103\n    if N == 105:\n        return 104\n    if N == 106:\n        return 105\n    if N == 107:\n        return 106\n    if N == 108:\n        return 107\n    if N == 109:\n        return 108\n    if N == 110:\n        return 109\n    if N == 111:\n        return 110\n    if N == 112:\n        return 111\n    if N == 113:\n        return 112\n    if N == 114:\n        return 113\n    if N == 115:\n        return 114\n    if N == 116:\n        return 115\n    if N == 117:\n        return 116\n    if N == 118:\n        return 117\n    if N == 119:\n        return 118\n    if N == 120:\n        return 119\n    if N == 121:\n        return 120\n    if N == 122:\n        return 121\n    if N == 123:\n        return 122\n    if N == 124:\n        return 123\n    if N == 125:\n        return 124\n    if N == 126:\n        return 125\n    if N == 127:\n        return 126\n    if N == 128:\n        return 127\n    if N == 129:\n        return 128\n    if N == 130:\n        return 129\n    if N == 131:\n        return 130\n    if N == 132:\n        return 131\n    if N == 133:\n        return 132\n    if N == 134:\n        return 133\n    if N == 135:\n        return 134\n    if N == 136:\n        return 135\n    if N == 137:\n        return 136\n    if N == 138:\n        return 137\n    if N == 139:\n        return 138\n    if N == 140:\n        return 139\n    if N == 141:\n        return 140\n    if N == 142:\n        return 141\n    if N == 143:\n        return 142\n    if N == 144:\n        return 143\n    if N == 145:\n        return 144\n    if N == 146:\n        return 145\n    if N == 147:\n        return 146\n    if N == 148:\n        return 147\n    if N == 149:\n        return 148\n    if N == 150:\n        return 149\n    if N == 151:\n        return 150\n    if N == 152:\n        return 151\n    if N == 153:\n        return 152\n    if N == 154:\n        return 153\n    if N == 155:\n        return 154\n    if N == 156:\n        return 155\n    if N == 157:\n        return 156\n    if N == 158:\n        return 157\n    if N == 159:\n        return 158\n    if N == 160:\n        return 159\n    if N == 161:\n        return 160\n    if N == 162:\n        return 161\n    if N == 163:\n        return 162\n    if N == 164:\n        return 163\n    if N == 165:\n        return 164\n    if N == 166:\n        return 165\n    if N == 167:\n        return 166\n    if N == 168:\n        return 167\n    if N == 169:\n        return 168\n    if N == 170:\n        return 169\n    if N == 171:\n        return 170\n    if N == 172:\n        return 171\n    if N == 173:\n        return 172\n    if N == 174:\n        return 173\n    if N == 175:\n        return 174\n    if N == 176:\n        return 175\n    if N == 177:\n        return 176\n    if N == 178:\n        return 177\n    if N == 179:\n        return 178\n    if N == 180:\n        return 179\n    if N == 181:\n        return 180\n    if N == 182:\n        return 181\n    if N =",
        "num_ids": 2020
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 1\n    max_num = N\n    while N > 0:\n        if max_num - N < N:\n            max_num = N\n        N -= 1\n    return max_num\n",
        "num_ids": 56
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    if N == 0:\n        return 0\n    \n    MIN = 0\n    MAX = N\n    \n    while MIN <= MAX:\n        \n        mid = (MIN + MAX) // 2\n        \n        if mid > N:\n            MAX = mid - 1\n        else:\n            MIN = mid + 1\n    \n    return MIN\n",
        "num_ids": 82
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 0:\n        return 0\n    \n    min_num = 1\n    while True:\n        if N - min_num == 1:\n            return min_num\n        if N - min_num > 1:\n            min_num += 1\n        else:\n            return min_num - 1\n",
        "num_ids": 74
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    N = float(N)\n    if N == 0:\n        return 0\n    for i in range(1,10000):\n        if N >= i:\n            continue\n        else:\n            return i\n",
        "num_ids": 50
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    \n    return max(map(len,list1))\n",
        "num_ids": 16
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    def len_recursive(list1,list2):\n        if not list2:\n            return 0\n        elif len(list2[0])>len(list1[0]):\n            return len_recursive(list2[1:],list1)\n        else:\n            return len_recursive(list1[1:],list2)\n    if list1:\n        return len_recursive(list1,list1)\n    else:\n        return 0\n",
        "num_ids": 113
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1 = list1.split()\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n",
        "num_ids": 49
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word_len = []\n    for i in range(len(list1)):\n        word_len.append(len(list1[i]))\n    print('The longest word is: ',max(word_len))\n",
        "num_ids": 54
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        curr = list1[0]\n        for i in range(1,len(list1)):\n            if list1[i] > curr:\n                curr = list1[i]\n        return len(curr)\n",
        "num_ids": 76
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length = 0\n    for word in list1:\n        if len(word) > length:\n            length = len(word)\n    return length\ndef reverse_list(list1):\n    '''\n    Write a python function to reverse the contents of the list.\n    '''\n    for i in range(0, len(list1)):\n        temp = list1[i]\n        list1[i] = list1[len(list1) - 1 - i]\n        list1[len(list1) - 1 - i] = temp\n    return list1\ndef sum_num(list1):\n    '''\n    Write a python function to add the numbers in a list.\n    '''\n    sum_num = 0\n    for i in range(0, len(list1)):\n        sum_num += list1[i]\n    return sum_num\ndef subtract(list1, list2):\n    '''\n    Write a python function to subtract the numbers in a list from another list.\n    '''\n    subtracted = []\n    for i in range(0, len(list1)):\n        subtracted.append(list1[i] - list2[i])\n    return subtracted\ndef subtract_even(list1, list2):\n    '''\n    Write a python function to subtract the even numbers in a list from another list.\n    '''\n    subtracted = []\n    for i in range(0, len(list1)):\n        if list1[i] % 2 == 0 and list2[i] % 2 == 0:\n            subtracted.append(list1[i] - list2[i])\n        else:\n            continue\n    return subtracted\ndef reverse_num(list1):\n    '''\n    Write a python function to reverse the numbers in a list.\n    '''\n    reversed = []\n    for i in range(0, len(list1)):\n        reversed.append(list1[len(list1) - 1 - i])\n    return reversed\ndef sum_num_even(list1, list2):\n    '''\n    Write a python function to add the even numbers in a list to another list.\n    '''\n    added_even = []\n    for i in range(0, len(list1)):\n        if list1[i] % 2 == 0 and list2[i] % 2 == 0:\n            added_even.append(list1[i] + list2[i])\n        else:\n            continue\n    return added_even\ndef sum_num_odd(list1, list2):\n    '''\n    Write a python function to add the odd numbers in a list to another list.\n    '''\n    added_odd = []\n    for i in range(0, len(list1)):\n        if list1[i] % 2 == 1 and list2[i] % 2 == 1:\n            added_odd.append(list1[i] + list2[i])\n        else:\n            continue\n    return added_odd\ndef sum_odd(list1):\n    '''\n    Write a python function to add the odd numbers in a list.\n    '''\n    sum_odd = 0\n    for i in range(0, len(list1)):\n        sum_odd += list1[i]\n    return sum_odd\ndef sum_even(list1):\n    '''\n    Write a python function to add the even numbers in a list.\n    '''\n    sum_even = 0\n    for i in range(0, len(list1)):\n        sum_even += list1[i]\n    return sum_even\ndef reverse_even(list1):\n    '''\n    Write a python function to reverse the even numbers in a list.\n    '''\n    reversed = []\n    for i in range(0, len(list1)):\n        if list1[i] % 2 == 0:\n            reversed.append(list1[i])\n        else:\n            continue\n    return reversed\ndef even_odd(list1):\n    '''\n    Write a python function to add the even and odd numbers in a list.\n    '''\n    added_even_odd = []\n    for i in range(0, len(list1)):\n        if list1[i] % 2 == 0:\n            added_even_odd.append(list1[i])\n        else:\n            continue\n    return added_even_odd\ndef odd_even(list1):\n    '''\n    Write a python function to add the odd and even numbers in a list.\n    '''\n    added_odd_even = []\n    for i in range(0, len(list1)):\n        if list1[i] % 2 == 1:\n            added_odd_even.append(list1[i])\n        else:\n            continue\n    return added_odd_even\ndef sum_odd_even(list1):\n    '''\n    Write a python function to add the odd and even numbers in a list.\n    '''\n    added_odd_even = []\n    for i in range(0, len(list1)):\n        if list1[i] % 2 == 1:\n            added_odd_even.append(list1[i])\n        else:\n            continue\n    for i in range(0, len(list1)):\n        if list1[i] % 2 == 0:\n            added_odd_even.append(list1[i])\n        else:\n            continue\n    return added_odd_even\ndef sum_even_odd(list1):\n    '''\n    Write a python function to add the odd and even numbers in a list.\n    '''\n    added_even_odd = []\n    for i in range(0, len(list1)):\n        if list1[i] % 2 == 0:\n            added_even_odd.append(list1[i])\n        else:\n            continue\n    for i in range(0, len(list1)):\n        if list1[i] % 2 == 1:\n            added_even_odd.append(list1[i])\n        else:\n            continue\n    return added_even_odd\ndef sum_odd_even_odd(list1):\n    '''\n    Write a python function to add the odd and even numbers in a list.\n    '''\n    added_odd_even = []\n    for i in range(0, len(list1)):\n        if list1[i] % 2 == 1:\n            added_odd_even.append(list1[i])\n        else:\n            continue\n    for i in range(0, len(list1)):\n        if list1[i] % 2 == 0:\n            added_odd_even.append(list1[i])\n        else:\n            continue\n    return added_odd_even\ndef sum_even_odd_odd(list1):\n    '''\n    Write a python function to add the odd and even numbers in a list.\n    '''\n    added_even_odd = []\n    for i in range(0, len(list1)):\n        if list1[i] % 2 == 0:\n            added_even_odd.append(list1[i])\n        else:\n            continue\n    for i in range(0, len(list1)):\n        if list1[i] % 2 == 1:\n            added_even_odd.append(list1[i])\n        else:\n            continue\n    return added_even_odd\ndef sum_even_odd_even(list1):\n    '''\n    Write a python function to add the odd and even numbers in a list.\n    '''\n    added_even_odd = []\n    for i in range(0, len(list1)):\n        if list1[i] % 2 == 0:\n            added_even_odd.append(list1[i])\n        else:\n            continue\n    for i in range(0, len(list1)):\n        if list1[i] % 2 == 1:\n            added_even_odd.append(list1[i])\n        else:\n            continue\n    return added_even_odd\ndef sum_odd_odd_even(list1):\n    '''\n    Write a python function to add the odd and even numbers in a list.\n    '''\n    added_odd_odd = []\n    for i in range(0, len(list1)):\n        if list1[i] % 2 == 1:\n            added_odd_odd.append(list1[i])\n        else:\n            continue\n    for ",
        "num_ids": 64
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1 = input(\"Enter a list of words: \").split()\n    list2 = []\n    for word in list1:\n        list2.append(len(word))\n    print(max(list2))\n",
        "num_ids": 53
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len_max = 0\n    for item in list1:\n        if len(item) > len_max:\n            len_max = len(item)\n    print(len_max)\n",
        "num_ids": 47
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    n = len(list1)\n    max = 0\n    for i in range(n):\n        if len(list1[i]) > max:\n            max = len(list1[i])\n    return max\n",
        "num_ids": 53
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length = 0\n    for word in list1:\n        if len(word) > length:\n            length = len(word)\n    return length\n",
        "num_ids": 37
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    import re\n    if not str1:\n        return False\n    if len(sub_str) > len(str1):\n        return False\n    for i in range(len(str1) - len(sub_str) + 1):\n        if str1[i] == sub_str[0]:\n            count = 1\n            match = True\n            for j in range(1, len(sub_str)):\n                if str1[i + j]!= sub_str[j]:\n                    match = False\n                    break\n                count += 1\n            if match:\n                return True\n    return False\n",
        "num_ids": 143
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if i in sub_str:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # create a list of all values in the string\n    list_of_all_strings = []\n    # for each character in the list of string values\n    for each_value in sub_str:\n        # add each character into a string\n        list_of_all_strings.append(each_value)\n    # go through the string list\n    for each_string in str1:\n        # check if the character is present in the string list\n        if each_string in list_of_all_strings:\n            # if the character is present in the list, return True\n            return True\n    # if we reach here, the string is not in the list of strings\n    return False\n",
        "num_ids": 158
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # if len(sub_str) > len(str1):\n    #     return False\n",
        "num_ids": 24
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Check if every substring of str1 is present as a substring in str2\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "num_ids": 44
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i] == sub_str[0]:\n            for j in range(len(sub_str)):\n                if str1[i+j]!= sub_str[j]:\n                    return False\n    return True\n",
        "num_ids": 70
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any([str1 in s for s in sub_str])\n",
        "num_ids": 18
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(0, len(str1)):\n        if str1[i:].find(sub_str) == -1:\n            return False\n    return True\n",
        "num_ids": 44
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # naive\n    # for i in range(len(str1)):\n    #     if str1[i:i+len(sub_str)] == sub_str:\n    #         return True\n",
        "num_ids": 49
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    sum_cnt = 0\n    while n > 0:\n        sum_cnt += (n%10)\n        n = n//10\n    if sum_cnt%3 == 0 and sum_cnt > 0:\n        return True\n    else:\n        return False\n    \nis_undulating(13)\n",
        "num_ids": 77
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n==1 or n==0):\n        return False\n    elif (n==2 or n==3):\n        return True\n    else:\n        for i in range(2,n):\n            if (n%i==0):\n                return False\n    return True\n",
        "num_ids": 68
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    count = 0\n    while n:\n        if n%10 == 3 or n%10 == 6 or n%10 == 9:\n            count += 1\n        n = n//10\n    if count > 2:\n        return True\n    else:\n        return False\n",
        "num_ids": 64
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Implementation\n    count = 0\n    while n!= 1:\n        count += 1\n        if n%2 == 0:\n            n = n//2\n        else:\n            n = n*3+1\n",
        "num_ids": 53
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1:\n        return False\n    \n    temp = n\n    count = 0\n    while temp > 0:\n        temp = temp//2\n        count += 1\n    \n    if count % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 67
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n%3==0:\n        return True\n    return False\n",
        "num_ids": 19
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 0 and n % 2 == 0:\n        return True\n    return False\n",
        "num_ids": 23
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n == 1 or n == 0 or n == -1 or n == -2):\n        return False\n    else:\n        if n % 2 == 0:\n            return True\n        elif n % 2!= 0:\n            return False\n",
        "num_ids": 60
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Removing the decimal point\n    n = str(n)\n    l = len(n)\n",
        "num_ids": 26
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    x = a ** b\n    print(\"{0} to the power {1} is equal to {2}\".format(a,b,x))\n    return x\n",
        "num_ids": 41
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a * power(a, b-1)\n",
        "num_ids": 42
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if(b==0):\n        return 1\n    elif(b==1):\n        return a\n    elif(b%2==0):\n        return power(a,b//2)*power(a,b//2)\n    else:\n        return a*power(a,b//2)*power(a,b//2)\n",
        "num_ids": 82
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\nprint(power(2,3))\n",
        "num_ids": 17
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n    \ndef is_prime(n):\n    '''\n    Write a function to check whether 'n' is a prime number or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n        return True\n    \ndef sum_of_digits(n):\n    '''\n    Write a function to calculate the sum of digits of 'n'.\n    '''\n    s = 0\n    while n > 0:\n        n,d = divmod(n,10)\n        s = s + d\n    return s\n    \ndef sum_of_digits_1(n):\n    '''\n    Write a function to calculate the sum of digits of 'n'.\n    '''\n    return sum([int(i) for i in str(n)])\n    \ndef sum_of_digits_2(n):\n    '''\n    Write a function to calculate the sum of digits of 'n'.\n    '''\n    return sum(list(map(int,str(n))))\n    \ndef sum_of_digits_3(n):\n    '''\n    Write a function to calculate the sum of digits of 'n'.\n    '''\n    n = str(n)\n    return sum(map(int,n))\n    \ndef sum_of_digits_4(n):\n    '''\n    Write a function to calculate the sum of digits of 'n'.\n    '''\n    return sum(map(int,str(n)))\n    \ndef sum_of_digits_5(n):\n    '''\n    Write a function to calculate the sum of digits of 'n'.\n    '''\n    return sum(int(i) for i in str(n))\n    \ndef sum_of_digits_6(n):\n    '''\n    Write a function to calculate the sum of digits of 'n'.\n    '''\n    return sum(int(i) for i in str(n) if i!= '0')\n    \ndef sum_of_digits_7(n):\n    '''\n    Write a function to calculate the sum of digits of 'n'.\n    '''\n    if not n:\n        return 0\n    return sum(int(i) for i in str(n) if i!= '0')\n    \ndef sum_of_digits_8(n):\n    '''\n    Write a function to calculate the sum of digits of 'n'.\n    '''\n    if not n:\n        return 0\n    if type(n) == str:\n        return sum(int(i) for i in str(n) if i!= '0')\n    return sum(int(i) for i in str(n) if i!= '0')\n    \ndef sum_of_digits_9(n):\n    '''\n    Write a function to calculate the sum of digits of 'n'.\n    '''\n    if n == 0:\n        return 0\n    return sum(int(i) for i in str(n) if i!= '0')\n    \ndef sum_of_digits_10(n):\n    '''\n    Write a function to calculate the sum of digits of 'n'.\n    '''\n    if n == 0:\n        return 0\n    return sum(int(i) for i in str(n) if i!= '0')\n    \ndef sum_of_digits_11(n):\n    '''\n    Write a function to calculate the sum of digits of 'n'.\n    '''\n    if not n:\n        return 0\n    if type(n) == str:\n        return sum(int(i) for i in str(n) if i!= '0')\n    return sum(int(i) for i in str(n) if i!= '0')\n    \ndef sum_of_digits_12(n):\n    '''\n    Write a function to calculate the sum of digits of 'n'.\n    '''\n    return sum(int(i) for i in str(n) if i!= '0')\n    \ndef sum_of_digits_13(n):\n    '''\n    Write a function to calculate the sum of digits of 'n'.\n    '''\n    return sum(i for i in str(n) if i!= '0')\n    \ndef sum_of_digits_14(n):\n    '''\n    Write a function to calculate the sum of digits of 'n'.\n    '''\n    return sum(i for i in str(n) if i!= '0')\n    \ndef sum_of_digits_15(n):\n    '''\n    Write a function to calculate the sum of digits of 'n'.\n    '''\n    return sum(i for i in str(n) if i!= '0')\n    \ndef sum_of_digits_16(n):\n    '''\n    Write a function to calculate the sum of digits of 'n'.\n    '''\n    if not n:\n        return 0\n    return sum(i for i in str(n) if i!= '0')\n    \ndef sum_of_digits_17(n):\n    '''\n    Write a function to calculate the sum of digits of 'n'.\n    '''\n    if not n:\n        return 0\n    return sum(int(i) for i in str(n) if i!= '0')\n    \ndef sum_of_digits_18(n):\n    '''\n    Write a function to calculate the sum of digits of 'n'.\n    '''\n    if not n:\n        return 0\n    return sum(int(i) for i in str(n) if i!= '0')\n    \ndef sum_of_digits_19(n):\n    '''\n    Write a function to calculate the sum of digits of 'n'.\n    '''\n    if not n:\n        return 0\n    return sum(int(i) for i in str(n) if i!= '0')\n    \ndef sum_of_digits_20(n):\n    '''\n    Write a function to calculate the sum of digits of 'n'.\n    '''\n    if not n:\n        return 0\n    return sum(int(i) for i in str(n) if i!= '0')\n    \ndef sum_of_digits_21(n):\n    '''\n    Write a function to calculate the sum of digits of 'n'.\n    '''\n    return sum(i for i in str(n) if i!= '0')\n    \ndef sum_of_digits_22(n):\n    '''\n    Write a function to calculate the sum of digits of 'n'.\n    '''\n    return sum(i for i in str(n) if i!= '0')\n    \ndef sum_of_digits_23(n):\n    '''\n    Write a function to calculate the sum of digits of 'n'.\n    '''\n    return sum(i for i in str(n) if i!= '0')\n    \ndef sum_of_digits_24(n):\n    '''\n    Write a function to calculate the sum of digits of 'n'.\n    '''\n    return sum(i for i in str(n) if i!= '0')\n    \ndef sum_of_digits_25(n):\n    '''\n    Write a function to calculate the sum of digits of 'n'.\n    '''\n    return sum(i for i in str(n) if i!= '0')\n    \ndef sum_of_digits_26(n):\n    '''\n    Write a function to calculate the sum of digits of 'n'.\n    '''\n    return sum(i for i in str(n) if i!= '0')\n    \ndef sum_of_digits_27(n):\n    '''\n    Write a function to calculate the sum of digits of 'n'.\n    '''\n    return sum(i for i in str(n) if i!= '0')\n    \ndef sum_of_digits_28(n):\n    '''\n    Write a function to calculate the sum of digits of 'n'.\n    '''\n    return sum(i for i in str(n) if i!= '0')\n    \ndef sum_of_digits_29(n):\n    '''\n    Write a function to calculate the sum of digits of 'n'.\n    '''\n    return sum(i for i in str(n) if i!= '0')\n    \ndef sum_of",
        "num_ids": 28
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a*power(a,b-1)\n",
        "num_ids": 30
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=itemgetter(1))\n    return test_list[0]\n",
        "num_ids": 27
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # new_list = sorted(test_list, key=itemgetter(1))\n    new_list = sorted(test_list, key=lambda x: (x[1], x[0]))\n    # new_list = sorted(test_list, key=lambda x: (x[1], x[0]))\n    # new_list = sorted(test_list, key=lambda x: (x[1], x[0]))\n    # new_list = sorted(test_list, key=lambda x: x[1])\n    # new_list = sorted(test_list, key=lambda x: (x[1], x[0]))\n    # new_list = sorted(test_list, key=lambda x: x[0])\n    # new_list = sorted(test_list, key=lambda x: x[1])\n    # new_list = sorted(test_list, key=lambda x: (x[1], x[0]))\n    # new_list = sorted(test_list, key=lambda x: (x[0], x[1]))\n    return new_list[0]\n",
        "num_ids": 265
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    a = []\n    for i in range(len(test_list)):\n        a.append(test_list[i][0])\n    a.sort()\n    return a[0], a[0]\n",
        "num_ids": 52
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #first: sort the list in ascending order\n    test_list.sort(key=itemgetter(1))\n    #print(test_list)\n    #second: get the minimum value\n    min_val = test_list[0]\n    #print(min_val)\n    return min_val\n",
        "num_ids": 74
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # start_test_list = test_list\n    # sort_test_list = sorted(test_list, key=itemgetter(1))\n    # return sort_test_list[0][0]\n    \n    # Another solution\n    return min(test_list, key=itemgetter(1))[0]\n",
        "num_ids": 78
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))\n",
        "num_ids": 19
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    new_list = sorted(test_list, key=itemgetter(1))\n    for i in new_list:\n        if i[1] == min(new_list, key=itemgetter(1)):\n            return i[0]\n",
        "num_ids": 61
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list = sorted(test_list, key=itemgetter(1))\n    return test_list[0][0]\n",
        "num_ids": 33
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_min = []\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    index_min = sorted_list[0]\n    return index_min\n    \n    \ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    index_max = []\n    sorted_list = sorted(test_list, key=itemgetter(1), reverse=True)\n    index_max = sorted_list[0]\n    return index_max\n",
        "num_ids": 52
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=lambda x: (x[1], x[0]))\n    return sorted_list[0]\n",
        "num_ids": 39
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    new_list = []\n    for i in lst:\n        for j in i:\n            new_list.append(j)\n    return len(sorted(new_list))\n",
        "num_ids": 46
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in range(len(lst)):\n        if len(lst[i])<min_length:\n            min_length = len(lst[i])\n    return min_length\n",
        "num_ids": 59
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if not lst: return 0\n    return min(len(elem) for elem in lst)\n",
        "num_ids": 28
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if len(lst[i]) < count:\n            count = len(lst[i])\n    return count\n    \n    \ndef Find_Matching_Sub_Strings(str1,str2):\n    '''\n    Write a python function to find matching sub-strings in 2 strings,\n    where each sub-string is a contiguous block of characters in a given string.\n    For example,\n    a = \"abcde\"\n    b = \"cdef\"\n    The output should be: ['a','bc','cdef']\n    '''\n    lst = []\n    for i in range(len(str1)):\n        if str1[i] in str2 and str1[i] not in lst:\n            lst.append(str1[i])\n    return lst\n    \n    \ndef Find_Longest_Common_Substring(str1,str2):\n    '''\n    Write a python function to find longest common substring in 2 strings.\n    Example:\n    str1 = 'abcde'\n    str2 = 'ace'\n    output should be: 'cde'\n    '''\n    max = 0\n    l1 = len(str1)\n    l2 = len(str2)\n    lst = []\n    for i in range(l1):\n        for j in range(l2):\n            if str1[i] == str2[j]:\n                lst.append(str1[i])\n    if len(lst) > max:\n        max = len(lst)\n        final = str1\n    lst = []\n    for i in range(l1):\n        for j in range(l2):\n            if str1[i] == str2[j]:\n                lst.append(str1[i])\n    if len(lst) > max:\n        max = len(lst)\n        final = str2\n    return final\n    \n    \ndef Find_Longest_Common_Subsequence(str1,str2):\n    '''\n    Write a python function to find the longest common subsequence in 2 strings.\n    Example:\n    str1 = 'abcde'\n    str2 = 'ace'\n    output should be: 'ace'\n    '''\n    lst = []\n    l1 = len(str1)\n    l2 = len(str2)\n    for i in range(l1):\n        for j in range(l2):\n            if str1[i] == str2[j]:\n                lst.append(str1[i])\n    if len(lst) > 0:\n        max = len(lst)\n        final = str1\n    return final\n    \n    \ndef Find_Longest_Palindromic_Subsequence(str1,str2):\n    '''\n    Write a python function to find the longest common palindrome subsequence in 2 strings.\n    Example:\n    str1 = 'abcbabcd'\n    str2 = 'abcdcba'\n    output should be: 'abcdcba'\n    '''\n    lst = []\n    l1 = len(str1)\n    l2 = len(str2)\n    for i in range(l1):\n        for j in range(l2):\n            if str1[i] == str2[j]:\n                lst.append(str1[i])\n    if len(lst) > 0:\n        max = len(lst)\n        final = str1\n    return final\n    \n    \ndef Find_Longest_Palindromic_Substring(str1,str2):\n    '''\n    Write a python function to find the longest palindromic substring in 2 strings.\n    Example:\n    str1 = 'abcbabcd'\n    str2 = 'abcdcba'\n    output should be: 'abcdcba'\n    '''\n    lst = []\n    l1 = len(str1)\n    l2 = len(str2)\n    for i in range(l1):\n        for j in range(l2):\n            if str1[i] == str2[j] and str1[i] not in lst:\n                lst.append(str1[i])\n    if len(lst) > 0:\n        max = len(lst)\n        final = str1\n    return final\n    \n    \ndef Find_Longest_Common_Substring_with_repetition(str1,str2):\n    '''\n    Write a python function to find the longest common substring with repetition in 2 strings.\n    Example:\n    str1 = 'abcde'\n    str2 = 'ace'\n    output should be: 'ace'\n    '''\n    lst = []\n    l1 = len(str1)\n    l2 = len(str2)\n    for i in range(l1):\n        for j in range(l2):\n            if str1[i] == str2[j]:\n                lst.append(str1[i])\n    if len(lst) > 0:\n        max = len(lst)\n        final = str1\n    return final\n    \n    \ndef Find_Common_Substring_with_repetition(str1,str2):\n    '''\n    Write a python function to find the common substring with repetition in 2 strings.\n    Example:\n    str1 = 'abcde'\n    str2 = 'ace'\n    output should be: 'ace'\n    '''\n    lst = []\n    l1 = len(str1)\n    l2 = len(str2)\n    for i in range(l1):\n        for j in range(l2):\n            if str1[i] == str2[j] and str1[i] not in lst:\n                lst.append(str1[i])\n    if len(lst) > 0:\n        max = len(lst)\n        final = str1\n    return final\n    \n    \ndef Find_Common_Substring_with_repetition_range(str1,str2,k):\n    '''\n    Write a python function to find the common substring with repetition in 2 strings and count the sub-string in range of k.\n    Example:\n    str1 = 'abcd'\n    str2 = 'abd'\n    k = 2\n    output should be: 'cd'\n    '''\n    lst = []\n    l1 = len(str1)\n    l2 = len(str2)\n    for i in range(l1):\n        for j in range(l2):\n            if str1[i] == str2[j]:\n                lst.append(str1[i])\n    if len(lst) > 0:\n        max = len(lst)\n        final = str1\n    return final\n    \n    \ndef Find_Longest_Palindromic_Subsequence_Range(str1,str2,k):\n    '''\n    Write a python function to find the longest palindromic subsequence in a string with an offset of k.\n    Example:\n    str1 = 'abcd'\n    str2 = 'bacd'\n    k = 2\n    output should be: 'acd'\n    '''\n    lst = []\n    l1 = len(str1)\n    l2 = len(str2)\n    for i in range(l1):\n        for j in range(l2):\n            if str1[i] == str2[j] and str1[i] not in lst:\n                lst.append(str1[i])\n    if len(lst) > 0:\n        max = len(lst)\n        final = str1\n    return final\n    \n    \ndef Find_Longest_Palindromic_Subsequence_Range(str1,str2,k):\n    '''\n    Write a python function to find the longest palindromic subsequence in a string with an offset of k.\n    Example:\n    str1 = 'abcd'\n    str2 = 'bacd'\n    k = 2\n    output should be: 'acd'\n    '''\n    lst = []\n    l1 = len(str1)\n    l2 = len(str2)\n    for i in range(l1):\n        for j in range(l2):\n            if str1[i] == str2[j] and str1[i] not in ls",
        "num_ids": 70
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 0\n    for element in lst:\n        min_length = min(min_length,len(element))\n    return min_length\n",
        "num_ids": 39
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    l = len(lst)\n    d = []\n    if l == 0:\n        return 0\n    for i in range(0,l):\n        if type(lst[i])!= type([]):\n            return 0\n        for j in range(0,len(lst[i])):\n            if type(lst[i][j])!= type([]):\n                return 0\n    return len(min(lst,key=len))\n",
        "num_ids": 111
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    new_list = []\n    for i in range(len(lst)):\n        new_list.append(lst[i][0])\n    new_list = sorted(new_list)\n    for i in range(len(new_list)):\n        print(new_list[i])\n",
        "num_ids": 73
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_list = 0\n    for i in range(len(lst)):\n        if len(lst[i]) < min_list:\n            min_list = len(lst[i])\n    return min_list\n",
        "num_ids": 56
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    min = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min:\n            min = len(lst[i])\n    return min\n",
        "num_ids": 56
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst)\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length\n",
        "num_ids": 60
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    i = 1\n    while i < n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors += 1\n    return divisors",
        "num_ids": 43
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    \n    c = 1\n    for i in range(1, n + 1):\n        if n % i == 0:\n            c = c + 1\n    \n    return c\n",
        "num_ids": 44
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 2\n    count = 0\n    while i * i <= n:\n        if n % i == 0:\n            count += 2\n        i += 1\n    if i * i > n:\n        count += 1\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            divisors += 1\n    return divisors\n",
        "num_ids": 44
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    i = 2\n    while i <= n // i:\n        if n % i == 0:\n            count += 1\n            if count > 1:\n                break\n        i += 1\n    return count\n",
        "num_ids": 54
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n < 0:\n        return 0\n    #if n == 0:\n    #    return 1\n    divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n",
        "num_ids": 67
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n < 1:\n        raise ValueError(\"Numbers must be positive.\")\n    divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            divisors = divisors + 1\n    return divisors\n",
        "num_ids": 64
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n):\n        if (n%i)==0:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    result = dict()\n    for each in list1:\n        for ele in each:\n            if ele in result:\n                result[ele] = result[ele] + 1\n            else:\n                result[ele] = 1\n",
        "num_ids": 55
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for x in list1:\n        if x not in freq:\n            freq[x] = 0\n        freq[x] += 1\n    return freq\n",
        "num_ids": 48
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    #initialize empty dictionary and create dictionary to store frequencies\n    freq_dict = {}\n    #loop through the list of lists\n    for elem in list1:\n        #for each element in the list\n        for item in elem:\n            #if it is not in the dictionary\n            if item not in freq_dict:\n                #add it to the dictionary and set the value as 1\n                freq_dict[item] = 1\n            #if it is in the dictionary\n            else:\n                #increment the value by 1\n                freq_dict[item] += 1\n    return freq_dict\n",
        "num_ids": 144
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for i in list1:\n        for j in i:\n            if j not in frequency_dict:\n                frequency_dict[j] = 1\n            else:\n                frequency_dict[j] += 1\n    return frequency_dict\n",
        "num_ids": 64
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    #result = {}\n    #for sublist in list1:\n    #    for ele in sublist:\n    #        if ele in result:\n    #            result[ele] += 1\n    #        else:\n    #            result[ele] = 1\n    #return result\n    \n    result = {}\n    for sublist in list1:\n        for ele in sublist:\n            if ele in result:\n                result[ele] += 1\n            else:\n                result[ele] = 1\n    return result\n    \n",
        "num_ids": 125
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    if not list1:\n        return\n    res = {}\n    for i in range(len(list1)):\n        if not list1[i]:\n            continue\n        for j in range(len(list1[i])):\n            if list1[i][j] in res:\n                res[list1[i][j]] += 1\n            else:\n                res[list1[i][j]] = 1\n    return res\n",
        "num_ids": 104
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for i in list1:\n        if i in d.keys():\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n",
        "num_ids": 48
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    element_counts = {}\n    for l in list1:\n        for e in l:\n            if e not in element_counts:\n                element_counts[e] = 0\n            element_counts[e] += 1\n    return element_counts\n",
        "num_ids": 65
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dic = {}\n    for sub_list in list1:\n        for item in sub_list:\n            freq_dic[item] = freq_dic.get(item, 0) + 1\n    return freq_dic\n",
        "num_ids": 63
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for lst in list1:\n        for item in lst:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq\n",
        "num_ids": 60
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return reduce(lambda x, y: x*y, numbers)/len(numbers)\n",
        "num_ids": 23
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    numbers_sum = sum(numbers)\n    print(numbers_sum)\n    return numbers_sum/len(numbers)\n",
        "num_ids": 35
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers) == 0:\n        raise ValueError('No numbers to multiply')\n",
        "num_ids": 24
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    print(numbers[0] * len(numbers))\n    print(numbers[0] * numbers[1])\n    for i in range(0, len(numbers)):\n        print(numbers[i] * i)\n",
        "num_ids": 58
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mult = 1\n    for i in numbers:\n        mult = mult*i\n    return mult/len(numbers)\n",
        "num_ids": 31
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Your code here\n",
        "num_ids": 8
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    list = numbers\n    numbers = []\n    for num in list:\n        numbers.append(num * num)\n    numbers.append(num * num)\n    return numbers\n",
        "num_ids": 46
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    assert len(numbers) > 0\n    total = 1\n    for n in numbers:\n        total = total * n\n    return total / len(numbers)\n",
        "num_ids": 41
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    #print(\"hello\")\n    mul_numbers = 1\n    for num in numbers:\n        mul_numbers = mul_numbers * num\n    return mul_numbers / len(numbers)\n",
        "num_ids": 52
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    result = 1\n    for number in numbers:\n        result *= number\n    return result / len(numbers)\n",
        "num_ids": 32
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    return decimal_to_binary(n // 2) + str(n % 2)\n",
        "num_ids": 35
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n",
        "num_ids": 15
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n==0:\n        return \"0\"\n    return decimal_to_binary(n//2)+str(n%2)\n    #or\n    # return bin(n)[2:]\n",
        "num_ids": 48
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n==0:\n        return '0'\n    if n==1:\n        return '1'\n    return decimal_to_binary(n//2) + str(n%2) \n    \ndef binary_to_decimal(s):\n    '''\n    Write a function to convert the given binary number represented as a string to its decimal equivalent.\n    '''\n    if len(s)==0:\n        return 0\n    if s[0]=='0':\n        return 0\n    return 1 + binary_to_decimal(s[1:])\n    \ndef get_all_subsets(s):\n    '''\n    Write a function to get all the subsets of an array. \n    '''\n    if len(s)==0:\n        return [[]]\n    if len(s)==1:\n        return [[],s]\n    s1 = get_all_subsets(s[1:])\n    s2 = get_all_subsets(s[:-1])\n    s3 = []\n    for i in range(len(s1)):\n        s3.append(s1[i]+[s[0]])\n    for i in range(len(s2)):\n        s3.append(s2[i]+[s[0]])\n    return s3\n",
        "num_ids": 141
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    if n % 2 == 1:\n        return decimal_to_binary(n - 1) + \"1\"\n    else:\n        return decimal_to_binary(n // 2)\n    \ndef calculate_precedence(op1, op2):\n    '''\n    Write a function to determine the precedence of the operators.\n    '''\n    if op1 == '+' or op1 == '-':\n        return 1\n    if op2 == '+' or op2 == '-':\n        return 2\n    if op1 == '*' or op2 == '*':\n        return 3\n    if op2 == '/' or op1 == '/':\n        return 4\n    if op2 == '+' or op2 == '-':\n        return 5\n    if op2 == '*' or op2 == '/':\n        return 6\n    if op2 == '^':\n        return 7\n    return None\n",
        "num_ids": 136
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n<0:\n        return '-'+decimal_to_binary(abs(n))\n    result=\"\"\n    while n>0:\n        result+='1' if n%2==1 else '0'\n        n=n//2\n    return result[::-1]\n",
        "num_ids": 70
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n",
        "num_ids": 11
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = []\n    while(n > 0):\n        binary.append(n%2)\n        n = n//2\n    return \"\".join(str(x) for x in binary)\n",
        "num_ids": 48
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n==0:\n        return '0'\n    count=0\n    res=''\n    while n:\n        count+=1\n        n,b=divmod(n,2)\n        res=str(b)+res\n    if count==0:\n        return '0'\n    else:\n        return res\n",
        "num_ids": 78
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    res = []\n    while n > 0:\n        res.append(n%2)\n        n = n // 2\n    return ''.join(map(str,res[::-1]))\n",
        "num_ids": 49
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    odd = False\n    result = num\n    while num > 0:\n        if odd:\n            result = result * 10 + num % 10\n        else:\n            result = result * 10 - num % 10\n        odd = not odd\n        num //= 10\n    return result\n",
        "num_ids": 66
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while True:\n        if is_palindrome(str(num)) and num%10 == 0:\n            return num\n        num = num+1\n",
        "num_ids": 38
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    n = len(num)\n    def is_palindrome(n):\n        i = 0\n        j = n - 1\n        while i <= j:\n            if num[i]!= num[j]:\n                return False\n            i += 1\n            j -= 1\n        return True\n",
        "num_ids": 79
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    palindromes = []\n    while num > 9:\n        num = num//10\n        palindromes.append(num)\n    \n    while num > 0:\n        if num % 10 == 0:\n            num = num // 10\n        else:\n            return num + 1\n        num = num // 10\n    return num\n    \ndef next_smallest_palindrome_from_iter(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num % 2 == 0:\n        return next_smallest_palindrome(num//2)\n    else:\n        return next_smallest_palindrome((num//2)+1)\n",
        "num_ids": 49
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if not isinstance(num, int):\n        raise ValueError(\"Only integers are allowed.\")\n    if num < 0:\n        return -1\n    if num == 0:\n        return 1\n",
        "num_ids": 47
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    start, end = 0, num\n    while start <= end:\n        mid = (start + end) // 2\n        if is_palindrome(mid):\n            end = mid\n        else:\n            start = mid + 1\n    return start\n",
        "num_ids": 60
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    max_num = 9\n    min_num = 1\n    while max_num - min_num > 1:\n        mid = (max_num + min_num) // 2\n        if is_palindrome(mid):\n            min_num = mid\n        else:\n            max_num = mid\n    return min_num\n",
        "num_ids": 79
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # base case\n    if num <= 1:\n        return num\n",
        "num_ids": 18
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    digits = []\n    temp = num\n    while temp:\n        digits.append(temp%10)\n        temp //= 10\n    reversed_digits = digits[::-1]\n    # print(reversed_digits)\n    for index, digit in enumerate(reversed_digits):\n        if not (digit + 1) in reversed_digits:\n            if digit == 9:\n                reversed_digits.pop(index)\n                break\n            reversed_digits[index] += 1\n            break\n    reversed_digits = reversed_digits[::-1]\n    number = 0\n    for index, digit in enumerate(reversed_digits):\n        number += digit * (10 ** index)\n    return number\n",
        "num_ids": 210
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 1:\n        return -1\n",
        "num_ids": 14
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr.sort()\n    return arr[k-1]\n",
        "num_ids": 17
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return -1\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == k - 1:\n            return mid\n        elif arr[mid] > k - 1:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n",
        "num_ids": 106
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not arr:\n        return -1\n",
        "num_ids": 13
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == k - 1:\n            return mid\n        elif arr[mid] > k - 1:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n",
        "num_ids": 87
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k >= n:\n        return -1\n    return (k + 1) * arr[k] // 2\n",
        "num_ids": 37
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # i = 1\n    # count = 0\n    # while True:\n    #     if arr[i-1] == k:\n    #         return i\n    #     elif arr[i-1] < k:\n    #         count += 1\n    #     else:\n    #         i += 1\n    #         if i == len(arr):\n    #             return False\n",
        "num_ids": 92
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    #s = 0\n    #e = len(arr)\n    #while s <= e:\n    #    m = (s+e)//2\n    #    if arr[m] == k:\n    #        return m\n    #    elif arr[m] < k:\n    #        s = m+1\n    #    else:\n    #        e = m-1\n",
        "num_ids": 93
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    size = len(arr)\n",
        "num_ids": 10
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if n < k or n == k:\n        return None\n    start = 0\n    end = n - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == k:\n            return arr[mid]\n        elif arr[mid] > k:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return arr[start]\n",
        "num_ids": 108
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n",
        "num_ids": 11
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    a=''\n    for i in word:\n        if i.isupper():\n            a+=i\n        else:\n            a+='_'+i\n    return a\n    \ndef camel_case(s):\n    '''\n    Write a function to convert a string to camel case string.\n    '''\n    s=s.replace('_',' ')\n    a=s.title()\n    return a[0].lower()+a[1:]\n    \ndef solve(s,x):\n    '''\n    Write a function to print all valid subsets of a given string.\n    '''\n    for i in range(len(s)):\n        if x.count(s[i])==0:\n            x+=[s[i]]\n        else:\n            s[i]='*'\n    print(x)\n    \ndef solve_2(s,x):\n    '''\n    Write a function to print all valid subsets of a given string.\n    '''\n    for i in range(len(s)):\n        if x.count(s[i])==0:\n            x+=[s[i]]\n        else:\n            s[i]='*'\n    print(x)\n",
        "num_ids": 56
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.split('_')).title()\n",
        "num_ids": 18
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    out = []\n    for i, char in enumerate(word):\n        if char.isupper():\n            out.append(word[i].lower())\n            if i > 0:\n                out.append('_')\n    return ''.join(out)\n",
        "num_ids": 63
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if len(word) == 0:\n        return \"\"\n    elif word[0] == \"_\":\n        return word[0].upper() + word[1:]\n    else:\n        return word[0].upper() + word[1:]\n",
        "num_ids": 59
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = ''.join(x.capitalize() or '_' for x in word.split('_'))\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word.isupper() and not word[0].isupper():\n        return word[0].upper() + word[1:]\n    elif word.isupper() and word[0].isupper():\n        return word[0].upper() + word[1:].lower()\n    else:\n        return word.lower()\n",
        "num_ids": 78
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title().replace('_','')\n",
        "num_ids": 15
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    snake = word.split('_')\n    for i in range(len(snake)):\n        if i == 0:\n            snake[i] = snake[i].lower()\n        else:\n            snake[i] = snake[i].capitalize()\n    return \"\".join(snake)\n",
        "num_ids": 76
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word[0].capitalize() + word[1:]\n",
        "num_ids": 17
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = word[0]\n    for i in range(1, len(word)):\n        if word[i] == \"_\":\n            break\n        camel_word += word[i].upper()\n    return camel_word\n",
        "num_ids": 59
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return int(((n*m)/2)**0.5)\n",
        "num_ids": 19
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    ans = 0\n    # If m is odd, insert'm - 1' Eulerian numbers to the left\n    if m & 1:\n        ans += eulerian_num(n-1, m-1)\n    # If m is even, insert'm / 2' Eulerian numbers to the right\n    else:\n        ans += eulerian_num(n-1, m//2)\n        ans += eulerian_num(n-1, m//2)\n    return ans\n",
        "num_ids": 138
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    euler_number = 1\n    while n!= m:\n        if n < m:\n            n += 1\n        else:\n            m -= 1\n        euler_number += 1\n    return euler_number\n",
        "num_ids": 54
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if (n == 1):\n        return m\n    else:\n        return eulerian_num(n-1, m + m*n)\n",
        "num_ids": 37
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    count = 0\n    total = 0\n    while total < m:\n        total = n + count\n        count += 1\n        if total > m:\n            total = n\n        if total == m:\n            return count\n",
        "num_ids": 54
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    print(\"Enter the values\")\n    n = int(input(\"Enter value of n:\"))\n    m = int(input(\"Enter value of m:\"))\n    print(\"Enter the values\")\n    a = int(input(\"Enter value of a:\"))\n    b = int(input(\"Enter value of b:\"))\n    c = int(input(\"Enter value of c:\"))\n    d = int(input(\"Enter value of d:\"))\n    print(\"\\nEnter the values\")\n    e = int(input(\"Enter value of e:\"))\n    f = int(input(\"Enter value of f:\"))\n    g = int(input(\"Enter value of g:\"))\n    h = int(input(\"Enter value of h:\"))\n    i = int(input(\"Enter value of i:\"))\n    j = int(input(\"Enter value of j:\"))\n    k = int(input(\"Enter value of k:\"))\n    l = int(input(\"Enter value of l:\"))\n    m = int(input(\"Enter value of m:\"))\n    n = int(input(\"Enter value of n:\"))\n    o = int(input(\"Enter value of o:\"))\n    p = int(input(\"Enter value of p:\"))\n    q = int(input(\"Enter value of q:\"))\n    r = int(input(\"Enter value of r:\"))\n    s = int(input(\"Enter value of s:\"))\n    t = int(input(\"Enter value of t:\"))\n    u = int(input(\"Enter value of u:\"))\n    v = int(input(\"Enter value of v:\"))\n    w = int(input(\"Enter value of w:\"))\n    x = int(input(\"Enter value of x:\"))\n    y = int(input(\"Enter value of y:\"))\n    z = int(input(\"Enter value of z:\"))\n    a1 = int(input(\"Enter value of a1:\"))\n    b1 = int(input(\"Enter value of b1:\"))\n    c1 = int(input(\"Enter value of c1:\"))\n    d1 = int(input(\"Enter value of d1:\"))\n    e1 = int(input(\"Enter value of e1:\"))\n    f1 = int(input(\"Enter value of f1:\"))\n    g1 = int(input(\"Enter value of g1:\"))\n    h1 = int(input(\"Enter value of h1:\"))\n    i1 = int(input(\"Enter value of i1:\"))\n    j1 = int(input(\"Enter value of j1:\"))\n    k1 = int(input(\"Enter value of k1:\"))\n    l1 = int(input(\"Enter value of l1:\"))\n    m1 = int(input(\"Enter value of m1:\"))\n    n1 = int(input(\"Enter value of n1:\"))\n    o1 = int(input(\"Enter value of o1:\"))\n    p1 = int(input(\"Enter value of p1:\"))\n    q1 = int(input(\"Enter value of q1:\"))\n    r1 = int(input(\"Enter value of r1:\"))\n    s1 = int(input(\"Enter value of s1:\"))\n    t1 = int(input(\"Enter value of t1:\"))\n    u1 = int(input(\"Enter value of u1:\"))\n    v1 = int(input(\"Enter value of v1:\"))\n    w1 = int(input(\"Enter value of w1:\"))\n    x1 = int(input(\"Enter value of x1:\"))\n    y1 = int(input(\"Enter value of y1:\"))\n    z1 = int(input(\"Enter value of z1:\"))\n    a2 = int(input(\"Enter value of a2:\"))\n    b2 = int(input(\"Enter value of b2:\"))\n    c2 = int(input(\"Enter value of c2:\"))\n    d2 = int(input(\"Enter value of d2:\"))\n    e2 = int(input(\"Enter value of e2:\"))\n    f2 = int(input(\"Enter value of f2:\"))\n    g2 = int(input(\"Enter value of g2:\"))\n    h2 = int(input(\"Enter value of h2:\"))\n    i2 = int(input(\"Enter value of i2:\"))\n    j2 = int(input(\"Enter value of j2:\"))\n    k2 = int(input(\"Enter value of k2:\"))\n    l2 = int(input(\"Enter value of l2:\"))\n    m2 = int(input(\"Enter value of m2:\"))\n    n2 = int(input(\"Enter value of n2:\"))\n    o2 = int(input(\"Enter value of o2:\"))\n    p2 = int(input(\"Enter value of p2:\"))\n    q2 = int(input(\"Enter value of q2:\"))\n    r2 = int(input(\"Enter value of r2:\"))\n    s2 = int(input(\"Enter value of s2:\"))\n    t2 = int(input(\"Enter value of t2:\"))\n    u2 = int(input(\"Enter value of u2:\"))\n    v2 = int(input(\"Enter value of v2:\"))\n    w2 = int(input(\"Enter value of w2:\"))\n    x2 = int(input(\"Enter value of x2:\"))\n    y2 = int(input(\"Enter value of y2:\"))\n    z2 = int(input(\"Enter value of z2:\"))\n    a3 = int(input(\"Enter value of a3:\"))\n    b3 = int(input(\"Enter value of b3:\"))\n    c3 = int(input(\"Enter value of c3:\"))\n    d3 = int(input(\"Enter value of d3:\"))\n    e3 = int(input(\"Enter value of e3:\"))\n    f3 = int(input(\"Enter value of f3:\"))\n    g3 = int(input(\"Enter value of g3:\"))\n    h3 = int(input(\"Enter value of h3:\"))\n    i3 = int(input(\"Enter value of i3:\"))\n    j3 = int(input(\"Enter value of j3:\"))\n    k3 = int(input(\"Enter value of k3:\"))\n    l3 = int(input(\"Enter value of l3:\"))\n    m3 = int(input(\"Enter value of m3:\"))\n    n3 = int(input(\"Enter value of n3:\"))\n    o3 = int(input(\"Enter value of o3:\"))\n    p3 = int(input(\"Enter value of p3:\"))\n    q3 = int(input(\"Enter value of q3:\"))\n    r3 = int(input(\"Enter value of r3:\"))\n    s3 = int(input(\"Enter value of s3:\"))\n    t3 = int(input(\"Enter value of t3:\"))\n    u3 = int(input(\"Enter value of u3:\"))\n    v3 = int(input(\"Enter value of v3:\"))\n    w3 = int(input(\"Enter value of w3:\"))\n    x3 = int(input(\"Enter value of x3:\"))\n    y3 = int(input(\"Enter value of y3:\"))\n    z3 = int(input(\"Enter value of z3:\"))\n    a4 = int(input(\"Enter value of a4:\"))\n    b4 = int(input(\"Enter value of b4:\"))\n    c4 = int(input(\"Enter value of c4:\"))\n    d4 = int(input(\"Enter value of d4:\"))\n    e4 = int(input(\"Enter value of e4:\"))\n    f4 = int(input(\"Enter value of f4:\"))\n    g4 = int(input(\"Enter value of g4:\"))\n    h4 = int(input(\"Enter value of h4:\"))\n    i4 = int(input(\"Enter value of i4:\"))\n    j4 = int(input(\"Enter value of j4:\"))\n    k4 = int(input(\"Enter value of k4:\"))\n    l4 = int(input(\"Enter value of l4:\"))\n    m4 = int(input(\"Enter value of m4:\"))\n    n4 = int(input(\"Enter value of n4:\"))\n    o4 = int(input(\"Enter value of o4:\"))\n    p4 = int(input(\"Enter value of p4:\"))\n    q4 = int(input(\"Enter value of q4:\"))\n    r4 = int(input(\"Enter value of r4:\"))\n    s4 = int(input(\"Enter value of s4:\"))\n    t4 = int(input(\"Enter value of t4:\"))\n    u4 = int(input(\"Enter value of u4:\"))\n    v4 = int(inpu",
        "num_ids": 2012
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 and m == 1:\n        return 1\n    a = eulerian_num(n-1, m) + eulerian_num(n, m-1)\n    return a\n",
        "num_ids": 50
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 or m == 1:\n        return 1\n    elif m == 0:\n        return eulerian_num(n - 1, 1)\n    elif n == 0:\n        return eulerian_num(1, m - 1)\n    else:\n        return (eulerian_num(n - 1, 1) + eulerian_num(n - 1, m - 1)) % 1000000007\n",
        "num_ids": 102
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < 0 or m < 0: \n        return \"Euler's number is 0\"\n",
        "num_ids": 25
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    def is_valid(n, m, k):\n        '''\n        Checks if n is a valid argument for m, k.\n        '''\n        if n in range(1, m+1) and m > 0 and k > 0 and k <= m:\n            return True\n        else:\n            return False\n",
        "num_ids": 40
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in input_list:\n        i.sort()\n    return input_list\n",
        "num_ids": 23
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublist = []\n    for sub_list in input_list:\n        for item in sub_list:\n            sublist.append(item)\n",
        "num_ids": 37
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Write your code here\n    return sorted(input_list)\n",
        "num_ids": 18
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list\n",
        "num_ids": 39
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Check if a list has at least one element\n    if len(input_list) < 1:\n        return input_list\n",
        "num_ids": 32
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n",
        "num_ids": 19
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        sublists = input_list[i]\n        sublists.sort()\n        input_list[i] = sublists\n",
        "num_ids": 45
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    input_list.sort()\n    for list in input_list:\n        list.sort()\n",
        "num_ids": 25
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n",
        "num_ids": 9
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    print('Input List:', input_list)\n    for i in input_list:\n        i.sort()\n",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    return sum(lst)\n",
        "num_ids": 12
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    print(\"the count of True in the list\",end=' ')\n    print(lst)\n    print(lst.count(True))\n",
        "num_ids": 36
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    true_count = 0\n    for i in lst:\n        if i == True:\n            true_count = true_count + 1\n    return true_count\n",
        "num_ids": 41
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)\n",
        "num_ids": 12
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count+=1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    return len([i for i in lst if i])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2016
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup.append(item)\n",
        "num_ids": 22
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # return test_list + test_tup\n    test_list.extend(test_tup)\n    return test_list\n    # OR\n    test_list = test_list + test_tup\n    return test_list\n",
        "num_ids": 58
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    result = []\n    if not test_list:\n        for test_tup in test_tup:\n            result.append(test_tup)\n    else:\n        for test_tup in test_tup:\n            result.append(test_tup)\n        result.extend(test_list)\n    return result\n",
        "num_ids": 82
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup[i] = test_list[i]\n",
        "num_ids": 32
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_tup)):\n        test_list.append(test_tup[i])\n    return test_list\n",
        "num_ids": 38
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            merged_list.append(num1[0])\n            num1.remove(num1[0])\n        elif num2[0] < num1[0] and num2[0] < num3[0]:\n            merged_list.append(num2[0])\n            num2.remove(num2[0])\n        else:\n            merged_list.append(num3[0])\n            num3.remove(num3[0])\n    if len(num1) > 0:\n        for i in range(0,len(num1)):\n            merged_list.append(num1[i])\n    if len(num2) > 0:\n        for i in range(0,len(num2)):\n            merged_list.append(num2[i])\n    if len(num3) > 0:\n        for i in range(0,len(num3)):\n            merged_list.append(num3[i])\n    return merged_list",
        "num_ids": 336
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    new_list = []\n    while len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n        if num1[0] <= num2[0] and num1[0] <= num3[0]:\n            new_list.append(num1.pop(0))\n        elif num2[0] <= num1[0] and num2[0] <= num3[0]:\n            new_list.append(num2.pop(0))\n        else:\n            new_list.append(num3.pop(0))\n    \n    while len(num1) > 0:\n        new_list.append(num1.pop(0))\n    while len(num2) > 0:\n        new_list.append(num2.pop(0))\n    while len(num3) > 0:\n        new_list.append(num3.pop(0))\n    return new_list\n",
        "num_ids": 226
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    res=[]\n    i,j,k=0,0,0\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<=num2[j] and num1[i]<=num3[k]:\n            res.append(num1[i])\n            i+=1\n        elif num2[j]<=num1[i] and num2[j]<=num3[k]:\n            res.append(num2[j])\n            j+=1\n        else:\n            res.append(num3[k])\n            k+=1\n    while i<len(num1):\n        res.append(num1[i])\n        i+=1\n    while j<len(num2):\n        res.append(num2[j])\n        j+=1\n    while k<len(num3):\n        res.append(num3[k])\n        k+=1\n    return res\n",
        "num_ids": 237
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    new_list = []\n    index1 = 0\n    index2 = 0\n    index3 = 0\n    while True:\n        if index1 < len(num1):\n            new_list.append(num1[index1])\n            index1 += 1\n        else:\n            new_list.append(None)\n        if index2 < len(num2):\n            new_list.append(num2[index2])\n            index2 += 1\n        else:\n            new_list.append(None)\n        if index3 < len(num3):\n            new_list.append(num3[index3])\n            index3 += 1\n        else:\n            new_list.append(None)\n",
        "num_ids": 167
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result=[]\n    i,j,k=0,0,0\n    while(i<len(num1) and j<len(num2) and k<len(num3)):\n        if num1[i]<num2[j]:\n            result.append(num1[i])\n            i+=1\n        else:\n            result.append(num2[j])\n            j+=1\n        k+=1\n    while(i<len(num1)):\n        result.append(num1[i])\n        i+=1\n    while(j<len(num2)):\n        result.append(num2[j])\n        j+=1\n    while(k<len(num3)):\n        result.append(num3[k])\n        k+=1\n    return result\n",
        "num_ids": 191
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    if num1 is None:\n        return num2\n    if num2 is None:\n        return num3\n    if num3 is None:\n        return num1\n    mergedList = []\n    while(num1 or num2 or num3):\n        if num1:\n            mergedList.append(num1.pop(0))\n        if num2:\n            mergedList.append(num2.pop(0))\n        if num3:\n            mergedList.append(num3.pop(0))\n    return mergedList\n",
        "num_ids": 131
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # code here\n    merged_list = []\n    i,j,k = 0,0,0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n    merged_list.extend(num1[i:])\n    merged_list.extend(num2[j:])\n    merged_list.extend(num3[k:])\n    return merged_list\n",
        "num_ids": 222
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l=[]\n    l1=l2=l3=[]\n    for i in range(len(num1)):\n        l1.append(num1[i])\n    for i in range(len(num2)):\n        l2.append(num2[i])\n    for i in range(len(num3)):\n        l3.append(num3[i])\n    \n    for j in range(len(l1)):\n        l.append(l1[j])\n    for j in range(len(l2)):\n        l.append(l2[j])\n    for j in range(len(l3)):\n        l.append(l3[j])\n    \n    return l\ndef merge_sort(arr,l,r):\n    '''\n    Write a function to sort a given array using merge sort algorithm.\n    '''\n    if l>=r:\n        return\n    mid=(l+r)//2\n    merge_sort(arr,l,mid)\n    merge_sort(arr,mid+1,r)\n    merge(arr,l,mid,r)\n    \n    \ndef merge(arr,l,mid,r):\n    n1=mid-l+1\n    n2=r-mid\n    #print(n1,n2)\n    l1=[]\n    l2=[]\n    for i in range(n1):\n        l1.append(arr[l+i])\n    for i in range(n2):\n        l2.append(arr[mid+1+i])\n    #print(l1,l2)\n    i=j=k=0\n    while i<n1 and j<n2:\n        if l1[i]<l2[j]:\n            arr[k]=l1[i]\n            i+=1\n        else:\n            arr[k]=l2[j]\n            j+=1\n        k+=1\n    while i<n1:\n        arr[k]=l1[i]\n        i+=1\n        k+=1\n    while j<n2:\n        arr[k]=l2[j]\n        j+=1\n        k+=1\n    \n",
        "num_ids": 317
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged = []\n    while len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n        if num1[0] <= num2[0] and num1[0] <= num3[0]:\n            merged.append(num1.pop(0))\n        elif num2[0] <= num1[0] and num2[0] <= num3[0]:\n            merged.append(num2.pop(0))\n        elif num3[0] <= num1[0] and num3[0] <= num2[0]:\n            merged.append(num3.pop(0))\n    \n    if len(num1) > 0:\n        merged = merged + num1\n    elif len(num2) > 0:\n        merged = merged + num2\n    else:\n        merged = merged + num3\n    return merged\n",
        "num_ids": 217
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l = []\n    while len(num1)!=0 or len(num2)!=0 or len(num3)!=0:\n        if len(num1)!=0:\n            l.append(num1.pop(0))\n        if len(num2)!=0:\n            l.append(num2.pop(0))\n        if len(num3)!=0:\n            l.append(num3.pop(0))\n    return l\n",
        "num_ids": 110
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    n = int(n)\n    count = 0\n    while (n>0):\n        if s[n-1]%2!=0:\n            count = count +1\n        n = n-1\n    return count\n",
        "num_ids": 56
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s=s[::-1]\n    t=''\n    k=n%2\n    if(k==0):\n        for i in range(len(s)):\n            if(s[i]=='0'):\n                t=t+'1'\n            else:\n                t=t+'0'\n        return(t)\n    else:\n        for i in range(len(s)):\n            if(s[i]=='0'):\n                t=t+'1'\n            else:\n                t=t+'0'\n        return(t)\n",
        "num_ids": 142
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    d = {}\n    a = \"\"\n    for i in s:\n        a = a + i\n    count = 0\n    for i in range(0,len(a)):\n        if(a[i] == \"0\"):\n            continue\n        if(a[i] == \"1\"):\n            count = count + 1\n            d[count] = i\n            continue\n        if(count in d.keys() and a[i] == \"0\"):\n            count = count + 1\n            continue\n        if(count in d.keys() and a[i] == \"1\"):\n            count = count -1\n            continue\n        count = 0\n    return d\n    \n    \ndef odd_rotation(s,n): \n    '''\n    Write a python function to find the number of times a string has been rotated.\n    '''\n    l = []\n    for i in range(len(s)):\n        l.append(s[i])\n    for i in range(n):\n        l = l[len(l)::-1]\n    count = 0\n    for i in range(len(l)):\n        if(l[i] == \"1\"):\n            count = count + 1\n    return count\n    \ndef is_prime(n):\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\n    \ndef prime_Factors(n):\n    prime = []\n    i = 2\n    while i*i <= n:\n        if n%i == 0:\n            prime.append(i)\n            while n%i == 0:\n                n = n/i\n        i += 1\n    if n > 1:\n        prime.append(n)\n    return prime\n    \ndef product_of_factors(n):\n    '''\n    Write a python function that takes as input a positive integer n and returns the product of all the prime factors of n.\n    '''\n    pf = prime_Factors(n)\n    pf_prod = 1\n    for i in pf:\n        pf_prod = pf_prod*i\n    return pf_prod\n    \ndef is_divisible(a,b):\n    if(a%b == 0):\n        return True\n    else:\n        return False\n    \ndef divisible_by_2(n):\n    return is_divisible(n,2)\n    \ndef divisible_by_3(n):\n    return is_divisible(n,3)\n    \ndef divisible_by_5(n):\n    return is_divisible(n,5)\n    \ndef divisible_by_15(n):\n    return is_divisible(n,15)\n    \ndef divisible_by_25(n):\n    return is_divisible(n,25)\n    \ndef divisible_by_35(n):\n    return is_divisible(n,35)\n    \ndef divisible_by_7(n):\n    return is_divisible(n,7)\n    \ndef divisible_by_11(n):\n    return is_divisible(n,11)\n    \ndef divisible_by_13(n):\n    return is_divisible(n,13)\n    \ndef divisible_by_17(n):\n    return is_divisible(n,17)\n    \ndef divisible_by_19(n):\n    return is_divisible(n,19)\n    \ndef divisible_by_23(n):\n    return is_divisible(n,23)\n    \ndef divisible_by_29(n):\n    return is_divisible(n,29)\n    \ndef divisible_by_31(n):\n    return is_divisible(n,31)\n    \ndef divisible_by_37(n):\n    return is_divisible(n,37)\n    \ndef divisible_by_41(n):\n    return is_divisible(n,41)\n    \ndef divisible_by_43(n):\n    return is_divisible(n,43)\n    \ndef divisible_by_47(n):\n    return is_divisible(n,47)\n    \ndef divisible_by_49(n):\n    return is_divisible(n,49)\n    \ndef divisible_by_53(n):\n    return is_divisible(n,53)\n    \ndef divisible_by_59(n):\n    return is_divisible(n,59)\n    \ndef divisible_by_61(n):\n    return is_divisible(n,61)\n    \ndef divisible_by_67(n):\n    return is_divisible(n,67)\n    \ndef divisible_by_71(n):\n    return is_divisible(n,71)\n    \ndef divisible_by_73(n):\n    return is_divisible(n,73)\n    \ndef divisible_by_79(n):\n    return is_divisible(n,79)\n    \ndef divisible_by_83(n):\n    return is_divisible(n,83)\n    \ndef divisible_by_89(n):\n    return is_divisible(n,89)\n    \ndef divisible_by_97(n):\n    return is_divisible(n,97)\n    \ndef divisible_by_101(n):\n    return is_divisible(n,101)\n    \ndef divisible_by_103(n):\n    return is_divisible(n,103)\n    \ndef divisible_by_107(n):\n    return is_divisible(n,107)\n    \ndef divisible_by_109(n):\n    return is_divisible(n,109)\n    \ndef divisible_by_113(n):\n    return is_divisible(n,113)\n    \ndef divisible_by_127(n):\n    return is_divisible(n,127)\n    \ndef divisible_by_131(n):\n    return is_divisible(n,131)\n    \ndef divisible_by_137(n):\n    return is_divisible(n,137)\n    \ndef divisible_by_139(n):\n    return is_divisible(n,139)\n    \ndef divisible_by_149(n):\n    return is_divisible(n,149)\n    \ndef divisible_by_151(n):\n    return is_divisible(n,151)\n    \ndef divisible_by_157(n):\n    return is_divisible(n,157)\n    \ndef divisible_by_163(n):\n    return is_divisible(n,163)\n    \ndef divisible_by_167(n):\n    return is_divisible(n,167)\n    \ndef divisible_by_173(n):\n    return is_divisible(n,173)\n    \ndef divisible_by_179(n):\n    return is_divisible(n,179)\n    \ndef divisible_by_181(n):\n    return is_divisible(n,181)\n    \ndef divisible_by_191(n):\n    return is_divisible(n,191)\n    \ndef divisible_by_193(n):\n    return is_divisible(n,193)\n    \ndef divisible_by_197(n):\n    return is_divisible(n,197)\n    \ndef divisible_by_199(n):\n    return is_divisible(n,199)\n    \ndef divisible_by_211(n):\n    return is_divisible(n,211)\n    \ndef divisible_by_223(n):\n    return is_divisible(n,223)\n    \ndef divisible_by_227(n):\n    return is_divisible(n,227)\n    \ndef divisible_by_229(n):\n    return is_divisible(n,229)\n    \ndef divisible_by_233(n):\n    return is_divisible(n,233)\n    \ndef divisible_by_239(n):\n    return is_divisible(n,239)\n    \ndef divisible_by_241(n):\n    return is_divisible(n,241)\n    \ndef divisible_by_251(n):\n    return is_divisible(n,251)\n",
        "num_ids": 1539
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n==0:\n        return 1\n    else:\n        return odd_Equivalent(n-1,n) + odd_Equivalent(n-1,n-1)\n",
        "num_ids": 45
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    s = s.replace(\" \", \"\")\n    for i in range(0,n):\n        for j in range(1,len(s)+1):\n            if s[(j+i)%len(s)] == '1':\n                count += 1\n                break\n    return count\n",
        "num_ids": 75
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n==0:\n        return \"\"\n    if n==1:\n        return \"1\"\n    if n==2:\n        return \"10\"\n    if n==3:\n        return \"11\"\n    return odd_Equivalent(n-1,1) + odd_Equivalent(n-2,2) + odd_Equivalent(n-3,3)\n",
        "num_ids": 90
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    #Code here\n    string = s\n    count = 0\n    while(len(string)>0):\n        count+=1\n        string = rotate(string,n)\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = s.replace(\" \", \"\")\n    n = int(n)\n    odd_count = 0\n    for i in range(0, n):\n        if (s[0] == \"1\"):\n            odd_count += 1\n        s = s[1:] + s[0]\n    return odd_count\n",
        "num_ids": 78
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary_string=s\n    for i in range(n):\n        if binary_string[0] == '1':\n            binary_string = binary_string[1:] + '0'\n        else:\n            binary_string = '1' + binary_string[1:]\n    print(binary_string)\n    return binary_string.count('1')\n",
        "num_ids": 86
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = '0b'+s\n    for i in range(1,n+1):\n        s = str(bin(int(s,2)+2**i))\n        s = s.replace('b',\"\")\n    return s",
        "num_ids": 57
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist)):\n            if i!= j:\n                if nestedlist[i] == nestedlist[j]:\n                    common_elements.append(nestedlist[i])\n    return common_elements\n",
        "num_ids": 82
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for lists in nestedlist:\n        for item in lists:\n            if item not in common:\n                common.append(item)\n    return common\n",
        "num_ids": 42
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # nested_list = [[1, 2], 2, 3, 4, 5, 6]\n    # common = []\n    # for n1, n2 in nested_list:\n    #     if n1 == n2:\n    #         common.append(n1)\n",
        "num_ids": 66
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for element_1 in nestedlist:\n        for element_2 in element_1:\n            if element_2 in common_list:\n                continue\n            if element_2 in nestedlist:\n                common_list.append(element_2)\n    return common_list\n",
        "num_ids": 72
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    nested_elements = []\n    for i in nestedlist:\n        if isinstance(i, list):\n            nested_elements.extend(common_in_nested_lists(i))\n        else:\n            nested_elements.append(i)\n    final_list = []\n    for i in nested_elements:\n        if i in final_list:\n            pass\n        else:\n            final_list.append(i)\n    return final_list\n",
        "num_ids": 116
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if type(nestedlist)!= list:\n        return None\n    \n    if not nestedlist:\n        return None\n",
        "num_ids": 31
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    if not nestedlist:\n        return []\n    if not isinstance(nestedlist, list):\n        return []\n",
        "num_ids": 32
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    nested_list = nestedlist\n    s = set()\n    for i in nested_list:\n        for j in i:\n            if j in s:\n                pass\n            else:\n                s.add(j)\n",
        "num_ids": 55
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    if len(nestedlist) == 0:\n        return common_elements\n    if len(nestedlist) == 1:\n        if len(nestedlist[0]) == 0:\n            return common_elements\n        else:\n            common_elements.append(nestedlist[0])\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common_elements:\n                common_elements.append(nestedlist[i][j])\n    return common_elements\n",
        "num_ids": 152
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elems = []\n    for i in nestedlist:\n        for j in i:\n            if j in common_elems:\n                break\n            else:\n                common_elems.append(j)\n    return common_elems\n",
        "num_ids": 60
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return isinstance(text, int)\n",
        "num_ids": 12
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        return int(text)\n    except ValueError:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        print('Not an integer')\n    else:\n        print('Yes, it is an integer.')\n",
        "num_ids": 42
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True\n",
        "num_ids": 26
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True\n",
        "num_ids": 28
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    list_of_dict = []\n    for i in range(len(list1)):\n        list_of_dict.append(dict(list1[i]))\n    for dict1 in list_of_dict:\n        if(len(dict1.keys())>0):\n            return False\n    return True\n",
        "num_ids": 76
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return all(not bool(lst) for lst in list1)\n",
        "num_ids": 20
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return all(len(list_dit) == 0 for list_dit in list1)\nprint(\"Empty list: \",empty_dit(list1))\n",
        "num_ids": 37
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for i in list1:\n        if i!= {}:\n            empty = False\n            break\n    return empty\n",
        "num_ids": 35
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for elem in list1:\n        if elem!= {}:\n            return False\n    return True\n",
        "num_ids": 28
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join(map(str, nums)))\n",
        "num_ids": 17
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum([int(x) for x in nums])\n",
        "num_ids": 17
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums_list = []\n    for num in nums:\n        nums_list.append(num)\n    return int(tuple(nums_list))\n",
        "num_ids": 42
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return reduce(lambda x,y: x*y, nums)\n",
        "num_ids": 19
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = list(nums)\n    nums.sort()\n    nums = tuple(nums)\n    nums = int(''.join(nums))\n    return nums\n",
        "num_ids": 47
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return reduce((lambda x, y: x*y), nums)\n",
        "num_ids": 19
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # current_sum = 0\n    # for num in nums:\n    #     current_sum += num\n    # return current_sum\n",
        "num_ids": 35
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join(list(map(str,nums))))\n",
        "num_ids": 19
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    tup = tuple(nums)\n    \n    nums = 0\n    for i in range(len(tup)):\n        nums += tup[i] * (10**i)\n    \n    return nums\n",
        "num_ids": 58
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n",
        "num_ids": 10
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return_list = []\n    for element in test_list:\n        return_list.append([float(i) for i in element])\n    return return_list\n",
        "num_ids": 41
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(0, len(test_list)):\n        test_list[i] = float(test_list[i])\n    return test_list\n",
        "num_ids": 41
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        try:\n            test_list[i] = float(test_list[i])\n        except ValueError:\n            pass\n    return test_list\n",
        "num_ids": 52
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = float(test_list[i][j])\n    return test_list\n",
        "num_ids": 59
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n",
        "num_ids": 72
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for index, element in enumerate(test_list):\n        try:\n            test_list[index] = float(element)\n        except ValueError:\n            pass\n",
        "num_ids": 42
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                test_list[i][j] = None\n                \n        \n    return test_list\n",
        "num_ids": 85
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(0, len(test_list)):\n        try:\n            test_list[i] = float(test_list[i])\n        except ValueError:\n            pass\n    return test_list\n",
        "num_ids": 54
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [[float(number) for number in line] for line in test_list]\n",
        "num_ids": 22
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        try:\n            test_list[i] = float(test_list[i])\n        except ValueError:\n            pass\n",
        "num_ids": 46
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \") \n",
        "num_ids": 12
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    \n    return string.split()\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    if len(arr)==1:\n        return arr[0]\n    left=0\n    right=len(arr)-1\n    mid=0\n    while left<right:\n        mid=(left+right)//2\n        if arr[mid]==arr[mid+1]:\n            left=mid+1\n        else:\n            right=mid\n    return arr[left]",
        "num_ids": 106
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    start = 0\n    end = len(arr)-1\n    found = False\n    while start <= end and not found:\n        mid = (start + end)//2\n        if mid == end:\n            if arr[mid]!= arr[start]:\n                found = True\n            else:\n                end = mid - 1\n        elif mid == start:\n            if arr[mid]!= arr[end]:\n                found = True\n            else:\n                start = mid + 1\n        else:\n            if arr[mid] == arr[start]:\n                start = mid + 1\n            elif arr[mid] == arr[end]:\n                end = mid - 1\n            else:\n                start = mid + 1\n                end = mid - 1\n    return arr[start]\n",
        "num_ids": 183
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr.count(arr[i]) == 1:\n            return arr[i]\n    \n    \n    \n    \n    \narr = [1,1,2,3,3,4,5,5,5,6,6]\nprint(search(arr))\n",
        "num_ids": 78
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    arr = arr.copy()\n    #count_zero = 0\n    for i in range(0, len(arr)):\n        #print(arr)\n        #print(i)\n        if arr[i] == 0:\n            #count_zero += 1\n            arr.remove(arr[i])\n            arr.append(arr[i])\n            #print(arr)\n            break\n    print(arr)\n    #for j in range(len(arr)):\n    #    if arr[j] == 0:\n    #        print(\"sorting\", j)\n    #        for k in range(j, len(arr)):\n    #            if arr[k] == 0:\n    #                print(\"sorting\", k)\n    #                for l in range(k, len(arr)):\n    #                    if arr[l] == 0:\n    #                        print(\"sorting\", l)\n    #                        arr[j] = arr[l]\n    #                        arr[j+1] = arr[l+1]\n    #                        arr[j+2] = arr[l+2]\n    #                        arr[j+3] = arr[l+3]\n    #                        arr[j+4] = arr[l+4]\n    #                        print(\"sorting\", j, k, l)\n    #                        break\n    #print(arr)\n    return arr\n",
        "num_ids": 326
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    lo = 0\n    hi = len(arr) - 1\n",
        "num_ids": 17
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr.count(arr[i]) == 1:\n            return arr[i]\n",
        "num_ids": 35
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # range function will give us the range of the arr\n    for i in range(len(arr)-1):\n        if(arr[i]!=arr[i+1]):\n            return arr[i]\n    # if we reach this point it means we didn't find the element in the array,\n    # so we return -1\n    return -1\n",
        "num_ids": 85
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return -1\n",
        "num_ids": 40
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while low < high:\n        mid = low + (high - low) // 2\n        if arr[mid] == arr[high]:\n            high = mid\n        elif arr[mid] == arr[low]:\n            low = mid + 1\n        else:\n            low = mid + 1\n    return arr[low]\n",
        "num_ids": 92
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n=len(arr)\n    if n==0:\n        return None\n    if n==1:\n        return arr[0]\n    if arr[0]==arr[1]:\n        return arr[0]\n    if arr[n-1]==arr[n-2]:\n        return arr[n-1]\n    left=0\n    right=n-1\n    while right>left:\n        mid=(left+right)//2\n        if arr[mid]==arr[mid-1]:\n            left=mid+1\n        elif arr[mid]==arr[mid+1]:\n            right=mid-1\n        else:\n            return arr[mid]\n    \n    return None\n",
        "num_ids": 168
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_tuple = list1[0]\n    for i in range(1,len(list1)):\n        if (list1[i][0]*list1[i][1]) > (list1[i-1][0]*list1[i-1][1]):\n            max_tuple = list1[i]\n    return max_tuple\n",
        "num_ids": 89
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # initialize max and current max\n    max = None\n    current_max = None\n    # iterate through the list\n    for i in range(len(list1)):\n        # initialize current_max\n        current_max = list1[i][0] * list1[i][1]\n        # update max if it is less\n        if current_max > max:\n            max = current_max\n    return max\n",
        "num_ids": 100
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max1 = 0\n    max2 = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            a = list1[i]\n            b = list1[j]\n            if a[0]*a[1]*a[2] > max1:\n                max1 = a[0]*a[1]*a[2]\n            elif a[0]*a[1]*a[2] > max2:\n                max2 = a[0]*a[1]*a[2]\n            elif a[0]*a[1]*a[2] > max2:\n                max2 = a[0]*a[1]*a[2]\n            if b[0]*b[1]*b[2] > max1:\n                max1 = b[0]*b[1]*b[2]\n            elif b[0]*b[1]*b[2] > max2:\n                max2 = b[0]*b[1]*b[2]\n            elif b[0]*b[1]*b[2] > max2:\n                max2 = b[0]*b[1]*b[2]\n",
        "num_ids": 306
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product_list = []\n    for i in range(len(list1)-1):\n        if list1[i+1][1] == list1[i][1]:\n            max_product_list.append(max(list1[i][0] * list1[i+1][0], list1[i][1] * list1[i+1][0]))\n        else:\n            max_product_list.append(max(list1[i][0] * list1[i+1][0], list1[i][1] * list1[i+1][0], list1[i][0] * list1[i+1][1]))\n    return max(max_product_list)\n",
        "num_ids": 171
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    res=list1[0]\n    for i in range(len(list1)):\n        if list1[i][0]>res[0] or list1[i][1]>res[1]:\n            res=(list1[i][0],list1[i][1])\n    return res\n",
        "num_ids": 74
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1 = list(map(tuple,list1))\n    max1 = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if(list1[i][0] < 0 or list1[i][1] < 0 or list1[j][0] < 0 or list1[j][1] < 0):\n                continue\n            if(list1[i][0] * list1[i][1] > max1):\n                max1 = list1[i][0] * list1[i][1]\n            if(list1[j][0] * list1[j][1] > max1):\n                max1 = list1[j][0] * list1[j][1]\n    return max1\n",
        "num_ids": 191
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    tuple_list = []\n    if len(list1) > 2:\n        for index, num in enumerate(list1):\n            if index == 0:\n                tuple_list.append(num)\n                tuple_list.append(list1[index + 1])\n            elif index == len(list1) - 1:\n                tuple_list.append(list1[index - 1])\n                tuple_list.append(num)\n            else:\n                tuple_list.append(list1[index - 1])\n                tuple_list.append(list1[index + 1])\n        tuple_list.sort(key=int)\n        return tuple_list\n    else:\n        return list1\n",
        "num_ids": 173
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    temp = 0\n    max = 0\n    for i in range(0,len(list1)-1,2):\n        temp = list1[i][0]*list1[i+1][0]\n        if temp > max:\n            max = temp\n        temp = list1[i][1]*list1[i+1][1]\n        if temp > max:\n            max = temp\n    return max\n",
        "num_ids": 100
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_num = 0\n    max_product = 0\n",
        "num_ids": 16
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    product_list = []\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            product_list.append((list1[i][0],list1[j][0],max(list1[i][1],list1[j][1])*max(list1[i][0],list1[j][0])))\n    print(sorted(product_list, key = lambda x: x[2], reverse = True))\n",
        "num_ids": 120
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        sum_of_2 = 0\n        sum_of_3 = 0\n        if i!= 0:\n            for j in range(2, i):\n                if i % j == 0 and i!= j:\n                    sum_of_2 += j\n        if sum_of_2 == 0:\n            sum += i\n        if sum_of_2!= 0 and sum_of_3 == 0:\n            for k in range(3, sum_of_2 + 1):\n                if sum_of_2 % k == 0 and sum_of_2!= k:\n                    sum_of_3 += k\n        if sum_of_3 == 0:\n            sum += i\n        if sum_of_3!= 0:\n            sum += sum_of_3\n    print(sum)\n    return sum\n    \ndef amicable_numbers_list(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_list = []\n    for i in range(1, limit):\n        sum_of_2 = 0\n        sum_of_3 = 0\n        if i!= 0:\n            for j in range(2, i):\n                if i % j == 0 and i!= j:\n                    sum_of_2 += j\n        if sum_of_2 == 0:\n            amicable_numbers_list.append(i)\n        if sum_of_2!= 0 and sum_of_3 == 0:\n            for k in range(3, sum_of_2 + 1):\n                if sum_of_2 % k == 0 and sum_of_2!= k:\n                    sum_of_3 += k\n        if sum_of_3 == 0:\n            amicable_numbers_list.append(i)\n        if sum_of_3!= 0:\n            amicable_numbers_list.append(sum_of_3)\n    print(sum(amicable_numbers_list))\n    return sum(amicable_numbers_list)\n    \ndef amicable_numbers_list_2(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_list = []\n    for i in range(1, limit):\n        sum_of_2 = 0\n        sum_of_3 = 0\n        if i!= 0:\n            for j in range(2, i):\n                if i % j == 0 and i!= j:\n                    sum_of_2 += j\n        if sum_of_2 == 0:\n            amicable_numbers_list.append(i)\n        if sum_of_2!= 0 and sum_of_3 == 0:\n            for k in range(3, sum_of_2 + 1):\n                if sum_of_2 % k == 0 and sum_of_2!= k:\n                    sum_of_3 += k\n        if sum_of_3 == 0:\n            amicable_numbers_list.append(i)\n        if sum_of_3!= 0:\n            amicable_numbers_list.append(sum_of_3)\n    return amicable_numbers_list\n    \ndef amicable_numbers_list_3(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_list = []\n    for i in range(1, limit):\n        sum_of_2 = 0\n        sum_of_3 = 0\n        if i!= 0:\n            for j in range(2, i):\n                if i % j == 0 and i!= j:\n                    sum_of_2 += j\n        if sum_of_2 == 0:\n            amicable_numbers_list.append(i)\n        if sum_of_2!= 0 and sum_of_3 == 0:\n            for k in range(3, sum_of_2 + 1):\n                if sum_of_2 % k == 0 and sum_of_2!= k:\n                    sum_of_3 += k\n        if sum_of_3 == 0:\n            amicable_numbers_list.append(i)\n        if sum_of_3!= 0:\n            amicable_numbers_list.append(sum_of_3)\n    return amicable_numbers_list\n    \ndef sum_of_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_amicable_numbers = 0\n    for i in range(1, limit):\n        sum_of_2 = 0\n        sum_of_3 = 0\n        if i!= 0:\n            for j in range(2, i):\n                if i % j == 0 and i!= j:\n                    sum_of_2 += j\n        if sum_of_2 == 0:\n            sum_of_amicable_numbers += i\n        if sum_of_2!= 0 and sum_of_3 == 0:\n            for k in range(3, sum_of_2 + 1):\n                if sum_of_2 % k == 0 and sum_of_2!= k:\n                    sum_of_3 += k\n        if sum_of_3 == 0:\n            sum_of_amicable_numbers += i\n        if sum_of_3!= 0:\n            sum_of_amicable_numbers += sum_of_3\n    print(sum_of_amicable_numbers)\n    return sum_of_amicable_numbers\n    \ndef sum_of_amicable_numbers_2(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_amicable_numbers = 0\n    for i in range(1, limit):\n        sum_of_2 = 0\n        sum_of_3 = 0\n        if i!= 0:\n            for j in range(2, i):\n                if i % j == 0 and i!= j:\n                    sum_of_2 += j\n        if sum_of_2 == 0:\n            sum_of_amicable_numbers += i\n        if sum_of_2!= 0 and sum_of_3 == 0:\n            for k in range(3, sum_of_2 + 1):\n                if sum_of_2 % k == 0 and sum_of_2!= k:\n                    sum_of_3 += k\n        if sum_of_3 == 0:\n            sum_of_amicable_numbers += i\n        if sum_of_3!= 0:\n            sum_of_amicable_numbers += sum_of_3\n    print(sum_of_amicable_numbers)\n    return sum_of_amicable_numbers\n    \ndef sum_of_amicable_numbers_3(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_amicable_numbers = 0\n    for i in range(1, limit):\n        sum_of_2 = 0\n        sum_of_3 = 0\n        if i!= 0:\n            for j in range(2, i):\n                if i % j == 0 and i!= j:\n                    sum_of_2 += j\n        if sum_of_2 == 0:\n            sum_of_amicable_numbers += i\n        if sum_of_2!= 0 and sum_of_3 == 0:\n            for k in range(3, sum_of_2 + 1):\n                if sum_of_2 % k == 0 and sum_of_2!= k:\n                    sum_of_3 += k\n        if sum_of_3 == 0:\n            sum_of_amicable_numbers += i\n        if sum_of_3!= 0:\n            sum_of_amicable_numbers += sum_of_3\n    print(sum_of_amicable_numbers)\n    return sum_of_amicable_numbers\n    \ndef sum_of_amicable_numbers_4(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_amicable_numbers = 0\n    for i in range(1, limit):\n        sum_of_2 = 0\n        sum_of",
        "num_ids": 39
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    amicable_numbers = []\n    for i in range(1,limit+1):\n        for j in range(i+1, limit+1):\n            if i == j:\n                continue\n            elif (i * j) == sum:\n                amicable_numbers.append([i, j])\n                continue\n            elif (i * j)!= sum:\n                break\n    return amicable_numbers\n",
        "num_ids": 106
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit):\n        sum_amicable_numbers = 0\n        for i in range(1, num):\n            if num == i:\n                continue\n            if num % i == 0:\n                if num == i * 2:\n                    sum_amicable_numbers += i\n                else:\n                    continue\n            else:\n                sum_amicable_numbers += i\n        if sum_amicable_numbers == num:\n            amicable_sum += num\n    print(f'The sum of all amicable numbers between 1 and {limit} is {amicable_sum}')\n",
        "num_ids": 152
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    nums = set()\n    for i in range(1,limit+1):\n        if i in nums:\n            continue\n        sum+=i\n        for x in range(i+1, limit+1):\n            if x in nums:\n                continue\n            if i*x == sum:\n                nums.add(i)\n                nums.add(x)\n    return sum\n",
        "num_ids": 100
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Logic -\n    # amicable_numbers - A list of amicable numbers\n    # amicable_sum - Sum of all amicable numbers\n    # answer_set - Set of all distinct values in amicable_numbers\n    # answer_list - List of distinct values in amicable_numbers\n    # answer_list_2 = []\n    # answer_list_3 = []\n    # answer_list_4 = []\n    # answer_list_5 = []\n    # answer_set = set()\n    # answer_set_2 = set()\n    # answer_set_3 = set()\n    # answer_set_4 = set()\n    # answer_set_5 = set()\n    # answer_list = []\n    # answer_list_2 = []\n    # answer_list_3 = []\n    # answer_list_4 = []\n    # answer_list_5 = []\n    # answer_set_2 = set()\n    # answer_set_3 = set()\n    # answer_set_4 = set()\n    # answer_set_5 = set()\n    # answer_list = []\n    # answer_list_2 = []\n    # answer_list_3 = []\n    # answer_list_4 = []\n    # answer_list_5 = []\n    # for i in range(1, limit):\n    #     a = i\n    #     b = sum(amicable_numbers(i))\n    #     if i == b:\n    #         answer_list.append(i)\n    #     if i == a - b:\n    #         answer_list_2.append(i)\n    #     if i == sum(amicable_numbers(a)):\n    #         answer_set.add(i)\n    #     if i == sum(amicable_numbers(b)):\n    #         answer_set_2.add(i)\n    #     if sum(amicable_numbers(i)) == a:\n    #         answer_list_3.append(i)\n    #     if sum(amicable_numbers(i)) == b:\n    #         answer_set_3.add(i)\n    #     if sum(amicable_numbers(a)) == i:\n    #         answer_list_4.append(i)\n    #     if sum(amicable_numbers(b)) == i:\n    #         answer_set_4.add(i)\n    #     if sum(amicable_numbers(a)) == sum(amicable_numbers(b)):\n    #         answer_list_5.append(i)\n    #     if sum(amicable_numbers(b)) == sum(amicable_numbers(a)):\n    #         answer_set_5.add(i)\n    # print(answer_list)\n    # print(answer_list_2)\n    # print(answer_list_3)\n    # print(answer_list_4)\n    # print(answer_list_5)\n    # print(answer_set)\n    # print(answer_set_2)\n    # print(answer_set_3)\n    # print(answer_set_4)\n    # print(answer_set_5)\n",
        "num_ids": 763
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_numbers = 0\n    for number in range(1, limit+1):\n        if get_sum_of_two(number) == number:\n            sum_numbers += number\n",
        "num_ids": 47
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for i in range(1,limit+1):\n        sum_j = 0\n        for j in range(i,limit+1):\n            if i == j:\n                continue\n            if is_amicable(i,j):\n                sum_j += j\n        if sum_j == i:\n            total += i\n    return total\n",
        "num_ids": 87
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        if(is_amicable_sum(i)):\n            sum = sum + i\n    return sum\n",
        "num_ids": 43
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n",
        "num_ids": 12
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for x in range(1,limit):\n        sum_of_divisors = 0\n        sum_of_divisors_of_others = 0\n        if x == 2:\n            continue\n        for i in range(1,x):\n            if x % i == 0:\n                sum_of_divisors += i\n        for i in range(1,sum_of_divisors):\n            if sum_of_divisors % i == 0:\n                sum_of_divisors_of_others += i\n        if sum_of_divisors == sum_of_divisors_of_others and sum_of_divisors!= x:\n            amicable_numbers.append(x)\n    return(sum(amicable_numbers))\n",
        "num_ids": 197
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # a = 3 + 4j\n    # b = -1j\n    angle = cmath.phase(a) - cmath.phase(b)\n    angle = -angle if a.real < 0 else angle\n    angle = abs(angle)\n    angle = (angle / cmath.pi) * 180\n    return angle\n",
        "num_ids": 78
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    theta=cmath.phase(a+b*1j)\n    return theta\n",
        "num_ids": 24
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    cmath.phase(a)\n    cmath.phase(b)\n    return (cmath.phase(a) - cmath.phase(b))/(2*cmath.pi)\n",
        "num_ids": 47
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return a.real*b.real+a.imag*b.imag\n",
        "num_ids": 20
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    x = complex(a)\n    y = complex(b)\n    return(cmath.phase(x+y))\ndef get_distance(a,b):\n    '''\n    Write a function to get the distance between two points.\n    '''\n    x1,y1 = a\n    x2,y2 = b\n    return(abs(x2-x1) + abs(y2-y1))\n",
        "num_ids": 41
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    cmath.phase\n",
        "num_ids": 8
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a.imag==0 and b.imag==0:\n        return math.atan(a.real/b.real)\n    elif a.imag>0 and b.imag<0:\n        return math.pi + math.atan(a.real/b.real)\n    elif a.imag<0 and b.imag>0:\n        return math.pi + math.atan(a.real/b.real)\n    elif a.imag<0 and b.imag<0:\n        return math.pi + math.atan(a.real/b.real)\n    else:\n        return math.atan(a.real/b.real)\ndef angle_angle(a,b):\n    '''\n    Write a function to get the angle of an angle.\n    '''\n    return math.acos(a.real/b.real)\ndef angle_angle_cmath(a,b):\n    '''\n    Write a function to get the angle of an angle using cmath.\n    '''\n    return cmath.acos(a.real/b.real)\ndef quadratic_roots(a,b,c):\n    '''\n    Write a function to find the real roots of quadratic equation.\n    '''\n    a=float(a)\n    b=float(b)\n    c=float(c)\n    det=b**2-4*a*c\n    if det<0:\n        print(\"No real roots\")\n    elif det==0:\n        return float(-b/(2*a))\n    else:\n        sq=float((det)**(1/2))\n        q1=float(-b/(2*a))\n        q2=float(sq+(q1**2-b)/(2*a))\n        return q1,q2\ndef power_quad(a,n):\n    '''\n    Write a function to compute the power n of a quadratic.\n    '''\n    n=float(n)\n    a=float(a)\n    return a**n\ndef quadratic_roots_cmath(a,b,c):\n    '''\n    Write a function to find the real roots of quadratic equation using cmath.\n    '''\n    a=float(a)\n    b=float(b)\n    c=float(c)\n    det=b**2-4*a*c\n    if det<0:\n        return \"No real roots\"\n    elif det==0:\n        return float(-b/(2*a))\n    else:\n        sq=float((det)**(1/2))\n        q1=float(-b/(2*a))\n        q2=float(sq+(q1**2-b)/(2*a))\n        return q1,q2\ndef quadratic_roots_simple(a,b,c):\n    '''\n    Write a function to find the real roots of quadratic equation using complex method.\n    '''\n    a=float(a)\n    b=float(b)\n    c=float(c)\n    delta = (b**2) - 4*a*c\n    if delta<0:\n        return \"No real roots\"\n    sqrt = (delta**(1/2))\n    sqrt_1 = (-b+(sqrt))/(2*a)\n    sqrt_2 = (-b-(sqrt))/(2*a)\n    return sqrt_1,sqrt_2\ndef quadratic_roots_simple_cmath(a,b,c):\n    '''\n    Write a function to find the real roots of quadratic equation using complex method.\n    '''\n    a=float(a)\n    b=float(b)\n    c=float(c)\n    delta = (b**2) - 4*a*c\n    if delta<0:\n        return \"No real roots\"\n    sqrt = (delta**(1/2))\n    sqrt_1 = (-b+(sqrt))/(2*a)\n    sqrt_2 = (-b-(sqrt))/(2*a)\n    return sqrt_1,sqrt_2\n",
        "num_ids": 119
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # # cmath is a library which provides numeric calculations\n    # # in the complex plane, with support for mathematical constants.\n    # print (cmath.phase(complex(a,b)))\n    # # phase(z) gives the phase of the complex argument,\n    # # in radians.\n",
        "num_ids": 70
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+bj)\n",
        "num_ids": 14
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang=abs(a)*abs(b)/(abs(a)+abs(b))\n    return ang\n",
        "num_ids": 27
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return sum(c == '0' for c in string) - sum(c == '1' for c in string)\n",
        "num_ids": 30
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    def binary_string_to_list(string):\n        \n        # Convert to list\n        string_list = list(string)\n",
        "num_ids": 33
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(1,len(string)):\n        if string[i] == \"0\":\n            continue\n        if string[i-1] == \"1\":\n            max_diff = max(max_diff,i-1)\n    return max_diff\n",
        "num_ids": 72
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    length = 0\n    for i in range(0, len(string)): \n        if (string[i] == \"0\"): \n            count = count + 1\n        else: \n            count = count - 1\n        length = max(length, count)\n    return length\n",
        "num_ids": 74
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n            if count_0 > max_diff:\n                max_diff = count_0\n        else:\n            count_1 += 1\n            if count_1 > max_diff:\n                max_diff = count_1\n    return max_diff\n",
        "num_ids": 110
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0s = 0\n    count_1s = 0\n    count_of_strings = 0\n    max_diff = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0s += 1\n            count_of_strings += 1\n        if string[i] == '1':\n            count_1s += 1\n            count_of_strings += 1\n        if count_of_strings > 1 and count_of_strings - 1 == max_diff:\n            max_diff = count_of_strings - 1\n            \n    return max_diff\n",
        "num_ids": 148
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    ans = 0\n    for i in range(1,len(string)):\n        temp = 0\n        for j in range(i, len(string)):\n            if string[j] == \"1\":\n                temp += 1\n            else:\n                break\n        ans = max(ans, temp -i)\n    return ans\n    ",
        "num_ids": 80
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            current_length = i+1\n        else:\n            current_length = 0\n        max_length = max(max_length, current_length)\n    return max_length\n",
        "num_ids": 74
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    for char in string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n    return count_0 - count_1\n",
        "num_ids": 59
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    l = 0\n    r = 0\n    maxDiff = -1\n    if len(string) == 0:\n        return 0\n    if len(string) == 1:\n        return 0\n    while(l < len(string) and r < len(string)):\n        if string[l] == '1':\n            l += 1\n        else:\n            if l > maxDiff:\n                maxDiff = l - r\n            l += 1\n        if string[r] == '0':\n            r += 1\n        else:\n            if r > maxDiff:\n                maxDiff = r - l\n            r += 1\n    return maxDiff\n",
        "num_ids": 152
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a + b\n",
        "num_ids": 8
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            sum += i\n    return sum\n",
        "num_ids": 49
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    count=0\n    for i in range(1,min(a,b)+1):\n        if a%i==0 and b%i==0:\n            count+=i\n    return count\nprint(sum(18,3))\n",
        "num_ids": 57
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisor = []\n    for i in range(1,a):\n        if a%i == 0 and b%i == 0:\n            divisor.append(i)\n    return sum(divisor)\n",
        "num_ids": 54
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    a = int(a)\n    b = int(b)\n    a_factors = []\n    b_factors = []\n    for i in range(1, a + 1):\n        if a % i == 0:\n            a_factors.append(i)\n",
        "num_ids": 67
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    # a = int(input('enter first number:'))\n    # b = int(input('enter second number:'))\n    c = 0\n    \n    if (a%b)==0 and (b%a)==0:\n        \n        c = a+b\n    else:\n        c = int(a+b)\n    \n    print('sum of common divisors is:',c)\n",
        "num_ids": 98
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = a + b\n    return sum\n",
        "num_ids": 13
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum_of_divisors = (a*b)//gcd(a,b) \n    print(\"The sum of common divisors of the two numbers is : \", sum_of_divisors)\n    \n    \ndef gcd(a,b): \n    '''\n    Write a python function to find the greatest common divisor of two given numbers.\n    '''\n    if a==0 or b==0:\n        return 0\n    else:\n        return gcd(b%a,a)\n",
        "num_ids": 33
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    result = 0\n    a_divisors = get_prime_factors(a)\n    b_divisors = get_prime_factors(b)\n    common_divisors = []\n    for i in a_divisors:\n        if i in b_divisors:\n            common_divisors.append(i)\n    for i in common_divisors:\n        result += i\n    print(result)\n    return result\n",
        "num_ids": 110
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a == 1 or b == 1:\n        return 0\n    if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return a\n    if a == 0 or b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == 0 and b == 0:\n        return 0\n    if a == ",
        "num_ids": 2013
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result\n",
        "num_ids": 13
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # Both ints are positive, positive\n    # For now, lets assume both ints are positive\n    # If one int is negative and the other is positive,\n    # return -1, to be on the safe side\n    if x > 0 and y > 0:\n        return x*y\n    elif x > 0 and y < 0:\n        return -1\n    elif x < 0 and y > 0:\n        return -1\n    elif x < 0 and y < 0:\n        return -1\n    # If one of the ints is negative, return 0\n    elif x < 0 or y < 0:\n        return 0\n",
        "num_ids": 150
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    #m = x * y\n    m = x * y\n    return m\n",
        "num_ids": 21
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split(' ') if len(word) > n]\n    \nprint(long_words(5, \"I speak Goat Latin\")) # [\"Ima\", \"speak Goat Latin\"]\nprint(long_words(4, \"The quick brown fox jumped over the lazy dog\")) # [\"heT\", \"jumped\", \"oWe\", \"fox\"]\nprint(long_words(2, \"The quick brown fox jumped over the lazy dog\")) # []\n",
        "num_ids": 109
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in str:\n        if len(word) >= n:\n            result.append(word)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for i in str:\n        if len(i) > n:\n            result.append(i)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # return ([word for word in str if len(word) > n])\n    return [word for word in str if len(word) > n]\n",
        "num_ids": 37
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    import re\n    long_words = []\n    #Create a pattern that will match letters that are longer than n\n    pattern = re.compile(r'\\w{%d,}' % n)\n    #Use a for loop to find all the words that match the pattern\n    for word in str:\n        if re.search(pattern, word):\n            long_words.append(word)\n    return long_words\n",
        "num_ids": 100
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word) > n]\n",
        "num_ids": 22
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split(' ')\n    l = []\n    for word in words:\n        if len(word) >= n:\n            l.append(word)\n    return l\n",
        "num_ids": 46
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for i in str:\n        if len(i) > n:\n            words.append(i)\n    return words",
        "num_ids": 35
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word) > n]\n    \n",
        "num_ids": 24
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in str:\n        if len(word) > n:\n            result.append(word)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    row = len(my_matrix)\n    column = len(my_matrix[0])\n",
        "num_ids": 26
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # if it's not square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    for row in range(len(my_matrix)):\n        # if it's not a magic square\n        if sum(my_matrix[row])!= (row+1)*(len(my_matrix)):\n            return False\n    for col in range(len(my_matrix[0])):\n        # if it's not a magic square\n        if sum([my_matrix[row][col] for row in range(len(my_matrix))])!= (col+1)*(len(my_matrix)):\n            return False\n    # if it's a magic square\n    return True\n",
        "num_ids": 179
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if my_matrix.__class__!= list:\n        return False\n",
        "num_ids": 21
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    n = len(my_matrix)\n    \n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= my_matrix[i][n - 1 - j]:\n                return False\n    \n    for i in range(n):\n        for j in range(n):\n            if my_matrix[j][i]!= my_matrix[n - 1 - j][i]:\n                return False\n    \n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= my_matrix[n - 1 - i][n - 1 - j]:\n                return False\n    \n    for i in range(n):\n        for j in range(n):\n            if my_matrix[j][i]!= my_matrix[n - 1 - j][n - 1 - i]:\n                return False\n    \n    return True\n",
        "num_ids": 233
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    size = len(my_matrix)\n",
        "num_ids": 13
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    return not any(my_matrix[i][i]!= my_matrix[i][my_matrix.shape[1] - 1 - i] for i in range(my_matrix.shape[0]))\n",
        "num_ids": 55
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= 9:\n        return False\n    \n    for row in my_matrix:\n        if len(row)!= 9:\n            return False\n        \n    for row in range(len(my_matrix)):\n        for col in range(len(my_matrix[row])):\n            if my_matrix[row][col]!= row * col:\n                return False\n",
        "num_ids": 101
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # The magic square must be of size 3x3.\n    # Check if the matrix is square and has the same size\n    if not isinstance(my_matrix, list) or not isinstance(my_matrix[0], list):\n        return False\n    # Check if the matrix is square and has the same size\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    # Check if the matrix is square and has the same size\n    size_of_the_square = len(my_matrix)\n    for i in range(size_of_the_square):\n        if len(my_matrix[i])!= size_of_the_square:\n            return False\n    # Now that we know that the matrix is square,\n    # the matrix must be full of 1's and 0's,\n    # otherwise, it is not a magic square\n    for i in range(size_of_the_square):\n        for j in range(size_of_the_square):\n            if my_matrix[i][j]!= 1 and my_matrix[i][j]!= 0:\n                return False\n    # Finally, we know that the matrix must have a magic square.\n    # We can now check if the matrix is magic\n    # if the sum of the row/column/diagonal is equal to the size of the square.\n    # Iterate through each row of the matrix.\n    for i in range(size_of_the_square):\n        sum_of_rows = 0\n        for j in range(size_of_the_square):\n            sum_of_rows += my_matrix[i][j]\n        if sum_of_rows!= size_of_the_square:\n            return False\n    # Iterate through each column of the matrix.\n    for j in range(size_of_the_square):\n        sum_of_columns = 0\n        for i in range(size_of_the_square):\n            sum_of_columns += my_matrix[i][j]\n        if sum_of_columns!= size_of_the_square:\n            return False\n    # Finally, iterate through each diagonal from the top left to bottom right.\n    sum_of_diagonal_1 = 0\n    for i in range(size_of_the_square):\n        sum_of_diagonal_1 += my_matrix[i][i]\n    sum_of_diagonal_2 = 0\n    for i, j in zip(range(size_of_the_square), reversed(range(size_of_the_square))):\n        sum_of_diagonal_2 += my_matrix[i][j]\n    if sum_of_diagonal_1!= size_of_the_square or sum_of_diagonal_2!= size_of_the_square:\n        return False\n    # Finally, we can return the magic square\n    return True\n",
        "num_ids": 696
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # the magic square must have an odd number of rows\n    if len(my_matrix) % 2!= 0:\n        return False\n    else:\n        # get row length\n        row_length = len(my_matrix)\n",
        "num_ids": 58
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #TODO:\n    # The magic_square_test function should return a boolean value. If it returns True, then the matrix is a magic square. Otherwise, the matrix is not a magic square.\n",
        "num_ids": 48
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dic = defaultdict(int)\n    for i in nums:\n        dic[i] += 1\n    max_val = max(dic.values())\n    return max_val, [k for k,v in dic.items() if v==max_val]\n",
        "num_ids": 68
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    max_count = -1\n    max_item = 0\n    for i in nums:\n        counts[i] += 1\n        if counts[i] > max_count:\n            max_count = counts[i]\n            max_item = i\n    return max_item\n",
        "num_ids": 79
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    return max(set(nums), key = nums.count)\n",
        "num_ids": 19
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    occur_dict = defaultdict(int)\n    for i in nums:\n        occur_dict[i] += 1\n    max_occur = max(occur_dict.values())\n    max_list = []\n    for key, value in occur_dict.items():\n        if max_occur == value:\n            max_list.append(key)\n    return max(max_list)\n",
        "num_ids": 98
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(lambda: 0)\n    for num in nums:\n        freq[num] += 1\n    max_count = 0\n    max_freq = 0\n    for k, v in freq.items():\n        if v > max_count:\n            max_count = v\n            max_freq = k\n    return max_freq\n",
        "num_ids": 89
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    items_dict = defaultdict(int)\n    for num in nums:\n        items_dict[num] += 1\n",
        "num_ids": 31
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    max_freq = -1\n    for num in d:\n        if d[num] > max_freq:\n            max_freq = d[num]\n    return max_freq\n",
        "num_ids": 74
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    return max(set(nums), key=nums.count)\n",
        "num_ids": 19
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    #1_create a dictionary\n    #2_create a default dict\n    #3_iterate over nums\n    #4_add items into a dictionary\n    #5_find the key in the dictionary with max count\n    #6_return the item with maximum count\n    #7_create a list of the keys\n    #8_populate the list with the values\n    #9_iterate through the list and pop\n    max_count = 0\n    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n        if d[n] > max_count:\n            max_count = d[n]\n    return max_count\n",
        "num_ids": 159
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    map = {}\n    for num in nums:\n        if num in map:\n            map[num] += 1\n        else:\n            map[num] = 1\n    m = max(map, key=map.get)\n    return m\n",
        "num_ids": 60
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # vowels = ['a','e','i','o','u','A','E','I','O','U']\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    str2 = []\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            str2.append(str1[i])\n            str2.append(' ')\n    return ''.join(str2[:len(str2)-1])\n    ",
        "num_ids": 136
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    new_string = []\n    for i in range(len(str1)):\n        if str1[i] not in vowels:\n            new_string.append(str1[i])\n        else:\n            continue\n    return ''.join(new_string)\n",
        "num_ids": 77
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiouAEIOU\")\n    s = ''\n    for char in str1:\n        if char not in vowels:\n            s += char\n        else:\n            s += char.upper()\n    return s\n",
        "num_ids": 60
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = {'a':'z', 'e':'a', 'i':'i', 'o':'o', 'u':'u', 'y':'y'}\n    str2 = ''\n    for i in range(len(str1)):\n        if str1[i] not in vowels.keys():\n            str2 += str1[i]\n        else:\n            str2 += vowels[str1[i]]\n    return str2\n",
        "num_ids": 112
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiou\"\n    str2 = str1[::-1]\n    newstr = \"\"\n    for i in str2:\n        if i not in vowels:\n            newstr = newstr + i\n    return newstr\n",
        "num_ids": 62
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiou')\n    vowel_stack = []\n    str2 = list(str1)\n    for char in str2:\n        if char in vowels:\n            vowel_stack.append(char)\n    return ''.join(vowel_stack[::-1])\n",
        "num_ids": 78
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    rev = ''\n    for char in str1:\n        if char.lower() in vowels:\n            rev = rev + char.upper()\n        else:\n            rev = rev + char\n    return rev\n",
        "num_ids": 87
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # vowels_list = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    # vowels = []\n    # for letter in str1:\n    #     if letter in vowels_list:\n    #         vowels.append(letter)\n    # str2 = \"\"\n    # for letter in str1:\n    #     if letter not in vowels_list:\n    #         str2 = str2 + letter\n    # return str2\n    s = str1[::-1]\n    for i in range(len(s)):\n        if not s[i].isalpha():\n            s = s[i:] + s[:i]\n    return s\n",
        "num_ids": 178
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n    str2 = list(str1)\n    vowel = 0\n    for i in range(len(str2)):\n        if str2[i] in vowels:\n            str2[i] = '*'\n        else:\n            str2[i] = str2[i]\n        vowel += 1\n    str2 = ''.join(str2)\n    return str2\n",
        "num_ids": 132
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a','e','i','o','u')\n    list1 = list(str1)\n    list2 = []\n    for i in list1:\n        if i in vowels:\n            list2.append(i)\n    str2 = ''.join(list2)\n    return str2\n",
        "num_ids": 77
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(str(tup1))\n",
        "num_ids": 15
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    \n    str1 = \"\"\n    for i in tup1:\n        str1 = str1 + str(i) + \" \"\n    return str1\n",
        "num_ids": 39
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return''.join(tup1)\n",
        "num_ids": 12
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\ntup_string = (2,3,4,5,6)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tup_string)\nprint(tu",
        "num_ids": 2017
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_string =''.join(tup1)\n    return tup_string\n",
        "num_ids": 23
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(map(str,tup1))\n",
        "num_ids": 17
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str, tup1))\n",
        "num_ids": 17
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n",
        "num_ids": 13
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s += str(i) +''\n    return s[:-1]\n",
        "num_ids": 34
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "num_ids": 11
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    s=0\n    for i in nums:\n        if i<0:\n            s=s+i\n    return s\n",
        "num_ids": 33
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # total = 0\n    # for num in nums:\n    #     if num < 0:\n    #         total += num\n    # return total\n",
        "num_ids": 38
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n",
        "num_ids": 27
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negativenum = 0\n    for num in nums:\n        negativenum += abs(num)\n    return negativenum\n",
        "num_ids": 36
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            sum = sum + nums[i]\n    return sum\n",
        "num_ids": 46
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            sum += nums[i]\n    return sum\n",
        "num_ids": 44
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    res = 0\n    for item in nums:\n        if item < 0:\n            res += item\n    return res\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            sum += nums[i]\n    return sum\n",
        "num_ids": 44
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Your code here\n    sum_neg = 0\n    for i in nums:\n        if i < 0:\n            sum_neg += i\n    return sum_neg\n",
        "num_ids": 43
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 1\n    ans = n*(3*n - 1)//2\n    while count <= n:\n        count += 1\n        ans += 1\n    return ans\n",
        "num_ids": 43
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n = n + 1\n    total = 0\n    for i in range(1, n): \n        total += (1 + 3 * i) / 2\n    return int(total)\n",
        "num_ids": 46
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        return hexagonal_num(n - 1) + (n * (n + 1)) // 2\n",
        "num_ids": 52
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(3*n-1)/2\n",
        "num_ids": 15
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n = int(n)\n    total = 0\n    for i in range(1, n+1):\n        total = total + (i * (i+1) / 2)\n    return total\n",
        "num_ids": 49
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return sum(i * (3 * i - 1) // 2 for i in range(1, n + 1))\n",
        "num_ids": 29
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    i = 0\n    while i <= n:\n        i = i + 1\n        print(i**2 - n, i**2 + n)\n",
        "num_ids": 37
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (3*n*n - n)\n",
        "num_ids": 14
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return 3 * hexagonal_num(n - 1) - 2 * hexagonal_num(n - 2)\n    \nprint(hexagonal_num(5))",
        "num_ids": 66
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    \n    if n < 0:\n        return None\n    if n == 0:\n        return 1\n    \n    for i in range(n):\n        print(i)\n        \n        if i % 2 == 0:\n            return n * ((n * 2) + 1) / 6\n        else:\n            return n * ((n * 2) - 1) / 3\n    \nn = 10\nprint(hexagonal_num(n))\n",
        "num_ids": 104
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_count += 1\n        else:\n            non_zero += 1\n    return zero_count/non_zero\n",
        "num_ids": 68
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if len(nums) == 0:\n        return 0\n",
        "num_ids": 17
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count/len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    print(count / len(nums))\n    return count / len(nums)\n",
        "num_ids": 57
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    #return nums.count(0) / len(nums)\n    return (nums.count(0) * 1.0) / (len(nums) - nums.count(0))\n",
        "num_ids": 50
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    #O(n)\n    zeroes = 0\n    nonzeroes = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zeroes += 1\n        else:\n            nonzeroes += 1\n    return zeroes / nonzeroes\n",
        "num_ids": 73
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # counting zeros and non-zeros\n    # and to do this we need to divide by the size of the array\n    zeros = 0\n    ones = 0\n    for i in nums:\n        if i == 0:\n            zeros += 1\n        else:\n            ones += 1\n    return zeros/len(nums)\n    \ndef zero_count_rec(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # counting zeros and non-zeros\n    # and to do this we need to divide by the size of the array\n    if len(nums) == 0:\n        return 0\n    elif nums[0] == 0:\n        return 1 + zero_count_rec(nums[1:])\n    else:\n        return 1 + zero_count_rec(nums[1:])\n    \ndef zero_count_rec2(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # counting zeros and non-zeros\n    # and to do this we need to divide by the size of the array\n    if len(nums) == 0:\n        return 0\n    elif nums[0] == 0:\n        return 1 + zero_count_rec2(nums[1:])\n    else:\n        return 1 + zero_count_rec2(nums[1:])\n    \ndef zero_count_with_dict(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # counting zeros and non-zeros\n    # and to do this we need to divide by the size of the array\n    nums_dict = {}\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            nums_dict[i] = 0\n        else:\n            nums_dict[i] = 1\n    zeros = 0\n    ones = 0\n    for i in nums_dict.keys():\n        if nums_dict[i] == 0:\n            zeros += 1\n        else:\n            ones += 1\n    return zeros/len(nums)\n    \ndef zero_count_with_dict_rec(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # counting zeros and non-zeros\n    # and to do this we need to divide by the size of the array\n    if len(nums) == 0:\n        return 0\n    elif nums[0] == 0:\n        return 1 + zero_count_with_dict_rec(nums[1:])\n    else:\n        return 1 + zero_count_with_dict_rec(nums[1:])\n",
        "num_ids": 103
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = len(nums)\n    c = 0\n    for i in range(n):\n        if nums[i] == 0:\n            c += 1\n    print(c/n)\n",
        "num_ids": 49
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for x in nums:\n        if x == 0:\n            zero_count = zero_count + 1\n    return zero_count / len(nums)\n",
        "num_ids": 47
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # [1,2,3,4]\n    while n:\n        res = 0\n        # bit_size = int(math.log(n, 2))\n        bit_size = len(bin(n)) - 2\n        while bit_size >= 0:\n            if n % (2 ** bit_size) == 0:\n                res += bit_size\n            bit_size -= 1\n        if res == 0:\n            print(n)\n            return False\n        n -= res\n    return True\n",
        "num_ids": 119
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum = 0\n    while (n > 0):\n        sum = sum + (n % 2)\n        n = n // 2\n    if (sum > 0):\n        return True\n    else:\n        return False\n    # your code goes here\n",
        "num_ids": 60
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if not isinstance(n, int) and not isinstance(n, float): \n        raise TypeError(\"{} must be an int or float\".format(n)) \n    return bool(n and n > 0 and n & 1)\n",
        "num_ids": 58
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return True if (n==0) or n==1 or (n&1)==0 or (n&1)==1 or (n&1)==2 else False\n",
        "num_ids": 42
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    while(n!=0):\n        x=n%2\n        if(x!=0):\n            return 0\n        else:\n            n=n//2\n    return 1\n",
        "num_ids": 48
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0 or n==1:\n        return False\n    if n==2:\n        return True\n    while n%2==0:\n        n=n/2\n    while n%3==0:\n        n=n/3\n    while n%5==0:\n        n=n/5\n    if n!=1:\n        return False\n    return True\n",
        "num_ids": 92
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    if n==0:\n        return False\n    \n    \n    if n==1:\n        return True\n        \n    if n==2:\n        return True\n        \n    \n    while(n!=0):\n        \n        if n%2!= 0:\n            return False\n        \n        n = int(n/2)\n    \n    return True\n",
        "num_ids": 90
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    def recur(n):\n        if n == 0:\n            return 0\n        if n == 1 or n == 2:\n            return 1\n        else:\n            return recur(n - 1) + recur(n - 2)\n    \n    if n <= 0:\n        return False\n    if recur(n) == 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 96
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum_of_powers = 0\n    while (n):\n        sum_of_powers += 1\n        n = n >> 1\n    return sum_of_powers % 2 == 0\n",
        "num_ids": 45
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while(n > 0):\n        n = n // 2\n    if (n == 0):\n        print(\"True\")\n    else:\n        print(\"False\")\n",
        "num_ids": 41
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2 * pi * r\n",
        "num_ids": 16
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    circumference = 2 * pi * r\n    return circumference\n",
        "num_ids": 23
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * pi * r\n",
        "num_ids": 10
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.142*r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    \n    circumference = 2 * math.pi * r\n    return circumference\n",
        "num_ids": 21
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "num_ids": 12
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_set = set()\n    for test_case in test_list:\n        for test in test_case:\n            flattened_set.add(test)\n    return flattened_set\n",
        "num_ids": 50
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # if the list is empty\n    if len(test_list) == 0:\n        return []\n    # if the list is not empty\n    else:\n        if type(test_list[0]) is list:\n            # if the list is a list of lists\n            return extract_singly(test_list[0]) + extract_singly(test_list[1:])\n        else:\n            return test_list[0:1] + extract_singly(test_list[1:])\n",
        "num_ids": 119
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    def extract_singly_helper(test_list):\n        if not test_list:\n            return []\n        \n        if type(test_list) is not list:\n            return [test_list]\n        \n        output_list = []\n        for num in test_list:\n            output_list = output_list + extract_singly_helper(num)\n        return output_list\n    \n    return extract_singly_helper(test_list)\n    \n",
        "num_ids": 117
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    list_of_lists = []\n    \n    for i in test_list:\n        if isinstance(i,list):\n            list_of_lists.append(i)\n        else:\n            list_of_lists.append(int(i))\n    list_of_lists.sort()\n    \n    flattened_list = []\n    \n    while list_of_lists:\n        flattened_list.append(list_of_lists.pop())\n    \n    return flattened_list\n",
        "num_ids": 120
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    list = []\n    for i in test_list:\n        for j in i:\n            if j!= []:\n                list.append(j)\n",
        "num_ids": 39
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return sum(test_list, [])\n",
        "num_ids": 13
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    output = []\n    for i in test_list:\n        for j in i:\n            output.append(j)\n    return output\n",
        "num_ids": 35
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if len(test_list) == 1:\n        return test_list[0]\n    else:\n        return test_list[0] + extract_singly(test_list[1:])\n",
        "num_ids": 49
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly = set()\n    for i in test_list:\n        for j in i:\n            singly.add(j)\n    return singly\n",
        "num_ids": 39
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        for element in item:\n            flat_list.append(element)\n    return flat_list\n",
        "num_ids": 41
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    nums.sort(reverse=True)\n",
        "num_ids": 13
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # this is a naive implementation of pancake sort\n    for i in range(n - 1, 0, -1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                break\n    return nums\n",
        "num_ids": 90
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #if even, flip and make it an odd\n    if len(nums)%2!= 0:\n        nums.reverse()\n        nums.append(nums[0])\n        nums.pop(0)\n        nums.reverse()\n    #if odd, flip and make it an even\n    if len(nums)%2 == 0:\n        nums.reverse()\n        nums.pop(0)\n        nums.reverse()\n    \n    print(nums)\n",
        "num_ids": 120
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(nums, i, j):\n        temp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = temp\n        return nums\n",
        "num_ids": 50
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    p = []\n    while nums:\n        max_ = max(nums)\n        p.append(max_)\n        nums.remove(max_)\n",
        "num_ids": 42
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    size = len(nums)\n",
        "num_ids": 13
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # copy the array\n    sorted_arr = nums.copy()\n    # get the length of the array\n    n = len(sorted_arr)\n    # initilize the index of the list\n    i = n - 1\n    # while i > 0:\n    #     # move the lowest element to the last place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     # move the next element to the place\n    #     i -= 1\n    #     # move the last element to the first place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the second last element to the place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the last element to the place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the second last element to the place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the third last element to the place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the third last element to the place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the fourth last element to the place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the fourth last element to the place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the fifth last element to the place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the fifth last element to the place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the sixth last element to the place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the sixth last element to the place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the seventh last element to the place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the seventh last element to the place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the eigth last element to the place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the eigth last element to the place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the nineth last element to the place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the nineth last element to the place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the tenth last element to the place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the tenth last element to the place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the eleventh last element to the place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the eleventh last element to the place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the twelfth last element to the place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the twelfth last element to the place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the thirteenth last element to the place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the thirteenth last element to the place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the fourteenth last element to the place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the fourteenth last element to the place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the fifteenth last element to the place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the fifteenth last element to the place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the sixteenth last element to the place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the sixteenth last element to the place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the seventeenth last element to the place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the seventeenth last element to the place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the eighteenth last element to the place\n    #     sorted_arr[i], sorted_arr[0] = sorted_arr[0], sorted_arr[i]\n    #     i -= 1\n    #     # move the eighteenth last element to th",
        "num_ids": 1910
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n",
        "num_ids": 32
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums), 1, -1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                temp = nums[j]\n                nums[j] = nums[j+1]\n                nums[j+1] = temp\n",
        "num_ids": 79
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        idx = get_min_idx(nums)\n        nums[:] = nums[idx:] + nums[:idx]\n",
        "num_ids": 56
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    num_same = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                num_same += 1\n    for i in range(len(list1)):\n        for j in range(len(list3)):\n            if list1[i] == list3[j]:\n                num_same += 1\n    return num_same\n",
        "num_ids": 109
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    same_items_in_lists = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            same_items_in_lists += 1\n    return same_items_in_lists\n",
        "num_ids": 73
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    if len(list1)!=len(list2) or len(list2)!=len(list3):\n        return count\n    else:\n        for i in range(len(list1)):\n            if list1[i]==list2[i]==list3[i]:\n                count+=1\n        return count\n",
        "num_ids": 83
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        print(\"Two or more lists are not of equal length\")\n        return\n    \n    count = 0\n    for i in range(0, len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    print(count)\n    return\n",
        "num_ids": 109
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    x=0\n    while(x<len(list1)):\n        if(list1[x]==list2[x] and list1[x]==list3[x]):\n            x=x+1\n        else:\n            x=x+1\n    print(x)\n",
        "num_ids": 71
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    n1=len(list1)\n    n2=len(list2)\n    n3=len(list3)\n    c=0\n    for i in range(n1):\n        for j in range(n2):\n            for k in range(n3):\n                if list1[i]==list2[j] and list1[i]==list3[k] and list1[i]==list1[i]:\n                    c=c+1\n    return c\n",
        "num_ids": 116
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count+=1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            count+=1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # Another solution:\n    # Dict = {}\n    # for i in range(len(list1)):\n    #     Dict[list1[i]] = i\n    # for i in range(len(list2)):\n    #     Dict[list2[i]] = i\n    # for i in range(len(list3)):\n    #     Dict[list3[i]] = i\n",
        "num_ids": 99
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # creating a list for input\n    Input = list(Input)\n    # function to find the number of lists\n    def number_of_lists(Input):\n        # total lists\n        total_lists = 0\n        # for loop to find the number of lists\n        for i in range(len(Input)):\n            # if condition to check if list is empty\n            if Input[i] == '':\n                total_lists = total_lists + 1\n            else:\n                return number_of_lists(Input[i]) + 1\n        # return number of lists\n        return total_lists\n    # function to return number of lists\n    return number_of_lists(Input)\n",
        "num_ids": 158
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    num_lists = 0\n    for i in Input:\n        if type(i) == list:\n            num_lists += 1\n    return num_lists\n",
        "num_ids": 39
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        if type(Input[i]) == list:\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # List \n    List = []\n    for i in range(len(Input)):\n        List.append([])\n    \n    # Scan list\n    for i in range(len(Input)):\n        # Number of numbers in list\n        count = 0\n        for j in range(len(Input[i])):\n            # Check if element is present\n            if Input[i][j] in List[i]:\n                continue\n            # Add element to list\n            List[i].append(Input[i][j])\n            # Count number of elements in list\n            count += 1\n        # Update List length\n        List[i] = count\n    \n    return List\n",
        "num_ids": 157
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if type(Input)!= tuple: \n        raise TypeError(\"Input must be a tuple\") \n    return len(list(filter(lambda x: type(x) == list, Input)))\n",
        "num_ids": 47
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count=0\n    for i in Input:\n        count=count+1\n    return count\n",
        "num_ids": 25
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    count = 0\n    for x in Input: \n        if type(x) == list:\n            count += 1\n        else:\n            continue\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lst=[]\n    for i in Input:\n        lst.append(i)\n    count=0\n    for i in range(len(Input)):\n        if(Input[i] not in lst):\n            count+=1\n        else:\n            continue\n    return count\nprint(\"Finding number of lists present in the given tuple:\")\nprint(find_lists((1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10)))\n",
        "num_ids": 131
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    t = (1,2,[1,2],('a','b'),{'a':1, 'b':2})\n    \n    print(find_lists(t))\n",
        "num_ids": 45
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    number_of_lists = 0\n    for i in range(len(Input)): \n        if type(Input[i]) is list: \n            number_of_lists = number_of_lists + 1\n    return number_of_lists\n",
        "num_ids": 60
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0] - arr[1]\n    for i in range(len(arr)):\n        if(arr[i] - arr[i-1] > max_diff):\n            max_diff = arr[i] - arr[i-1]\n    return max_diff\n",
        "num_ids": 72
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(0,len(arr)-1):\n        diff = abs(arr[i]-arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n    \nprint(\"Maximum Difference between any two elements:\", max_Abs_Diff([-3, -2, 2, 5, -3]))\nprint(\"Maximum Difference between any two elements:\", max_Abs_Diff([-3, -2, 2, -4, -5, 6]))\nprint(\"Maximum Difference between any two elements:\", max_Abs_Diff([-1, -5, -3, -4, -1]))\n",
        "num_ids": 162
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return 0\n    max_diff = 0\n    for i in range(len(arr) - 1):\n        max_diff = max(max_diff, abs(arr[i] - arr[i+1]))\n    return max_diff\n",
        "num_ids": 69
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    size = len(arr)\n    if size < 2:\n        return -1\n    min_element = arr[0]\n    max_element = arr[0]\n    for i in range(1,size):\n        if arr[i] > max_element:\n            max_element = arr[i]\n        elif arr[i] < min_element:\n            min_element = arr[i]\n    return abs(max_element - min_element)\n",
        "num_ids": 111
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        diff = abs(arr[i]-arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n",
        "num_ids": 60
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr)==0:\n        return 0\n    max_diff = -9999\n    for i in range(0,len(arr)-1):\n        diff = abs(arr[i]-arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n",
        "num_ids": 77
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i-1] > max_diff:\n            max_diff = arr[i] - arr[i-1]\n    return max_diff\n",
        "num_ids": 65
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if (abs(arr[i]-arr[j])>max_diff):\n                max_diff=abs(arr[i]-arr[j])\n    return max_diff\n",
        "num_ids": 78
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    return max_diff\n",
        "num_ids": 80
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if not arr: \n        return -1\n    \n    max_diff = arr[0] - arr[1]\n    for i in range(len(arr) - 1): \n        max_diff = max(max_diff, arr[i+1] - arr[i])\n        \n    return max_diff\n    ",
        "num_ids": 78
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    result = []\n    for i in range(1, n):\n        if a * i + b * i == n:\n            result.append(i)\n    return tuple(result) if result else None\n",
        "num_ids": 50
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    for x in range(a, b+1):\n        for y in range(a, b+1):\n            if x + y == n:\n                return (x, y)\n    return None\n",
        "num_ids": 51
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # a = 0\n    # b = 2\n    # n = 4\n    # (x,y)=0,2\n    # (x,y)=1,2\n    # (x,y)=1,3\n    # (x,y)=2,3\n    # (x,y)=2,4\n",
        "num_ids": 75
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0 and n == 0:\n        return (0, 0)\n    if a == 0 and b == 0 and n!= 0:\n        return (0, n)\n    if n == 0:\n        return (a, b)\n    if n == 1:\n        return (a, b)\n    if a == 0:\n        x = 0\n        y = (b * n) / a\n        return (x, y)\n    if b == 0:\n        x = (a * n) / b\n        y = 0\n        return (x, y)\n    if a == b:\n        x = (a * n) / a\n        y = (b * n) / a\n        return (x, y)\n    if a > 0 and b > 0:\n        x = (a * n) / b\n        y = (a * n) / a\n        return (x, y)\n    if a < 0 and b > 0:\n        x = -(abs(b) * n) / abs(a)\n        y = (a * n) / b\n        return (x, y)\n    if a < 0 and b < 0:\n        x = -(abs(b) * n) / abs(a)\n        y = -(abs(b) * n) / abs(a)\n        return (x, y)\n    if a > 0 and b < 0:\n        x = (abs(b) * n) / abs(a)\n        y = -(abs(b) * n) / abs(a)\n        return (x, y)\n    if a == 1 and b!= 1:\n        x = (1 * n) / b\n        y = (1 * n) / a\n        return (x, y)\n    if a == 1 and b == 1:\n        x = 1\n        y = 0\n        return (x, y)\n    if a == 0 and b == 1:\n        x = 0\n        y = n\n        return (x, y)\n    if b == 0 and a == 1:\n        x = 0\n        y = n\n        return (x, y)\n    if a == 1 and b == 1:\n        x = n\n        y = 0\n        return (x, y)\n    if a == 0 and b == 1:\n        x = 0\n        y = 0\n        return (x, y)\n    if a == 0 and b == 0:\n        x = 0\n        y = 0\n        return (x, y)\n    if a == 0 and b == 1:\n        x = 0\n        y = n\n        return (x, y)\n    if a == 1 and b == 1:\n        x = n\n        y = 0\n        return (x, y)\n    if a == 1 and b == 0:\n        x = 1\n        y = 0\n        return (x, y)\n    if a == 0 and b == 1:\n        x = 0\n        y = -n\n        return (x, y)\n    if a == 1 and b == 0:\n        x = 1\n        y = -n\n        return (x, y)\n    if a == 1 and b == 1:\n        x = -n\n        y = 0\n        return (x, y)\n    if a == 1 and b == 0:\n        x = -n\n        y = -n\n        return (x, y)\n    if a == 0 and b == -1:\n        x = 0\n        y = -n\n        return (x, y)\n    if a == 1 and b == -1:\n        x = -n\n        y = 0\n        return (x, y)\n    if a == 0 and b == -1:\n        x = 0\n        y = -n\n        return (x, y)\n    if a == 1 and b == -1:\n        x = -n\n        y = 0\n        return (x, y)\n    if a == 1 and b == -1:\n        x = -n\n        y = -n\n        return (x, y)\n    if a == 0 and b == -1:\n        x = 0\n        y = 0\n        return (x, y)\n    if a == 1 and b == -1:\n        x = -n\n        y = 0\n        return (x, y)\n    if a == 0 and b == -1:\n        x = 0\n        y = -n\n        return (x, y)\n    if a == 1 and b == -1:\n        x = -n\n        y = -n\n        return (x, y)\n    if a == -1 and b == 1:\n        x = -n\n        y = 0\n        return (x, y)\n    if a == -1 and b == 0:\n        x = -n\n        y = -n\n        return (x, y)\n    if a == -1 and b == -1:\n        x = -n\n        y = 0\n        return (x, y)\n    if a == -1 and b == 1:\n        x = -n\n        y = n\n        return (x, y)\n    if a == -1 and b == 0:\n        x = -n\n        y = n\n        return (x, y)\n    if a == -1 and b == -1:\n        x = -n\n        y = -n\n        return (x, y)\n    if a == -1 and b == 1:\n        x = -n\n        y = -n\n        return (x, y)\n    if a == -1 and b == 0:\n        x = -n\n        y = 0\n        return (x, y)\n    if a == -1 and b == -1:\n        x = -n\n        y = n\n        return (x, y)\n    if a == -1 and b == 0:\n        x = -n\n        y = 0\n        return (x, y)\n    if a == -1 and b == 1:\n        x = -n\n        y = n\n        return (x, y)\n    if a == -1 and b == -1:\n        x = -n\n        y = -n\n        return (x, y)\n    if a == -1 and b == 0:\n        x = -n\n        y = 0\n        return (x, y)\n    if a == -1 and b == 1:\n        x = -n\n        y = -n\n        return (x, y)\n    if a == -1 and b == 0:\n        x = -n\n        y = 0\n        return (x, y)\n    if a == -1 and b == -1:\n        x = -n\n        y = 0\n        return (x, y)\n    if a == -1 and b == 1:\n        x = -n\n        y = -n\n        return (x, y)\n    if a == -1 and b == 0:\n        x = -n\n        y = -n\n        return (x, y)\n    if a == -1 and b == 1:\n        x = -n\n        y = -n\n        return (x, y)\n    if a == -1 and b == 0:\n        x = -n\n        y = 0\n        return (x, y)\n    if a == -1 and b == -1:\n        x = -n\n        y = 0\n        return (x, y)\n    if a == -1 and b == 1:\n        x = -n\n        y = -n\n        return (x, y)\n    if a == -1 and b == 0:\n        x = -n\n        y = 0\n        return (x, y)\n    if a == -1 and b == 1:\n        x = -n\n        y = 0\n        return (x, y)\n    if a == -1 and b == 0:\n        x = -n\n        y = -n\n        return (x, y)\n    if a == -1 and b == -1:\n        x = -n\n        y = 0\n        return (x, y)\n    if a == -1 and b == 0:\n        x = -n\n        y = 0\n        return (x, y)\n    if a == -1 and b == 1:\n        x = -n\n        y = 0\n        return (x, y)\n    if a == -1 and b == -1:\n        x = -n\n        y = n\n        return (x, y)\n    if a =",
        "num_ids": 2001
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, b):\n        for y in range(1, a):\n            if a * x + b * y == n:\n                return x, y\n    return None\n",
        "num_ids": 47
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n % a == 0:\n        return None\n    for x in range(1, n // a + 1):\n        for y in range(1, n // b + 1):\n            if x * a + y * b == n:\n                return x, y\n",
        "num_ids": 64
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(1, n):\n        if a * i + b * i == n:\n            return (a * i, b * i)\n",
        "num_ids": 38
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if (a*b) % n == 0:\n        return (0, int((a*b) / n))\n    else:\n        return find_solution(a, b, n - 1)\n",
        "num_ids": 50
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 0\n    if a == 0:\n        if b == 1:\n            x = 0\n            y = 1\n        if b == -1:\n            x = 0\n            y = -1\n        if b == 2:\n            x = 1\n            y = 1\n        if b == -2:\n            x = 1\n            y = -1\n    if a == 1:\n        if b == 1:\n            x = 1\n            y = 1\n        if b == -1:\n            x = 1\n            y = -1\n        if b == 2:\n            x = 0\n            y = 1\n        if b == -2:\n            x = 0\n            y = -1\n    if a == 2:\n        if b == 1:\n            x = 0\n            y = -1\n        if b == -1:\n            x = 0\n            y = 1\n        if b == 2:\n            x = 1\n            y = -1\n        if b == -2:\n            x = 1\n            y = 1\n    if a == -1:\n        if b == 1:\n            x = 0\n            y = 1\n        if b == -1:\n            x = 0\n            y = -1\n        if b == 2:\n            x = 1\n            y = 1\n        if b == -2:\n            x = 1\n            y = -1\n    if a == -2:\n        if b == 1:\n            x = 1\n            y = 1\n        if b == -1:\n            x = 1\n            y = -1\n        if b == 2:\n            x = 0\n            y = 1\n        if b == -2:\n            x = 0\n            y = -1\n    if a == -3 and b == 1:\n        if n == 18:\n            x = 1\n            y = 1\n    if a == -3 and b == -1:\n        if n == 18:\n            x = -1\n            y = 1\n    if a == -3 and b == 2:\n        if n == 18:\n            x = 1\n            y = -1\n    if a == -3 and b == -2:\n        if n == 18:\n            x = -1\n            y = -1\n    if a == 3 and b == 1:\n        if n == 18:\n            x = -1\n            y = 1\n    if a == 3 and b == -1:\n        if n == 18:\n            x = 1\n            y = 1\n    if a == 3 and b == 2:\n        if n == 18:\n            x = -1\n            y = -1\n    if a == 3 and b == -2:\n        if n == 18:\n            x = 1\n            y = -1\n    if a == 4 and b == 1:\n        if n == 20:\n            x = 1\n            y = 1\n    if a == 4 and b == -1:\n        if n == 20:\n            x = -1\n            y = 1\n    if a == 4 and b == 2:\n        if n == 20:\n            x = 1\n            y = -1\n    if a == 4 and b == -2:\n        if n == 20:\n            x = -1\n            y = -1\n    if a == 5 and b == 1:\n        if n == 22:\n            x = 1\n            y = 1\n    if a == 5 and b == -1:\n        if n == 22:\n            x = -1\n            y = 1\n    if a == 5 and b == 2:\n        if n == 22:\n            x = 1\n            y = -1\n    if a == 5 and b == -2:\n        if n == 22:\n            x = -1\n            y = -1\n    if a == 6 and b == 1:\n        if n == 24:\n            x = 1\n            y = 1\n    if a == 6 and b == -1:\n        if n == 24:\n            x = -1\n            y = 1\n    if a == 6 and b == 2:\n        if n == 24:\n            x = 1\n            y = -1\n    if a == 6 and b == -2:\n        if n == 24:\n            x = -1\n            y = -1\n    if a == 7 and b == 1:\n        if n == 26:\n            x = 1\n            y = 1\n    if a == 7 and b == -1:\n        if n == 26:\n            x = -1\n            y = 1\n    if a == 7 and b == 2:\n        if n == 26:\n            x = 1\n            y = -1\n    if a == 7 and b == -2:\n        if n == 26:\n            x = -1\n            y = -1\n    if a == 8 and b == 1:\n        if n == 28:\n            x = 1\n            y = 1\n    if a == 8 and b == -1:\n        if n == 28:\n            x = -1\n            y = 1\n    if a == 8 and b == 2:\n        if n == 28:\n            x = 1\n            y = -1\n    if a == 8 and b == -2:\n        if n == 28:\n            x = -1\n            y = -1\n    if a == 9 and b == 1:\n        if n == 30:\n            x = 1\n            y = 1\n    if a == 9 and b == -1:\n        if n == 30:\n            x = -1\n            y = 1\n    if a == 9 and b == 2:\n        if n == 30:\n            x = 1\n            y = -1\n    if a == 9 and b == -2:\n        if n == 30:\n            x = -1\n            y = -1\n    if a == 10 and b == 1:\n        if n == 32:\n            x = 1\n            y = 1\n    if a == 10 and b == -1:\n        if n == 32:\n            x = -1\n            y = 1\n    if a == 10 and b == 2:\n        if n == 32:\n            x = 1\n            y = -1\n    if a == 10 and b == -2:\n        if n == 32:\n            x = -1\n            y = -1\n    if a == 11 and b == 1:\n        if n == 34:\n            x = 1\n            y = 1\n    if a == 11 and b == -1:\n        if n == 34:\n            x = -1\n            y = 1\n    if a == 11 and b == 2:\n        if n == 34:\n            x = 1\n            y = -1\n    if a == 11 and b == -2:\n        if n == 34:\n            x = -1\n            y = -1\n    if a == 12 and b == 1:\n        if n == 36:\n            x = 1\n            y = 1\n    if a == 12 and b == -1:\n        if n == 36:\n            x = -1\n            y = 1\n    if a == 12 and b == 2:\n        if n == 36:\n            x = 1\n            y = -1\n    if a == 12 and b == -2:\n        if n == 36:\n            x = -1\n            y = -1\n    if a == 13 and b == 1:\n        if n == 38:\n            x = 1\n            y = 1\n    if a == 13 and b == -1:\n        if n == 38:\n            x = -1\n            y = 1\n    if a == 13 and b == 2:\n        if n == 38:\n            x = 1\n            y = -1\n    if a == 13 and b == -2:\n        if n == 38:\n            x = -1\n            y = -1\n    if a == 14 and b == 1:\n        if n == 40:\n            x = 1\n            y = 1\n    if a == 14 and b == -1:\n        if n == 40:\n            x = -1\n            y = 1\n    if a == 14 and b == 2:\n        if n == 40:\n            x = 1\n            y = -1\n    if a == 14 and b == -2:\n        if n == 40:\n            x = -1\n            y = -1\n    if a == 15 and b == 1:\n        if n == 42:\n            x = 1\n            y = 1\n    if a == 15 and b == -1:\n        if n == 42:\n            x = -",
        "num_ids": 1998
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = y = None\n    for i in range(n):\n        for j in range(n):\n            if i * a + j * b == n:\n                x = i\n                y = j\n    return (x, y)\n",
        "num_ids": 58
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Your code here\n    for i in list2:\n        list1.remove(i)\n    return list1\n",
        "num_ids": 30
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n",
        "num_ids": 27
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # return list1[:]\n    for i in list2:\n        try:\n            list1.remove(i)\n        except:\n            pass\n    return list1\n",
        "num_ids": 43
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for i in list1:\n        if i not in list2:\n            list3.append(i)\n    return list3\n",
        "num_ids": 39
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list2 = set(list2)\n    return list(set(list1) - list2)\n",
        "num_ids": 26
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list\n",
        "num_ids": 42
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    final_list = []\n    for i in list1:\n        if i not in list2:\n            final_list.append(i)\n    return final_list\n",
        "num_ids": 42
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # for element in list2:\n    #     if element in list1:\n    #         list1.remove(element)\n    # return list1\n",
        "num_ids": 38
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for i in list1:\n        if i not in list2:\n            list3.append(i)\n    return list3\n",
        "num_ids": 39
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list2.remove(i)\n    return list2\n",
        "num_ids": 32
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n <= 2:\n        return n\n    else:\n        return n + sum_series(n-2)\n",
        "num_ids": 42
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    return n + sum_series(n-2)\n",
        "num_ids": 26
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    n = int(n)\n    # Initialize sum and number of terms\n    s = 0\n    x = 0\n    # Loop through each term\n    while n >= 0:\n        # Add to sum\n        s += n\n        # Next term\n        x += 1\n        # Update n\n        n -= x\n    return s\n",
        "num_ids": 79
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n\n",
        "num_ids": 6
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + (n - 2) + (n - 4)\n",
        "num_ids": 33
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    if n == 0:\n        return result\n    for i in range(n//2):\n        result += n-2*i\n    return result\n",
        "num_ids": 42
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return ((n - 1) * (n + 1)) // 2\n",
        "num_ids": 18
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(0, n // 2):\n        sum = sum + (n - 2*i)\n    return sum\n",
        "num_ids": 37
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_n = 0\n    for i in range(n):\n        sum_n = sum_n + (n - 2 * i)\n    return sum_n\n",
        "num_ids": 41
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s * ((s-2) * tan(pi/s)) / 2\n",
        "num_ids": 21
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    #your code here\n    return\n",
        "num_ids": 11
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    def polygon_area(l, n):\n        p = l * (1 - tan(pi/n)) / (1 + tan(pi/n))\n        return p\n    a = polygon_area(l, n)\n    area_num = (n * (n - 1)) / 2\n    print(round(a, 2))\n    print(round(area_num, 2))\n",
        "num_ids": 94
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = s * l / 2\n    b = s * pi\n    c = (a * b) / 2\n    return c\n",
        "num_ids": 33
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    s = float(s)\n    l = float(l)\n    pi = 3.14159\n    area = s*l*(pi/180)\n    return round(area, 3)\n",
        "num_ids": 48
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*(l*0.5))/tan(pi/l)\n",
        "num_ids": 22
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    n = l // 2\n    return pi * (n * s) / 2\n",
        "num_ids": 21
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * l) / tan(pi / l)\n",
        "num_ids": 17
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = s / (2 * tan(pi/s))\n    return a * (s*s - l*l) / (4 * tan(pi/s))\n",
        "num_ids": 41
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # if s % 2 == 0:\n    #     print(\"s must be odd\")\n    #     return\n    # if l % 2 == 0:\n    #     print(\"l must be odd\")\n    #     return\n    # s = float(s)\n    # l = float(l)\n    # return s * l * tan(pi/s) / 2\n    return (s * l * tan(pi/s) / 2)\n",
        "num_ids": 105
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0:\n        return False\n    else:\n        div_sum = 0\n        for i in range(1, int(math.sqrt(n) + 1)):\n            if n % i == 0:\n                div_sum += i + n/i\n        return div_sum == n\n",
        "num_ids": 74
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if n%i==0:\n            sum+=i\n    return sum==n\n",
        "num_ids": 38
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s=0\n    for i in range(1,n):\n        if n%i==0:\n            s+=i\n    return s==n\n",
        "num_ids": 38
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors_a = []\n    divisors_b = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors_a.append(i)\n            divisors_b.append(n//i)\n    if sum(divisors_a) == sum(divisors_b):\n        return True\n    else:\n        return False\n",
        "num_ids": 108
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def div_sum_helper(n, divisors):\n        for i in divisors:\n            if n%i!= 0:\n                return False\n            else:\n                return True\n        return False\n    return div_sum_helper(n, range(1, n+1))\n",
        "num_ids": 73
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n<1:\n        return False\n    elif n==1:\n        return True\n    else:\n        divisor = 2\n        while divisor*divisor<=n:\n            if n%divisor==0:\n                return False\n            divisor+=1\n        return True\n",
        "num_ids": 76
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return math.gcd(n, sum(divisors(n))) == 1\n",
        "num_ids": 22
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_n1 = int(math.sqrt(n))\n    div_n2 = int(n/math.sqrt(n))\n    div_n1 = div_n1 + 1\n    div_n2 = div_n2 - 1\n    for i in range(1, div_n1):\n        if n % i == 0:\n            return True\n    for i in range(1, div_n2):\n        if n % i == 0:\n            return True\n    return False\n",
        "num_ids": 120
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    a = 1\n    b = 2\n    s1 = 0\n    s2 = 0\n    while a <= n:\n        if n % a == 0:\n            s1 += a\n        a += 1\n    while b <= n:\n        if n % b == 0:\n            s2 += b\n        b += 1\n    print(s1,s2)\n    if s1 == s2:\n        return True\n    else:\n        return False\n",
        "num_ids": 109
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, n+1): \n        if n % i == 0: \n            divisors.append(i) \n    return sum(divisors) == n\n",
        "num_ids": 55
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if ord(str1[i]) == ord(str1[i].lower()):\n            count = count + 1\n    return count\n",
        "num_ids": 52
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] not in \"qwertyuiopasdfghjklzxcvbnm\":\n            count += 1\n    return count\n",
        "num_ids": 56
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            count += 1\n    print(count)\n",
        "num_ids": 42
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    n = len(str1)\n    d = {}\n    for i in range(n):\n        char = str1[i]\n        if char in d:\n            d[char] = d[char]+1\n        else:\n            d[char] = 1\n    count = 0\n    for key in d:\n        if d[key] == n:\n            count += 1\n    return count\n",
        "num_ids": 96
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == str1[i].upper():\n            count += 1\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1.upper().find(str1[i].upper()) == i:\n            count += 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # count = 0\n    # for i in range(len(str1)):\n    #     if str1[i] in 'qwertyuiopasdfghjklzxcvbnm':\n    #         count += 1\n    # return count\n    return len([l for l in str1 if l in 'qwertyuiopasdfghjklzxcvbnm'])\n",
        "num_ids": 94
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    from collections import Counter\n",
        "num_ids": 8
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].upper() == str1[i].lower():\n            count += 1\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count=0\n    char_pos_dict={}\n    for i in range(len(str1)):\n        if str1[i] in char_pos_dict:\n            char_pos_dict[str1[i]]=char_pos_dict[str1[i]]+1\n        else:\n            char_pos_dict[str1[i]]=1\n",
        "num_ids": 90
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            x = A[i]^A[j]\n            if x%2==0:\n                count += 1\n    return count\n",
        "num_ids": 66
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                even += 1\n            else:\n                even += 0\n    return even\n",
        "num_ids": 71
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    found = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i] ^ A[j] == 0:\n                found += 1\n    return found\n",
        "num_ids": 61
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # O(n) time | O(n) space\n    counter = 0\n    for i in range(0, len(A) - 1):\n        for j in range(i + 1, len(A)):\n            if xor(A[i], A[j]) % 2 == 0:\n                counter += 1\n    return counter\n",
        "num_ids": 81
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pairs = 0\n    xor = 0\n    for i in range(len(A)):\n        xor = xor ^ A[i]\n        if xor == 0:\n            pairs += 1\n    return pairs\n",
        "num_ids": 56
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # sorted(A)\n    # return 0 if A is empty\n    if len(A) < 2: return 0\n    # binary search for the element\n    # if even - return 0\n    # else even - return 1\n    low = 0\n    high = len(A) - 1\n    # mid = (low+high)//2\n    while low <= high:\n        mid = (low+high)//2\n        if A[mid] & 1 == 1:\n            low = mid + 1\n        else:\n            high = mid - 1\n    # if even - return 0\n    # else even - return 1\n    return 0 if low == high else 1\n",
        "num_ids": 155
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    x = 0\n    for i in range(len(A)):\n        for j in range(i, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                x = x + 1\n    return x\n",
        "num_ids": 62
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # Brute force solution\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n    '''\n    # Two pointers solution\n    '''\n    count = 0\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        if A[left] ^ A[right] == 0:\n            count += 1\n        if A[left] ^ A[right] < 0:\n            left += 1\n        else:\n            right -= 1\n    return count\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even = 0\n    odd = 0\n",
        "num_ids": 12
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n",
        "num_ids": 7
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # keep dividing by 2 if n is less than or equal to 1\n    while n <= 1:\n        n = n * 2\n    return n\n",
        "num_ids": 36
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Start with checking 2^0 and 2^1\n    power_2 = 2**0\n    while(power_2 <= n): \n        if(power_2 == n): \n            return power_2\n        power_2 = 2*power_2\n",
        "num_ids": 63
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    # if n is 0 return 1\n    if n == 0:\n        return 1\n    # if n is not 0 return 1\n    elif n > 0:\n        return 1\n    # if n is negative return -1\n    elif n < 0:\n        return -1\n        \ndef replace_letter_with_spaces(word,letter):\n    '''\n    Write a python function to replace letter with spaces in word.\n    '''\n    \n    # if word is empty, return empty string\n    if len(word) == 0:\n        return word\n    # if word is not empty, replace letter with spaces and return word\n    else:\n        return word.replace(letter,\" \")\n        \ndef remove_letters_with_odd_count(s):\n    '''\n    Write a python function to remove all the letters in s with odd count of occurrences.\n    '''\n    \n    # if s is empty return empty string\n    if len(s) == 0:\n        return s\n    # if s is not empty, remove letters with odd count of occurrences and return s\n    else:\n        return \"\".join([char for char in s if (ord(char) + 1) % 2!= 0])\n        \ndef no_teen_sum(a,b,c):\n    '''\n    Write a python function to compute the sum of two numbers if they are not teen numbers.\n    '''\n    \n    # if a,b,c are 0 or 17, return 0\n    if a == 0 or b == 0 or c == 0 or (a == 17 or b == 17 or c == 17):\n        return 0\n    # if a,b,c are not 0 and neither 17, return a+b+c-17\n    else:\n        return a + b + c - 17\n        \ndef is_fraction(n):\n    '''\n    Write a python function to check if a number is a fraction.\n    '''\n    \n    # if n is 0 return 0\n    if n == 0:\n        return 0\n    # if n is not 0 return 1\n    elif n > 0:\n        return 1\n    # if n is negative return -1\n    elif n < 0:\n        return -1\n        \ndef get_first_digit(number):\n    '''\n    Write a python function to return the first digit of a number.\n    '''\n    \n    # if number is 0 return 0\n    if number == 0:\n        return 0\n    # if number is not 0, return first digit of number\n    else:\n        return number % 10\n        \ndef convert_binary_num_to_decimal(binary):\n    '''\n    Write a python function to convert a binary number to decimal.\n    '''\n    \n    # if binary is 0 return 0\n    if binary == 0:\n        return 0\n    # if binary is not 0, return 10*binary + first_digit_of_binary\n    else:\n        return 10*binary + get_first_digit(binary)\n        \ndef first_word(sentence):\n    '''\n    Write a python function to return the first word in a sentence.\n    '''\n    \n    # if sentence is empty return empty string\n    if len(sentence) == 0:\n        return \"\"\n    # if sentence is not empty, return first word in sentence\n    else:\n        return sentence.split()[0]\n        \ndef sum_first_and_last(sentence):\n    '''\n    Write a python function to sum the first and last word of a sentence.\n    '''\n    \n    # if sentence is empty return 0\n    if len(sentence) == 0:\n        return 0\n    # if sentence is not empty, sum the first and last word of sentence and return result\n    else:\n        return int(sentence.split()[0]) + int(sentence.split()[-1])\n        \ndef char_frequency(sentence):\n    '''\n    Write a python function to find the frequency of the given character in a sentence.\n    '''\n    \n    # if sentence is empty return empty string\n    if len(sentence) == 0:\n        return \"\"\n    # if sentence is not empty, sort the sentence and return character and its frequency\n    else:\n        char_frequency = {}\n        for char in sentence:\n            if char in char_frequency:\n                char_frequency[char] = char_frequency[char] + 1\n            else:\n                char_frequency[char] = 1\n        return char_frequency\n        \ndef is_unique(word):\n    '''\n    Write a python function to check if the given word is unique.\n    '''\n    \n    # if word is empty return 1\n    if len(word) == 0:\n        return 1\n    # if word is not empty, check if the word is unique\n    else:\n        return len(word) == len(set(word))\n        \ndef is_palindrome(s):\n    '''\n    Write a python function to check if a given string is palindrome or not.\n    '''\n    \n    # if s is empty return 1\n    if len(s) == 0:\n        return 1\n    # if s is not empty, return 0 if the first and last character is same or if the string is not a palindrome\n    elif s[0] == s[-1] or len(s) > 1 and s[0]!= s[-1]:\n        return 0\n    # if the string is not a palindrome return 1\n    else:\n        return 1\n        \ndef is_palindrome_rec(s):\n    '''\n    Write a python function to check if a given string is palindrome or not.\n    '''\n    \n    # if s is empty return 1\n    if len(s) == 0:\n        return 1\n    # if s is not empty, return 0 if the first and last character is same or if the string is not a palindrome\n    else:\n        if s[0] == s[-1] or len(s) > 1 and s[0]!= s[-1]:\n            return 0\n        else:\n            return is_palindrome_rec(s[1:-1])\n        \ndef index_nested_list_items(nested_list,item):\n    '''\n    Write a python function to find the index of a nested list item in a nested list.\n    '''\n    \n    # if item is not found, return -1\n    if item not in nested_list:\n        return -1\n    # if item is found in the nested list, return index of item\n    else:\n        return nested_list.index(item)\n        \ndef first_non_repeating_letter(string):\n    '''\n    Write a python function to return the first non repeating letter in a given string.\n    '''\n    \n    # if string is empty return empty string\n    if len(string) == 0:\n        return \"\"\n    # if string is not empty, return the first non repeating letter in string and return result\n    else:\n        non_repeating_letter = {}\n        for char in string:\n            if char in non_repeating_letter:\n                non_repeating_letter[char] = non_repeating_letter[char] + 1\n            else:\n                non_repeating_letter[char] = 1\n        for char in non_repeating_letter:\n            if non_repeating_letter[char] == 1:\n                return char\n        return \"\"\n        \ndef insertion_sort(nums):\n    '''\n    Write a python function to sort a list in ascending order using insertion sort algorithm.\n    '''\n    \n    # if length of nums is 0 or 1, return nums\n    if len(nums) == 0 or len(nums) == 1:\n        return nums\n    # if length of nums is greater than 1, sort nums\n    else:\n        for i in range(1, len(nums)):\n            # if current element is greater than or equal to its adjacent element, swap with current element\n            if nums[i-1] >= nums[i]:\n                nums[i], nums[i-1] = nums[i-1], nums[i]\n        return nums\n        \ndef two_number_sum(array,targetSum):\n    '''\n    Write a python function to find all pairs of numbers in an array whose sum is equal to a given number \u2018S\u2019.\n    '''\n    \n    # if array is empty return empty list\n    if len(array) == 0:\n        return []",
        "num_ids": 27
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while 2**i <= n:\n        i+=1\n    return i-1\n",
        "num_ids": 27
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    if n == 1:\n        return 1\n    else:\n        return 1 << (n.bit_length() - 1)\n",
        "num_ids": 34
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power_of_2 = 1\n    while (2**power_of_2) < n:\n        power_of_2 = power_of_2 + 1\n    return power_of_2\n",
        "num_ids": 49
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 0\n    while i <= n:\n        i = i << 1\n        if i >= n:\n            return i\n",
        "num_ids": 32
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    x = 1\n    while x < n:\n        x = x * 2\n    return x\n",
        "num_ids": 25
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while(i <= n):\n        i = i<<1\n    return i",
        "num_ids": 25
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1<<(n-1).bit_length()\n",
        "num_ids": 16
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    f=0\n    for i in range(len(a)):\n        if a[i]==x:\n            f=f+1\n    return f\n",
        "num_ids": 40
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in a:\n        if i==x:\n            count+=1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    num_of_occur = 0\n    for i in a:\n        if i == x:\n            num_of_occur += 1\n    return num_of_occur\n",
        "num_ids": 45
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in a:\n        if i == x:\n            count+=1\n    print(\"\\nThe frequency of {} in the list is {}\".format(x,count))\n",
        "num_ids": 48
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n",
        "num_ids": 11
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    frequency = 0\n    for i in a:\n        if i == x:\n            frequency = frequency + 1\n    return frequency\n",
        "num_ids": 32
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for item in a:\n        if item == x:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or m > len(list1) or n < 0 or n > len(list1) or n >= m:\n        return None\n    return sum(list1[m:n+1])\n",
        "num_ids": 51
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or n >= len(list1):\n        return None\n    elif m == 0 and n == len(list1) - 1:\n        return sum(list1[m:n+1])\n    elif n == len(list1) - 1:\n        return sum(list1[m:n+1])\n    else:\n        return sum(list1[m:n+1]) + sum_range_list(list1, m, n-1)\n",
        "num_ids": 114
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m,n+1):\n        sum = sum + list1[i]\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n",
        "num_ids": 14
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    res = 0\n    for i in range(m, n + 1):\n        res += list1[i]\n    return res\n",
        "num_ids": 33
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m == n:\n        return list1[m]\n    return list1[m] + sum_range_list(list1, m+1, n-1)\n    \n",
        "num_ids": 45
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\nsum_range_list([1,2,3,4,5,6],2,5)\n",
        "num_ids": 56
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or m > len(list1) or n < 0 or n > len(list1):\n        return -1\n    return sum(list1[m:n+1])\n",
        "num_ids": 47
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m,n+1):\n        sum += list1[i]\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    pi = math.pi\n    a = float(a)\n    S = (a * (1+math.sqrt(5))) / 2\n    return pi * S\n",
        "num_ids": 42
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = a * 5\n    return perimeter\n",
        "num_ids": 14
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    pi = math.pi\n    half = a / 2\n    perimeter = (half * (3 * pi - 2 * pi * math.sin(half * pi / 3) - 2 * pi * math.sin(half * 2 * pi / 3)))\n    print(perimeter)\n    return perimeter\n",
        "num_ids": 71
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 2 * (a + (a**0.5))\n",
        "num_ids": 17
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a <= 0:\n        print(\"Incorrect Input\")\n    else:\n        return a*(a+1)/2\n",
        "num_ids": 32
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = (a*5)/2\n    return perimeter\ndef hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    perimeter = a*6\n    return perimeter\ndef triangle(a, b):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = a*b/2\n    return area\ndef circle(a):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = math.pi*a*a\n    return area\ndef circle_area(a,b,c):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = (a*a + b*b + c*c)/2\n    return area\ndef rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = a*b\n    return area\ndef rectangle_perimeter(a,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    perimeter = a + b\n    return perimeter\ndef triangle_perimeter(a,b,c):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    perimeter = a + b + c\n    return perimeter\ndef rectangle_area(a,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = a*b\n    return area\ndef rectangle_area_perimeter(a,b):\n    '''\n    Write a function to find the area and perimeter of a rectangle.\n    '''\n    area = a*b\n    perimeter = a+b\n    return area,perimeter\ndef circle_area_perimeter(a,b,c):\n    '''\n    Write a function to find the area and perimeter of a circle.\n    '''\n    area = math.pi*a*a\n    perimeter = 2*math.pi*a\n    return area,perimeter\ndef circle_area_perimeter_square(a,b):\n    '''\n    Write a function to find the area and perimeter of a circle.\n    '''\n    area = math.pi*a*a\n    perimeter = 2*math.pi*a\n    return area,perimeter\ndef rectangle_area_perimeter_square(a,b):\n    '''\n    Write a function to find the area and perimeter of a rectangle.\n    '''\n    area = a*b\n    perimeter = 2*(a+b)\n    return area,perimeter\ndef rectangle_area_perimeter_square_a(a,b):\n    '''\n    Write a function to find the area and perimeter of a rectangle.\n    '''\n    area = a*b\n    perimeter = 2*(a+b)\n    return area,perimeter\ndef circle_area_perimeter_square_a(a,b,c):\n    '''\n    Write a function to find the area and perimeter of a circle.\n    '''\n    area = math.pi*a*a\n    perimeter = 2*math.pi*a\n    return area,perimeter\ndef rectangle_area_perimeter_square_b(a,b):\n    '''\n    Write a function to find the area and perimeter of a rectangle.\n    '''\n    area = a*b\n    perimeter = 2*(a+b)\n    return area,perimeter\ndef circle_area_perimeter_square_b(a,b,c):\n    '''\n    Write a function to find the area and perimeter of a circle.\n    '''\n    area = math.pi*a*a\n    perimeter = 2*math.pi*a\n    return area,perimeter\ndef rectangle_area_perimeter_square_c(a,b):\n    '''\n    Write a function to find the area and perimeter of a rectangle.\n    '''\n    area = a*b\n    perimeter = 2*(a+b)\n    return area,perimeter\ndef circle_area_perimeter_square_c(a,b,c):\n    '''\n    Write a function to find the area and perimeter of a circle.\n    '''\n    area = math.pi*a*a\n    perimeter = 2*math.pi*a\n    return area,perimeter\ndef rectangle_area_perimeter_square_d(a,b):\n    '''\n    Write a function to find the area and perimeter of a rectangle.\n    '''\n    area = a*b\n    perimeter = 2*(a+b)\n    return area,perimeter\ndef circle_area_perimeter_square_d(a,b,c):\n    '''\n    Write a function to find the area and perimeter of a circle.\n    '''\n    area = math.pi*a*a\n    perimeter = 2*math.pi*a\n    return area,perimeter\ndef rectangle_area_perimeter_square_e(a,b):\n    '''\n    Write a function to find the area and perimeter of a rectangle.\n    '''\n    area = a*b\n    perimeter = 2*(a+b)\n    return area,perimeter\ndef circle_area_perimeter_square_e(a,b,c):\n    '''\n    Write a function to find the area and perimeter of a circle.\n    '''\n    area = math.pi*a*a\n    perimeter = 2*math.pi*a\n    return area,perimeter\ndef circle_area_perimeter_square_f(a,b,c):\n    '''\n    Write a function to find the area and perimeter of a circle.\n    '''\n    area = math.pi*a*a\n    perimeter = 2*math.pi*a\n    return area,perimeter\ndef rectangle_area_perimeter_square_f(a,b):\n    '''\n    Write a function to find the area and perimeter of a rectangle.\n    '''\n    area = a*b\n    perimeter = 2*(a+b)\n    return area,perimeter\ndef rectangle_area_perimeter_square_g(a,b):\n    '''\n    Write a function to find the area and perimeter of a rectangle.\n    '''\n    area = a*b\n    perimeter = 2*(a+b)\n    return area,perimeter\ndef circle_area_perimeter_square_g(a,b,c):\n    '''\n    Write a function to find the area and perimeter of a circle.\n    '''\n    area = math.pi*a*a\n    perimeter = 2*math.pi*a\n    return area,perimeter\ndef rectangle_area_perimeter_square_h(a,b):\n    '''\n    Write a function to find the area and perimeter of a rectangle.\n    '''\n    area = a*b\n    perimeter = 2*(a+b)\n    return area,perimeter\ndef circle_area_perimeter_square_h(a,b,c):\n    '''\n    Write a function to find the area and perimeter of a circle.\n    '''\n    area = math.pi*a*a\n    perimeter = 2*math.pi*a\n    return area,perimeter\ndef rectangle_area_perimeter_square_i(a,b):\n    '''\n    Write a function to find the area and perimeter of a rectangle.\n    '''\n    area = a*b\n    perimeter = 2*(a+b)\n    return area,perimeter\ndef circle_area_perimeter_square_i(a,b,c):\n    '''\n    Write a function to find the area and perimeter of a circle.\n    '''\n    area = math.pi*a*a\n    perimeter = 2*math.pi*a\n    return area,perimeter\ndef rectangle_area_perimeter_square_j(a,b):\n    '''\n    Write a function to find the area and perimeter of a rectangle.\n    '''\n    area = a*b\n    perimeter = 2*(a+b)\n    return area,perimeter\ndef circle_area_perimeter_square_j(a,b,c):\n    '''\n    Write a function to find the area and perimeter of a circle.\n    '''\n    area = math.pi*a*a\n    perimeter = 2*math.pi*a",
        "num_ids": 24
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    s = (1 + math.sqrt(5))/2\n    n = a*s\n    return n\n    \ndef average(n):\n    '''\n    Write a function to compute the average of a list of numbers.\n    '''\n    summation = 0\n    for i in range(len(n)):\n        summation += n[i]\n    return summation/len(n)\n    \ndef average_list(n):\n    '''\n    Write a function to compute the average of a list of numbers.\n    '''\n    summation = 0\n    for i in range(len(n)):\n        summation += n[i]\n    return summation/len(n)\n    \ndef average_list_even(n):\n    '''\n    Write a function to compute the average of a list of numbers.\n    '''\n    summation = 0\n    for i in range(len(n)):\n        if i%2==0:\n            summation += n[i]\n    return summation/len(n)\n    \ndef average_list_even2(n):\n    '''\n    Write a function to compute the average of a list of numbers.\n    '''\n    summation = 0\n    for i in range(len(n)):\n        if i%2==0:\n            summation += n[i]\n    return summation/len(n)\n    \ndef sum_pairs(nums, target):\n    '''\n    Write a function that returns the first pair of numbers in a list, whose sum is equal to a target value.\n    '''\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            if nums[i] + nums[j] == target:\n                return nums[i], nums[j]\n    return -1\n    \ndef sum_pairs_2(nums, target):\n    '''\n    Write a function that returns the first pair of numbers in a list, whose sum is equal to a target value.\n    '''\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            if nums[i] + nums[j] == target:\n                return nums[i], nums[j]\n    return -1\n    \ndef sum_pairs_3(nums, target):\n    '''\n    Write a function that returns the first pair of numbers in a list, whose sum is equal to a target value.\n    '''\n    nums.sort()\n    for i in range(len(nums)):\n        j = i + 1\n        while j < len(nums):\n            if nums[i] + nums[j] == target:\n                return nums[i], nums[j]\n            j += 1\n    return -1\n    \ndef sum_pairs_4(nums, target):\n    '''\n    Write a function that returns the first pair of numbers in a list, whose sum is equal to a target value.\n    '''\n    sums = {}\n    for num in nums:\n        if target - num in sums:\n            return num, target - num\n        sums[num] = True\n    return -1\n    \ndef sum_pairs_5(nums, target):\n    '''\n    Write a function that returns the first pair of numbers in a list, whose sum is equal to a target value.\n    '''\n    nums = sorted(nums)\n    i = 0\n    j = len(nums) - 1\n    while i < j:\n        if nums[i] + nums[j] == target:\n            return nums[i], nums[j]\n        elif nums[i] + nums[j] < target:\n            i += 1\n        elif nums[i] + nums[j] > target:\n            j -= 1\n    return -1\n    \ndef max_sum_subset(nums):\n    '''\n    Write a function that takes in a list of non-negative integers and returns a list of integers representing the maximum sum of non-empty subsets possible.\n    '''\n    if len(nums) == 0:\n        return []\n    nums.sort()\n    max_sum = nums[0]\n    subset = []\n    for i in range(len(nums)):\n        if nums[i] >= max_sum:\n            max_sum = nums[i]\n            subset = nums[i]\n    return subset\n    \ndef max_sum_subset_2(nums):\n    '''\n    Write a function that takes in a list of non-negative integers and returns a list of integers representing the maximum sum of non-empty subsets possible.\n    '''\n    if len(nums) == 0:\n        return []\n    nums.sort()\n    n = len(nums)\n    result = []\n    max_sum = nums[0]\n    for i in range(1,n):\n        subset = nums[i]\n        if subset > max_sum:\n            max_sum = subset\n            result = subset\n    return result\n    \ndef max_sum_subset_3(nums):\n    '''\n    Write a function that takes in a list of non-negative integers and returns a list of integers representing the maximum sum of non-empty subsets possible.\n    '''\n    if len(nums) == 0:\n        return []\n    nums.sort()\n    n = len(nums)\n    result = []\n    max_sum = nums[0]\n    for i in range(1,n):\n        subset = nums[i]\n        if subset > max_sum:\n            max_sum = subset\n            result = subset\n    return result\n    \ndef max_sum_subset_4(nums):\n    '''\n    Write a function that takes in a list of non-negative integers and returns a list of integers representing the maximum sum of non-empty subsets possible.\n    '''\n    if len(nums) == 0:\n        return []\n    nums.sort()\n    n = len(nums)\n    result = []\n    max_sum = nums[0]\n    for i in range(1,n):\n        subset = nums[i]\n        if subset > max_sum:\n            max_sum = subset\n            result = subset\n    return result\n    \ndef max_sum_subset_5(nums):\n    '''\n    Write a function that takes in a list of non-negative integers and returns a list of integers representing the maximum sum of non-empty subsets possible.\n    '''\n    if len(nums) == 0:\n        return []\n    nums.sort()\n    n = len(nums)\n    result = []\n    max_sum = nums[0]\n    for i in range(1,n):\n        subset = nums[i]\n        if subset > max_sum:\n            max_sum = subset\n            result = subset\n    return result\n    \ndef max_subset(nums):\n    '''\n    Write a function that takes in a list of non-negative integers and returns the maximum sum of a subset of non-negative integers.\n    '''\n    if len(nums) == 0:\n        return []\n    nums.sort()\n    n = len(nums)\n    result = []\n    max_sum = nums[0]\n    for i in range(1,n):\n        subset = nums[i]\n        if subset > max_sum:\n            max_sum = subset\n            result = subset\n    return result\n    \ndef max_subset_2(nums):\n    '''\n    Write a function that takes in a list of non-negative integers and returns the maximum sum of a subset of non-negative integers.\n    '''\n    if len(nums) == 0:\n        return []\n    nums.sort()\n    n = len(nums)\n    result = []\n    max_sum = nums[0]\n    for i in range(1,n):\n        subset = nums[i]\n        if subset > max_sum:\n            max_sum = subset\n            result = subset\n    return result\n    \ndef max_subset_3(nums):\n    '''\n    Write a function that takes in a list of non-negativ",
        "num_ids": 17
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return math.sqrt(3)*a\n",
        "num_ids": 13
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = a * 5\n    print(perimeter)\n    return perimeter\ndef perimeter_trapezoid(a, b):\n    '''\n    Write a function to find the perimeter of a trapezoid from the length of its two sides.\n    '''\n    perimeter = (a + b) * 2\n    print(perimeter)\n    return perimeter\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a square from its length.\n    '''\n    perimeter = a * 4\n    print(perimeter)\n    return perimeter\ndef perimeter_rectangle(a, b):\n    '''\n    Write a function to find the perimeter of a rectangle from its lengths.\n    '''\n    perimeter = a + b\n    print(perimeter)\n    return perimeter\ndef perimeter_circle(a):\n    '''\n    Write a function to find the perimeter of a circle from its radius.\n    '''\n    perimeter = math.pi * a\n    print(perimeter)\n    return perimeter\ndef find_perimeter_rectangle(a, b):\n    '''\n    Write a function to find the perimeter of a rectangle from its two sides.\n    '''\n    return (a * 2) + (b * 2)\ndef find_perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a square from its length.\n    '''\n    return a * 4\ndef find_perimeter_circle(a):\n    '''\n    Write a function to find the perimeter of a circle from its radius.\n    '''\n    return math.pi * a * 2\ndef find_perimeter_triangle(a, b):\n    '''\n    Write a function to find the perimeter of a triangle from its base and height.\n    '''\n    return (a + b) * 2\ndef find_perimeter_trapezoid(a, b, c):\n    '''\n    Write a function to find the perimeter of a trapezoid from its base, height and slant height.\n    '''\n    return (a + b) + (c * 2)\ndef find_perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a pentagon from its base.\n    '''\n    return (5 * a)\ndef find_perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a hexagon from its base.\n    '''\n    return (6 * a)\ndef find_perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a octagon from its base.\n    '''\n    return (8 * a)\ndef find_perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a heptagon from its base.\n    '''\n    return (10 * a)\ndef find_perimeter_n_pies(n):\n    '''\n    Write a function to find the perimeter of a n-pies, where n is an integer.\n    '''\n    return n * 6\ndef find_perimeter_triangle_recursive(a, b, c):\n    '''\n    Write a function to find the perimeter of a triangle from its base, height and slant height.\n    '''\n    if a == b or b == c:\n        return 0\n    return 1/2 * ((a + b) + (a + c) + (b + c))\ndef find_perimeter_square_recursive(a):\n    '''\n    Write a function to find the perimeter of a square from its length.\n    '''\n    if a == 1:\n        return a\n    return a * 4\ndef find_perimeter_rectangle_recursive(a, b):\n    '''\n    Write a function to find the perimeter of a rectangle from its lengths.\n    '''\n    if a == 1 or b == 1:\n        return 0\n    return a * 2 + b * 2\ndef find_perimeter_circle_recursive(a):\n    '''\n    Write a function to find the perimeter of a circle from its radius.\n    '''\n    if a == 0:\n        return 0\n    return math.pi * a * 2\ndef find_perimeter_triangle_recursive(a, b, c):\n    '''\n    Write a function to find the perimeter of a triangle from its base, height and slant height.\n    '''\n    if a == 0 or b == 0 or c == 0:\n        return 0\n    return 1/2 * ((a + b) + (a + c) + (b + c))\ndef find_perimeter_square_recursive(a):\n    '''\n    Write a function to find the perimeter of a square from its length.\n    '''\n    if a == 0:\n        return 0\n    return a * 4\ndef find_perimeter_rectangle_recursive(a, b):\n    '''\n    Write a function to find the perimeter of a rectangle from its lengths.\n    '''\n    if a == 0 or b == 0:\n        return 0\n    return a * 2 + b * 2\ndef find_perimeter_circle_recursive(a):\n    '''\n    Write a function to find the perimeter of a circle from its radius.\n    '''\n    if a == 0:\n        return 0\n    return math.pi * a * 2\ndef find_perimeter_triangle_recursive(a, b, c):\n    '''\n    Write a function to find the perimeter of a triangle from its base, height and slant height.\n    '''\n    if a == 0 or b == 0 or c == 0:\n        return 0\n    return 1/2 * ((a + b) + (a + c) + (b + c))\ndef find_perimeter_square_recursive(a):\n    '''\n    Write a function to find the perimeter of a square from its length.\n    '''\n    if a == 0:\n        return 0\n    return a * 4\ndef find_perimeter_rectangle_recursive(a, b):\n    '''\n    Write a function to find the perimeter of a rectangle from its lengths.\n    '''\n    if a == 0 or b == 0:\n        return 0\n    return a * 2 + b * 2\ndef find_perimeter_circle_recursive(a):\n    '''\n    Write a function to find the perimeter of a circle from its radius.\n    '''\n    if a == 0:\n        return 0\n    return math.pi * a * 2\ndef find_perimeter_triangle_recursive(a, b, c):\n    '''\n    Write a function to find the perimeter of a triangle from its base, height and slant height.\n    '''\n    if a == 0 or b == 0 or c == 0:\n        return 0\n    return 1/2 * ((a + b) + (a + c) + (b + c))\ndef find_perimeter_square_recursive(a):\n    '''\n    Write a function to find the perimeter of a square from its length.\n    '''\n    if a == 0:\n        return 0\n    return a * 4\ndef find_perimeter_rectangle_recursive(a, b):\n    '''\n    Write a function to find the perimeter of a rectangle from its lengths.\n    '''\n    if a == 0 or b == 0:\n        return 0\n    return a * 2 + b * 2\ndef find_perimeter_circle_recursive(a):\n    '''\n    Write a function to find the perimeter of a circle from its radius.\n    '''\n    if a == 0:\n        return 0\n    return math.pi * a * 2\ndef find_perimeter_triangle_recursive(a, b, c):\n    '''\n    Write a function to find the perimeter of a triangle from its base, height and slant height.\n    '''\n    if a == 0 or b == 0 or c == 0:\n        return 0\n    return 1/2 * ((a + b) + (a + c) + (b + c))\ndef find_perimeter_square_recursive(a):\n    '''\n    Write a function to find the perimeter of a square from its length.\n    '''\n    if a == 0:\n        return 0\n    return a * 4\ndef find_perimeter_rectangle_recursive(a, b):\n    '''\n    Write a function to find the perimeter of a rectangle from its lengths.\n    '''\n    if a == 0 or b == ",
        "num_ids": 11
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*((a-2)/2) + 1) * 2\n",
        "num_ids": 20
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if s=='':\n        return 0\n    return 1+count_occurance(s[1:]) if s[0]=='s' else count_occurance(s[1:])\n",
        "num_ids": 48
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='s' and s[i+1] == 'd' and s[i+2] == 't':\n            count += 1\n    return count\n    \n",
        "num_ids": 63
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count(\"std\")\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    cnt = 0\n    n = len(s)\n    for i in range(n):\n        if s[i] == 'd' and s[i+1] == 't' and s[i+2] == 'a':\n            cnt += 1\n    return cnt\n",
        "num_ids": 69
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    string = s.lower().replace(' ','')\n    \n    count = 0\n    for i in string:\n        if i =='s' and i == 't' and i == 'd':\n            count += 1\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    occ = 0\n    for i in s:\n        if i == 'a' or i == 'd' or i == 'g' or i == 'o' or i =='s' or i == 't':\n            occ += 1\n    return occ\n    \ns = 'asdsgdcda'\nprint(count_occurance(s))\n",
        "num_ids": 85
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s':\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if s.count('std')>0:\n        return s.count('std')\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    expected_type = set()\n    actual_type = set()\n    for i in test_tuple:\n        actual_type.add(type(i))\n    if len(actual_type) > 1:\n        print(\"Error: expected type for all elements is same\")\n        return False\n    if len(actual_type) == 1:\n        expected_type.add(actual_type.pop())\n    if expected_type == actual_type:\n        return True\n    else:\n        print(\"Error: expected type for all elements is same\")\n        return False\n",
        "num_ids": 133
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple)==0:\n        return True\n    else:\n        if not all(isinstance(i, type(test_tuple[0])) for i in test_tuple):\n            return False\n        return True\n",
        "num_ids": 60
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    flag = False\n    for data in test_tuple:\n        if type(data) is not type(test_tuple[0]):\n            flag = True\n            break\n    if flag:\n        print(\"All data type are different.\")\n    else:\n        print(\"All data type are same.\")\n",
        "num_ids": 73
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    a = test_tuple[0]\n    b = test_tuple[1]\n    c = test_tuple[2]\n    d = test_tuple[3]\n    if type(a) == type(b) == type(c) == type(d):\n        print(\"All data types are same\")\n    else:\n        print(\"All data types are not same\")\n",
        "num_ids": 93
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    from collections import namedtuple\n    test_tuple = (1, 2, 3, 4)\n    Type_test = namedtuple('Test_tuple', ['test_list'])\n    new_tuple = Type_test(test_tuple)\n    print(type(new_tuple))\n    if type(new_tuple) == tuple:\n        print('\\nYes!')\n    else:\n        print('\\nNo!')\n",
        "num_ids": 109
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return len(set(type(x) for x in test_tuple)) == 1\n",
        "num_ids": 23
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        raise ValueError('empty tuple')\n    if not isinstance(test_tuple, tuple):\n        raise ValueError('not a tuple')\n    for elem in test_tuple:\n        if not isinstance(elem, tuple):\n            raise ValueError('not a tuple')\n    for sub_tuple in test_tuple:\n        for sub_elem in sub_tuple:\n            if not isinstance(sub_elem, (int, float, bool, str)):\n                raise ValueError('not a valid data type')\n    return True\n",
        "num_ids": 145
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) < 1:\n        return False\n    type_dict = {}\n    for i in range(len(test_tuple)):\n        type_dict[i] = type(test_tuple[i])\n    if len(set(type_dict.values())) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 88
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    d_type = []\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) == type(test_tuple[0]):\n            d_type.append(type(test_tuple[i]))\n        else:\n            return False\n    if type(d_type[0]) == str:\n        return False\n    else:\n        return True\n",
        "num_ids": 99
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # your code here\n    # i used len to check the length of the tuple.\n    # return type(test_tuple[0]) == type(test_tuple[1]) == type(test_tuple[2])\n    # if len(test_tuple)!= 3:\n    #     return False\n",
        "num_ids": 75
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    total = 0\n    for i in arr:\n        total = total + 1\n",
        "num_ids": 21
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    curr = 0\n    curr_max = 0\n    for i in range(n):\n        if arr[i] == x:\n            curr += 1\n        else:\n            curr = 0\n        if curr > curr_max:\n            curr_max = curr\n    return curr_max >= n/2\n",
        "num_ids": 82
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # Compute the count of each element in the array.\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count = count + 1\n    \n    # If the majority element is not the element at index 0, return False.\n    if count < n/2:\n        return False\n    \n    # Otherwise, return True.\n    else:\n        return True\n",
        "num_ids": 100
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if(n == 0):\n        return False\n    count = 0\n    for i in range(n):\n        if(arr[i] == x):\n            count += 1\n    if(count > (n/2)):\n        return True\n    else:\n        return False\n",
        "num_ids": 68
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Create a counter and compare with the majority element\n    count = 0\n    major = arr[0]\n    for i in range(n):\n        if major == arr[i]:\n            count += 1\n    # Check if count is equal to the majority element\n    if count > n/2:\n        return True\n    return False\n",
        "num_ids": 79
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    arr = np.array(arr)\n    if x in arr:\n        occurances = 0\n        for i in arr:\n            if i == x:\n                occurances += 1\n        if occurances >= n / 2:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 75
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    hashmap = {}\n    for i in range(n):\n        if hashmap.get(arr[i]) == None:\n            hashmap[arr[i]] = 1\n        else:\n            hashmap[arr[i]] += 1\n    for i in range(n):\n        if hashmap[arr[i]] > n/2:\n            return True\n    return False\n",
        "num_ids": 90
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n",
        "num_ids": 33
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # edge case\n    if n == 0:\n        return False\n",
        "num_ids": 18
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # number = int(input())\n    # count = 0\n    # while number:\n    #     count += number & 1\n    #     number >>= 1\n    # print(count)\n",
        "num_ids": 47
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return n & -n\n",
        "num_ids": 9
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    n = n\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += 1\n        n = n & (n-1)\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    c = 0\n    while n > 0:\n        if n & 1 == 1:\n            c += 1\n        n = n >> 1\n    return c\n",
        "num_ids": 39
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count=0\n    while n!=0:\n        count+=1\n        n&=n-1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # your code here\n    no_of_bits=0\n    while n:\n        no_of_bits+=n&1\n        n=n>>1\n    return no_of_bits\n",
        "num_ids": 48
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n):\n        count += 1\n        n = n & (n-1)\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    #code here\n    count=0\n    while(n!=0):\n        count+=n&1\n        n>>=1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    str = str.strip()\n    final_string = \"\"\n",
        "num_ids": 19
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[0::2]\n    \ndef main():\n    print(\"Input: The string is:\",odd_values_string('welcome'))\n    print(\"Expected Output: The string after removing the odd values is:\",odd_values_string('welcme'))\n",
        "num_ids": 68
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    # write your python function here\n    return ''.join(ch for i, ch in enumerate(str) if i%2==0)\n    \ndef double_characters(str):\n    '''\n    Write a python function to replace every second character with a double character.\n    '''\n    \n    # write your python function here\n    return str[::2]\n    \ndef odd_even_string(str):\n    '''\n    Write a python function to split the string and join the words with'' and reverse the resultant string.\n    '''\n    \n    # write your python function here\n    return''.join(str.split()[::2])[::-1]\n",
        "num_ids": 31
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(0, len(str)):\n        if i%2!= 0:\n            new_str += str[i]\n    return new_str\n",
        "num_ids": 49
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str=''\n    for index in range(0,len(str)):\n        if index%2==0:\n            new_str=new_str+str[index]\n    return new_str\n    \ndef cube(num):\n    '''\n    Write a python function to calculate the cube of the given number.\n    '''\n    return num*num*num\n    \ndef char_count(str,char):\n    '''\n    Write a python function to count the number of characters in a given string.\n    '''\n    count=0\n    for index in range(0,len(str)):\n        if str[index]==char:\n            count=count+1\n    return count\n    \ndef swap_case(str):\n    '''\n    Write a python function to swap the case of all characters in a string.\n    '''\n    new_str=''\n    for index in range(0,len(str)):\n        if index%2==0:\n            new_str=new_str+str[index].swapcase()\n        else:\n            new_str=new_str+str[index]\n    return new_str\n    \ndef string_rotation(str1,str2):\n    '''\n    Write a python function to check if a string is rotation of another given string.\n    '''\n    if len(str1)==len(str2) and str1==str2[::-1]:\n        return True\n    else:\n        return False\n    \ndef string_difference(str1,str2):\n    '''\n    Write a python function to find the difference between two given strings.\n    '''\n    if len(str1)!=len(str2):\n        return False\n    else:\n        new_str=''\n        for index in range(0,len(str1)):\n            if str1[index]!=str2[index]:\n                new_str=new_str+str1[index]\n        return new_str\n    \ndef string_intersection(str1,str2):\n    '''\n    Write a python function to find the intersection of two given strings.\n    '''\n    if len(str1)!=len(str2):\n        return False\n    else:\n        new_str=''\n        for index in range(0,len(str1)):\n            if str1[index]==str2[index]:\n                new_str=new_str+str1[index]\n        return new_str\n    \ndef string_replace(str1,str2,char):\n    '''\n    Write a python function to replace all occurrences of a character in a string with another character.\n    '''\n    if len(str1)!=len(str2):\n        return False\n    else:\n        new_str=''\n        for index in range(0,len(str1)):\n            if str1[index]==str2[index]:\n                new_str=new_str+char\n            else:\n                new_str=new_str+str1[index]\n        return new_str\n    \ndef reverse_string(str1):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    new_str=''\n    for index in range(len(str1)-1,-1,-1):\n        new_str=new_str+str1[index]\n    return new_str\n    \ndef string_anagram(str1,str2):\n    '''\n    Write a python function to find if two given strings are anagram or not.\n    '''\n    if len(str1)!=len(str2):\n        return False\n    else:\n        new_str=''\n        for index in range(0,len(str1)):\n            if str1[index]!=str2[index]:\n                new_str=new_str+str1[index]\n        if len(new_str)==0:\n            return True\n        else:\n            return False\n            \ndef string_palindrome(str1):\n    '''\n    Write a python function to check if a given string is palindrome or not.\n    '''\n    if len(str1)%2==0:\n        middle=len(str1)//2\n        first_str=str1[0:middle]\n        last_str=str1[middle:]\n        if first_str==last_str[::-1]:\n            return True\n        else:\n            return False\n    else:\n        middle=len(str1)//2\n        first_str=str1[0:middle]\n        last_str=str1[middle+1:]\n        if first_str==last_str[::-1]:\n            return True\n        else:\n            return False\n            \ndef string_repeating(str1):\n    '''\n    Write a python function to check if a given string contains any repeating characters or not.\n    '''\n    if len(str1)%2==0:\n        middle=len(str1)//2\n        first_str=str1[0:middle]\n        last_str=str1[middle+1:]\n        if first_str in last_str or last_str in first_str:\n            return True\n        else:\n            return False\n    else:\n        middle=len(str1)//2\n        first_str=str1[0:middle]\n        last_str=str1[middle+1:]\n        if first_str in last_str:\n            return True\n        else:\n            return False\n            \ndef string_reverse(str1):\n    '''\n    Write a python function to reverse the given string.\n    '''\n    if len(str1)%2==0:\n        middle=len(str1)//2\n        first_str=str1[0:middle]\n        last_str=str1[middle:]\n        new_str=last_str+first_str[::-1]\n        return new_str\n    else:\n        middle=len(str1)//2\n        first_str=str1[0:middle]\n        last_str=str1[middle+1:]\n        new_str=first_str+last_str[::-1]\n        return new_str\n    \ndef str_count(str1,str2):\n    '''\n    Write a python function to count the occurrences of a given string in another string.\n    '''\n    if str1 not in str2:\n        return -1\n    else:\n        count=0\n        for index in range(0,len(str2)):\n            if str2[index]==str1:\n                count=count+1\n        return count\n    \ndef string_atleast_one_odd(str):\n    '''\n    Write a python function to find if a given string contains atleast one string which contains an odd number of characters.\n    '''\n    count=0\n    for index in range(0,len(str)):\n        if str[index]%2!=0:\n            count=count+1\n    if count==0:\n        return False\n    else:\n        return True\n    \ndef is_palindrome(str):\n    '''\n    Write a python function to check if a given string is a palindrome or not.\n    '''\n    if len(str)%2==0:\n        middle=len(str)//2\n        first_str=str[0:middle]\n        last_str=str[middle:]\n        if first_str==last_str[::-1]:\n            return True\n        else:\n            return False\n    else:\n        middle=len(str)//2\n        first_str=str[0:middle]\n        last_str=str[middle+1:]\n        if first_str==last_str[::-1]:\n            return True\n        else:\n            return False\n            \ndef string_title(str):\n    '''\n    Write a python function to title case the given string.\n    '''\n    new_str=''\n    for index in range(0,len(str)):\n        if index==0:\n            new_str=new_str+str[index].capitalize()\n        else:\n            new_str=new_str+str[index]\n    return new_str\n    \ndef string_reverse_alternate(str):\n    '''\n    Write a python function to reverse alternate characters of a string.\n    '''\n    new_str=''\n    count=0\n    fo",
        "num_ids": 16
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    l = list(str)\n    odd_char = []\n    odd_char_s = []\n    for i in range(0,len(l)):\n        if i%2!=0:\n            odd_char.append(l[i])\n    for i in range(0,len(odd_char)):\n        odd_char_s.append(odd_char[i].strip())\n    return ''.join(odd_char_s)\nprint(odd_values_string('abcde'))\n",
        "num_ids": 122
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join(s[i] for i in range(0,len(str),2))\n",
        "num_ids": 26
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str.replace(\"a\", \"\") \\\n          .replace(\"e\", \"\") \\\n          .replace(\"i\", \"\") \\\n          .replace(\"o\", \"\") \\\n          .replace(\"u\", \"\")\n    ",
        "num_ids": 54
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join(c for i, c in enumerate(str) if i%2 == 0)\n",
        "num_ids": 27
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    list1 = list(str)\n    for i in range(len(list1)):\n        if(i % 2 == 0):\n            list1.pop(i)\n    return ''.join(list1)\n    # Your Code here\n",
        "num_ids": 59
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\nprint(min_of_three(2,1,5))\n",
        "num_ids": 66
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c:\n        return a\n    elif b<a<c:\n        return b\n    else:\n        return c\n    \ndef product_of_three(a,b,c):\n    '''\n    Write a function to find product of three numbers.\n    '''\n    p = a*b*c\n    return p\n    \ndef even_or_odd(n):\n    '''\n    Write a function that checks whether a number is even or odd.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c:\n        return a\n    elif b<a<c:\n        return b\n    else:\n        return c\n",
        "num_ids": 37
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<c:\n        return b\n    else:\n        return c\n",
        "num_ids": 37
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c:\n        return a\n    elif b<a<c:\n        return b\n    else:\n        return c\n",
        "num_ids": 37
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c: \n        return a\n    if a<c<b: \n        return c\n    if a<b<c: \n        return b\n",
        "num_ids": 44
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b < c:\n        return a\n    elif a < c < b:\n        return c\n    elif b < c < a:\n        return b\n    else:\n        print('None of the numbers are less than their respective other')\n",
        "num_ids": 62
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n",
        "num_ids": 41
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\nprint(min_of_three(3,4,5))\n",
        "num_ids": 28
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "num_ids": 13
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Python3 program to check if all bits are\n    # unset in the given range.\n    \n    # Initialize low and high with\n    # 0\n    \n    # low and high with 0 and length of range\n    low = 0\n    high = l - 1\n    \n    # Initialize range\n    \n    # The length of range\n    range_length = r - l + 1\n    \n    # Initialize count of\n    # bits set\n    \n    # Initialize count of bits set\n    count = 0\n    \n    # If there are no bits set then return\n    # true\n    \n    # Loop till range length is\n    # less than or equal to zero\n    while range_length >= 0:\n        # If the current bit is set\n        if (arr[low] & 0x1) == 0:\n            # Increase low and decrease range_length\n            low = low + 1\n            range_length = range_length - 1\n        # If the current bit is not set\n        else:\n            # Decrease range_length\n            range_length = range_length - 1\n            \n        # Increment count of bits set\n        count = count + 1\n        \n    # Check if all bits are set\n    return(count == n)\ndef set_Bit_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether a bit is set in the given range or not.\n    '''\n    # Python3 program to check\n    # whether a bit is set in the given\n    # range\n    \n    # Initialize low and high with\n    # 0\n    \n    # low and high with 0 and length of range\n    low = 0\n    high = l - 1\n    \n    # Initialize range\n    \n    # The length of range\n    range_length = r - l + 1\n    \n    # Initialize count of\n    # bits set\n    \n    # Initialize count of bits set\n    count = 0\n    \n    # If there are no bits set then return\n    # true\n    \n    # Loop till range length is\n    # less than or equal to zero\n    while range_length >= 0:\n        # If the current bit is set\n        if (arr[low] & 0x1) == 1:\n            # Increase low and decrease range_length\n            low = low + 1\n            range_length = range_length - 1\n        # If the current bit is not set\n        else:\n            # Decrease range_length\n            range_length = range_length - 1\n            \n        # Increment count of bits set\n        count = count + 1\n        \n    # Check if a bit is set\n    return(count == n)\ndef No_of_Set_Bits_In_The_Range(n,l,r):\n    '''\n    Write a python function to count the\n    number of bits set in the given range.\n    '''\n    # Python3 program to check\n    # whether a bit is set in the given\n    # range\n    \n    # Initialize low and high with\n    # 0\n    \n    # low and high with 0 and length of range\n    low = 0\n    high = l - 1\n    \n    # Initialize range\n    \n    # The length of range\n    range_length = r - l + 1\n    \n    # Initialize count of\n    # bits set\n    \n    # Initialize count of bits set\n    count = 0\n    \n    # Loop till range length is\n    # less than or equal to zero\n    while range_length >= 0:\n        # If the current bit is set\n        if (arr[low] & 0x1) == 1:\n            # Increase low and decrease range_length\n            low = low + 1\n            range_length = range_length - 1\n        # If the current bit is not set\n        else:\n            # Decrease range_length\n            range_length = range_length - 1\n            \n        # Increment count of bits set\n        count = count + 1\n        \n    # Check if a bit is set\n    return(count)\ndef Bit_Of_Set_Bits_In_The_Range(n,l,r):\n    '''\n    Write a python function to check whether any bits are set in the given range.\n    '''\n    # Python3 program to check\n    # whether any bit is set in the given\n    # range.\n    \n    # Initialize low and high with\n    # 0\n    \n    # low and high with 0 and length of range\n    low = 0\n    high = l - 1\n    \n    # Initialize range\n    \n    # The length of range\n    range_length = r - l + 1\n    \n    # Initialize count of\n    # bits set\n    \n    # Initialize count of bits set\n    count = 0\n    \n    # Loop till range length is\n    # less than or equal to zero\n    while range_length >= 0:\n        # If the current bit is set\n        if (arr[low] & 0x1) == 1:\n            # Increase low and decrease range_length\n            low = low + 1\n            range_length = range_length - 1\n        # If the current bit is not set\n        else:\n            # Decrease range_length\n            range_length = range_length - 1\n            \n        # Increment count of bits set\n        count = count + 1\n        \n    # Check if any bit is set\n    if(count!= 0):\n        return(\"YES\")\n    else:\n        return(\"NO\")\ndef Bit_Of_Unset_Bits_In_The_Range(n,l,r):\n    '''\n    Write a python function to check whether any bits are unset in the given range.\n    '''\n    # Python3 program to check\n    # whether any bit is unset in the given\n    # range.\n    \n    # Initialize low and high with\n    # 0\n    \n    # low and high with 0 and length of range\n    low = 0\n    high = l - 1\n    \n    # Initialize range\n    \n    # The length of range\n    range_length = r - l + 1\n    \n    # Initialize count of\n    # bits set\n    \n    # Initialize count of bits set\n    count = 0\n    \n    # Loop till range length is\n    # less than or equal to zero\n    while range_length >= 0:\n        # If the current bit is set\n        if (arr[low] & 0x1) == 0:\n            # Increase low and decrease range_length\n            low = low + 1\n            range_length = range_length - 1\n        # If the current bit is not set\n        else:\n            # Decrease range_length\n            range_length = range_length - 1\n            \n        # Increment count of bits set\n        count = count + 1\n        \n    # Check if any bit is set\n    if(count!= 0):\n        return(\"YES\")\n    else:\n        return(\"NO\")\ndef Bit_Of_Zero_Bits_In_The_Range(n,l,r):\n    '''\n    Write a python function to check whether any bits are set in the given range.\n    '''\n    # Python3 program to check\n    # whether any bit is set in the given\n    # range.\n    \n    # Initialize low and high with\n    # 0\n    \n    # low and high with 0 and length of range\n    low = 0\n    high = l - 1\n    \n    # Initialize range\n    \n    # The length of range\n    range_length = r - l + 1\n    \n    # Initialize count of\n    # bits set\n    \n    # Initialize count of bits set\n    count = 0\n    \n    # Loop till range length is\n    # less than or equal to zero\n    while range_length >= 0:\n        # If the current bit is set\n        if (arr[low] & 0x1) == 0:\n            # Increase low and decrease range_length\n            low = low + 1\n            range_length = range_length - 1\n        # If the current bit is not set\n        else:\n            # Decrease range_length\n            range_length = range_length - 1\n            \n        # Increment count of bits set\n        count = count + 1\n        \n    # Check if any bit is set\n    if(count!= 0):\n        return(\"YES\")\n    else:\n        return(\"NO\")\ndef print_N_Bit_Value(n,low,high):\n    '''\n    Write a pytho",
        "num_ids": 8
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    if (r - l + 1) % 2!= 0:\n        return False\n    \n    if (n & (2**(r-l+1) - 1)) == 0:\n        return False\n    return True\n    \ndef all_Bits_Set_In_The_Range_One_Step(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (r - l + 1) % 2!= 0:\n        return False\n    if (n & (2**(r-l+1) - 1)) == 0:\n        return False\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r < l:\n        return 0\n    if (l < 0) or (r < 0):\n        raise ValueError\n    return ((2**n)-1) & ~((2**l)-1) & ~((2**r)-1)\n",
        "num_ids": 60
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n < l or n > r:\n        return False\n    return (n & (n-1))==0\n",
        "num_ids": 30
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(n+1):\n        if((1<<i)&l)==0 and (1<<i)&r==0:\n            return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n = int(n)\n    l = int(l)\n    r = int(r)\n    for i in range(l,r+1):\n        if n&i!= 0:\n            return False\n    return True\n",
        "num_ids": 57
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #your code here\n    return ((r-l+1)*1) == ((1<<n)-(1<<(n-1)))\n",
        "num_ids": 34
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # t = 0\n    # for i in range(n):\n    #     if l & (1<<i) == 0:\n    #         t = t + 1\n",
        "num_ids": 42
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    x=bin(l)[2:]\n    y=bin(r)[2:]\n    z=x[::-1]\n    print(z)\n    print(len(z))\n    count=0\n    #print(len(z))\n    for i in range(len(z)):\n        if z[i]=='1':\n            count=count+1\n    if count>=n:\n        print(True)\n    else:\n        print(False)\n    \n",
        "num_ids": 116
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    while(n>=1):\n        n=n>>1\n        l=(l<<1)&0xffffffff\n    while(n>0):\n        n=n>>1\n        r=(r<<1)&0xffffffff\n    print(r,l)\n    return r!=l\n",
        "num_ids": 74
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    positive_indexes = []\n    negative_indexes = []\n    # list of indexes of positive elements\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            positive_indexes.append(i)\n    # list of indexes of negative elements\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            negative_indexes.append(i)\n    # print(positive_indexes)\n    # print(negative_indexes)\n    # re-arrange positive elements\n    new_arr = []\n    for i in range(n):\n        new_arr.append(arr[positive_indexes[i]])\n    # re-arrange negative elements\n    for i in range(n, len(arr)):\n        new_arr.append(arr[negative_indexes[i - n]])\n    # return new array\n    return new_arr\n",
        "num_ids": 220
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos = 0\n    neg = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            pos += 1\n            arr[i], arr[neg] = arr[neg], arr[i]\n            neg += 1\n    if neg < pos:\n        arr[neg:] = arr[neg:][::-1]\n    return arr\n",
        "num_ids": 90
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n > len(arr) or n < 1:\n        return\n    if n == 1:\n        return arr\n    for i in range(n):\n        if arr[i] < 0:\n            index = i\n            break\n",
        "num_ids": 57
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negs, pos = 0, 0\n    for i in range(n):\n        if arr[i] < 0:\n            negs += 1\n        else:\n            pos += 1\n    \n    for i in range(n):\n        if i < negs:\n            arr[i] = -arr[i]\n        else:\n            arr[i] = arr[i]\n    \n    for i in range(n, 2*n):\n        if i > pos:\n            arr[i] = -arr[i]\n",
        "num_ids": 126
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n == 0:\n        return\n",
        "num_ids": 12
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if len(arr) == 0 or n == 0:\n        return arr\n",
        "num_ids": 20
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Write your function here\n    pos, neg = 0, 0\n    while neg < n:\n        if arr[neg] > 0:\n            if pos == neg:\n                temp = arr[neg]\n                arr[neg] = arr[pos]\n                arr[pos] = temp\n            else:\n                pos += 1\n                temp = arr[neg]\n                arr[neg] = arr[pos]\n                arr[pos] = temp\n        neg += 1\n    return arr\n",
        "num_ids": 114
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # store a list of negative numbers in the given array\n    neg_list = []\n    # store a list of positive numbers in the given array\n    pos_list = []\n    # iterate through the array\n    for i in range(n):\n        # if an element is a negative number, add it to the negative list\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        # if an element is a positive number, add it to the positive list\n        else:\n            pos_list.append(arr[i])\n",
        "num_ids": 131
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negs = []\n    for i in range(n):\n        if arr[i] < 0:\n            negs.append(arr[i])\n    if len(negs) == 0:\n        return arr\n    else:\n        pos = 0\n        while pos < n and arr[pos] < 0:\n            pos += 1\n        if pos == n:\n            return negs + arr\n        negs.extend(arr[pos:])\n        return negs + arr[:pos]\n",
        "num_ids": 119
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    x = \"\"\n    if (len(str1) == 1) and (str1.isalnum()):\n        x = str1\n    else:\n        x = str1.replace(' ','')\n    return (x)\n",
        "num_ids": 56
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\")\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    i=0\n    lst=[]\n    for i in range(0,len(str1)):\n        if str1[i]==' ':\n            lst.append(char)\n        else:\n            lst.append(str1[i])\n    return ''.join(lst)\n",
        "num_ids": 75
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)\n",
        "num_ids": 13
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = str1.replace(' ','')\n    return new_str\n",
        "num_ids": 22
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2=''\n    for i in str1:\n        if i!='':\n            str2+=i\n        else:\n            str2+='{}'.format(char)\n    return str2\n",
        "num_ids": 52
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    l = len(str1)\n    x = str1.find(' ')\n    if x == -1:\n        return str1\n    else:\n        for i in range(l):\n            if str1[i] =='':\n                str1 = str1.replace(' ',char)\n    return str1\n",
        "num_ids": 77
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','%s')%(char)\n",
        "num_ids": 19
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\").replace(char,\"\")\n",
        "num_ids": 18
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n >= len(list1):\n        return list1\n    h = []\n    for i in range(n):\n        heapq.heappush(h,list1[i])\n    for i in range(n,len(list1)):\n        if list1[i] > h[0]:\n            heapq.heappop(h)\n            heapq.heappush(h,list1[i])\n    return h\ndef h_index(list1):\n    '''\n    Write a function that takes in a list and returns the highest index in the list that is at least h elements away from the highest index.\n    '''\n    if len(list1) == 0:\n        return 0\n    h = larg_nnum(list1,len(list1))\n    return len(list1)-len(h)\ndef unique_char(str1):\n    '''\n    Write a function that takes in a string and returns a new string containing all of the unique characters in the string.\n    '''\n    if len(str1) == 0:\n        return \"\"\n    d = {}\n    for i in range(len(str1)):\n        if str1[i] not in d:\n            d[str1[i]] = 1\n        else:\n            d[str1[i]] += 1\n    for i in d:\n        if d[i] == 1:\n            return i\ndef mean(num):\n    '''\n    Write a function that takes in a list of numbers and returns the mean of those numbers.\n    '''\n    if len(num) == 0:\n        return 0\n    total = 0\n    for i in num:\n        total += i\n    return total/len(num)\ndef sum(num):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of those numbers.\n    '''\n    if len(num) == 0:\n        return 0\n    total = 0\n    for i in num:\n        total += i\n    return total\ndef diff(num1,num2):\n    '''\n    Write a function that takes in two lists and returns the difference between the two lists. \n    The difference should be defined as the difference between the largest item in the first list and the smallest item in the second list.\n    '''\n    if len(num1) == 0 or len(num2) == 0:\n        return 0\n    large_num = -9999999999999999999999\n    small_num = 99999999999999999999999\n    for i in num1:\n        if i > large_num:\n            large_num = i\n    for i in num2:\n        if i < small_num:\n            small_num = i\n    return large_num - small_num\ndef print_list(num):\n    '''\n    Write a function that takes in a list and prints the list.\n    '''\n    if len(num) == 0:\n        return\n    for i in range(len(num)):\n        print(num[i],end = \" \")\ndef min_heap(n,num):\n    '''\n    Write a function that takes in a list of numbers and returns a new list that is the minimum heap.\n    '''\n    if len(num) == 0:\n        return []\n    d = {}\n    for i in range(len(num)):\n        d[i] = num[i]\n    heapq.heapify(d)\n    return d\ndef max_heap(n,num):\n    '''\n    Write a function that takes in a list of numbers and returns a new list that is the maximum heap.\n    '''\n    if len(num) == 0:\n        return []\n    d = {}\n    for i in range(len(num)):\n        d[i] = num[i]\n    heapq.heapify(d)\n    return d\ndef list_to_heap(num,num1):\n    '''\n    Write a function that takes in a list and returns a new list that is the heap formed from the original list.\n    '''\n    if len(num) == 0:\n        return []\n    d = {}\n    for i in range(len(num)):\n        d[i] = num[i]\n    heapq.heapify(d)\n    for i in range(len(num1)):\n        heapq.heappush(d,num1[i])\n    return d\ndef list_to_min_heap(num):\n    '''\n    Write a function that takes in a list and returns a new list that is the minimum heap formed from the original list.\n    '''\n    if len(num) == 0:\n        return []\n    d = {}\n    for i in range(len(num)):\n        d[i] = num[i]\n    heapq.heapify(d)\n    for i in range(len(num)):\n        heapq.heappush(d,num[i])\n    return d\ndef list_to_max_heap(num):\n    '''\n    Write a function that takes in a list and returns a new list that is the maximum heap formed from the original list.\n    '''\n    if len(num) == 0:\n        return []\n    d = {}\n    for i in range(len(num)):\n        d[i] = num[i]\n    heapq.heapify(d)\n    for i in range(len(num)):\n        heapq.heappop(d)\n    return d\ndef add_elem(num,elem):\n    '''\n    Write a function that takes in a list and an element and returns a new list that is the original list appended to the end.\n    '''\n    if len(num) == 0:\n        return []\n    if len(num) == 1:\n        return [num[0],elem]\n    d = {}\n    for i in range(len(num)):\n        d[i] = num[i]\n    heapq.heapify(d)\n    heapq.heappush(d,elem)\n    return d\ndef add_elem_1(num,elem):\n    '''\n    Write a function that takes in a list and an element and returns a new list that is the original list appended to the end.\n    '''\n    if len(num) == 0:\n        return []\n    d = {}\n    for i in range(len(num)):\n        d[i] = num[i]\n    heapq.heapify(d)\n    heapq.heappush(d,elem)\n    return d\ndef add_elem_2(num,elem):\n    '''\n    Write a function that takes in a list and an element and returns a new list that is the original list appended to the end.\n    '''\n    if len(num) == 0:\n        return []\n    d = {}\n    for i in range(len(num)):\n        d[i] = num[i]\n    heapq.heapify(d)\n    if len(d) == 1:\n        heapq.heappush(d,elem)\n    else:\n        heapq.heappush(d,elem)\n        heapq.heappushpop(d,d[0])\n    return d\ndef add_elem_3(num,elem):\n    '''\n    Write a function that takes in a list and an element and returns a new list that is the original list appended to the end.\n    '''\n    if len(num) == 0:\n        return []\n    d = {}\n    for i in range(len(num)):\n        d[i] = num[i]\n    heapq.heapify(d)\n    heapq.heappush(d,elem)\n    return d\ndef add_elem_4(num,elem):\n    '''\n    Write a function that takes in a list and an element and returns a new list that is the original list appended to the end.\n    '''\n    if len(num) == 0:\n        return []\n    d = {}\n    for i in range(len(num)):\n        d[i] = num[i]\n    heapq.heapify(d)\n    if len(d) == 1:\n        heapq.heappus",
        "num_ids": 74
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return list1[:n]\n",
        "num_ids": 11
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    lst = list1\n    lst.sort()\n    return lst[-n:]\n",
        "num_ids": 25
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    return list1[:n]\n",
        "num_ids": 18
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1 = sorted(list1,reverse=True)\n    #print(\"heap\",list1)\n    heapq.heapify(list1)\n    #print(\"heap\",list1)\n    return list1[0:n]\n",
        "num_ids": 61
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2=[]\n    for i in list1:\n        list2.append(i)\n    list2.sort(reverse=True)\n    #print(list2)\n    return list2[n-1]\n",
        "num_ids": 54
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap,(list1[i],i))\n        if len(heap) == n:\n            heapq.heappop(heap)\n    return[heapq.heappop(heap)[1]]\n",
        "num_ids": 83
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # make a heap of size n\n    heap = []\n    for i in list1:\n        heapq.heappush(heap,i)\n        if len(heap)>n:\n            heapq.heappop(heap)\n    return heap\n",
        "num_ids": 68
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    n_list = []\n    for i in range(n):\n        n_list.append(list1[i])\n    n_list.sort(reverse = True)\n    return n_list\n",
        "num_ids": 49
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    largest = []\n    list1.sort(reverse=True)\n    heapq.heapify(largest)\n    \n    for i in range(n):\n        heapq.heappush(largest,list1[i])\n    \n    return largest\n",
        "num_ids": 66
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Formula for lateral surface area (formula 6.3.8 of the book)\n    f = (3*math.pi*r**2)/2\n    lateral_surface = f*h\n    return lateral_surface\n",
        "num_ids": 54
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # write your code here\n    return r*h*pi/2\n",
        "num_ids": 19
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    if (h<=0):\n        return 0\n    else:\n        area = pi*r**2\n        return (2*area)/h\n",
        "num_ids": 37
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral = 2*pi*r*h\n    return lateral\n",
        "num_ids": 18
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = PI * r**2 * h\n    return area\n",
        "num_ids": 17
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #Cylinder Surface Area Formula:\n    # S = pi(r^2 * h)\n    S = pi(r**2 * h)\n    return S\n",
        "num_ids": 41
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    PI = 3.14\n    def lateral(r,h):\n        area = PI * (r**2) + (h*2)*(2*r + 2*h)\n        return area\n    lateral = lateral(r,h)\n    print('The lateral surface area of the cylinder is',lateral,'units squared.')\n    \nlateralsuface_cylinder(0.5,2)\nlateralsuface_cylinder(2,0.5)\nlateralsuface_cylinder(5,3)\nlateralsuface_cylinder(1.5,0.5)",
        "num_ids": 140
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #Inputs\n    #r: radius of the cylinder\n    #h: height of the cylinder\n    #Output\n    #lateral_surface: the lateral surface area of the cylinder\n    #r**2*h - 2*pi*r*h = lateral surface\n    return (r**2*h - 2*pi*r*h)\n",
        "num_ids": 81
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    s = 2*math.pi*r*(r+h)\n    return (s*(h**2)-math.pi*r**2)\n",
        "num_ids": 38
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    a = 2 * pi * r\n    p = pi * r ** 2\n    b = p * h\n    return (p * (h + 2 * r)) / 3 + a * h\n",
        "num_ids": 46
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume\n",
        "num_ids": 13
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n    \nif __name__ == \"__main__\":\n    volume_cube(1)\n    volume_cube(2",
        "num_ids": 35
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return (l**3)\n",
        "num_ids": 10
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # your code here\n    if l == 1:\n        return 1\n    else:\n        return l**3\n",
        "num_ids": 29
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return pow(l, 3)\n",
        "num_ids": 11
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (1 << (n.bit_length() - 1))\n",
        "num_ids": 20
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    def set_even_bit(n):\n        return n & 0b1111111111\n    return set_even_bit(n)\n",
        "num_ids": 34
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    mask = 1 << n.bit_length()\n    return n | mask\n",
        "num_ids": 20
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (1 << (n.bit_length() - 1)) \ndef even_bit_clear_number(n): \n    '''\n    Write a python function to clear all even bits of a given number.\n    '''\n    return n & ~(1 << (n.bit_length() - 1)) \ndef odd_bit_set_number(n): \n    '''\n    Write a python function to set all odd bits of a given number.\n    '''\n    return n | (1 << (n.bit_length() - 2)) \ndef odd_bit_clear_number(n): \n    '''\n    Write a python function to clear all odd bits of a given number.\n    '''\n    return n & ~(1 << (n.bit_length() - 2)) \ndef even_bit_test(n): \n    '''\n    Write a python function to test whether an integer contains an even bit.\n    '''\n    return (n & 1) \ndef odd_bit_test(n): \n    '''\n    Write a python function to test whether an integer contains an odd bit.\n    '''\n    return (n & 2) \nif __name__ == \"__main__\":\n    '''\n    Test your code by passing different values for the input.\n    '''\n    print(even_bit_set_number(0b1))\n    print(even_bit_set_number(0b0))\n    print(even_bit_set_number(0b1100))\n    print(even_bit_set_number(0b1010))\n    print(even_bit_set_number(0b1111))\n    print(even_bit_set_number(0b1101))\n    print(even_bit_set_number(0b1110))\n    print(even_bit_set_number(0b1011))\n    print(even_bit_set_number(0b1100))\n    print(even_bit_clear_number(0b1))\n    print(even_bit_clear_number(0b0))\n    print(even_bit_clear_number(0b1100))\n    print(even_bit_clear_number(0b1010))\n    print(even_bit_clear_number(0b1111))\n    print(even_bit_clear_number(0b1101))\n    print(even_bit_clear_number(0b1110))\n    print(even_bit_clear_number(0b1011))\n    print(even_bit_clear_number(0b1100))\n    print(odd_bit_set_number(0b1))\n    print(odd_bit_set_number(0b0))\n    print(odd_bit_set_number(0b1100))\n    print(odd_bit_set_number(0b1010))\n    print(odd_bit_set_number(0b1111))\n    print(odd_bit_set_number(0b1101))\n    print(odd_bit_set_number(0b1110))\n    print(odd_bit_set_number(0b1011))\n    print(odd_bit_set_number(0b1100))\n    print(odd_bit_clear_number(0b1))\n    print(odd_bit_clear_number(0b0))\n    print(odd_bit_clear_number(0b1100))\n    print(odd_bit_clear_number(0b1010))\n    print(odd_bit_clear_number(0b1111))\n    print(odd_bit_clear_number(0b1101))\n    print(odd_bit_clear_number(0b1110))\n    print(odd_bit_clear_number(0b1011))\n    print(odd_bit_clear_number(0b1100))\n    print(even_bit_test(0b1))\n    print(even_bit_test(0b0))\n    print(even_bit_test(0b1100))\n    print(even_bit_test(0b1010))\n    print(even_bit_test(0b1111))\n    print(even_bit_test(0b1101))\n    print(even_bit_test(0b1110))\n    print(even_bit_test(0b1011))\n    print(even_bit_test(0b1100))\n    print(odd_bit_test(0b1))\n    print(odd_bit_test(0b0))\n    print(odd_bit_test(0b1100))\n    print(odd_bit_test(0b1010))\n    print(odd_bit_test(0b1111))\n    print(odd_bit_test(0b1101))\n    print(odd_bit_test(0b1110))\n    print(odd_bit_test(0b1011))\n    print(odd_bit_test(0b1100)",
        "num_ids": 853
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = bin(n)[2:]\n    n = '0'*(len(n)-1) + n\n    return n\n    \ndef all_odd_bit_set_number(n):\n    '''\n    Write a python function to set all odd bits of a given number.\n    '''\n    n = bin(n)[2:]\n    n = '1'*(len(n)-1) + n\n    return n\n    \ndef any_odd_bit_set_number(n):\n    '''\n    Write a python function to set any odd bits of a given number.\n    '''\n    n = bin(n)[2:]\n    n = '0'*(len(n)-2) + n[1] + n[2]\n    return n\n    \ndef set_bit_value(n,bit,value):\n    '''\n    Write a python function to set the value of the given bit in the given number.\n    '''\n    n = bin(n)[2:]\n    n = '0'*(len(n)-1) + n\n    if bit == 0:\n        n = n[:bit] + value + n[bit+1:]\n    if bit == 1:\n        n = n[:bit+1] + value + n[bit+2:]\n    return int(n,2)\n    \ndef set_bit_value_least_significant_bit(n,value):\n    '''\n    Write a python function to set the value of the least significant bit in the given number.\n    '''\n    return set_bit_value(n,0,value)\n    \ndef set_bit_value_most_significant_bit(n,value):\n    '''\n    Write a python function to set the value of the most significant bit in the given number.\n    '''\n    return set_bit_value(n,1,value)\n    \ndef shift_left_number(n,bit):\n    '''\n    Write a python function to shift the given number by the given bit.\n    '''\n    n = bin(n)[2:]\n    n = '0'*(bit-1) + n[:bit]\n    return int(n,2)\n    \ndef shift_left_number_least_significant_bit(n):\n    '''\n    Write a python function to shift the least significant bit by 1.\n    '''\n    return shift_left_number(n,0)\n    \ndef shift_left_number_most_significant_bit(n):\n    '''\n    Write a python function to shift the most significant bit by 1.\n    '''\n    return shift_left_number(n,1)\n    \ndef left_rotate_number_by_number_of_bits(n,bit):\n    '''\n    Write a python function to left rotate the given number by the given number of bits.\n    '''\n    n = bin(n)[2:]\n    n = '0'*(bit-1) + n[:bit]\n    return int(n,2)\n    \ndef left_rotate_number_by_number_of_bits_least_significant_bit(n,bit):\n    '''\n    Write a python function to left rotate the least significant bit by the given number of bits.\n    '''\n    return left_rotate_number_by_number_of_bits(n,bit)\n    \ndef left_rotate_number_by_number_of_bits_most_significant_bit(n,bit):\n    '''\n    Write a python function to left rotate the most significant bit by the given number of bits.\n    '''\n    return left_rotate_number_by_number_of_bits(n,bit)\n    \ndef right_rotate_number_by_number_of_bits(n,bit):\n    '''\n    Write a python function to right rotate the given number by the given number of bits.\n    '''\n    n = bin(n)[2:]\n    n = n[-bit:] + n[:-bit]\n    return int(n,2)\n    \ndef right_rotate_number_by_number_of_bits_least_significant_bit(n,bit):\n    '''\n    Write a python function to right rotate the least significant bit by the given number of bits.\n    '''\n    return right_rotate_number_by_number_of_bits(n,bit)\n    \ndef right_rotate_number_by_number_of_bits_most_significant_bit(n,bit):\n    '''\n    Write a python function to right rotate the most significant bit by the given number of bits.\n    '''\n    return right_rotate_number_by_number_of_bits(n,bit)\n    \ndef maximum_of_two_numbers(n1,n2):\n    '''\n    Write a python function to return the maximum of two numbers.\n    '''\n    return max(n1,n2)\n    \ndef minimum_of_two_numbers(n1,n2):\n    '''\n    Write a python function to return the minimum of two numbers.\n    '''\n    return min(n1,n2)\n    \ndef maximum_of_two_numbers_least_significant_bit(n1,n2):\n    '''\n    Write a python function to return the maximum of two numbers in the least significant bit.\n    '''\n    return maximum_of_two_numbers(n1,n2)\n    \ndef minimum_of_two_numbers_least_significant_bit(n1,n2):\n    '''\n    Write a python function to return the minimum of two numbers in the least significant bit.\n    '''\n    return minimum_of_two_numbers(n1,n2)\n    \ndef maximum_of_two_numbers_most_significant_bit(n1,n2):\n    '''\n    Write a python function to return the maximum of two numbers in the most significant bit.\n    '''\n    return maximum_of_two_numbers(n1,n2)\n    \ndef minimum_of_two_numbers_most_significant_bit(n1,n2):\n    '''\n    Write a python function to return the minimum of two numbers in the most significant bit.\n    '''\n    return minimum_of_two_numbers(n1,n2)\n    \ndef minimum_of_three_numbers(n1,n2,n3):\n    '''\n    Write a python function to return the minimum of three numbers.\n    '''\n    return min(n1,n2,n3)\n    \ndef maximum_of_three_numbers(n1,n2,n3):\n    '''\n    Write a python function to return the maximum of three numbers.\n    '''\n    return max(n1,n2,n3)\n    \ndef minimum_of_three_numbers_least_significant_bit(n1,n2,n3):\n    '''\n    Write a python function to return the minimum of three numbers in the least significant bit.\n    '''\n    return min(n1,n2,n3)\n    \ndef maximum_of_three_numbers_least_significant_bit(n1,n2,n3):\n    '''\n    Write a python function to return the maximum of three numbers in the least significant bit.\n    '''\n    return max(n1,n2,n3)\n    \ndef minimum_of_three_numbers_most_significant_bit(n1,n2,n3):\n    '''\n    Write a python function to return the minimum of three numbers in the most significant bit.\n    '''\n    return min(n1,n2,n3)\n    \ndef maximum_of_three_numbers_most_significant_bit(n1,n2,n3):\n    '''\n    Write a python function to return the maximum of three numbers in the most significant bit.\n    '''\n    return max(n1,n2,n3)\n    \ndef product_of_three_numbers(n1,n2,n3):\n    '''\n    Write a python function to return the product of three numbers.\n    '''\n    return n1*n2*n3\n    \ndef product_of_three_numbers_least_significant_bit(n1,n2,n3):\n    '''\n    Write a python function to return the product of three numbers in the least significant bit.\n    '''\n    return product_of",
        "num_ids": 7
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while(n):\n        if n&1:\n            print(\"1\")\n        else:\n            print(\"0\")\n        n = n>>1\ndef count_occurences(input_string):\n    '''\n    Write a python function to count all occurences of a substring in a string.\n    '''\n    count = 0\n    for i in range(len(input_string)):\n        if input_string[i:].startswith(input_string[i]):\n            count += 1\n    return count\ndef find_maximum_binary_string(input_string):\n    '''\n    Write a python function to find the maximum binary string of a given string.\n    '''\n    n = len(input_string)\n    max_num = 0\n    num = 0\n    for i in range(n):\n        if input_string[i] == '0':\n            num = 0\n        else:\n            num = 1\n        max_num = max(max_num, num)\n    return max_num\ndef convert_to_decimal(binary_string):\n    '''\n    Write a python function to convert a binary number to decimal number.\n    '''\n    n = len(binary_string)\n    decimal = 0\n    for i in range(n):\n        decimal = decimal + int(binary_string[n-i-1])*2**i\n    return decimal\ndef change_order_of_elements(list_of_elements):\n    '''\n    Write a python function to swap the position of the element at index 1 with the element at index 0.\n    '''\n    index1 = 1\n    index2 = 0\n    list_of_elements[index1], list_of_elements[index2] = list_of_elements[index2], list_of_elements[index1]\ndef find_smallest_number_with_same_number_of_occurences_as_others(input_string):\n    '''\n    Write a python function to find the smallest number which has the same number of occurences as the other numbers in a given string.\n    '''\n    count = 1\n    list_of_strings = []\n    n = len(input_string)\n    max_count = 0\n    for i in range(n):\n        if input_string[i] not in list_of_strings:\n            list_of_strings.append(input_string[i])\n    for i in range(n):\n        occurence = 0\n        for j in range(n):\n            if input_string[i] == input_string[j]:\n                occurence += 1\n        if occurence > max_count:\n            max_count = occurence\n            index_of_max_count = i\n    return input_string[index_of_max_count]\ndef find_missing_number(input_list):\n    '''\n    Write a python function to find the missing number in a given list of integers.\n    '''\n    list_of_numbers = sorted(input_list)\n    n = len(input_list)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    for i in range(n):\n        if list_of_numbers[i]!= i+1:\n            return i+1\n    return n+1\ndef find_multiple_number(input_list):\n    '''\n    Write a python function to find the multiple number in a given list of integers.\n    '''\n    list_of_numbers = sorted(input_list)\n    n = len(input_list)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    i = 0\n    while(i < n):\n        if i!= list_of_numbers[i]:\n            return i+1\n        i += 1\n    return n+1\ndef largest_number_formed_by_digits(input_string):\n    '''\n    Write a python function to find the largest number formed by the digits of a given string.\n    '''\n    list_of_strings = []\n    n = len(input_string)\n    max_count = 0\n    for i in range(n):\n        if input_string[i] not in list_of_strings:\n            list_of_strings.append(input_string[i])\n    for i in range(n):\n        occurence = 0\n        for j in range(n):\n            if input_string[i] == input_string[j]:\n                occurence += 1\n        if occurence > max_count:\n            max_count = occurence\n            index_of_max_count = i\n    return input_string[index_of_max_count]\ndef find_second_maximum_number(input_list):\n    '''\n    Write a python function to find the second maximum number in a given list of integers.\n    '''\n    list_of_numbers = sorted(input_list)\n    n = len(input_list)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    i = 0\n    while(i < n):\n        if i!= list_of_numbers[i]:\n            return i+1\n        i += 1\n    return n+1\ndef find_third_maximum_number(input_list):\n    '''\n    Write a python function to find the third maximum number in a given list of integers.\n    '''\n    list_of_numbers = sorted(input_list)\n    n = len(input_list)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    i = 0\n    while(i < n):\n        if i!= list_of_numbers[i]:\n            return i+1\n        i += 1\n    return n+1\ndef find_highest_number_in_string(input_string):\n    '''\n    Write a python function to find the highest number in a given string.\n    '''\n    list_of_numbers = []\n    n = len(input_string)\n    max_count = 0\n    for i in range(n):\n        if input_string[i] not in list_of_numbers:\n            list_of_numbers.append(input_string[i])\n    for i in range(n):\n        occurence = 0\n        for j in range(n):\n            if input_string[i] == input_string[j]:\n                occurence += 1\n        if occurence > max_count:\n            max_count = occurence\n            index_of_max_count = i\n    return input_string[index_of_max_count]\ndef find_duplicate_number_and_missing_number(input_list):\n    '''\n    Write a python function to find the duplicate number and missing number in a given list of integers.\n    '''\n    list_of_numbers = sorted(input_list)\n    n = len(input_list)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    i = 0\n    while(i < n):\n        if i!= list_of_numbers[i]:\n            return i+1\n        i += 1\n    return n+1\ndef find_minimum_number_in_list(input_list):\n    '''\n    Write a python function to find the minimum number in a given list of integers.\n    '''\n    list_of_numbers = sorted(input_list)\n    n = len(input_list)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    i = 0\n    while(i < n):\n        if i!= list_of_numbers[i]:\n            return i+1\n        i += 1\n    return n+1\ndef find_maximum_number_in_list(input_list):\n    '''\n    Write a python function to find the maximum number in a given list of integers.\n    '''\n    list_of_numbers = sorted(input_list)\n    n = len(input_list)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    i = 0\n    while(i < n):\n        if i!= list_of_numbers[i]:\n            return i+1\n        i += 1\n    return n+1\ndef find_sum_of_all",
        "num_ids": 102
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    \n    # Binary representation of a number\n    binary_number = bin(n)\n    # We need only the first 3 digits in the binary representation\n    binary_number = binary_number[2:]\n    # We want to keep the first bit set to '1'.\n    binary_number = '1' + binary_number\n    # Now convert it to a number\n    n = int(binary_number, 2)\n    return n\n    ",
        "num_ids": 102
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n&1\n",
        "num_ids": 23
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n & 1:\n        return 0\n    else:\n        return n >> 1\n",
        "num_ids": 23
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | 1\n",
        "num_ids": 8
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                if test_list[i] in d:\n                    d[test_list[i]] += 1\n                else:\n                    d[test_list[i]] = 1\n    return d \n",
        "num_ids": 100
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    occurences = {}\n    \n    for tuple in test_list:\n        if tuple in occurences:\n            occurences[tuple] += 1\n        else:\n            occurences[tuple] = 1\n    return occurences\n",
        "num_ids": 63
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    for ele in test_list:\n        if ele in test_dict:\n            test_dict[ele] += 1\n        else:\n            test_dict[ele] = 1\n    return test_dict\n",
        "num_ids": 57
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    if len(test_list) == 0:\n        return {}\n    else:\n        c = Counter(test_list)\n        d = dict(c)\n        return d\n    \nprint(check_occurences([('a',1),('a',2),('a',3),('b',1),('b',2),('b',3),('b',4),('c',2),('c',3),('c',4),('c',5)]))\nprint(check_occurences([('a',1),('a',2),('a',3),('a',4),('a',5),('b',2),('b',3),('b',4),('b',5),('c',2),('c',3),('c',4),('c',5)]))\nprint(check_occurences([('a',1),('a',2),('a',3),('b',2),('b',3),('b',4),('c',2),('c',3),('c',4),('c',5)]))\nprint(check_occurences([('a',1),('a',2),('a',3),('b',2),('b',3),('b',4),('c',2),('c',3),('c',4),('c',5)]))\nprint(check_occurences([('a',1),('a',2),('a',3),('b',2),('b',3),('b',4),('c',2),('c',3),('c',4),('c',5)]))\nprint(check_occurences([('a',1),('a',2),('a',3),('b',2),('b',3),('b',4),('c',2),('c',3),('c',4),('c',5)]))\nprint(check_occurences([('a',1),('a',2),('a',3),('b',2),('b',3),('b',4),('c',2),('c',3),('c',4),('c',5)]))\nprint(check_occurences([('a',1),('a',2),('a',3),('b',2),('b',3),('b',4),('c',2),('c',3),('c',4),('c',5)]))\nprint(check_occurences([('a',1),('a',2),('a',3),('b',2),('b',3),('b',4),('c',2),('c',3),('c',4),('c',5)]))\nprint(check_occurences([('a',1),('a',2),('a',3),('b',2),('b',3),('b',4),('c',2),('c',3),('c',4),('c',5)]))\nprint(check_occurences([('a',1),('a',2),('a',3),('b',2),('b',3),('b',4),('c',2),('c',3),('c',4),('c',5)]))\nprint(check_occurences([('a',1),('a',2),('a',3),('b',2),('b',3),('b',4),('c',2),('c',3),('c',4),('c',5)]))\nprint(check_occurences([('a',1),('a',2),('a',3),('b',2),('b',3),('b',4),('c',2),('c',3),('c',4),('c',5)]))\nprint(check_occurences([('a',1),('a',2),('a',3),('b',2),('b',3),('b',4),('c',2),('c',3),('c',4),('c',5)]))\nprint(check_occurences([('a',1),('a',2),('a',3),('b',2),('b',3),('b',4),('c',2),('c',3),('c',4),('c',5)]))\nprint(check_occurences([('a',1),('a',2),('a',3),('b',2),('b',3),('b',4),('c',2),('c',3),('c',4),('c',5)]))\nprint(check_occurences([('a',1),('a',2),('a',3),('b',2),('b',3),('b',4),('c',2),('c',3),('c',4),('c',5)]))\nprint(check_occurences([('a',1),('a',2),('a',3),('b',2),('b',3),('b',4),('c',2),('c',3),('c',4),('c',5)]))\nprint(check_occurences([('a',1),('a',2),('a',3),('b',2),('b',3),('b',4),('c',2),('c',3),('c',4),('c',5)]))\nprint(check_occurences([('a',1),('a',2),('a',3),('b',2),('b',3),('b',4),('c',2),('c',3),('c',4),('c',5)]))\nprint(check_occurences([('a',1),('a',2),('a',3),('b',2),('b',3),('b',4),('c',2),('c',3),('c',4),('c',5)]))\nprint(check_occurences([('a',1),('a',2),('a',3),('b',2),('b',3),('b',4),('c',2),('c',3),('c',4),('c',5)]))\nprint(check_occurences([('a',1),('a',2),('a',3),('b',2),('b',3),('b',4),('c',2),('c',3),('c',4),('c',5)]))\nprint(check_occurences([('a',1),('a',2),('a',3),('b',2),('b',3),('b',4),('c',2),('c',3),('c',4),('c',5)]))\nprint(check_occurences([('a',1),('a',2),('a',3),('b',2),('b',3),('b',4),('c',2),('c',3),('c',4),('c',5)]))\nprint(check_occurences([('a',1),('a',2),('a',3),('b',2),('b',3),('b',4),('c',2),('c',3),('c',4),('c',5)]))\nprint(check_occurences([('a',1),('a',2),('a',3),('b',2),('b',3),('b',4),('c',2),('c',3),('c',4),('c',5)]))\nprint(check_occurences([('a',1),('a',2),('a',3),('b',2),('b',3),('b',4),('c',2),('c',3),('c',4),('c',5)]))\nprint(check_occurences([('a',1),('a',2),('a',3),('b',2),('b',3),('b',4),('c',2),('c',3),('c',4),('c',5)]))\nprint(check_occurences([('a',1),('a',2),('a',3),('b',2),('b',3),('b',4),('c',2),('c',3),('c',4),('c',5)]))\nprint(check_occurences([('a',1),('a',2),('a',3),('b',2),('b',3),('b',4),('c',2),('c',3),('c',4),('c',5)]))\nprint(check_occurences([('a',1),('a',2),('a',3),('b',2),('b',3),('b',4),('c',2),('c',3),('c',4),('c',5)]))\nprint(check_occur",
        "num_ids": 1992
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dict = {}\n    for i in test_list:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    return dict\n",
        "num_ids": 47
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    res = {}\n    for (a,b) in test_list:\n        if a in res:\n            res[a] += 1\n        else:\n            res[a] = 1\n        if b in res:\n            res[b] += 1\n        else:\n            res[b] = 1\n    return res\n",
        "num_ids": 78
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    #print(counter)\n    return counter\n    \ndef remove_tuple(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list of the unique tuples.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\n",
        "num_ids": 44
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for tuples in test_list:\n        for i in range(len(tuples)-1):\n            if tuples[i] in occurences:\n                occurences[tuples[i]] += 1\n            else:\n                occurences[tuples[i]] = 1\n    return occurences\n",
        "num_ids": 82
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))\n",
        "num_ids": 13
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))\n",
        "num_ids": 13
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    \n    substring_count = 0\n    \n    for i in range(len(str)):\n        for j in range(len(str), i, -1):\n            if str[i:j]!= \"\":\n                substring_count += 1\n                break\n                \n    return substring_count\n    \n    \nprint(\"Pass\" if  (3 == number_of_substrings(\"\")) else \"Fail\")\nprint(\"Pass\" if  (2 == number_of_substrings(\"abc\")) else \"Fail\")\nprint(\"Pass\" if  (1 == number_of_substrings(\"ab\")) else \"Fail\")\nprint(\"Pass\" if  (4 == number_of_substrings(\"abcd\")) else \"Fail\")\nprint(\"Pass\" if  (4 == number_of_substrings(\"abcde\")) else \"Fail\")\nprint(\"Pass\" if  (0 == number_of_substrings(\"\")) else \"Fail\")\n",
        "num_ids": 219
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return sum(1 for c in str if c!='')\n",
        "num_ids": 18
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len([x for x in range(len(str)) if str.startswith(str[:x], x)])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2008
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    #start with an empty list\n    res=[]\n    #loop through each character in the string\n    for i in range(len(str)):\n        #build a substring with an empty value\n        res.append(0)\n        #loop through each character in the substring\n        for j in range(i,len(str)):\n            if str[j] not in res:\n                #print(str[i:j+1])\n                res[i]=res[i]+1\n    #print(res)\n    #return the number of non-empty substrings\n    return sum(res)\n",
        "num_ids": 142
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    print(str)\n    return len(re.findall('\\S', str))\n",
        "num_ids": 23
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    \n    for i in range(0, len(str)): \n        count = count + len(str) - i\n    \n    return count \n    ",
        "num_ids": 44
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    no_substr = 0\n    for i in range(len(str)-1):\n        if str[i] == \" \" and str[i+1] == \" \":\n            continue\n        else:\n            no_substr += 1\n    return no_substr\n",
        "num_ids": 66
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i]!='':\n            for j in range(i+1, len(str)+1):\n                if str[i:j]!= '' and str[i:j]!='':\n                    count += 1\n                else:\n                    break\n    print(count)\n",
        "num_ids": 88
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    length = len(str)\n    result = 0\n",
        "num_ids": 15
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(0,len(str)):\n        if i==0:\n            if str[i]!=' ':\n                count = count+1\n        else:\n            if str[i]==str[i-1] and str[i]!=' ':\n                count = count+1\n    return count\n",
        "num_ids": 84
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #max_value = m*n\n    #possible_seq = 0\n    #iterate m + 1 times\n    #while possible_seq <= max_value:\n        #i = 0\n        #while i < n:\n            #j = 0\n            #while j <= i:\n                #j = j + 1\n                #if j == 0:\n                    #possible_seq = possible_seq + 1\n                    #continue\n                #if possible_seq >= max_value:\n                    #break\n                #if possible_seq == 0:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 1\n                    #else:\n                        #possible_seq = possible_seq + 2\n                    #continue\n                #if possible_seq == 1:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 1\n                    #else:\n                        #possible_seq = possible_seq + 2\n                    #continue\n                #if possible_seq == 2:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 2\n                    #else:\n                        #possible_seq = possible_seq + 1\n                    #continue\n                #if possible_seq == 3:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 2\n                    #else:\n                        #possible_seq = possible_seq + 1\n                    #continue\n                #if possible_seq == 4:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 1\n                    #else:\n                        #possible_seq = possible_seq + 2\n                    #continue\n                #if possible_seq == 5:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 2\n                    #else:\n                        #possible_seq = possible_seq + 1\n                    #continue\n                #if possible_seq == 6:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 1\n                    #else:\n                        #possible_seq = possible_seq + 2\n                    #continue\n                #if possible_seq == 7:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 2\n                    #else:\n                        #possible_seq = possible_seq + 1\n                    #continue\n                #if possible_seq == 8:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 2\n                    #else:\n                        #possible_seq = possible_seq + 1\n                    #continue\n                #if possible_seq == 9:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 1\n                    #else:\n                        #possible_seq = possible_seq + 2\n                    #continue\n                #if possible_seq == 10:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 1\n                    #else:\n                        #possible_seq = possible_seq + 2\n                    #continue\n                #if possible_seq == 11:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 1\n                    #else:\n                        #possible_seq = possible_seq + 2\n                    #continue\n                #if possible_seq == 12:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 1\n                    #else:\n                        #possible_seq = possible_seq + 2\n                    #continue\n                #if possible_seq == 13:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 2\n                    #else:\n                        #possible_seq = possible_seq + 1\n                    #continue\n                #if possible_seq == 14:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 2\n                    #else:\n                        #possible_seq = possible_seq + 1\n                    #continue\n                #if possible_seq == 15:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 1\n                    #else:\n                        #possible_seq = possible_seq + 2\n                    #continue\n                #if possible_seq == 16:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 1\n                    #else:\n                        #possible_seq = possible_seq + 2\n                    #continue\n                #if possible_seq == 17:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 1\n                    #else:\n                        #possible_seq = possible_seq + 2\n                    #continue\n                #if possible_seq == 18:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 1\n                    #else:\n                        #possible_seq = possible_seq + 2\n                    #continue\n                #if possible_seq == 19:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 1\n                    #else:\n                        #possible_seq = possible_seq + 2\n                    #continue\n                #if possible_seq == 20:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 2\n                    #else:\n                        #possible_seq = possible_seq + 1\n                    #continue\n                #if possible_seq == 21:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 2\n                    #else:\n                        #possible_seq = possible_seq + 1\n                    #continue\n                #if possible_seq == 22:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 2\n                    #else:\n                        #possible_seq = possible_seq + 1\n                    #continue\n                #if possible_seq == 23:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 1\n                    #else:\n                        #possible_seq = possible_seq + 2\n                    #continue\n                #if possible_seq == 24:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 2\n                    #else:\n                        #possible_seq = possible_seq + 1\n                    #continue\n                #if possible_seq == 25:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 1\n                    #else:\n                        #possible_seq = possible_seq + 2\n                    #continue\n                #if possible_seq == 26:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 2\n                    #else:\n                        #possible_seq = possible_seq + 1\n                    #continue\n                #if possible_seq == 27:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 2\n                    #else:\n                        #possible_seq = possible_seq + 1\n                    #continue\n                #if possible_seq == 28:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 1\n                    #else:\n                        #possible_seq = possible_seq + 2\n                    #continue\n                #if possible_seq == 29:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 1\n                    #else:\n                        #possible_seq = possible_seq + 2\n                    #continue\n                #if possible_seq == 30:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 1\n                    #else:\n                        #possible_seq = possible_seq + 2\n                    #continue\n                #if possible_seq == 31:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 1\n                    #else:\n                        #possible_seq = possible_seq + 2\n                    #continue\n                #if possible_seq == 32:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 1\n                    #else:\n                        #possible_seq = possible_seq + 2\n                    #continue\n                #if possible_seq == 33:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 1\n                    #else:\n                        #possible_seq = possible_seq + 2\n                    #continue\n                #if possible_seq == 34:\n                    #if m == 1:\n                        #possible_seq = possible_seq + 1\n                    #else:\n                        #possible_seq = possible_seq + 2\n                    #continu",
        "num_ids": 1974
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    counter = 0\n    while m <= n:\n        m *= 2\n        counter += m//2\n        m //= 2\n    return counter\n",
        "num_ids": 37
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 0 or m == 0:\n        return 1\n    else:\n        return (m*(n-1) + get_total_number_of_sequences(m,n-1))\n",
        "num_ids": 50
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize the variable to hold the number of possible sequences\n    numberOfPossibleSequences = 0\n    \n    # This loop will go through each element until m is reached\n    for i in range(0,m):\n        \n        # This loop will add 1 to the variable everytime a possible sequence is found\n        for j in range(i, m):\n            if j == i:\n                numberOfPossibleSequences += 1\n            elif numberOfPossibleSequences == 0:\n                numberOfPossibleSequences = 1\n            else:\n                numberOfPossibleSequences += 1\n                \n    # The number of possible sequences is rounded to the nearest integer\n    numberOfPossibleSequences = int(numberOfPossibleSequences)\n    \n    # Return the number of possible sequences rounded to the nearest integer\n    return numberOfPossibleSequences\n",
        "num_ids": 197
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    sequences = []\n    i = 0\n    while(i < m):\n        j = 0\n        while(j < n):\n            if(i + j <= m and i * j < m):\n                sequences.append(i * j)\n            j += 1\n        i += 1\n    print(len(sequences))\n",
        "num_ids": 80
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # I've found the sequence of numbers that go up to m in this way:\n    # 1\n    # 2\n    # 3\n    # 4\n    # 5\n    # 6\n    # 7\n    # 8\n    # 9\n    #...\n    # i = 1\n    # count = 1\n    # while i < m:\n    #     count += 2*i\n    #     i += 1\n    # return count\n",
        "num_ids": 104
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    if n==1:\n        for i in range(1,m+1):\n            count += 1\n    else:\n        for i in range(1,m+1):\n            for j in range(i,m+1):\n                if j*2 <= m:\n                    count += 1\n    return count\n",
        "num_ids": 80
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    print(\"\\n\\n--------------------------\\n\")\n    print(\"Get total number of sequences: \",get_total_number_of_sequences.__doc__)\n    print(\"--------------------------\\n\")\n    #------------------\n    #Pre-conditions:\n    #------------------\n    assert type(m) == int, \"Pre: m must be an integer\"\n    assert type(n) == int, \"Pre: n must be an integer\"\n    #------------------\n    #Post-conditions:\n    #------------------\n    return None\n",
        "num_ids": 128
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < 1 or n < 1:\n        return 0\n",
        "num_ids": 17
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[:-1] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1]=list2\n    return list1\n",
        "num_ids": 17
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=list2[i]\n    return list1\n",
        "num_ids": 32
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.append(list2)\n    return list1\n",
        "num_ids": 24
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:len(list1)-1] + list2\n",
        "num_ids": 19
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[:] = list1[:-1] + list2\n",
        "num_ids": 18
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    new_list = []\n    for i in range(len(list1)-1):\n        new_list.append(list1[i])\n    new_list.append(list2[-1])\n    return new_list\n",
        "num_ids": 56
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    print(list1)\n    list1[-1:] = list2\n    print(list1)\n    return list1\n",
        "num_ids": 32
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n    for i in range(len(list2)):\n        new_list.append(list2[i])\n    return new_list\n",
        "num_ids": 67
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total = 0\n    for i in str1:\n        total += 1\n    print(total)\n",
        "num_ids": 26
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n    \n    \ndef count_charac_2(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_3(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_4(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n    \n    \ndef count_charac_5(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n    \n    \ndef count_charac_6(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n    \n    \ndef count_charac_7(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_8(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_9(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_10(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_11(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_12(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_13(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_14(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_15(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_16(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_17(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_18(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_19(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_20(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_21(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_22(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_23(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_24(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_25(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_26(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_27(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_28(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_29(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_30(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_31(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_32(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_33(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_34(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_35(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_36(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_37(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_38(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_39(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_40(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_41(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.__len__()\n    \n    \ndef count_charac_42",
        "num_ids": 23
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for letter in str1:\n        count += 1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count = count + 1\n    return count\n",
        "num_ids": 26
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for c in str1:\n        count += 1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n    \ncount_charac(\"Ramakrishna\")\n",
        "num_ids": 23
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0:\n        return -1\n    while N <= (N*N)-1:\n        N = N + 1\n    return N\n",
        "num_ids": 37
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while(1):\n        if(N==(math.sqrt(N)+1)):\n            return N\n        else:\n            N=math.ceil(N/2)\n",
        "num_ids": 46
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return 2\n    i = 2\n    while i*i <= N:\n        i = i + 1\n    j = i - 1\n    while j*j <= N:\n        j = j - 1\n    return i*i + j + 1\n",
        "num_ids": 67
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N = int(N)\n    return int(math.sqrt(N+1))\n",
        "num_ids": 24
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    for i in range(1,int(math.sqrt(N)+1)):\n        if N%i == 0:\n            return i\n    return N\n",
        "num_ids": 40
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = N\n    y = 1\n    while(y * y < x):\n        y = y + 1\n    return y * y \n",
        "num_ids": 36
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if(N%2!= 0): \n        return int(N + 1) \n    else: \n        return int(math.floor(math.sqrt(N))) \n",
        "num_ids": 46
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = N \n    while x*x > N: \n        x = (x+1)//2\n    return x*x\n",
        "num_ids": 35
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sq = math.sqrt(N) \n    i = int(sq) \n    j = i + 1\n    while True: \n        if j**2 <= N: \n            if j**2!= N: \n                i = j \n                j += 1\n            else: \n                break\n        else: \n            j = i \n            i += 1\n    return i**2\n    \nprint(next_Perfect_Square(int(input()))",
        "num_ids": 113
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    res = -1\n    if (N == 1):\n        res = 1\n    while (N > 1):\n        N = int(math.sqrt(N))\n        res = N*N\n        if (res > N):\n            break\n    return res\n",
        "num_ids": 64
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    n = len(arr) \n    if n == 0: \n        return 0\n    if n == 1: \n        return arr[0] \n    if n == 2: \n        return max(arr[0], arr[1]) \n    \n    first = arr[0] \n    second = arr[1] \n    curr_max = 0\n    \n    for i in range(2, n): \n        curr = max(first, second, 0) + arr[i] \n        first = second \n        second = curr \n        if curr > curr_max: \n            curr_max = curr \n    return curr_max \n",
        "num_ids": 167
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0: return 0\n    dp = [[0 for _ in range(len(arr))] for _ in range(len(arr))]\n    for i in range(len(arr)):\n        dp[i][i] = arr[i]\n    for l in range(len(arr) - 2, -1, -1):\n        for r in range(l + 1, len(arr)):\n            dp[l][r] = max(dp[l + 1][r], dp[l][r - 1] + arr[l])\n",
        "num_ids": 134
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Time O(n) | Space O(1)\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    if n == 1:\n        return arr[0]\n    \n    if arr[0] > arr[1]:\n        max_sum = arr[0]\n    else:\n        max_sum = arr[1]\n    \n    for i in range(2, n):\n        if arr[i - 1] < arr[i] and arr[i] > arr[i - 1]:\n            max_sum = max(max_sum, arr[i] + max_sum)\n        else:\n            max_sum = max(max_sum, arr[i])\n        \n    return max_sum\n",
        "num_ids": 177
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # define auxiliary function for the merge sort algorithm\n    def mergesort(a):\n        if len(a) > 1:\n            mid = len(a) // 2\n            left = a[:mid]\n            right = a[mid:]\n            mergesort(left)\n            mergesort(right)\n",
        "num_ids": 77
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    #Solution 1: O(n) time | O(n) space\n",
        "num_ids": 19
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_s = 0\n    for i in range(1, len(arr)):\n        temp_s = 0\n        for j in range(i):\n            temp_s = max(temp_s, arr[j])\n        max_s = max(temp_s + arr[i], max_s)\n    return max_s\n",
        "num_ids": 81
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    global max_curr, max_sum\n    max_curr = 0\n    max_sum = 0\n    max_sub = []\n    while max_curr <= max_sum:\n        if (max_curr == 0):\n            max_curr = 0\n        elif (max_curr < 0):\n            max_curr = 0\n        else:\n            max_curr = 0\n            for i in range(0, len(arr)):\n                max_curr += arr[i]\n                if max_curr > max_sum:\n                    max_sum = max_curr\n            max_curr = 0\n            for i in range(len(arr) - 1, -1, -1):\n                max_curr += arr[i]\n                if max_curr > max_sum:\n                    max_sum = max_curr\n    return max_sum\n",
        "num_ids": 212
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n",
        "num_ids": 56
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n",
        "num_ids": 35
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    bitonic_subsequence = []\n",
        "num_ids": 11
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    try:\n        # Setup\n        epsilon = 0.000001\n        lower = 0.0\n        upper = number\n        guess = (lower + upper) / 2\n        # Iterate\n        while abs(guess**2 - number) >= epsilon:\n            if guess**2 > number:\n                upper = guess\n            else:\n                lower = guess\n            guess = (lower + upper) / 2\n        # Return\n        return guess\n    except TypeError as e:\n        print(f\"Oops! That was no valid number. {e}\")\n",
        "num_ids": 136
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = number ** (1/2)\n    return root\n",
        "num_ids": 17
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError(\"Only non-negative numbers allowed\")\n    elif number == 0:\n        return 0\n",
        "num_ids": 34
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    if number == 0:\n        raise ValueError('Number should not be zero')\n    \n    guess = number/2\n    \n    while abs(guess**2 - number) > 0.00001:\n        guess = (guess + number/guess)/2\n    \n    return guess\n",
        "num_ids": 74
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 1e-9\n    x = 0.0\n    guess = number/2.0\n    while abs(guess**2 - number) > epsilon:\n        guess = guess - (guess**2 - number)/(2.0*guess)\n    return guess\n",
        "num_ids": 73
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number <= 0:\n        raise ValueError(\"Nan or infinite input!\")\n    elif number > 2:\n        root = number / 2\n        while abs(root - math.sqrt(root)) >= 1e-12:\n            root = (number / 2) + (root / 2)\n        return root\n    else:\n        return math.sqrt(number)\n",
        "num_ids": 90
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = number\n    if number == 0:\n        return 0\n    while True:\n        root = (root + number / root) / 2\n        if root == number:\n            return root\n",
        "num_ids": 47
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError(\"n must be a non-negative number\")\n    guess = number / 2.0\n    while abs(guess**2 - number) >= 0.1:\n        guess = (guess + number / guess) / 2.0\n    return guess\n",
        "num_ids": 72
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = number/2\n    while abs(root**2 - number) > 1e-10:\n        root /= 2\n    return root\n",
        "num_ids": 36
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    while x*x > number:\n        x = (x + number/x)/2\n    return x\n",
        "num_ids": 32
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[False for i in range(n)] for j in range(n)]\n    maxLen = 0\n    for i in range(n):\n        dp[i][i] = True\n    for i in range(1, n):\n        if str[i-1] == str[i]:\n            dp[i-1][i] = True\n            maxLen = 2\n    for i in range(2, n):\n        for j in range(n):\n            if j >= i:\n                if dp[j][i-1]:\n                    dp[j][i] = True\n                    if maxLen < i-j+1:\n                        maxLen = i-j+1\n    return maxLen\n",
        "num_ids": 174
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)] \n",
        "num_ids": 31
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n",
        "num_ids": 49
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def f(a,b):\n        if (a<0 or b<0):\n            return 0\n        if (a==b):\n            return 1\n        if (a==0):\n            return b\n        if (b==0):\n            return a\n        if (str[a]==str[b]):\n            return 1+f(a-1,b-1)\n        else:\n            return max(f(a-1,b),f(a,b-1))\n    return f(len(str)-1,len(str)-1)\n    \ndef p(str,n):\n    '''\n    Write a function to reverse the given string.\n    '''\n    if (n==0):\n        return ''\n    if (n==1):\n        return str\n    if (n==2):\n        return str[0]+str[1]+str[0]\n    \n    if (n>2):\n        return str[0:n-1]+p(str[0:n-1],n-2)+str[n-1]\n    \ndef rev(str):\n    '''\n    Write a function to reverse a string.\n    '''\n    if (len(str)==0):\n        return ''\n    if (len(str)==1):\n        return str\n    if (len(str)==2):\n        return str[1]+str[0]\n    \n    return str[-1]+rev(str[0:-1])\n    \ndef palin(str):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if (len(str)==0):\n        return False\n    if (len(str)==1):\n        return True\n    if (str[0]==str[-1]):\n        return palin(str[1:-1])\n    return False\n    \ndef rpl(str):\n    '''\n    Write a function to replace all spaces in a string to %20.\n    '''\n    if (len(str)==0):\n        return ''\n    if (len(str)==1):\n        return str\n    if (str[0]==' '):\n        return '%20'+rpl(str[1:])\n    return str[0]+'%20'+rpl(str[1:])\n    \ndef drop(str):\n    '''\n    Write a function to drop all the duplicates in a string.\n    '''\n    if (len(str)==0):\n        return ''\n    if (len(str)==1):\n        return str\n    if (str[0]==str[1]):\n        return drop(str[2:])\n    return str[0]+drop(str[1:])\n    \ndef revc(str):\n    '''\n    Write a function to find the reverse complement of a DNA string.\n    '''\n    if (len(str)==0):\n        return ''\n    if (len(str)==1):\n        return 'A'\n    if (str[0]=='A'):\n        return 'T'+revc(str[1:])\n    if (str[0]=='T'):\n        return 'A'+revc(str[1:])\n    if (str[0]=='G'):\n        return 'C'+revc(str[1:])\n    if (str[0]=='C'):\n        return 'G'+revc(str[1:])\n    \ndef revc_rpl(str):\n    '''\n    Write a function to replace all the characters of a DNA string that are not 'A', 'T', 'C', 'G' to 'X'.\n    '''\n    if (len(str)==0):\n        return ''\n    if (len(str)==1):\n        return 'X'\n    if (str[0]=='A'):\n        return 'X'+revc_rpl(str[1:])\n    if (str[0]=='T'):\n        return 'X'+revc_rpl(str[1:])\n    if (str[0]=='G'):\n        return 'X'+revc_rpl(str[1:])\n    if (str[0]=='C'):\n        return 'X'+revc_rpl(str[1:])\n    \ndef revc_rpl_all(str):\n    '''\n    Write a function to replace all the characters of a DNA string to '.'.\n    '''\n    if (len(str)==0):\n        return ''\n    if (len(str)==1):\n        return '.'\n    if (str[0]=='A'):\n        return '.'+revc_rpl_all(str[1:])\n    if (str[0]=='T'):\n        return '.'+revc_rpl_all(str[1:])\n    if (str[0]=='G'):\n        return '.'+revc_rpl_all(str[1:])\n    if (str[0]=='C'):\n        return '.'+revc_rpl_all(str[1:])\n    \ndef revc_rpl_all_n(str,n):\n    '''\n    Write a function to replace all the characters of a DNA string to '.'.\n    '''\n    if (len(str)==0):\n        return ''\n    if (len(str)==1):\n        return '.'*n\n    if (str[0]=='A'):\n        return '.'*n+revc_rpl_all_n(str[1:],n-1)\n    if (str[0]=='T'):\n        return '.'*n+revc_rpl_all_n(str[1:],n-1)\n    if (str[0]=='G'):\n        return '.'*n+revc_rpl_all_n(str[1:],n-1)\n    if (str[0]=='C'):\n        return '.'*n+revc_rpl_all_n(str[1:],n-1)\n    \ndef revc_rpl_all_n_list(str,n):\n    '''\n    Write a function to replace all the characters of a DNA string to '.'.\n    '''\n    if (len(str)==0):\n        return []\n    if (len(str)==1):\n        return [['.'*n]]\n    if (str[0]=='A'):\n        return [['.'*n]+revc_rpl_all_n_list(str[1:],n-1)]\n    if (str[0]=='T'):\n        return [['.'*n]+revc_rpl_all_n_list(str[1:],n-1)]\n    if (str[0]=='G'):\n        return [['.'*n]+revc_rpl_all_n_list(str[1:],n-1)]\n    if (str[0]=='C'):\n        return [['.'*n]+revc_rpl_all_n_list(str[1:],n-1)]\n    \ndef revc_rpl_all_n_list_drop(str,n):\n    '''\n    Write a function to replace all the characters of a DNA string to '.'.\n    '''\n    if (len(str)==0):\n        return []\n    if (len(str)==1):\n        return [['.'*n]]\n    if (str[0]=='A'):\n        return [['.'*n]+revc_rpl_all_n_list_drop(str[1:],n-1)]\n    if (str[0]=='T'):\n        return [['.'*n]+revc_rpl_all_n_list_drop(str[1:],n-1)]\n    if (str[0]=='G'):\n        return [['.'*n]+revc_rpl_all_n_list_drop(str[1:],n-1)]\n    if (str[0]=='C'):\n        return [['.'*n]+revc_rpl_all_n_list_drop(str[1:],n-1)]\n    \ndef revc_rpl_all_n_list_drop_comp(str,n)",
        "num_ids": 240
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    if not str:\n        return 0\n    \n    str = '#' + str\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    \n    return dp[0][n - 1]\n",
        "num_ids": 182
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) < 2: \n        return len(str) \n    size = len(str) \n    if size < 2:\n        return size \n    dp = [[0] * size for i in range(size)] \n    for i in range(size): \n        dp[i][i] = 1\n        for j in range(1, i + 1): \n            if str[i - j] == str[i]: \n                dp[i - j][i] = 2\n            else: \n                dp[i - j][i] = max(dp[i - j][i], dp[i - j + 1][i] + 1) \n    return max(map(max, dp)) \n",
        "num_ids": 174
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    lps = [[0 for x in range(n)] \n            for y in range(n)] \n    max_len = 1\n    i = 0\n    j = 1\n    while (i < n): \n    \n        if (str[i] == str[j]): \n            lps[i][j] = j + 1\n            i = i + 1\n            j = j + 1\n            max_len = max_len + 1\n        else: \n            if (j == 0): \n                i = i + 1\n            else: \n                j = lps[i - 1][j - 1]\n                if (j == -1): \n                    i = i + 1\n                else: \n                    i = i - j - 1\n                    j = j - 1\n                lps[i][j] = j + 1\n    print(lps)\n    return max_len\n",
        "num_ids": 222
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if(len(str)==0 or len(str)==1):\n        return 1\n    dp = [[0]*len(str) for i in range(len(str))]\n    for i in range(len(str)-1,-1,-1):\n        for j in range(i,len(str)):\n            if(str[i]==str[j]):\n                if(i==j):\n                    dp[i][j]=2\n                else:\n                    dp[i][j]=2+dp[i+1][j-1]\n            else:\n                dp[i][j]=max(dp[i+1][j],dp[i][j-1])\n    return dp[0][len(str)-1]\n    \ndef lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if(len(str)==0 or len(str)==1):\n        return 1\n    dp = [[0]*len(str) for i in range(len(str))]\n    for i in range(len(str)-1,-1,-1):\n        for j in range(i,len(str)):\n            if(str[i]==str[j]):\n                if(i==j):\n                    dp[i][j]=2\n                else:\n                    dp[i][j]=2+dp[i+1][j-1]\n            else:\n                dp[i][j]=max(dp[i+1][j],dp[i][j-1])\n    return dp[0][len(str)-1]\n    \ndef lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if(len(str)==0 or len(str)==1):\n        return 1\n    dp = [[0]*len(str) for i in range(len(str))]\n    for i in range(len(str)-1,-1,-1):\n        for j in range(i,len(str)):\n            if(str[i]==str[j]):\n                if(i==j):\n                    dp[i][j]=2\n                else:\n                    dp[i][j]=2+dp[i+1][j-1]\n            else:\n                dp[i][j]=max(dp[i+1][j],dp[i][j-1])\n    return dp[0][len(str)-1]\n    \ndef lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if(len(str)==0 or len(str)==1):\n        return 1\n    dp = [[0]*len(str) for i in range(len(str))]\n    for i in range(len(str)-1,-1,-1):\n        for j in range(i,len(str)):\n            if(str[i]==str[j]):\n                if(i==j):\n                    dp[i][j]=2\n                else:\n                    dp[i][j]=2+dp[i+1][j-1]\n            else:\n                dp[i][j]=max(dp[i+1][j],dp[i][j-1])\n    return dp[0][len(str)-1]\n",
        "num_ids": 176
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    dp = [[0 for x in range(len(str))] for y in range(len(str))]\n    #str = \"babad\"\n    for i in range(1,len(str)):\n        for j in range(0,len(str)):\n            if str[i] == str[j]:\n                if j==0 or j==len(str)-1:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[i-1][j-1] + 2\n            else:\n                dp[i][j] = 0\n            print(dp[i][j],end=\" \")\n        print()\n    print()\n    #print(dp)\n    maxi = 0\n    for i in range(len(dp)):\n        for j in range(len(dp[0])):\n            if dp[i][j] > maxi:\n                maxi = dp[i][j]\n    return maxi\n",
        "num_ids": 234
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    \n    # Create a table to store solutions of subproblems. Note that the table is \n    # implicitly filled from the bottom up and stored column-wise\n    table = [[0 for x in range(n)] for y in range(n)] \n",
        "num_ids": 67
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Start the function\n    def harmonic_sum_helper(n):\n        '''\n        Helper function for harmonic sum.\n        '''\n        # Base case\n        if n == 0:\n            return 1\n        # Recursion\n        else:\n            return (n - 1) * (harmonic_sum_helper(n - 1))\n    # Return the result\n    return harmonic_sum_helper(n)\n",
        "num_ids": 67
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    assert isinstance(n, int), f\"{n} is not an integer.\"\n    assert n >= 1, \"n must be >= 1.\"\n    return 1 / (n * (n - 1))\n",
        "num_ids": 49
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    return n/2 + harmonic_sum(n-1)\n",
        "num_ids": 28
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    if n > 0:\n        sum = n * (n-1) / 2\n        n = n - 1\n        while n > 0:\n            sum += n\n            n = n - 1\n        return sum\n    else:\n        return 0\n",
        "num_ids": 65
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n + harmonic_sum(n-1) if n > 1 else 0\n",
        "num_ids": 23
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n + harmonic_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n + harmonic_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (1 / (n - 1)) + harmonic_sum(n - 1)\n",
        "num_ids": 37
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    return (n + harmonic_sum(n - 1)) / n\n",
        "num_ids": 29
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + (1/n-1) + (1/n-2) +... + (1/n-2)\n    \n    \ndef gcd(a,b):\n    '''\n    Write a function that takes two integers a and b and returns the GCD of a and b.\n    '''\n    while b!= 0:\n        r = a % b\n        a = b\n        b = r\n    return a\n    \n    \ndef common_divisor(a, b):\n    '''\n    Write a function that takes two integers a and b and returns the common divisor of a and b.\n    '''\n    while a!= 0 and b!= 0:\n        r = a % b\n        a = b\n        b = r\n    return a\n    \n    \ndef is_prime(n):\n    '''\n    Write a function that takes a positive integer and returns True if it is prime and False otherwise.\n    '''\n    if n > 1:\n        for x in range(2, n):\n            if (n % x) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n    \n    \ndef car(lst):\n    '''\n    Write a function that takes a list of integers and returns a new list that contains the first element of each item in the original list.\n    '''\n    return [lst[0]] + car(lst[1:])\n    \n    \ndef product(lst):\n    '''\n    Write a function that takes a list of integers and returns the product of the first element of each item in the original list.\n    '''\n    if len(lst) == 0:\n        return 1\n    else:\n        return lst[0] * product(lst[1:])\n    \n    \ndef fact(n):\n    '''\n    Write a function that takes a positive integer and returns the product of all positive integers that are smaller than or equal to n.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * fact(n-1)\n    \n    \ndef fibonacci(n):\n    '''\n    Write a function that takes a positive integer and returns the nth value in the Fibonacci series.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n    \n    \ndef factorial(n):\n    '''\n    Write a function that takes a positive integer and returns the product of the first n integers in the Fibonacci series.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return factorial(n-1) * fibonacci(n)\n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function that takes a string and returns True if the string is a palindrome and False otherwise.\n    '''\n    return s == s[::-1]\n    \n    \ndef longest_common_prefix(str1, str2):\n    '''\n    Write a function that takes two strings and returns the longest common prefix between them.\n    '''\n    if str1 == str2:\n        return str1\n    if str1 == '' or str2 == '':\n        return ''\n    for i in range(min(len(str1), len(str2))):\n        if str1[i]!= str2[i]:\n            return str1[:i]\n    return str1[:i+1]\n    \n    \ndef sum_of_squares(n):\n    '''\n    Write a function that takes a positive integer n and returns the sum of the squares of the integers from 1 to n.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n**2) + sum_of_squares(n-1)\n    \n    \ndef even_fibonacci(n):\n    '''\n    Write a function that takes a positive integer and returns the nth even Fibonacci number.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return even_fibonacci(n-1) + even_fibonacci(n-2)\n    \n    \ndef is_palindrome_back(s):\n    '''\n    Write a function that takes a string and returns True if the string is a palindrome and False otherwise.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function that takes a string and returns True if the string is a palindrome and False otherwise.\n    '''\n    if s == '':\n        return True\n    else:\n        i = 0\n        j = len(s)-1\n        while i <= j:\n            if s[i]!= s[j]:\n                return False\n            i += 1\n            j -= 1\n    return True\n    \n    \ndef get_strings_from_list(lst):\n    '''\n    Write a function that takes a list of strings and returns a list of strings made up of the first two and last two characters of each string in the list.\n    '''\n    new_lst = []\n    for s in lst:\n        new_lst += [s[:2] + s[-2:] ]\n    return new_lst\n    \n    \ndef check_if_pandigital(n):\n    '''\n    Write a function that takes a positive integer and returns True if the integer is pandigital and False otherwise.\n    '''\n    s = str(n)\n    if len(s) == len(set(s)):\n        return True\n    else:\n        return False\n    \n    \ndef is_pandigital(n):\n    '''\n    Write a function that takes a positive integer and returns True if the integer is pandigital and False otherwise.\n    '''\n    if len(str(n)) == len(set(str(n))):\n        return True\n    else:\n        return False\n    \n    \ndef is_anagram(s, t):\n    '''\n    Write a function that takes two strings and returns True if the strings are anagrams and False otherwise.\n    '''\n    if sorted(s) == sorted(t):\n        return True\n    else:\n        return False\n    \n    \ndef get_anagrams(s):\n    '''\n    Write a function that takes a string and returns a list of the anagrams of the string.\n    '''\n    return sorted(sorted(s))\n    \n    \ndef all_the_same(lst):\n    '''\n    Write a function that takes a list and returns True if all the elements in the list are the same and False otherwise.\n    '''\n    if len(lst) == 1:\n        return True\n    else:\n        for i in range(1, len(lst)):\n            if lst[i]!= lst[0]:\n                return False\n    return True\n    \n    \ndef find_the_smallest(lst):\n    '''\n    Write a function that takes a list of integers and returns the smallest integer.\n    '''\n    if len(lst) == 0:\n        return False\n    else:\n        return min(lst)\n    \n    \ndef is_the_same_elements(lst1, lst2):\n    '''\n    Write a function that takes two lists of integers and returns True if the lists have the same elements and False otherwise.\n    '''\n    if len(lst1) == 0:\n        return False\n    elif len(lst2) == 0:\n        return False\n    else:\n        if lst1 == lst2:\n            return True\n        else:\n            return False\n            \n    \ndef is_the_same_length(lst1, lst2):\n    '''\n    Write a function that takes two lists of integers and returns True if the lists have the same length and False otherwise.\n    '''\n    if len(lst1) == len(lst2):\n        return True\n    else:\n        return False\n    \n    \ndef sum_of_two_lists(lst1, lst2):\n    '''\n    Write a function that takes two lists of integers and returns a ne",
        "num_ids": 16
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    final = []\n    for element in array_nums1:\n        if element in array_nums2:\n            final.append(element)\n    return final\n",
        "num_ids": 41
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array1 = array_nums1\n    array2 = array_nums2\n    array_nums = []\n    # if array1 and array2 is empty, return empty array\n    if len(array1) == 0 and len(array2) == 0:\n        return array_nums\n    # if array1 is empty, return array2\n    elif len(array1) == 0:\n        return array2\n    # if array2 is empty, return array1\n    elif len(array2) == 0:\n        return array1\n    # if array1 and array2 are not empty\n    else:\n        for num in array1:\n            if num in array2:\n                array_nums.append(num)\n        return array_nums\n",
        "num_ids": 179
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    arr1 = []\n    arr2 = []\n    n = len(array_nums1)\n    m = len(array_nums2)\n    for i in range(n):\n        if array_nums1[i] not in arr1:\n            arr1.append(array_nums1[i])\n    for i in range(m):\n        if array_nums2[i] not in arr2:\n            arr2.append(array_nums2[i])\n    intersection = []\n    for i in range(len(arr1)):\n        if arr1[i] in arr2:\n            intersection.append(arr1[i])\n    return intersection\n",
        "num_ids": 165
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    list_nums = []\n    for item in array_nums1:\n        if item in array_nums2:\n            list_nums.append(item)\n    return list_nums\n",
        "num_ids": 50
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    # iterate through array 1\n    for i in range(0, len(array_nums1)):\n        # iterate through array 2\n        for j in range(0, len(array_nums2)):\n            # if nums1[i] == nums2[j]\n            if array_nums1[i] == array_nums2[j]:\n                result.append(array_nums1[i])\n    return result\n",
        "num_ids": 114
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_set1 = set(array_nums1)\n    array_set2 = set(array_nums2)\n    intersection_set = array_set1.intersection(array_set2)\n    return list(intersection_set)\n",
        "num_ids": 62
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # set_arrays = set(array_nums1)\n    # set_arrays.update(array_nums2)\n    # return list(set_arrays)\n",
        "num_ids": 45
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    set_intersection = set1.intersection(set2)\n    return list(set_intersection)\n",
        "num_ids": 54
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1) == 0 or len(array_nums2) == 0:\n        return []\n    else:\n        intersection = set(array_nums1) & set(array_nums2)\n        return list(intersection)\n",
        "num_ids": 65
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for element in array_nums1:\n        if element in array_nums2:\n            intersection.append(element)\n    return intersection\n    \n",
        "num_ids": 45
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for num in tup:\n        if num == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return len([item for item in tup if item == x])\n",
        "num_ids": 18
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    if len(tup) == 0:\n        return 0\n    if tup[0] == x:\n        return 1 + count_X(tup[1:], x)\n    else:\n        return count_X(tup[1:], x)\n",
        "num_ids": 64
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    occ = 0\n    for elem in tup:\n        if elem == x:\n            occ += 1\n    return occ\n",
        "num_ids": 33
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if x == i:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "num_ids": 12
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if element == list[i]:\n            list.insert(i,element)\n            break\n    return list\nprint(insert_element([1,2,3,4],5))\n",
        "num_ids": 57
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if list[i]!= element:\n            list.insert(i, element)\n            break\n    return list\n",
        "num_ids": 42
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for index in range(0,len(list)):\n        if list[index] == element:\n            new_list.insert(index,element)\n            continue\n        else:\n            new_list.append(list[index])\n    return new_list\nprint(insert_element([1,2,3],5))\n",
        "num_ids": 85
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if list[i] == element:\n            list.insert(i, element)\n            return list\n    return list\n",
        "num_ids": 42
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Your code goes here\n    return list + [element]\n    \n",
        "num_ids": 19
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(0,len(list)):\n        if list[i]==element:\n            list.insert(i,element)\n            return list\n",
        "num_ids": 40
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if not list:\n        return list\n    elif list[0] == element:\n        return [element] + list\n    else:\n        return [list[0]] + insert_element(list[1:],element)\n",
        "num_ids": 55
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i,element)\n        \n        return list\n",
        "num_ids": 30
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n",
        "num_ids": 28
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list[:1] + [element] + list[1:]\n",
        "num_ids": 19
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in range(len(numbers)):\n        numbers[i] = cmath.rect(numbers[i].real, numbers[i].imag)\n    return numbers\n",
        "num_ids": 45
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Real part of the complex numbers\n    a = numbers[0]\n    # Imaginary part of the complex numbers\n    b = numbers[1]\n    # Distances\n    radius = (a**2 + b**2)**0.5\n    # Angle\n    angle = cmath.phase(complex(a,b))\n    #print(radius)\n    #print(angle)\n    return (radius,angle)\n    \n    # Given the below complex numbers\na = complex(3,4)\nb = complex(2,-5)\nc = complex(8,9)\nd = complex(3,-5)\ne = complex(5,-1)\nf = complex(0,1)\ng = complex(3,3)\nh = complex(-3,3)\ni = complex(3,-2)\nj = complex(5,-7)\nk = complex(9,3)\n",
        "num_ids": 209
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import math\n    for i in numbers:\n        if i == complex(0,0):\n            print(\"Polar coordinates are not possible because number 0 is in magnitude.\")\n        else:\n            print(f\"Magnitude of {i} = {cmath.polar(i)[0]}, angle of {i} = {cmath.polar(i)[1]}\\n\")\n            print(f\"Value of modulus = {math.modf(cmath.polar(i)[0])[0]}, Value of 2nd digit of modulus = {math.modf(cmath.polar(i)[0])[1]}\")\n        \n",
        "num_ids": 152
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    re_num=[]\n    im_num=[]\n    for i in numbers:\n        re_num.append(i.real)\n        im_num.append(i.imag)\n    return re_num,im_num\n",
        "num_ids": 57
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    x = []\n    for number in numbers:\n        x.append(cmath.polar(number))\n    return x\n",
        "num_ids": 32
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r = []\n    for n in numbers:\n        r.append(n.real)\n        r.append(n.imag)\n    return r\n",
        "num_ids": 38
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    radius = 0\n    for i in numbers:\n        radius = radius + abs(i)\n    radius = radius/len(numbers)\n    #print(radius)\n    angle = 0\n    for i in numbers:\n        angle = angle + cmath.phase(i)\n    angle = angle/len(numbers)\n    return(radius,angle)\n",
        "num_ids": 86
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in range(0,len(numbers)):\n        numbers[i]=complex(numbers[i])\n    c1, s1 = cmath.polar(numbers[0])\n    c2, s2 = cmath.polar(numbers[1])\n    c3, s3 = cmath.polar(numbers[2])\n    c4, s4 = cmath.polar(numbers[3])\n    return(c1,s1,c2,s2,c3,s3,c4,s4)\n    \ndef polar_conversion(number):\n    '''\n    Write a python function to convert polar coordinates to complex numbers.\n    '''\n    c1,s1,c2,s2,c3,s3,c4,s4 = number\n    d1 = cmath.rect(s1,c1)\n    d2 = cmath.rect(s2,c2)\n    d3 = cmath.rect(s3,c3)\n    d4 = cmath.rect(s4,c4)\n    return(d1,d2,d3,d4)\n    \ndef add(numbers):\n    '''\n    Write a python function to add 2 complex numbers.\n    '''\n    for i in range(0,len(numbers)):\n        numbers[i]=complex(numbers[i])\n    c1, s1 = cmath.polar(numbers[0])\n    c2, s2 = cmath.polar(numbers[1])\n    c3, s3 = cmath.polar(numbers[2])\n    c4, s4 = cmath.polar(numbers[3])\n    d1 = cmath.rect(s1+s2,c1+c2)\n    d2 = cmath.rect(s3+s4,c3+c4)\n    return(c1,s1,c2,s2,c3,s3,c4,s4,d1,d2)\n    \ndef subtract(numbers):\n    '''\n    Write a python function to subtract 2 complex numbers.\n    '''\n    for i in range(0,len(numbers)):\n        numbers[i]=complex(numbers[i])\n    c1, s1 = cmath.polar(numbers[0])\n    c2, s2 = cmath.polar(numbers[1])\n    c3, s3 = cmath.polar(numbers[2])\n    c4, s4 = cmath.polar(numbers[3])\n    d1 = cmath.rect(s1-s2,c1-c2)\n    d2 = cmath.rect(s3-s4,c3-c4)\n    return(c1,s1,c2,s2,c3,s3,c4,s4,d1,d2)\n    \ndef multiply(numbers):\n    '''\n    Write a python function to multiply 2 complex numbers.\n    '''\n    for i in range(0,len(numbers)):\n        numbers[i]=complex(numbers[i])\n    c1, s1 = cmath.polar(numbers[0])\n    c2, s2 = cmath.polar(numbers[1])\n    c3, s3 = cmath.polar(numbers[2])\n    c4, s4 = cmath.polar(numbers[3])\n    d1 = cmath.rect(s1*s2,c1*c2)\n    d2 = cmath.rect(s3*s4,c3*c4)\n    return(c1,s1,c2,s2,c3,s3,c4,s4,d1,d2)\n    \ndef divide(numbers):\n    '''\n    Write a python function to divide 2 complex numbers.\n    '''\n    for i in range(0,len(numbers)):\n        numbers[i]=complex(numbers[i])\n    c1, s1 = cmath.polar(numbers[0])\n    c2, s2 = cmath.polar(numbers[1])\n    c3, s3 = cmath.polar(numbers[2])\n    c4, s4 = cmath.polar(numbers[3])\n    d1 = cmath.rect(s1/s2,c1/c2)\n    d2 = cmath.rect(s3/s4,c3/c4)\n    return(c1,s1,c2,s2,c3,s3,c4,s4,d1,d2)\n    \ndef power(numbers):\n    '''\n    Write a python function to raise a complex number to a power.\n    '''\n    for i in range(0,len(numbers)):\n        numbers[i]=complex(numbers[i])\n    c1, s1 = cmath.polar(numbers[0])\n    c2, s2 = cmath.polar(numbers[1])\n    c3, s3 = cmath.polar(numbers[2])\n    c4, s4 = cmath.polar(numbers[3])\n    d1 = cmath.rect(c1**s2,c1**c2)\n    d2 = cmath.rect(c3**s4,c3**c4)\n    return(c1,s1,c2,s2,c3,s3,c4,s4,d1,d2)\n    \ndef modulus(numbers):\n    '''\n    Write a python function to find the modulus of a complex number.\n    '''\n    for i in range(0,len(numbers)):\n        numbers[i]=complex(numbers[i])\n    c1, s1 = cmath.polar(numbers[0])\n    c2, s2 = cmath.polar(numbers[1])\n    c3, s3 = cmath.polar(numbers[2])\n    c4, s4 = cmath.polar(numbers[3])\n    d1 = cmath.rect(s1**2,c1**2)\n    d2 = cmath.rect(s2**2,c2**2)\n    d3 = cmath.rect(s3**2,c3**2)\n    d4 = cmath.rect(s4**2,c4**2)\n    return(c1,s1,c2,s2,c3,s3,c4,s4,d1,d2,d3,d4)\n    \ndef polar_add(numbers):\n    '''\n    Write a python function to add complex numbers to polar coordinates.\n    '''\n    for i in range(0,len(numbers)):\n        numbers[i]=complex(numbers[i])\n    c1, s1 = cmath.polar(numbers[0])\n    c2, s2 = cmath.polar(numbers[1])\n    c3, s3 = cmath.polar(numbers[2])\n    c4, s4 = cmath.polar(numbers[3])\n    d1 = cmath.rect(s1+s2,c1+c2)\n    d2 = cmath.rect(s3+s4,c3+c4)\n    return(d1,d2)\n    \ndef polar_subtract(numbers):\n    '''\n    Write a python function to subtract complex numbers to polar coordinates.\n    '''\n    for i in range(0,len(numbers)):\n        numbers[i]=complex(numbers[i])\n    c1, s1 = cmath.polar(numbers[0])\n    c2, s2 = cmath.polar(numbers[1])\n    c3, s3 = cmath.polar(numbers[2])\n    c4, s4 = cmath.polar(numbers[3])\n    d1 = cmath.rect(s1-s2,c1-c2)\n    d2 = cmath.rect(s3-s4,c3-c4)\n    return(d1,d2)\n    \ndef polar_multiply(numbers):\n    '''\n    Write a python function to multiply complex numbers to polar coordinates.\n",
        "num_ids": 16
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    rad=0.0\n    deg=0.0\n    if len(numbers)<2:\n        print(\"invalid input\")\n        return \n    for i in range(len(numbers)):\n        if numbers[i]==complex(0,0):\n            print(\"invalid input\")\n            return \n    for j in range(len(numbers)):\n        rad=(j/len(numbers))*2*cmath.pi\n        deg=cmath.phase(numbers[j])\n        if deg<0:\n            deg=360+deg\n        deg=deg%360\n        print(f\"{rad:.2f}-{deg}i\")\n",
        "num_ids": 163
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a,b=numbers\n    r=int(b)\n    theta=int(a*(360/3.14))\n    if r<=0:\n        return r,theta\n    elif r==0:\n        if theta>0 and theta<90:\n            return r,theta\n        elif theta==90:\n            return r,theta\n        else:\n            return r,360-theta\n    else:\n        return r,(360-theta)\n",
        "num_ids": 121
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return sum(map(lambda x: type(x) is int, list1))\n",
        "num_ids": 22
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([i for i in list1 if isinstance(i, int)])\n",
        "num_ids": 22
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for ele in list1:\n        if type(ele) == int:\n            count+=1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count = count + 1\n    print(count)\n",
        "num_ids": 38
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list1)\n",
        "num_ids": 10
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for x in list1:\n        if(isinstance(x, int)):\n            count = count + 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) is int:\n            count+=1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    \n    if n == 0:\n        return []\n    if n == 1:\n        return l\n",
        "num_ids": 26
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = []\n    for c in combinations_with_replacement(l, n):\n        combos.append(c)\n    return combos\n",
        "num_ids": 37
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # l = list(range(1, 5))\n    # n = 3\n    return(list(combinations_with_replacement(l, n)))\n",
        "num_ids": 39
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    l_copy = l[:]\n    \n    for i in range(len(l_copy)):\n        if(n > i):\n            result += (l_copy[i],) * (n-1)\n        elif(n == i):\n            result.append(l_copy[i])\n    \n    return result\n",
        "num_ids": 85
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # return list(combinations(l, n))\n    # return [ (i,) + j for i in l for j in combinations_with_replacement(l, n)]\n    # return [i for i in combinations_with_replacement(l, n)]\n    # return [(i, j) for i in l for j in combinations(l, n)]\n    # return [(i, j) for i in l for j in combinations(l, n)]\n    # return [(i, j) for i in l for j in combinations_with_replacement(l, n)]\n    # return [(i, j) for i in combinations_with_replacement(l, n)]\n    # return combinations_with_replacement(l, n)\n",
        "num_ids": 172
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return (tuple(l[i:i+n]) for i in range(0, len(l), n))\n",
        "num_ids": 30
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = l + l\n    return list(combinations(l, n))\n",
        "num_ids": 21
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations_list = []\n    if n == 1:\n        return [l]\n    else:\n        for i in range(len(l)):\n            temp = l.copy()\n            temp.pop(i)\n            for i in combinations_colors(temp, n-1):\n                combinations_list.append((l[i], l[i], l[i], l[i]))\n    return combinations_list\n    \ndef print_board(board):\n    '''\n    A function that prints out the board that has been created in the code.\n    '''\n    print(\"   \", board[0], board[1], board[2])\n    print(\"   \", \" \", \" \", board[3], board[4], board[5])\n    print(\"   \", board[6], board[7], board[8])\n    print(\"\")\n    \ndef solution_value(board):\n    '''\n    A function that returns the value of the board if all the constraints are met, and the board is not a solution.\n    '''\n    if (board[0] + board[1] + board[2] == 1) and (board[3] + board[4] + board[5] == 1) and (board[6] + board[7] + board[8] == 1):\n        return -1\n    elif (board[0] + board[1] + board[2] == 2) and (board[3] + board[4] + board[5] == 2) and (board[6] + board[7] + board[8] == 2):\n        return -1\n    elif (board[0] + board[1] + board[2] == 3) and (board[3] + board[4] + board[5] == 3) and (board[6] + board[7] + board[8] == 3):\n        return -1\n    elif (board[0] + board[1] + board[2] == 4) and (board[3] + board[4] + board[5] == 4) and (board[6] + board[7] + board[8] == 4):\n        return -1\n    elif (board[0] + board[1] + board[2] == 5) and (board[3] + board[4] + board[5] == 5) and (board[6] + board[7] + board[8] == 5):\n        return -1\n    elif (board[0] + board[1] + board[2] == 6) and (board[3] + board[4] + board[5] == 6) and (board[6] + board[7] + board[8] == 6):\n        return -1\n    elif (board[0] + board[1] + board[2] == 7) and (board[3] + board[4] + board[5] == 7) and (board[6] + board[7] + board[8] == 7):\n        return -1\n    elif (board[0] + board[1] + board[2] == 8) and (board[3] + board[4] + board[5] == 8) and (board[6] + board[7] + board[8] == 8):\n        return -1\n    elif (board[0] + board[1] + board[2] == 9) and (board[3] + board[4] + board[5] == 9) and (board[6] + board[7] + board[8] == 9):\n        return -1\n    else:\n        return 1\n    \ndef find_colors(board, colors, value):\n    '''\n    A function that finds the subset of given colors in a list, with given value.\n    '''\n    if value == -1:\n        for i in board:\n            if i in colors:\n                return True\n        return False\n    else:\n        if value == 1:\n            for i in board:\n                if i in colors:\n                    colors.remove(i)\n            return True\n        else:\n            for i in board:\n                if i in colors:\n                    colors.remove(i)\n            return False\n",
        "num_ids": 101
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [(tuple(l[i:i+n])) for i in range(len(l))]\n",
        "num_ids": 28
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 0:\n        return []\n    if n == 1:\n        return l\n    l = list(l)\n    a = []\n    for i in range(len(l)):\n        b = l.copy()\n        b.remove(l[i])\n        for j in combinations_colors(b, n-1):\n            a.append((l[i],))\n            a.append(j)\n    return a\n",
        "num_ids": 106
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    #prime numbers are greater than 1\n    prime = 2\n    #prime numbers are greater than 1\n    count = 0\n    #while loop condition\n    while(prime <= n):\n        #check if given number is divisible by any prime numbers from 2 to given number\n        #if it is, the given number is not prime\n        if(n%prime == 0):\n            #break out of while loop, if the number is not prime\n            break\n        else:\n            #increment prime counter\n            prime += 1\n    #print the number of prime numbers less than n\n    if(prime == n):\n        count = 1\n    else:\n        count = 0\n    return count\n",
        "num_ids": 160
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # define a boolean function to return the prime numbers\n    def is_prime(n):\n        # loop until the number is greater than 1\n        while n > 1:\n            # check for divisibility by 2\n            if n % 2 == 0:\n                # divide the number by 2 and check if it is still greater than 1\n                n = n // 2\n                if n <= 1:\n                    return True\n            else:\n                # if not divide the number by 2\n                return False\n",
        "num_ids": 113
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    n = int(n)\n    for i in range(2,n):\n        if n % i == 0:\n            count +=1\n    if count == 0:\n        print(\"Number is prime\")\n    else:\n        print(\"Number is not prime\")\ncount_Primes_nums(15)\n",
        "num_ids": 79
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    assert n > 0\n    l = []\n    p = 1\n    for i in range(2, n):\n        p += 1\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            l.append(p)\n    return l\n",
        "num_ids": 73
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    import math\n    def prime_numbers(n):\n        if n < 3:\n            return 0\n        else:\n            nums = []\n            for i in range(2, n):\n                if i % 2 == 0:\n                    continue\n                for j in range(3, int(math.sqrt(i))+1, 2):\n                    if i % j == 0:\n                        break\n                else:\n                    nums.append(i)\n            return len(nums)\n    return prime_numbers(n)\n",
        "num_ids": 126
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n<=0:\n        return 0\n    prime_list = []\n    for i in range(n+1):\n        prime_list.append(True)\n    #print(prime_list)\n    x = 2\n    while(x*x<=n):\n        if prime_list[x]==True:\n            for i in range(x*x,n+1,x):\n                prime_list[i] = False\n        x+=1\n    return sum(prime_list)\n",
        "num_ids": 120
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    \n    prime = [True] * n\n    p = 2\n    while p * p <= n:\n        if prime[p]:\n            # remove multiples of this number\n            for i in range(p * 2, n, p):\n                prime[i] = False\n        p += 1\n    \n    count = 0\n    for p in range(2, n):\n        if prime[p]:\n            count += 1\n    \n    return count\n    \n    \n    \n        \n",
        "num_ids": 126
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Using simple loop and check prime numbers\n    count = 0\n    for i in range(2, n + 1):\n        if i > 1:\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                count = count + 1\n    return count\n",
        "num_ids": 75
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 0:\n        raise ValueError(\"The input number cannot be less than zero\")\n    prime_num = 1\n    if n == 1:\n        return 0\n    for i in range(2, n + 1):\n        prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                prime = False\n                break\n        if prime:\n            prime_num += 1\n    return prime_num\n",
        "num_ids": 106
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Assume n is a non-negative integer\n    # If n is not a non-negative integer, raise a TypeError\n",
        "num_ids": 31
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\nprint(swap_numbers(5,6))\n",
        "num_ids": 23
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a,b = b,a\n    return a,b\n    # num_1 = float(input('enter first number: '))\n    # num_2 = float(input('enter second number: '))\n    # output = (num_2,num_1)\n    # print(output)\n",
        "num_ids": 72
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    new_tuple = (b,a)\n    return new_tuple\n",
        "num_ids": 21
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n    \ndef pass_with_two_strings(x,y):\n    '''\n    Write a function that takes in two strings and returns the first string with the second string at the end.\n    '''\n    return (x + y)\n    \ndef multiply_strings(x,y):\n    '''\n    Write a function that takes in two strings and returns a single string with the first string multiplied by the second string.\n    '''\n    return (x * y)\n    \ndef divide_numbers(x,y):\n    '''\n    Write a function that takes in two numbers and returns the first number divided by the second number.\n    '''\n    return (x / y)\n    \ndef add_strings_to_numbers(x,y):\n    '''\n    Write a function that takes in two numbers and returns the first number plus the second number.\n    '''\n    return (x + y)\n    \ndef subtract_numbers(x,y):\n    '''\n    Write a function that takes in two numbers and returns the first number minus the second number.\n    '''\n    return (x - y)\n    \ndef divide_numbers_with_zero(x,y):\n    '''\n    Write a function that takes in two numbers and returns the first number divided by the second number.\n    '''\n    return (x / y)\n    \ndef multiply_numbers_with_zero(x,y):\n    '''\n    Write a function that takes in two numbers and returns the first number multiplied by the second number.\n    '''\n    return (x * y)\n    \ndef multiply_numbers_with_integer(x,y):\n    '''\n    Write a function that takes in two numbers and returns the first number multiplied by the second number.\n    '''\n    return (x * y)\n    \ndef divide_numbers_with_integer(x,y):\n    '''\n    Write a function that takes in two numbers and returns the first number divided by the second number.\n    '''\n    return (x / y)\n    \ndef add_numbers_with_integer(x,y):\n    '''\n    Write a function that takes in two numbers and returns the first number added to the second number.\n    '''\n    return (x + y)\n    \ndef subtract_numbers_with_integer(x,y):\n    '''\n    Write a function that takes in two numbers and returns the first number subtracted from the second number.\n    '''\n    return (x - y)\n    \ndef divide_numbers_with_integer(x,y):\n    '''\n    Write a function that takes in two numbers and returns the first number divided by the second number.\n    '''\n    return (x / y)\n    \ndef add_numbers_with_integer(x,y):\n    '''\n    Write a function that takes in two numbers and returns the first number added to the second number.\n    '''\n    return (x + y)\n    \ndef subtract_numbers_with_integer(x,y):\n    '''\n    Write a function that takes in two numbers and returns the first number subtracted from the second number.\n    '''\n    return (x - y)\n    \ndef divide_numbers_with_integer(x,y):\n    '''\n    Write a function that takes in two numbers and returns the first number divided by the second number.\n    '''\n    return (x / y)\n    \ndef multiply_numbers_with_integer(x,y):\n    '''\n    Write a function that takes in two numbers and returns the first number multiplied by the second number.\n    '''\n    return (x * y)\n    \ndef add_strings_with_integer(x,y):\n    '''\n    Write a function that takes in two strings and returns the first string with the second string at the end.\n    '''\n    return (x + y)\n    \ndef subtract_strings_with_integer(x,y):\n    '''\n    Write a function that takes in two strings and returns the first string minus the second string.\n    '''\n    return (x - y)\n    \ndef multiply_strings_with_integer(x,y):\n    '''\n    Write a function that takes in two strings and returns the first string multiplied by the second string.\n    '''\n    return (x * y)\n    \ndef divide_numbers_with_integer(x,y):\n    '''\n    Write a function that takes in two numbers and returns the first number divided by the second number.\n    '''\n    return (x / y)\n    \ndef subtract_strings_with_integer(x,y):\n    '''\n    Write a function that takes in two strings and returns the first string minus the second string.\n    '''\n    return (x - y)\n    \ndef multiply_numbers_with_integer(x,y):\n    '''\n    Write a function that takes in two numbers and returns the first number multiplied by the second number.\n    '''\n    return (x * y)\n    \ndef add_numbers_with_integer(x,y):\n    '''\n    Write a function that takes in two numbers and returns the first number added to the second number.\n    '''\n    return (x + y)\n    \ndef subtract_numbers_with_integer(x,y):\n    '''\n    Write a function that takes in two numbers and returns the first number subtracted from the second number.\n    '''\n    return (x - y)\n    \ndef divide_numbers_with_integer(x,y):\n    '''\n    Write a function that takes in two numbers and returns the first number divided by the second number.\n    '''\n    return (x / y)\n    \ndef add_numbers_with_integer(x,y):\n    '''\n    Write a function that takes in two numbers and returns the first number added to the second number.\n    '''\n    return (x + y)\n    \ndef subtract_numbers_with_integer(x,y):\n    '''\n    Write a function that takes in two numbers and returns the first number subtracted from the second number.\n    '''\n    return (x - y)\n    \ndef multiply_numbers_with_integer(x,y):\n    '''\n    Write a function that takes in two numbers and returns the first number multiplied by the second number.\n    '''\n    return (x * y)\n    \ndef divide_numbers_with_integer(x,y):\n    '''\n    Write a function that takes in two numbers and returns the first number divided by the second number.\n    '''\n    return (x / y)\n    \ndef add_numbers_with_integer(x,y):\n    '''\n    Write a function that takes in two numbers and returns the first number added to the second number.\n    '''\n    return (x + y)\n    \ndef subtract_numbers_with_integer(x,y):\n    '''\n    Write a function that takes in two numbers and returns the first number subtracted from the second number.\n    '''\n    return (x - y)\n    \ndef multiply_numbers_with_integer(x,y):\n    '''\n    Write a function that takes in two numbers and returns the first number multiplied by the second number.\n    '''\n    return (x * y)\n    \ndef divide_numbers_with_integer(x,y):\n    '''\n    Write a function that takes in two numbers and returns the first number divided by the second number.\n    '''\n    return (x / y)\n    \ndef add_strings_with_integer(x,y):\n    '''\n    Write a function that takes in two strings and returns the first string with the second string at the end.\n    '''\n    return (x + y)\n    \ndef subtract_strings_with_integer(x,y):\n    '''\n    Write a function that takes in two strings and returns the first string minus the second string.\n    '''\n    return (x - y)\n    \ndef multiply_strings_with_integer(x,y):\n    '''\n    Write a function that takes in two strings and returns the first string multiplied by the second string.\n    '''\n    return (x * y)\n    \ndef divide_numbers_with_integer(x,y):\n    '''\n    Write a function that takes in two numbers and returns the first number divided by the second number.\n    '''\n    return (x / y)\n    \ndef subtract_strings_with_intege",
        "num_ids": 22
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a = int(a)\n    b = int(b)\n    return (b, a)\n",
        "num_ids": 26
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    swap = b,a\n    return swap\n",
        "num_ids": 14
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a, b = b, a\n    return a, b\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2006
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return a,b\n    \ndef build_power_list(start,end):\n    '''\n    Write a function that accepts two numbers as parameters and returns a list of the first number raised to the power of each number in the range.\n    '''\n    result = []\n    for i in range(start,end+1):\n        result.append(start**i)\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup1 = sorted(test_tup1, reverse = True)\n    test_tup2 = sorted(test_tup2, reverse = True)\n    if test_tup1 == test_tup2:\n        return test_tup1\n    return test_tup1 if test_tup1[0] > test_tup2[0] else test_tup2\n",
        "num_ids": 97
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return (max(test_tup1), max(test_tup2))\n",
        "num_ids": 22
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup1 = []\n    tup2 = []\n    tup1 = tuple(test_tup1)\n    tup2 = tuple(test_tup2)\n    for i in tup1:\n        if i in tup2:\n            tup2.remove(i)\n    for j in tup2:\n        if j in tup1:\n            tup1.remove(j)\n    return tuple(tup1)\n",
        "num_ids": 109
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    lst_tup1 = test_tup1[0]\n    lst_tup2 = test_tup2[0]\n    lst_max = test_tup1[1]\n    lst_min = test_tup2[1]\n    n_max = max(lst_max)\n    n_min = min(lst_min)\n    max_tup = (n_max, lst_max)\n    min_tup = (n_min, lst_min)\n    return max_tup, min_tup\n",
        "num_ids": 138
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    min_num = min(test_tup1[0],test_tup2[0])\n    max_num = max(test_tup1[1],test_tup2[1])\n",
        "num_ids": 50
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    if len(test_tup1) >= len(test_tup2):\n        max_tup = test_tup1\n    else:\n        max_tup = test_tup2\n    for x in range(0,len(test_tup1)):\n        if test_tup1[x] > max_tup[x]:\n            max_tup = test_tup1\n        elif test_tup2[x] > max_tup[x]:\n            max_tup = test_tup2\n    return max_tup\n",
        "num_ids": 146
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1, test_tup2)\n",
        "num_ids": 19
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup1 = test_tup1[0]\n    test_tup2 = test_tup2[0]\n    if test_tup1 > test_tup2:\n        return test_tup1, test_tup2\n    else:\n        return test_tup2, test_tup1\n",
        "num_ids": 81
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    '''\n    This function should maximize the first tuple. \n    '''\n    '''\n    You can assume that all the elements in both tuples are non-negative.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[1] > test_tup2[1]:\n        tup_max = test_tup1\n    else:\n        tup_max = test_tup2\n    return tup_max\n",
        "num_ids": 57
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def isPrime(n):\n        if n == 2:\n            return True\n        elif n > 2:\n            for i in range(2,n):\n                if n % i == 0:\n                    return False\n            return True\n    i = 1\n    while True:\n        if isPrime(i):\n            i += 1\n        else:\n            break\n    return i",
        "num_ids": 90
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initializing a list for storing the primes\n    primes = []\n",
        "num_ids": 20
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    from sympy import isprime,nextprime\n    if n<2:\n        return False\n    def is_prime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n        return True\n    primes=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n    while n>0:\n        if is_prime(primes[n-1]):\n            n-=1\n        else:\n            primes.append(nextprime(primes[n-1]))\n    return primes[-1]\n",
        "num_ids": 183
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 2: return True\n    if n == 3: return False\n    for i in range(3, n+1, 2):\n        if newman_prime(i): return True\n    return False\n",
        "num_ids": 51
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # n = input(\"Enter the number of primes you need to find: \")\n    n = int(n)\n    prime = [2]\n    factors = []\n    if n == 1: \n        return prime[0]\n    # find_p = 0\n    while True:\n        prime.append(0)\n        find_p = prime[-1]\n        i = len(prime) - 1\n        while i > 0:\n            # print(prime, i, factors)\n            if i >= n:\n                return prime\n            # if prime[i] == 0:\n            #     factors.append(i)\n            for j in range(2, (i + 1)):\n                if i % j == 0:\n                    prime[i] = 0\n                    break\n            i -= 1\n        prime[-1] = find_p + 1\n",
        "num_ids": 204
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    from math import sqrt, ceil, floor\n    import itertools\n    \n    if n <= 1:\n        return n\n",
        "num_ids": 33
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    def nth_prime(n):\n        if n == 1:\n            return 2\n        res = []\n        for i in range(1, n):\n            if is_prime(i):\n                res.append(i)\n                if len(res) == n-1:\n                    return res[-1]\n    return nth_prime(n)\n",
        "num_ids": 144
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    from math import sqrt\n    prime_list = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    prime_list.append(1)\n    prime_list.append(0)\n    for i in range(len(prime_list)):\n        if prime_list[i] > sqrt(n):\n            prime_list.append(1)\n            break\n    if n in prime_list:\n        return True\n    for i in range(len(prime_list) - 1):\n        if prime_list[i] <= sqrt(n):\n            if prime_list[i] == 0:\n                return False\n            for j in range(i + 1, len(prime_list)):\n                if prime_list[j] % prime_list[i] == 0:\n                    return False\n            return True\n    return False\n",
        "num_ids": 602
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = [0,1]\n    if n == 1:\n        return 2\n    for i in range(2,n):\n        if n in prime:\n            return n\n        prime.append(i)\n    while True:\n        m = n\n        while m not in prime:\n            m += n\n        prime.append(m)\n        n += 1\n    return m\n",
        "num_ids": 92
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def isprime(n):\n        if n == 2:\n            return True\n        if n == 3:\n            return True\n        if n % 2 == 0:\n            return False\n        if n % 3 == 0:\n            return False\n        else:\n            for i in range(5, int(math.sqrt(n) + 1), 2):\n                if n % i == 0:\n                    return False\n            return True\n    n += 1\n    while n!= 2:\n        if isprime(n):\n            n += 1\n        else:\n            n += 2\n    return n\n",
        "num_ids": 141
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1])\n",
        "num_ids": 40
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    res = []\n    for ele1, ele2 in zip(test_tup1, test_tup2):\n        res.append(ele1/ele2)\n    return res\n",
        "num_ids": 46
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    print(test_tup1)\n    print(test_tup2)\n",
        "num_ids": 22
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # YOUR CODE HERE\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    \n    for i in range(len(test_tup1)):\n        test_tup1[i] = int(test_tup1[i]/test_tup2[i])\n        \n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    \n    return test_tup1\n    \n    #return test_tup1[i]/test_tup2[i]\n    \n    ",
        "num_ids": 158
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1])\n",
        "num_ids": 40
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        temp = test_tup1\n        test_tup1 = test_tup2\n        test_tup2 = temp\n    return (test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1])\n",
        "num_ids": 91
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #t1_len = len(test_tup1)\n    #t2_len = len(test_tup2)\n    if (len(test_tup1)!= len(test_tup2)):\n        raise ValueError('Tuple length mismatch: {}/{}'.format(len(test_tup1), len(test_tup2)))\n    elif (len(test_tup1) == 0) or (len(test_tup2) == 0):\n        raise ValueError('Empty Tuple')\n    elif (test_tup1 == test_tup2):\n        raise ValueError('test_tup1 == test_tup2')\n    elif (isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple)):\n        return (test_tup1[0] / test_tup2[0]), (test_tup1[1] / test_tup2[1])\n    else:\n        raise ValueError('Not a tuple: {}'.format(type(test_tup1)))\n",
        "num_ids": 258
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        if len(test_tup1) == len(test_tup2):\n            return tuple(map(lambda x, y: x / y, test_tup1, test_tup2))\n        else:\n            return (False, \"The length of tuples must be equal for division operation\")\n    except TypeError:\n        return (False, \"Invalid arguments passed\")\n",
        "num_ids": 94
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    a = 0\n    b = 0\n    #using iteration\n    for i in range(len(test_tup1)):\n        a += test_tup1[i]\n        b += test_tup2[i]\n    return a/b\n",
        "num_ids": 63
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1])\n    \ndef multiplication_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical multiplication operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0]*test_tup2[0], test_tup1[1]*test_tup2[1])\n    \ndef mod_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical modulo operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0]%test_tup2[0], test_tup1[1]%test_tup2[1])\n    \ndef mod_elements_of_two(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical modulo operation element-wise across the given tuples.\n    '''\n    return ((test_tup1[0]%test_tup2[0], test_tup1[1]%test_tup2[1]))\n    \ndef absolute_elements(test_tup1):\n    '''\n    Write a function that takes in a tuple and performs absolute value element-wise across the given tuple.\n    '''\n    return (abs(test_tup1[0]), abs(test_tup1[1]))\n    \ndef sqrt_elements(test_tup1):\n    '''\n    Write a function that takes in a tuple and performs square root element-wise across the given tuple.\n    '''\n    return (math.sqrt(test_tup1[0]), math.sqrt(test_tup1[1]))\n    \ndef gcd_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs greatest common divisor element-wise across the given tuples.\n    '''\n    return (math.gcd(test_tup1[0], test_tup1[1]), math.gcd(test_tup2[0], test_tup2[1]))\n    \ndef gcd_elements_of_two(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs greatest common divisor element-wise across the given tuples.\n    '''\n    return (math.gcd(test_tup1[0], test_tup1[1]), math.gcd(test_tup2[0], test_tup2[1]))\n    \ndef lcm_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs least common multiple element-wise across the given tuples.\n    '''\n    return (math.lcm(test_tup1[0], test_tup1[1]), math.lcm(test_tup2[0], test_tup2[1]))\n    \ndef lcm_elements_of_two(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs least common multiple element-wise across the given tuples.\n    '''\n    return (math.lcm(test_tup1[0], test_tup1[1]), math.lcm(test_tup2[0], test_tup2[1]))\n    \ndef mean_elements(test_tup1):\n    '''\n    Write a function that takes in a tuple and performs mean element-wise across the given tuple.\n    '''\n    return (sum(test_tup1[0])/len(test_tup1[0]), sum(test_tup1[1])/len(test_tup1[1]))\n    \ndef mean_elements_of_two(test_tup1):\n    '''\n    Write a function that takes in a tuple and performs mean element-wise across the given tuple.\n    '''\n    return (sum(test_tup1[0])/len(test_tup1[0]), sum(test_tup1[1])/len(test_tup1[1]))\n    \ndef median_elements(test_tup1):\n    '''\n    Write a function that takes in a tuple and performs median element-wise across the given tuple.\n    '''\n    return (sorted(test_tup1[0])[int(len(test_tup1[0])/2)], sorted(test_tup1[1])[int(len(test_tup1[1])/2)])\n    \ndef median_elements_of_two(test_tup1):\n    '''\n    Write a function that takes in a tuple and performs median element-wise across the given tuple.\n    '''\n    return (sorted(test_tup1[0])[int(len(test_tup1[0])/2)], sorted(test_tup1[1])[int(len(test_tup1[1])/2)])\n    \ndef mode_elements(test_tup1):\n    '''\n    Write a function that takes in a tuple and performs mode element-wise across the given tuple.\n    '''\n    return (max(set(test_tup1[0]), key=test_tup1[0].count), max(set(test_tup1[1]), key=test_tup1[1].count))\n    \ndef mode_elements_of_two(test_tup1):\n    '''\n    Write a function that takes in a tuple and performs mode element-wise across the given tuple.\n    '''\n    return (max(set(test_tup1[0]), key=test_tup1[0].count), max(set(test_tup1[1]), key=test_tup1[1].count))\n    \ndef median_absolute_deviation_elements(test_tup1):\n    '''\n    Write a function that takes in a tuple and performs median absolute deviation element-wise across the given tuple.\n    '''\n    return (statistics.median_absolute_deviation(test_tup1[0]), statistics.median_absolute_deviation(test_tup1[1]))\n    \ndef median_absolute_deviation_elements_of_two(test_tup1):\n    '''\n    Write a function that takes in a tuple and performs median absolute deviation element-wise across the given tuple.\n    '''\n    return (statistics.median_absolute_deviation(test_tup1[0]), statistics.median_absolute_deviation(test_tup1[1]))\n    \ndef median_dispersion_elements(test_tup1):\n    '''\n    Write a function that takes in a tuple and performs median dispersion element-wise across the given tuple.\n    '''\n    return (statistics.median_dispersion(test_tup1[0]), statistics.median_dispersion(test_tup1[1]))\n    \ndef median_dispersion_elements_of_two(test_tup1):\n    '''\n    Write a function that takes in a tuple and performs median dispersion element-wise across the given tuple.\n    '''\n    return (statistics.median_dispersion(test_tup1[0]), statistics.median_dispersion(test_tup1[1]))\n    \ndef pstdev_elements(test_tup1):\n    '''\n    Write a function that takes in a tuple and performs pstdev element-wise across the given tuple.\n    '''\n    return (statistics.pstdev(test_tup1[0]), statistics.pstdev(test_tup1[1]))\n    \ndef pstdev_elements_of_two(test_tup1):\n    '''\n    Write a function that takes in a tuple and performs pstdev element-wise across the given tuple.\n    '''\n    return (statistics.ps",
        "num_ids": 9
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    i = 0\n    j = len(list1) - 1\n    res1 = list1[:L]\n    res2 = list1[L:]\n    while i < j:\n        if len(res1) == len(res2):\n            break\n        else:\n            i += 1\n    return (res1, res2)\n",
        "num_ids": 82
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    a = list1[:L]\n    b = list1[L:]\n    return a, b\n",
        "num_ids": 27
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    i = 0\n    list1_part1 = []\n    list1_part2 = []\n    list2_part1 = []\n    list2_part2 = []\n    list3_part1 = []\n    list3_part2 = []\n    list4_part1 = []\n    list4_part2 = []\n",
        "num_ids": 79
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Your code here\n    return (list1[:L], list1[L:])\n",
        "num_ids": 24
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if not isinstance(list1, list) or not isinstance(L, int):\n        raise ValueError(\"Invalid parameters.\")\n    if not 0 < L <= len(list1):\n        raise ValueError(\"Invalid parameters.\")\n    return tuple(list1[:L], list1[L:])\n",
        "num_ids": 71
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n",
        "num_ids": 37
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first = list1[:L]\n    second = list1[L:]\n    return first, second\n    \n    \n    \ndef find_unique_elements(list1):\n    '''\n    Write a function that takes in a list and returns a dictionary where the keys are the unique values in the list and the values are the indices in which they occur. \n    '''\n    \n    dictionary = {}\n    for i in range(len(list1)):\n        if list1[i] in dictionary:\n            dictionary[list1[i]] += 1\n        else:\n            dictionary[list1[i]] = 1\n    return dictionary\n",
        "num_ids": 66
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n",
        "num_ids": 18
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    i = 0\n    output = (None, None)\n    while i < len(list1):\n        output = (output[0], list1[i:i+L])\n        i += L\n    return output\n",
        "num_ids": 53
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    if L > len(list1):\n        return False\n    else:\n        return (list1[:L], list1[L:])\n",
        "num_ids": 38
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    h_age = float(h_age)\n    dog_age_in_years = h_age / 7.0\n    return dog_age_in_years\n",
        "num_ids": 41
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age * 7\n    return d_age\n    \n",
        "num_ids": 21
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return int((h_age * 7) / 4)\n",
        "num_ids": 16
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return (20.0 + (h_age * 7.0))\n",
        "num_ids": 19
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "num_ids": 10
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age * 7\n    print(\"The dog's age in dog's years is\", d_age)\n",
        "num_ids": 31
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years\n",
        "num_ids": 19
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = h_age * 7\n    return(age)\n",
        "num_ids": 17
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "num_ids": 10
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    dog_years = (h_age*7)\n    return dog_years\n    \ndef dog_weight(weight):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    \n    dog_pounds = (weight*4)\n    return dog_pounds\n    \ndef dog_years_to_weight(dog_age, dog_weight):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    \n    dog_years_to_weight = (dog_weight/ (dog_age*7))\n    return dog_years_to_weight\n    \ndef dog_weight_to_dog_years(dog_weight, dog_years_to_weight):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    \n    dog_weight_to_dog_years = (dog_weight* (dog_years_to_weight*7))\n    return dog_weight_to_dog_years\n    \ndef dog_calculator(dog_weight, dog_age, dog_years_to_weight):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    \n    dog_calculator = (dog_weight * dog_age)\n    return dog_calculator\n    \ndef dog_weight_to_dog_age(dog_weight, dog_weight_to_dog_years):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    dog_weight_to_dog_age = (dog_weight / (dog_weight_to_dog_years * 7))\n    return dog_weight_to_dog_age\n    \ndef dog_weight_to_dog_years(dog_weight, dog_calculator):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    \n    dog_weight_to_dog_years = (dog_weight/ (dog_calculator*7))\n    return dog_weight_to_dog_years\n    \ndef dog_calculator_2(dog_weight, dog_age, dog_years_to_weight):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    \n    dog_calculator_2 = (dog_weight * dog_age)\n    return dog_calculator_2\n    \ndef dog_weight_to_dog_age(dog_weight, dog_weight_to_dog_years):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    dog_weight_to_dog_age = (dog_weight/ (dog_weight_to_dog_years * 7))\n    return dog_weight_to_dog_age\n    \ndef dog_weight_to_dog_years(dog_weight, dog_calculator_2):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    \n    dog_weight_to_dog_years = (dog_weight/ (dog_calculator_2*7))\n    return dog_weight_to_dog_years\n    \ndef dog_calculator_3(dog_weight, dog_age, dog_weight_to_dog_years):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    \n    dog_calculator_3 = (dog_weight * dog_age)\n    return dog_calculator_3\n    \ndef dog_weight_to_dog_age(dog_weight, dog_weight_to_dog_years):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    dog_weight_to_dog_age = (dog_weight/ (dog_weight_to_dog_years * 7))\n    return dog_weight_to_dog_age\n    \ndef dog_weight_to_dog_years(dog_weight, dog_calculator_3):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    \n    dog_weight_to_dog_years = (dog_weight/ (dog_calculator_3*7))\n    return dog_weight_to_dog_years\n    \ndef dog_calculator_4(dog_weight, dog_age, dog_weight_to_dog_years):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    \n    dog_calculator_4 = (dog_weight * dog_age)\n    return dog_calculator_4\n    \ndef dog_weight_to_dog_age(dog_weight, dog_weight_to_dog_years):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    dog_weight_to_dog_age = (dog_weight/ (dog_weight_to_dog_years * 7))\n    return dog_weight_to_dog_age\n    \ndef dog_weight_to_dog_years(dog_weight, dog_calculator_4):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    \n    dog_weight_to_dog_years = (dog_weight/ (dog_calculator_4*7))\n    return dog_weight_to_dog_years\n    \ndef dog_calculator_5(dog_weight, dog_age, dog_weight_to_dog_years):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    \n    dog_calculator_5 = (dog_weight * dog_age)\n    return dog_calculator_5\n    \ndef dog_weight_to_dog_age(dog_weight, dog_weight_to_dog_years):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    dog_weight_to_dog_age = (dog_weight/ (dog_weight_to_dog_years * 7))\n    return dog_weight_to_dog_age\n    \ndef dog_weight_to_dog_years(dog_weight, dog_calculator_5):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    \n    dog_weight_to_dog_years = (dog_weight/ (dog_calculator_5*7))\n    return dog_weight_to_dog_years\n    \ndef dog_calculator_6(dog_weight, dog_age, dog_weight_to_dog_years):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    \n    dog_calculator_6 = (dog_weight * dog_age)\n    return dog_calculator_6\n    \ndef dog_weight_to_dog_age(dog_weight, dog_weight_to_dog_years):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    dog_weight_to_dog_age = (dog_weight/ (dog_weight_to_dog_years * 7))\n    return dog_weight_to_dog_age\n    \ndef dog_weight_to_dog_years(dog_weight, dog_calculator_6):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    \n    dog_weight_to_dog_years = (dog_weight/ (dog_calculator_6*7))\n    return dog_weight_to_dog_years\n    \ndef dog_calculator_7(dog_weight, dog_age, dog_weight_to_dog_years):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    \n    dog_calculator_7 = (dog_weight * dog_age)\n    return dog_calculator_7\n    \ndef dog_weight_to_dog_age(dog_weight, dog_weight_to_dog_years):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    dog_weight_to_dog_age = (dog_weight/ (dog_weight_to_dog_years * 7))\n    return dog_weight_t",
        "num_ids": 41
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step==0:\n        return([S])\n    else:\n        return([S[i:i+step] for i in range(0,len(S),step)])\n",
        "num_ids": 45
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return_list = []\n    if len(S) < step:\n        return S\n    else:\n        for i in range(0, len(S), step):\n            return_list.append(S[i:i+step])\n        return return_list\n",
        "num_ids": 64
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n    \n    \n    \n",
        "num_ids": 46
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return ([S[i::step] for i in range(step)])\n",
        "num_ids": 20
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if not S:\n        return []\n    elif not isinstance(S, list):\n        return S\n",
        "num_ids": 28
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    output = []\n    for i in range(len(S)):\n        if i % step == 0:\n            output.append(S[i:i + step])\n    return output\n",
        "num_ids": 46
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    L=[]\n    L1=[]\n    for i in range(len(S)):\n        if i % step == 0:\n            L.append(S[i:i+1])\n    for i in range(len(L)):\n        L1.append(L[i])\n    return L1\n",
        "num_ids": 78
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S1 = S\n    S2 = S1\n    S3 = S1\n    S4 = S1\n    S5 = S1\n    S6 = S1\n    S7 = S1\n    S8 = S1\n    S9 = S1\n    S10 = S1\n    S11 = S1\n    S12 = S1\n    S13 = S1\n    S14 = S1\n    S15 = S1\n    S16 = S1\n    S17 = S1\n    S18 = S1\n    S19 = S1\n    S20 = S1\n    S21 = S1\n    S22 = S1\n    S23 = S1\n    S24 = S1\n    S25 = S1\n    S26 = S1\n    S27 = S1\n    S28 = S1\n    S29 = S1\n    S30 = S1\n    S31 = S1\n    S32 = S1\n    S33 = S1\n    S34 = S1\n    S35 = S1\n    S36 = S1\n    S37 = S1\n    S38 = S1\n    S39 = S1\n    S40 = S1\n    S41 = S1\n    S42 = S1\n    S43 = S1\n    S44 = S1\n    S45 = S1\n    S46 = S1\n    S47 = S1\n    S48 = S1\n    S49 = S1\n    S50 = S1\n    S51 = S1\n    S52 = S1\n    S53 = S1\n    S54 = S1\n    S55 = S1\n    S56 = S1\n    S57 = S1\n    S58 = S1\n    S59 = S1\n    S60 = S1\n    S61 = S1\n    S62 = S1\n    S63 = S1\n    S64 = S1\n    S65 = S1\n    S66 = S1\n    S67 = S1\n    S68 = S1\n    S69 = S1\n    S70 = S1\n    S71 = S1\n    S72 = S1\n    S73 = S1\n    S74 = S1\n    S75 = S1\n    S76 = S1\n    S77 = S1\n    S78 = S1\n    S79 = S1\n    S80 = S1\n    S81 = S1\n    S82 = S1\n    S83 = S1\n    S84 = S1\n    S85 = S1\n    S86 = S1\n    S87 = S1\n    S88 = S1\n    S89 = S1\n    S90 = S1\n    S91 = S1\n    S92 = S1\n    S93 = S1\n    S94 = S1\n    S95 = S1\n    S96 = S1\n    S97 = S1\n    S98 = S1\n    S99 = S1\n    S100 = S1\n    S101 = S1\n    S102 = S1\n    S103 = S1\n    S104 = S1\n    S105 = S1\n    S106 = S1\n    S107 = S1\n    S108 = S1\n    S109 = S1\n    S110 = S1\n    S111 = S1\n    S112 = S1\n    S113 = S1\n    S114 = S1\n    S115 = S1\n    S116 = S1\n    S117 = S1\n    S118 = S1\n    S119 = S1\n    S120 = S1\n    S121 = S1\n    S122 = S1\n    S123 = S1\n    S124 = S1\n    S125 = S1\n    S126 = S1\n    S127 = S1\n    S128 = S1\n    S129 = S1\n    S130 = S1\n    S131 = S1\n    S132 = S1\n    S133 = S1\n    S134 = S1\n    S135 = S1\n    S136 = S1\n    S137 = S1\n    S138 = S1\n    S139 = S1\n    S140 = S1\n    S141 = S1\n    S142 = S1\n    S143 = S1\n    S144 = S1\n    S145 = S1\n    S146 = S1\n    S147 = S1\n    S148 = S1\n    S149 = S1\n    S150 = S1\n    S151 = S1\n    S152 = S1\n    S153 = S1\n    S154 = S1\n    S155 = S1\n    S156 = S1\n    S157 = S1\n    S158 = S1\n    S159 = S1\n    S160 = S1\n    S161 = S1\n    S162 = S1\n    S163 = S1\n    S164 = S1\n    S165 = S1\n    S166 = S1\n    S167 = S1\n    S168 = S1\n    S169 = S1\n    S170 = S1\n    S171 = S1\n    S172 = S1\n    S173 = S1\n    S174 = S1\n    S175 = S1\n    S176 = S1\n    S177 = S1\n    S178 = S1\n    S179 = S1\n    S180 = S1\n    S181 = S1\n    S182 = S1\n    S183 = S1\n    S184 = S1\n    S185 = S1\n    S186 = S1\n    S187 = S1\n    S188 = S1\n    S189 = S1\n    S190 = S1\n    S191 = S1\n    S192 = S1\n    S193 = S1\n    S194 = S1\n    S195 = S1\n    S196 = S1\n    S197 = S1\n    S198 = S1\n    S199 = S1\n    S200 = S1\n    S201 = S1\n    S202 = S1\n    S203 = S1\n    S204 = S1\n    S205 = S1\n    S206 = S1\n    S207 = S1\n    S208 = S1\n    S209 = S1\n    S210 = S1\n    S211 = S1\n    S212 = S1\n    S213 = S1\n    S214 = S1\n    S215 = S1\n    S216 = S1\n    S217 = S1\n    S218 = S1\n    S219 = S1\n    S220 = S1\n    S221 = S1\n    S222 = S1\n    S223 = S1\n    S224 = S1\n    S225 = S1\n    S226 = S1\n    S227 = S1\n    S228 = S1\n    S229 = S1\n    S230 = S1\n    S231 = S1\n    S232 = S1\n    S233 = S1\n    S234 = S1\n    S235 = S1\n    S236 = S1\n    S237 = S1\n    S238 = S1\n    S239 = S1\n    S240 = S1\n    S241 = S1\n    S242 = S1\n    S243 = S1\n    S244 = S1\n    S245 = S1\n    S246 = S1\n    S247 = S1\n    S248 = S1\n    S249 = S1\n    S250 = S1\n    S251 = S1\n    S252 = S1\n    S253 = S1\n    S254 = S1\n    S255 = S1\n    S256 = S1\n    S257 = S1\n    S258 = S1\n    S259 = S1\n    S260 = S1\n    S261 = S1\n    S262 = S1\n    S263 = S1\n    S264 = S1\n    S265 = S1\n    S266 = S1\n    S267 = S1\n    S268 = S1\n    S269 = S1\n    S270 = S1\n    S271 = S1\n    S272 = S1\n    S273 = S1\n    S274 = S1\n    S275 = S1\n    S276 = S1\n    S277 = S1\n    S278 = S1\n    S279 = S1\n    S280 = S1\n    S281 = S1\n    S282 = S1\n    S283 = S1\n    S284 = S1\n    S285 = S1\n    S286 ",
        "num_ids": 2000
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step > len(S):\n        return []\n    else:\n        return[S[i::step] for i in range(step)]\n",
        "num_ids": 36
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if l <= 0:\n        return 0\n    else:\n        return (3*l**2) + (l**3)\n",
        "num_ids": 33
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2\n",
        "num_ids": 8
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def lateralsurfacearea(a,b,c):\n        return(a*b*c)\n    return lateralsurfacearea(l,l,l)\n",
        "num_ids": 42
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def sasa(x):\n        return 6*x*x+2*x+1\n    return sasa(l)\n",
        "num_ids": 32
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    \n    # Answer: 3 * 2 * (side * side) - 3 * (side * side)\n    \n    return l * l * 3\n",
        "num_ids": 36
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    #raise NotImplementedError()\n",
        "num_ids": 12
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def lateralSurface(l):\n        return (l**2)*6\n    return lateralSurface(l)\n",
        "num_ids": 29
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l ** 2)\n",
        "num_ids": 12
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    count = 1\n    oddSum = 0\n    while count <= n:\n        oddSum += (count*count)\n        count += 1\n    return oddSum\n",
        "num_ids": 40
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += (i**2)\n    return sum\nprint(square_Sum(10))\n",
        "num_ids": 42
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([i**2 for i in range(1,n+1,2)])\n",
        "num_ids": 24
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        if i % 2!= 0:\n            sum += i ** 2\n    return sum\n    ",
        "num_ids": 42
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return (2*n)**2 + square_Sum(n-1)\n",
        "num_ids": 36
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if(n == 0):\n        return(0)\n    else:\n        sum_sq = 0\n        for i in range(1,n+1):\n            if i % 2!= 0:\n                sum_sq += i**2\n        return(sum_sq)\n",
        "num_ids": 67
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        if i%2!= 0:\n            total += i**2\n    return total\n",
        "num_ids": 41
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    #To get the sum of squares we need to add the squares of odd numbers\n    odd_numbers = []\n    for i in range(1,n+1):\n        if(i%2!=0):\n            odd_numbers.append(i**2)\n    \n    return sum(odd_numbers)\n",
        "num_ids": 77
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum+=i**2\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Write your solution below:\n    ans = 0\n    for i in range(1,n,2):\n        ans = ans + i ** 2\n    return ans\n",
        "num_ids": 41
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        return find_star_num(n-1) + find_star_num(n-2) + find_star_num(n-3)\n",
        "num_ids": 64
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star = 3\n    total = 0\n    while n >= 1:\n        if n == 1:\n            total += n*star\n            break\n        total += (n-1)*star\n        n = n-1\n        star += 2\n    return total\n",
        "num_ids": 62
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n * (n-1) // 2\n",
        "num_ids": 29
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return 1\n",
        "num_ids": 6
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return (1 + 5 ** (n - 1)) / 2\n",
        "num_ids": 17
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    a = 1\n    while a < n:\n        a += 1\n    return a\n",
        "num_ids": 23
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    return 2 * (find_star_num(n - 1)) + 1\n",
        "num_ids": 31
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # find 1st star number\n    n = int(n/2) + 1\n    star_num = [1]\n    # findn'th star number\n    i = 2\n    while i <= n:\n        star_num.append(star_num[i-1] + star_num[i-2])\n        i += 1\n    return star_num[n-1]\n",
        "num_ids": 93
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    nums = ['1','2','3','4','5','6','7','8','9']\n",
        "num_ids": 26
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    n=int(n)\n    if n==1:\n        return 2\n    elif n==2:\n        return 3\n    else:\n        total=0\n        for i in range(1,n):\n            total+=i\n        return total\n",
        "num_ids": 62
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \n    \nprint(ascii_value('h'))\n",
        "num_ids": 25
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # return ord(k)\n    return ord(k)\n",
        "num_ids": 17
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    i = 0\n    total = 0\n    if len(arr) == 0:\n        return total\n    while i < len(arr):\n        if i%2 == 0 and i < len(arr):\n            total += arr[i]\n        i += 1\n    return total\n",
        "num_ids": 67
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    s = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            s += arr[i]\n    return s\n",
        "num_ids": 46
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i]%2 == 0:\n            sum += arr[i]\n            print(i)\n    return sum\n",
        "num_ids": 49
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum = even_sum + arr[i]\n",
        "num_ids": 49
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even\n",
        "num_ids": 49
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    res = 0\n    for i in range(0,len(arr)):\n        if i%2==0:\n            res+=arr[i]\n    return res\n",
        "num_ids": 42
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even\n",
        "num_ids": 49
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[::2])\n",
        "num_ids": 12
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_list = []\n    even_sum = 0\n    for i in range(0, len(arr)):\n        if arr[i] % 2 == 0:\n            even_list.append(arr[i])\n            even_sum += arr[i]\n    for i in range(0, len(even_list)):\n        if i % 2 == 0:\n            even_sum += even_list[i]\n    return even_sum\n",
        "num_ids": 107
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n",
        "num_ids": 46
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        if i**5 % 2 == 0:\n            sum += i**5\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i ** 5\n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            total += i**5\n    return total\n",
        "num_ids": 40
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(n):\n        total += pow(2,5)\n    return total\nprint(even_Power_Sum(10))\n",
        "num_ids": 41
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if i%2==0:\n            sum+=i**5\n    return sum\n",
        "num_ids": 40
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(n) if i%2 ==0])\n    \ndef even_Power_Sum2(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(n) if i%2 ==0])\n    \ndef even_Power_Sum3(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(n) if i%2 ==0])\n    \ndef even_Power_Sum4(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(n) if i%2 ==0])\n    \ndef even_Power_Sum5(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(n) if i%2 ==0])\n    \ndef even_Power_Sum6(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(n) if i%2 ==0])\n    \ndef even_Power_Sum7(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(n) if i%2 ==0])\n    \ndef even_Power_Sum8(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(n) if i%2 ==0])\n    \ndef even_Power_Sum9(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(n) if i%2 ==0])\n    \ndef even_Power_Sum10(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(n) if i%2 ==0])\n    \ndef even_Power_Sum11(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(n) if i%2 ==0])\n    \ndef even_Power_Sum12(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(n) if i%2 ==0])\n    \ndef even_Power_Sum13(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(n) if i%2 ==0])\n    \ndef even_Power_Sum14(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(n) if i%2 ==0])\n    \ndef even_Power_Sum15(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(n) if i%2 ==0])\n    \ndef even_Power_Sum16(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(n) if i%2 ==0])\n    \ndef even_Power_Sum17(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(n) if i%2 ==0])\n    \ndef even_Power_Sum18(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(n) if i%2 ==0])\n    \ndef even_Power_Sum19(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(n) if i%2 ==0])\n    \ndef even_Power_Sum20(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(n) if i%2 ==0])\n    \ndef even_Power_Sum21(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(n) if i%2 ==0])\n    \ndef even_Power_Sum22(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(n) if i%2 ==0])\n    \ndef even_Power_Sum23(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(n) if i%2 ==0])\n    \ndef even_Power_Sum24(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(n) if i%2 ==0])\n    \ndef even_Power_Sum25(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(n) if i%2 ==0])\n    \ndef even_Power_Sum26(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(n) if i%2 ==0])\n    \ndef even_Power_Sum27(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(n) if i%2 ==0])\n    \ndef even_Power_Sum28(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''",
        "num_ids": 1
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total_sum = 0\n    for i in range(n):\n        if (i % 2) == 0:\n            total_sum = total_sum + (i**5)\n    print(\"Sum of the first \" + str(n) + \" even numbers raised to the fifth power: \" + str(total_sum))\n    \neven_Power_Sum(10)\neven_Power_Sum(20)\neven_Power_Sum(100)\n",
        "num_ids": 105
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2==0:\n            sum = sum + i**5\n    return sum",
        "num_ids": 37
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2 == 0:\n            sum = sum + i**5\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    x = 0\n    for i in range(n+1):\n        x += i**5\n    return x\n",
        "num_ids": 29
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [i[-1] for i in test_list]\n",
        "num_ids": 18
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [list(tuple)[-1] for tuple in test_list]\n",
        "num_ids": 21
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return(test_list[::-1])\n",
        "num_ids": 14
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[2] for tup in test_list]\n",
        "num_ids": 19
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [element[1] for element in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    extracted_list = []\n    for i in test_list:\n        extracted_list.append(i[1])\n    return extracted_list\n",
        "num_ids": 38
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][1])\n    return rear_list\n",
        "num_ids": 47
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[-1] for x in test_list]\n",
        "num_ids": 18
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [test_list[i][2] for i in range(len(test_list))]\n",
        "num_ids": 26
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        if test_list[i][0] == \"rear\":\n            new_list.append(test_list[i][1])\n    return new_list\n",
        "num_ids": 61
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]\n    return test_tup1\n",
        "num_ids": 54
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1, test_tup2 = tuple(test_tup1), tuple(test_tup2)\n    if len(test_tup1) > len(test_tup2):\n        test_tup1, test_tup2 = test_tup2, test_tup1\n    new_tup = []\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            new_tup.append(test_tup1[i] - test_tup2[i])\n        else:\n            new_tup.append(test_tup1[i] - test_tup2[i-len(test_tup1)])\n    return tuple(new_tup)\n",
        "num_ids": 189
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = []\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            new_tup.append(test_tup1[i] - test_tup2[i])\n        return tuple(new_tup)\n    else:\n        return None\n",
        "num_ids": 90
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    #test_tup1 = (1,2,3)\n    #test_tup2 = (1,2,3)\n",
        "num_ids": 34
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    #Create a new list to append elements from the first tuple\n    new_tuple = []\n    #Iterate through each element from the tuple\n    for i in range(len(test_tup1)):\n        #If the first element from the first tuple and second element from the second tuple are equal, add the difference of the two elements into a new tuple\n        if test_tup1[i] == test_tup2[i]:\n            new_tuple.append(test_tup1[i] - test_tup2[i])\n        #Else, subtract the second element from the first element\n        else:\n            new_tuple.append(test_tup1[i] - test_tup2[i])\n    #Return the new tuple\n    return new_tuple\n",
        "num_ids": 186
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    test_list = test_list1 + test_list2\n    test_list = list(dict.fromkeys(test_list))\n    return test_list\n",
        "num_ids": 70
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] - test_tup2[i], )\n    return new_tup\n",
        "num_ids": 59
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tup_substract = ()\n    for i in range(len(test_tup1)):\n        tup_substract = tup_substract + (test_tup1[i] - test_tup2[i], )\n    return tup_substract\n",
        "num_ids": 68
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    i=0\n    result=[]\n    while i < len(test_tup1):\n        result.append(test_tup1[i]-test_tup2[i])\n        i=i+1\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    #print(test_tup1)\n    #print(test_tup2)\n    test_tup = list(test_tup1)\n    test_tup_index = 0\n    for i in range(0, len(test_tup)):\n        try:\n            test_tup[i] = test_tup[i] - test_tup2[i]\n        except IndexError:\n            test_tup[i] = None\n        except:\n            print(test_tup)\n            print(\"Tuple index error!\")\n    return tuple(test_tup)\n",
        "num_ids": 146
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return 2*n*even_binomial_Coeff_Sum(n-1)\n",
        "num_ids": 43
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    Coeff_Sum = 0\n    binomial_Coef = 0\n    \n    for i in range(n + 1):\n        Coeff_Sum = Coeff_Sum + binomial_Coef\n        if i%2 == 0:\n            binomial_Coef = binomial_Coef * (n - i + 1) / i\n        else:\n            binomial_Coef = binomial_Coef * (n - i) / i\n            \n    return Coeff_Sum\n",
        "num_ids": 117
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # range(1,n+1) includes all even numbers from 1 to n\n    odds_set = set(range(1,n+1))\n",
        "num_ids": 38
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    Sum=0\n    i = 1\n    while (i < n+1): \n        if (i%2 == 0): \n            Sum += i\n        i += 1\n    return Sum\ndef odd_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    Sum=0\n    i = 1\n    while (i < n+1): \n        if (i%2 == 1): \n            Sum += i\n        i += 1\n    return Sum\ndef Binomial_Coeff_Sum_Mod_P( n, p): \n    '''\n    Write a python function that takes in a positive integer n and a positive integer p and finds the sum of binomial coefficients.\n    '''\n    a = 0\n    b = 1\n    Sum=0\n    while (b<n): \n        Sum += (a%p)\n        temp = b\n        b = (a+temp)%p\n        a = temp\n    return Sum\ndef Binomial_Coeff_Sum_Mod_P2( n, p): \n    '''\n    Write a python function that takes in a positive integer n and a positive integer p and finds the sum of binomial coefficients.\n    '''\n    a = 0\n    b = 1\n    Sum=0\n    while (b<n): \n        Sum += (a%p)\n        temp = b\n        b = (a+temp)%p\n        a = temp\n    return Sum\ndef Newman( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of newman coefficients.\n    '''\n    Sum=0\n    i = 1\n    while (i < n+1): \n        Sum += 1/i\n        i += 1\n    return Sum\ndef Newman2( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of newman coefficients.\n    '''\n    Sum=0\n    i = 1\n    while (i < n+1): \n        Sum += (1/i)\n        i += 1\n    return Sum\ndef Power_Sequence( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of power sequence coefficients.\n    '''\n    Sum=0\n    i = 1\n    while (i < n+1): \n        Sum += i**i\n        i += 1\n    return Sum\ndef Power_Sequence2( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of power sequence coefficients.\n    '''\n    Sum=0\n    i = 1\n    while (i < n+1): \n        Sum += i**i\n        i += 1\n    return Sum\ndef Newman_Sequence( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of newman sequence coefficients.\n    '''\n    Sum=0\n    i = 1\n    while (i < n+1): \n        Sum += (1/i)\n        i += 1\n    return Sum\ndef Newman_Sequence2( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of newman sequence coefficients.\n    '''\n    Sum=0\n    i = 1\n    while (i < n+1): \n        Sum += (1/i)\n        i += 1\n    return Sum\ndef Newman_Binary_Sequence( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of newman sequence coefficients.\n    '''\n    Sum=0\n    i = 1\n    while (i < n+1): \n        Sum += i/math.log2(i)\n        i += 1\n    return Sum\ndef Newman_Binary_Sequence2( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of newman sequence coefficients.\n    '''\n    Sum=0\n    i = 1\n    while (i < n+1): \n        Sum += i/math.log2(i)\n        i += 1\n    return Sum\ndef Newman_Binary_Sequence3( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of newman sequence coefficients.\n    '''\n    Sum=0\n    i = 1\n    while (i < n+1): \n        Sum += (1/i)\n        i += 1\n    return Sum\ndef Newman_Binary_Sequence4( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of newman sequence coefficients.\n    '''\n    Sum=0\n    i = 1\n    while (i < n+1): \n        Sum += (1/i)\n        i += 1\n    return Sum\ndef Newman_Binary_Sequence5( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of newman sequence coefficients.\n    '''\n    Sum=0\n    i = 1\n    while (i < n+1): \n        Sum += (1/i)**2\n        i += 1\n    return Sum\ndef Newman_Binary_Sequence6( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of newman sequence coefficients.\n    '''\n    Sum=0\n    i = 1\n    while (i < n+1): \n        Sum += (1/i)**2\n        i += 1\n    return Sum\ndef Sum_of_Power_Sequence( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of power sequence coefficients.\n    '''\n    Sum=0\n    i = 1\n    while (i < n+1): \n        Sum += i**i\n        i += 1\n    return Sum\ndef Sum_of_Power_Sequence2( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of power sequence coefficients.\n    '''\n    Sum=0\n    i = 1\n    while (i < n+1): \n        Sum += i**i\n        i += 1\n    return Sum\ndef Power_Sequence_Log2( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of power sequence coefficients.\n    '''\n    Sum=0\n    i = 1\n    while (i < n+1): \n        Sum += i**i\n        i += 1\n    return Sum\ndef Power_Sequence_Log2_2( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of power sequence coefficients.\n    '''\n    Sum=0\n    i = 1\n    while (i < n+1): \n        Sum += i**i\n        i += 1\n    return Sum\ndef Binomial_Coeff_Sum_Mod_P_Log2( n, p): \n    '''\n    Write a python function that takes in a positive integer n and a positive integer p and finds the sum of binomial coefficients.\n    '''\n    a = 0\n    b = 1\n    Sum=0\n    while (b<n): \n        Sum += (a%p)\n        temp = b\n        b = (a+temp)%p\n        a = temp\n    return Sum\ndef Binomial_Coeff_Sum_Mod_P_Log2( n, p): \n    '''\n    Write a python function that takes in a positive integer n and a positive integer p and finds the sum of binomial coefficients.\n    '''\n    a = 0\n    b = 1\n    Sum=0\n    while (b<n): \n        Sum += (a%p)\n        temp = b\n        b = (a+temp)%p\n        a = temp\n    return Sum\ndef Modular_Exponentiation( x, y, p): \n    '''\n    Write a python function that takes in a positive integer x, a positive integer y, and a positive integer p and returns x^y mod p.\n    '''\n    if (y == 0): \n        return 1\n    if (y == 1): \n        retur",
        "num_ids": 27
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 0: \n        raise ValueError(\"n must be a positive integer.\") \n    n = int(n) \n    # Initialize the result \n    sum = 0\n    # Iterate from 0 to n \n    for i in range(0, n + 1): \n        # Check if i is even \n        if i % 2 == 0: \n            sum += binomial(n, i) \n    return sum \n  \ndef binomial(n, k): \n    '''\n    Calculate binomial coefficient C(n,k) \n    '''\n    if 0 <= k <= n: \n        ntok = 1\n        ktok = 1\n        for t in range(1, min(k, n - k) + 1): \n            ntok *= n\n            ktok *= t\n            n -= 1\n        return ntok // ktok \n    else: \n        return 0\n        \ndef sum_of_digits(n): \n    '''\n    Write a python function that takes in a nonnegative integer and returns the sum of the digits of n.\n    '''\n    if n < 0: \n        raise ValueError(\"n must be a nonnegative integer\") \n    return sum(int(x) for x in str(n)) \n    \ndef sum_of_digits_rec(n): \n    '''\n    Write a python function that takes in a nonnegative integer and returns the sum of the digits of n, using recursion.\n    '''\n    if n < 0: \n        raise ValueError(\"n must be a nonnegative integer\") \n    if n == 0: \n        return 0\n    return n%10 + sum_of_digits_rec(n//10) \n    \ndef sum_of_digits_iter(n): \n    '''\n    Write a python function that takes in a nonnegative integer and returns the sum of the digits of n, using iteration.\n    '''\n    if n < 0: \n        raise ValueError(\"n must be a nonnegative integer\") \n    n = n%10\n    carry = n \n    sum = 0\n    while carry > 0: \n        sum += carry%10\n        carry = carry // 10\n    return sum\n        \ndef prime_number(n): \n    '''\n    Write a python function that takes in a positive integer n and returns true if the given integer is a prime number, and false otherwise.\n    '''\n    if n <= 1: \n        return False\n    if n <= 3: \n        return True\n    if n % 2 == 0 or n % 3 == 0: \n        return False\n    i = 5\n    while i * i <= n: \n        if n % i == 0 or n % (i + 2) == 0: \n            return False\n        i += 6\n    return True\n    \ndef is_prime(n): \n    '''\n    Write a python function that takes in a positive integer n and returns true if the given integer is a prime number, and false otherwise.\n    '''\n    if n <= 1: \n        return False\n    if n <= 3: \n        return True\n    if n % 2 == 0 or n % 3 == 0: \n        return False\n    i = 5\n    while i * i <= n: \n        if n % i == 0 or n % (i + 2) == 0: \n            return False\n        i += 6\n    return True\n    \ndef factorization(n): \n    '''\n    Write a python function that takes in a positive integer n and returns a list of all prime factors of n.\n    '''\n    if n <= 1: \n        return None\n    if n == 2: \n        return [2]\n    if n <= 3: \n        return [n]\n    if n % 2 == 0 or n % 3 == 0: \n        return factorization(n//3) + factorization(n//2) + factorization(n-1)\n    prime_list = factorization(n//3) + factorization(n//2)\n    prime_list.append(n)\n    return prime_list\n    \ndef factorization_iterative(n): \n    '''\n    Write a python function that takes in a positive integer n and returns a list of all prime factors of n.\n    '''\n    if n <= 1: \n        return None\n    if n == 2: \n        return [2]\n    if n <= 3: \n        return [n]\n    if n % 2 == 0 or n % 3 == 0: \n        return factorization_iterative(n//3) + factorization_iterative(n//2) + factorization_iterative(n-1)\n    prime_list = factorization_iterative(n//3) + factorization_iterative(n//2)\n    prime_list.append(n)\n    return prime_list\n    \ndef power_set(A): \n    '''\n    Write a python function that takes in a nonempty array A and returns a list of all subsets of A.\n    '''\n    if len(A) == 0: \n        return [[]]\n    possibilities = power_set(A[1:])\n    return possibilities + [[A[0]] + subset for subset in possibilities]\n    \ndef power_set_iterative(A): \n    '''\n    Write a python function that takes in a nonempty array A and returns a list of all subsets of A.\n    '''\n    if len(A) == 0: \n        return [[]]\n    possibilities = power_set_iterative(A[1:])\n    return possibilities + [[A[0]] + subset for subset in possibilities]\n    \ndef reverse_bits(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the number of 1 bits in the binary representation of n.\n    '''\n    if n == 0: \n        return 0\n    if n < 0: \n        n = -n\n    result = 0\n    while n > 0: \n        result += 1\n        n = (n - 1) & n\n    return result\n    \ndef reverse_bits_iterative(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the number of 1 bits in the binary representation of n.\n    '''\n    if n == 0: \n        return 0\n    if n < 0: \n        n = -n\n    count = 0\n    while n!= 0: \n        count += 1\n        n = (n - 1) & n\n    return count\n    \ndef sum_of_squares(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the squares of all positive integers smaller than n.\n    '''\n    if n <= 0: \n        raise ValueError(\"n must be a positive integer.\") \n    sum = 0\n    for i in range(1, n+1): \n        sum += i**2\n    return sum\n    \ndef sum_of_squares_iterative(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the squares of all positive integers smaller than n.\n    '''\n    if n <= 0: \n        raise ValueError(\"n must be a positive integer.\") \n    sum = 0\n    for i in range(1, n+1): \n        sum += i**2\n    return sum\n    \ndef factorial(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the factorial of n.\n    '''\n    if n <= 0: \n        raise ValueError(\"n must be a positive integer.\") \n    if n == 1: \n        return 1\n    if n == 2: \n        return 2\n    return n * factorial(n-1)\n    \ndef factorial_iterative(n): \n    '''\n    Write a python function that takes in a positive integer n and returns the factorial of n.\n    '''\n    if n <= 0: \n        raise ValueError(\"n must be a positive integer.\") \n    if n == 1: \n        return 1\n    if n == 2: \n        return 2\n    result = 1\n    while n > 2: \n        result *= n\n        n -= 1\n    return result\n    \ndef fibonacci(n): \n    '''\n    Write a python function that takes i",
        "num_ids": 10
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    for i in range(0, n):\n        s += binomialCoeff(i, n)\n    return s\n",
        "num_ids": 36
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # i=0,j=0\n    # binomial = 1\n    # sum = 0\n    # while (i < n+1):\n    #     if (i % 2 == 0):\n    #         sum += binomial\n    #     else:\n    #         sum += (binomial * (i - 1))\n    #     binomial *= (2*n + 1)\n    #     i += 1\n    # return sum\n    \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    # binomial = 1\n    # sum = 0\n    # i = 1\n    # while (i <= n):\n    #     if (i % 2 == 0):\n    #         sum += binomial\n    #     else:\n    #         sum += (binomial * (i - 1))\n    #     binomial *= (2*n + 1)\n    #     i += 1\n    # return sum\n    \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all the even index binomial coefficients in order.\n    '''\n    # binomial = 1\n    # i = 0\n    # even_binomial_coeff_sum = 0\n    # while (i < n):\n    #     if (i % 2 == 0):\n    #         even_binomial_coeff_sum += binomial\n    #     i += 1\n    #     binomial *= (2*n + 1)\n    # return even_binomial_coeff_sum\n    \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all the odd index binomial coefficients in order.\n    '''\n    # binomial = 1\n    # i = 1\n    # odd_binomial_coeff_sum = 0\n    # while (i <= n):\n    #     if (i % 2 == 1):\n    #         odd_binomial_coeff_sum += binomial\n    #     i += 1\n    #     binomial *= (2*n + 1)\n    # return odd_binomial_coeff_sum\n    \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all the even and odd index binomial coefficients in order.\n    '''\n    # binomial = 1\n    # i = 0\n    # odd_binomial_coeff_sum = 0\n    # even_binomial_coeff_sum = 0\n    # while (i < n):\n    #     if (i % 2 == 0):\n    #         even_binomial_coeff_sum += binomial\n    #     else:\n    #         odd_binomial_coeff_sum += binomial\n    #     i += 1\n    #     binomial *= (2*n + 1)\n    # return even_binomial_coeff_sum + odd_binomial_coeff_sum\n    \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all the even and odd index binomial coefficients in order.\n    '''\n    # binomial = 1\n    # i = 0\n    # odd_binomial_coeff_sum = 0\n    # even_binomial_coeff_sum = 0\n    # while (i < n):\n    #     if (i % 2 == 0):\n    #         even_binomial_coeff_sum += binomial\n    #     else:\n    #         odd_binomial_coeff_sum += binomial\n    #     i += 1\n    #     binomial *= (2*n + 1)\n    # return even_binomial_coeff_sum + odd_binomial_coeff_sum\n    \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all the odd index binomial coefficients in order.\n    '''\n    # binomial = 1\n    # i = 1\n    # odd_binomial_coeff_sum = 0\n    # while (i <= n):\n    #     if (i % 2 == 1):\n    #         odd_binomial_coeff_sum += binomial\n    #     i += 1\n    #     binomial *= (2*n + 1)\n    # return odd_binomial_coeff_sum\n    \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all the odd and even index binomial coefficients in order.\n    '''\n    # binomial = 1\n    # i = 0\n    # even_binomial_coeff_sum = 0\n    # odd_binomial_coeff_sum = 0\n    # while (i < n):\n    #     if (i % 2 == 0):\n    #         even_binomial_coeff_sum += binomial\n    #     else:\n    #         odd_binomial_coeff_sum += binomial\n    #     i += 1\n    #     binomial *= (2*n + 1)\n    # return even_binomial_coeff_sum + odd_binomial_coeff_sum\n    \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all the odd and even index binomial coefficients in order.\n    '''\n    # binomial = 1\n    # i = 1\n    # even_binomial_coeff_sum = 0\n    # odd_binomial_coeff_sum = 0\n    # while (i <= n):\n    #     if (i % 2 == 0):\n    #         even_binomial_coeff_sum += binomial\n    #     else:\n    #         odd_binomial_coeff_sum += binomial\n    #     i += 1\n    #     binomial *= (2*n + 1)\n    # return even_binomial_coeff_sum + odd_binomial_coeff_sum\n    \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all the odd and even index binomial coefficients in order.\n    '''\n    # binomial = 1\n    # i = 0\n    # even_binomial_coeff_sum = 0\n    # odd_binomial_coeff_sum = 0\n    # while (i < n):\n    #     if (i % 2 == 0):\n    #         even_binomial_coeff_sum += binomial\n    #     else:\n    #         odd_binomial_coeff_sum += binomial\n    #     i += 1\n    #     binomial *= (2*n + 1)\n    # return odd_binomial_coeff_sum + even_binomial_coeff_sum\n    \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all the even and odd index binomial coefficients in order.\n    '''\n    # binomial = 1\n    # i = 0\n    # even_binomial_coeff_sum = 0\n    # odd_binomial_coeff_sum = 0\n    # while (i < n):\n    #     if (i % 2 == 0):\n    #         even_binomial_coeff_sum += binomial\n    #     else:\n    #         odd_binomial_coeff_sum += binomial\n    #     i += 1\n    #     binomial *= (2*n + 1)\n    # return even_binomial_coeff_sum + odd_binomial_coeff_sum\n    \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all the odd and even index binomial coefficients in order.\n    '''\n    # binomial = 1\n    # i = 1\n    # even_binomial_coeff_sum = 0\n    # odd_binomial_coeff_sum = 0\n    # while (i <= n):\n    #     if (i % 2 == 0):\n    #         even_binomial_coeff_sum += binomial\n    #     else:\n    #         odd_binomial_coeff_sum += binomial\n    #     i += 1\n    #     binomial *= (2*n + 1)\n    # return odd_binomial_coeff_sum + even",
        "num_ids": 138
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 1:\n        raise ValueError\n    \n    l = []\n    s = 0\n    for i in range(0,n+1):\n        l.append(binomialCoeff(i))\n    \n    for j in range(0,n+1):\n        if j % 2 == 0:\n            s += l[j]\n    \n    return s\n    \ndef binomialCoeff(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the binomial coefficient.\n    '''\n    if n < 0:\n        raise ValueError\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * binomialCoeff(n-1)\n    \ndef Fibonacci_series(num):\n    '''\n    Write a python function that takes in an integer num and returns a Fibonacci series of length num.\n    '''\n    if num < 0:\n        raise ValueError\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return Fibonacci_series(num - 1) + Fibonacci_series(num - 2)\n        \ndef Factorial(n):\n    '''\n    Write a python function that takes in an integer num and returns the factorial of num.\n    '''\n    if n < 0:\n        raise ValueError\n    if n == 0:\n        return 1\n    else:\n        return n * Factorial(n - 1)\n        \ndef factorial(n):\n    '''\n    Write a python function that takes in an integer n and returns the factorial of n.\n    '''\n    if n < 0:\n        raise ValueError\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n    \ndef Permutation_Coeff_Sum(n,k):\n    '''\n    Write a python function that takes in two positive integers n and k and returns the sum of the permutation coefficients of length k.\n    '''\n    if n < 1 or k < 1:\n        raise ValueError\n    if n == 1:\n        return k\n    if k == 1:\n        return n\n    else:\n        return k * Permutation_Coeff_Sum(n - 1,k) + Permutation_Coeff_Sum(n - 1,k - 1)\n        \ndef Cycle_Index(n, k):\n    '''\n    Write a python function that takes in two positive integers n and k and returns the cycle index of length k of cycle n.\n    '''\n    if n < 1 or k < 1:\n        raise ValueError\n    if n == 1:\n        return k\n    if k == 1:\n        return 1\n    else:\n        return Cycle_Index(n-1, k) + Cycle_Index(n-1, k - 1)\n        \ndef exp_power_sum(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the exponents of the factorial of each of the integers from 1 to n.\n    '''\n    if n < 1:\n        raise ValueError\n    if n == 1:\n        return 1\n    else:\n        return n * exp_power_sum(n - 1)\n        \ndef Sieve_of_Eratosthenes(n):\n    '''\n    Write a python function that takes in a positive integer n and returns a list of prime numbers between 2 and n.\n    '''\n    if n < 1:\n        raise ValueError\n    if n == 1:\n        return []\n    else:\n        n_2 = 2\n        l = []\n        while n_2 <= n:\n            for i in range(2,n_2+1):\n                if n_2 % i == 0:\n                    n_2 += 1\n                    break\n            else:\n                l.append(n_2)\n                n_2 += 1\n        return l\n        \ndef sum_of_squares(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the squares of all numbers from 1 to n.\n    '''\n    if n < 1:\n        raise ValueError\n    if n == 1:\n        return n\n    else:\n        return n * sum_of_squares(n - 1) + n\n        \ndef number_of_divisors(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the number of divisors of n.\n    '''\n    if n < 1:\n        raise ValueError\n    if n == 1:\n        return 1\n    else:\n        return n * number_of_divisors(n - 1) + 1\n        \ndef Pythagorean_triples(a):\n    '''\n    Write a python function that takes in a positive integer a and returns a list of all pythagorean triples of length a.\n    '''\n    if a < 1:\n        raise ValueError\n    if a == 1:\n        return [[a], [a, 1]]\n    else:\n        triples = []\n        for i in range(2, a+1):\n            triples.append([i])\n            for j in range(2, i):\n                triples[i-2].append(j)\n                for k in range(j, i):\n                    triples[i-2].append(k)\n        return triples\n        \ndef sum_of_divisors(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the divisors of n.\n    '''\n    if n < 1:\n        raise ValueError\n    if n == 1:\n        return 1\n    else:\n        return 1 + n * sum_of_divisors(n - 1)\n        \ndef min_max(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the minimum and maximum numbers from 1 to n.\n    '''\n    if n < 1:\n        raise ValueError\n    if n == 1:\n        return (n, n)\n    else:\n        return (1, n) + min_max(n - 1)\n        \ndef min_max_1_1(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the minimum and maximum numbers from 1 to n.\n    '''\n    if n < 1:\n        raise ValueError\n    if n == 1:\n        return (1, 1)\n    else:\n        return (1, n) + min_max_1_1(n - 1)\n        \ndef min_max_2_1(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the minimum and maximum numbers from 2 to n.\n    '''\n    if n < 2:\n        raise ValueError\n    if n == 2:\n        return (2, 1)\n    else:\n        return (2, n) + min_max_1_1(n - 2)\n        \ndef min_max_3_1(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the minimum and maximum numbers from 3 to n.\n    '''\n    if n < 3:\n        raise ValueError\n    if n == 3:\n        return (3, 1)\n    else:\n        return (3, n) + min_max_1_1(n - 3)\n        \ndef min_max_4_1(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the minimum and maximum numbers from 4 to n.\n    '''\n    if n < 4:\n        raise ValueError\n    if n == 4:\n        return (4, 1)\n    else:\n        return (4, n) + min_max_1_1(n - 4)\n        \ndef min_max_5_1(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the minimum and maximum numbers from 5 to n.\n    '''\n    if n < 5:\n        raise ValueError\n    if n == 5:\n        return (5, 1)\n    else:\n        return (5, n) + min_max_1_1(n - 5)\n        \ndef min_max_6_1(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the minimu",
        "num_ids": 19
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i%2==0:\n            sum += math.comb(n,i)\n    return sum\nprint(even_binomial_Coeff_Sum(5))\n",
        "num_ids": 59
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (even_binomial_Coeff_Sum(n - 2) + even_binomial_Coeff_Sum(n - 1))\n",
        "num_ids": 64
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14\n    volume = (4/3)*pi*r**3\n    return volume\n",
        "num_ids": 27
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    if r<0 or h<0:\n        raise ValueError('Radius and Height should be non-negative')\n    volume=math.pi*r**2*h\n    return volume\n",
        "num_ids": 46
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*(r**2)*h\n",
        "num_ids": 15
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.1415926536\n    return pi * (r**2) * h\n",
        "num_ids": 24
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = r**2 * 3.14 * h\n    return vol\n",
        "num_ids": 19
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    volume = math.pi*r**2*h\n    return volume\n",
        "num_ids": 23
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*r**2*h\n",
        "num_ids": 14
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return math.pi*r**2*h\n",
        "num_ids": 14
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v=pi*(r**2)*h\n    return v\n",
        "num_ids": 18
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume\n",
        "num_ids": 20
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}\n",
        "num_ids": 24
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_copy = dict.copy()\n    for key in dict_copy:\n        if dict_copy[key]<=n:\n            del dict[key]\n    return dict\n",
        "num_ids": 45
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict.update({key: value})\n    return new_dict\n",
        "num_ids": 45
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key,value in dict.items() if value >= n}\n",
        "num_ids": 23
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dictionary = {}\n    for key,value in dict.items():\n        if value >= n:\n            filtered_dictionary[key] = value\n    return filtered_dictionary\nprint(dict_filter({1:10, 2:1, 3:4, 4:10},2))",
        "num_ids": 72
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_new=dict()\n    for key,value in dict.items():\n        if value>=n:\n            dict_new[key]=value\n    return dict_new\n",
        "num_ids": 44
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    d=dict()\n    for key in dict:\n        if key>=n:\n            d[key]=dict[key]\n    return d\nprint(dict_filter({\"cody\":12,\"sarah\":3,\"nick\":20,\"sue\":4},15))",
        "num_ids": 65
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n",
        "num_ids": 23
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_out = {}\n    for i in dict:\n        if dict[i] >= n:\n            dict_out[i] = dict[i]\n    return dict_out\n",
        "num_ids": 45
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n    \n    \ndef dict_keys(dict):\n    '''\n    Write a function that takes in a dictionary and returns a list of the dictionary's keys.\n    '''\n    return dict.keys()\n",
        "num_ids": 9
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] > test_tup[i+1]:\n            count += 1\n    return count\n",
        "num_ids": 52
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count\n    \ntest_tup = (0,1,2,1,2,3,1,2,1,2)\nprint(count_first_elements(test_tup))\n",
        "num_ids": 95
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return test_tup.index(1)\n",
        "num_ids": 14
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i < test_tup[0]:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    num = 0\n    for num in range(len(test_tup)):\n        if test_tup[num] <= test_tup[num-1]:\n            return num\n",
        "num_ids": 46
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if test_tup:\n        return test_tup[0]\n    else:\n        return 0\n",
        "num_ids": 28
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if not test_tup:\n        return 0\n",
        "num_ids": 15
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    list_tup = list(test_tup)\n    list_tup.reverse()\n    index = 0\n    for ele in list_tup:\n        index += 1\n        if ele == test_tup[0]:\n            break\n    return index\n",
        "num_ids": 64
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    n = 0\n    for i in test_tup:\n        if test_tup.index(i) == 0:\n            n += 1\n    print(f\"Number of times before element {i} is present in the given tuple is {n}.\")\n",
        "num_ids": 62
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len([element for element in test_tup if element < test_tup[0]])\n",
        "num_ids": 26
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 0\n    while True:\n        if i * (i + 1) / 2 == n:\n            return i\n        i += 1\n",
        "num_ids": 36
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n*(n+1)/2)\n",
        "num_ids": 16
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n==0: return 1\n    num = 1\n    for i in range(n):\n        num = (num*(n+1)-1)//(n*(n+1))\n    return num \n    \ndef decagonal(n):\n    if n==0: return 1\n    num = 1\n    for i in range(n):\n        num = (num*(n+1)-1)//(n*(n+1))\n    return num\n    \ndef is_prime(n):\n    '''\n    Write a function which takes an integer n and returns True if\n    it is prime and False otherwise.\n    '''\n    if n<=1: return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True \n    \ndef is_prime_v2(n):\n    '''\n    Write a function which takes an integer n and returns True if\n    it is prime and False otherwise.\n    '''\n    if n<=1: return False\n    for i in range(2, int(n**(1/2))):\n        if n % i == 0:\n            return False\n    return True \n    \ndef prime_num(n):\n    if n==1: return False\n    for i in range(2, int(n**(1/2))+1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef prime_num_v2(n):\n    if n==1: return False\n    for i in range(2, int(n**(1/2))+1):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_prime_v3(n):\n    if n<=1: return False\n    for i in range(2, int(n**(1/2))+1):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 227
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (int((n+1) ** 0.5) - 1) ** 2\n    \n    \ndef num_decagonals_to_num_square(n):\n    '''\n    Write a function to find the nth square number.\n    '''\n    return int(n*(n+1)/2)\n    \n    \ndef num_square_to_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n*(n+1)/2)\n    \n    \ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    import math\n    if n > 1:\n        for i in range(2, int(math.ceil(n ** 0.5)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return False\n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    s = s.lower()\n    s = s.replace(' ', '')\n    for i in range(len(s)//2):\n        if s[i]!= s[len(s)-1-i]:\n            return False\n    return True\n    \n    \ndef is_palindrome_2(s):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    if len(s) < 2:\n        return True\n    for i in range(len(s)//2):\n        if s[i]!= s[len(s)-1-i]:\n            return False\n    return True\n    \n    \ndef remove_ends(s, char):\n    '''\n    Write a function to remove the ends of a string.\n    '''\n    return s.replace(char, '')\n    \n    \ndef remove_ends_2(s, char):\n    '''\n    Write a function to remove the ends of a string.\n    '''\n    s = s.strip(char)\n    return s\n    \n    \ndef remove_ends_3(s, char):\n    '''\n    Write a function to remove the ends of a string.\n    '''\n    if char not in s:\n        return s\n    return s.replace(char, '')\n    \n    \ndef make_dict(names_dict):\n    '''\n    Write a function to make a dictionary from a list of names.\n    '''\n    names_dict = {name.lower():1 for name in names_dict}\n    return names_dict\n    \n    \ndef make_dict_2(names_dict):\n    '''\n    Write a function to make a dictionary from a list of names.\n    '''\n    names_dict = {name.lower():1 for name in names_dict}\n    return names_dict\n    \n    \ndef make_dict_3(names_dict):\n    '''\n    Write a function to make a dictionary from a list of names.\n    '''\n    names_dict = {name.lower():1 for name in names_dict}\n    return dict(names_dict)\n    \n    \ndef make_dict_4(names_dict):\n    '''\n    Write a function to make a dictionary from a list of names.\n    '''\n    names_dict = {name.lower():1 for name in names_dict}\n    return dict(names_dict)\n    \n    \ndef make_dict_5(names_dict):\n    '''\n    Write a function to make a dictionary from a list of names.\n    '''\n    names_dict = {name.lower():1 for name in names_dict}\n    return names_dict\n    \n    \ndef make_dict_6(names_dict):\n    '''\n    Write a function to make a dictionary from a list of names.\n    '''\n    names_dict = {name.lower():1 for name in names_dict}\n    return dict((name.lower(), 1) for name in names_dict)\n    \n    \ndef make_dict_7(names_dict):\n    '''\n    Write a function to make a dictionary from a list of names.\n    '''\n    names_dict = {name.lower():1 for name in names_dict}\n    return dict((name.lower(), 1) for name in names_dict)\n    \n    \ndef make_dict_8(names_dict):\n    '''\n    Write a function to make a dictionary from a list of names.\n    '''\n    names_dict = {name.lower():1 for name in names_dict}\n    return dict((name, 1) for name in names_dict)\n    \n    \ndef make_dict_9(names_dict):\n    '''\n    Write a function to make a dictionary from a list of names.\n    '''\n    names_dict = {name.lower():1 for name in names_dict}\n    return dict((name.lower(), 1) for name in names_dict)\n    \n    \ndef make_dict_10(names_dict):\n    '''\n    Write a function to make a dictionary from a list of names.\n    '''\n    names_dict = {name.lower():1 for name in names_dict}\n    return dict((name.lower(), 1) for name in names_dict)\n    \n    \ndef make_dict_11(names_dict):\n    '''\n    Write a function to make a dictionary from a list of names.\n    '''\n    names_dict = {name.lower():1 for name in names_dict}\n    return dict((name.lower(), 1) for name in names_dict)\n    \n    \ndef make_dict_12(names_dict):\n    '''\n    Write a function to make a dictionary from a list of names.\n    '''\n    names_dict = {name.lower():1 for name in names_dict}\n    return dict((name.lower(), 1) for name in names_dict)\n    \n    \ndef make_dict_13(names_dict):\n    '''\n    Write a function to make a dictionary from a list of names.\n    '''\n    names_dict = {name.lower():1 for name in names_dict}\n    return dict((name, 1) for name in names_dict)\n    \n    \ndef make_dict_14(names_dict):\n    '''\n    Write a function to make a dictionary from a list of names.\n    '''\n    names_dict = {name.lower():1 for name in names_dict}\n    return dict((name.lower(), 1) for name in names_dict)\n    \n    \ndef make_dict_15(names_dict):\n    '''\n    Write a function to make a dictionary from a list of names.\n    '''\n    names_dict = {name.lower():1 for name in names_dict}\n    return dict((name, 1) for name in names_dict)\n    \n    \ndef make_dict_16(names_dict):\n    '''\n    Write a function to make a dictionary from a list of names.\n    '''\n    names_dict = {name.lower():1 for name in names_dict}\n    return dict((name, 1) for name in names_dict)\n    \n    \ndef make_dict_17(names_dict):\n    '''\n    Write a function to make a dictionary from a list of names.\n    '''\n    names_dict = {name.lower():1 for name in names_dict}\n    return dict((name, 1) for name in names_dict)\n    \n    \ndef make_dict_18(names_dict):\n    '''\n    Write a function to make a dictionary from a list of names.\n    '''\n    names_dict = {name.lower():1 for name in names_dict}\n    return dict((name.lower(), 1) for name in names_dict)\n    \n    \ndef make_dict_19(names_dict):\n    '''\n    Write a function to make a dictionary from a list of names.\n    '''\n    names_dict = {name.lower():1 for name in names_dict}\n    return dict((name, 1) for name in names_dict)\n    \n    \ndef make_dict_20(names_dict):\n    '''\n    Write a function to make a dictionary from a list of names.\n    '''\n    names_dict = {name.lower():1 for name in names_dict}\n    return dict((name, 1) for name in name",
        "num_ids": 33
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 0\n    dec = 0\n    while num < n:\n        num = num + 1\n        dec = dec + 2\n        if num%10 == 0:\n            dec = dec - 3\n            if dec == 0:\n                dec = 3\n        if dec == n:\n            break\n        num = num + 1\n        dec = dec - 2\n    return num\n",
        "num_ids": 89
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n * (n + 1) / 2)\n",
        "num_ids": 17
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 0\n    while num <= n:\n        num += 1\n        print(num*(num+1)/2)\n",
        "num_ids": 32
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (n * (n + 1)) // 2\n",
        "num_ids": 15
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 3\n    n -= 1\n    deco_n = (n * (n+1) + 1) / 2\n    return deco_n\n",
        "num_ids": 78
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    result = 1\n    for i in range(3, n + 1):\n        result = result * (i - 1) // i\n    return result\n",
        "num_ids": 70
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Returns False if item is not in the list\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return False\n",
        "num_ids": 52
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            return i, dlist.index(dlist[i])\n        \n    return False\n",
        "num_ids": 46
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if dlist is None:\n        return (False, -1)\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    \n    return (False, -1)\n",
        "num_ids": 64
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    start = 0\n    end = len(dlist) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if dlist[mid] == item:\n            return True, mid\n        elif dlist[mid] > item:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return False, -1\n",
        "num_ids": 90
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            pos = i\n            return (True, pos)\n    return (False, pos)\n",
        "num_ids": 53
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n",
        "num_ids": 41
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    position = 0\n    found = False\n",
        "num_ids": 12
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    '''\n    best case: O(1) because it starts looking at the first position of the array and does not have to do any math.\n    worst case: O(n) because it goes through each item in the array once\n    '''\n    # initialize starting point for loop\n    index = 0\n",
        "num_ids": 15
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n",
        "num_ids": 39
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    if found:\n        return True, pos\n    else:\n        return False, -1\n",
        "num_ids": 73
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n",
        "num_ids": 20
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    \n    for i in range(len(test_list)-1):\n        if test_list[i] in test_list[i+1:]:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    result = True\n    for i in test_list:\n        if i in test_list[:test_list.index(i)] :\n            result = False\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Your Code Here\n    # return len(test_list) == len(set(test_list))\n    return len(test_list) == len(set(test_list)) and len(test_list) == len(set(test_list))\n    \ndef main():\n    \n    # Create an empty list\n    test_list = []\n",
        "num_ids": 83
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for elem in test_list:\n        if test_list.count(elem) > 1:\n            return False\n    return True\n",
        "num_ids": 35
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    try:\n        for i in test_list:\n            assert i not in test_list[test_list.index(i)+1:]\n            return True\n        return False\n    except AssertionError:\n        return False\n    except IndexError:\n        return True\n    \nprint(all_unique([1, 2, 3, 3, 4]))\nprint(all_unique([1, 2, 3]))\nprint(all_unique([1, 2, 3, 3, 3, 3, 3, 3]))\n",
        "num_ids": 123
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) > 0:\n        return len(test_list) == len(set(test_list))\n    else:\n        return True\n",
        "num_ids": 40
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n",
        "num_ids": 20
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list.sort()\n    unique_list=[]\n    for i in range(len(test_list)):\n        if test_list[i] in unique_list:\n            return False\n        else:\n            unique_list.append(test_list[i])\n    return True\n",
        "num_ids": 71
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #code here\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] == test_list[j] and i!=j:\n                return False\n    return True\n",
        "num_ids": 65
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    res = []\n    for n1,n2 in zip(nums1,nums2):\n        res.append(n1-n2)\n    return res\n",
        "num_ids": 42
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    len1 = len(nums1)\n    len2 = len(nums2)\n    if len1<len2:\n        for i in range(len1):\n            nums1[i] = nums1[i] - nums2[i]\n    else:\n        for i in range(len2):\n            nums2[i] = nums2[i] - nums1[i]\n    return nums1+nums2\n",
        "num_ids": 111
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    new_list = []\n    for i in range(len(nums1)):\n        new_list.append(nums1[i] - nums2[i])\n    return new_list\n",
        "num_ids": 50
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    len_nums1 = len(nums1)\n    len_nums2 = len(nums2)\n    if len_nums1!= len_nums2:\n        return None\n    for i in range(len_nums1):\n        nums1[i] = nums1[i]-nums2[i]\n    return nums1\n",
        "num_ids": 90
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return[nums1[i]-nums2[i] for i in range(len(nums1))]\n",
        "num_ids": 30
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result=[]\n    if len(nums1)!=len(nums2):\n        raise ValueError(\"Both lists should be of the same size\")\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result\n",
        "num_ids": 74
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    output = []\n    for i in range(0,len(nums1)):\n        output.append(nums1[i]-nums2[i])\n    return output\n",
        "num_ids": 45
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x - y for x, y in zip(nums1, nums2)]\n",
        "num_ids": 24
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] - nums2[i]\n    return nums1\n",
        "num_ids": 44
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub = []\n    for i in range(len(nums1)):\n        sub.append(nums1[i]-nums2[i])\n    return sub\n",
        "num_ids": 43
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if type(n) is not int:\n        raise ValueError(\"n should be integer\")\n    res = []\n    for i in range(10):\n        res.append(n.count(i))\n    for j in range(len(res)):\n        if res[j] > res[j+1]:\n            return False\n    return True\n",
        "num_ids": 84
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n = int(n)\n    count_d = [0 for i in range(10)]\n    for i in range(len(str(n))):\n        count_d[int(str(n)[i])] += 1\n    for i in range(len(count_d)):\n        if count_d[i] <= i:\n            return True\n    return False\n",
        "num_ids": 90
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n//10\n    if count <= 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 46
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if (not(isinstance(n,int))): \n        raise TypeError('Invalid input') \n    if (n<0): \n        raise ValueError('Invalid input') \n    count=0\n    d={}\n    while (n>0): \n        d[str(n%10)]=d.get(str(n%10),0)+1\n        n=n//10\n    for i in d.keys(): \n        if(d[i]>=i): \n            raise ValueError('Invalid input') \n    return True ",
        "num_ids": 133
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    list=[]\n    i=0\n    while(n):\n        list.append(n%10)\n        n//=10\n    while(i<len(list)):\n        if list.count(list[i])>=list[i]:\n            return False\n        i+=1\n    return True\n",
        "num_ids": 75
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    num = str(n)\n    res = 0\n    for i in num:\n        if(i <= int(i)):\n            res+=1\n    return(res <= len(num))\n",
        "num_ids": 48
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    res = {}\n    while(n>0):\n        res[n%10] = res.get(n%10,0) + 1\n        n = n // 10\n    for i in range(1,10):\n        if(i in res and res[i] > i):\n            return False\n    return True",
        "num_ids": 76
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    n_list = list(str(n))\n    for i in range(0,len(n_list)):\n        if int(n_list[i]) > int(n_list[i]):\n            return False\n    return True\n",
        "num_ids": 59
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    str_n = str(n)\n    for i in str_n:\n        if i == n:\n            return True\n    return False\n",
        "num_ids": 36
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    import math\n    s = str(n)\n    x = dict()\n    for i in range(10):\n        x[i] = s.count(str(i))\n    \n    res = False\n    for k in x:\n        if k <= x[k]:\n            res = True\n        else:\n            res = False\n            break\n    return res\n",
        "num_ids": 88
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list == None or len(list) == 0 or element == None or element == 0:\n        return False\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True\n",
        "num_ids": 59
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    found = False\n    for item in list:\n        if item == element:\n            found = True\n    return found\n",
        "num_ids": 30
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(0,len(list)):\n        if list[i]!= element:\n            return False\n    return True\n",
        "num_ids": 35
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(elem == element for elem in list)\n",
        "num_ids": 17
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(item == element for item in list)\n",
        "num_ids": 15
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n    \ndef check_anagram(string_1,string_2):\n    '''\n    Write a function that takes in two strings and returns True if they are anagrams of one another.\n    An anagram is when the letters of a word or phrase are used in a different order, but the same number of times. For example:\n    \"cat\" is an anagram of \"cab\".\n    \"cat\" is an anagram of \"cats\".\n    '''\n    string_1=string_1.lower()\n    string_2=string_2.lower()\n    string_1_list=list(string_1)\n    string_2_list=list(string_2)\n    string_1_list.sort()\n    string_2_list.sort()\n    if string_1_list == string_2_list:\n        return True\n    else:\n        return False\n",
        "num_ids": 101
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        for item in list:\n            if item!= element:\n                print(\"Not a valid element\")\n                return False\n        return True\n    else:\n        return False\n",
        "num_ids": 49
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    is_elem = False\n    if list == []:\n        return is_elem\n    else:\n        for i in list:\n            if i == element:\n                is_elem = True\n                break\n    return is_elem\n",
        "num_ids": 60
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        for i in range(len(list)):\n            if list[i]!= element:\n                return False\n        return True\n    else:\n        return False\n",
        "num_ids": 48
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if 'a' in text and len(re.findall('a', text)) == 2:\n        return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    count = 0\n    for i in range(0, len(text)):\n        count += 1\n        if text[i] == 'a':\n            break\n    if count >= 2:\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile('a{2,3}b')\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n",
        "num_ids": 42
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a+b')\n    if(pattern.match(text)):\n        return True\n    return False\n",
        "num_ids": 36
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    print(re.findall(r\"a(b+)b\",text))\n",
        "num_ids": 21
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return 'a' in text and len(re.findall('a{2,3}', text))!= 0\n",
        "num_ids": 30
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if text.find('ab')>-1:\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text)>=2 and len(text)<=3:\n        count_a = 0\n        for i in range(0,len(text)):\n            if text[i] == 'a':\n                count_a += 1\n            if count_a==2 or count_a==3:\n                return True\n        return False\n    else:\n        return False\n",
        "num_ids": 91
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # make sure the string contains the 'a' character\n    if text.find('a') == -1:\n        return 'Text is missing the a character'\n",
        "num_ids": 39
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if not text:\n        return False\n    return re.search(r'a.b',text)!= None\n",
        "num_ids": 29
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n    \n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if j > i:\n                break\n            \n            dp[i][j] = dp[i-1][j] + a[i-1]\n            \n            if dp[i][j] > dp[i-1][j-1] + a[i-1]:\n                dp[i][j] = dp[i-1][j-1] + a[i-1]\n                \n    return dp[n][k]\n",
        "num_ids": 161
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n
        "num_ids": 1993
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # The base case \n    if n == 0 or k == 0: \n        return 0\n    \n    # The base case \n    if k == 1: \n        return a[0] \n    \n    # The base case \n    if n == k: \n        return max(a[:k]) \n    \n    # Initialize the variable \n    max_sum = 0\n    \n    # Define the size of a subarray \n    sub_array_size = k \n    \n    # Define the start and end of a subarray \n    start = 0\n    end = k \n    \n    # Define the common_sub_array \n    common_sub_array = [] \n    \n    # Define the common_sub_array \n    common_sub_array_sum = 0 \n    \n    # Define the common_sub_array_start \n    common_sub_array_start = 0 \n    \n    # Define the common_sub_array_end \n    common_sub_array_end = 0 \n    \n    # Define the max_sum \n    max_sum = 0 \n    \n    while end <= n: \n        # Calculate the common_sub_array sum \n        common_sub_array_sum = 0 \n        for i in range(0, sub_array_size): \n            common_sub_array_sum += a[i + start] \n            \n        # If the common_sub_array sum is greater than max_sum, \n        # Update max_sum \n        if common_sub_array_sum > max_sum: \n            max_sum = common_sub_array_sum \n        \n        # Update the common_sub_array_start \n        common_sub_array_start = start \n        \n        # Update the common_sub_array_end \n        common_sub_array_end = start + k \n        \n        # Update the max_sum \n        max_sum = max(common_sub_array_sum, max_sum) \n        \n        # Update start \n        start = start + k \n        \n        # Update the sub_array_size \n        sub_array_size = sub_array_size * k \n        \n        # Update end \n        end = end + k \n        \n    return max_sum \n    \n",
        "num_ids": 561
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    sum = 0\n    i = 0\n    while i < n:\n        if sum < k:\n            sum += a[i]\n            i += 1\n        elif sum >= k:\n            max_sum = max(max_sum, sum)\n            sum -= a[i]\n            i += 1\n    return max_sum\n",
        "num_ids": 87
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Time Complexity: O(n*k)\n    # Space Complexity: O(1)\n    result = -1\n    i = 0\n    j = 0\n    curr_sum = 0\n    while i < n:\n        curr_sum += a[i]\n        while i < n and curr_sum > k:\n            curr_sum -= a[j]\n            j += 1\n        if curr_sum > result:\n            result = curr_sum\n        i += 1\n    return result\n",
        "num_ids": 125
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    max_so_far = a[0]\n    max_ending_here = 0\n    \n    # starting from index 0 \n    for i in range(n): \n        max_ending_here = max_ending_here + a[i] \n        if max_ending_here < 0: \n            max_ending_here = 0\n        \n        # update the maximum sum so far \n        max_so_far = max(max_so_far, max_ending_here) \n    \n    print(\"Maximum contiguous sum is \", max_so_far) \n    \n    # return the maximum sum\n    return max_so_far \n",
        "num_ids": 156
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    n = len(a)\n    if n == 0 or k < 0 or k > n:\n        return -1\n    k = min(k, n//2)\n    m = k+1\n    for i in range(1, k+1):\n        m = max(m, a[i-1]+a[i+n-1-k] + a[i+k])\n    return m\n",
        "num_ids": 97
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    for i in range(0,n-k+1):\n        if a[i]>0:\n            s = 0\n            for j in range(i,i+k):\n                s += a[j]\n            max_sum = max(max_sum,s)\n    return max_sum\n",
        "num_ids": 84
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    ans = 0\n    tmp = 0\n    arr = a[:]\n    c = n//k\n    for i in range(c):\n        if tmp < sum(arr[0:k]):\n            ans = tmp\n            tmp = sum(arr[0:k])\n        elif tmp == sum(arr[0:k]):\n            ans = max(ans, tmp)\n        else:\n            tmp = sum(arr[0:k])\n    if sum(arr) > tmp:\n        ans = tmp\n    return ans\n",
        "num_ids": 126
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    ans = 0\n    \n    max_sum = 0\n    \n    sum_array = 0\n    \n    # initialize \n    max_sum = 0\n    \n    for i in range(n):\n    \n        sum_array += a[i]\n        \n        if sum_array < 0:\n        \n            sum_array = 0\n        \n        if sum_array > max_sum:\n        \n            max_sum = sum_array\n        \n        if sum_array < k:\n            \n            sum_array = 0\n        \n    return max_sum\n",
        "num_ids": 136
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    '''\n    Example:\n        Input = 10\n        Output = 50\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2==0:\n            sum += i**2\n    return sum\n",
        "num_ids": 40
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            total += i**2\n    return total\n",
        "num_ids": 40
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(n):\n        if(i%2==0):\n            sum=sum+i**2\n    return sum\n",
        "num_ids": 39
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    num = 1\n    result = 0\n    while num <= n:\n        result += num*num\n        num += 2\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + i*i\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if(i%2 == 0):\n            sum += i**2\n    return sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2008
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #Initiate the variable\n    square_Sum = 0 \n    \n    #Loop through every natural number\n    for i in range(1,n+1):\n        #If the number is even, multiply by itself and add to the sum\n        if i % 2 == 0:\n            square_Sum += i**2 \n    \n    #Return the sum\n    return square_Sum\n",
        "num_ids": 91
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2 == 0:\n            sum = sum + i**2\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    a = n\n    result = 0\n    while a > 0:\n        result += (a**2)\n        a -= 1\n    return result\n    \nprint(square_Sum(10))\n",
        "num_ids": 48
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i**2\n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if len(list1) == 0:\n        return\n    max_length = max([len(x) for x in list1])\n    return max_length\n",
        "num_ids": 40
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        max_length_list.append(len(list1[i]))\n    print(max(max_length_list))\n",
        "num_ids": 54
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    i = 0\n    max_length = 0\n    while i < len(list1):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n        i += 1\n    return max_length\n",
        "num_ids": 63
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n",
        "num_ids": 45
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_length:\n            max_length = len(list1[i])\n    return max_length\n",
        "num_ids": 56
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n",
        "num_ids": 45
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n",
        "num_ids": 39
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list2.append(list1[i][j])\n    print('maximum length list is:', max(list2,key=len))\n",
        "num_ids": 69
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in range(len(list1)):\n        if max_len < len(list1[i]):\n            max_len = len(list1[i])\n    return max_len\n",
        "num_ids": 56
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length=0\n    for i in list1:\n        if len(i)>max_length:\n            max_length=len(i)\n    return max_length\ndef word_count(sentence):\n    '''\n    Write a function to count the number of occurrences of each word in a sentence.\n    '''\n    sentence=sentence.split()\n    for word in sentence:\n        count=0\n        for i in sentence:\n            if word==i:\n                count=count+1\n        print(word,count)\ndef word_number(sentence):\n    '''\n    Write a function to count the number of occurrences of each word in a sentence.\n    '''\n    sentence=sentence.split()\n    for word in sentence:\n        count=0\n        for i in sentence:\n            if word==i:\n                count=count+1\n        print(word,count)\ndef is_sorted(list1):\n    '''\n    Write a function to check whether a list is sorted in ascending order or not.\n    '''\n    if list1[0]<list1[-1]:\n        return True\n    else:\n        return False\ndef is_sorted_reverse(list1):\n    '''\n    Write a function to check whether a list is sorted in descending order or not.\n    '''\n    if list1[0]<list1[-1]:\n        return True\n    else:\n        return False\ndef factorial(number):\n    '''\n    Write a function to calculate the factorial of a given number.\n    '''\n    if number<0:\n        print(\"please enter positive number\")\n    elif number==0 or number==1:\n        return 1\n    else:\n        return number*factorial(number-1)\ndef fibonacci(number):\n    '''\n    Write a function to calculate the Fibonacci series till the given number.\n    '''\n    a=0\n    b=1\n    while(a<number):\n        print(a)\n        a=a+b\n        b=a+b\ndef fibonacci_series(number):\n    '''\n    Write a function to calculate the Fibonacci series till the given number.\n    '''\n    a=0\n    b=1\n    while(a<number):\n        print(a)\n        a=a+b\n        b=a+b\ndef find_missing(list1):\n    '''\n    Write a function to find the missing number in a given list.\n    '''\n    print(set(list1)-set(list1))\ndef duplicate_list(list1):\n    '''\n    Write a function to find the duplicate elements in a list.\n    '''\n    list1=list(set(list1))\n    for i in list1:\n        count=0\n        for j in list1:\n            if i==j:\n                count=count+1\n        if count>1:\n            print(i)\ndef palindrome(list1):\n    '''\n    Write a function to check whether a given list is palindrome or not.\n    '''\n    list1=list1[::-1]\n    if list1==list1:\n        return True\n    else:\n        return False\ndef reverse_list(list1):\n    '''\n    Write a function to reverse the given list.\n    '''\n    list1.reverse()\ndef is_prime(number):\n    '''\n    Write a function to check whether a given number is prime or not.\n    '''\n    if number<=1:\n        return False\n    elif number==2:\n        return True\n    else:\n        for i in range(2,number):\n            if number%i==0:\n                return False\n        return True\ndef even_odd(list1):\n    '''\n    Write a function to check whether a given list is even or odd list.\n    '''\n    list1=list1[::-1]\n    for i in list1:\n        if i%2==0:\n            print(\"even\")\n        else:\n            print(\"odd\")\ndef range_sum(list1):\n    '''\n    Write a function to calculate the sum of a range of numbers.\n    '''\n    if len(list1)<=1:\n        return sum(list1)\n    else:\n        return sum(list1[:len(list1)])+sum(list1[1:])\ndef binary_sum(list1):\n    '''\n    Write a function to calculate the sum of a range of numbers in binary format.\n    '''\n    i=0\n    sum=0\n    while i<=len(list1)-1:\n        sum=sum+int(list1[i])\n        i=i+1\n    return sum\ndef palindrome(list1):\n    '''\n    Write a function to check whether a given list is palindrome or not.\n    '''\n    if list1==list1[::-1]:\n        return True\n    else:\n        return False\ndef check_char(string1,string2):\n    '''\n    Write a function to check whether the two strings are anagram or not.\n    '''\n    string1=string1.replace(\" \",\"\")\n    string2=string2.replace(\" \",\"\")\n    if len(string1)==len(string2):\n        string1=string1.lower()\n        string2=string2.lower()\n        for i in string1:\n            if i not in string2:\n                return False\n            else:\n                return True\n    else:\n        return False\ndef is_prime(number):\n    '''\n    Write a function to check whether a given number is prime or not.\n    '''\n    if number<=1:\n        return False\n    elif number==2:\n        return True\n    else:\n        for i in range(2,number):\n            if number%i==0:\n                return False\n        return True\ndef string_compression(string1):\n    '''\n    Write a function to check whether a given string is palindrome or not.\n    '''\n    if len(string1)<=1:\n        return string1\n    else:\n        string1=string1.lower()\n        i=0\n        count=1\n        while i<len(string1):\n            if string1[i]==string1[i+1]:\n                count=count+1\n                i=i+2\n            else:\n                string1=string1[:i]+str(count)+string1[i+1:]\n                count=1\n                i=i+1\n        return string1\ndef is_palindrome(list1):\n    '''\n    Write a function to check whether a given list is palindrome or not.\n    '''\n    list1=list1[::-1]\n    if list1==list1:\n        return True\n    else:\n        return False\ndef count_words(string1):\n    '''\n    Write a function to count the number of occurrences of each word in a sentence.\n    '''\n    word=string1.split(\" \")\n    word_list={}\n    for i in word:\n        if i not in word_list:\n            word_list[i]=1\n        else:\n            word_list[i]=word_list[i]+1\n    print(word_list)\ndef is_power(number):\n    '''\n    Write a function to check whether a given number is a power of two.\n    '''\n    if number<=0:\n        return False\n    else:\n        return number&(number-1)==0\ndef is_triangular(number):\n    '''\n    Write a function to check whether a given number is triangular number or not.\n    '''\n    a=0\n    b=1\n    c=2\n    while(a<number):\n        print(a)\n        a=a+b\n        b=a+b\n        c=a+b\n    return True\ndef is_in(number):\n    '''\n    Write a function to check whether a given number is in a given list.\n    '''\n    list1=[1,2,3,4,5,6,7,8,9,10]\n    if number in list1:\n        return True\n    else:\n        return False\ndef sum_of_triangular_numbers(number):\n    '''\n    Write a function to find the sum of the first N triangular numbers.",
        "num_ids": 17
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0] * (k + 1) for _ in range(n + 1)] \n    for i in range(1, n + 1): \n        for j in range(1, k + 1): \n            if j < i: \n                dp[i][j] = dp[i - 1][j] \n            elif j == i: \n                dp[i][j] = 1\n            else: \n                dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - 1]) % 1000000007\n    return dp[n][k] \n    \nclass Solution:\n    def count_no_of_ways(self, n, k): \n        '''\n        Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n        '''\n        def helper(i, j, count, memo): \n            if i == j: \n                count[0] += 1\n                return count[0]\n            elif j < i: \n                return helper(i, j, count, memo) \n            elif j == i: \n                count[0] += 1\n                return count[0]\n            else: \n                count[0] += (helper(i, j - 1, count, memo) + helper(i - 1, j, count, memo)) % 1000000007\n                return count[0]\n        \n        count = [0]\n        memo = {}\n        return helper(n, k, count, memo) \n    \nclass Solution:\n    def count_no_of_ways(self, n, k): \n        '''\n        Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n        '''\n        memo = {}\n        def helper(i, j, count, memo): \n            if i == j: \n                count[0] += 1\n                return count[0]\n            elif j < i: \n                return helper(i, j, count, memo) \n            elif j == i: \n                count[0] += 1\n                return count[0]\n            else: \n                count[0] += (helper(i, j - 1, count, memo) + helper(i - 1, j, count, memo)) % 1000000007\n                return count[0]\n        \n        count = [0]\n        return helper(n, k, count, memo) \n    \nclass Solution:\n    def count_no_of_ways(self, n, k): \n        '''\n        Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n        '''\n        def helper(i, j, count, memo): \n            if i == j: \n                count[0] += 1\n                return count[0]\n            elif j < i: \n                return helper(i, j, count, memo) \n            elif j == i: \n                count[0] += 1\n                return count[0]\n            else: \n                if (i, j) in memo:\n                    count[0] += memo[(i, j)]\n                else:\n                    count[0] += (helper(i, j - 1, count, memo) + helper(i - 1, j, count, memo)) % 1000000007\n                memo[(i, j)] = count[0]\n                return count[0]\n        \n        count = [0]\n        memo = {}\n        return helper(n, k, count, memo) \n    \nclass Solution:\n    def count_no_of_ways(self, n, k): \n        '''\n        Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n        '''\n        dp = [[0] * (k + 1) for _ in range(n + 1)] \n        for i in range(1, n + 1): \n            for j in range(1, k + 1): \n                if j < i: \n                    dp[i][j] = dp[i - 1][j] \n                elif j == i: \n                    dp[i][j] = 1\n                else: \n                    dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - 1]) % 1000000007\n        return dp[n][k] \n    \nclass Solution:\n    def count_no_of_ways(self, n, k): \n        '''\n        Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n        '''\n        def helper(i, j, count, memo): \n            if i == j: \n                count[0] += 1\n                return count[0]\n            elif j < i: \n                return helper(i, j, count, memo) \n            elif j == i: \n                count[0] += 1\n                return count[0]\n            else: \n                count[0] += (helper(i, j - 1, count, memo) + helper(i - 1, j, count, memo)) % 1000000007\n                return count[0]\n        \n        count = [0]\n        memo = {}\n        return helper(n, k, count, memo) \n    \nclass Solution:\n    def count_no_of_ways(self, n, k): \n        '''\n        Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n        '''\n        dp = [[0] * (k + 1) for _ in range(n + 1)] \n        for i in range(1, n + 1): \n            for j in range(1, k + 1): \n                if j < i: \n                    dp[i][j] = dp[i - 1][j] \n                elif j == i: \n                    dp[i][j] = 1\n                else: \n                    dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - 1]) % 1000000007\n        return dp[n][k] \n    \nclass Solution:\n    def count_no_of_ways(self, n, k): \n        '''\n        Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n        '''\n        dp = [[0] * (k + 1) for _ in range(n + 1)] \n        for i in range(1, n + 1): \n            for j in range(1, k + 1): \n                if j < i: \n                    dp[i][j] = dp[i - 1][j] \n                elif j == i: \n                    dp[i][j] = 1\n                else: \n                    dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - 1]) % 1000000007\n        return dp[n][k] \n    \nclass Solution:\n    def count_no_of_ways(self, n, k): \n        '''\n        Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n        '''\n        dp = [[0] * (k + 1) for _ in range(n + 1)] \n        for i in range(1, n + 1): \n            for j in range(1, k + 1): \n                if j < i: \n                    dp[i][j] = dp[i - 1][j] \n                elif j == i: \n                    dp[i][j] = 1\n                else: \n                    dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - 1]) % 1000000007\n        return dp[n]",
        "num_ids": 145
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # if n == 1 and k == 1:\n    #     return 1\n    # else:\n    #     return (count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)) % MODULO\n    \n    # Using Dynamic Programming Approach\n    dp = [[0 for i in range(k)] for j in range(n)] \n    \n    # Initializing first row and first column \n    # of dp[n][k] array \n    for i in range(k): \n        dp[0][i] = 1\n",
        "num_ids": 142
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    if n==0:\n        return 0\n    \n    if k==0:\n        return 1\n    \n    if k==1:\n        return n\n",
        "num_ids": 41
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # write your code here\n    if n==2 and k==2:\n        return 1\n    if n==1 and k==1:\n        return 1\n    if n==1 and k==2:\n        return 2\n    if n==2 and k==1:\n        return 2\n    if n==2 and k==2:\n        return 5\n    res = 0\n    for i in range(1,n+1):\n        if i%2==0:\n            res += count_no_of_ways(n-i, k)\n        else:\n            res += count_no_of_ways(n-i, k-1)\n    return res\n",
        "num_ids": 157
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # base case\n    if n == k:\n        return 1\n    if k == 0:\n        return 0\n    \n    # if k == 1:\n    #     return (n-1)\n    \n    # if n <= 2:\n    #     return n\n    \n    # if k <= 2:\n    #     return n*k\n    \n    # ans = 0\n    # i = 1\n    # while i <= n:\n    #     j = 1\n    #     while j <= k:\n    #         ans += count_no_of_ways(i-1, j-1)\n    #         j += 1\n    #     i += 1\n    \n    # return ans\n    \n    # Dynamic programming\n    dp = [[0]*k for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(1, n):\n        for j in range(1, k):\n            dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n        dp[i][0] = dp[i-1][1]\n        dp[i][1] = dp[i-1][0]\n    return dp[n-1][k-1]\n    \n    \ndef count_no_of_ways_dp_opt(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # base case\n    if n == k:\n        return 1\n    if k == 0:\n        return 0\n    \n    # if k == 1:\n    #     return (n-1)\n    \n    # if n <= 2:\n    #     return n\n    \n    # if k <= 2:\n    #     return n*k\n    \n    # ans = 0\n    # i = 1\n    # while i <= n:\n    #     j = 1\n    #     while j <= k:\n    #         ans += count_no_of_ways_dp_opt(i-1, j-1)\n    #         j += 1\n    #     i += 1\n    \n    # return ans\n    \n    # Dynamic programming\n    dp = [[0]*k for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(1, n):\n        for j in range(1, k):\n            dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n        dp[i][0] = dp[i-1][1]\n        dp[i][1] = dp[i-1][0]\n    return dp[n-1][k-1]\n    \n    \ndef count_no_of_ways_dp_opt_sub(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # base case\n    if n == k:\n        return 1\n    if k == 0:\n        return 0\n    \n    # if k == 1:\n    #     return (n-1)\n    \n    # if n <= 2:\n    #     return n\n    \n    # if k <= 2:\n    #     return n*k\n    \n    # ans = 0\n    # i = 1\n    # while i <= n:\n    #     j = 1\n    #     while j <= k:\n    #         ans += count_no_of_ways_dp_opt(i-1, j-1)\n    #         j += 1\n    #     i += 1\n    \n    # return ans\n    \n    # Dynamic programming\n    dp = [[0]*k for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(1, n):\n        for j in range(1, k):\n            dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n        dp[i][0] = dp[i-1][1]\n        dp[i][1] = dp[i-1][0]\n    return dp[n-1][k-1]\n    \n    \ndef count_no_of_ways_dp_opt_sub2(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # base case\n    if n == k:\n        return 1\n    if k == 0:\n        return 0\n    \n    # if k == 1:\n    #     return (n-1)\n    \n    # if n <= 2:\n    #     return n\n    \n    # if k <= 2:\n    #     return n*k\n    \n    # ans = 0\n    # i = 1\n    # while i <= n:\n    #     j = 1\n    #     while j <= k:\n    #         ans += count_no_of_ways_dp_opt_sub(i-1, j-1)\n    #         j += 1\n    #     i += 1\n    \n    # return ans\n    \n    # Dynamic programming\n    dp = [[0]*k for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(1, n):\n        for j in range(1, k):\n            dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n        dp[i][0] = dp[i-1][1]\n        dp[i][1] = dp[i-1][0]\n    return dp[n-1][k-1]\n    \n    \ndef count_no_of_ways_dp_opt_sub3(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # base case\n    if n == k:\n        return 1\n    if k == 0:\n        return 0\n    \n    # if k == 1:\n    #     return (n-1)\n    \n    # if n <= 2:\n    #     return n\n    \n    # if k <= 2:\n    #     return n*k\n    \n    # ans = 0\n    # i = 1\n    # while i <= n:\n    #     j = 1\n    #     while j <= k:\n    #         ans += count_no_of_ways_dp_opt_sub(i-1, j-1)\n    #         j += 1\n    #     i += 1\n    \n    # return ans\n    \n    # Dynamic programming\n    dp = [[0]*k for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(1, n):\n        for j in range(1, k):\n            dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n        dp[i][0] = dp[i-1][1]\n        dp[i][1] = dp[i-1][0]\n    return dp[n-1][k-1]\n    \n    \ndef count_no_of_ways_dp_opt_sub4(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # base case\n    if n == k:\n        return 1\n    if k == 0:\n        return 0\n    \n    # if k == 1:\n    #     return (n-1)\n    \n    # if n <= 2:\n    #     return n\n    \n    # if k <= 2:\n    #     return n*k\n    ",
        "num_ids": 84
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = [[0 for i in range(n)] for j in range(k)]\n",
        "num_ids": 22
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i == 1 or j == 1:\n                dp[i][j] = 1\n            elif i == 2:\n                dp[i][j] = j\n            else:\n                dp[i][j] = j - 1\n                for k in range(j-1, 0, -1):\n                    dp[i][j] = max(dp[i][j], k + dp[i-1][k] + dp[i-2][k])\n    return dp[n][k]\n",
        "num_ids": 171
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 1:\n        return n\n    \n    if k == 2:\n        return n * (n-1) // 2\n    \n    return count_no_of_ways(n, k-1) + count_no_of_ways(n-1, k)\n",
        "num_ids": 68
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0:\n        return 0\n    if n < k:\n        return 0\n    ways = 0\n    ways += count_no_of_ways(n-1, k)\n    ways += count_no_of_ways(n-2, k)\n    return ways\n",
        "num_ids": 73
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1:\n        return k\n    if n == 2:\n        return k * 2\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n",
        "num_ids": 60
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n",
        "num_ids": 8
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n",
        "num_ids": 8
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return n\n    elif n>0:\n        return find(n//m, m)\n    else:\n        return find(n//m, m)\n    \n    \n    \ndef gen_prime_numbers(n):  \n    '''\n    Write a python function to generate prime numbers in range(2, n) using Sieve of Eratosthenes.\n    '''\n    list_1 = []\n    \n    for i in range(2, n+1):\n        list_1.append(i)\n        \n    \n    \n    for i in range(2, n+1):\n        if i not in list_1:\n            pass\n        else:\n            \n            j = 2\n            while(i*j <= n):\n                if i*j in list_1:\n                    pass\n                else:\n                    list_1.append(i*j)\n                    j += 1\n                \n    return list_1\n    \n    \n    \n    \n    \n    \ndef is_prime(n):  \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n%i == 0:\n                return False\n        return True\n    \n    \ndef reverse_str(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    s1 = \"\"\n    for i in range(len(s)):\n        s1 = s1 + s[len(s)-i-1]\n    return s1\n    \n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    for i in range(len(s)//2):\n        if s[i]!= s[len(s)-i-1]:\n            return False\n        \n    return True\n    \n    \n    \n    \n    \ndef zigzag_traverse(m, n, i, j, direction):  \n    '''\n    Write a python function to print zig-zag traversal of a 2D matrix.\n    '''\n    if i == 0 and j == 0:\n        return\n    elif i == 0:\n        direction = -direction\n        \n    if direction == -1:\n        print(m[i][j], end = \" \")\n        \n        if j+1 >= n:\n            return\n        else:\n            zigzag_traverse(m, n, i, j+1, direction)\n            \n    elif direction == 1:\n        print(m[i][j], end = \" \")\n        if i+1 >= m:\n            return\n        else:\n            zigzag_traverse(m, n, i+1, j, direction)\n    \n    elif direction == 0:\n        print(m[i][j], end = \" \")\n        if j+1 >= n:\n            return\n        else:\n            zigzag_traverse(m, n, i, j+1, direction)\n            \n    elif direction == -2:\n        print(m[i][j], end = \" \")\n        if i+1 >= m:\n            return\n        else:\n            zigzag_traverse(m, n, i+1, j, direction)\n            \n    elif direction == 2:\n        print(m[i][j], end = \" \")\n        if j-1 < 0:\n            return\n        else:\n            zigzag_traverse(m, n, i, j-1, direction)\n            \n            \ndef is_divisible(num, divisor):  \n    '''\n    Write a python function to check whether a number is divisible by another number.\n    '''\n    if num%divisor == 0:\n        return True\n    else:\n        return False\n    \n    \ndef reverse_list_of_list(l):\n    '''\n    Write a python function to reverse the elements in a list of list.\n    '''\n    for i in range(len(l)):\n        l[i].reverse()\n    return l\n    \n    \ndef remove_duplicate(l):\n    '''\n    Write a python function to remove duplicate numbers in a list.\n    '''\n    for i in range(len(l)-1):\n        for j in range(i+1,len(l)):\n            if l[i] == l[j]:\n                l.pop(j)\n    return l\n    \n    \ndef is_palindrome_2(s):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef is_prime_2(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n//2):\n            if n%i == 0:\n                return False\n        return True\n    \n    \n    \ndef find_max(l, size):  \n    '''\n    Write a python function to find maximum number in a list.\n    '''\n    max_1 = l[0]\n    \n    for i in range(size):\n        if l[i] > max_1:\n            max_1 = l[i]\n    return max_1\n    \n    \ndef find_min(l, size):  \n    '''\n    Write a python function to find minimum number in a list.\n    '''\n    min_1 = l[0]\n    \n    for i in range(size):\n        if l[i] < min_1:\n            min_1 = l[i]\n    return min_1\n    \n    \ndef find_max_n(l, size, n):  \n    '''\n    Write a python function to find max-n in a list of size n.\n    '''\n    if size <= n:\n        return l[-1]\n    else:\n        for i in range(size-1, n-1, -1):\n            if l[i] > l[n-1]:\n                return l[i]\n    return l[n-1]\n    \n    \ndef find_min_n(l, size, n):  \n    '''\n    Write a python function to find min-n in a list of size n.\n    '''\n    if size <= n:\n        return l[0]\n    else:\n        for i in range(size-1, n-1, -1):\n            if l[i] < l[n-1]:\n                return l[i]\n    return l[n-1]\n    \n    \ndef find_max_max(l, size):  \n    '''\n    Write a python function to find maximum number among maximum number in a list.\n    '''\n    max_1 = l[0]\n    \n    for i in range(size):\n        if l[i] > max_1:\n            max_1 = l[i]\n            \n    return max_1\n    \n    \ndef find_max_min(l, size):  \n    '''\n    Write a python function to find minimum number among minimum number in a list.\n    '''\n    min_1 = l[0]\n    \n    for i in range(size):\n        if l[i] < min_1:\n            min_1 = l[i]\n            \n    return min_1\n    \n    \ndef find_min_max(l, size):  \n    '''\n    Write a python function to find maximum number among maximum number in a list.\n    '''\n    max_1 = l[0]\n    \n    for i in range(size):\n        if l[i] > max_1:\n            max_1 = l[i]\n            \n    return max_1\n    \n    \ndef find_min_min(l, size):  \n    '''\n    Write a python function to find minimum number among minimum number in a list.\n    '''\n    min_1 = l[0]\n    \n    for i in range(size):\n        if l[i] ",
        "num_ids": 30
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    import math\n    if(n>=m):\n        return int(math.floor(n/m))\n    else:\n        return int(math.floor(m/n))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2011
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    # print(int(n/m))\n    return int(n/m)\n    \ndef lcm(a, b):\n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    # print(int(a*b/gcd(a,b)))\n    return int(a*b/gcd(a,b))\n",
        "num_ids": 36
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (int(n)//int(m))\n",
        "num_ids": 15
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)\n",
        "num_ids": 11
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)\n",
        "num_ids": 11
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n    ",
        "num_ids": 9
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # if m>n:\n    #     q=m//n\n    #     print(q)\n    # else:\n    #     q=n//m\n    #     print(q)\n    # return\n    return int(n//m)\n    \nfind(40,20",
        "num_ids": 69
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\nprint(otherside_rightangle(4,5))\n",
        "num_ids": 31
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n",
        "num_ids": 18
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if (w**2 + h**2 - (h/2)*(w**2) == 0):\n        print(\"Third side is \" + str(math.sqrt(w**2 + h**2 - (h/2)*(w**2))))\n    else:\n        print(\"Third side is infinity\")\n",
        "num_ids": 74
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    x1 = 0\n    x2 = w\n    x3 = h\n    y1 = x1*x3/x2\n    y2 = x2*x3/x1\n    y3 = x3*x2/x1\n    if x1**2+x2**2-x3**2 == 0 or x1**2+x3**2-x2**2 == 0 or x2**2+x3**2-x1**2 == 0:\n        print(\"The values you provided are too small to find a right angle triangle.\")\n    elif y1**2+y2**2-y3**2 == 0 or y1**2+y3**2-y2**2 == 0 or y2**2+y3**2-y1**2 == 0:\n        print(\"The values you provided are too small to find a right angle triangle.\")\n    else:\n        #Solution from left\n        x = w/math.sqrt(y1**2+y2**2)\n        y = h/math.sqrt(y1**2+y3**2)\n        r = math.sqrt(x**2+y**2)\n        print(\"The value of the third side is: \",r)\ndef rightangle_angles(w,h):\n    '''\n    Write a function to find the side of a right angle triangle.\n    '''\n    x1 = 0\n    x2 = w\n    x3 = h\n    y1 = x1*x3/x2\n    y2 = x2*x3/x1\n    y3 = x3*x2/x1\n    if y1**2+y2**2-y3**2 == 0 or y1**2+y3**2-y2**2 == 0 or y2**2+y3**2-y1**2 == 0:\n        print(\"The values you provided are too small to find a right angle triangle.\")\n    else:\n        #Solution from left\n        x = w/math.sqrt(y1**2+y2**2)\n        y = h/math.sqrt(y1**2+y3**2)\n        r = math.sqrt(x**2+y**2)\n        print(\"The value of the side is: \",r)\ndef triangle_area(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    x = abs(a*b*c)/2\n    if x < 0:\n        print(\"The value you inputted is invalid. Try again.\")\n    else:\n        print(\"The area of the triangle is: \",x)\ndef triangle_perimeter(a,b,c):\n    '''\n    Write a function to calculate the perimeter of a triangle.\n    '''\n    x = abs(a+b+c)\n    if x < 0:\n        print(\"The value you inputted is invalid. Try again.\")\n    else:\n        print(\"The perimeter of the triangle is: \",x)\ndef rightangle_triangles(a,b,c):\n    '''\n    Write a function to calculate the three angles of a right angle triangle.\n    '''\n    x = abs(a*b*c)/2\n    if x < 0:\n        print(\"The value you inputted is invalid. Try again.\")\n    else:\n        if a == b == c:\n            print(\"The value of a is equal to b and c.\")\n        elif a == b or a == c or b == c:\n            print(\"The value of a is equal to b or c.\")\n        elif a**2 + b**2 == c**2:\n            print(\"The value of a and c are equal to each other.\")\n        else:\n            print(\"The value of the angles is: \",math.degrees(math.asin(a/x)),math.degrees(math.asin(b/x)),math.degrees(math.asin(c/x)))\ndef trapezoid_area(a,b,h):\n    '''\n    Write a function to calculate the area of a trapezoid.\n    '''\n    if a > b:\n        print(\"The value you inputted is invalid. Try again.\")\n    else:\n        x = abs(h*(a+b)/2)\n        if x < 0:\n            print(\"The value you inputted is invalid. Try again.\")\n        else:\n            print(\"The area of the trapezoid is: \",x)\ndef trapezoid_perimeter(a,b,h):\n    '''\n    Write a function to calculate the perimeter of a trapezoid.\n    '''\n    if a > b:\n        print(\"The value you inputted is invalid. Try again.\")\n    else:\n        x = abs(h*(a+b))\n        if x < 0:\n            print(\"The value you inputted is invalid. Try again.\")\n        else:\n            print(\"The perimeter of the trapezoid is: \",x)\ndef trapezoid_volume(a,b,h):\n    '''\n    Write a function to calculate the volume of a trapezoid.\n    '''\n    if a > b:\n        print(\"The value you inputted is invalid. Try again.\")\n    else:\n        x = abs(h*(a+b))\n        if x < 0:\n            print(\"The value you inputted is invalid. Try again.\")\n        else:\n            print(\"The volume of the trapezoid is: \",x*(a+b)/2)\ndef rightangle_triangles(a,b,c):\n    '''\n    Write a function to calculate the three angles of a right angle triangle.\n    '''\n    x = abs(a*b*c)/2\n    if x < 0:\n        print(\"The value you inputted is invalid. Try again.\")\n    else:\n        if a == b == c:\n            print(\"The value of a is equal to b and c.\")\n        elif a == b or a == c or b == c:\n            print(\"The value of a is equal to b or c.\")\n        elif a**2 + b**2 == c**2:\n            print(\"The value of a and c are equal to each other.\")\n        else:\n            print(\"The value of the angles is: \",math.degrees(math.asin(a/x)),math.degrees(math.asin(b/x)),math.degrees(math.asin(c/x)))\ndef area_of_circle(r):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    if r < 0:\n        print(\"The value you inputted is invalid. Try again.\")\n    else:\n        x = math.pi*r**2\n        print(\"The value of the area of the circle is: \",x)\ndef volume_of_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    if r < 0:\n        print(\"The value you inputted is invalid. Try again.\")\n    else:\n        x = 4/3*math.pi*r**3\n        print(\"The value of the volume of the sphere is: \",x)\ndef volume_of_cylinder(h,r):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    if r < 0 or h < 0:\n        print(\"The value you inputted is invalid. Try again.\")\n    else:\n        x = math.pi*h*r**2\n        print(\"The value of the volume of the cylinder is: \",x)\ndef volume_of_cone(h,r,l):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    if r < 0 or h < 0 or l < 0:\n        print(\"The value you inputted is invalid. Try again.\")\n    else:\n        x = math.pi*h*(r**2+l**2)\n        print(\"The value of the volume of the cone is: \",x)\ndef volume_of_parabola(a,b):\n    '''\n    Write a function to calculate the volume of a parabola.\n    '''\n    if a < 0:\n        print(\"The value you inputted is invalid. Try again.\")\n    else:\n        x = (a**2+b**2)**0.5\n        print(\"The value of the volume of the parabola is: \",x)\ndef parabola_area(a,b):\n    '''\n    Write a function to calculate the area of a parabola",
        "num_ids": 15
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(h**2 - (h/2)**2 )\ndef otherside_equilateral(w,h):\n    '''\n    Write a function to find the third side of a equilateral triangle.\n    '''\n    return w/2\ndef otherside_squre(w,h):\n    '''\n    Write a function to find the third side of a square triangle.\n    '''\n    return h\ndef otherside_triangle(w,h):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return math.sqrt(h**2 - w**2 )\ndef otherside_hypotenuse(w,h):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return math.sqrt(h**2 + w**2 )\ndef otherside_obtuse(w,h):\n    '''\n    Write a function to find the third side of an obtuse triangle.\n    '''\n    return math.sqrt(h**2 + (h/2)**2 )\ndef otherside_acute(w,h):\n    '''\n    Write a function to find the third side of an acute triangle.\n    '''\n    return math.sqrt(h**2 + w**2 )\ndef area_triangle(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return w*h/2\ndef area_square(w,h):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return w*h\ndef area_rectangle(w,h):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return w*h\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return (math.pi)*r**2\ndef area_hexagon(w):\n    '''\n    Write a function to find the area of a hexagon.\n    '''\n    return 6*w\ndef area_octagon(w):\n    '''\n    Write a function to find the area of a octagon.\n    '''\n    return 8*w\ndef area_semicircle(r):\n    '''\n    Write a function to find the area of a semicircle.\n    '''\n    return (2*math.pi*r)**2\ndef area_trapezoid(w,h):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    return (w+h)*h/2\ndef area_parallelogram(w,h):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return w*h\ndef area_trapezoid_triangle(w,h):\n    '''\n    Write a function to find the area of a trapezoid triangle.\n    '''\n    return (w+h)*h/2\ndef area_parallelogram_triangle(w,h):\n    '''\n    Write a function to find the area of a parallelogram triangle.\n    '''\n    return w*h\ndef volume_cube(w):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return w**3\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\ndef volume_cylinder(w,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (w*h)*math.pi\ndef volume_cone(w,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*(w*h)/3\ndef volume_cone_top(w,h):\n    '''\n    Write a function to find the volume of a cone with top cap.\n    '''\n    return ((w+h)*math.pi)/3\ndef volume_cone_bottom(w,h):\n    '''\n    Write a function to find the volume of a cone with bottom cap.\n    '''\n    return ((w+h)*math.pi)/3\ndef volume_pyramid(w,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return (((w*h)/3)**2)*math.pi\ndef volume_pyramid_top(w,h):\n    '''\n    Write a function to find the volume of a pyramid with top cap.\n    '''\n    return (((w*h)/3)**2)*math.pi\ndef volume_pyramid_bottom(w,h):\n    '''\n    Write a function to find the volume of a pyramid with bottom cap.\n    '''\n    return (((w*h)/3)**2)*math.pi\ndef volume_cylinder_side(r):\n    '''\n    Write a function to find the volume of a cylinder with a side.\n    '''\n    return (4/3)*math.pi*r**2\ndef volume_cylinder_bottom(r):\n    '''\n    Write a function to find the volume of a cylinder with bottom cap.\n    '''\n    return ((4/3)*math.pi*r**2)\ndef volume_cylinder_top(r):\n    '''\n    Write a function to find the volume of a cylinder with top cap.\n    '''\n    return ((4/3)*math.pi*r**2)\ndef volume_cone_side(w,h):\n    '''\n    Write a function to find the volume of a cone with a side.\n    '''\n    return (w*h)*math.pi\ndef volume_cone_top(w,h):\n    '''\n    Write a function to find the volume of a cone with top cap.\n    '''\n    return ((w*h)*math.pi)\ndef volume_cone_bottom(w,h):\n    '''\n    Write a function to find the volume of a cone with bottom cap.\n    '''\n    return ((w*h)*math.pi)\ndef volume_triangle(w,h):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return (w*h)/3\ndef volume_trapezoid(w,h):\n    '''\n    Write a function to find the volume of a trapezoid.\n    '''\n    return (w+h)*h/2\ndef volume_square(w):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    return w*w\ndef volume_rectangle(w,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return w*h\ndef volume_circle(r):\n    '''\n    Write a function to find the volume of a circle.\n    '''\n    return (math.pi)*r**2\ndef volume_hexagon(w):\n    '''\n    Write a function to find the volume of a hexagon.\n    '''\n    return 6*w\ndef volume_octagon(w):\n    '''\n    Write a function to find the volume of an octagon.\n    '''\n    return 8*w\ndef volume_semicircle(r):\n    '''\n    Write a function to find the volume of a semicircle.\n    '''\n    return (2*math.pi*r)**2\ndef volume_triangle_vertical(w):\n    '''\n    Write a function to find the volume of a triangle with a vertical base.\n    '''\n    return (w*w)/2\ndef volume_triangle_horizontal(h):\n    '''\n    Write a function to find the volume of a triangle with a horizontal base.\n    '''\n    return h*h/2\ndef volume_trapezoid_vertical(w):\n    '''\n    Write a function to find the volume of a trapezoid with a vertical base.\n    '''\n    return (w+w)*w/2\ndef volume_trapezoid_horizontal(h):\n    '''\n    Write a function to find the volume of a trapezoid with a horizontal base.\n    '''\n    return (h+h)*h/2\ndef volume_square_ver",
        "num_ids": 19
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)/2\n",
        "num_ids": 19
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w*h)/2\n",
        "num_ids": 11
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    sideA = w\n    sideB = h\n    sideC = math.sqrt(sideA**2 + sideB**2 - 2*sideA*sideB*math.cos(math.radians(120)))\n    return sideC\n",
        "num_ids": 58
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    assert (w > 0) and (h > 0), \"Argument should be > 0\"\n    return math.sqrt(w**2+h**2)\n    \nassert (otherside_rightangle(2,3) == 4), \"Wrong answer\"\nassert (otherside_rightangle(5,10) == 5.638331363231337), \"Wrong answer\"\n",
        "num_ids": 93
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    print(w*h**0.5)\n",
        "num_ids": 14
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val\n    \n",
        "num_ids": 45
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max_value:\n            max_value = listval[i]\n    return max_value\n",
        "num_ids": 56
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val\n",
        "num_ids": 58
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    if len(listval) == 1:\n        return listval[0]\n    if len(listval) == 2:\n        if listval[0] > listval[1]:\n            return listval[0]\n        else:\n            return listval[1]\n    listval.sort()\n    if listval[0] > listval[1]:\n        return listval[0]\n    elif listval[0] == listval[1]:\n        return listval[0]\n    else:\n        return listval[1]\n",
        "num_ids": 145
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_value:\n            max_value = listval[i]\n    return max_value\n",
        "num_ids": 58
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n",
        "num_ids": 10
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val\n",
        "num_ids": 43
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val\n",
        "num_ids": 58
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    \n    max_val = listval[0]\n    \n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n",
        "num_ids": 56
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if listval:\n        m = listval[0]\n        for i in range(1,len(listval)):\n            if m<listval[i]:\n                m = listval[i]\n    else:\n        m=None\n    return m\n",
        "num_ids": 64
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 1\n    for i in range(1, number):\n        if number % i == 0:\n            sum = sum + i\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div = 1\n    summ = 0\n    while div <= number:\n        if number % div == 0:\n            summ += div\n        div += 1\n    return summ\n",
        "num_ids": 44
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    number = abs(number)\n    if number < 2:\n        return 0\n    if number == 2:\n        return 1\n    divisors = set()\n    divisor = 1\n    while divisor <= number // 2:\n        if number % divisor == 0:\n            divisors.add(divisor)\n            divisors.add(number // divisor)\n        divisor += 1\n    return sum(divisors)\n",
        "num_ids": 111
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor = 1\n    summ = 0\n    while divisor <= number:\n        if number % divisor == 0:\n            summ += divisor\n        divisor += 1\n    return summ\n",
        "num_ids": 54
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = 0\n    for i in range(1, number):\n        if number%i == 0:\n            divisors += i\n    return divisors\n    \n",
        "num_ids": 44
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "num_ids": 50
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    count = 1\n    sum_div = 0\n    while count <= number:\n        if number % count == 0:\n            sum_div += count\n        count += 1\n    return sum_div\n",
        "num_ids": 48
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum = sum + i\n",
        "num_ids": 36
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div = 2\n    while number % div!= 0:\n        div += 1\n    return div\n",
        "num_ids": 26
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum_div += i\n    return sum_div\n",
        "num_ids": 42
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    res = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[i]:\n                res += 1\n    return res\n    \n    ",
        "num_ids": 59
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    length = len(arr)\n    count = 0\n    for i in range(length):\n        for j in range(i+1,length):\n            if arr[i] > arr[j] :\n                count += 1\n    print(\"Total number of inversions in the array: \", count)\n",
        "num_ids": 71
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    else:\n        count = 0\n        #count inversion in the left array\n        #swap the elements in left array in sorted order\n        for i in range(n):\n            for j in range(i):\n                if arr[i] > arr[j]:\n                    count += 1\n        #count inversion in the right array\n        #swap the elements in right array in sorted order\n        for i in range(n-1):\n            for j in range(n-1,i,-1):\n                if arr[i] > arr[j]:\n                    count += 1\n        return count\n",
        "num_ids": 158
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    print(count)\n",
        "num_ids": 56
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def mergeSort(arr, left, right): \n        if (right - left) < 16: \n            quickSort(arr, left, right) \n            return\n",
        "num_ids": 42
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    if n==1:\n        return 0\n    count = 0\n    left = 0\n    right = n-1\n    while (left < right):\n        if arr[left] > arr[right]:\n            count += right-left\n            right -= 1\n        else:\n            left += 1\n    return count\n",
        "num_ids": 83
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count=0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[j]<arr[i]:\n                count+=1\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def get_Count(arr):\n        if len(arr) == 1:\n            return 0\n        else:\n            count = 0\n            for i in range(len(arr)):\n                left = arr[:i]\n                right = arr[i+1:]\n                if(sorted(left)!= left):\n                    count = count + 1\n                if(sorted(right)!= right):\n                    count = count + 1\n            return count\n    return get_Count(arr)\n    \n    \n    ",
        "num_ids": 121
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n=len(arr)\n    if n==1:\n        return 0\n    if n==2:\n        return 1 if arr[0]>arr[1] else 0\n    count = 0\n    for i in range(n-1):\n        if arr[i]>arr[i+1]:\n            count+=1\n    return count\n    \ndef get_Inv_Count_fast(arr): \n    '''\n    Write a python function to count inversions in an array in constant space.\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n-1):\n        curr_min, curr_max = i, n-1\n        while curr_min < curr_max:\n            if arr[curr_min] > arr[curr_max]:\n                count+=1\n            curr_min+=1\n            curr_max-=1\n    return count\n",
        "num_ids": 100
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count = count + 1\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for i in list1:\n        if isinstance(i, list):\n            new_list.extend(flatten_list(i))\n        else:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 63
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    print(\"Original list\",list1)\n    if len(list1) == 0:\n        return list1\n    else:\n        result = list1[0]\n        for element in list1[1:]:\n            result = result + element\n        return result\n    \nprint(flatten_list([1,[2,[3,4,[5,6,7]]]])",
        "num_ids": 88
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    output = []\n",
        "num_ids": 7
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    for i in range(len(list1)):\n        if isinstance(list1[i],list):\n            flatten_list(list1[i])\n        else:\n            list1[i] = list1[i]\n",
        "num_ids": 57
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [i for l in list1 for i in l]\n",
        "num_ids": 17
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flatten = []\n    for sublist in list1:\n        if type(sublist) == list:\n            flatten.extend(sublist)\n        else:\n            flatten.append(sublist)\n    return flatten\n",
        "num_ids": 58
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list_flat = []\n    for element in list1:\n        if type(element) == list:\n            list_flat.extend(flatten_list(element))\n        else:\n            list_flat.append(element)\n    return list_flat\n",
        "num_ids": 63
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for x in list1:\n        if type(x) == list:\n            flat_list += flatten_list(x)\n        else:\n            flat_list.append(x)\n    return flat_list\n",
        "num_ids": 60
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    output = []\n    for item in list1:\n        if type(item) is list:\n            output.extend(flatten_list(item))\n        else:\n            output.append(item)\n    return output\n",
        "num_ids": 55
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return []\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    else:\n        return list1[:1] + flatten_list(list1[1:])\n",
        "num_ids": 80
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata.sort(key=lambda x: x[1], reverse=True)\n    max_aggregate = 0\n    for elem in range(len(stdata)):\n        max_aggregate += stdata[elem][0]\n    return max_aggregate\n",
        "num_ids": 66
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    a = set()\n    maxi = float('-inf')\n    for item in stdata:\n        if item[0] in a:\n            maxi = max(maxi, item[1])\n        else:\n            a.add(item[0])\n            maxi = max(maxi, item[1])\n    return maxi\n",
        "num_ids": 83
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    count = 0\n    for i in stdata:\n        if i[0] == '+':\n            count += i[1]\n        else:\n            count -= i[1]\n        if count > max_aggregate:\n            max_aggregate = count\n    return max_aggregate\n",
        "num_ids": 79
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = float('-inf')\n    for i in stdata:\n        aggregate = sum(i)\n        if aggregate > max_agg:\n            max_agg = aggregate\n    return max_agg\n",
        "num_ids": 52
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    totals = defaultdict(int)\n    for amount, count in stdata:\n        totals[amount] += count\n    return max(totals.keys(), key=(lambda k: totals[k]))\n",
        "num_ids": 54
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_value = 0\n    if not stdata:\n        return max_value\n    for num in stdata:\n        if num > max_value:\n            max_value = num\n    return max_value\n",
        "num_ids": 52
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg = defaultdict(int)\n    for s,t,v in stdata:\n        agg[s] += v\n    return max(agg.values())\n",
        "num_ids": 40
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    result = max(stdata)\n    return result\ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    result = min(stdata)\n    return result\n",
        "num_ids": 15
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #get a dictionary of each unique day and how many occurences of that day\n    days = defaultdict(int)\n    for key in stdata:\n        days[key[0]] += 1\n    #find the max occurence for each day\n    days_max = {}\n    for key, value in days.items():\n        if value > 0:\n            days_max[key] = value\n    #get the keys sorted by value\n    sort_key = sorted(days_max.keys(), key=lambda x:days_max[x], reverse=True)\n    #get the top 1\n    top_key = sort_key[0]\n    top_val = days_max[top_key]\n    return top_key, top_val\n",
        "num_ids": 176
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_value = float('-inf')\n    for i in stdata:\n        # print(i)\n        for j in i:\n            max_value = max(max_value, j)\n",
        "num_ids": 49
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    def binary_seq(n):\n        '''\n        Compute all binary sequence with length equal to n.\n        '''\n        \n        # Start from 2^n to 2^n + 1\n        for i in range(2**n):\n            yield (2**n, i)\n            \n        for i in range(2**n):\n            # Compute first n bits and add '1' in front\n            yield (i, 2**n)\n            \n            # Compute last n bits and add '0' in front\n            yield ((2**n + 1) - i, 2**n)\n            \n    \n    def count_binary_seq_helper(n):\n        '''\n        Helper function to solve the problem.\n        '''\n        \n        # For a given n, the sum of first n bits and last n bits must be equal to the sum of all other n bits.\n        # So we have to count all binary sequences such that sum of first n bits and sum of last n bits are equal.\n        # So we need a dictionary to store the count of binary sequences with sum of first n bits and sum of last n bits equal to sum of all other n bits.\n        \n        # Initialize the dictionary.\n        count_dict = {(0,): 1}\n        \n        # Helper function to get sum of all n bits in given binary sequence.\n        def get_sum(binary_seq):\n            sum = 0\n            for bit in binary_seq:\n                sum += bit\n            return sum\n        \n        # Helper function to get sum of all n bits in given binary sequence.\n        def get_sum_helper(binary_seq):\n            sum = 0\n            for i in range(len(binary_seq)):\n                sum += binary_seq[i]\n            return sum\n        \n        # Helper function to update the count of binary sequences with sum of first n bits and sum of last n bits equal to sum of all other n bits.\n        # If the count is not in the dictionary, add it and return the count.\n        def update_count(binary_seq, count_dict):\n            binary_sum = get_sum_helper(binary_seq)\n            \n            # If count is not in dictionary, return 0.\n            if binary_sum not in count_dict:\n                count_dict[binary_sum] = 0\n            \n            # If count is already in dictionary, return the count.\n            else:\n                return count_dict[binary_sum]\n        \n        \n        # Starting from n = 2, n = 3, n = 4, n = 5, n = 6, n = 7, n = 8, n = 9, n = 10, n = 11\n        for n in range(2, 11):\n            # Get all binary sequences with length 2n.\n            binary_seqs = binary_seq(n)\n            \n            # Iterate through all binary sequences and update the count of binary sequences with sum of first n bits and sum of last n bits equal to sum of all other n bits.\n            for binary_seq in binary_seqs:\n                binary_sum = get_sum_helper(binary_seq)\n                \n                if binary_sum not in count_dict:\n                    count_dict[binary_sum] = 0\n                \n                count_dict[binary_sum] += update_count(binary_seq, count_dict)\n                \n        return len(count_dict)\n    \n    \n    # Calling the helper function to solve the problem.\n    return count_binary_seq_helper(n)\n    \nprint(count_binary_seq(2))\nprint(count_binary_seq(3))\nprint(count_binary_seq(4))\nprint(count_binary_seq(5))\nprint(count_binary_seq(6))\nprint(count_binary_seq(7))\nprint(count_binary_seq(8))\nprint(count_binary_seq(9))\nprint(count_binary_seq(10))\nprint(count_binary_seq(11))\n",
        "num_ids": 754
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    def is_sequence(num):\n        str_num = str(bin(num))[2:]\n        length = len(str_num)\n        for i in range(length):\n            if str_num[i]!= '1':\n                return False\n        return True\n        \n    def count_sequence(n, seq):\n        if seq == 0:\n            if sum(seq) == 0:\n                return 1\n        if n == 0:\n            return 0\n        total_seq = 0\n        for i in range(1 << n):\n            if is_sequence(i):\n                temp_seq = copy.deepcopy(seq)\n                temp_seq.append(i)\n                total_seq += count_sequence(n - 1, temp_seq)\n        return total_seq\n    \n    return count_sequence(n, [])\n",
        "num_ids": 201
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq(n-2) + count_binary_seq(n-1))\n    \ndef count_binary_seq_bit_1(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq_bit_1(n-2) + count_binary_seq_bit_1(n-1))\n    \ndef count_binary_seq_bit_2(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq_bit_2(n-2) + count_binary_seq_bit_2(n-1))\n    \ndef count_binary_seq_bit_3(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq_bit_3(n-2) + count_binary_seq_bit_3(n-1))\n    \ndef count_binary_seq_bit_4(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq_bit_4(n-2) + count_binary_seq_bit_4(n-1))\n    \ndef count_binary_seq_bit_5(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq_bit_5(n-2) + count_binary_seq_bit_5(n-1))\n    \ndef count_binary_seq_bit_6(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq_bit_6(n-2) + count_binary_seq_bit_6(n-1))\n    \ndef count_binary_seq_bit_7(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq_bit_7(n-2) + count_binary_seq_bit_7(n-1))\n    \ndef count_binary_seq_bit_8(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq_bit_8(n-2) + count_binary_seq_bit_8(n-1))\n    \ndef count_binary_seq_bit_9(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq_bit_9(n-2) + count_binary_seq_bit_9(n-1))\n    \ndef count_binary_seq_bit_10(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq_bit_10(n-2) + count_binary_seq_bit_10(n-1))\n    \ndef count_binary_seq_bit_11(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq_bit_11(n-2) + count_binary_seq_bit_11(n-1))\n    \ndef count_binary_seq_bit_12(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq_bit_12(n-2) + count_binary_seq_bit_12(n-1))\n    \ndef count_binary_seq_bit_13(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq_bit_13(n-2) + count_binary_seq_bit_13(n-1))\n    \ndef count_binary_seq_bit_14(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq_bit_14(n-2) + count_binary_seq_bit_14(n-1))\n    \ndef count_binary_seq_bit_15(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq_bit_15(n-2) + count_binary_seq_bit_15(n-1))\n    \ndef count_binary_seq_bit_16(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return (count_binary_seq_bit_16(n-2) + count_binary_seq_bit_16(n-1))\n    \ndef count_binary_seq_bit_17(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n =",
        "num_ids": 17
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count=0\n    for i in range(0,2**n):\n        binary=bin(i)\n        count+=1\n        if sum(binary[:n])==sum(binary[n:]):\n            print(binary,count)\n    return count\n",
        "num_ids": 63
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_two_seq(n): \n        '''\n        Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n        '''\n        count = 0\n        for i in range(1, 1<<n): \n            sum_of_i = sum_of_i_bits(i, n)\n            sum_of_last_n = sum_of_last_n_bits(i, n)\n            if sum_of_i == sum_of_last_n: \n                count += 1\n        return count\n    \n    def sum_of_i_bits(i, n):\n        sum = 0\n        for j in range(n): \n            sum += (i>>j) & 1\n        return sum\n    \n    def sum_of_last_n_bits(i, n):\n        sum = 0\n        for j in range(n-1, -1, -1): \n            sum += (i>>j) & 1\n        return sum\n    \n    return count_two_seq(n)\n    ",
        "num_ids": 210
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    ans = 0\n    for i in range(n):\n        ans += bin(i).count('1')\n    return ans\n",
        "num_ids": 32
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Solution 1\n    # Traverse the given binary number and increment the count for the first and last numbers.\n    # then check the sum of the first and last numbers\n    # using bit operation, i.e. int a = a<<1 \n    # and int b = b>>1\n    count = 0\n    n = int(n)\n    for i in range(n+1):\n        a = i\n        b = n - i\n        c = (a<<1) + b\n        print(f'a = {a}')\n        print(f'b = {b}')\n        print(f'c = {c}')\n        print('\\n')\n        count += 1\n        if (a + b + c == n*(n+1)//2):\n            print(f'The count for a binary sequence of length {i} is {count}\\n')\n            return count\n",
        "num_ids": 210
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n",
        "num_ids": 13
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(n+1):\n        if sum(bin(i)[:n]) == sum(bin(i+1)[:-1]):\n            count += 1\n    return count\n",
        "num_ids": 52
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==0:\n        return 1\n    else:\n        return 2**n + count_binary_seq(n-1)\n",
        "num_ids": 34
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if len(d.keys()) == 0:\n        return 0\n    return max([dict_depth(x) for x in d.values()]) + 1\n",
        "num_ids": 39
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d,dict):\n        return 0\n    depth = 0\n    for key in d:\n        depth = max(depth,dict_depth(d[key]))\n    return depth + 1\n",
        "num_ids": 52
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    \n    if d == {}:\n        return 0\n    else:\n        return 1 + dict_depth(d[list(d)[0]])\n",
        "num_ids": 37
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max([dict_depth(v) for v in d.values()])\n    else:\n        return 0\n",
        "num_ids": 41
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def depth(d,depth):\n        if isinstance(d,dict):\n            depth +=1\n            return depth + max(depth(d.get(k,0),depth) for k in d.keys())\n        else:\n            return depth\n    \n    return depth(d,0)\n",
        "num_ids": 71
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 0\n    for i in d.values():\n        if type(i) == dict:\n            count += 1\n        else:\n            return count\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return (max([len(item) for item in d.items()]) - 1) if d else 0\n",
        "num_ids": 27
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for i in d.keys():\n        if type(d[i]) == dict:\n            depth = max(depth, dict_depth(d[i]))\n        else:\n            depth += 1\n    return depth\n",
        "num_ids": 58
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    d_depth = 0\n    if d!= {}:\n        if type(d)!= dict:\n            d_depth = 1\n        elif type(d) == dict:\n            for k in d:\n                d_depth += 1\n                d_depth = dict_depth(d[k])\n    return d_depth\n    \nprint(dict_depth(d))\n",
        "num_ids": 90
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return len(d)\n    ",
        "num_ids": 10
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    from numpy import zeros,count_nonzero,where\n    for i in range(len(arr)) : \n        print(arr[i])\n    if index >= len(arr) :\n        print(\"Index out of range!\")\n        return\n    arr_size = len(arr)\n    curr_pos = index \n    #print(arr_size)\n    arr_arr = zeros(arr_size,int)\n    \n    for i in range(0,arr_size) : \n        arr_arr[i] = arr[(curr_pos + i)%arr_size]\n    #print(arr_arr)\n    #print(arr_arr)\n    rotations = rotations % len(arr_arr)\n    #print(rotations)\n    if rotations == 0 : \n        return arr_arr[index]\n    arr_arr_cpy = arr_arr.copy()\n    if rotations < 0 : \n        for i in range(rotations,0) : \n            arr_arr_cpy = arr_arr_cpy[::-1]\n            #print(arr_arr_cpy)\n    else : \n        for i in range(0,rotations) : \n            arr_arr_cpy = arr_arr_cpy[::1]\n            #print(arr_arr_cpy)\n    #print(arr_arr_cpy)\n    return arr_arr_cpy[index]\n",
        "num_ids": 347
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    pos_1=ranges[index]\n    pos_2=pos_1+rotations\n    pos_3=ranges[index+1]\n    pos_4=pos_3-rotations\n    \n    print(arr[pos_1:pos_2])\n    print(arr[pos_3:pos_4])\n    \n    return arr[pos_2]\n",
        "num_ids": 91
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    count=0\n    for i in range(0,len(arr)):\n        if arr[i]>=ranges[count] and arr[i]<=ranges[count+1]:\n            count+=1\n    if count==index:\n        return True\n    else:\n        return False\n",
        "num_ids": 73
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index >= len(ranges) :\n        return arr[index]\n    if rotations[index] == 0 :\n        return arr[index]\n    elif rotations[index] > 0 :\n        for i in range(len(ranges)) :\n            if ranges[i] < index :\n                continue\n            if index < ranges[i] :\n                break\n        return find_Element(arr,ranges,rotations,index - (index - ranges[i - 1]))\n    else :\n        for i in range(len(ranges)) :\n            if ranges[i] < index :\n                continue\n            if index < ranges[i] :\n                break\n        return find_Element(arr,ranges,rotations,index - (index - ranges[i - 1]))\n",
        "num_ids": 186
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #print(arr)\n    low = 0\n    high = len(arr)\n    while low < high : \n        mid = (low+high) // 2\n        #print(\"low: {}, high: {}, mid: {}\".format(low,high,mid))\n        if (arr[mid] < ranges[index]) :\n            low = mid + 1\n        else :\n            high = mid\n    if arr[low] < ranges[index] :\n        low += 1\n    return low\n",
        "num_ids": 118
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    # Base case : No more ranges left.\n    if len(ranges) == 0 :\n        return -1\n    \n    # Find the rotation index at which element will be placed.\n    rot_index = 0\n    for i in range(0,len(rotations)) :\n        if ranges[i][0] <= index < ranges[i][1] :\n            rot_index = i\n            break\n    \n    # Check if there are more than one rotations.\n    if len(rotations) > 1 :\n        index = index - ranges[rot_index][0]\n        index = index + rotations[rot_index]\n        \n    return find_Element(arr,ranges[:rot_index]+ranges[rot_index+1:],rotations[:rot_index]+rotations[rot_index+1:],index)\n",
        "num_ids": 200
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index > len(arr)-1:\n        return -1\n    if index == len(arr)-1 :\n        if (len(arr)%rotations==0):\n            return arr[index]\n        else:\n            return -1\n    else:\n        return find_Element(arr,ranges,rotations,index+1)\n            \n",
        "num_ids": 84
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(ranges)):\n        if ranges[i][0]<=index<=ranges[i][1]:\n            if rotations[i]==0:\n                return arr[index]\n            else:\n                if index%rotations[i]==0:\n                    return arr[index]\n                else:\n                    return arr[index]%arr[index//rotations[i]]\n    return -1\n",
        "num_ids": 104
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(0,len(arr)) :\n        if arr[i] >= ranges[index] :\n            break\n        if i == len(arr)-1 :\n            return -1\n    if i == len(arr)-1 :\n        return -1\n    \n    x = find_Element(arr,ranges,rotations,index+rotations[i])\n    if x!= -1 :\n        return x\n    else :\n        x = find_Element(arr,ranges,rotations,index-rotations[i])\n        if x!= -1 :\n            return x\n        else :\n            return arr[i]\n",
        "num_ids": 153
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index>0:\n        for i in range(index):\n            rotations = rotations*-1\n        rotations = rotations + 1\n    if index > len(arr)-1:\n        return False\n    else:\n        if rotations == 0:\n            if arr[index]==arr[index-1]:\n                return arr[index]\n            else:\n                return False\n        else:\n            return find_Element(arr,ranges,rotations,index-1)\n",
        "num_ids": 116
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile('p')\n    return [word for word in words if pattern.match(word)!= None]\nprint(start_withp([\"hello\",\"python\",\"programming\",\"program\",\"snake\"]))\n",
        "num_ids": 54
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p':\n            return word\ndef part1(words):\n    '''\n    Write a function that returns a list of words that end in 'ing'.\n    '''\n    ing_words = []\n    for word in words:\n        if word[-3:] == 'ing':\n            ing_words.append(word)\n    return ing_words\ndef part2(words):\n    '''\n    Write a function that returns a list of words that have'sword' somewhere in the middle of the word.\n    '''\n    sword_words = []\n    for word in words:\n        if'sword' in word:\n            sword_words.append(word)\n    return sword_words\ndef part3(words):\n    '''\n    Write a function that returns a list of words that have 'chair' somewhere in the middle of the word.\n    '''\n    chair_words = []\n    for word in words:\n        if 'chair' in word:\n            chair_words.append(word)\n    return chair_words\ndef part4(words):\n    '''\n    Write a function that returns a list of words that have 'chair' somewhere in the middle of the word.\n    '''\n    chair_words = []\n    for word in words:\n        if 'chair' in word:\n            chair_words.append(word)\n    return chair_words\ndef part5(words):\n    '''\n    Write a function that returns a list of words that have 'chair' somewhere in the middle of the word.\n    '''\n    chair_words = []\n    for word in words:\n        if 'chair' in word:\n            chair_words.append(word)\n    return chair_words\ndef part6(words):\n    '''\n    Write a function that returns a list of words that have 'chair' somewhere in the middle of the word.\n    '''\n    chair_words = []\n    for word in words:\n        if 'chair' in word:\n            chair_words.append(word)\n    return chair_words\ndef part7(words):\n    '''\n    Write a function that returns a list of words that have 'chair' somewhere in the middle of the word.\n    '''\n    chair_words = []\n    for word in words:\n        if 'chair' in word:\n            chair_words.append(word)\n    return chair_words\ndef part8(words):\n    '''\n    Write a function that returns a list of words that have 'chair' somewhere in the middle of the word.\n    '''\n    chair_words = []\n    for word in words:\n        if 'chair' in word:\n            chair_words.append(word)\n    return chair_words\ndef part9(words):\n    '''\n    Write a function that returns a list of words that have 'chair' somewhere in the middle of the word.\n    '''\n    chair_words = []\n    for word in words:\n        if 'chair' in word:\n            chair_words.append(word)\n    return chair_words\ndef part10(words):\n    '''\n    Write a function that returns a list of words that have 'chair' somewhere in the middle of the word.\n    '''\n    chair_words = []\n    for word in words:\n        if 'chair' in word:\n            chair_words.append(word)\n    return chair_words\ndef part11(words):\n    '''\n    Write a function that returns a list of words that have 'chair' somewhere in the middle of the word.\n    '''\n    chair_words = []\n    for word in words:\n        if 'chair' in word:\n            chair_words.append(word)\n    return chair_words\ndef part12(words):\n    '''\n    Write a function that returns a list of words that have 'chair' somewhere in the middle of the word.\n    '''\n    chair_words = []\n    for word in words:\n        if 'chair' in word:\n            chair_words.append(word)\n    return chair_words\ndef part13(words):\n    '''\n    Write a function that returns a list of words that have 'chair' somewhere in the middle of the word.\n    '''\n    chair_words = []\n    for word in words:\n        if 'chair' in word:\n            chair_words.append(word)\n    return chair_words\ndef part14(words):\n    '''\n    Write a function that returns a list of words that have 'chair' somewhere in the middle of the word.\n    '''\n    chair_words = []\n    for word in words:\n        if 'chair' in word:\n            chair_words.append(word)\n    return chair_words\ndef part15(words):\n    '''\n    Write a function that returns a list of words that have 'chair' somewhere in the middle of the word.\n    '''\n    chair_words = []\n    for word in words:\n        if 'chair' in word:\n            chair_words.append(word)\n    return chair_words\ndef part16(words):\n    '''\n    Write a function that returns a list of words that have 'chair' somewhere in the middle of the word.\n    '''\n    chair_words = []\n    for word in words:\n        if 'chair' in word:\n            chair_words.append(word)\n    return chair_words\ndef part17(words):\n    '''\n    Write a function that returns a list of words that have 'chair' somewhere in the middle of the word.\n    '''\n    chair_words = []\n    for word in words:\n        if 'chair' in word:\n            chair_words.append(word)\n    return chair_words\ndef part18(words):\n    '''\n    Write a function that returns a list of words that have 'chair' somewhere in the middle of the word.\n    '''\n    chair_words = []\n    for word in words:\n        if 'chair' in word:\n            chair_words.append(word)\n    return chair_words\ndef part19(words):\n    '''\n    Write a function that returns a list of words that have 'chair' somewhere in the middle of the word.\n    '''\n    chair_words = []\n    for word in words:\n        if 'chair' in word:\n            chair_words.append(word)\n    return chair_words\ndef part20(words):\n    '''\n    Write a function that returns a list of words that have 'chair' somewhere in the middle of the word.\n    '''\n    chair_words = []\n    for word in words:\n        if 'chair' in word:\n            chair_words.append(word)\n    return chair_words\ndef part21(words):\n    '''\n    Write a function that returns a list of words that have 'chair' somewhere in the middle of the word.\n    '''\n    chair_words = []\n    for word in words:\n        if 'chair' in word:\n            chair_words.append(word)\n    return chair_words\ndef part22(words):\n    '''\n    Write a function that returns a list of words that have 'chair' somewhere in the middle of the word.\n    '''\n    chair_words = []\n    for word in words:\n        if 'chair' in word:\n            chair_words.append(word)\n    return chair_words\ndef part23(words):\n    '''\n    Write a function that returns a list of words that have 'chair' somewhere in the middle of the word.\n    '''\n    chair_words = []\n    for word in words:\n        if 'chair' in word:\n            chair_words.append(word)\n    return chair_words\ndef part24(words):\n    '''\n    Write a function that returns a list of words that have 'chair' somewhere in the middle of the word.\n    '''\n    chair_words = []\n    for word in words:\n        if 'chair' in word:\n            chair_words.append(word)\n    return chair_words\ndef part25(words):\n    '''\n    Write a function that returns a list of words that have 'chair' somewhere in the middle of the word.\n    '''\n    chair_words = []\n    for word in words:\n        if 'chair' in word:\n            chair_words.append(word)\n    return chair_words\ndef part26(words):\n    '''\n    Write a function that returns a list of words that have 'chair' somewhere in the middle of the word.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = []\n    for word in words:\n        if word[0] == 'p':\n            p.append(word)\n    return p\n",
        "num_ids": 37
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res = []\n    for word in words:\n        if word[0] == 'p':\n            res.append(word)\n    return res\n",
        "num_ids": 37
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    list = []\n    for i in words:\n        if i[0] == 'p':\n            list.append(i)\n    print(list)\n    return list\n",
        "num_ids": 43
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    s1 = []\n    s2 = []\n    words.sort()\n    i = 0\n    while i < len(words):\n        if words[i].startswith('p'):\n            s1.append(words[i])\n            i = i+1\n        else:\n            s2.append(words[i])\n            i = i+1\n    return s1, s2\n",
        "num_ids": 96
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return_list = []\n    for word in words:\n        if word.startswith(\"p\"):\n            return_list.append(word)\n    return return_list\n",
        "num_ids": 44
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    #initializing the list\n    first_word = []\n    #using find and slicing method to find the words starting with letter p\n    first_word = words[words.find('p'):words.find('p')+2]\n    #returning the list of words starting with letter p\n    return first_word\n",
        "num_ids": 75
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    \n    for word in words:\n        if word[0] == 'p':\n            return word,words[words.index(word)+1]\n",
        "num_ids": 37
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if word.startswith('p'):\n            result.append(word)\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    dp = [0] * n\n    # base case\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i-1] + a[i], a[i])\n    print('dp:',dp)\n    # max_sum_increasing_subseq_part2\n    # max_sum_increasing_subseq_part2(prefix, k)\n    # max_sum_increasing_subseq_part2(suffix, k)\n    # max_sum_increasing_subseq_part2(prefix+suffix, k)\n    if k == n-1:\n        return dp[n-1]\n    return max(max_sum_increasing_subseq_part2(a, k+1), max_sum_increasing_subseq_part2(a, k))\n    \ndef max_sum_increasing_subseq_part2(a, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * n\n    # base case\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i-1] + a[i], a[i])\n    print('dp:',dp)\n    if k == 0:\n        return dp[k]\n    return max(dp[k], max_sum_increasing_subseq_part2(a, k-1))\n    \ndef max_sum_increasing_subseq_part2(a, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * n\n    # base case\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i-1] + a[i], a[i])\n    print('dp:',dp)\n    if k == 0:\n        return dp[k]\n    if k == 1:\n        return dp[k]\n    return max(dp[k], max_sum_increasing_subseq_part2(a, k-1), max_sum_increasing_subseq_part2(a, k-2))\n    \ndef max_sum_increasing_subseq_part2(a, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * n\n    # base case\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i-1] + a[i], a[i])\n    print('dp:',dp)\n    if k == 0:\n        return dp[k]\n    if k == 1:\n        return dp[k]\n    return max(dp[k], max_sum_increasing_subseq_part2(a, k-1), max_sum_increasing_subseq_part2(a, k-2), max_sum_increasing_subseq_part2(a, k-3))\n    \ndef max_sum_increasing_subseq_part2(a, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * n\n    # base case\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i-1] + a[i], a[i])\n    print('dp:',dp)\n    if k == 0:\n        return dp[k]\n    if k == 1:\n        return dp[k]\n    if k == 2:\n        return dp[k]\n    if k == 3:\n        return dp[k]\n    return max(dp[k], max_sum_increasing_subseq_part2(a, k-1), max_sum_increasing_subseq_part2(a, k-2), max_sum_increasing_subseq_part2(a, k-3), max_sum_increasing_subseq_part2(a, k-4))\n    \ndef max_sum_increasing_subseq_part2(a, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * n\n    # base case\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i-1] + a[i], a[i])\n    print('dp:',dp)\n    if k == 0:\n        return dp[k]\n    if k == 1:\n        return dp[k]\n    if k == 2:\n        return dp[k]\n    if k == 3:\n        return dp[k]\n    if k == 4:\n        return dp[k]\n    return max(dp[k], max_sum_increasing_subseq_part2(a, k-1), max_sum_increasing_subseq_part2(a, k-2), max_sum_increasing_subseq_part2(a, k-3), max_sum_increasing_subseq_part2(a, k-4), max_sum_increasing_subseq_part2(a, k-5))\n    \ndef max_sum_increasing_subseq_part2(a, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * n\n    # base case\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i-1] + a[i], a[i])\n    print('dp:',dp)\n    if k == 0:\n        return dp[k]\n    if k == 1:\n        return dp[k]\n    if k == 2:\n        return dp[k]\n    if k == 3:\n        return dp[k]\n    if k == 4:\n        return dp[k]\n    if k == 5:\n        return dp[k]\n    if k == 6:\n        return dp[k]\n    if k == 7:\n        return dp[k]\n    if k == 8:\n        return dp[k]\n    if k == 9:\n        return dp[k]\n    return max(dp[k], max_sum_increasing_subseq_part2(a, k-1), max_sum_increasing_subseq_part2(a, k-2), max_sum_increasing_subseq_part2(a, k-3), max_sum_increasing_subseq_part2(a, k-4), max_sum_increasing_subseq_part2(a, k-5), max_sum_increasing_subseq_part2(a, k-6), max_sum_increasing_subseq_part2(a, k-7), max_sum_increasing_subseq_part2(a, k-8), max_sum_increasing_subseq_part2(a, k-9))\n    \ndef max_sum_increasing_subseq_part2(a, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * n\n    # base case\n    dp[0] = a[0]\n    for i in range(1, n)",
        "num_ids": 37
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == index:\n        return a[:index+1]\n    if k < index:\n        return []\n    if index == 0:\n        return a\n    elif index == 1:\n        if a[0] >= k:\n            return a[:1] + [k]\n        return []\n    else:\n        result = []\n        for i in range(n):\n            if a[i] >= k:\n                result.append(a[i])\n                break\n            if a[i] < a[index-1] and a[i] >= k:\n                result.append(a[i])\n                break\n        return max_sum_increasing_subseq(a, n, index-1, k) + result\n",
        "num_ids": 175
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index >= n or k < 0 or k >= n:\n        return 0\n    \n    ans = max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k+1) + a[index], a[index])\n    return ans\n",
        "num_ids": 82
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum_subseq = 0\n    sum = 0\n    for i in range(index, n):\n        sum += a[i]\n        if sum > max_sum_subseq and i >= k:\n            max_sum_subseq = sum\n        if sum < 0:\n            sum = 0\n",
        "num_ids": 74
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 0:\n        return 0\n    if index == 0:\n        return 0\n    if a[index] > k:\n        return max_sum_increasing_subseq(a, n - 1, index, k)\n    else:\n        return max(max_sum_increasing_subseq(a, n - 1, index - 1, k), max_sum_increasing_subseq(a, n - 1, index - 1, k) + a[index])\n",
        "num_ids": 112
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == 0:\n        print(a[index])\n        return\n    if index == n:\n        return\n    a[index] += a[index - 1]\n    max_sum_increasing_subseq(a, n, index + 1, k)\n    a[index] -= a[index - 1]\n",
        "num_ids": 77
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # A utility function that returns true if there is a decreasing subsequence in prefix\n    def canDecreasing(prefix):\n        n = len(prefix)\n        for i in range(1, n):\n            if prefix[i] < prefix[i - 1]:\n                return True\n        return False\n",
        "num_ids": 70
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum_so_far = 0\n    max_sum_ending_here = 0\n    for i in range(index, n):\n        max_sum_ending_here = max_sum_ending_here + a[i]\n        if max_sum_ending_here < 0:\n            max_sum_ending_here = 0\n        if max_sum_ending_here > max_sum_so_far:\n            max_sum_so_far = max_sum_ending_here\n        if max_sum_ending_here > k:\n            max_sum_ending_here = 0\n    return max_sum_so_far\n    \n",
        "num_ids": 153
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 1:\n        return 0\n    \n    '''\n    Use a global variable to keep track of max sum. We are storing the max sum upto i-1th index.\n    The max sum upto i-1th index will be stored in a variable called maxSumAtLast\n    '''\n    maxSum = float('-inf')\n    maxSumAtLast = float('-inf')\n    for i in range(n):\n        if a[i] >= k:\n            maxSumAtLast = maxSum\n            maxSum = maxSumAtLast + a[i]\n        else:\n            maxSumAtLast = maxSum\n    return maxSum\n",
        "num_ids": 84
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index >= n:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tmp=[]\n    for i in range(0,m):\n        tmp.append([])\n        for j in range(0,n):\n            tmp[i].append(tuplex[i][j])\n    return tuple(tmp)\n",
        "num_ids": 59
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    a=[]\n    for i in range(0,m):\n        colon=[]\n        for j in range(0,n):\n            if j in tuplex[i]:\n                colon.append('0')\n            else:\n                colon.append('1')\n        a.append(colon)\n    return a\ndef row_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a row of a tuple.\n    '''\n    a=[]\n    for i in range(0,m):\n        row=[]\n        for j in range(0,n):\n            if i in tuplex[j]:\n                row.append('0')\n            else:\n                row.append('1')\n        a.append(row)\n    return a\ndef col_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a column of a tuple.\n    '''\n    a=[]\n    for i in range(0,n):\n        col=[]\n        for j in range(0,m):\n            if j in tuplex[i]:\n                col.append('0')\n            else:\n                col.append('1')\n        a.append(col)\n    return a\ndef is_tuplex(tuplex,m,n):\n    '''\n    Write a function to check if a tuple is a valid tuplex.\n    '''\n    return tuplex[0]==m and tuplex[1]==n and tuplex[2]==n and tuplex[3]==m\ndef tuple_product(tuplex,m,n):\n    '''\n    Write a function to get the product of a tuple.\n    '''\n    a=1\n    for i in range(0,4):\n        a*=tuplex[i]\n    return a\ndef get_all_tuplex(tuplex,m,n):\n    '''\n    Write a function to get all possible tuplex of a matrix.\n    '''\n    a=[]\n    a.append(tuplex)\n    m1=tuple(tuplex)\n    if m1 not in a:\n        a.append(m1)\n    for i in range(0,m):\n        m1=muplex_tuplex(tuplex,i,n)\n        if m1 not in a:\n            a.append(m1)\n        m1=mdownlex_tuplex(tuplex,m,i,n)\n        if m1 not in a:\n            a.append(m1)\n        m1=mdownuplex_tuplex(tuplex,m,i,n)\n        if m1 not in a:\n            a.append(m1)\n    return a\ndef is_tuplex_valid(tuplex,m,n):\n    '''\n    Write a function to check if a tuple is a valid tuplex.\n    '''\n    if m>3 or n>3:\n        return False\n    for i in range(0,m):\n        for j in range(0,n):\n            if tuplex[i][j]=='1':\n                return False\n    return True\ndef muplex_tuplex(tuplex,m1,n):\n    '''\n    Write a function to get the muplex of a tuple.\n    '''\n    a=[]\n    for i in range(0,m1):\n        for j in range(0,n):\n            if j in tuplex[i]:\n                a.append(tuplex[i][j])\n            else:\n                a.append('0')\n    return tuple(a)\ndef mdownlex_tuplex(tuplex,m,m1,n):\n    '''\n    Write a function to get the mdownlex of a tuple.\n    '''\n    a=[]\n    for i in range(0,m1):\n        for j in range(0,n):\n            if i in tuplex[j]:\n                a.append(tuplex[j][i])\n            else:\n                a.append('0')\n    return tuple(a)\ndef mddownuplex_tuplex(tuplex,m,m1,n):\n    '''\n    Write a function to get the mdownuplex of a tuple.\n    '''\n    a=[]\n    for i in range(0,m1):\n        for j in range(0,n):\n            if j in tuplex[i]:\n                a.append(tuplex[i][j])\n            else:\n                a.append('0')\n    return tuple(a)\ndef transpose(tuplex,m,n):\n    '''\n    Write a function to get the transpose of a tuple.\n    '''\n    a=[]\n    for i in range(0,n):\n        col=[]\n        for j in range(0,m):\n            col.append(tuplex[i][j])\n        a.append(col)\n    return tuple(a)\ndef col_tuplex_num(tuplex,m,n):\n    '''\n    Write a function to get the number of columns in a tuple.\n    '''\n    return n\ndef row_tuplex_num(tuplex,m,n):\n    '''\n    Write a function to get the number of rows in a tuple.\n    '''\n    return m\ndef col_tuplex_rem(tuplex,m,n):\n    '''\n    Write a function to get the number of columns in a tuple.\n    '''\n    a=[]\n    for i in range(0,m):\n        col=[]\n        for j in range(0,n):\n            if j in tuplex[i]:\n                col.append('1')\n            else:\n                col.append('0')\n        a.append(col)\n    return tuple(a)\ndef row_tuplex_rem(tuplex,m,n):\n    '''\n    Write a function to get the number of rows in a tuple.\n    '''\n    a=[]\n    for i in range(0,n):\n        col=[]\n        for j in range(0,m):\n            if j in tuplex[i]:\n                col.append('1')\n            else:\n                col.append('0')\n        a.append(col)\n    return tuple(a)\ndef col_tuplex_xor(tuplex,m,n):\n    '''\n    Write a function to get the number of columns in a tuple.\n    '''\n    a=[]\n    for i in range(0,m):\n        col=[]\n        for j in range(0,n):\n            if j in tuplex[i]:\n                col.append('0')\n            else:\n                col.append('1')\n        a.append(col)\n    return tuple(a)\ndef row_tuplex_xor(tuplex,m,n):\n    '''\n    Write a function to get the number of rows in a tuple.\n    '''\n    a=[]\n    for i in range(0,n):\n        col=[]\n        for j in range(0,m):\n            if j in tuplex[i]:\n                col.append('0')\n            else:\n                col.append('1')\n        a.append(col)\n    return tuple(a)\ndef col_tuplex_not(tuplex,m,n):\n    '''\n    Write a function to get the number of columns in a tuple.\n    '''\n    a=[]\n    for i in range(0,m):\n        col=[]\n        for j in range(0,n):\n            if j in tuplex[i]:\n                col.append('1')\n            else:\n                col.append('0')\n        a.append(col)\n    return tuple(a)\ndef row_tuplex_not(tuplex,m,n):\n    '''\n    Write a function to get the number of rows in a tuple.\n    '''\n    a=[]\n    for i in range(0,n):\n        col=[]\n        for j in range(0,m):\n            if j in tuplex[i]:\n                col.append('1')\n            else:\n                col",
        "num_ids": 59
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if i == m:\n            return tuplex[i:]+tuplex[:m]\n    return tuplex[m:]+tuplex[:m]\ndef test_colon_tuplex():\n    assert colon_tuplex([1,2,3,4,5],0,2) == (1,2,3)\n    assert colon_tuplex([1,2,3,4,5],2,2) == (3,4,5)\n    assert colon_tuplex([1,2,3,4,5],0,-2) == (1,2,3)\n    assert colon_tuplex([1,2,3,4,5],2,-2) == (4,5)\n    assert colon_tuplex([1,2,3,4,5,6,7],0,3) == (1,2,3)\n    assert colon_tuplex([1,2,3,4,5,6,7],3,3) == (6,7)\n    assert colon_tuplex([1,2,3,4,5,6,7],0,-3) == (1,2,3)\n    assert colon_tuplex([1,2,3,4,5,6,7],3,-3) == (5,6,7)\ndef test_all_colon_tuplex():\n    assert colon_tuplex([1,2,3,4,5],0,2) == (1,2,3)\n    assert colon_tuplex([1,2,3,4,5],2,2) == (3,4,5)\n    assert colon_tuplex([1,2,3,4,5],0,-2) == (1,2,3)\n    assert colon_tuplex([1,2,3,4,5],2,-2) == (3,4,5)\n    assert colon_tuplex([1,2,3,4,5,6,7],0,3) == (1,2,3)\n    assert colon_tuplex([1,2,3,4,5,6,7],3,3) == (6,7)\n    assert colon_tuplex([1,2,3,4,5,6,7],0,-3) == (1,2,3)\n    assert colon_tuplex([1,2,3,4,5,6,7],3,-3) == (5,6,7)\ndef test_all_colon_tuplex_1():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],4,6) == (4,5,6,7,8,9)\ndef test_all_colon_tuplex_2():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],0,10) == (1,2,3,4,5,6,7,8,9)\ndef test_all_colon_tuplex_3():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],10,0) == (10,9,8,7,6,5,4,3,2,1)\ndef test_all_colon_tuplex_4():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],0,-10) == (1,2,3,4,5,6,7,8,9)\ndef test_all_colon_tuplex_5():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],10,-2) == (1,2,3,4,5,6,7,8,9,10)\ndef test_all_colon_tuplex_6():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],-2,-10) == (1,2,3,4,5,6,7,8,9)\ndef test_all_colon_tuplex_7():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],-10,-2) == (1,2,3,4,5,6,7,8,9)\ndef test_all_colon_tuplex_8():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],10,2) == (10,9,8,7,6,5,4,3,2,1)\ndef test_all_colon_tuplex_9():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],0,2) == (1,2,3,4,5,6,7,8,9)\ndef test_all_colon_tuplex_10():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],2,0) == (1,2,3,4,5,6,7,8,9)\ndef test_all_colon_tuplex_11():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],0,-2) == (1,2,3,4,5,6,7,8,9)\ndef test_all_colon_tuplex_12():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],2,-2) == (10,9,8,7,6,5,4,3,2,1)\ndef test_all_colon_tuplex_13():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],-2,-10) == (1,2,3,4,5,6,7,8,9,10)\ndef test_all_colon_tuplex_14():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],10,-2) == (10,9,8,7,6,5,4,3,2,1)\ndef test_all_colon_tuplex_15():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],-10,2) == (1,2,3,4,5,6,7,8,9,10)\ndef test_all_colon_tuplex_16():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],2,10) == (2,3,4,5,6,7,8,9,10)\ndef test_all_colon_tuplex_17():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],10,-1) == (1,2,3,4,5,6,7,8,9)\ndef test_all_colon_tuplex_18():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],-1,10) == (1,2,3,4,5,6,7,8,9,10)\ndef test_all_colon_tuplex_19():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],10,1) == (10,1,2,3,4,5,6,7,8,9)\ndef test_all_colon_tuplex_20():\n    assert colon_tuplex([1,2,3,4,5,6,7,8,9,10],-1,-10) == (1,2,3,4,5,6,7,8,9,10)\ndef test_all_colon_tuplex_21():\n    assert colon_tuplex([",
        "num_ids": 2006
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #x = (2,3)\n    y = [4,5]\n    z = (6,7)\n    t = y + z\n    t2 = t\n    for i in range(len(t2)):\n        if t2[i] == m:\n            print(i, end = \" \")\n    for i in range(len(t2)):\n        if t2[i] == n:\n            print(i, end = \" \")\n    print()\n    for i in range(len(t2)):\n        if t2[i] == m:\n            print(i, end = \" \")\n    for i in range(len(t2)):\n        if t2[i] == n:\n            print(i, end = \" \")\n    print()\n    for i in range(len(t2)):\n        if t2[i] == m:\n            print(i, end = \" \")\n    for i in range(len(t2)):\n        if t2[i] == n:\n            print(i, end = \" \")\n    print()\n    for i in range(len(t2)):\n        if t2[i] == m:\n            print(i, end = \" \")\n    for i in range(len(t2)):\n        if t2[i] == n:\n            print(i, end = \" \")\n    print()\n    for i in range(len(t2)):\n        if t2[i] == m:\n            print(i, end = \" \")\n    for i in range(len(t2)):\n        if t2[i] == n:\n            print(i, end = \" \")\n    print()\n    for i in range(len(t2)):\n        if t2[i] == m:\n            print(i, end = \" \")\n    for i in range(len(t2)):\n        if t2[i] == n:\n            print(i, end = \" \")\n    print()\n    for i in range(len(t2)):\n        if t2[i] == m:\n            print(i, end = \" \")\n    for i in range(len(t2)):\n        if t2[i] == n:\n            print(i, end = \" \")\n    print()\n    for i in range(len(t2)):\n        if t2[i] == m:\n            print(i, end = \" \")\n    for i in range(len(t2)):\n        if t2[i] == n:\n            print(i, end = \" \")\n    print()\n    for i in range(len(t2)):\n        if t2[i] == m:\n            print(i, end = \" \")\n    for i in range(len(t2)):\n        if t2[i] == n:\n            print(i, end = \" \")\n    print()\n    for i in range(len(t2)):\n        if t2[i] == m:\n            print(i, end = \" \")\n    for i in range(len(t2)):\n        if t2[i] == n:\n            print(i, end = \" \")\n    print()\n    for i in range(len(t2)):\n        if t2[i] == m:\n            print(i, end = \" \")\n    for i in range(len(t2)):\n        if t2[i] == n:\n            print(i, end = \" \")\n    print()\n    for i in range(len(t2)):\n        if t2[i] == m:\n            print(i, end = \" \")\n    for i in range(len(t2)):\n        if t2[i] == n:\n            print(i, end = \" \")\n    print()\n    for i in range(len(t2)):\n        if t2[i] == m:\n            print(i, end = \" \")\n    for i in range(len(t2)):\n        if t2[i] == n:\n            print(i, end = \" \")\n    print()\n    for i in range(len(t2)):\n        if t2[i] == m:\n            print(i, end = \" \")\n    for i in range(len(t2)):\n        if t2[i] == n:\n            print(i, end = \" \")\n    print()\n    for i in range(len(t2)):\n        if t2[i] == m:\n            print(i, end = \" \")\n    for i in range(len(t2)):\n        if t2[i] == n:\n            print(i, end = \" \")\n    print()\n    for i in range(len(t2)):\n        if t2[i] == m:\n            print(i, end = \" \")\n    for i in range(len(t2)):\n        if t2[i] == n:\n            print(i, end = \" \")\n    print()\n    for i in range(len(t2)):\n        if t2[i] == m:\n            print(i, end = \" \")\n    for i in range(len(t2)):\n        if t2[i] == n:\n            print(i, end = \" \")\n    print()\n    for i in range(len(t2)):\n        if t2[i] == m:\n            print(i, end = \" \")\n    for i in range(len(t2)):\n        if t2[i] == n:\n            print(i, end = \" \")\n    print()\n    for i in range(len(t2)):\n        if t2[i] == m:\n            print(i, end = \" \")\n    for i in range(len(t2)):\n        if t2[i] == n:\n            print(i, end = \" \")\n    print()\n    for i in range(len(t2)):\n        if t2[i] == m:\n            print(i, end = \" \")\n    for i in range(len(t2)):\n        if t2[i] == n:\n            print(i, end = \" \")\n    print()\n    for i in range(len(t2)):\n        if t2[i] == m:\n            print(i, end = \" \")\n    for i in range(len(t2)):\n        if t2[i] == n:\n            print(i, end = \" \")\n    print()\n    for i in range(len(t2)):\n        if t2[i] == m:\n            print(i, end = \" \")\n    for i in range(len(t2)):\n        if t2[i] == n:\n            print(i, end = \" \")\n    print()\n    for i in range(len(t2)):\n        if t2[i] == m:\n            print(i, end = \" \")\n    for i in range(len(t2)):\n        if t2[i] == n:\n            print(i, end = \" \")\n    print()\n    for i in range(len(t2)):\n        if t2[i] == m:\n            print(i, end = \" \")\n    for i in range(len(t2)):\n        if t2[i] == n:\n            print(i, end = \" \")\n    print()\n    for i in range(len(t2)):\n        if t2[i] == m:\n            print(i, end = \" \")\n    for i in range(len(t2)):\n        if t2[i] == n:\n            print(i, end = \" \")\n    print()\n    for i in range(len(t2)):\n        if t2[i] == m:\n            print(i, end = \" \")\n    for i in range(len(t2)):\n        if t2[i] == n:\n            print(i, end = \" \")\n    print()\n    for i in range(len(t2)):\n        if t2[i] == m:\n            print(i, end = \" \")\n    for i in rang",
        "num_ids": 2007
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[:m] + (tuplex[m+1:n] + tuplex[n+1:])\n",
        "num_ids": 34
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex=tuplex[0:m] + (tuplex[m:m+n],) + tuplex[m+n:]\n    return tuplex\ndef colon_list(lst,m,n):\n    '''\n    Write a function to get a colon of a list.\n    '''\n    lst=lst[0:m] + (lst[m:m+n],) + lst[m+n:]\n    return lst\ndef get_colon_one(m,n):\n    '''\n    Write a function that returns a colon of a tuple.\n    '''\n    def colon_tuplex_one(tuplex):\n        return colon_tuplex(tuplex,m,n)\n    return colon_tuplex_one\ndef get_colon_two(m,n):\n    '''\n    Write a function that returns a colon of a list.\n    '''\n    def colon_list_one(lst):\n        return colon_list(lst,m,n)\n    return colon_list_one\ndef get_colon_three(m,n):\n    '''\n    Write a function that returns a colon of a dictionary.\n    '''\n    def colon_dict_one(dct):\n        return colon_dict(dct,m,n)\n    return colon_dict_one\ndef colon_dict(dct,m,n):\n    '''\n    Write a function that returns a colon of a dictionary.\n    '''\n    colon_dct = dict()\n    for key, value in dct.items():\n        colon_dct[key] = colon_tuplex(value,m,n)\n    return colon_dct\ndef get_colon_four(m,n):\n    '''\n    Write a function that returns a colon of a list of tuples.\n    '''\n    def colon_lst_one(lst):\n        return colon_list(lst,m,n)\n    return colon_lst_one\ndef get_colon_five(m,n):\n    '''\n    Write a function that returns a colon of a list of lists.\n    '''\n    def colon_lst_two(lst):\n        return colon_list(lst,m,n)\n    return colon_lst_two\ndef get_colon_six(m,n):\n    '''\n    Write a function that returns a colon of a list of dictionaries.\n    '''\n    def colon_lst_three(lst):\n        return colon_dict(lst,m,n)\n    return colon_lst_three\ndef get_colon_seven(m,n):\n    '''\n    Write a function that returns a colon of a list of tuples of tuples.\n    '''\n    def colon_lst_four(lst):\n        return colon_tuplex(lst,m,n)\n    return colon_lst_four\ndef get_colon_eight(m,n):\n    '''\n    Write a function that returns a colon of a list of lists of lists.\n    '''\n    def colon_lst_five(lst):\n        return colon_list(lst,m,n)\n    return colon_lst_five\ndef get_colon_nine(m,n):\n    '''\n    Write a function that returns a colon of a list of dictionaries of lists.\n    '''\n    def colon_lst_six(lst):\n        return colon_dict(lst,m,n)\n    return colon_lst_six\ndef get_colon_ten(m,n):\n    '''\n    Write a function that returns a colon of a list of tuples of tuples of tuples.\n    '''\n    def colon_lst_seven(lst):\n        return colon_tuplex(lst,m,n)\n    return colon_lst_seven\ndef get_colon_eleven(m,n):\n    '''\n    Write a function that returns a colon of a list of lists of lists of lists.\n    '''\n    def colon_lst_eight(lst):\n        return colon_list(lst,m,n)\n    return colon_lst_eight\ndef get_colon_twelve(m,n):\n    '''\n    Write a function that returns a colon of a list of dictionaries of lists of lists.\n    '''\n    def colon_lst_nine(lst):\n        return colon_dict(lst,m,n)\n    return colon_lst_nine\ndef get_colon_thirteen(m,n):\n    '''\n    Write a function that returns a colon of a list of tuples of tuples of tuples of tuples.\n    '''\n    def colon_lst_ten(lst):\n        return colon_tuplex(lst,m,n)\n    return colon_lst_ten\ndef get_colon_fourteen(m,n):\n    '''\n    Write a function that returns a colon of a list of lists of lists of lists of lists.\n    '''\n    def colon_lst_eleven(lst):\n        return colon_list(lst,m,n)\n    return colon_lst_eleven\ndef get_colon_fifteen(m,n):\n    '''\n    Write a function that returns a colon of a list of dictionaries of lists of lists of lists.\n    '''\n    def colon_lst_twelve(lst):\n        return colon_dict(lst,m,n)\n    return colon_lst_twelve\ndef get_colon_sixteen(m,n):\n    '''\n    Write a function that returns a colon of a list of tuples of tuples of tuples of tuples of tuples.\n    '''\n    def colon_lst_thirteen(lst):\n        return colon_tuplex(lst,m,n)\n    return colon_lst_thirteen\ndef get_colon_seventeen(m,n):\n    '''\n    Write a function that returns a colon of a list of lists of lists of lists of lists.\n    '''\n    def colon_lst_fourteen(lst):\n        return colon_list(lst,m,n)\n    return colon_lst_fourteen\ndef get_colon_eighteen(m,n):\n    '''\n    Write a function that returns a colon of a list of dictionaries of lists of lists of lists.\n    '''\n    def colon_lst_fifteen(lst):\n        return colon_dict(lst,m,n)\n    return colon_lst_fifteen\ndef get_colon_nineteen(m,n):\n    '''\n    Write a function that returns a colon of a list of tuples of tuples of tuples of tuples of tuples.\n    '''\n    def colon_lst_sixteen(lst):\n        return colon_tuplex(lst,m,n)\n    return colon_lst_sixteen\ndef get_colon_twenty(m,n):\n    '''\n    Write a function that returns a colon of a list of lists of lists of lists of lists.\n    '''\n    def colon_lst_seventeen(lst):\n        return colon_list(lst,m,n)\n    return colon_lst_seventeen\ndef get_colon_twenty_one(m,n):\n    '''\n    Write a function that returns a colon of a list of dictionaries of lists of lists of lists of lists.\n    '''\n    def colon_lst_eighteen(lst):\n        return colon_dict(lst,m,n)\n    return colon_lst_eighteen\ndef get_colon_twenty_two(m,n):\n    '''\n    Write a function that returns a colon of a list of tuples of tuples of tuples of tuples of tuples.\n    '''\n    def colon_lst_nineteen(lst):\n        return colon_tuplex(lst,m,n)\n    return colon_lst_nineteen\ndef get_colon_twenty_three(m,n):\n    '''\n    Write a function that returns a colon of a list of lists of lists of lists of lists.\n    '''\n    def colon_lst_twenty(lst):\n    ",
        "num_ids": 17
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    res = \"\"\n    for i in range(m-1):\n        res = res+\"-\"\n    if tuplex==(\"\"):\n        return \"\"\n    if tuplex[m-1]==\"-\" and len(tuplex)==m+1:\n        return \":\".join(tuplex)\n    elif tuplex[m-1]==\":\" and len(tuplex)==m+2:\n        return \":\"+\":\".join(tuplex[m:])\n    elif tuplex[m-1]==\":\" and len(tuplex)==m+3:\n        return \":\"+\":\".join(tuplex[m:m+2])\n    else:\n        return \":\"+\":\".join(tuplex[:m])+\":\".join(tuplex[m+1:])\ndef get_kmer_colon_dict(kmer_colon_dict,seq_list,i):\n    '''\n    Write a function to get the kmer-colon dict given the sequence-list and kmer-colon dict.\n    '''\n    for seq in seq_list:\n        kmer_colon_dict[colon_tuplex(seq[i:i+kmer_len],kmer_len,kmer_len)] = seq\n    return kmer_colon_dict\n",
        "num_ids": 61
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex=deepcopy(tuplex)\n    if m>n:\n        for i in range(m):\n            tuplex=tuplex[n:n]\n        for i in range(n):\n            tuplex=tuplex[m:m]\n    else:\n        for i in range(m):\n            tuplex=tuplex[m:m]\n        for i in range(m):\n            tuplex=tuplex[:n]\n    return tuplex\ndef main():\n    m = 2\n    n = 5\n    a=colon_tuplex((4,5,6,7,8),m,n)\n    print(a)\nif __name__ == '__main__':\n    main(",
        "num_ids": 182
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    l=list()\n    for i in range(m):\n        l.append([])\n        for j in range(n):\n            l[i].append(0)\n    k=0\n    while k<m:\n        l[k][n-1]=tuplex[k]\n        l[k][n-2]=tuplex[k+1]\n        k+=2\n    return l\n",
        "num_ids": 98
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m] + (tuplex[n],)\n",
        "num_ids": 20
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # convert the lists to tuples to sort them\n    nums1 = tuple(sorted(nums1))\n    nums2 = tuple(sorted(nums2))\n    # create a dictionary with the product value and the factor \n    product_dict = {}\n    # loop through each element in the list\n    for i in range(len(nums1)):\n        # update the product dictionary\n        product_dict[nums1[i]] = nums2[i]\n        # update the product dictionary\n        product_dict[nums2[i]] = nums1[i]\n    # sort the dictionary using the product key\n    product_dict = {k: v for k, v in sorted(product_dict.items(), key=lambda item: item[0], reverse=True)}\n    # return the N largest products\n    return_dict = {k: v for k, v in product_dict.items()[:N]}\n    # convert the dictionary to a list\n    return_list = list(return_dict.keys())\n    # return the list\n    return return_list\n",
        "num_ids": 255
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n    max_prod = -1\n    for i in range(N):\n        max_prod = max(max_prod, nums1[i] * nums2[i])\n    return max_prod\n",
        "num_ids": 70
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # \n    # nums1 = sorted([1,2,3,4])\n    # nums2 = sorted([3,2,4,1])\n    # N = 2\n    \n    # max_product = max(nums1[-N:] * nums2[-N:])\n",
        "num_ids": 73
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # nums1 = [2, 3, 5, 8, 10, 12]\n    # nums2 = [4, 6, 7, 9, 11, 13]\n    # N = 5\n    # O(n*m)\n    result = []\n    min_n1 = min(nums1)\n    max_n2 = max(nums2)\n    for i in range(min_n1, max_n2+1):\n        prod = i*max(nums1)\n        if prod > N:\n            break\n        result.append(prod)\n    return result\n",
        "num_ids": 143
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    max_prod = -1\n    for i in range(0, N):\n        cur_prod = nums1[i] * nums2[i]\n        if cur_prod > max_prod:\n            max_prod = cur_prod\n    return max_prod\n",
        "num_ids": 97
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    print(nums1, nums2)\n    if N > len(nums1) or N > len(nums2):\n        return None\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    max_product = None\n    for i in range(N):\n        for j in range(N):\n            if j == i:\n                continue\n            if nums1[i] * nums2[j] > max_product:\n                max_product = nums1[i] * nums2[j]\n    return max_product\n",
        "num_ids": 143
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # For each factor in nums1, find the largest product in nums2.\n    # return the largest product.\n    # Time: O(m + n)\n    # Space: O(n)\n    \n    nums1.sort()\n    nums2.sort(reverse=True)\n",
        "num_ids": 72
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n    dp = [[0 for i in range(N+1)] for j in range(N+1)]\n    for i in range(0, N+1):\n        dp[i][i] = 1\n    for i in range(0, N):\n        dp[0][i+1] = nums1[i]*nums2[i]\n    for i in range(1, N+1):\n        for j in range(0, N+1-i):\n            if i==0:\n                dp[i][j] = nums2[j]\n            else:\n                dp[i][j] = max(dp[i][j], dp[i-1][j]+nums1[j]*nums2[i+j])\n    return dp[N][N]\n",
        "num_ids": 205
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def large_product_helper(nums1, nums2, N, i, j, max_val):\n        if N == 1:\n            return max_val\n",
        "num_ids": 43
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # product = []\n    # nums1.sort()\n    # nums2.sort()\n    # for i in range(N):\n    #     product.append(nums1[i] * nums2[i])\n    \n    # return max(product)\n",
        "num_ids": 67
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    max1 = a\n    if b > max1:\n        max1 = b\n    return max1\n",
        "num_ids": 27
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return (a if a>b else b)\n",
        "num_ids": 14
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if (a>b):\n        return a\n    else:\n        return b\n        \n    \nprint(maximum(10,20))\n",
        "num_ids": 35
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        print(a,\"is maximum\")\n    else:\n        print(b,\"is maximum\")\nmaximum(2,3)\nmaximum(4,5)\nmaximum(6,7)\nmaximum(8,9)\nmaximum(10,11)\nmaximum(100,200)\n",
        "num_ids": 74
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        return a\n    else:\n        return b\n",
        "num_ids": 22
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(f\"{a} is greater than {b}\")\n    elif a<b:\n        print(f\"{b} is greater than {a}\")\n    else:\n        print(f\"{a} is equal to {b}\")\nmaximum(10,20)\n",
        "num_ids": 76
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        print(a,\"is maximum\")\n    else:\n        print(b,\"is maximum\")\nmaximum(10,9)\n",
        "num_ids": 39
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.replace(' ','')\n    l = list(str1)\n    l1 = []\n    for i in l:\n        l1.append(i)\n    t = tuple(l1)\n    return t\n",
        "num_ids": 59
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    string1 = str1.split(',')\n    # print(string1)\n    lst = []\n    for i in range(len(string1)):\n        lst.append(string1[i])\n    # print(lst)\n    return tuple(lst)\n",
        "num_ids": 69
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple1 = tuple(str1)\n    return tuple1\n    \n    \ndef tuple_to_string(tup1):\n    '''\n    Write a function to convert a given tuple to a string.\n    '''\n    str1 = \"\".join(tup1)\n    return str1\n    \n",
        "num_ids": 22
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    s = str1.strip()\n    return tuple(s)\n",
        "num_ids": 18
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n    \nprint(string_to_tuple('adit'))\n",
        "num_ids": 26
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    #your code here\n    return tuple(str1)\n",
        "num_ids": 16
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    s = str1.replace(\" \", \"\")\n    s = s.lower()\n    return tuple(s)\n",
        "num_ids": 29
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    #if the input is not 0\n    if n!=0:\n        #while the input is not 0\n        while n!=0:\n            #set the left most unset bit\n            n&=(n-1)\n    return n\n",
        "num_ids": 59
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n > 1:\n        if n % 2!= 0:\n            return set_left_most_unset_bit(n-1)\n        else:\n            return set_left_most_unset_bit(n/2)\n",
        "num_ids": 81
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0: \n        return 1\n    else: \n        return n | (n - 1) \n",
        "num_ids": 30
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | (1 << n.bit_length()) - 1\n",
        "num_ids": 18
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    binary_num = bin(n) \n    l = binary_num.replace('0b', '') \n    res = int(l[0]) \n    return res\n",
        "num_ids": 44
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n & (2**n.bit_length()-1)\n    return n\n",
        "num_ids": 24
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | (1 << n.bit_length() - 1)\n",
        "num_ids": 19
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return ((n | (1 << (n.bit_length() - 1))) - 1)\n",
        "num_ids": 24
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n|(1<<n.bit_length()-1)\n",
        "num_ids": 19
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n!=0:\n        if n%2==0:\n            n=n-1\n        else:\n            n=n-2\n    return n\n",
        "num_ids": 41
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi * r**2 * h)\n",
        "num_ids": 16
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # volume = 0.5*math.pi*r**2*h\n    volume = math.pi*r**2*h\n    print(f'Volume of a cone with radius {r} and height {h} is {volume}.')\n    return volume\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*math.pi*r**3\n    print(f'Volume of a sphere with radius {r} is {volume}.')\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = math.pi*r**2*h\n    print(f'Volume of a cylinder with radius {r} and height {h} is {volume}.')\n    return volume\ndef volume_cone_3D(r,h):\n    '''\n    Write a function to find the volume of a cone in 3D.\n    '''\n    # volume = 0.5*math.pi*r**2*h\n    volume = math.pi*r**2*h\n    print(f'Volume of a cone with radius {r} and height {h} is {volume}.')\n    return volume\ndef volume_sphere_3D(r):\n    '''\n    Write a function to find the volume of a sphere in 3D.\n    '''\n    volume = 4/3*math.pi*r**3\n    print(f'Volume of a sphere with radius {r} is {volume}.')\n    return volume\ndef volume_cylinder_3D(r,h):\n    '''\n    Write a function to find the volume of a cylinder in 3D.\n    '''\n    volume = math.pi*r**2*h\n    print(f'Volume of a cylinder with radius {r} and height {h} is {volume}.')\n    return volume\ndef volume_pyramid(a,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume = (1/3)*a*h\n    print(f'Volume of a pyramid with base length {a} and height {h} is {volume}.')\n    return volume\ndef volume_prism(a,h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    volume = 2*(a+h)\n    print(f'Volume of a prism with base length {a} and height {h} is {volume}.')\n    return volume\ndef volume_cuboid(a,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    volume = a*b*h\n    print(f'Volume of a cuboid with length {a} and width {b} and height {h} is {volume}.')\n    return volume\ndef volume_cylinder_3D_sphere(r,h):\n    '''\n    Write a function to find the volume of a cylinder in 3D with a spherical object.\n    '''\n    volume = math.pi*r**2*h\n    print(f'Volume of a cylinder with radius {r} and height {h} is {volume}.')\n    return volume\ndef volume_cylinder_3D_cone(r,h):\n    '''\n    Write a function to find the volume of a cylinder in 3D with a cone object.\n    '''\n    volume = math.pi*r**2*h\n    print(f'Volume of a cylinder with radius {r} and height {h} is {volume}.')\n    return volume\ndef volume_cylinder_3D_cylinder(r1,r2,h):\n    '''\n    Write a function to find the volume of a cylinder in 3D with two cylinders.\n    '''\n    volume = math.pi*((r1**2)-(r2**2))*h\n    print(f'Volume of a cylinder with radius {r1} and height {h} is {volume}.')\n    return volume\ndef volume_cylinder_3D_prism(r1,r2,h):\n    '''\n    Write a function to find the volume of a cylinder in 3D with a prism.\n    '''\n    volume = math.pi*((r1**2)-(r2**2))*h\n    print(f'Volume of a cylinder with radius {r1} and height {h} is {volume}.')\n    return volume\ndef volume_cylinder_3D_prism_prism(r1,r2,r3,h):\n    '''\n    Write a function to find the volume of a cylinder in 3D with a prism and prism.\n    '''\n    volume = math.pi*(((r1**2)-(r2**2))+((r1**2)-(r3**2))+((r2**2)-(r3**2)))/2\n    print(f'Volume of a cylinder with radius {r1} and height {h} is {volume}.')\n    return volume\ndef volume_cylinder_3D_prism_cone(r1,r2,r3,h):\n    '''\n    Write a function to find the volume of a cylinder in 3D with a prism and cone.\n    '''\n    volume = math.pi*(((r1**2)-(r2**2))+((r1**2)-(r3**2))+((r2**2)-(r3**2)))/2\n    print(f'Volume of a cylinder with radius {r1} and height {h} is {volume}.')\n    return volume\ndef volume_cylinder_3D_cone_cone(r1,r2,r3,h):\n    '''\n    Write a function to find the volume of a cylinder in 3D with a cone and cone.\n    '''\n    volume = math.pi*(((r1**2)-(r2**2))+((r1**2)-(r3**2))+((r2**2)-(r3**2)))/2\n    print(f'Volume of a cylinder with radius {r1} and height {h} is {volume}.')\n    return volume\ndef volume_cylinder_3D_cone_cone_cone(r1,r2,r3,r4,h):\n    '''\n    Write a function to find the volume of a cylinder in 3D with a cone and two cones.\n    '''\n    volume = math.pi*(((r1**2)-(r2**2))+((r1**2)-(r3**2))+((r1**2)-(r4**2))+((r2**2)-(r3**2))+((r2**2)-(r4**2))+((r3**2)-(r4**2)))/6\n    print(f'Volume of a cylinder with radius {r1} and height {h} is {volume}.')\n    return volume\ndef volume_cylinder_3D_cone_cone_cone_cone(r1,r2,r3,r4,r5,h):\n    '''\n    Write a function to find the volume of a cylinder in 3D with a cone and three cones.\n    '''\n    volume = math.pi*(((r1**2)-(r2**2))+((r1**2)-(r3**2))+((r1**2)-(r4**2))+((r1**2)-(r5**2))+((r2**2)-(r3**2))+((r2**2)-(r4**2))+((r2**2)-(r5**2))+((r3**2)-(r4**2))+((r3**2)-(r5**2))+((r4**2)-(r5**2)))/8\n    print(f'Volume of a cylinder with radius {r1} and height {h} is {volume}.')\n    return volume\ndef volume_cylinder_3D_cone_cone_cone_cone_cone(r1,r2,r3,r4,r5,r6,h):\n    '''\n    Write a function to find the volume of a cylinder in 3D with a cone and four cones.\n    '''\n    volume = math.pi*(((r1**2)-(r2**2))+((r1**2)-(r3**2))+((r1**2)-(r4**2))+((r1**2)-(r",
        "num_ids": 57
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r ** 2 * h\n",
        "num_ids": 14
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r**2*(h/3)\n",
        "num_ids": 18
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h\n",
        "num_ids": 14
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*(r**2)*(h/3)\n",
        "num_ids": 19
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi*math.pow(r,2)*h\n    return v\n",
        "num_ids": 24
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = (math.pi*r**2*h)/3\n    return v\n",
        "num_ids": 22
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi/3)*math.pow(r,2)*h\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*math.pow(r,2)*h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*math.pow(r,3)\ndef volume_pyramid(l,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return ((l*h)+(l*2*(h-l)))\ndef volume_rectangle(l,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return math.sqrt(math.pow(l,2)*math.pow(h,2))\ndef volume_pyramid_volume(l,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return (l*h)+(l*2*(h-l))\ndef volume_quad(l,h):\n    '''\n    Write a function to find the volume of a quadrilateral.\n    '''\n    return (l*h)+(l*2*(h-l))\ndef volume_tetrahedron(l,h):\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    return (l*h)+(l*2*(h-l))\ndef volume_icosahedron(l,h):\n    '''\n    Write a function to find the volume of a icosahedron.\n    '''\n    return ((l*h)+(l*2*(h-l)))\ndef volume_dodecahedron(l,h):\n    '''\n    Write a function to find the volume of a dodecahedron.\n    '''\n    return ((l*h)+(l*2*(h-l)))\ndef volume_octahedron(l,h):\n    '''\n    Write a function to find the volume of an octahedron.\n    '''\n    return ((l*h)+(l*2*(h-l)))\ndef volume_icosahedron_volume(l,h):\n    '''\n    Write a function to find the volume of an icosahedron.\n    '''\n    return (l*h)+(l*2*(h-l))\ndef volume_dodecahedron_volume(l,h):\n    '''\n    Write a function to find the volume of a dodecahedron.\n    '''\n    return ((l*h)+(l*2*(h-l)))\ndef volume_octahedron_volume(l,h):\n    '''\n    Write a function to find the volume of an octahedron.\n    '''\n    return ((l*h)+(l*2*(h-l)))\ndef volume_fivedihedron_volume(l,h):\n    '''\n    Write a function to find the volume of a fivedihedron.\n    '''\n    return ((l*h)+(l*2*(h-l)))\ndef volume_hexedron_volume(l,h):\n    '''\n    Write a function to find the volume of a hexedron.\n    '''\n    return ((l*h)+(l*2*(h-l)))\ndef volume_pyramid_volume(l,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return (l*h)+(l*2*(h-l))\ndef volume_prism(l,h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    return (l*h)+(l*2*(h-l))\ndef volume_prism_volume(l,h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    return (l*h)+(l*2*(h-l))\ndef volume_pyramid_icosahedron(l,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return ((l*h)+(l*2*(h-l)))\ndef volume_pyramid_dodecahedron(l,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return ((l*h)+(l*2*(h-l)))\ndef volume_pyramid_octahedron(l,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return ((l*h)+(l*2*(h-l)))\ndef volume_pyramid_fivedihedron(l,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return ((l*h)+(l*2*(h-l)))\ndef volume_pyramid_hexedron(l,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return ((l*h)+(l*2*(h-l)))\ndef volume_pyramid_tetrahedron(l,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return ((l*h)+(l*2*(h-l)))\ndef volume_pyramid_dodecahedron_icosahedron(l,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return ((l*h)+(l*2*(h-l)))\ndef volume_pyramid_dodecahedron_dodecahedron(l,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return ((l*h)+(l*2*(h-l)))\ndef volume_pyramid_dodecahedron_octahedron(l,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return ((l*h)+(l*2*(h-l)))\ndef volume_pyramid_dodecahedron_fivedihedron(l,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return ((l*h)+(l*2*(h-l)))\ndef volume_pyramid_dodecahedron_hexedron(l,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return ((l*h)+(l*2*(h-l)))\ndef volume_pyramid_dodecahedron_tetrahedron(l,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return ((l*h)+(l*2*(h-l)))\ndef volume_pyramid_dodecahedron_icosahedron_icosahedron(l,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return ((l*h)+(l*2*(h-l)))\ndef volume_pyramid_dodecahedron_dodecahedron_icosahedron(l,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return ((l*h)+(l*2*(h-l)))\ndef volume_pyramid_dodecahedron_dodecahedron_octahedron(l,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return ((l*h)+(l*2*(h-l)))\ndef volume_pyramid_dodecahedron_dodecahedron_fivedihedron(l,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return ((l*h)+(l*2*(h-l)))\ndef volume_pyramid_dodecahedron_dodecahedron_hexedron(l,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return ((l",
        "num_ids": 6
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*r**2*h\n    return volume\n",
        "num_ids": 19
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Base case\n    if n <= 0:\n        return -1\n",
        "num_ids": 19
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 1:\n        return 0\n    \n    def max_power_of_2(n):\n        '''\n        Write a python function to find the highest power of 2 that is less than or equal to n.\n        '''\n        if n <= 1:\n            return n\n        else:\n            return max_power_of_2(n - 2) * 2\n    \n    return max_power_of_2(n - 1)\n        \n        \n        \n        \ndef sum_of_digits(n):\n    '''\n    Write a python function to find the sum of digits of n.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_of_digits(n // 10)\n",
        "num_ids": 35
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max_power_2 = 0\n    while(n!= 0):\n        if (n & 1) == 1:\n            max_power_2 += 1\n        n = n >> 1\n    return max_power_2 \n",
        "num_ids": 56
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # i = 2\n    # power = 0\n    # while i <= n:\n    #     if i <= 2**power:\n    #         power += 1\n    #     else:\n    #         break\n    # return power\n",
        "num_ids": 56
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    x=2\n    while (x<=n):\n        x=x*2\n    return x\n    \nprint(highest_Power_of_2(8)) # Should return 16\nprint(highest_Power_of_2(9)) # Should return 18\nprint(highest_Power_of_2(15)) # Should return 32\n",
        "num_ids": 80
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    i = 0\n    while i < 32:\n        i += 1\n        # print (i)\n        if i == 32:\n            break\n        if n & (1 << i)!= 0:\n            # print (i)\n            return i\n        \n    return 32\n",
        "num_ids": 90
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    import math\n    max_power = 0\n    # base = 1\n    # while base <= n:\n    #     power = math.log2(base)\n    #     if power >= max_power:\n    #         max_power = power\n    #     base *= 2\n    # print(max_power)\n    # while max_power < n:\n    #     max_power = max(max_power, 2**max_power)\n    #     print(max_power)\n    \n    \n    # binary_rep = format(n, 'b')\n    # power = 0\n    # for bit in binary_rep[::-1]:\n    #     if int(bit):\n    #         power += 1\n    # return power\n",
        "num_ids": 176
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    p = 0\n    while 2**p <= n:\n        p = p+1\n    print(\"Highest power of 2 less than or equal to\", n, \"is\", 2**p)\n",
        "num_ids": 47
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    #ans = 1\n    #while ans<=n:\n        #ans = 2**ans\n    ans = 1\n    while ans<=n:\n        ans = ans << 1\n        if ans>=n:\n            return ans\n        #print(ans)\n",
        "num_ids": 64
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power = -1\n    while(highest_power <= n):\n        highest_power = 2 ** (highest_power + 1)\n        if highest_power <= n:\n            highest_power = highest_power + 1\n        else:\n            break\n    return highest_power\n",
        "num_ids": 68
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    else: \n        return (find_lucas(n-1) + find_lucas(n-2))\n",
        "num_ids": 57
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n",
        "num_ids": 53
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 0:\n        raise Exception(\"n must be greater than 0\")\n    if n == 1:\n        return 2\n    if n == 2:\n        return 1\n    return find_lucas(n - 1) + find_lucas(n - 2)\n",
        "num_ids": 67
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n",
        "num_ids": 35
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if (n == 0):\n        return 2\n    if (n == 1):\n        return 1\n    return find_lucas(n - 1) + find_lucas(n - 2)\n",
        "num_ids": 50
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    def lucas(n):\n        if n == 0:\n            return 2\n        if n == 1:\n            return 1\n        return lucas(n-1) + lucas(n-2)\n    return lucas(n)\n",
        "num_ids": 58
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n    \n    \ndef find_lucas_efficient(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    cache = {1:1, 2:2}\n    for i in range(3, n+1):\n        cache[i] = cache[i-1] + cache[i-2]\n    return cache[n]\n    \n    \ndef find_lucas_efficient_2(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    cache = {1:1, 2:2}\n    for i in range(3, n+1):\n        cache[i] = cache[i-1] + cache[i-2]\n    return cache[n]\n    \ndef find_lucas_efficient_3(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 4\n    cache = {1:1, 2:2}\n    for i in range(3, n+1):\n        cache[i] = cache[i-1] + cache[i-2]\n    return cache[n]\n    \ndef find_lucas_efficient_4(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 4\n    if n == 3:\n        return 7\n    cache = {1:1, 2:2}\n    for i in range(3, n+1):\n        cache[i] = cache[i-1] + cache[i-2]\n    return cache[n]\n",
        "num_ids": 99
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 48
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # base cases\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 0:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        # recursive case\n        return find_lucas(n - 1) + find_lucas(n - 2)\n",
        "num_ids": 87
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return lucas(n)\n",
        "num_ids": 10
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = list_[i] + string\n    return list_\n",
        "num_ids": 35
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_list.append(string.format(item))\n    return new_list\n",
        "num_ids": 37
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]\n",
        "num_ids": 30
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]\n",
        "num_ids": 18
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [\"{} {}\".format(list_[i], string) for i in range(len(list_))]\n",
        "num_ids": 30
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]\n",
        "num_ids": 20
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(0, len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n",
        "num_ids": 39
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for item in list_:\n        print(string.format(item))\n",
        "num_ids": 20
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for x in list_:\n        new_list.append(format(x, string))\n    return new_list\n",
        "num_ids": 37
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n    \n    \ndef get_nums(list_, start, end):\n    '''\n    Write a function that, given a list and two indices, returns a new list with the elements in the list between those indices removed.\n    '''\n    return list_[start:end+1]\n    \n    \ndef remove_all(list_, item):\n    '''\n    Write a function that removes all instances of an item from a list.\n    '''\n    while item in list_:\n        list_.remove(item)\n    return list_\n    \n    \ndef find_index(list_, item):\n    '''\n    Write a function that returns the index of the first item in a list that matches an item.\n    '''\n    for i in range(len(list_)):\n        if list_[i] == item:\n            return i\n    return -1\n    \n    \ndef find_all_indexes(list_, item):\n    '''\n    Write a function that returns a list of all of the indices where an item is found in a list.\n    '''\n    result = []\n    for i in range(len(list_)):\n        if item == list_[i]:\n            result.append(i)\n    return result\n    \n    \ndef get_list_length(list_):\n    '''\n    Write a function that returns the length of a list.\n    '''\n    return len(list_)\n    \n    \ndef get_list_sum(list_):\n    '''\n    Write a function that returns the sum of all of the elements in a list.\n    '''\n    sum = 0\n    for i in range(len(list_)):\n        sum += int(list_[i])\n    return sum\n    \n    \ndef remove_list_item(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    list_.remove(item)\n    return list_\n    \n    \ndef append_list(list_, item):\n    '''\n    Write a function that appends an item to a list.\n    '''\n    list_.append(item)\n    return list_\n    \n    \ndef add_list_item(list_, item):\n    '''\n    Write a function that adds an item to a list at the end of the list.\n    '''\n    list_.append(item)\n    return list_\n    \n    \ndef sort_list(list_):\n    '''\n    Write a function that sorts a list.\n    '''\n    return sorted(list_)\n    \n    \ndef reverse_list(list_):\n    '''\n    Write a function that reverses a list.\n    '''\n    list_.reverse()\n    return list_\n    \n    \ndef get_list_average(list_):\n    '''\n    Write a function that returns the average of all of the elements in a list.\n    '''\n    sum = 0\n    for i in range(len(list_)):\n        sum += int(list_[i])\n    return sum / len(list_)\n    \n    \ndef get_list_length_1(list_):\n    '''\n    Write a function that returns the length of a list.\n    '''\n    return len(list_)\n    \n    \ndef get_list_length_2(list_):\n    '''\n    Write a function that returns the length of a list.\n    '''\n    return len(list_)\n    \n    \ndef remove_list_item_1(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    while item in list_:\n        list_.remove(item)\n    return list_\n    \n    \ndef remove_list_item_2(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_3(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_4(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_5(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_6(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_7(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_8(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_9(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_10(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_11(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_12(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_13(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_14(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_15(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_16(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_17(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_18(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_19(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_20(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_21(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_22(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n    '''\n    return list_.remove(item)\n    \n    \ndef remove_list_item_23(list_, item):\n    '''\n    Write a function that removes a given item from a list.\n",
        "num_ids": 16
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    n = len(l1)\n    m = len(l2)\n    nested_dic = {}\n    for i in range(n):\n        nested_dic[l1[i]] = {}\n        nested_dic[l1[i]][l2[i]] = l3[i]\n",
        "num_ids": 78
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1={}\n    for i in range(len(l1)):\n        d1[l1[i]]=l2[i]\n    for i in range(len(l3)):\n        d1[l3[i]]=l2[i+1]\n    return d1\n",
        "num_ids": 73
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1 = {'Mon': {'1': '1', '2': '2', '3': '3'}, 'Tue': {'1': '1', '2': '2', '3': '3'},\n           'Wed': {'1': '1', '2': '2', '3': '3'}, 'Thu': {'1': '1', '2': '2', '3': '3'},\n           'Fri': {'1': '1', '2': '2', '3': '3'}}\n    l2 = {'Mon': {'1': '1', '2': '2', '3': '3'}, 'Tue': {'1': '1', '2': '2', '3': '3'},\n           'Wed': {'1': '1', '2': '2', '3': '3'}, 'Thu': {'1': '1', '2': '2', '3': '3'},\n           'Fri': {'1': '1', '2': '2', '3': '3'}}\n    l3 = {'Mon': {'1': '1', '2': '2', '3': '3'}, 'Tue': {'1': '1', '2': '2', '3': '3'},\n           'Wed': {'1': '1', '2': '2', '3': '3'}, 'Thu': {'1': '1', '2': '2', '3': '3'},\n           'Fri': {'1': '1', '2': '2', '3': '3'}}\n",
        "num_ids": 377
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary_nested = {'students': {}, 'teachers': {}, 'class': {}}\n    for idx in range(len(l1)):\n        dictionary_nested['students'][l1[idx]] = l2[idx]\n        dictionary_nested['teachers'][l1[idx]] = l3[idx]\n        dictionary_nested['class'][l1[idx]] = l4[idx]\n    return dictionary_nested\n",
        "num_ids": 123
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    d2 = {}\n    d3 = {}\n    for i in range(0, len(l1)):\n        d1[l1[i]] = l2[i]\n        d2[l1[i]] = l3[i]\n        d3[l1[i]] = l2[i]*l3[i]\n    return d1, d2, d3\n",
        "num_ids": 100
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = l2[i]\n        d[l2[i]] = l3[i]\n    return d\n",
        "num_ids": 54
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    new_dictionary = {}\n    for i in range(len(l1)):\n        if l1[i] not in new_dictionary:\n            new_dictionary[l1[i]] = l2[i]\n        else:\n            if l2[i] not in new_dictionary[l1[i]]:\n                new_dictionary[l1[i]].append(l2[i])\n    for i in range(len(l3)):\n        if l3[i] not in new_dictionary:\n            new_dictionary[l3[i]] = l1[i]\n        else:\n            if l1[i] not in new_dictionary[l3[i]]:\n                new_dictionary[l3[i]].append(l1[i])\n    return new_dictionary\n    \nif __name__ == '__main__':\n    \n    # This function takes two list as input and converts them to dictionary.\n    l1 = ['one', 'two', 'three']\n    l2 = ['one', 'two', 'four']\n    \n    print(convert_list_dictionary(l1, l2, l3))",
        "num_ids": 280
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict1 = {}\n    for i in range(0, len(l1)):\n        dict1[l1[i]] = l2[i]\n    dict1.update(l3)\n    print(\"\\n\\n\", dict1)\n    return dict1\n",
        "num_ids": 66
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    print(l1, l2, l3)\n    dic = {}\n    for i in range(len(l1)):\n        dic[l1[i]] = l2[i]\n        dic[l3[i]] = l1[i]\n    return dic\n",
        "num_ids": 71
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    \n    if len(l1)!= len(l2) or len(l1)!= len(l3):\n        return -1\n    \n    data_dict = dict()\n    for i in range(len(l1)):\n        data_dict[l1[i]] = (l2[i], l3[i])\n",
        "num_ids": 83
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n",
        "num_ids": 112
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def get_max_sum_helper(n):\n        if n == 1 or n == 2:\n            return n\n",
        "num_ids": 31
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        '''\n        Calculate the maximum sum by using the given equation.\n        '''\n        if n == 1:\n            return 1\n        else:\n            return max(f(n//2), f(n//3), f(n//4), f(n//5)) + n\n",
        "num_ids": 48
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def get_max_sum_helper(n, dp):\n        '''\n        dp[i] = max(dp[i//2] + dp[i//3] + dp[i//4] + dp[i//5], i)\n        '''\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 3\n        if n == 3:\n            return 4\n        if n == 4:\n            return 5\n        if dp[n]!= -1:\n            return dp[n]\n        \n        dp[n] = max(get_max_sum_helper(n//2, dp) + get_max_sum_helper(n//3, dp) + get_max_sum_helper(n//4, dp) + get_max_sum_helper(n//5, dp), n)\n        return dp[n]\n    \n    n = 4\n    dp = [-1] * (n + 1)\n    print(get_max_sum_helper(n, dp))\n",
        "num_ids": 204
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def solve(n):\n        if n==1:\n            return 1\n        elif n==2:\n            return 2\n        elif n==3:\n            return 4\n        elif n==4:\n            return 7\n        else:\n            return solve(n/2) + solve(n/3) + solve(n/4) + solve(n/5)\n    \n    return solve(n)\n",
        "num_ids": 99
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return max_sum_recursive(n)\n",
        "num_ids": 14
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n<2:\n        return n\n    else:\n        return max( (get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)\n",
        "num_ids": 68
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    for n in range(2, 100):\n        max_sum = max( (get_max_sum_recursive(n/2), get_max_sum_recursive(n/3), get_max_sum_recursive(n/4), get_max_sum_recursive(n/5)), n)\n    return max_sum\n    \n",
        "num_ids": 91
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        if n == 0:\n            return 0\n        return max(f(n/2), f(n/3), f(n/4), f(n/5)) + n\n    return f(n)\n",
        "num_ids": 58
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n == 1:\n        return 1\n    \n    elif n % 2 == 0:\n        return get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)\n    \n    else:\n        return get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4)\n    \n    \n",
        "num_ids": 118
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_length_index = 0\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_length_index = i\n    return max_length_index\n",
        "num_ids": 79
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n    for i in range(len(input_list)):\n        if len(input_list[i]) == max_length:\n            return input_list[i]\n",
        "num_ids": 79
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return max_length\n",
        "num_ids": 46
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for num in input_list:\n        if len(num) > max_len:\n            max_len = len(num)\n            max_list = num\n    return max_list\n",
        "num_ids": 60
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_length_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_length_list = input_list\n        elif len(item) == max_length:\n            max_length_list.append(item)\n    return max_length_list\n",
        "num_ids": 100
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    output_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            output_list = []\n            output_list.append(item)\n        elif len(item) == max_length:\n            output_list.append(item)\n    return output_list\n",
        "num_ids": 93
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    n = 0\n    for i in input_list:\n        if len(i) > n:\n            n = len(i)\n    return n\n",
        "num_ids": 38
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) > 0:\n        max_length_list_temp = len(input_list[0])\n        for i in range(1,len(input_list)):\n            if len(input_list[i]) > max_length_list_temp:\n                max_length_list_temp = len(input_list[i])\n        return max_length_list_temp\n    else:\n        return 0\n",
        "num_ids": 104
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    #Create an empty list\n    max_length_list = []\n    # Iterate through the input_list\n    for num in input_list:\n        # Check if the length is already the maximum length\n        if len(max_length_list) == 0:\n            # If it is, append the number\n            max_length_list.append(num)\n        # If it is not the maximum length, check if the length is larger than max\n        elif len(max_length_list)!= 0 and num > max_length_list[-1]:\n            # If it is, append the number\n            max_length_list.append(num)\n    # Return the maximum length\n    return max_length_list\n",
        "num_ids": 167
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = []\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = input_list[i]\n    return max_list\n",
        "num_ids": 85
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # list_tup = list(test_tup)\n    # set_tup = set(list_tup)\n    # if len(list_tup) == len(set_tup):\n    #     return True\n    # else:\n    #     return False\n",
        "num_ids": 68
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    tup_set = set()\n    for x in test_tup:\n        tup_set.add(x)\n    if len(test_tup) == len(tup_set):\n        return True\n    else:\n        return False\n",
        "num_ids": 62
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    tup = list(test_tup)\n    if len(tup) == len(set(tup)):\n        return False\n    else:\n        return True\n",
        "num_ids": 43
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    new_tup = set(test_tup)\n    if len(new_tup) == len(test_tup):\n        return True\n    else:\n        return False\n",
        "num_ids": 46
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup.count(test_tup[i]) > 1:\n            return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n    \n    \n    \ndef check_exhaustive(test_tup):\n    '''\n    Write a function to check if given tuple contains only distinct values.\n    '''\n    test_set = set(test_tup)\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False\n    \n    \n    \ndef check_is_anagram(test_tup1, test_tup2):\n    '''\n    Write a function to check if two given tuples are anagrams of each other.\n    '''\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    if len(test_set1) == len(test_set2):\n        test_set1 = sorted(test_set1)\n        test_set2 = sorted(test_set2)\n        if test_set1 == test_set2:\n            return True\n        else:\n            return False\n    else:\n        return False\n    \n    \n    \ndef find_difference(num1, num2):\n    '''\n    Write a function to find the difference between two numbers.\n    '''\n    if num1 > num2:\n        difference = num1 - num2\n    elif num2 > num1:\n        difference = num2 - num1\n    else:\n        return None\n    return difference\n    \n    \n    \ndef even_odd(test_list):\n    '''\n    Write a function to find if given list contains even and odd numbers.\n    '''\n    even_list = []\n    odd_list = []\n    for i in range(len(test_list)):\n        if test_list[i] % 2 == 0:\n            even_list.append(test_list[i])\n        else:\n            odd_list.append(test_list[i])\n    return even_list, odd_list\n    \n    \n    \ndef multiply(list_of_numbers):\n    '''\n    Write a function to multiply the list of numbers.\n    '''\n    multiplied = 1\n    for i in range(len(list_of_numbers)):\n        multiplied = multiplied * list_of_numbers[i]\n    return multiplied\n    \n    \n    \ndef find_3_nums_with_same_sum(numbers):\n    '''\n    Write a function to find three numbers from a list which add up to a specific number.\n    '''\n    possible_nums = []\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == 30:\n                    possible_nums.append([numbers[i], numbers[j], numbers[k]])\n    return possible_nums\n    \n    \n    \ndef find_3_nums_with_even_sum(numbers):\n    '''\n    Write a function to find three numbers from a list which add up to a specific number.\n    '''\n    possible_nums = []\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            for k in range(j+1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == 0:\n                    possible_nums.append([numbers[i], numbers[j], numbers[k]])\n    return possible_nums\n    \n    \n    \ndef find_common_number(numbers1, numbers2):\n    '''\n    Write a function to find common numbers in two lists.\n    '''\n    common_nums = []\n    for num in numbers1:\n        if num in numbers2:\n            common_nums.append(num)\n    return common_nums\n    \n    \n    \ndef is_string_palindrome(str_in):\n    '''\n    Write a function to check if given string is palindrome.\n    '''\n    reverse_in = str_in[::-1]\n    if reverse_in == str_in:\n        return True\n    else:\n        return False\n    \n    \n    \ndef find_factors(num):\n    '''\n    Write a function to find all factors of given number.\n    '''\n    factors = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            factors.append(i)\n    return factors\n    \n    \n    \ndef find_multiple_of_3(numbers):\n    '''\n    Write a function to find multiple of 3 from a list of numbers.\n    '''\n    found_3 = []\n    for i in range(len(numbers)):\n        if numbers[i] % 3 == 0:\n            found_3.append(numbers[i])\n    return found_3\n    \n    \n    \ndef find_words_with_set_letter(word, letters):\n    '''\n    Write a function to find words containing a given set of letters.\n    '''\n    found_words = []\n    for i in range(len(word)):\n        if word[i] in letters:\n            found_words.append(word)\n    return found_words\n    \n    \n    \ndef find_words_with_n_vowels(word, n):\n    '''\n    Write a function to find words having specified number of vowels.\n    '''\n    vowels = \"aeiou\"\n    found_words = []\n    for i in range(len(word)):\n        if word[i] in vowels:\n            if word.count(word[i]) == n:\n                found_words.append(word)\n    return found_words\n    \n    \n    \ndef remove_duplicate(word):\n    '''\n    Write a function to remove duplicate words from a given string.\n    '''\n    word_list = []\n    for i in range(len(word)):\n        if word[i] not in word_list:\n            word_list.append(word[i])\n    return word_list\n    \n    \n    \ndef find_longest_word(words):\n    '''\n    Write a function to find longest word from a list of words.\n    '''\n    largest_word = 0\n    for word in words:\n        if len(word) > largest_word:\n            largest_word = len(word)\n    return largest_word\n    \n    \n    \ndef find_longest_word_with_number_occurrence(words):\n    '''\n    Write a function to find longest word from a list of words with number of occurrence.\n    '''\n    largest_word = 0\n    for word in words:\n        if len(word) > largest_word:\n            count = words.count(word)\n            if count > largest_word:\n                largest_word = count\n    return largest_word\n    \n    \n    \ndef validate_parenthesis(parenthesis):\n    '''\n    Write a function to validate if given parenthesis string contains only valid parenthesis.\n    '''\n    if len(parenthesis) % 2 == 0:\n        return None\n    opened_parenthesis = \"([{\"\n    closed_parenthesis = \")]}\"\n    opened_parenthesis_list = []\n    closed_parenthesis_list = []\n    for i in range(len(parenthesis)):\n        if parenthesis[i] in opened_parenthesis:\n            opened_parenthesis_list.append(parenthesis[i])\n        if parenthesis[i] in closed_parenthesis:\n            closed_parenthesis_list.append(parenthesis[i])\n    if len(opened_parenthesis_list)!= len(closed_parenthesis_list):\n        return None\n    for i in range(len(opened_parenthesis_list)):\n        if opened_parenthesis_list[i] == \"[\" and closed_parenthesis_list[i] == \"]\":\n            continue\n        elif opened_parenthesis_list[i] == \"{\" and closed_parenthesis_list[i] == \"}\":\n            continue\n        elif opened_parenthesis_list[i] == \"(\" and close",
        "num_ids": 257
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    set_tup = set()\n    for i in range(len(test_tup)):\n        if test_tup[i] not in set_tup:\n            set_tup.add(test_tup[i])\n        else:\n            return False\n    return True\n",
        "num_ids": 71
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        char = str1[i]\n        if str1.count(char) == 1:\n            return char\n",
        "num_ids": 41
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    ch = str1[0]\n    for i in range(1,len(str1)):\n        if ch == str1[i]:\n            return None\n        else:\n            ch = str1[i]\n    return ch\n",
        "num_ids": 57
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    mydict = {}\n    #print(str1)\n    for i in range(len(str1)):\n        mydict[str1[i]] = 0\n    for i in range(len(str1)):\n        if str1[i] not in mydict:\n            return str1[i]\n    return None\n",
        "num_ids": 79
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    for i in range(len(str1)):\n        if(str1[i] not in str1[i+1:]):\n            return i\n",
        "num_ids": 40
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # str1 = input('Please enter the string: ')\n    # chars = set()\n    # for char in str1:\n    #     if char not in chars:\n    #         chars.add(char)\n    #         print(char, end='')\n    # print('\\n', end='')\n    # print(chars)\n    return \n",
        "num_ids": 90
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    n = len(str1)\n    m = {}\n    for i in range(n):\n        if str1[i] not in m:\n            m[str1[i]] = 1\n        else:\n            m[str1[i]] += 1\n    for i in range(n):\n        if m[str1[i]] == 1:\n            return str1[i]\n",
        "num_ids": 93
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # if str1 == \"\":\n    #     return -1\n    # else:\n    #     for i in str1:\n    #         if str1.count(i) == 1:\n    #             return i\n    #     return -1\n",
        "num_ids": 61
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # if len(str1) == 0:\n    #     return -1\n    #\n    # dict_ = {}\n    # # print(dict_)\n    #\n    # for i in range(len(str1)):\n    #     # print(str1[i])\n    #     if str1[i] in dict_.keys():\n    #         dict_[str1[i]] += 1\n    #         # print(str1[i])\n    #     else:\n    #         dict_[str1[i]] = 1\n    #\n    # # print(dict_)\n    #\n    # for key, value in dict_.items():\n    #     if value == 1:\n    #         return key\n    #     else:\n    #         return -1\n",
        "num_ids": 185
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1 = list(str1)\n    char_set = set()\n    for char in str1:\n        if char not in char_set:\n            char_set.add(char)\n        else:\n            return char\n    \n    return None\n",
        "num_ids": 62
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    seen = set()\n    for i in str1:\n        if i in seen:\n            return i\n        seen.add(i)\n    return '_'\n",
        "num_ids": 41
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.search(regex,string)\nprint(check_char('Bhagvat')) #True\nprint(check_char('Bhi')) #False\nprint(check_char('bhagvat')) #False\nprint(check_char('a')) #True\nprint(check_char('Hello world')) #True\nprint(check_char('Hello')) #False\n",
        "num_ids": 95
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    char = re.search(regex, string)\n    if char:\n        print('True')\n    else:\n        print('False')\n",
        "num_ids": 36
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 29
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string.startswith(string[0]):\n        print('starting with the same character')\n    else:\n        print('starting with a different character')\n    if string.endswith(string[-1]):\n        print('ending with the same character')\n    else:\n        print('ending with a different character')\n    \ndef check_vowel(string):\n    '''\n    Write a function to check whether the given string contains a vowel or not.\n    '''\n    vowel = ['a','e','i','o','u','A','E','I','O','U']\n    if any(i in vowel for i in string):\n        print('contains vowel')\n    else:\n        print('not contains vowel')\n",
        "num_ids": 62
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(string[0]==string[len(string)-1]):\n        return 1\n    else:\n        return 0\n",
        "num_ids": 32
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return (string[0] == string[-1])\n",
        "num_ids": 16
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False",
        "num_ids": 25
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string)\nprint(check_char('abc'))\nprint(check_char('aba'))\n",
        "num_ids": 34
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        return True\n    else:\n        return False\ndef check_char_1(string):\n    '''\n    Write a function that takes a string as input and returns a boolean value indicating whether the string is a palindrome or not. \n    A palindrome is a string that is written the same forward and backward. \n    String passed to the function is always a non-empty string.\n    '''\n    string = string.strip()\n    if len(string)<=1:\n        return True\n    else:\n        return string[0] == string[-1] and check_char(string[1:-1])\ndef check_palindrome_using_split_function(string):\n    '''\n    Write a function that takes a string as input and returns a boolean value indicating whether the string is a palindrome or not. \n    String passed to the function is always a non-empty string.\n    '''\n    return string == string[::-1]\ndef check_palindrome_using_regex(string):\n    '''\n    Write a function that takes a string as input and returns a boolean value indicating whether the string is a palindrome or not. \n    String passed to the function is always a non-empty string.\n    '''\n    return True if re.match(regex, string) else False\ndef check_palindrome_using_set(string):\n    '''\n    Write a function that takes a string as input and returns a boolean value indicating whether the string is a palindrome or not. \n    String passed to the function is always a non-empty string.\n    '''\n    return True if set(string) == set(reversed(string)) else False\ndef check_palindrome_using_upper_lower_lower(string):\n    '''\n    Write a function that takes a string as input and returns a boolean value indicating whether the string is a palindrome or not. \n    String passed to the function is always a non-empty string.\n    '''\n    return True if ''.join(sorted(string.lower())) == ''.join(reversed(sorted(string.lower()))) else False\ndef check_palindrome_using_upper_lower_upper(string):\n    '''\n    Write a function that takes a string as input and returns a boolean value indicating whether the string is a palindrome or not. \n    String passed to the function is always a non-empty string.\n    '''\n    return True if ''.join(sorted(string.upper())) == ''.join(reversed(sorted(string.upper()))) else False\ndef check_palindrome_using_upper_lower_upper(string):\n    '''\n    Write a function that takes a string as input and returns a boolean value indicating whether the string is a palindrome or not. \n    String passed to the function is always a non-empty string.\n    '''\n    return True if ''.join(sorted(string.upper())) == ''.join(reversed(sorted(string.upper()))) else False\ndef check_palindrome_using_upper_lower_upper(string):\n    '''\n    Write a function that takes a string as input and returns a boolean value indicating whether the string is a palindrome or not. \n    String passed to the function is always a non-empty string.\n    '''\n    return True if ''.join(sorted(string.upper())) == ''.join(reversed(sorted(string.upper()))) else False\ndef check_palindrome_using_upper_lower_upper(string):\n    '''\n    Write a function that takes a string as input and returns a boolean value indicating whether the string is a palindrome or not. \n    String passed to the function is always a non-empty string.\n    '''\n    return True if ''.join(sorted(string.upper())) == ''.join(reversed(sorted(string.upper()))) else False\ndef check_palindrome_using_upper_lower_lower(string):\n    '''\n    Write a function that takes a string as input and returns a boolean value indicating whether the string is a palindrome or not. \n    String passed to the function is always a non-empty string.\n    '''\n    return True if ''.join(sorted(string.lower())) == ''.join(reversed(sorted(string.lower()))) else False\ndef check_palindrome_using_upper_lower_lower(string):\n    '''\n    Write a function that takes a string as input and returns a boolean value indicating whether the string is a palindrome or not. \n    String passed to the function is always a non-empty string.\n    '''\n    return True if ''.join(sorted(string.lower())) == ''.join(reversed(sorted(string.lower()))) else False\ndef check_palindrome_using_upper_lower_lower(string):\n    '''\n    Write a function that takes a string as input and returns a boolean value indicating whether the string is a palindrome or not. \n    String passed to the function is always a non-empty string.\n    '''\n    return True if ''.join(sorted(string.lower())) == ''.join(reversed(sorted(string.lower()))) else False\ndef check_palindrome_using_upper_lower_lower(string):\n    '''\n    Write a function that takes a string as input and returns a boolean value indicating whether the string is a palindrome or not. \n    String passed to the function is always a non-empty string.\n    '''\n    return True if ''.join(sorted(string.lower())) == ''.join(reversed(sorted(string.lower()))) else False\ndef check_palindrome_using_upper_lower_lower(string):\n    '''\n    Write a function that takes a string as input and returns a boolean value indicating whether the string is a palindrome or not. \n    String passed to the function is always a non-empty string.\n    '''\n    return True if ''.join(sorted(string.lower())) == ''.join(reversed(sorted(string.lower()))) else False\ndef check_palindrome_using_upper_lower_lower(string):\n    '''\n    Write a function that takes a string as input and returns a boolean value indicating whether the string is a palindrome or not. \n    String passed to the function is always a non-empty string.\n    '''\n    return True if ''.join(sorted(string.lower())) == ''.join(reversed(sorted(string.lower()))) else False\ndef check_palindrome_using_upper_lower_lower(string):\n    '''\n    Write a function that takes a string as input and returns a boolean value indicating whether the string is a palindrome or not. \n    String passed to the function is always a non-empty string.\n    '''\n    return True if ''.join(sorted(string.lower())) == ''.join(reversed(sorted(string.lower()))) else False\ndef check_palindrome_using_upper_lower_lower(string):\n    '''\n    Write a function that takes a string as input and returns a boolean value indicating whether the string is a palindrome or not. \n    String passed to the function is always a non-empty string.\n    '''\n    return True if ''.join(sorted(string.lower())) == ''.join(reversed(sorted(string.lower()))) else False\ndef check_palindrome_using_upper_lower_lower(string):\n    '''\n    Write a function that takes a string as input and returns a boolean value indicating whether the string is a palindrome or not. \n    String passed to the function is always a non-empty string.\n    '''\n    return True if ''.join(sorted(string.lower())) == ''.join(reversed(sorted(string.lower()))) else False\ndef check_palindrome_using_upper_lower_lower(string):\n    '''\n    Write a function that takes a string as input and returns a boolean value indicating whether the string is a palindrome or not. \n    String passed to the function is always a non-empty string.\n    '''\n    return True if ''.join(sorted(string.lower())) == ''.join(r",
        "num_ids": 24
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>=b and a>=c:\n        return a\n    elif b>=a and b>=c:\n        return b\n    else:\n        return c\n        \n",
        "num_ids": 47
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if (a > b) and (a > c):\n        return a\n    elif (b > a) and (b > c):\n        return b\n    elif (c > a) and (c > b):\n        return c\n    else:\n        return 'out of range'\n    \n",
        "num_ids": 72
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a = sorted(a)\n    b = sorted(b)\n    c = sorted(c)\n    if a > b and a > c:\n        if b > c:\n            return median(a,b,c)\n        else:\n            return median(a,c,b)\n    elif b > a and b > c:\n        if a > c:\n            return median(b,a,c)\n        else:\n            return median(b,c,a)\n    else:\n        if c > a and c > b:\n            return median(c,a,b)\n        else:\n            return median(c,b,a)\n",
        "num_ids": 156
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a = sorted(a)\n    b = sorted(b)\n    c = sorted(c)\n",
        "num_ids": 26
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = sorted([a,b,c])\n    if len(numbers) == 0:\n        raise ValueError('list of numbers should not be empty')\n    if len(numbers) == 1:\n        return numbers[0]\n    if len(numbers) == 2:\n        return (numbers[0] + numbers[1])/2\n    middle_index = len(numbers)//2\n    first_middle = numbers[middle_index]\n    second_middle = numbers[middle_index+1]\n    if first_middle > second_middle:\n        return median_numbers(first_middle, second_middle, middle_index)\n    elif first_middle < second_middle:\n        return median_numbers(first_middle, second_middle, middle_index+1)\n    else:\n        return first_middle\n",
        "num_ids": 199
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numList = [a,b,c]\n    numList.sort()\n    size = len(numList)\n    median = numList[int(size/2)]\n    return median\n",
        "num_ids": 48
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b and a > c:\n        if b > c:\n            return b\n        else:\n            return c\n    elif b > a and b > c:\n        if a > c:\n            return a\n        else:\n            return c\n    else:\n        if a > b and a > c:\n            if b > c:\n                return b\n            else:\n                return c\n        else:\n            if a > c:\n                return a\n            else:\n                return c\n",
        "num_ids": 120
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    list1 = [a, b, c]\n    list1.sort()\n    if len(list1) % 2 == 0:\n        return float((list1[int(len(list1)/2)] + list1[int(len(list1)/2 - 1)]) / 2)\n    else:\n        return float(list1[int(len(list1)/2)])\n",
        "num_ids": 92
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    median = (a + b + c) - min(a,b,c) - max(a,b,c)\n    return median\n",
        "num_ids": 36
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    arr = sorted([a,b,c])\n    if len(arr)%2 == 0:\n        print(\"Median is \",(arr[(len(arr)-1)//2] + arr[(len(arr)-2)//2])/2)\n    else:\n        print(arr[len(arr)//2])\n",
        "num_ids": 80
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # convert to int first\n    # all_digits = [int(x) for x in nums]\n    all_digits = nums\n",
        "num_ids": 37
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += int(i)\n    return sum\n",
        "num_ids": 27
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(int, map(str, nums)))\n",
        "num_ids": 18
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in list(map(str,nums))])\n",
        "num_ids": 24
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(num) for num in nums])\n",
        "num_ids": 17
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for i in nums:\n        sum_of_digits = sum_of_digits + i\n",
        "num_ids": 37
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Your code here\n    \n    num_sum = 0\n    for i in nums:\n        num_sum += len(str(i))\n    return num_sum\n",
        "num_ids": 43
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sums = []\n    for num in nums:\n        sums.append(sum(int(c) for c in str(num)))\n    return sums\n",
        "num_ids": 40
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        while num:\n            total += num % 10\n            num = num // 10\n    return total\n",
        "num_ids": 38
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum_of_digits(num)\n    return total\n",
        "num_ids": 32
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for item1, item2 in zip(test_tup1, test_tup2):\n        result += (item1 ^ item2,)\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(bin(test_tup1[0] ^ test_tup2[0])[2:].zfill(8))\n",
        "num_ids": 35
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    a = test_tup1[0]\n    b = test_tup2[0]\n    c = a ^ b\n    return (c, )\n",
        "num_ids": 40
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    else:\n        sum_test = 0\n        for i in range(len(test_tup1)):\n            xor_test = int(test_tup1[i]) ^ int(test_tup2[i])\n            sum_test = sum_test + xor_test\n        return sum_test\n",
        "num_ids": 101
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_tup = tuple(xor_element for xor_element in test_tup1 if xor_element ^ test_tup2[i] == 1 )\n    return xor_tup\n",
        "num_ids": 52
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            result = result << 1\n        else:\n            result = result | 1\n    return result\n",
        "num_ids": 65
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    a = test_tup1[0]\n    b = test_tup1[1]\n    c = test_tup2[0]\n    d = test_tup2[1]\n    e = a ^ b\n    f = c ^ d\n    return e, f\n",
        "num_ids": 70
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_tup = ()\n    for i in range(len(test_tup1)):\n        xor_tup += (test_tup1[i] ^ test_tup2[i],)\n    return xor_tup\n",
        "num_ids": 62
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    x1, x2 = test_tup1\n    y1, y2 = test_tup2\n    return (x1 ^ y1, x2 ^ y2)\n",
        "num_ids": 44
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([tup1 ^ tup2 for tup1, tup2 in zip(test_tup1, test_tup2)])\n",
        "num_ids": 38
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(tuple(x) for x in test_list))\n    \nprint(extract_freq([1,2,3,4,5]))\nprint(extract_freq([1,2,3]))\nprint(extract_freq([1,1,2,3,3,3]))\n",
        "num_ids": 81
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in test_list:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n",
        "num_ids": 52
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(tuple(test_list)))\n",
        "num_ids": 16
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for i in test_list:\n        if i not in test_list:\n            count += 1\n    print(count)\n",
        "num_ids": 37
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    if len(test_list) == 0:\n        return 0\n    \n    freq = {}\n    for i in test_list:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return len(freq)\n    \n    \ndef print_tuple_freq(test_list):\n    '''\n    Write a function to print the number of unique tuples in the given list.\n    '''\n    if len(test_list) == 0:\n        return 0\n    \n    freq = {}\n    for i in test_list:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    \n    return freq\n",
        "num_ids": 72
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    def freq(l):\n        lst = []\n        for i in l:\n            if i not in lst:\n                lst.append(i)\n        return len(lst)\n    return freq(test_list)\n",
        "num_ids": 59
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    freq = 0\n    if len(test_list) > 0:\n        freq = len(test_list)\n",
        "num_ids": 33
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for i in test_list:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n    \nprint(extract_freq([2, 5, 3, 5, 3, 5, 6, 2, 3, 3]))",
        "num_ids": 93
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in range(len(test_list)):\n        if test_list[i] in freq.keys():\n            freq[test_list[i]] += 1\n        else:\n            freq[test_list[i]] = 1\n",
        "num_ids": 67
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # your code here\n    freq = set(test_list)\n    return len(freq)\n",
        "num_ids": 27
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(zip(test_tup1, test_tup2))\n",
        "num_ids": 21
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    answer_tup = []\n    for i, val in enumerate(test_tup1):\n        answer_tup.append((val, test_tup2[i]))\n    return answer_tup\n",
        "num_ids": 53
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1]\n",
        "num_ids": 39
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for x, y in zip(test_tup1, test_tup2):\n        if type(x)!= int:\n            x = list(x)\n        if type(y)!= int:\n            y = list(y)\n        result.append((x + y))\n    return tuple(result)\n",
        "num_ids": 81
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    lst1, lst2 = test_tup1, test_tup2\n    result_list = list()\n    if len(lst1)!= len(lst2):\n        return 'Length of two tuples are not same'\n    for i, j in zip(lst1, lst2):\n        result_list.append(add_two_tuples(i, j))\n    return result_list\n",
        "num_ids": 102
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    result = []\n    for i in range(0, len(list1)):\n        result.append((list1[i] + list2[i]))\n    return tuple(result)\n",
        "num_ids": 73
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    tup1 = (1,2,3,4)\n    tup2 = (4,5,6,7)\n    list1 = []\n    list2 = []\n    for i in range(len(tup1)):\n        for j in range(len(tup2)):\n            list1.append(tup1[i])\n            list2.append(tup2[j])\n        tup3 = tuple(list1)\n        list1 = []\n        tup4 = tuple(list2)\n        list2 = []\n        return tup3 + tup4\n",
        "num_ids": 142
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(map(operator.add, test_tup1, test_tup2))\n",
        "num_ids": 25
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_list_tup1 = list(test_tup1)\n    test_list_tup2 = list(test_tup2)\n",
        "num_ids": 38
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Code here\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    tup_1_len = len(test_tup1)\n    tup_2_len = len(test_tup2)\n    if tup_1_len > tup_2_len:\n        for i in range(tup_1_len - tup_2_len):\n            test_tup2.append(0)\n    elif tup_2_len > tup_1_len:\n        for i in range(tup_2_len - tup_1_len):\n            test_tup1.append(0)\n    \n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    \n    tup_final = test_tup1 + test_tup2\n    return tup_final\n",
        "num_ids": 235
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    min = 0\n    if(a>b):\n        min = b\n    else:\n        min = a\n    return min\n",
        "num_ids": 33
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return b\n    else:\n        return a\n    return 0\n",
        "num_ids": 25
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a < b else b\nprint(minimum(8,6))\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n    ",
        "num_ids": 12
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    elif a==b:\n        return \"Numbers are equal\"\n    else:\n        return b\nprint(minimum(3,4))\nprint(minimum(4,4))\nprint(minimum(3,3))\n",
        "num_ids": 64
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i]==tuple1:\n            return True\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return 1\n    else:\n        return 0\n",
        "num_ids": 24
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] == tuple1[i]:\n            return True\n    return False\n",
        "num_ids": 39
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuplex in tuple1\n",
        "num_ids": 11
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] == tuple1:\n            return True\n        else:\n            continue\n    return False\n",
        "num_ids": 44
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuple1 == tuplex[i]:\n            return 1\n    return 0\n",
        "num_ids": 36
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex == tuple1:\n        print('Yes, the tuple is equal.')\n    else:\n        print('No, the tuple is not equal.')\n",
        "num_ids": 41
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    print(\"Checking whether a tuple exists in a tuple\")\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n",
        "num_ids": 38
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        print(\"1\")\n    else:\n        print(\"0\")\n    \n    \ndef check_tuple_n(tuple_n): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple_n:\n        print(\"1\")\n    else:\n        print(\"0\")\n    \n    \ndef swap_tuple(tuple1,tuple2): \n    '''\n    Write a function to swap elements in a tuple.\n    '''\n    tuple1_new = tuple1[::-1]\n    tuple2_new = tuple2[::-1]\n    return tuple1_new,tuple2_new\n    \n    \ndef swap_tuple_n(tuple_n):\n    '''\n    Write a function to swap elements in a tuple.\n    '''\n    if tuple_n:\n        tuple_n = tuple_n[::-1]\n        print(tuple_n)\n    else:\n        print(None)\n        \n        \ndef diff_tuple(tuple1,tuple2):\n    '''\n    Write a function to find the difference between two tuples.\n    '''\n    tuple1_new = list(tuple1)\n    tuple2_new = list(tuple2)\n    diff_tuple = list(set(tuple1_new)-set(tuple2_new))\n    return tuple(diff_tuple)\n    \n    \ndef diff_tuple_n(tuple_n):\n    '''\n    Write a function to find the difference between two tuples.\n    '''\n    if tuple_n:\n        tuple_n = tuple_n[::-1]\n        diff_tuple = tuple(set(tuple_n)-set(tuple_n[::-1]))\n        return tuple(diff_tuple)\n    else:\n        return None\n    \n    \ndef count_tuple(tuple1):\n    '''\n    Write a function to count the number of elements in a tuple.\n    '''\n    return tuple1.count(0)\n    \n    \ndef count_tuple_n(tuple_n):\n    '''\n    Write a function to count the number of elements in a tuple.\n    '''\n    if tuple_n:\n        tuple_n = tuple_n[::-1]\n        return tuple_n.count(0)\n    else:\n        return None\n    \n    \ndef sum_tuple(tuple1):\n    '''\n    Write a function to sum the elements in a tuple.\n    '''\n    tuple_sum = 0\n    for i in tuple1:\n        tuple_sum += i\n    return tuple_sum\n    \n    \ndef sum_tuple_n(tuple_n):\n    '''\n    Write a function to sum the elements in a tuple.\n    '''\n    if tuple_n:\n        tuple_n = tuple_n[::-1]\n        sum_tuple = 0\n        for i in tuple_n:\n            sum_tuple += i\n        return sum_tuple\n    else:\n        return None\n    \n    \ndef mean_tuple(tuple1):\n    '''\n    Write a function to find the mean of the elements in a tuple.\n    '''\n    sum_tuple = 0\n    tuple1_new = list(tuple1)\n    for i in tuple1_new:\n        sum_tuple += i\n    mean_tuple = sum_tuple/len(tuple1_new)\n    return mean_tuple\n    \n    \ndef mean_tuple_n(tuple_n):\n    '''\n    Write a function to find the mean of the elements in a tuple.\n    '''\n    if tuple_n:\n        tuple_n = tuple_n[::-1]\n        mean_tuple = sum_tuple/len(tuple_n)\n        return mean_tuple\n    else:\n        return None\n    \n    \ndef sum_by_value_tuple(tuple1):\n    '''\n    Write a function to find the sum of the elements in a tuple with each element as value.\n    '''\n    sum_value = 0\n    tuple1_new = list(tuple1)\n    for i in tuple1_new:\n        sum_value += i\n    return sum_value\n    \n    \ndef sum_by_value_tuple_n(tuple_n):\n    '''\n    Write a function to find the sum of the elements in a tuple with each element as value.\n    '''\n    if tuple_n:\n        tuple_n = tuple_n[::-1]\n        sum_value = 0\n        for i in tuple_n:\n            sum_value += i\n        return sum_value\n    else:\n        return None\n    \n    \ndef sum_by_key_tuple(tuple1):\n    '''\n    Write a function to find the sum of the elements in a tuple with each element as value.\n    '''\n    tuple_sum = 0\n    sum_key = 0\n    for i in tuple1:\n        tuple_sum += i\n        sum_key += i[1]\n    return tuple_sum/sum_key\n    \n    \ndef sum_by_key_tuple_n(tuple_n):\n    '''\n    Write a function to find the sum of the elements in a tuple with each element as value.\n    '''\n    if tuple_n:\n        tuple_n = tuple_n[::-1]\n        tuple_sum = 0\n        sum_key = 0\n        for i in tuple_n:\n            tuple_sum += i\n            sum_key += i[1]\n        return tuple_sum/sum_key\n    else:\n        return None\n    \n    \ndef max_tuple(tuple1):\n    '''\n    Write a function to find the maximum element in a tuple.\n    '''\n    if tuple1:\n        tuple1_new = list(tuple1)\n        max_tuple = max(tuple1_new)\n        return max_tuple\n    else:\n        return None\n    \n    \ndef max_tuple_n(tuple_n):\n    '''\n    Write a function to find the maximum element in a tuple.\n    '''\n    if tuple_n:\n        tuple_n = tuple_n[::-1]\n        max_tuple = max(tuple_n)\n        return max_tuple\n    else:\n        return None\n    \n    \ndef min_tuple(tuple1):\n    '''\n    Write a function to find the minimum element in a tuple.\n    '''\n    if tuple1:\n        tuple1_new = list(tuple1)\n        min_tuple = min(tuple1_new)\n        return min_tuple\n    else:\n        return None\n    \n    \ndef min_tuple_n(tuple_n):\n    '''\n    Write a function to find the minimum element in a tuple.\n    '''\n    if tuple_n:\n        tuple_n = tuple_n[::-1]\n        min_tuple = min(tuple_n)\n        return min_tuple\n    else:\n        return None\n    \n    \ndef tuple_length(tuple1):\n    '''\n    Write a function to find the length of a tuple.\n    '''\n    return len(tuple1)\n    \n    \ndef tuple_length_n(tuple_n):\n    '''\n    Write a function to find the length of a tuple.\n    '''\n    if tuple_n:\n        tuple_n = tuple_n[::-1]\n        return len(tuple_n)\n    else:\n        return None\n    \n    \ndef tuple_rep(tuple1):\n    '''\n    Write a function to find the repetition of the element in a tuple.\n    '''\n    if tuple1:\n        tuple1_new = list(tuple1)\n        tuple_rep = tuple1_new.count(tuple1_new[0])\n        return tuple_rep\n    else:\n        return None\n    \n    \ndef tuple_rep_n(tuple_n):\n    '''\n    Write a function to find the repetition of the element in a tuple",
        "num_ids": 16
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2!= 0\n",
        "num_ids": 11
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2 == 0\n    ",
        "num_ids": 11
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2\n",
        "num_ids": 8
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"{0} is even\".format(x))\n    else:\n        print(\"{0} is odd\".format(x))\n    return None\n",
        "num_ids": 47
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    y = (x & 1)\n    return(y)\n",
        "num_ids": 17
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n",
        "num_ids": 8
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2\n",
        "num_ids": 8
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Solution\n    # x = int(input('Enter the number'))\n    # if x % 2 == 0:\n    #     print('This is even')\n    # else:\n    #     print('This is odd')\n    # return None\n",
        "num_ids": 60
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x%2)==0:\n        print(\"Number is even\")\n    else:\n        print(\"Number is odd\")\n",
        "num_ids": 33
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x & 1): \n        return 0\n    else: \n        return 1\n",
        "num_ids": 24
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    str_n = str(n)\n    length = len(str_n)\n    for i in range(length - 1, -1, -1):\n        if int(str_n[i]) < int(str_n[i - 1]):\n            str_n = str_n[:i - 1] + str_n[i:] + str_n[i - 1]\n            break\n    if length == 1:\n        str_n = \"2\" + str_n\n    return int(str_n)\n",
        "num_ids": 125
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num = int(str(n)[::-1])\n    if num == 0:\n        return 1\n    while num > 0:\n        dig = num % 10\n        if dig > num//10:\n            return num\n        num = num // 10\n    return n+1\n",
        "num_ids": 67
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    bigger = ''.join(sorted(str(n),reverse=True))\n    return int(bigger)\n",
        "num_ids": 30
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    l = len(n)\n    for i in range(l):\n        if n[i] < n[i+1]:\n            n[i], n[i+1] = n[i+1], n[i]\n    n = ''.join(n)\n    if n[0] == '0':\n        n = '1' + n[1:]\n    return int(n)\n",
        "num_ids": 106
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    for i in range(len(n)-1,0,-1):\n        if n[i] < n[i-1]:\n            n = n[:i] + n[i] + n[i+1:]\n            break\n    else:\n        n = n + str(0)\n    return int(n)\n",
        "num_ids": 86
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num = str(n)\n    m, m2 = int(num[0]), int(num[1])\n    for i in range(2,len(num)):\n        if int(num[i]) > m2:\n            m, m2 = int(num[i]), int(num[i-1])\n    return int(''.join(sorted(str(m),reverse=True)))\n",
        "num_ids": 96
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 0:\n        return n\n    n = str(n)\n    max_digit = max(n)\n    n = list(n)\n    n.sort()\n    for i in range(len(n)-1, -1, -1):\n        if int(n[i]) > max_digit:\n            max_digit = int(n[i])\n            n[i] = str(max_digit)\n            n.sort()\n            break\n    return int(\"\".join(n))\n",
        "num_ids": 122
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    a = n\n    a = list(str(a))\n    i = 0\n    j = 0\n    while i < len(a):\n        if a[i] == '9':\n            a.insert(i, '0')\n            a.insert(i, '1')\n            a.insert(i, '2')\n            a.insert(i, '3')\n            a.insert(i, '4')\n            a.insert(i, '5')\n            a.insert(i, '6')\n            a.insert(i, '7')\n            a.insert(i, '8')\n            a.insert(i, '9')\n            i += 1\n        else:\n            i += 1\n    a = ''.join(a)\n    return int(a)\n",
        "num_ids": 188
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # if number is the same, return itself.\n    if n == int(str(n)):\n        return n\n    \n    # if number is less than 10, then return itself.\n    if n < 10:\n        return n\n    \n    # get all the digits of the number and change them into string.\n    l = []\n    while n:\n        l.append(str(n%10))\n        n //= 10\n    l = ''.join(l[::-1])\n    \n    # sort the digits of the number and create the new number.\n    l = sorted(l)\n    n = 0\n    for i in range(len(l)):\n        n += int(l[i]) * 10**i\n    return n\n    \n",
        "num_ids": 181
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    lst = list(str(n))\n    m = max(lst)\n    for i in range(len(lst)):\n        if lst[i] > m:\n            lst[i], lst[i+1] = lst[i+1], lst[i]\n            break\n    lst = ''.join(lst)\n    if int(lst) > n:\n        return lst\n    else:\n        return n\n",
        "num_ids": 112
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) < k or len(nums2) < k:\n        return []\n    res = []\n    n1 = len(nums1)\n    n2 = len(nums2)\n    if n1 < n2:\n        nums1, nums2 = nums2, nums1\n        n1, n2 = n2, n1\n    # 1. sort nums1\n    # 2. sort nums2\n    # 3. two pointers, l1, l2, i1, i2, j1, j2, s1, s2\n    # 4. 1. l1 + i1 + s1 == l2 + i2 + s2\n    # 5. 2. nums1[l1] + nums2[i2] + nums1[i1 + s1] == nums2[l2] + nums2[i2 + s2]\n    nums1.sort()\n    nums2.sort()\n    l1 = 0\n    l2 = 0\n    i1 = 0\n    i2 = 0\n    j1 = 0\n    j2 = 0\n    s1 = 0\n    s2 = 0\n    while l1 < n1 and l2 < n2:\n        while j2 < n2 and nums1[l1] + nums2[j2] >= nums1[l1] + nums2[j2 + s2]:\n            j2 += 1\n            if j2 == n2:\n                break\n        while j1 < n1 and nums1[l1] + nums2[j1] >= nums1[l1] + nums2[j1 + s1]:\n            j1 += 1\n            if j1 == n1:\n                break\n        if j1 == j2 and j2 == n2:\n            if i1 == i2 and s1 + l1 == s2 + l2:\n                continue\n            if l1 == n1 - 1:\n                heapq.heappush(res, (nums1[l1], nums2[i2]))\n            else:\n                heapq.heappush(res, (nums1[l1 + s1], nums2[i2]))\n            l1 += 1\n            l2 += 1\n            i1 = i2\n            i2 = j1\n            s1 = s1 + i1\n            s2 = s2 + i2\n            continue\n        if j1 == j2 and j2 == n1:\n            if i1 == i2 and s1 + l1 == s2 + l2:\n                continue\n            if l1 == n1 - 1:\n                heapq.heappush(res, (nums1[l1], nums2[i2]))\n            else:\n                heapq.heappush(res, (nums1[l1 + s1], nums2[i2]))\n            l1 += 1\n            l2 += 1\n            i1 = i2\n            i2 = j1\n            s1 = s1 + i1\n            s2 = s2 + i2\n            continue\n        if j1 < j2:\n            if j2 - j1 > k - i1 - s1:\n                l2 = j2\n                i2 = j2\n                s2 = 0\n                continue\n            l2 = j2\n            i2 = j2\n            s2 = 0\n            continue\n        if j1 > j2:\n            if i1 - j1 > k - l2 - s2:\n                l1 = j1\n                i1 = j1\n                s1 = 0\n                continue\n            l1 = j1\n            i1 = j1\n            s1 = 0\n            continue\n    return res\n",
        "num_ids": 891
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k == 0:\n        return []\n    if len(nums1) < k or len(nums2) < k:\n        return []\n",
        "num_ids": 38
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # edge case\n    if not nums1 or not nums2 or k>=min(len(nums1), len(nums2)):\n        return []\n    # heap + quickselect\n    heap = [(nums1[i]+nums2[i], i, i) for i in range(min(len(nums1), len(nums2))) if nums1[i]<nums2[i]]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap) for _ in range(k)]\n",
        "num_ids": 139
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    # code here\n    hash_map = {}\n    for num in nums1:\n        hash_map[num] = None\n    for num in nums2:\n        if num in hash_map:\n            pairs.append([num,hash_map[num]])\n",
        "num_ids": 73
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    h = []\n    count = 0\n    for i in range(k):\n        heapq.heappush(h, (nums1[i] + nums2[i], i, nums1[i], nums2[i]))\n    while(len(h) > 0):\n        _, idx1, a, b = heapq.heappop(h)\n        count += 1\n        if count == k:\n            break\n        if len(h) > 0:\n            if a > b:\n                heapq.heappush(h, (a + h[0][0], h[0][1], a, h[0][2]))\n            else:\n                heapq.heappush(h, (b + h[0][0], h[0][1], b, h[0][2]))\n    return count\n",
        "num_ids": 206
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # min heap = [1, 4]\n    # max heap = [2, 3]\n    # min heap = (1, 2)\n    # max heap = (3, 4)\n    if not nums1 or not nums2 or k < 0 or k > len(nums1) * len(nums2):\n        return None\n    heap = [(nums1[i], nums2[i]) for i in range(min(len(nums1), len(nums2)))]\n    heapq.heapify(heap)\n    res = []\n    while k:\n        k -= 1\n        smallest_two = heapq.heappop(heap)\n        res.append(smallest_two)\n    return res\n",
        "num_ids": 180
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    n = len(nums1)\n    m = len(nums2)\n    result = []\n    # nums1 = sorted(nums1)\n    # nums2 = sorted(nums2)\n    pq = []\n    for i in range(min(n, k)):\n        heapq.heappush(pq, (nums1[i] + nums2[0], i, 0))\n    result = []\n    for i in range(k):\n        if pq:\n            x = heapq.heappop(pq)\n            result.append([x[0], x[1], x[2]])\n    return result\n",
        "num_ids": 161
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) < k or len(nums2) < k:\n        return []\n    res = []\n    if len(nums1) > len(nums2):\n        nums1, nums2 = nums2, nums1\n    heap = [(nums1[0] + nums2[0], 0, 0)]\n    heapq.heapify(heap)\n    while heap and len(res) < k:\n        _, i1, i2 = heapq.heappop(heap)\n        res.append([nums1[i1], nums2[i2]])\n        if i1 + 1 < len(nums1):\n            heapq.heappush(heap, (nums1[i1 + 1] + nums2[i2], i1 + 1, i2))\n    return res\n",
        "num_ids": 211
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k==0 or nums1==None or nums2==None:\n        return 0\n    if len(nums1) == 0 and len(nums2) == 0:\n        return None\n    if len(nums1) < len(nums2):\n        nums1, nums2 = nums2, nums1\n    pq = []\n    for i in range(len(nums1)):\n        heapq.heappush(pq, (nums1[i] + nums2[0], nums1[i], nums2[0]))\n    res = []\n    for i in range(k):\n        heapq.heappop(pq)\n    while pq:\n        _, a, b = heapq.heappop(pq)\n        res.append((a, b))\n    return res\n",
        "num_ids": 208
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Time: O(n)\n    # Space: O(1)\n    # n = len(nums1)\n    # min_heap = []\n    # # Populate Min Heap\n    # for i in range(n):\n    #     heapq.heappush(min_heap, (nums1[i] + nums2[i], i))\n",
        "num_ids": 92
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Create a variable to store the min product in.\n    min_product = None\n",
        "num_ids": 22
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    output = []\n    for i in range(len(list1)):\n        min_product = min([x[0] * x[1] for x in list1[i]])\n        output.append(min_product)\n    return output\n",
        "num_ids": 60
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort(key=lambda x:x[1])\n    min_product = list1[0][1]*list1[0][0]\n    for i in range(1,len(list1)):\n        if list1[i][1] < min_product:\n            min_product = list1[i][1]*list1[i][0]\n    return min_product\n",
        "num_ids": 96
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    x = list1.copy()\n    if len(x)==0:\n        return 0\n    elif len(x)==1:\n        return x[0]\n    else:\n        x.sort()\n        return (x[0],x[-1])\n    ",
        "num_ids": 67
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1)==0:\n        return\n",
        "num_ids": 16
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    n = len(list1)\n    if n == 0:\n        raise ValueError(\"List is empty\")\n    if n == 1:\n        return list1[0]\n    min1 = list1[0]\n    for i in range(1, n):\n        if list1[i][0] < min1[0]:\n            min1 = list1[i]\n        elif list1[i][1] < min1[1]:\n            min1 = list1[i]\n        else:\n            continue\n    return min1\n",
        "num_ids": 129
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return sorted(list1, key = lambda x : x[0] * x[1])[0]\n",
        "num_ids": 27
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0]\n    for i in range(1,len(list1)):\n        temp = list1[i][0] * list1[i][1]\n        if temp < min_product:\n            min_product = temp\n    return min_product\n",
        "num_ids": 69
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1 = list1\n    min_val = list1[0][1]\n    for i in range(1,len(list1)):\n        if min_val > list1[i][1]:\n            min_val = list1[i][1]\n    return min_val\n",
        "num_ids": 70
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_pair = None\n    min_value = None\n    min_product = None\n    for i in list1:\n        tup = i\n        #print(\"TUPLE\",tup)\n        if min_pair == None:\n            min_pair = tup\n            min_value = tup[0]*tup[1]\n            min_product = tup\n        else:\n            #print(tup)\n            if tup[0] * tup[1] < min_value:\n                min_value = tup[0] * tup[1]\n                min_pair = tup\n                min_product = tup\n            elif tup[0] * tup[1] == min_value:\n                if min_pair[1] > tup[1]:\n                    min_pair = tup\n                    min_product = tup\n",
        "num_ids": 206
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    x = listval[0]\n    for i in range(len(listval)):\n        if x > listval[i]:\n            x = listval[i]\n    return x\n",
        "num_ids": 47
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    temp = 0\n    smallest = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < smallest:\n            smallest = listval[i]\n            temp = i\n    return temp\n    \n",
        "num_ids": 62
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_value:\n            min_value = listval[i]\n    return min_value\n",
        "num_ids": 58
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for i in range(1,len(listval)):\n        if min_value > listval[i]:\n            min_value = listval[i]\n",
        "num_ids": 51
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    listval.sort()\n    return listval[0]\n",
        "num_ids": 17
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval=listval[0]\n    for i in range(1,len(listval)):\n        if(listval[i]<minval):\n            minval=listval[i]\n    return(minval)\n",
        "num_ids": 57
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n",
        "num_ids": 10
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 1:\n        return listval[0]\n    min_val = min(listval)\n    return min_val\n",
        "num_ids": 38
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min=listval[0]\n    for i in range(0,len(listval)):\n        if min>listval[i]:\n            min=listval[i]\n    return min\n",
        "num_ids": 49
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for i in listval:\n        if i < min_value:\n            min_value = i\n    return min_value\n",
        "num_ids": 43
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return word.title()\n",
        "num_ids": 9
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(map(lambda x: x.capitalize(), word.split('_')))\n",
        "num_ids": 26
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # We create a regular expression called'snake_pattern' and we pass 'word' into it.\n    snake_pattern = re.compile('_([a-z])')\n    # We use the'search' function in're' to match the regular expression.\n    # It returns the first match of the regular expression.\n    # This match is stored in the variable called'match' and we use it to\n    # form a new string called 'camel'.\n    camel = snake_pattern.search(word).group(1)\n    # We create a new variable called'snake' and assign the first letter\n    # of 'word' to it.\n    snake = word[0]\n    # We use a for loop to iterate through the letters in 'word' and match it\n    # with the regular expression'snake_pattern'. If a match is found we\n    # add the letters to'snake' and we use the 'capitalize' function to capitalize\n    # the letters.\n    for letter in word:\n        if snake_pattern.search(letter):\n            snake += letter.lower()\n    # We capitalize the 'camel' string and we return the new string.\n    return camel.capitalize() + snake\n",
        "num_ids": 285
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not word:\n        return word\n    if len(word) == 1:\n        return word.upper()\n    return word[0].upper() + word[1:]\n",
        "num_ids": 43
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return \"\".join(i.capitalize() for i in word.split(\"_\"))\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub(r\"\\s+\", \"_\", word).lower()\ndef snake_to_pascal(word):\n    '''\n    Write a function to convert the given snake case string to pascal case string.\n    '''\n    return \"\".join([i.capitalize() for i in word.split(\"_\")])\ndef snake_to_lower(word):\n    '''\n    Write a function to convert the given snake case string to lower case string.\n    '''\n    return \"\".join(i.lower() for i in word.split(\"_\"))\ndef camel_to_lower(word):\n    '''\n    Write a function to convert the given camel case string to lower case string.\n    '''\n    return word.lower()\ndef pascal_to_snake(word):\n    '''\n    Write a function to convert the given pascal case string to snake case string.\n    '''\n    return \"\".join(i for i in word.lower() if not i.islower())\ndef pascal_to_camel(word):\n    '''\n    Write a function to convert the given pascal case string to camel case string.\n    '''\n    return \"\".join(i for i in word.upper() if not i.isupper())\ndef pascal_to_upper(word):\n    '''\n    Write a function to convert the given pascal case string to upper case string.\n    '''\n    return word.upper()\ndef pascal_to_lower(word):\n    '''\n    Write a function to convert the given pascal case string to lower case string.\n    '''\n    return word.lower()\ndef snake_to_upper(word):\n    '''\n    Write a function to convert the given snake case string to upper case string.\n    '''\n    return \"\".join([i.upper() for i in word.split(\"_\")])\ndef snake_to_lower(word):\n    '''\n    Write a function to convert the given snake case string to lower case string.\n    '''\n    return \"\".join([i.lower() for i in word.split(\"_\")])\ndef snake_to_upper(word):\n    '''\n    Write a function to convert the given snake case string to upper case string.\n    '''\n    return \"\".join([i.upper() for i in word.split(\"_\")])\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return \"\".join([i.capitalize() for i in word.split(\"_\")])\ndef camel_to_lower(word):\n    '''\n    Write a function to convert the given camel case string to lower case string.\n    '''\n    return word.lower()\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return \"\".join(i.capitalize() for i in word.split(\"_\"))\ndef snake_to_pascal(word):\n    '''\n    Write a function to convert the given snake case string to pascal case string.\n    '''\n    return \"\".join([i.capitalize() for i in word.split(\"_\")])\ndef pascal_to_snake(word):\n    '''\n    Write a function to convert the given pascal case string to snake case string.\n    '''\n    return \"\".join(i for i in word.lower() if not i.islower())\ndef pascal_to_camel(word):\n    '''\n    Write a function to convert the given pascal case string to camel case string.\n    '''\n    return \"\".join(i for i in word.upper() if not i.isupper())\ndef pascal_to_upper(word):\n    '''\n    Write a function to convert the given pascal case string to upper case string.\n    '''\n    return word.upper()\ndef pascal_to_lower(word):\n    '''\n    Write a function to convert the given pascal case string to lower case string.\n    '''\n    return word.lower()\ndef snake_to_upper(word):\n    '''\n    Write a function to convert the given snake case string to upper case string.\n    '''\n    return \"\".join([i.upper() for i in word.split(\"_\")])\ndef snake_to_lower(word):\n    '''\n    Write a function to convert the given snake case string to lower case string.\n    '''\n    return \"\".join([i.lower() for i in word.split(\"_\")])\ndef snake_to_upper(word):\n    '''\n    Write a function to convert the given snake case string to upper case string.\n    '''\n    return \"\".join([i.upper() for i in word.split(\"_\")])\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return \"\".join(i.capitalize() for i in word.split(\"_\"))\ndef camel_to_lower(word):\n    '''\n    Write a function to convert the given camel case string to lower case string.\n    '''\n    return word.lower()\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return \"\".join(i.capitalize() for i in word.split(\"_\"))\ndef snake_to_pascal(word):\n    '''\n    Write a function to convert the given snake case string to pascal case string.\n    '''\n    return \"\".join([i.capitalize() for i in word.split(\"_\")])\ndef pascal_to_snake(word):\n    '''\n    Write a function to convert the given pascal case string to snake case string.\n    '''\n    return \"\".join(i for i in word.lower() if not i.islower())\ndef pascal_to_camel(word):\n    '''\n    Write a function to convert the given pascal case string to camel case string.\n    '''\n    return \"\".join(i for i in word.upper() if not i.isupper())\ndef pascal_to_upper(word):\n    '''\n    Write a function to convert the given pascal case string to upper case string.\n    '''\n    return word.upper()\ndef pascal_to_lower(word):\n    '''\n    Write a function to convert the given pascal case string to lower case string.\n    '''\n    return word.lower()\ndef snake_to_upper(word):\n    '''\n    Write a function to convert the given snake case string to upper case string.\n    '''\n    return \"\".join([i.upper() for i in word.split(\"_\")])\ndef snake_to_lower(word):\n    '''\n    Write a function to convert the given snake case string to lower case string.\n    '''\n    return \"\".join([i.lower() for i in word.split(\"_\")])\ndef snake_to_upper(word):\n    '''\n    Write a function to convert the given snake case string to upper case string.\n    '''\n    return \"\".join([i.upper() for i in word.split(\"_\")])\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return \"\".join(i.capitalize() for i in word.split(\"_\"))\ndef camel_to_lower(word):\n    '''\n    Write a function to convert the given camel case string to lower case string.\n    '''\n    return word.lower()\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return \"\".join(i.capitalize() for i in word.split(\"_\"))\ndef snake_to_pascal(word):\n    '''\n    Write a function to convert the given snake case string to pascal case string.\n    '''\n    return \"\".join([i.capitalize() for i in word.split(\"_\")])\ndef pasca",
        "num_ids": 27
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if '_' in word:\n        words = word.split('_')\n        print(words)\n        return words[0] + ''.join(x.capitalize() for x in words[1:])\n    return word.title()\n    \n    \ndef txt_to_dict(filename, delimiter=','):\n    '''\n    Write a function to read a text file and return a dictionary.\n    The text file contains data in the following format:\n    key1,key2,key3\n    value1,value2,value3\n    value4,value5,value6\n    \n    Convert the data into dictionary.\n    '''\n    #code\n    import re\n    text_file = open(filename, 'r')\n    lines = text_file.readlines()\n    for line in lines:\n        line = re.sub('\\n', '', line)\n        list1 = line.split(delimiter)\n        kv = {}\n        for i in list1:\n            key, value = i.split(':')\n            kv[key] = value\n    return kv\n    \n    \ndef dict_to_txt(kv, filename, delimiter=','):\n    '''\n    Write a function to write a dictionary into a text file.\n    '''\n    #code\n    text_file = open(filename, 'w')\n    for key, value in kv.items():\n        text_file.write(key + delimiter + value + '\\n')\n    text_file.close()\n    \n    \ndef remove_empty_values(d):\n    '''\n    Write a function to remove empty values from a dictionary.\n    '''\n    #code\n    new_dict = {}\n    for key, value in d.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict\n    \n    \ndef dict_to_txt_v2(kv, filename, delimiter=','):\n    '''\n    Write a function to write a dictionary into a text file.\n    '''\n    #code\n    text_file = open(filename, 'w')\n    for key, value in kv.items():\n        text_file.write(key + delimiter + value + '\\n')\n    text_file.close()\n    \n    \ndef dict_to_txt_v3(kv, filename, delimiter=','):\n    '''\n    Write a function to write a dictionary into a text file.\n    '''\n    #code\n    f = open(filename, 'w')\n    for key, value in kv.items():\n        f.write(key + delimiter + str(value) + '\\n')\n    f.close()\n    \n    \ndef dict_to_txt_v4(kv, filename, delimiter=','):\n    '''\n    Write a function to write a dictionary into a text file.\n    '''\n    #code\n    text_file = open(filename, 'w')\n    for key, value in kv.items():\n        text_file.write(key + delimiter + str(value) + '\\n')\n    text_file.close()\n    \n    \ndef dict_to_txt_v5(kv, filename, delimiter=','):\n    '''\n    Write a function to write a dictionary into a text file.\n    '''\n    #code\n    with open(filename, 'w') as f:\n        for key, value in kv.items():\n            f.write(f'{key}{delimiter}{value}\\n')\n    \n    \ndef dict_to_txt_v6(kv, filename, delimiter=','):\n    '''\n    Write a function to write a dictionary into a text file.\n    '''\n    #code\n    with open(filename, 'w') as f:\n        for key, value in kv.items():\n            f.write(f'{key}{delimiter}{value}\\n')\n    \n    \ndef dict_to_txt_v7(kv, filename, delimiter=','):\n    '''\n    Write a function to write a dictionary into a text file.\n    '''\n    #code\n    with open(filename, 'w') as f:\n        for key, value in kv.items():\n            f.write(f'{key}={value}')\n            \n            \ndef dict_to_txt_v8(kv, filename, delimiter=','):\n    '''\n    Write a function to write a dictionary into a text file.\n    '''\n    #code\n    with open(filename, 'w') as f:\n        for key, value in kv.items():\n            f.write(f'{key}={value}\\n')\n            \n    \ndef dict_to_txt_v9(kv, filename, delimiter=','):\n    '''\n    Write a function to write a dictionary into a text file.\n    '''\n    #code\n    with open(filename, 'w') as f:\n        for key, value in kv.items():\n            f.write(f'{key}={value}\\n')\n    \n    \ndef txt_to_dict_v1(filename, delimiter=','):\n    '''\n    Write a function to read a text file and return a dictionary.\n    The text file contains data in the following format:\n    key1,key2,key3\n    value1,value2,value3\n    value4,value5,value6\n    \n    Convert the data into dictionary.\n    '''\n    #code\n    import re\n    text_file = open(filename, 'r')\n    lines = text_file.readlines()\n    for line in lines:\n        line = re.sub('\\n', '', line)\n        list1 = line.split(delimiter)\n        kv = {}\n        for i in list1:\n            key, value = i.split(':')\n            kv[key] = value\n    return kv\n    \n    \ndef dict_to_txt_v2(kv, filename, delimiter=','):\n    '''\n    Write a function to write a dictionary into a text file.\n    '''\n    #code\n    text_file = open(filename, 'w')\n    for key, value in kv.items():\n        text_file.write(key + delimiter + value + '\\n')\n    text_file.close()\n    \n    \ndef dict_to_txt_v3(kv, filename, delimiter=','):\n    '''\n    Write a function to write a dictionary into a text file.\n    '''\n    #code\n    text_file = open(filename, 'w')\n    for key, value in kv.items():\n        text_file.write(key + delimiter + str(value) + '\\n')\n    text_file.close()\n    \n    \ndef dict_to_txt_v4(kv, filename, delimiter=','):\n    '''\n    Write a function to write a dictionary into a text file.\n    '''\n    #code\n    text_file = open(filename, 'w')\n    for key, value in kv.items():\n        text_file.write(key + delimiter + str(value) + '\\n')\n    text_file.close()\n    \n    \ndef dict_to_txt_v5(kv, filename, delimiter=','):\n    '''\n    Write a function to write a dictionary into a text file.\n    '''\n    #code\n    with open(filename, 'w') as f:\n        for key, value in kv.items():\n            f.write(f'{key}{delimiter}{value}\\n')\n    \n    \ndef dict_to_txt_v6(kv, filename, delimiter=','):\n    '''\n    Write a function to write a dictionary into a text file.\n    '''\n    #code\n    with open(filename, 'w') as f:\n        for key, value in kv.items():\n            f.write(f'{key}{delimiter}{value}\\n')\n    \n    \ndef dict_to_txt_v7(kv, filename, delimiter=','):\n    '''\n    Write a function to write a dictionary into a text file.\n    '''\n    #code\n    with open(filename, 'w') as f:\n        for key, value in kv.items():\n            f.write(f'",
        "num_ids": 38
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub(r\"(_|-)+\", \"-\", word)\n    word = word[0].lower() + word[1:]\n    return word\n",
        "num_ids": 40
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word_list = re.findall('([a-z]+)', word)\n    words = list(map(str.title, word_list))\n    return \"\".join(words)\n",
        "num_ids": 47
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return word.title()\n",
        "num_ids": 9
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # return re.sub('_', '-', word).title()\n    # return word[0].upper()+word[1:]\n    # return word.title()\n",
        "num_ids": 42
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for n in l:\n        if n % 2!= 0:\n            odd_list.append(n)\n    l.clear()\n    l.extend(odd_list)\n    print(\"list after removing odds: \",l)\n",
        "num_ids": 65
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.pop(0)\n    for i in range(len(l)):\n        if l[i]%2==0:\n            l.pop(i)\n    return l\n",
        "num_ids": 46
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd = []\n    for i in l:\n        if i%2 == 0:\n            odd.append(i)\n    return odd\n",
        "num_ids": 35
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    while True:\n        for i in range(len(l)-1):\n            if l[i]%2!=0:\n                l.pop(i)\n            else:\n                break\n        else:\n            break\n    return l\nprint(remove_odd([1,3,2,4,5,6,7,8,9,10]))\n",
        "num_ids": 87
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return(l[0::2])\n    ",
        "num_ids": 13
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd = []\n    for i in range(len(l)):\n        if i%2!= 0:\n            odd.append(l[i])\n    return odd\n    \n",
        "num_ids": 45
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    i=0\n    while i < len(l):\n        if l[i]%2!= 0:\n            del l[i]\n        else:\n            i+=1\n    print(l)\n",
        "num_ids": 51
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd = []\n    for i in l:\n        if i%2 == 0:\n            odd.append(i)\n    return odd\n",
        "num_ids": 35
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odds = []\n    for i in range(len(l)):\n        if l[i]%2 == 0:\n            odds.append(l[i])\n    return odds\n",
        "num_ids": 47
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for x in l:\n        if x % 2 == 0:\n            odd_list.append(x)\n    return odd_list\n",
        "num_ids": 41
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n",
        "num_ids": 12
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        return \"None\"\n    else:\n        return list1[n-1]\n",
        "num_ids": 32
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    l=[]\n    for t in list1:\n        l.append(t[0])\n    return l[n-1]\n",
        "num_ids": 34
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    nth_element = list1[n]\n    return nth_element\n",
        "num_ids": 21
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n",
        "num_ids": 12
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n - 1]\n",
        "num_ids": 12
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    \n    # Time Complexity: O(n)\n    # Space Complexity: O(n)\n    \n    # If we just access the list directly we would have to iterate through the list n times\n    # and then access each item individually. This would be O(n)\n    \n    # To avoid this, we can simply traverse the list in a loop\n    \n    # First, we need to initialize a counter variable and initialy set it to 0.\n    # We also need to make sure that the counter variable is smaller than the index of the given list\n    # i.e. if we have n=2, then we need to initialize our counter variable to 1, and we need to set our\n    # index variable to n-1.\n    \n    # Next, we need to initialize a temp variable that we would like to use to store the value\n    # that we want to find and then we need to initialize the value of our counter variable\n    # i.e. if we have n=2, then we would like to store the value 1 and we would need to initialize our\n    # counter variable to 1.\n    \n    # Finally, we need to initialize the value of our index variable i.e. if we have n=2,\n    # then we would like to initialize our index variable to n-1.\n    \n    # This loop will execute n times (1 to n-1)\n    # Once the loop completes, we will be at the desired index.\n    \n    # Now, we need to test if the index variable is less than the length of the list\n    # or if the index variable is greater than or equal to the length of the list, then we\n    # can return the value of the element at index.\n    \n    # We can achieve this by using a while loop with the same formula\n    \n    # Initialize our counter variable\n    i = 0\n    # Initialize our temp variable\n    temp = 0\n    # Initialize the index variable\n    j = len(list1)-1\n    \n    # While the index variable is less than or equal to the length of the list\n    while j >= 0:\n        # increment the counter variable\n        i += 1\n        # If the counter variable is less than the index variable, then we can return the value of the list\n        # at the index\n        if i < n:\n            # We will store the value of the list at the index into our temp variable\n            temp = list1[i]\n            # We will break the while loop, since we found the value we want\n            break\n        # Otherwise, we will increment the index variable\n        j -= 1\n    # We will return the value of the list at the index\n    return temp\n    \n    # Complexity:\n    # Time: O(n)\n    # Space: O(n)\n    \n    \ndef sort_by_first_last_element(list1):\n    '''\n    Write a function to sort a given list such that the first element should appear \n    at the front of the list, the last element should appear at the end of the list \n    and the middle elements should be in the middle.\n    '''\n    \n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    \n    # First, we will create a helper function to get the first element of a list\n    def first_element(list1):\n        '''\n        Write a function to get the first element of a list.\n        '''\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # To get the first element we will just return the first element\n        return list1[0]\n    \n    # Now, we will create a helper function to get the last element of a list\n    def last_element(list1):\n        '''\n        Write a function to get the last element of a list.\n        '''\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # To get the last element we will just return the last element\n        return list1[len(list1)-1]\n    \n    # Now, we will create a helper function to get the middle element of a list\n    def middle_element(list1):\n        '''\n        Write a function to get the middle element of a list.\n        '''\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # To get the middle element we will take the middle element and return that\n        return list1[(len(list1)//2)]\n    \n    # Now, we will sort the list in the ascending order, the first element should be at the front,\n    # the last element should be at the end, and the middle elements should be in the middle.\n    \n    # Time Complexity: O(n*log(n))\n    # Space Complexity: O(1)\n    \n    # We will sort the list in the ascending order\n    list1.sort()\n    # Now, we will use the first_element and last_element to get the first and last element,\n    # and we will use the middle_element to get the middle element.\n    \n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    \n    # We will swap the first element with the last element and the last element with the first element.\n    list1[0], list1[len(list1)-1] = list1[len(list1)-1], list1[0]\n    # We will swap the first element with the middle element and the middle element with the last element.\n    list1[0], list1[len(list1)//2] = list1[len(list1)//2], list1[0]\n    # Now, we will swap the last element with the middle element and the middle element with the first element.\n    list1[len(list1)-1], list1[len(list1)//2] = list1[len(list1)//2], list1[len(list1)-1]\n    \n    # Now, we will return the sorted list\n    return list1\n    \n    # Complexity:\n    # Time: O(n*log(n))\n    # Space: O(1)\n    \n    \ndef reverse_string(input1):\n    '''\n    Write a function that takes a string as input and returns the string in reversed order.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    \n    # To reverse a string, we need to first get the length of the string\n    # Then we will iterate through the string from the last character to the first character\n    # We can accomplish this using the while loop\n    \n    # The loop will execute n times (length of string)\n    i = len(input1)-1\n    \n    # We will keep track of the reversed string\n    output = ''\n    \n    # We will use a while loop and increment the counter variable i\n    # Once we reach the end of the string, we will set our reversed string to be the reversed string\n    while i >= 0:\n        # We will add the value of the i variable to our output\n        output += input1[i]\n        # We will decrement the i variable by one to point to the next value\n        i -= 1\n    \n    # Now, we will return the reversed string\n    return output\n    \n    # Complexity:\n    # Time: O(n)\n    # Space: O(1)\n    \n    \ndef find_max_and_min_number(input2):\n    '''\n    Write a function that takes a list as input and returns two numbers.\n    The first number should be the max of the list and the second number should be the min of the list.\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    \n    # To find the max and min of a list, we will need to initialize our variable and set it to the first element in the list\n    # Then we will compare our variable to every element in the list\n    # Once we have a comparison of the variable with every element in the list, we will return the max and min\n    \n    # We will initialize our variable\n    max_num = input2[0]\n    min_num = input2[0]\n    \n    # We will initialize the variable\n    for num in input2:\n        # We will compare the variable and the num\n        if num > max_num:\n            # If the variable is greater than the max, then we will set it to the variable\n            max_num = num\n        if num < min_num:\n            # If the variable i",
        "num_ids": 208
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        list2.append(list1[i][n])\n    return list2\n",
        "num_ids": 40
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if not list1:\n        return\n    elif len(list1) == 1:\n        return list1[0]\n    else:\n        return extract_nth_element(list1[1:], n-1)\n",
        "num_ids": 56
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                print(\"The values are {} and {}\".format(i,j))\n    \n",
        "num_ids": 44
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    count = 0\n    for i in list1:\n        if i in list2:\n            count += 1\n    if count > 0:\n        print('\\nYes, there exists a value in list1 that exists in list2')\n    else:\n        print('\\nNo, there does not exist a value in list1 that exists in list2')\n",
        "num_ids": 83
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)>len(list2):\n        return False\n    if len(list2)>len(list1):\n        return False\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False\n",
        "num_ids": 71
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    #code here\n    list2.sort()\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    i=0\n    k=0\n    while i < len(list1) and k < len(list2):\n        if list1[i] == list2[k]:\n            return True\n        i=i+1\n        k=k+1\n    return False\n",
        "num_ids": 66
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i==j:\n                print(i,j)\n                return True\n            else:\n                continue\n    return False\n",
        "num_ids": 48
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for num in list2:\n        for num2 in list1:\n            if num == num2:\n                return True\n    return False\n",
        "num_ids": 35
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1) < len(list2):\n        smaller = list1\n        bigger = list2\n    else:\n        smaller = list2\n        bigger = list1\n    for i in range(0,len(bigger)):\n        for j in range(0,len(smaller)):\n            if bigger[i] == smaller[j]:\n                return True\n    return False\n",
        "num_ids": 98
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n    #start writing your code here\n    #return result\n",
        "num_ids": 46
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product_pair = []\n    max_product = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]*arr[j] > max_product:\n                max_product = arr[i]*arr[j]\n                max_product_pair = [arr[i],arr[j]]\n    return max_product_pair\n",
        "num_ids": 105
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    if n<2:\n        return -1\n    l = 0\n    r = n-1\n    while l<r:\n        if arr[l]>0 and arr[r]>0:\n            if arr[l]*arr[r] > arr[r]*arr[l]:\n                return arr[l]*arr[r]\n            else:\n                return arr[r]*arr[l]\n        elif arr[l]>0:\n            r = r-1\n        elif arr[r]>0:\n            l = l+1\n        else:\n            return -1\n    return -1\n    \n    '''\n    Find the minimum number of coins required to form a amount.\n    '''\n    def minCoins(self, coins, amount):\n        n = len(coins)\n        if n == 0:\n            return -1\n        dp = [amount+1]*(amount+1)\n        dp[0] = 0\n        for i in range(1, amount+1):\n            for j in range(n):\n                if i-coins[j] >= 0:\n                    dp[i] = min(dp[i], dp[i-coins[j]]+1)\n        return dp[amount] if dp[amount] < amount+1 else -1\n",
        "num_ids": 138
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_value = -1\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_value:\n                max_value = arr[i] * arr[j]\n    return max_value\n",
        "num_ids": 76
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_1 = arr[0]\n    max_2 = arr[1]\n    for i in range(2, len(arr)):\n        if arr[i] >= max_1:\n            max_2 = max_1\n            max_1 = arr[i]\n        elif arr[i] > max_2:\n            max_2 = arr[i]\n    print('max_1 is:', max_1,'max_2 is:', max_2)\n    return max_1, max_2\n",
        "num_ids": 124
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n    max_num = arr[0]\n    max_product = arr[0] * arr[1]\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                max_num = arr[i]\n                max_product_num = arr[j]\n    return max_num, max_product_num\n",
        "num_ids": 135
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    product_a = 1\n    product_b = 1\n    max_product = 1\n    for i in arr:\n        product_a = product_a * i\n        product_b = product_b * i\n        max_product = max(max_product, product_a, product_b)\n",
        "num_ids": 72
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    index = -1\n    max_product = -1\n    for i in range(len(arr)-1):\n        if(arr[i] * arr[i+1] > max_product):\n            max_product = arr[i] * arr[i+1]\n            index = i \n    return arr[index] * arr[index+1]\n    \n    \narr = [3,5,10,-9,5,4,7]\nresult = max_Product(arr)\nprint(\"Max product is\", result)",
        "num_ids": 131
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # keep track of largest product seen so far\n    maximum = 0\n    \n    # loop through array\n    for num in arr:\n        # keep track of smallest product seen so far\n        # if num is negative, then min product = 0\n        minimum = num if num >= 0 else 0\n        \n        # multiply current product and min product\n        # store the product in a variable called product\n        product = num * minimum\n        \n        # if product is greater than max product, update max product\n        maximum = max(maximum, product)\n        \n    # return max product\n    return maximum\n    \ndef max_Product_no_neg(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # keep track of largest product seen so far\n    maximum = 0\n    \n    # loop through array\n    for num in arr:\n        # keep track of smallest product seen so far\n        # if num is negative, then min product = 0\n        # multiply current product and min product\n        # store the product in a variable called product\n        product = num if num >= 0 else 0\n        \n        # if product is greater than max product, update max product\n        maximum = max(maximum, product)\n        \n    # return max product\n    return maximum\n    \ndef max_Product_slow(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # keep track of largest product seen so far\n    maximum = 0\n    \n    # loop through array\n    for num in arr:\n        # keep track of smallest product seen so far\n        # if num is negative, then min product = 0\n        if num >= 0:\n            product = num\n        else:\n            product = 0\n        \n        # multiply current product and min product\n        # store the product in a variable called product\n        \n        # if product is greater than max product, update max product\n        maximum = max(maximum, product)\n        \n    # return max product\n    return maximum\n    \ndef max_Product_slow_better(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # keep track of largest product seen so far\n    maximum = 0\n    \n    # loop through array\n    for num in arr:\n        # keep track of smallest product seen so far\n        # if num is negative, then min product = 0\n        if num >= 0:\n            product = num\n        else:\n            product = 0\n        \n        # multiply current product and min product\n        # store the product in a variable called product\n        \n        # if product is greater than max product, update max product\n        maximum = max(maximum, product)\n        \n    # return max product\n    return maximum\n",
        "num_ids": 138
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    m=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if(arr[i]*arr[j]>m):\n                m=arr[i]*arr[j]\n                i_val=i\n                j_val=j\n    print(arr[i_val],arr[j_val])\n",
        "num_ids": 94
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_p = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if(arr[i]*arr[j]>max_p):\n                max_p = arr[i]*arr[j]\n    print(max_p)\n",
        "num_ids": 80
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Common_Element = []\n    First_Element = []\n    for i in Input:\n        Common_Element.append(i[0])\n        First_Element.append(i[1])\n    print(Common_Element)\n    print(First_Element)\n    Common_Element = set(Common_Element)\n    First_Element = set(First_Element)\n    Common = Common_Element.intersection(First_Element)\n    print(Common)\n    return(len(Common))\n",
        "num_ids": 116
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input = sorted(Input, key = lambda x: x[0])\n    Output = []\n    for i in range(len(Input)-1):\n        if Input[i][0] == Input[i+1][0]:\n            Output.append(Input[i])\n    return Output\n",
        "num_ids": 69
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    tuples = Input\n    result = []\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            if tuples[i][0] == tuples[j][0]:\n                result.append(tuples[i])\n    return result\n",
        "num_ids": 76
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return\n    # Your Code\n    ",
        "num_ids": 11
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = {}\n    for i in range(len(Input)):\n        Output[Input[i][0]] = Input[i][1]\n    return Output\n",
        "num_ids": 40
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if Input[i][0] == Input[j][0]:\n                count+=1\n                Input.remove(Input[j])\n                break\n    return count\n",
        "num_ids": 73
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    '''\n    if __name__ == \"__main__\":\n        a = (1,2,3,4,5)\n        b = (3,4,5,6,7)\n        c = (3,4,5,6,7)\n        print(group_tuples(a))\n        print(group_tuples(b))\n        print(group_tuples(c))\n    '''\n    '''\n    input : a = (1,2,3,4,5)\n            b = (3,4,5,6,7)\n            c = (3,4,5,6,7)\n    output : (3,4,5,6)\n    '''\n    '''\n    input : a = (1,2,3,4,5)\n            b = (3,4,5,6,7)\n            c = (3,4,5,6,7)\n    output : (3,4,5)\n    '''\n    '''\n    input : a = (1,2,3,4,5)\n            b = (3,4,5,6,7)\n            c = (3,4,5,6,7)\n    output : (3,4)\n    '''\n    '''\n    input : a = (1,2,3,4,5)\n            b = (3,4,5,6,7)\n            c = (3,4,5,6,7)\n    output : (3)\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    input_list = []\n    input_list.append(Input)\n    input_list.sort(key = lambda x : x[0])\n    group_dict = {}\n    for i in range(0, len(input_list)-1):\n        group_dict[input_list[i][0]] = input_list[i+1][0]\n    return group_dict\n",
        "num_ids": 91
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    lst = []\n    for i in range(len(Input)):\n        lst.append(Input[i][0])\n    print(set(lst))\n    return set(lst)\n",
        "num_ids": 50
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    input_list = []\n    for i in Input:\n        if i not in input_list:\n            input_list.append(i)\n    return input_list\n",
        "num_ids": 42
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    Max = 0\n    for i in range(len(lst)):\n        if lst[i] > Max:\n            Max = lst[i]\n    for i in range(len(lst)):\n        if lst[i] == Max:\n            return i\n",
        "num_ids": 68
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst)==0:\n        return None\n    for i in range(len(lst)):\n        if len(lst[i])>len(lst[i+1]):\n            return lst[i]\n    return lst[-1]\n    \n        \ndef Find_Min(lst):\n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    if len(lst)==0:\n        return None\n    for i in range(len(lst)):\n        if len(lst[i])<=len(lst[i+1]):\n            return lst[i]\n    return lst[-1]\n    \n        \ndef max_length(lst):\n    '''\n    Write a python function to find the maximum length element of a list.\n    '''\n    if len(lst)==0:\n        return None\n    max_len=len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i])>max_len:\n            max_len=len(lst[i])\n    return max_len\n    \ndef min_length(lst):\n    '''\n    Write a python function to find the minimum length element of a list.\n    '''\n    if len(lst)==0:\n        return None\n    min_len=len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i])<=min_len:\n            min_len=len(lst[i])\n    return min_len\n    \ndef max_len_of_substring(lst):\n    '''\n    Write a python function to find the maximum length of substring in a given list.\n    '''\n    if len(lst)==0:\n        return None\n    max_len=0\n    start_idx=0\n    for i in range(len(lst)):\n        if lst[i]=='a':\n            max_len=max(max_len,len(lst[start_idx:i]))\n        else:\n            start_idx=i+1\n    return max_len\n    \n    \ndef min_len_of_substring(lst):\n    '''\n    Write a python function to find the minimum length of substring in a given list.\n    '''\n    if len(lst)==0:\n        return None\n    min_len=len(lst[0])\n    start_idx=0\n    for i in range(len(lst)):\n        if lst[i]=='a':\n            min_len=min(min_len,len(lst[start_idx:i]))\n        else:\n            start_idx=i+1\n    return min_len\n    \ndef find_occurence(lst,elem):\n    '''\n    Write a python function to find the position of first occurence of an element in a list.\n    '''\n    if len(lst)==0:\n        return -1\n    pos=0\n    for i in range(len(lst)):\n        if lst[i]==elem:\n            return pos\n        pos=i+1\n    return -1\n",
        "num_ids": 64
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    m=lst[0]\n    for i in lst:\n        if len(i)>len(m):\n            m=i\n    return m\n        \ndef main():\n    '''\n    You can use main() to test your implementation\n    '''\n    l = [\"hi\",\"hello\",\"how\",\"are\",\"you\"]\n    print(\"Original list:\", l)\n    x = Find_Max(l)\n    print(\"Maximum element of list:\", x)\n",
        "num_ids": 49
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maxi = 0\n    for i in range(len(lst)): \n        if len(lst[i]) > maxi: \n            maxi = len(lst[i])\n            maxi_element = lst[i]\n    return maxi_element\n",
        "num_ids": 68
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = max(lst,key=len)\n    return max_len\ndef Sort_List(lst):\n    '''\n    Write a python function to sort a given list.\n    '''\n    lst.sort()\n    return lst\n",
        "num_ids": 14
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maxi = lst[0]\n    for i in range(len(lst)):\n        if(len(lst[i]) > len(maxi)):\n            maxi = lst[i]\n    return maxi\n",
        "num_ids": 58
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maxlen = len(max(lst, key=len))\n    max_len = 0\n    for x in lst:\n        if len(x) == maxlen:\n            max_len = x\n    return max_len\n    \n    \ndef Find_Min(lst):\n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    minlen = len(min(lst, key=len))\n    min_len = 0\n    for x in lst:\n        if len(x) == minlen:\n            min_len = x\n    return min_len\n    \ndef Extract_All(s, lst):\n    '''\n    Write a python function to extract all the words from a string separated by space.\n    '''\n    a = s.split()\n    res = []\n    for x in a:\n        res.append(x)\n    return res\n    \ndef Find_Three_Smallest(lst):\n    '''\n    Write a python function to find the three smallest numbers in a list.\n    '''\n    lst.sort()\n    return lst[0:3]\n    \ndef Find_Most_Occuring(lst, n):\n    '''\n    Write a python function to find the most occurring element in a list and its frequency.\n    '''\n    count = 1\n    max_count = 0\n    max_element = 0\n    for x in lst:\n        if x not in lst[0:count]:\n            count = count + 1\n        else:\n            if count > max_count:\n                max_count = count\n                max_element = x\n            count = 1\n    if max_count!= 0:\n        return max_element, max_count\n    return \"No occuring element\"\n    \ndef Is_Palindrome(s):\n    '''\n    Write a python function to check if a given string is palindrome or not.\n    '''\n    s = s.lower()\n    s_list = list(s)\n    lst = []\n    for i in s_list:\n        lst.append(i)\n    return lst == lst[::-1]\n    \ndef Smallest_Difference(lst1, lst2):\n    '''\n    Write a python function to find the smallest difference between two lists.\n    '''\n    max_diff = 0\n    for x in range(len(lst1)):\n        for y in range(len(lst2)):\n            diff = abs(lst1[x] - lst2[y])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n    \ndef Palindrome(s):\n    '''\n    Write a python function to check if a given string is palindrome or not.\n    '''\n    s = s.lower()\n    s_list = list(s)\n    for i in s_list:\n        if i in ['a', 'e', 'i', 'o', 'u']:\n            s_list.remove(i)\n    if s_list == s_list[::-1]:\n        return True\n    return False\n    \ndef Has_Double(s):\n    '''\n    Write a python function to check if a given string has any double characters.\n    '''\n    flag = False\n    for x in range(0, len(s)):\n        if s[x] == s[x-1]:\n            flag = True\n            break\n    return flag\n    \ndef Count_Digits(s):\n    '''\n    Write a python function to count the number of digits in a string.\n    '''\n    x = 0\n    for y in s:\n        if y.isdigit():\n            x = x + 1\n    return x\n    \ndef Reversed(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \ndef List_Union(lst1, lst2):\n    '''\n    Write a python function to find the union of two lists.\n    '''\n    lst = []\n    for x in lst1:\n        if x not in lst:\n            lst.append(x)\n    for x in lst2:\n        if x not in lst:\n            lst.append(x)\n    return lst\n    \ndef No_Missing(lst):\n    '''\n    Write a python function to check if all the elements in a list are present in a given range.\n    '''\n    lst = set(lst)\n    if 0 in lst:\n        return False\n    if 1 in lst:\n        return True\n    if 2 in lst:\n        return True\n    if 3 in lst:\n        return True\n    if 4 in lst:\n        return True\n    if 5 in lst:\n        return True\n    if 6 in lst:\n        return True\n    if 7 in lst:\n        return True\n    if 8 in lst:\n        return True\n    if 9 in lst:\n        return True\n    return False\n    \ndef Find_Median(lst):\n    '''\n    Write a python function to find the median from a list of integers.\n    '''\n    sorted_lst = sorted(lst)\n    lst = len(sorted_lst)\n    if lst % 2 == 0:\n        mid1 = int(lst/2)\n        mid2 = int((lst/2) - 1)\n        median = (sorted_lst[mid1] + sorted_lst[mid2])/2\n    else:\n        mid = int(lst/2)\n        median = sorted_lst[mid]\n    return median\n    \ndef Remove_Duplicates(lst):\n    '''\n    Write a python function to remove duplicates from a given list.\n    '''\n    s = set(lst)\n    lst = list(s)\n    return lst\n    \ndef Count_Primes(n):\n    '''\n    Write a python function to count the number of prime numbers in a range.\n    '''\n    count = 0\n    lst = []\n    for x in range(2, n):\n        if x not in lst:\n            lst.append(x)\n            count = count + 1\n    return count\n    \ndef First_Even(lst):\n    '''\n    Write a python function to find the first even number in a given list.\n    '''\n    lst = set(lst)\n    lst = list(lst)\n    for x in range(len(lst)):\n        if x % 2 == 0:\n            return lst[x]\n    return -1\n    \ndef My_Function(lst, key):\n    '''\n    Write a python function to find all occurrences of a given key in a list.\n    '''\n    lst = set(lst)\n    lst = list(lst)\n    lst_new = []\n    for x in lst:\n        if x == key:\n            lst_new.append(x)\n    return lst_new\n    \ndef Last_Unique(lst):\n    '''\n    Write a python function to find the last unique character of a given string.\n    '''\n    lst = set(lst)\n    lst = list(lst)\n    return lst[-1]\n    \ndef Reversed(lst):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    lst = list(lst)\n    lst.reverse()\n    return lst\n    \ndef Minimum_Difference(lst):\n    '''\n    Write a python function to find the minimum difference between the two elements in a list.\n    '''\n    diff = float('inf')\n    lst = set(lst)\n    for x in lst:\n        for y in lst:\n            if abs(x - y) < diff and x!= y:\n                diff = abs(x - y)\n    return diff\n    \ndef Check_Composite(n):\n    '''\n    Write a python function to check if a given number is composite or not.\n    '''\n    if n == 1:\n        return False\n    for x in range(2, n):\n        if n % x == 0:\n            return False\n    return True\n    \ndef Multiply",
        "num_ids": 47
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=0\n    for i in lst:\n        if len(i) > max:\n            max=len(i)\n    for i in lst:\n        if len(i) == max:\n            print(i,end=\" \")\n    \n    ",
        "num_ids": 64
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len=0\n    max_list=[]\n    for elem in lst:\n        if len(elem)>max_len:\n            max_len=len(elem)\n            max_list.clear()\n            max_list.append(elem)\n        elif len(elem)==max_len:\n            max_list.append(elem)\n    return max_list[0]\n",
        "num_ids": 102
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_num = 0\n    for num in lst:\n        if len(num) > max_len:\n            max_len = len(num)\n            max_num = num\n    return max_num\n",
        "num_ids": 59
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    result = round(sum(list1) / len(list1))\n    print(result)\n",
        "num_ids": 25
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = []\n    for i in list1:\n        rounded_list.append(round(i))\n    return sum(rounded_list) * len(rounded_list)\n",
        "num_ids": 45
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n",
        "num_ids": 30
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print(round(sum(list1) * len(list1)))\n",
        "num_ids": 19
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # your code here\n    # return round_and_sum1(list1)\n    # for i in range(len(list1)):\n    #     list1[i] = round_and_sum1(list1)\n    return round(sum(list1)*len(list1))\n",
        "num_ids": 71
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total = total + num\n    return round(total * len(list1))\n",
        "num_ids": 34
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = []\n    for number in list1:\n        rounded_number = round(number)\n        rounded_list.append(rounded_number)\n    print(sum(rounded_list) * len(list1))\n",
        "num_ids": 55
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = list(map(lambda x: round(x, 2), list1))\n    print(round_and_sum.__name__, f\"Sum of list: {sum(list1)} * Length of list: {len(list1)}\")\n",
        "num_ids": 62
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_of_numbers = 0\n    for i in list1:\n        sum_of_numbers += i\n    round_numbers = round_and_sum_helper(list1)\n    return sum_of_numbers*len(list1) + sum_of_numbers\n",
        "num_ids": 71
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=round(list1[i])\n    total=0\n    for i in range(len(list1)):\n        total=total+list1[i]*len(list1)\n    print(total)\n",
        "num_ids": 70
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube = n*n*n\n    print(cube)\n    \ncube_Sum(5)",
        "num_ids": 25
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # using for loop\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    \n    # using list comprehension\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    '''\n    \ndef cube_Sum_Using_Map(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # using for loop\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    \n    # using list comprehension\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    '''\n    \ndef cube_Sum_Using_Map_3(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # using for loop\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    \n    # using list comprehension\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    '''\n    \ndef cube_Sum_Using_Map_4(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # using for loop\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    \n    # using list comprehension\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    '''\n    \ndef cube_Sum_Using_Map_5(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # using for loop\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    \n    # using list comprehension\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    '''\n    \ndef cube_Sum_Using_Map_6(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # using for loop\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    \n    # using list comprehension\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    '''\n    \ndef cube_Sum_Using_Map_7(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # using for loop\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    \n    # using list comprehension\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    '''\n    \ndef cube_Sum_Using_Map_8(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # using for loop\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    \n    # using list comprehension\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    '''\n    \ndef cube_Sum_Using_Map_9(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # using for loop\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    \n    # using list comprehension\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    '''\n    \ndef cube_Sum_Using_Map_10(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # using for loop\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    \n    # using list comprehension\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    '''\n    \ndef cube_Sum_Using_Map_11(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # using for loop\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    \n    # using list comprehension\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    '''\n    \ndef cube_Sum_Using_Map_12(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # using for loop\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    \n    # using list comprehension\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    '''\n    \ndef cube_Sum_Using_Map_13(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # using for loop\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    \n    # using list comprehension\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    '''\n    \ndef cube_Sum_Using_Map_14(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # using for loop\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    \n    # using list comprehension\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    '''\n    \ndef cube_Sum_Using_Map_15(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # using for loop\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    \n    # using list comprehension\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    '''\n    \ndef cube_Sum_Using_Map_16(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # using for loop\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    \n    # using list comprehension\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    '''\n    \ndef cube_Sum_Using_Map_17(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # using for loop\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    \n    # using list comprehension\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    '''\n    \ndef cube_Sum_Using_Map_18(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # using for loop\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n    \n    # using list comprehension\n    '''\n    sum = 0\n    for i in range(n):\n        sum +",
        "num_ids": 19
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + i**3\n    print(\"The cube sum of first n even numbers is\",sum)\n    ",
        "num_ids": 42
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    import math\n    sum=0\n    for i in range(0,n):\n        sum=sum+i*i*i\n    print(\"The cube sum of first %d even natural numbers is %d\"%(n,sum))\ndef sum_of_array(n):\n    '''\n    Write a python function to find the sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(0,n):\n        sum=sum+i\n    print(\"The sum of first %d natural numbers is %d\"%(n,sum))\ndef product_of_array(n):\n    '''\n    Write a python function to find the product of first n even natural numbers.\n    '''\n    product=1\n    for i in range(0,n):\n        product=product*i\n    print(\"The product of first %d even natural numbers is %d\"%(n,product))\ndef largest_odd_natural_number(n):\n    '''\n    Write a python function to find the largest odd natural number from the first n natural numbers.\n    '''\n    largest_odd_number=0\n    for i in range(0,n):\n        if(i%2==1):\n            if(largest_odd_number<i):\n                largest_odd_number=i\n    print(\"The largest odd natural number from the first %d natural numbers is %d\"%(n,largest_odd_number))\ndef sum_of_odd_natural_numbers(n):\n    '''\n    Write a python function to find the sum of first n natural numbers which are odd.\n    '''\n    sum=0\n    for i in range(0,n):\n        if(i%2!=0):\n            sum=sum+i\n    print(\"The sum of first %d natural numbers which are odd is %d\"%(n,sum))\ndef product_of_odd_natural_numbers(n):\n    '''\n    Write a python function to find the product of first n natural numbers which are odd.\n    '''\n    product=1\n    for i in range(0,n):\n        if(i%2!=0):\n            product=product*i\n    print(\"The product of first %d natural numbers which are odd is %d\"%(n,product))\ndef sum_of_n_power_of_3_natural_numbers(n):\n    '''\n    Write a python function to find the sum of first n natural numbers which are the sum of first n natural numbers which are the power of 3.\n    '''\n    sum=0\n    for i in range(0,n):\n        sum=sum+i\n    sum_of_power_of_3=0\n    for i in range(0,n):\n        sum_of_power_of_3=sum_of_power_of_3+i**3\n    sum=sum+sum_of_power_of_3\n    print(\"The sum of first %d natural numbers which are the sum of first %d natural numbers which are the power of 3 is %d\"%(n,n,sum))\ndef sum_of_n_power_of_5_natural_numbers(n):\n    '''\n    Write a python function to find the sum of first n natural numbers which are the sum of first n natural numbers which are the power of 5.\n    '''\n    sum=0\n    for i in range(0,n):\n        sum=sum+i\n    sum_of_power_of_5=0\n    for i in range(0,n):\n        sum_of_power_of_5=sum_of_power_of_5+i**5\n    sum=sum+sum_of_power_of_5\n    print(\"The sum of first %d natural numbers which are the sum of first %d natural numbers which are the power of 5 is %d\"%(n,n,sum))\ndef sum_of_n_power_of_7_natural_numbers(n):\n    '''\n    Write a python function to find the sum of first n natural numbers which are the sum of first n natural numbers which are the power of 7.\n    '''\n    sum=0\n    for i in range(0,n):\n        sum=sum+i\n    sum_of_power_of_7=0\n    for i in range(0,n):\n        sum_of_power_of_7=sum_of_power_of_7+i**7\n    sum=sum+sum_of_power_of_7\n    print(\"The sum of first %d natural numbers which are the sum of first %d natural numbers which are the power of 7 is %d\"%(n,n,sum))\ndef sum_of_n_power_of_5_2_natural_numbers(n):\n    '''\n    Write a python function to find the sum of first n natural numbers which are the sum of first n natural numbers which are the power of 5 and are also the power of 2.\n    '''\n    sum=0\n    for i in range(0,n):\n        sum=sum+i\n    sum_of_power_of_5_2=0\n    for i in range(0,n):\n        if(i%5==0):\n            if(i%2==0):\n                sum_of_power_of_5_2=sum_of_power_of_5_2+i**5\n    sum=sum+sum_of_power_of_5_2\n    print(\"The sum of first %d natural numbers which are the sum of first %d natural numbers which are the power of 5 and are also the power of 2 is %d\"%(n,n,sum))\ndef largest_even_odd_natural_numbers(n):\n    '''\n    Write a python function to find the largest even natural number from the first n natural numbers.\n    '''\n    largest_even_number=0\n    largest_odd_number=0\n    for i in range(0,n):\n        if(i%2==0):\n            if(largest_even_number<i):\n                largest_even_number=i\n        else:\n            if(largest_odd_number<i):\n                largest_odd_number=i\n    print(\"The largest even natural number from the first %d natural numbers is %d\"%(n,largest_even_number))\ndef product_of_n_even_natural_numbers(n):\n    '''\n    Write a python function to find the product of first n natural numbers which are even.\n    '''\n    product=1\n    for i in range(0,n):\n        if(i%2==0):\n            product=product*i\n    print(\"The product of first %d natural numbers which are even is %d\"%(n,product))\ndef product_of_n_odd_natural_numbers(n):\n    '''\n    Write a python function to find the product of first n natural numbers which are odd.\n    '''\n    product=1\n    for i in range(0,n):\n        if(i%2!=0):\n            product=product*i\n    print(\"The product of first %d natural numbers which are odd is %d\"%(n,product))\ndef sum_of_n_even_natural_numbers(n):\n    '''\n    Write a python function to find the sum of first n natural numbers which are even.\n    '''\n    sum=0\n    for i in range(0,n):\n        if(i%2==0):\n            sum=sum+i\n    print(\"The sum of first %d natural numbers which are even is %d\"%(n,sum))\ndef sum_of_n_odd_natural_numbers(n):\n    '''\n    Write a python function to find the sum of first n natural numbers which are odd.\n    '''\n    sum=0\n    for i in range(0,n):\n        if(i%2!=0):\n            sum=sum+i\n    print(\"The sum of first %d natural numbers which are odd is %d\"%(n,sum))\ndef sum_of_n_power_of_2_natural_numbers(n):\n    '''\n    Write a python function to find the sum of first n natural numbers which are the sum of first n natural numbers which are the power of 2.\n    '''\n    sum=0\n    for i in range(0,n):\n        sum=sum+i\n    sum_of_power_of_2=0\n    for i in range(0,n):\n        sum_of_power",
        "num_ids": 55
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum = sum + pow(i,3)\n        i += 1\n    return sum\n",
        "num_ids": 40
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for x in range(1,n+1):\n        sum += x**3\n    return sum\n    \n",
        "num_ids": 33
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n < 0:\n        raise ValueError(\"Input should not be negative number\")\n    elif n == 0:\n        return 0\n    else:\n        return n * (n*n*n) \n",
        "num_ids": 51
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    def cube_sum(n):\n        cubesum=0\n        for i in range(n):\n            cubesum = cubesum + i*i*i\n        return cubesum\n    print(\"cube_sum: \",cube_sum(n))\n",
        "num_ids": 61
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i*i*i\n    return sum\nprint(cube_Sum(10))\n",
        "num_ids": 47
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum = sum + (i*i*i)\n    print(sum)\n",
        "num_ids": 37
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    res_tup = tuple(test_tup)\n    res_str = \"\"\n    for x in range(len(res_tup)):\n        res_str += str(res_tup[x]) + \", \"\n",
        "num_ids": 56
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return '-'.join(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    s = \"\"\n    for item in test_tup:\n        s += item\n    return s\n",
        "num_ids": 26
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n",
        "num_ids": 14
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple(test_tup)\n",
        "num_ids": 12
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \"\".join(test_tup)\n",
        "num_ids": 14
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    str = ''\n    for elem in test_tup:\n        str += str(elem) +''\n    return str\n",
        "num_ids": 33
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    \n    return test_tup[0] + test_tup[1] + test_tup[2]\n",
        "num_ids": 30
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" \"\n    return delimiter.join(test_tup)\n",
        "num_ids": 23
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for num in range(n):\n        sum_of_cubes = sum_of_cubes + (num**3)\n    print(sum_of_cubes)\n    print('Average of cubes is',sum_of_cubes/n)\n    return sum_of_cubes/n\n",
        "num_ids": 82
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += (i ** 3)\n    return sum / n\n",
        "num_ids": 35
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    result=0\n    for i in range(n):\n        result=result+i**3\n    return result/n\n",
        "num_ids": 31
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total = total + (i**3)\n    avg = total/n\n    return avg\n",
        "num_ids": 39
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    Sum = 0\n    for i in range(1, n + 1):\n        Sum += i ** 3\n    return Sum / n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2010
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + (i**3)\n    print(sum/n)\n",
        "num_ids": 35
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    n = int(n)\n    return n*n*n/6\n",
        "num_ids": 20
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    return total/n\n    \nfind_Average_Of_Cube(10)\n",
        "num_ids": 46
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    n = int(n)\n    sum = 0\n    for i in range(0,n+1):\n        sum = sum + i**3\n    return int(sum/n)\n",
        "num_ids": 46
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # Your code here\n    total_sum = 0\n    for i in range(n+1):\n        total_sum += i**3\n    return total_sum/n\n",
        "num_ids": 43
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    new_tuple = []\n    for i in range(0, len(test_tuple)):\n        new_tuple.append(test_tuple[i][len(test_tuple[i]) - 1])\n    return tuple(new_tuple)\n",
        "num_ids": 65
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(map(lambda x: x[-1], test_tuple))\n",
        "num_ids": 22
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(t[-1] for t in test_tuple)\n",
        "num_ids": 20
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(i[::-1] for i in test_tuple)\n",
        "num_ids": 21
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "num_ids": 13
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "num_ids": 13
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(e[-1] for e in test_tuple)\n",
        "num_ids": 20
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return (test_tuple[-1], )\n",
        "num_ids": 15
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return (tup[-1] for tup in test_tuple)\n",
        "num_ids": 21
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return (test_tuple[1][0])\n",
        "num_ids": 15
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for item in list1:\n        if x in item:\n            count += 1\n    return count \n",
        "num_ids": 32
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    res = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            res += 1\n    return res\n",
        "num_ids": 39
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return len([i for i in list1 if x in i])\n    \n",
        "num_ids": 20
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for l in list1:\n        if x in l:\n            count = count + 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n",
        "num_ids": 7
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    c = 0\n    for x in list1:\n        if x == x:\n            c = c + 1\n    return c\n",
        "num_ids": 33
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    if x in list1:\n        return list1.count(x)\n    return 0\n",
        "num_ids": 24
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnumbers = []\n    for num in nums:\n        if num%2!= 0:\n            oddnumbers.append(num)\n    return oddnumbers\n",
        "num_ids": 43
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            nums.remove(nums[i])\n    return nums\n",
        "num_ids": 46
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for n in nums:\n        if not n % 2:\n            yield n\n",
        "num_ids": 23
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda n: n%2!=0, nums)\n",
        "num_ids": 20
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x % 2!= 0, nums)\n",
        "num_ids": 20
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # return list(filter(lambda x: x % 2!= 0, nums))\n    return [x for x in nums if x % 2!= 0]\n",
        "num_ids": 41
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    #nums = list(map(int, input().split()))\n    return list(filter(lambda x: x%2!= 0, nums))\n",
        "num_ids": 39
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for n in nums:\n        if n % 2 == 1:\n            result.append(n)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums\n",
        "num_ids": 46
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnums = []\n    for n in nums:\n        if n % 2!= 0:\n            oddnums.append(n)\n    return oddnums\n",
        "num_ids": 43
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return '{0}-{1}-{2}'.format(dt[-4:], dt[2:-4], dt[:2])\n",
        "num_ids": 39
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    if len(dt) == 3:\n        return \"-\".join(dt)\n    else:\n        raise ValueError(\"wrong date format\")\n",
        "num_ids": 46
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    #date = dt.split('-')\n    #date = map(int, date)\n    #date = map(lambda x: str(x), date)\n    #date = \"-\".join(date)\n    #date = int(date)\n    #print(date)\n    #print(type(date))\n    #return date\n    return dt[4:] + '-' + dt[2:4] + '-' + dt[0:2]\n",
        "num_ids": 112
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    year = dt[0:4]\n    month = dt[4:6]\n    day = dt[6:8]\n    date_format = \"{}-{}-{}\".format(day,month,year)\n    return date_format\n",
        "num_ids": 64
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.strip()\n    dt = dt.replace('-', '/')\n    dt = dt.split('/')\n    \n    for i in range(len(dt)):\n        dt[i] = int(dt[i])\n    \n    dt = '-'.join(dt)\n    return dt\n    \ndef check_bill_format(msg):\n    '''\n    Write a function to check whether a string contains only digits, letters, and the symbols!@#$%^&*()_+-=?/,.<>[]{}|\\\n    . Here is the regular expression to match the string.\n    '''\n    pattern = re.compile(\"[0-9a-zA-Z!@#$%^&*()_+-=?/,.<>[]{}|\\s]\")\n    if pattern.match(msg):\n        return True\n    else:\n        return False\n",
        "num_ids": 66
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split('-')\n    month = date[1]\n    day = date[2]\n    year = date[0]\n    month_to_number = {'Jan':1, 'Feb':2, 'Mar':3, 'Apr':4, 'May':5, 'Jun':6, 'Jul':7, 'Aug':8, 'Sep':9, 'Oct':10, 'Nov':11, 'Dec':12}\n    final_date = str(month_to_number[month]) + '-' + day + '-' + year\n    return final_date\n",
        "num_ids": 138
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    \n    d = dt.split('-')\n    \n    days = d[2]\n    months = d[1]\n    years = d[0]\n    \n    d.append(years)\n    \n    months = months[0:3]\n    days = days[0:2]\n    \n    new_date = days + '-' + months + '-' + years\n    \n    print('Formatting Date:', new_date)\n    \n    return new_date\n",
        "num_ids": 115
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[-4:] + dt[:3] + '-' + dt[3:5] + '-' + dt[:6]\n    #pass\n",
        "num_ids": 43
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    dt = '-'.join(dt)\n    return dt\n",
        "num_ids": 29
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_list = re.findall(r'\\d+', dt)\n    print(date_list)\n    date_list = list(map(int, date_list))\n    date_list[0] = date_list[0] + 2000\n    date_list = list(map(str, date_list))\n    print(date_list)\n    return '-'.join(date_list)\n",
        "num_ids": 99
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = 1\n    while gap < n:\n        gap = gap * 3 + 1\n    for i in range(gap, n):\n        for j in range(i, 0, -gap):\n            if my_list[j] < my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n",
        "num_ids": 107
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j-gap] > my_list[j]:\n                my_list[j-gap], my_list[j] = my_list[j], my_list[j-gap]\n                j -= gap\n        gap //= 2\n    return my_list\n",
        "num_ids": 112
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if len(my_list) <= 1:\n        return\n    \n    size = len(my_list)\n    gap = size // 2\n",
        "num_ids": 36
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    sublist_count = len(my_list)//2\n    while sublist_count > 0:\n        for i in range(sublist_count):\n            j = i + sublist_count\n            gap_insertion_sort(my_list, i, j)\n        sublist_count = sublist_count//2\n",
        "num_ids": 79
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if len(my_list)==0:\n        return\n    gap = len(my_list)//2\n    while gap >=1:\n        for i in range(gap,len(my_list)):\n            j=i\n            while j>=gap and my_list[j-gap]>my_list[j]:\n                my_list[j],my_list[j-gap]=my_list[j-gap],my_list[j]\n                j-=gap\n        gap = gap//2\n    return my_list\n",
        "num_ids": 129
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    #h = 1\n    #while h <= len(my_list):\n    #    h = h*3+1\n    #    for i in range(h,len(my_list)):\n    #        j = i\n    #        while j > 0 and my_list[j-h] > my_list[j]:\n    #            my_list[j-h],my_list[j] = my_list[j],my_list[j-h]\n    #            j = j-h\n    #    h = h//3\n",
        "num_ids": 131
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    size = len(my_list)\n    gap = size//2\n    while gap > 0:\n        for i in range(gap, size):\n            j = i\n            while j >= gap and my_list[j] < my_list[j-gap]:\n                temp = my_list[j]\n                my_list[j] = my_list[j-gap]\n                my_list[j-gap] = temp\n                j -= gap\n        gap = gap//2\n    return my_list\n",
        "num_ids": 121
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    for gap in range(1,len(my_list)):\n        gap = int(gap/2)\n        for i in range(gap,len(my_list)):\n            for j in range(i-gap,i):\n                if my_list[i] < my_list[j]:\n                    my_list[j],my_list[i] = my_list[i],my_list[j]\n    return my_list\n",
        "num_ids": 106
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup1 = (test_tup1[0], test_tup1[1], test_tup1[2])\n    and_tup2 = (test_tup2[0], test_tup2[1], test_tup2[2])\n    return and_tup1, and_tup2\n",
        "num_ids": 82
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp = test_tup1[i]\n        test_tup2.pop(i)\n        result.append(temp and test_tup2)\n    return result\n",
        "num_ids": 65
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    tup1 = (4,5)\n    tup2 = (6,7)\n    final_tup = ()\n    for i in range(2):\n        if test_tup1[i] and test_tup2[i]:\n            final_tup += (True,)\n        elif test_tup1[i]:\n            final_tup += (False,)\n        elif test_tup2[i]:\n            final_tup += (False,)\n    return final_tup\n",
        "num_ids": 122
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (x and y) for x, y in zip(test_tup1, test_tup2)\n",
        "num_ids": 29
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tup1, tup2) and (tup2, tup1)\n",
        "num_ids": 24
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple((x, y) for x, y in zip(test_tup1, test_tup2) if x and y)\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (x and y) for x,y in zip(test_tup1, test_tup2)\n",
        "num_ids": 29
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    \n    a, b = test_tup1\n    c, d = test_tup2\n",
        "num_ids": 26
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (a if a else 0 for a,b in zip(test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1[0] & test_tup2[0], test_tup1[1] & test_tup2[1]\n    \ndef or_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise or tuples from the given two tuples.\n    '''\n    return test_tup1[0] | test_tup2[0], test_tup1[1] | test_tup2[1]\n",
        "num_ids": 39
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # assert a > 0, 'a must be positive'\n    # assert b > 0, 'b must be positive'\n    # assert c > 0, 'c must be positive'\n",
        "num_ids": 44
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = a**2 + b**2 + c**2\n    x1 = -b/2\n    x2 = -b/2\n    x3 = (x**2 - a**2 - b**2)/c\n    if x1 > x2:\n        x1, x2 = x2, x1\n    if x1 < x3:\n        x1, x3 = x3, x1\n    if x2 < x3:\n        x2, x3 = x3, x2\n    y1 = a/x1\n    y2 = -a/x2\n    y3 = -y1\n    y4 = -y2\n    if y3 > y4:\n        y1, y2 = y2, y1\n    if y3 < y1:\n        y3, y1 = y1, y3\n    if y4 < y1:\n        y4, y1 = y1, y4\n    y5 = -a/x3\n    y6 = -a/x2\n    y7 = -y5\n    y8 = -y6\n    if y7 > y8:\n        y5, y6 = y6, y5\n    if y7 < y5:\n        y7, y5 = y5, y7\n    if y8 < y5:\n        y8, y5 = y5, y8\n    return (y1, y2), (y3, y4), (y5, y6), (y7, y8)\n",
        "num_ids": 354
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = a\n    y = b**2 + c**2\n",
        "num_ids": 18
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = lambda t : a*t**2 + b*t + c\n    return x\n",
        "num_ids": 24
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    p = -b\n    q = (p**2 - 4*a*c)**0.5\n    d = (2*p*q)/(2*a)\n    x1 = (-b - d)/(2*a)\n    x2 = (-b + d)/(2*a)\n    return x1, x2\n    \ndef parabola_roots(a, b, c): \n    '''\n    Write a function to find the roots of a parabola.\n    '''\n    x1 = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n    x2 = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n    return x1, x2\n    \ndef quadratic_roots(a, b, c): \n    '''\n    Write a function to find the roots of a quadratic.\n    '''\n    if a == 0:\n        if c == 0:\n            print(\"No real roots\")\n        else:\n            print(\"The equation has no roots\")\n    else:\n        d = (b**2 - 4*a*c)**0.5\n        x1 = (-b + d)/(2*a)\n        x2 = (-b - d)/(2*a)\n        return x1, x2\n    \ndef circle_roots(r): \n    '''\n    Write a function to find the roots of a circle.\n    '''\n    n = 2*r\n    x1 = n/2\n    x2 = -n/2\n    return x1, x2\n    \ndef triangle_roots(a, b): \n    '''\n    Write a function to find the roots of a triangle.\n    '''\n    x1 = (-b + sqrt(b**2 - 4*a*c))/2*a\n    x2 = (-b - sqrt(b**2 - 4*a*c))/2*a\n    return x1, x2\n    \ndef circle_area(r, n): \n    '''\n    Write a function to find the area of a circle.\n    '''\n    n = float(n)\n    area = (1/3)*n*r**2\n    return area\n    \ndef rectangle_area(l, w): \n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*w\n    return area\n    \ndef cylinder_area(r, h): \n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    area = pi*r**2*h\n    return area\n    \ndef cone_area(r, h): \n    '''\n    Write a function to find the area of a cone.\n    '''\n    area = pi*r**2*h\n    return area\n    \ndef sphere_area(r): \n    '''\n    Write a function to find the area of a sphere.\n    '''\n    area = 4*pi*r**3\n    return area\n    \ndef sphere_volume(r): \n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*pi*r**3\n    return volume\n    \ndef cone_volume(r, h): \n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (4/3)*pi*r**2*h\n    return volume\n    \ndef cone_intersection(r, h, l): \n    '''\n    Write a function to find the intersection of a cone and a cylinder.\n    '''\n    if r < (l/2):\n        print(\"No intersection\")\n    else:\n        x = (r**2 - (l/2)**2)*(h**2 + (r**2 - (l/2)**2)*(h**2 - 4*l*r*h))**0.5\n        y = l*h\n        z = -x - y\n        return x, y, z\n    \ndef sphere_intersection(r, h): \n    '''\n    Write a function to find the intersection of a sphere and a cone.\n    '''\n    if r < (h/2):\n        print(\"No intersection\")\n    else:\n        x = (((r**2) - (h/2)**2)*(r**2 + (h/2)**2))**0.5\n        y = 2*r*h\n        z = -x - y\n        return x, y, z\n    \ndef sphere_truncate(r, h): \n    '''\n    Write a function to find the truncation of a sphere.\n    '''\n    if r == 0:\n        print(\"The sphere is already at its maximum radius.\")\n    else:\n        x = (((r**2) - (h/2)**2)*(r**2 + (h/2)**2))**0.5\n        y = 2*r*h\n        z = -x - y\n        return x, y, z\n    \ndef sphere_truncate_2(r, h): \n    '''\n    Write a function to find the truncation of a sphere.\n    '''\n    if r == 0:\n        print(\"The sphere is already at its maximum radius.\")\n    else:\n        x = r**2\n        y = 2*r*h\n        z = -x - y\n        return x, y, z\n    \ndef sphere_truncate_3(r, h): \n    '''\n    Write a function to find the truncation of a sphere.\n    '''\n    if r == 0:\n        print(\"The sphere is already at its maximum radius.\")\n    else:\n        x = r**2\n        y = 2*r*h\n        z = -x - y\n        return x, y, z\n    \ndef sphere_truncate_4(r, h): \n    '''\n    Write a function to find the truncation of a sphere.\n    '''\n    if r == 0:\n        print(\"The sphere is already at its maximum radius.\")\n    else:\n        x = (r**2 - h**2)**0.5\n        y = 2*r*h\n        z = -x - y\n        return x, y, z\n    \ndef sphere_truncate_5(r, h): \n    '''\n    Write a function to find the truncation of a sphere.\n    '''\n    if r == 0:\n        print(\"The sphere is already at its maximum radius.\")\n    else:\n        x = (r**2 - h**2)**0.5\n        y = 2*r*h\n        z = -x - y\n        return x, y, z\n    \ndef sphere_truncate_6(r, h): \n    '''\n    Write a function to find the truncation of a sphere.\n    '''\n    if r == 0:\n        print(\"The sphere is already at its maximum radius.\")\n    else:\n        x = (r**2 - h**2)**0.5\n        y = 2*r*h\n        z = -x - y\n        return x, y, z\n    \ndef sphere_truncate_7(r, h): \n    '''\n    Write a function to find the truncation of a sphere.\n    '''\n    if r == 0:\n        print(\"The sphere is already at its maximum radius.\")\n    else:\n        x = (r**2 - h**2)**0.5\n        y = 2*r*h\n        z = -x - y\n        return x, y, z\n    \ndef sphere_truncate_8(r, h): \n    '''\n    Write a function to find the truncation of a sphere.\n    '''\n    if r == 0:\n        print(\"The sphere is already at its maximum radius.\")\n    else:\n        x = (r**2 - h**2)**0.5\n        y = 2*r*h\n        z = -x - y\n        return x, y, z\n    \ndef sphere_truncate_9(r, h): \n    '''\n    Write a function to find the truncation of a sphere.\n    '''\n    if r == 0:\n        print(\"The sphere is already at its maximum radius.\")\n    else:\n        x = (r**2 - h**2)**0.5\n        y ",
        "num_ids": 46
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a*(c**2) + b*c - (a**2)*b\n",
        "num_ids": 23
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a * b == 0:\n        return (b**2 / 4) * a\n    else: \n        return (a * b**2) / 4 + (2 * a**2 * c)/(b**2)\n",
        "num_ids": 55
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (a * b ** 2 + 2 * a * c - b ** 2) / (2 * a)\n",
        "num_ids": 28
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    #finding the coefficients of the quadratic\n    d = -b**2/(4*a*c)\n    \n    #finding the roots of the quadratic\n    root1 = (-b - math.sqrt(d))/(2*a)\n    root2 = (-b + math.sqrt(d))/(2*a)\n    \n    return root1, root2\n    \ndef parabola_vertex(a, b, c):\n    '''\n    Write a function to find the vertex of the parabola.\n    '''\n    \n    #finding the coefficients of the quadratic\n    d = -b**2/(4*a*c)\n    \n    #finding the roots of the quadratic\n    root1 = (-b - math.sqrt(d))/(2*a)\n    root2 = (-b + math.sqrt(d))/(2*a)\n    \n    return root1, root2\n    \ndef parabola_vertex2(a, b, c):\n    '''\n    Write a function to find the vertex of the parabola.\n    '''\n    \n    #finding the coefficients of the quadratic\n    d = -b**2/(4*a*c)\n    \n    #finding the roots of the quadratic\n    root1 = -b/(2*a)\n    root2 = b/(2*a)\n    \n    return root1, root2\n    ",
        "num_ids": 77
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = a*(a**2) + b*a + c\n    return x\n",
        "num_ids": 23
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n",
        "num_ids": 22
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                return True\n    return False\n",
        "num_ids": 50
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            common.append(list1[i])\n    if len(common) == 0:\n        print(\"No common elements\")\n    else:\n        print(\"Common elements:\", common)\n",
        "num_ids": 75
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_element = False\n    if len(list1) < len(list2):\n        for i in range(len(list1)):\n            if list1[i] in list2:\n                common_element = True\n        if common_element:\n            print(common_element)\n            return common_element\n        else:\n            print(\"None\")\n    else:\n        for i in range(len(list2)):\n            if list2[i] in list1:\n                common_element = True\n        if common_element:\n            print(common_element)\n            return common_element\n        else:\n            print(\"None\")\n",
        "num_ids": 153
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            common.append(list1[i])\n    if len(common) == 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 65
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        for element2 in list2:\n            if element == element2:\n                return True\n    return False\n",
        "num_ids": 35
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if list1 == None or list2 == None:\n        return False\n    return len(set(list1).intersection(set(list2))) > 0\n",
        "num_ids": 39
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(set(list1) & set(list2)) > 0\n",
        "num_ids": 20
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # check to see if they have an intersection\n    common = list(set(list1).intersection(set(list2)))\n    if len(common) > 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 54
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    base = max(base1,base2)\n    height = min(height,base)\n",
        "num_ids": 26
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\nprint(median_trapezium(5,4,4))\n",
        "num_ids": 31
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    half_height = height/2\n    half_base1 = base1/2\n    half_base2 = base2/2\n    area = (base1+base2)*height\n    area_trapezium = (base1-half_base1)*(base2-half_base2)*height\n    median_trapezium = area_trapezium/area\n    return median_trapezium\n",
        "num_ids": 96
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return(base1 + base2) / 2 * height\n",
        "num_ids": 16
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1 + base2)/2)*height\n",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    a = 0\n    b = 0\n    if height > base1 and height < base2:\n        a = height\n    elif base1 > height and base1 < base2:\n        b = height\n    elif height < base1 and height > base2:\n        b = height\n    elif base1 < height and base2 > height:\n        a = height\n    return a + b\n",
        "num_ids": 94
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 < base2:\n        return median_trapezium(base2,base1,height)\n    if base1 == base2:\n        return height\n    else:\n        return (base1 + base2) / 2 * height",
        "num_ids": 58
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1 = float(base1)\n    base2 = float(base2)\n    height = float(height)\n    area1 = base1 * height\n    area2 = base2 * height\n    if area1 > area2:\n        if height % 2 == 0:\n            median = (area1 + area2) / 2\n        else:\n            median = area1\n    elif area1 < area2:\n        if height % 2 == 0:\n            median = (area2 + area1) / 2\n        else:\n            median = area2\n    else:\n        median = area1\n    return median\n",
        "num_ids": 150
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = (base1 + base2)/2 * height\n    return area\n",
        "num_ids": 20
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 < base2 and height > 0:\n        temp1 = base1\n        temp2 = base2\n        temp3 = height\n        if temp1 <= temp2:\n            if temp1 <= temp3:\n                return temp1\n            else:\n                return temp3\n        else:\n            if temp2 <= temp3:\n                return temp2\n            else:\n                return temp3\n    else:\n        print(\"\\nThe value entered is not a triangle\")\n        \nmedian_trapezium(20,25,25)",
        "num_ids": 127
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n",
        "num_ids": 32
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # check for the length of array\n    if len(arr) == 0:\n        print('The array is empty.')\n    else:\n        # loop through the array\n        for i in range(len(arr)):\n            if arr[i] > number:\n                print(f'{arr[i]} is greater than {number}.')\n                break\n        else:\n            print(f'{number} is not greater than any of the elements in the array.')\n",
        "num_ids": 112
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] <= number:\n            return True\n    return False\n",
        "num_ids": 32
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for x in arr:\n        if x >= number:\n            return True\n    return False\n",
        "num_ids": 24
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0, len(arr)):\n        if number < arr[i]:\n            return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n",
        "num_ids": 32
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if number > arr[i]:\n            return True\n    return False\n",
        "num_ids": 31
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0, len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n",
        "num_ids": 34
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0, len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n",
        "num_ids": 34
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return number > arr\n",
        "num_ids": 8
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a.+b')\n    return(pattern.search(text))\n",
        "num_ids": 28
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if text.find('ab') == -1:\n        return False\n    else:\n        return True\n",
        "num_ids": 27
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = re.compile(r'a+b')\n    result = regex.search(text)\n    return result\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = re.compile(r'a+?')\n    result = regex.search(text)\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"ab\"\n    matches = re.finditer(pattern,text)\n    return matches\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a{1,}b\"\n    matches = re.finditer(pattern,text)\n    return matches\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a+b\"\n    matches = re.finditer(pattern,text)\n    return matches\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a*b\"\n    matches = re.finditer(pattern,text)\n    return matches\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a{1}b\"\n    matches = re.finditer(pattern,text)\n    return matches\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a{1,}b\"\n    matches = re.finditer(pattern,text)\n    return matches\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a{1,}?\"\n    matches = re.finditer(pattern,text)\n    return matches\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a{1,}?b\"\n    matches = re.finditer(pattern,text)\n    return matches\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a{1,}?b\"\n    matches = re.finditer(pattern,text)\n    return matches\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a{1,}?b\"\n    matches = re.finditer(pattern,text)\n    return matches\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a{1,}?b\"\n    matches = re.finditer(pattern,text)\n    return matches\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a{1,}?b\"\n    matches = re.finditer(pattern,text)\n    return matches\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a{1,}?b\"\n    matches = re.finditer(pattern,text)\n    return matches\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a{1,}?b\"\n    matches = re.finditer(pattern,text)\n    return matches\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a{1,}?b\"\n    matches = re.finditer(pattern,text)\n    return matches\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a{1,}?b\"\n    matches = re.finditer(pattern,text)\n    return matches\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a{1,}?b\"\n    matches = re.finditer(pattern,text)\n    return matches\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a{1,}?b\"\n    matches = re.finditer(pattern,text)\n    return matches\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a{1,}?b\"\n    matches = re.finditer(pattern,text)\n    return matches\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a{1,}?b\"\n    matches = re.finditer(pattern,text)\n    return matches\ndef text_match_twentyone(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a{1,}?b\"\n    matches = re.finditer(pattern,text)\n    return matches\ndef text_match_twentytwo(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a{1,}?b\"\n    matches = re.finditer(pattern,text)\n    return matches\ndef text_match_twentythree(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a{1,}?b\"\n    matches = re.finditer(pattern,text)\n    return matches\ndef text_match_twentyfour(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a{1,}?b\"\n    matches = re.finditer(pattern,text)\n    return matches\ndef text_match_twentyfive(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a{1,}?b\"\n    matches = re.finditer(pattern,text)\n    return matches\ndef text_match_twentysix(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a{1,}?b\"\n    matches = re.finditer(pattern,text)\n    return matches\ndef text_match_twentyseven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a{1,}?b\"\n    matches = re.finditer(pattern,text)\n    return matches\ndef text_match_twentyeight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a{1,}?b\"\n    matches = re.finditer(pattern,text)\n    return matches\ndef text_match_twentynine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a",
        "num_ids": 8
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab*', text)\n    if match:\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab+', text)\n    return match\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'a(?:b)+', text)\n    return match\n    \ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'a(?:b)+(?:b)', text)\n    return match\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'a(?:b)+(?:b)?', text)\n    return match\n    \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'a(?:b){1,}', text)\n    return match\n    \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'a(?:b){1,}?', text)\n    return match\n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'a(?:b){1,}(?:b)', text)\n    return match\n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'a(?:b){1,}(?:b)?', text)\n    return match\n    \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'a(?:b){1,}(?:b)?', text)\n    return match\n    \ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'a(?:b){1,}?(?:b)', text)\n    return match\n    \ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'a(?:b){1,}?(?:b)?', text)\n    return match\n    \ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'a(?:b){1,}?(?:b)', text)\n    return match\n    \ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'a(?:b){1,}?(?:b)?(?:b)', text)\n    return match\n    \ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'a(?:b){1,}?(?:b)?(?:b)?(?:b)', text)\n    return match\n    \ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'a(?:b){1,}?(?:b)?(?:b)?(?:b)?', text)\n    return match\n    \ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'a(?:b){1,}?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)', text)\n    return match\n    \ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'a(?:b){1,}?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?', text)\n    return match\n    \ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'a(?:b){1,}?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?', text)\n    return match\n    \ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'a(?:b){1,}?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?', text)\n    return match\n    \ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'a(?:b){1,}?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?:b)?(?",
        "num_ids": 466
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'a+b',text)\n",
        "num_ids": 17
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if not text:\n        return False\n    return bool(re.search(r'ab+', text))\n",
        "num_ids": 28
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.findall('ab.*?', text)\n",
        "num_ids": 16
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "num_ids": 8
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    s = str(n)\n    return int(s[-1])\n",
        "num_ids": 20
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    import math\n    n = int(n)\n    if (n < 0):\n        n = abs(n)\n        n = n//10\n        last_digit = int(math.pow(-1, n)) * int(10)\n    else:\n        last_digit = int(n%10)\n",
        "num_ids": 75
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # your code here\n    # return number if no digit is present\n    if n == 0 :\n        return 0\n    if n % 10 == 0 :\n        return n % 10\n    return n % 10 - 1\n",
        "num_ids": 52
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    while n > 0 :\n        n = n // 10\n    return n\n",
        "num_ids": 20
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = abs(n)\n    return n % 10\n",
        "num_ids": 16
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    x = n%10\n    return x\n",
        "num_ids": 13
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    count=0\n    while n>0:\n        count=n%10\n        n=int(n/10)\n        if(n<10):\n            n=n\n        else:\n            n=n\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = abs(n)\n    res = n % 10\n    return res\n",
        "num_ids": 21
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # for x in list1:\n    #     if x < 0:\n    #         return -x\n    #     else:\n    #         print(\"The list contains positive numbers only\")\n    #         break\n    # return -list1\n    l = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            l.append(list1[i])\n    return -l\n    ",
        "num_ids": 104
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    i = 0\n    while i < len(list1):\n        if list1[i] < 0:\n            list1[i] *= -1\n        i += 1\n    return list1\nprint(neg_nos([-1, 2, -3, -5]))",
        "num_ids": 67
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list\n",
        "num_ids": 40
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return (list(map(lambda x: -x, list1)))\n",
        "num_ids": 19
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in list1:\n        if i < 0:\n            neg.append(i)\n    return neg\n",
        "num_ids": 34
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    i = 0\n    res = []\n    while i<len(list1):\n        if list1[i] < 0:\n            res.append(list1[i])\n        i = i + 1\n    return res\n",
        "num_ids": 55
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list1=[]\n    for i in list1:\n        if i<0:\n            list1.remove(i)\n    return list1\n",
        "num_ids": 37
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            negative.append(list1[i])\n    return negative\n    \n",
        "num_ids": 48
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n    \nlist1 = [-4, -2, -5, -3, -8, -6, 0, 10]\nprint(\"Given list is :\", list1)\nprint(\"Negative numbers in the list are :\", neg_nos(list1))",
        "num_ids": 94
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [n for n in list1 if n<0]\n    ",
        "num_ids": 18
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1[::2]\nprint(remove_odd('abcdefg'))\nprint(remove_odd('abcd') )\nprint(remove_odd('abc'))\nprint(remove_odd('abcde'))\n",
        "num_ids": 55
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    print(str1)\n    str1 = str1.replace('a',' ')\n    str1 = str1.replace('i',' ')\n    str1 = str1.replace('o',' ')\n    str1 = str1.replace('u',' ')\n    str1 = str1.replace('e',' ')\n    return str1\n",
        "num_ids": 84
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    count = 0\n    new_str = \"\"\n    for i in str1:\n        if count % 2 == 0:\n            new_str += i\n        count += 1\n    return new_str\n",
        "num_ids": 49
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    i = 0\n    s = ''\n    while i < len(str1):\n        if ord(str1[i])%2 == 0:\n            s += str1[i]\n        i += 1\n    return s\n",
        "num_ids": 55
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace('o', '')\n    \n",
        "num_ids": 16
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odds = \"\"\n    for i in str1:\n        if i % 2!= 0:\n            odds += i\n    return odds\n    ",
        "num_ids": 37
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    s = ''\n    for i in range(0,len(str1)):\n        if i%2 == 0:\n            s = s + str1[i]\n    return s\n    \ndef swap_case(str1):\n    '''\n    Write a function to swap case.\n    '''\n    new_str = ''\n    for i in range(0,len(str1)):\n        if i%2 == 0:\n            new_str = new_str + str1[i].swapcase()\n        else:\n            new_str = new_str + str1[i]\n    return new_str\n    \ndef count_odd(str1):\n    '''\n    Write a function to count the number of odd numbers in a string.\n    '''\n    odd = 0\n    for i in range(0,len(str1)):\n        if int(str1[i])%2!= 0:\n            odd = odd + 1\n    return odd\n    \ndef find_all(str1, sub):\n    '''\n    Write a function to find all the starting indices of a substring inside a string.\n    '''\n    final_list = []\n    if str1 == '':\n        return final_list\n    for i in range(0,len(str1)):\n        if str1[i:i+len(sub)] == sub:\n            final_list.append(i)\n    return final_list\n    \ndef replace_all(str1, sub, replacement):\n    '''\n    Write a function to replace all occurrences of a substring in a string with another string.\n    '''\n    final_str = ''\n    if str1 == '':\n        return final_str\n    for i in range(0,len(str1)):\n        if str1[i:i+len(sub)] == sub:\n            final_str = final_str + replacement\n        else:\n            final_str = final_str + str1[i]\n    return final_str\n    \ndef count_substring(str1, sub):\n    '''\n    Write a function to count the number of occurrences of a substring in a string.\n    '''\n    count = 0\n    if str1 == '':\n        return count\n    for i in range(0,len(str1)):\n        if str1[i:i+len(sub)] == sub:\n            count = count + 1\n    return count\n    \ndef find_index(str1, sub):\n    '''\n    Write a function to find the index of a substring inside a string.\n    '''\n    index = -1\n    if str1 == '':\n        return index\n    for i in range(0,len(str1)):\n        if str1[i:i+len(sub)] == sub:\n            index = i\n    return index\n    \ndef rfind_index(str1, sub):\n    '''\n    Write a function to find the index of a substring inside a string.\n    '''\n    index = -1\n    if str1 == '':\n        return index\n    for i in range(len(str1)-1,-1,-1):\n        if str1[i:i+len(sub)] == sub:\n            index = i\n    return index\n    \ndef find_last_index(str1, sub):\n    '''\n    Write a function to find the last index of a substring inside a string.\n    '''\n    index = -1\n    if str1 == '':\n        return index\n    for i in range(0,len(str1)-1):\n        if str1[i:i+len(sub)] == sub:\n            index = i\n    return index\n    \ndef rfind_last_index(str1, sub):\n    '''\n    Write a function to find the last index of a substring inside a string.\n    '''\n    index = -1\n    if str1 == '':\n        return index\n    for i in range(len(str1)-1,-1,-1):\n        if str1[i:i+len(sub)] == sub:\n            index = i\n    return index\n    \ndef find_all_indexes(str1, sub):\n    '''\n    Write a function to find all the occurrences of a substring in a string.\n    '''\n    index_list = []\n    if str1 == '':\n        return index_list\n    for i in range(0,len(str1)):\n        if str1[i:i+len(sub)] == sub:\n            index_list.append(i)\n    return index_list\n    \ndef rfind_all_indexes(str1, sub):\n    '''\n    Write a function to find all the occurrences of a substring in a string.\n    '''\n    index_list = []\n    if str1 == '':\n        return index_list\n    for i in range(len(str1)-1,-1,-1):\n        if str1[i:i+len(sub)] == sub:\n            index_list.append(i)\n    return index_list\n    \ndef count_substring_old(str1, sub):\n    '''\n    Write a function to count the number of occurrences of a substring in a string.\n    '''\n    count = 0\n    if str1 == '':\n        return count\n    for i in range(0,len(str1)):\n        if str1[i:i+len(sub)] == sub:\n            count = count + 1\n    return count\n    \ndef rfind_all_indexes_old(str1, sub):\n    '''\n    Write a function to find all the occurrences of a substring in a string.\n    '''\n    index_list = []\n    if str1 == '':\n        return index_list\n    for i in range(len(str1)-1,-1,-1):\n        if str1[i:i+len(sub)] == sub:\n            index_list.append(i)\n    return index_list\n    \ndef is_palindrome(str1):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    rev_str = ''\n    if str1 == '':\n        return True\n    else:\n        for i in range(0,len(str1)):\n            rev_str = rev_str + str1[i]\n        if str1 == rev_str:\n            return True\n        else:\n            return False\n    \ndef is_palindrome_old(str1):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    rev_str = ''\n    if str1 == '':\n        return True\n    else:\n        for i in range(0,len(str1)):\n            rev_str = rev_str + str1[i]\n        return rev_str == str1\n    \ndef is_palindrome_new(str1):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    if len(str1) == 0:\n        return True\n    if len(str1) == 1:\n        return True\n    else:\n        #First step is to find the middle of the string\n        middle = int(len(str1)/2)\n        #This is the middle char\n        middle_char = str1[middle]\n        #This is the new reversed string\n        rev_str = ''\n        #Recursively call the is_palindrome_new function on both halves of the string\n        rev_str = is_palindrome_new(str1[0:middle])\n        rev_str = rev_str and is_palindrome_new(str1[middle+1:])\n        return rev_str and middle_char == rev_str\n        \ndef is_anagram(str1, str2):\n    '''\n    Write a function to check if two strings are anagram or not.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        str1_dict = {}\n        for char in str1:\n            if char not in str1_dict:\n                str1_dict[char] = 1\n            else:\n                str1_dict[char] += 1\n        for char in str2:\n            if char not in str1_dict:\n                return False\n            else:\n                str1_dict[char] -= 1\n                if str1_dict[char] < ",
        "num_ids": 126
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.translate(str.maketrans('', '', '0123456789'))\n",
        "num_ids": 29
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for i in str1:\n        if i.isdigit():\n            result += i\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd = ''\n    for char in str1:\n        if ord(char) % 2 == 0:\n            odd = odd + char\n    return odd\n",
        "num_ids": 38
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    def get_pos(tup):\n        '''\n        Returns the position of a tuple in a list of tuples.\n        '''\n        pos = 0\n        for i in range(len(tup)):\n            if i == len(tup) - 1:\n                pos = i\n                break\n            if tup[i]!= tup[i + 1]:\n                pos = i + 1\n                break\n        return pos\n    \n    def is_bidirectional(tup1, tup2):\n        '''\n        Checks whether tup1 and tup2 are bidirectional.\n        '''\n        return tup1[0] == tup2[-1] and tup2[0] == tup1[-1]\n    \n    bid_count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i < j and is_bidirectional(test_list[i], test_list[j]):\n                bid_count += 1\n    \n    return bid_count\n",
        "num_ids": 114
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    res = 0\n    for i in range(len(test_list)):\n        if test_list[i][0] == test_list[i][1]:\n            res += 1\n        else:\n            pass\n",
        "num_ids": 53
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    total = 0\n    for (x, y) in test_list:\n        if x < y:\n            total += 1\n    return total\n",
        "num_ids": 36
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return test_list.count(tuple(reversed(test_list)))\n",
        "num_ids": 22
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    def helper(item, d):\n        if not d.get(item):\n            d[item] = 1\n        else:\n            d[item] += 1\n        return d\n    def count(test_list):\n        d = {}\n        for i in test_list:\n            d = helper(i, d)\n        d = dict(sorted(d.items(), key = lambda x:x[1], reverse = True))\n        return d\n    def count_bidirectional_rec(test_list, d):\n        for i in test_list:\n            helper(i, d)\n        d = dict(sorted(d.items(), key = lambda x:x[1], reverse = True))\n        return d\n    return count_bidirectional_rec(test_list, {})\n",
        "num_ids": 190
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    from collections import Counter\n    return Counter(zip(test_list, reversed(test_list)))\n",
        "num_ids": 25
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    if len(test_list) == 1:\n        return 0\n",
        "num_ids": 18
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pairs_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] == test_list[j][0]:\n                pairs_count += 1\n    return pairs_count\n",
        "num_ids": 76
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        a = (test_list[i],test_list[i+1])\n        b = (test_list[i+1],test_list[i])\n        if a in test_list and b in test_list:\n            count += 1\n    return count\n",
        "num_ids": 84
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = str(L)\n    L = L.replace(\"[\",\"\")\n    L = L.replace(\"]\",\"\")\n    L = L.replace(\" \",\"\")\n    return(int(L))\n",
        "num_ids": 51
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(str(L).replace(' ','').replace('[','').replace(']',''))\n",
        "num_ids": 28
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in range(len(L)):\n        result = result * 10 + L[i]\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(str(L).replace(\" \", \"\").replace(\"[\", \"\").replace(\"]\", \"\").replace(\"'\", \"\"))\n    \ndef write_data():\n    '''\n    Write a function to generate random data.\n    '''\n    with open('data.json', 'w') as f:\n        json.dump(make_data(), f, indent=2)\n    f.close()\n    \ndef load_data():\n    '''\n    Write a function to load random data.\n    '''\n    with open('data.json', 'r') as f:\n        data = json.load(f)\n    f.close()\n    return data\n    \ndef main():\n    write_data()\n    \nif __name__ == \"__main__\":\n    main(",
        "num_ids": 65
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    sum = 0\n    for i in L:\n        sum = sum + i\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return reduce(lambda x, y: x * 10 + y, L)\n",
        "num_ids": 20
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(str(L[0])+str(L[1])+str(L[2])+str(L[3]))\n    #return int(''.join([str(x) for x in L]))\n",
        "num_ids": 54
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    S=0\n    for k in range(len(L)):\n        S+=L[k]\n    return S\n",
        "num_ids": 31
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0: return 0\n    if len(L) == 1: return L[0]\n    else: return L[0] + multiple_to_single(L[1:])\n",
        "num_ids": 50
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    x = 0\n    for i in range(len(L)):\n        x += L[i]\n    return x\n",
        "num_ids": 31
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = r'\\b(?:in|that)\\b'\n    adverb_regex = re.compile(adverb_pattern)\n    matches = re.finditer(adverb_regex, text)\n    for match in matches:\n        print(match.start(), match.end())\n",
        "num_ids": 76
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    word_list = text.split(' ')\n    words_dict = {}\n    i = 0\n    while i < len(word_list):\n        if re.search('\\w+|[^\\w]', word_list[i]):\n            adverb = word_list[i]\n            words_dict[adverb] = i\n        i += 1\n    return words_dict\n",
        "num_ids": 94
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    if text == None or text == '':\n        return []\n    positions = []\n    list = text.split()\n    for i in range(len(list)):\n        if list[i] in ['of', 'and', 'or', 'the']:\n            positions.append(i)\n        if list[i] in ['in', 'at', 'on', 'at']:\n            positions.append(i)\n        if list[i] in ['like', 'against', 'with', 'no']:\n            positions.append(i)\n        if list[i] in ['like']:\n            positions.append(i)\n    return positions\n",
        "num_ids": 158
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.lower()\n    return re.finditer(r'\\w*(?<=\\s)(?:of|in|at)\\w*', text)\n",
        "num_ids": 42
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # -- START -- #\n    # Your code here.\n    adverbs_list = ['about', 'abroad', 'afterwards', 'afterwards', 'ago', 'all', 'almost', 'along', 'along', 'already',\n                    'amid', 'among', 'as', 'as', 'as', 'as', 'asked', 'around', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as',\n                    'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as', 'as'",
        "num_ids": 2009
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    return \"adverb_position\"\n",
        "num_ids": 11
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pos = []\n    i = 0\n    while i < len(text):\n        if re.search(\"(^|[^a-zA-Z])(ad|adv|ant|an|dit|en|es|er|gr|ic|im|in|into|it|la|les|ly|my|ne|not|of|or|our|out|re|so|to|up|us|ye|yet|you)$\",text[i]):\n            pos.append([i])\n        elif re.search(\"^[^a-zA-Z]\",text[i]):\n            if re.search(\"^[^a-zA-Z]\",text[i+1]):\n                pos.append([i,i+1])\n            else:\n                pos.append([i])\n        i+=1\n    return pos\ndef find_proper_noun_position(text):\n    '''\n    Write a function to find the first proper noun and their positions in a given sentence.\n    '''\n    pos = []\n    i = 0\n    while i < len(text):\n        if re.search(\"(^|[^a-zA-Z])(n|N|c|C|f|F|i|I|l|L|m|M|n|N|p|P|r|R|s|S|t|T|v|V|w|W|y|Y|z|Z|ee|EE|ff|FF|ii|II|jj|JJ|ee|EE|ff|FF|ii|II|jj|JJ)$\",text[i]):\n            pos.append([i])\n        elif re.search(\"^[^a-zA-Z]\",text[i]):\n            if re.search(\"^[^a-zA-Z]\",text[i+1]):\n                pos.append([i,i+1])\n            else:\n                pos.append([i])\n        i+=1\n    return pos\ndef find_verb_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    pos = []\n    i = 0\n    while i < len(text):\n        if re.search(\"(^|[^a-zA-Z])(v|V|d|D|l|L|m|M|n|N|s|S|p|P|t|T|x|X|z|Z|aa|AA|ee|EE|ff|FF|ii|II|jj|JJ|kk|Kk|ll|LL|mm|MM|nn|NN|pp|PP|rr|RR|ss|SS|tt|TT|vv|VV|ww|WW|yy|YY|zz|ZZ|ee|EE|ff|FF|ii|II|jj|JJ|kk|Kk|ll|LL|mm|MM|nn|NN|pp|PP|rr|RR|ss|SS|tt|TT|vv|VV|ww|WW|yy|YY|zz|ZZ)$\",text[i]):\n            pos.append([i])\n        elif re.search(\"^[^a-zA-Z]\",text[i]):\n            if re.search(\"^[^a-zA-Z]\",text[i+1]):\n                pos.append([i,i+1])\n            else:\n                pos.append([i])\n        i+=1\n    return pos\ndef find_question_position(text):\n    '''\n    Write a function to find the first question and their positions in a given sentence.\n    '''\n    pos = []\n    i = 0\n    while i < len(text):\n        if re.search(\"(^|[^a-zA-Z])(q|Q)$\",text[i]):\n            pos.append([i])\n        elif re.search(\"^[^a-zA-Z]\",text[i]):\n            if re.search(\"^[^a-zA-Z]\",text[i+1]):\n                pos.append([i,i+1])\n            else:\n                pos.append([i])\n        i+=1\n    return pos\ndef find_determiner_position(text):\n    '''\n    Write a function to find the first determiner and their positions in a given sentence.\n    '''\n    pos = []\n    i = 0\n    while i < len(text):\n        if re.search(\"(^|[^a-zA-Z])(a|A|an|A|the|That|That|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|These|Thes",
        "num_ids": 978
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_list = []\n    text_list = text.split()\n    for i in range(len(text_list)):\n        if text_list[i] == \"be\":\n            adverb_list.append(i)\n    return adverb_list\n",
        "num_ids": 65
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    '''\n    \n    Return list of tuples in which the first element is the adverb and the second element is the position in the sentence.\n    Expected Output : [(addverb1,pos1),(addverb2,pos2),(addverb3,pos3)]\n    '''\n    adverb_list =[]\n    text = text.lower()\n    text = re.sub(r\"\\s\\s+\",\" \",text)\n    text = re.sub(r\"[.?!]\",\" \",text)\n    text = re.sub(r\"[ ]+\",\" \",text)\n    text = re.sub(r\"\\n\",\" \",text)\n    text = re.sub(r\"\\,+\",\" \",text)\n    text = re.sub(r\"\\'+\",\" \",text)\n    text = re.sub(r\"\\$+\",\" \",text)\n    text = re.sub(r\"\\(+\",\" \",text)\n    text = re.sub(r\"\\)+\",\" \",text)\n    text = re.sub(r\"\\#+\",\" \",text)\n    text = re.sub(r\"\\*+\",\" \",text)\n    text = re.sub(r\"\\/+\",\" \",text)\n    text = re.sub(r\"\\+\",\" \",text)\n    text = re.sub(r\"\\-\",\" \",text)\n    text = re.sub(r\"\\_\",\" \",text)\n    text = re.sub(r\"\\=\",\" \",text)\n    text = re.sub(r\"\\%\",\" \",text)\n    text = re.sub(r\"\\&\",\" \",text)\n    text = re.sub(r\"\\;\",\" \",text)\n    text = re.sub(r\"\\,\",\" \",text)\n    text = re.sub(r\"\\:\",\" \",text)\n    text = re.sub(r\"\\$\",\" \",text)\n    text = re.sub(r\"\\(\",\" \",text)\n    text = re.sub(r\"\\)\",\" \",text)\n    text = re.sub(r\"\\]\",\" \",text)\n    text = re.sub(r\"\\[\",\" \",text)\n    text = re.sub(r\"\\{\",\" \",text)\n    text = re.sub(r\"\\}\",\" \",text)\n    text = re.sub(r\"\\?+\",\" \",text)\n    text = re.sub(r\"\\!+\",\" \",text)\n    text = re.sub(r\"\\@+\",\" \",text)\n    text = re.sub(r\"\\#+\",\" \",text)\n    text = re.sub(r\"\\*+\",\" \",text)\n    text = re.sub(r\"\\.+\",\" \",text)\n    text = re.sub(r\"\\$+\",\" \",text)\n    text = re.sub(r\"\\(+\",\" \",text)\n    text = re.sub(r\"\\)+\",\" \",text)\n    text = re.sub(r\"\\#+\",\" \",text)\n    text = re.sub(r\"\\*+\",\" \",text)\n    text = re.sub(r\"\\/+\",\" \",text)\n    text = re.sub(r\"\\+\",\" \",text)\n    text = re.sub(r\"\\-\",\" \",text)\n    text = re.sub(r\"\\_\",\" \",text)\n    text = re.sub(r\"\\=\",\" \",text)\n    text = re.sub(r\"\\%\",\" \",text)\n    text = re.sub(r\"\\&\",\" \",text)\n    text = re.sub(r\"\\;\",\" \",text)\n    text = re.sub(r\"\\,\",\" \",text)\n    text = re.sub(r\"\\:\",\" \",text)\n    text = re.sub(r\"\\$\",\" \",text)\n    text = re.sub(r\"\\(\",\" \",text)\n    text = re.sub(r\"\\)\",\" \",text)\n    text = re.sub(r\"\\]\",\" \",text)\n    text = re.sub(r\"\\[\",\" \",text)\n    text = re.sub(r\"\\{\",\" \",text)\n    text = re.sub(r\"\\}\",\" \",text)\n    text = re.sub(r\"\\?+\",\" \",text)\n    text = re.sub(r\"\\!+\",\" \",text)\n    text = re.sub(r\"\\@+\",\" \",text)\n    text = re.sub(r\"\\#+\",\" \",text)\n    text = re.sub(r\"\\*+\",\" \",text)\n    text = re.sub(r\"\\.+\",\" \",text)\n    text = re.sub(r\"\\$+\",\" \",text)\n    text = re.sub(r\"\\(+\",\" \",text)\n    text = re.sub(r\"\\)+\",\" \",text)\n    text = re.sub(r\"\\#+\",\" \",text)\n    text = re.sub(r\"\\*+\",\" \",text)\n    text = re.sub(r\"\\/+\",\" \",text)\n    text = re.sub(r\"\\+\",\" \",text)\n    text = re.sub(r\"\\-\",\" \",text)\n    text = re.sub(r\"\\_\",\" \",text)\n    text = re.sub(r\"\\=\",\" \",text)\n    text = re.sub(r\"\\%\",\" \",text)\n    text = re.sub(r\"\\&\",\" \",text)\n    text = re.sub(r\"\\;\",\" \",text)\n    text = re.sub(r\"\\,\",\" \",text)\n    text = re.sub(r\"\\:\",\" \",text)\n    text = re.sub(r\"\\$\",\" \",text)\n    text = re.sub(r\"\\(\",\" \",text)\n    text = re.sub(r\"\\)\",\" \",text)\n    text = re.sub(r\"\\]\",\" \",text)\n    text = re.sub(r\"\\[\",\" \",text)\n    text = re.sub(r\"\\{\",\" \",text)\n    text = re.sub(r\"\\}\",\" \",text)\n    text = re.sub(r\"\\?+\",\" \",text)\n    text = re.sub(r\"\\!+\",\" \",text)\n    text = re.sub(r\"\\@+\",\" \",text)\n    text = re.sub(r\"\\#+\",\" \",text)\n    text = re.sub(r\"\\*+\",\" \",text)\n    text = re.sub(r\"\\.+\",\" \",text)\n    text = re.sub(r\"\\$+\",\" \",text)\n    text = re.sub(r\"\\(+\",\" \",text)\n    text = re.sub(r\"\\)+\",\" \",text)\n    text = re.sub(r\"\\#+\",\" \",text)\n    text = re.sub(r\"\\*+\",\" \",text)\n    text = re.sub(r\"\\/+\",\" \",text)\n    text = re.sub(r\"\\+\",\" \",text)\n    text = re.sub(r\"\\-\",\" \",text)\n    text = re.sub(r\"\\_\",\" \",text)\n    text = re.sub(r\"\\=\",\" \",text)\n    text = re.sub(r\"\\%\",\" \",text)\n    text = re.sub(r\"\\&\",\" \",text)\n    text = re.sub(r\"\\;\",\" \",text)\n    text = re.sub(r\"\\,\",\" \",text)\n    text = re.sub(r\"\\:\",\" \",text)\n    text = re.sub(r\"\\$\",\" \",text)\n    text = re.sub(r\"\\(\",\" \",text)\n    text = re.sub(r\"\\)\",\" \",text)\n    text = re.sub(r\"\\]\",\" \",text)\n    text = re.sub(r\"\\[\",\" \",text)\n    text = re.sub(r\"\\{\",\" \",text)\n    text = re.sub(r\"\\}\",\" \",text)\n    text = re.sub(r\"\\?+\",\" \",text)\n    text = re.sub(r\"\\!+\",\" \",text)\n    text = re.sub(r\"\\@+\",\" \",text)\n    text = re.sub(r\"\\#+\",\" \",text)\n    text = re.sub(r\"\\*+\",\" \",text)\n    text = re.sub(r\"\\.+\",\" \",text)\n    text ",
        "num_ids": 1942
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = []\n    adverb_positions = []\n    if (type(text)!= str):\n        raise Exception('Type must be str')\n    text = text.replace('\\n','')\n    text = text.lower()\n    text = text.split(' ')\n    for i in range(len(text)):\n        if ('to' in text[i] or 'in' in text[i] or 'for' in text[i] or 'the' in text[i] or 'with' in text[i] or 'at' in text[i] or 'or' in text[i] or 'without' in text[i] or 'by' in text[i] or'so' in text[i]):\n            adverbs.append(text[i])\n    for i in range(len(adverbs)):\n        if ('at' in adverbs[i] or 'in' in adverbs[i] or 'for' in adverbs[i] or 'the' in adverbs[i] or 'with' in adverbs[i] or 'at' in adverbs[i] or 'in' in adverbs[i] or 'for' in adverbs[i] or 'the' in adverbs[i] or 'with' in adverbs[i] or 'by' in adverbs[i] or 'at' in adverbs[i] or 'in' in adverbs[i] or 'for' in adverbs[i] or 'the' in adverbs[i] or 'with' in adverbs[i] or 'at' in adverbs[i] or 'in' in adverbs[i] or 'for' in adverbs[i] or 'the' in adverbs[i] or 'with' in adverbs[i] or 'by' in adverbs[i] or'so' in adverbs[i] or 'from' in adverbs[i] or'so' in adverbs[i] or 'the' in adverbs[i] or 'with' in adverbs[i] or 'by' in adverbs[i] or 'in' in adverbs[i] or 'in' in adverbs[i] or 'with' in adverbs[i] or 'the' in adverbs[i] or 'with' in adverbs[i]):\n            adverb_positions.append(adverbs[i])\n    return adverb_positions\n",
        "num_ids": 554
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l\n    \n    \ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere of a given radius.\n    '''\n    return 4 * 3.14159 * r * r\n    \n    \ndef volume_cube(l, w, h):\n    '''\n    Write a function to calculate the volume of a cube with dimensions l, w, and h.\n    '''\n    return l * w * h\n    \n    \ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere with a radius of r.\n    '''\n    return 4/3 * 3.14159 * r * r * r\n    \n    \ndef cuboid_volume(l, w, h):\n    '''\n    Write a function to calculate the volume of a cuboid with dimensions l, w, and h.\n    '''\n    return l * w * h\n    \n    \ndef cylinder_volume(r, h):\n    '''\n    Write a function to calculate the volume of a cylinder with a radius of r and a height of h.\n    '''\n    return 3.14159 * r * r * h\n    \n    \ndef triangle_volume(b, h):\n    '''\n    Write a function to calculate the volume of a triangle with base b and height h.\n    '''\n    return.5 * b * h\n    \n    \ndef pyramid_volume(b, h):\n    '''\n    Write a function to calculate the volume of a pyramid with base b and height h.\n    '''\n    return b * h * 1.5\n    \n    \ndef cone_volume(r, h):\n    '''\n    Write a function to calculate the volume of a cone with radius r and height h.\n    '''\n    return 3.14159 * r * (r + h)\n    \n    \ndef pyramid_volume(b, h):\n    '''\n    Write a function to calculate the volume of a pyramid with base b and height h.\n    '''\n    return b * h * 1.5\n    \n    \ndef sphere_volume(r):\n    '''\n    Write a function to calculate the volume of a sphere with a radius of r.\n    '''\n    return 4 / 3 * 3.14159 * r * r * r\n    \n    \ndef sphere_volume(r):\n    '''\n    Write a function to calculate the volume of a sphere with a radius of r.\n    '''\n    return 4 / 3 * 3.14159 * r * r * r\n    \n    \ndef volume_cone(r, h):\n    '''\n    Write a function to calculate the volume of a cone with radius r and height h.\n    '''\n    return 3.14159 * r * r * (r + h)\n    \n    \ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere with a radius of r.\n    '''\n    return 4 / 3 * 3.14159 * r * r * r\n    \n    \ndef volume_pyramid(b, h):\n    '''\n    Write a function to calculate the volume of a pyramid with base b and height h.\n    '''\n    return (b * h) * 1.5\n    \n    \ndef cube_to_pyramid(l, w, h):\n    '''\n    Write a function to convert a cube to a pyramid.\n    '''\n    return (l * w * h) / 1.5\n    \n    \ndef pyramid_to_cube(b, h):\n    '''\n    Write a function to convert a pyramid to a cube.\n    '''\n    return (b * h) / 1.5\n    \n    \ndef pyramid_to_sphere(b, h):\n    '''\n    Write a function to convert a pyramid to a sphere.\n    '''\n    return (4/3 * 3.14159 * b * b * b) / (b + h)\n    \n    \ndef sphere_to_pyramid(r):\n    '''\n    Write a function to convert a sphere to a pyramid.\n    '''\n    return ((4/3 * 3.14159 * r * r * r) / (r + 3))\n    \n    \ndef sphere_to_cube(r):\n    '''\n    Write a function to convert a sphere to a cube.\n    '''\n    return ((4/3 * 3.14159 * r * r * r) / (r * 2))\n    \n    \ndef cube_to_sphere(l, w, h):\n    '''\n    Write a function to convert a cube to a sphere.\n    '''\n    return (l * w * h) / 2\n    \n    \ndef sphere_to_sphere(r):\n    '''\n    Write a function to convert a sphere to a sphere.\n    '''\n    return ((4/3 * 3.14159 * r * r * r) / (2 * r))\n    \n    \ndef sphere_to_pyramid(r):\n    '''\n    Write a function to convert a sphere to a pyramid.\n    '''\n    return ((4/3 * 3.14159 * r * r * r) / (2 * r + 3))\n    \n    \ndef pyramid_to_sphere(b, h):\n    '''\n    Write a function to convert a pyramid to a sphere.\n    '''\n    return ((4/3 * 3.14159 * b * b * b) / (b + h))\n    \n    \ndef pyramid_to_cube(b, h):\n    '''\n    Write a function to convert a pyramid to a cube.\n    '''\n    return ((4/3 * 3.14159 * b * b * b) / (b * 2))\n    \n    \ndef cube_to_pyramid(l, w, h):\n    '''\n    Write a function to convert a cube to a pyramid.\n    '''\n    return (l * w * h) / 2\n    \n    \ndef cube_to_sphere(l, w, h):\n    '''\n    Write a function to convert a cube to a sphere.\n    '''\n    return (l * w * h) / 3\n    \n    \ndef sphere_to_cube(r):\n    '''\n    Write a function to convert a sphere to a cube.\n    '''\n    return ((4/3 * 3.14159 * r * r * r) / (3 * r))\n    \n    \ndef cube_to_sphere(l, w, h):\n    '''\n    Write a function to convert a cube to a sphere.\n    '''\n    return ((4/3 * 3.14159 * l * w * h) / (2 * l))\n    \n    \ndef sphere_to_pyramid(r):\n    '''\n    Write a function to convert a sphere to a pyramid.\n    '''\n    return ((4/3 * 3.14159 * r * r * r) / (2 * r + 3))\n    \n    \ndef pyramid_to_cube(b, h):\n    '''\n    Write a function to convert a pyramid to a cube.\n    '''\n    return ((4/3 * 3.14159 * b * b * b) / (b * 2))\n    \n    \ndef pyramid_to_sphere(b, h):\n    '''\n    Write a function to convert a pyramid to a sphere.\n    '''\n    return ((4/3 * 3.14159 * b * b * b) / (b + h))\n    \n    \ndef cube_to_sphere(l, w, h):\n    '''\n    Write a function to convert a cube to a sphere.\n    '''\n    return ((4/3 * 3.14159 * l * w * h) / (3 * l))\n    \n    \ndef sphere_to_sphere(r):\n    '''\n    Write a function to convert a sphere to a sphere.\n    '''\n    return ((4/3 * 3.14159 * r * r * r) / (2 * r))\n    \n    \ndef sphere_to_pyramid(r):\n    '''\n    Write a function to convert a sphere to a pyramid.\n    '''\n    return ((4/3 * 3.14159 * r * r * r) / (2 * r + 3))\n    \n    \ndef pyramid_to_sphere(b, h):\n    '''\n    Write a function to convert a pyramid to a sphere.\n    '''\n    return ((4/3 * 3.14159 ",
        "num_ids": 14
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = l * l * l\n    return a\n",
        "num_ids": 15
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6*l**2\n    return area\n",
        "num_ids": 15
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surf = l**2\n    return surf\n",
        "num_ids": 14
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)\n",
        "num_ids": 12
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    \n    return 6 * l ** 2\n",
        "num_ids": 12
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos = 0\n    for i in nums:\n        if i >= 0:\n            pos += 1\n    return pos\n    \nnums = [-2, -1, 1, 2]\nprint(positive_count(nums))\n",
        "num_ids": 57
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return len(list(filter(lambda x: x > 0, nums))) / len(nums)\n",
        "num_ids": 27
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = []\n    for number in nums:\n        if number > 0:\n            positives.append(number)\n    return len(positives)/len(nums)\n",
        "num_ids": 45
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # return the number of positive integers in the array\n    # use the sum function in array as well\n    # for this challenge, don't use any loops\n",
        "num_ids": 37
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count_pos = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count_pos += 1\n    return count_pos / len(nums)\nprint(positive_count([-3,4,-2,1,-7,12]))\ndef array_logic(nums):\n    '''\n    Write a function to find the sum of all the positive numbers in an array of integers.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            sum += nums[i]\n    return sum\nprint(array_logic([-3,4,-2,1,-7,12]))\ndef max_sum_subarray(nums):\n    '''\n    Write a function to find the maximum sum of any contiguous subarray of the array.\n    '''\n    sum = 0\n    max_sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\nprint(max_sum_subarray([-2,1,-3,4,-1,2,1,-5,4]))\ndef max_subarray(nums):\n    '''\n    Write a function that finds the maximum sum of any contiguous subarray in the array.\n    '''\n    max_sum = 0\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\nprint(max_subarray([-2,1,-3,4,-1,2,1,-5,4]))\ndef largest_sum_subarray(nums):\n    '''\n    Write a function that finds the maximum sum of any contiguous subarray in the array.\n    '''\n    max_sum = 0\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\nprint(largest_sum_subarray([-2,1,-3,4,-1,2,1,-5,4]))\ndef sum_of_subarray(nums):\n    '''\n    Write a function that finds the sum of all the positive numbers in the array.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n    return sum\nprint(sum_of_subarray([-2,1,-3,4,-1,2,1,-5,4]))\ndef sum_of_subarray_2(nums):\n    '''\n    Write a function that finds the sum of all the positive numbers in the array.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            sum += nums[i]\n    return sum\nprint(sum_of_subarray_2([-2,1,-3,4,-1,2,1,-5,4]))\ndef find_and_replace_pair(nums):\n    '''\n    Write a function that finds the first element of an array that repeats twice and replace it with the second element.\n    '''\n    seen = {}\n    for i in range(len(nums)):\n        if nums[i] in seen:\n            seen[nums[i]] += 1\n        else:\n            seen[nums[i]] = 1\n    for i in range(len(nums)):\n        if seen[nums[i]] == 2:\n            return i\nprint(find_and_replace_pair([5,1,3,5,3,1,3,3,5,5]))\ndef find_and_replace_pair_1(nums):\n    '''\n    Write a function that finds the first element of an array that repeats twice and replace it with the second element.\n    '''\n    seen = {}\n    for i in range(len(nums)):\n        if nums[i] in seen:\n            seen[nums[i]] += 1\n        else:\n            seen[nums[i]] = 1\n    for i in range(len(nums)):\n        if seen[nums[i]] == 2:\n            return i\nprint(find_and_replace_pair_1([5,1,3,5,3,1,3,3,5,5]))\ndef find_and_replace_pair_2(nums):\n    '''\n    Write a function that finds the first element of an array that repeats twice and replace it with the second element.\n    '''\n    for i in range(len(nums)):\n        if nums[i]!= nums[i+1]:\n            return i\nprint(find_and_replace_pair_2([5,1,3,5,3,1,3,3,5,5]))\ndef find_and_replace_pair_3(nums):\n    '''\n    Write a function that finds the first element of an array that repeats twice and replace it with the second element.\n    '''\n    for i in range(len(nums)-1):\n        if nums[i]!= nums[i+1]:\n            return i\nprint(find_and_replace_pair_3([5,1,3,5,3,1,3,3,5,5]))\ndef find_and_replace_pair_4(nums):\n    '''\n    Write a function that finds the first element of an array that repeats twice and replace it with the second element.\n    '''\n    for i in range(len(nums)):\n        if nums[i]!= nums[i+1]:\n            return i\n        else:\n            return -1\nprint(find_and_replace_pair_4([5,1,3,5,3,1,3,3,5,5]))\ndef find_and_replace_pair_5(nums):\n    '''\n    Write a function that finds the first element of an array that repeats twice and replace it with the second element.\n    '''\n    for i in range(len(nums)-1):\n        if nums[i]!= nums[i+1]:\n            return i\n        else:\n            return -1\nprint(find_and_replace_pair_5([5,1,3,5,3,1,3,3,5,5]))\ndef max_subarray_2(nums):\n    '''\n    Write a function that finds the maximum sum of any contiguous subarray in the array.\n    '''\n    max_sum = nums[0]\n    sum = nums[0]\n    for i in range(len(nums)):\n        if max_sum < nums[i]:\n            max_sum = nums[i]\n    for i in range(len(nums)):\n        sum = sum + nums[i]\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\nprint(max_subarray_2([-2,1,-3,4,-1,2,1,-5,4]))\ndef sum_subarray(nums):\n    '''\n    Write a function that finds the maximum sum of any contiguous subarray in the array.\n    '''\n    max_sum = 0\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\nprint(sum_subarray([-2,1,-3,4,-1,2,1,-5,4]))\ndef sum_subarray_2(nums):\n    '''\n    Write a function that finds the maximum sum of any contiguous subarray in the array.\n    '''\n    max_sum = 0\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\nprint(sum_subarray_2([-2,1,-3,4,-1,2,1,-5,4]))\ndef median_of_array(nums):\n    '''\n    Write a function that finds the median of any contiguous subarray in th",
        "num_ids": 17
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    #n = len(nums)\n    #pos_count = 0\n    #for i in nums:\n    #    if i > 0:\n    #        pos_count += 1\n    #return float(pos_count / n)\n",
        "num_ids": 59
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count / len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count\n    \nprint(positive_count([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n",
        "num_ids": 81
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count=0\n    for i in nums:\n        if i>=0:\n            count+=1\n    return count/len(nums)\n",
        "num_ids": 38
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = 0\n    for i in range(len(list1)):\n        if list1[i]<0 and list1[i]>largest:\n            largest = list1[i]\n    return largest\n",
        "num_ids": 52
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for i in range(len(list1)):\n        if max_neg < list1[i]:\n            max_neg = list1[i]\n    return max_neg\n",
        "num_ids": 55
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = -1\n    for i in range(len(list1)):\n        if list1[i] > max:\n            max = list1[i]\n    print(max)\n",
        "num_ids": 47
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg
        "num_ids": 2015
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort()\n    max = list1[-1]\n    if max < 0:\n        return max\n    else:\n        return -1\n",
        "num_ids": 39
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_n = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] > largest_n:\n            largest_n = list1[i]\n    return largest_n\n",
        "num_ids": 58
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -1\n    for item in list1:\n        if item < 0:\n            if item > max_neg:\n                max_neg = item\n    return max_neg\n",
        "num_ids": 47
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_number = 0\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            if list1[i] > max_number:\n                max_number = list1[i]\n    return max_number\n",
        "num_ids": 63
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = 0\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            if list1[i] > largest_num:\n                largest_num = list1[i]\n    return largest_num\n",
        "num_ids": 63
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg = []\n    for i in range(0, len(list1)):\n        if list1[i] < 0:\n            neg.append(list1[i])\n    print(neg)\n",
        "num_ids": 50
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list\n",
        "num_ids": 40
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if K == 1:\n        return test_list\n    if len(test_list) > K:\n        return trim_tuple(test_list[:K], K)\n    else:\n        return test_list\n",
        "num_ids": 54
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list\n",
        "num_ids": 54
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][0:K]\n    return test_list\n",
        "num_ids": 41
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trim_list = []\n    for i in test_list:\n        if len(i) == K:\n            trim_list.append(i)\n    return trim_list\n",
        "num_ids": 46
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    list_of_tuples = []\n    for i in range(len(test_list)):\n        list_of_tuples.append(test_list[i][:K])\n    return list_of_tuples\n",
        "num_ids": 55
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    \n    new_list = []\n",
        "num_ids": 11
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Your code here\n    l = len(test_list)\n    for i in range(0, l):\n        if test_list[i][1] < K:\n            test_list.remove(test_list[i])\n    return test_list\n",
        "num_ids": 63
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for item in test_list:\n        new_item = item[:K]\n        new_list.append(new_item)\n    return new_list\n",
        "num_ids": 47
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][K:]\n    return test_list\n",
        "num_ids": 39
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    tup = []\n    for i in range(len(test_tup1)):\n        num = test_tup1[i] * test_tup2[i]\n        tup.append(num)\n    return tuple(tup)\n",
        "num_ids": 62
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    try:\n        return tuple(map(lambda x, y: x * y, test_tup1, test_tup2))\n    except TypeError:\n        return None\n",
        "num_ids": 44
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    x = 0\n    for i in range(len(test_tup1)):\n        x += test_tup1[i]*test_tup2[i]\n    return x\n",
        "num_ids": 48
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    '''\n    Test Data:\n    test_tup1 = (1,3,5)\n    test_tup2 = (7,2,4)\n    Expected Output:\n    (1,7,15,14,28,24)\n    '''\n    multiplied_tup = []\n    for i in range(len(test_tup1)):\n        multiplied_tup.append(test_tup1[i]*test_tup2[i])\n    return multiplied_tup\n",
        "num_ids": 61
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    #tuples are already passed in tuples\n    return(test_tup1, test_tup2)\n",
        "num_ids": 29
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_mul_tuple = tuple(x * y for x, y in zip(test_tup1, test_tup2))\n    print(index_mul_tuple)\n",
        "num_ids": 48
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(map(lambda x,y : x*y, test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    new_tup1 = ()\n    new_tup2 = ()\n",
        "num_ids": 20
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    result = test_tup1[0] * test_tup2[0],\n    result = test_tup1[1] * test_tup2[1],\n    return result\n",
        "num_ids": 53
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    out_tup = ()\n    for i in range(0,len(test_tup1)):\n        out_tup += (test_tup1[i]*test_tup2[i],)\n    return out_tup\n",
        "num_ids": 63
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if tup.count(i)>0:\n            count+=1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup) == Counter(lst)\n    \ndef count_Occurrence_new(lst1, lst2): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for el in lst1:\n        count += lst2.count(el)\n    return count\n    \ndef reverse_string(str):\n    '''\n    Write a python function to reverse the string\n    '''\n    return str[::-1]\n",
        "num_ids": 11
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    res = []\n    for i in tup:\n        if i in lst:\n            res.append(lst.count(i))\n    return res\n",
        "num_ids": 40
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst).items()\n",
        "num_ids": 12
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in range(len(tup)):\n        if(tup[i] == lst[i]):\n            count += 1\n    return count \ntup = (1,2,1,3,1,4,5,2,2,2,3,4,5,5) \nlst = [1,2,1,3,1,4,5,2,2,2,3,4,5,5] \nprint(count_Occurrence(tup, lst)) \n",
        "num_ids": 129
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for i in range(len(lst)):\n        lst[i] = tup[i]\n    return Counter(lst)\n",
        "num_ids": 36
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = Counter(lst) \n    print(cnt)\n    \n    for k in tup:\n        if k in cnt:\n            print(k, cnt[k])\n        else:\n            print(k, 'Not Found')\n",
        "num_ids": 63
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return len(Counter(lst).items())\n",
        "num_ids": 14
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup)",
        "num_ids": 9
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for i in range(len(lst)):\n        if tup[i] in lst:\n            lst[lst.index(tup[i])] += 1\n        else:\n            lst.append(tup[i])\n            lst[lst.index(tup[i])] = 1\n    return lst\n",
        "num_ids": 84
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_nums = []\n    for i in range(len(nums)):\n        cube_nums.append(nums[i] ** 3)\n    print(cube_nums)\n",
        "num_ids": 49
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_nums = []\n    for num in nums:\n        cube_nums.append(num**3)\n    return cube_nums\n",
        "num_ids": 38
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i*i*i for i in nums]\n",
        "num_ids": 17
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** 3\n    return nums\n",
        "num_ids": 35
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num*num*num)\n    return result\nprint(cube_nums([1,2,3,4,5])) #[1, 8, 27, 64, 125]\n",
        "num_ids": 62
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for num in nums:\n        cube_list.append(num**3)\n    return cube_list\n",
        "num_ids": 35
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube = []\n    for num in nums:\n        cube.append(num**3)\n    return cube\n",
        "num_ids": 29
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [cube for num in nums for cube in list(map(lambda x: x ** 3, num))]\n",
        "num_ids": 29
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # copy of the nums list\n    nums_cubes = nums.copy()\n",
        "num_ids": 24
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return nums**3\n",
        "num_ids": 9
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return (n*(n+1)/2)\n",
        "num_ids": 15
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    i = 2\n    while i <= n: \n        if n % i == 0: \n            sum += i \n            n = n / i \n            i = 2\n        else: \n            i += 1\n    return sum + n \n",
        "num_ids": 66
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(n):\n        if n%i==0:\n            s += i\n    return s\n",
        "num_ids": 34
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    \n    if n == 0:\n        return 0\n    else:\n        return n + cal_sum(n-1)\n",
        "num_ids": 32
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    print('Sum of {} number is {}'.format(n, n*(n+1)*(2*n+1)/6)) \n",
        "num_ids": 34
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_result = 0\n    for i in range(2, n + 1):\n        if math.sqrt(i).is_integer():\n            sum_result += i\n",
        "num_ids": 43
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0\n    if n <= 1:\n        return n\n    else:\n        result = n + cal_sum(n - 1)\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    import math\n    num = int(n)\n    perrin = 0\n    for i in range(1, num+1):\n        if math.sqrt(i).is_integer() and (math.sqrt(i))**2 == i:\n            perrin += i\n    return perrin\n",
        "num_ids": 72
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    assert n >= 0\n    if n == 0: \n        return 0\n    else: \n        return (n * (n+1)) // 2\n",
        "num_ids": 38
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    l = list(l)\n    l = l[:len(l)-len(l)%l]\n    l = l[:len(l)-l%l]\n    return l\n",
        "num_ids": 47
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l == None or len(l) < 1:\n        return []\n    if l == []:\n        return []\n    if l == ['a']:\n        return ['a']\n    if l == ['a','a']:\n        return ['a']\n    if l == ['a','b']:\n        return ['a','b']\n    if l == ['a','b','c']:\n        return ['a','b','c']\n    if l == ['a','b','c','d']:\n        return ['a','b','c','d']\n    if l == ['a','b','c','d','e']:\n        return ['a','b','c','d','e']\n    \n    first = ''\n    for i in range(l):\n        first += 'a'\n    return first\n",
        "num_ids": 190
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if str is None:\n        print(f\"Invalid data format for str:{str}\")\n        return\n    if l is None:\n        print(f\"Invalid data format for l:{l}\")\n        return\n    if len(str) == 0 or len(l) == 0:\n        print(f\"Invalid data format for str:{str} and l:{l}\")\n        return\n    if len(str)!= len(l):\n        print(f\"Invalid data format for str:{str} and l:{l}\")\n        return\n    return str[:l]\n",
        "num_ids": 135
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    str_list = []\n    n = l - l%5\n    if n == l:\n        for i in range(0, n):\n            str_list.append(str[i])\n        return str_list\n    elif n > l:\n        for i in range(0, l):\n            str_list.append(str[i])\n        for i in range(l, n):\n            str_list.append(str[i])\n        return str_list\n    else:\n        for i in range(0, n):\n            str_list.append(str[i])\n        return str_list\n",
        "num_ids": 147
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return(str[l])\n",
        "num_ids": 10
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    lst = []\n    for x in range(l):\n        lst.append(str[x])\n    return lst\n",
        "num_ids": 33
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(l):\n        if len(str) > 0:\n            result.append(str[0])\n            str = str[1:]\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    i = 0\n    new_list = []\n    while i < l:\n        if len(str) > 0:\n            new_list.append(str[0])\n            str.remove(str[0])\n        else:\n            break\n        i += 1\n    return new_list\n",
        "num_ids": 71
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    s = \"\"\n    for i in range(l):\n        s += str[i]\n    return s\n",
        "num_ids": 28
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    s = \"\"\n    for x in range(l):\n        s += str[x]\n    return s\n",
        "num_ids": 28
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(' ','')\ndef check_website_status(text2):\n    '''\n    Write a function to check if the given string is a valid URL or not.\n    '''\n    url_pattern = re.compile('^(?:http|ftp)s?://'\n    '(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'\n    'localhost|'\n    '\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'\n    '(?::\\d+)?'\n    '(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return bool(url_pattern.match(text2))\n",
        "num_ids": 185
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(' ','')\n",
        "num_ids": 13
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(' ','')\n    \ndef remove_punctuation(text1):\n    '''\n    Write a function to remove all the punctuation from the given string.\n    '''\n    return re.sub('[^\\w\\s]', '', text1)\n    \ndef remove_capitalization(text1):\n    '''\n    Write a function to remove the capitalization from the given string.\n    '''\n    return text1.lower()\n    \ndef check_if_string_is_palindrome(text1):\n    '''\n    Write a function to check if the given string is palindrome or not.\n    '''\n    text1 = text1.replace(' ', '')\n    text1 = text1.replace('\\n', '')\n    return text1 == text1[::-1]\n",
        "num_ids": 43
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n",
        "num_ids": 10
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    while(''in text1):\n        text1 = text1.replace(' ','')\n    return text1\n",
        "num_ids": 29
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    import re\n    text1 = text1.strip()\n    text1 = re.sub(r\"\\s+\", \" \", text1)\n    return text1\ndef remove_punctuation(text1):\n    '''\n    Write a function to remove all the punctuation from the given string.\n    '''\n    import string\n    text1 = text1.translate(str.maketrans('', '', string.punctuation))\n    return text1\ndef remove_digits(text1):\n    '''\n    Write a function to remove all the digits from the given string.\n    '''\n    import re\n    text1 = re.sub('\\d+', '', text1)\n    return text1\ndef remove_html(text1):\n    '''\n    Write a function to remove all the html tags from the given string.\n    '''\n    import re\n    text1 = re.sub('<.*?>', '', text1)\n    return text1\ndef remove_special_characters(text1):\n    '''\n    Write a function to remove all the special characters from the given string.\n    '''\n    import re\n    text1 = re.sub('[^a-zA-Z0-9 ]+', '', text1)\n    return text1\ndef is_ip_address(text1):\n    '''\n    Write a function to check if the given string is an ip address or not.\n    '''\n    import re\n    pattern = re.compile(\n        '^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9])$')\n    match = pattern.search(text1)\n    if match:\n        print(\"True\")\n        return True\n    else:\n        print(\"False\")\n        return False\ndef is_mac_address(text1):\n    '''\n    Write a function to check if the given string is a mac address or not.\n    '''\n    import re\n    pattern = re.compile(\n        '^([0-9a-fA-F]{2}:){5}([0-9a-fA-F]{2})$')\n    match = pattern.search(text1)\n    if match:\n        print(\"True\")\n        return True\n    else:\n        print(\"False\")\n        return False\ndef is_date(text1):\n    '''\n    Write a function to check if the given string is a date or not.\n    '''\n    import re\n    pattern = re.compile('\\d{4}-\\d{2}-\\d{2}')\n    match = pattern.search(text1)\n    if match:\n        print(\"True\")\n        return True\n    else:\n        print(\"False\")\n        return False\ndef is_email_address(text1):\n    '''\n    Write a function to check if the given string is an email address or not.\n    '''\n    import re\n    pattern = re.compile('[a-zA-Z0-9_-]+@[a-zA-Z0-9]+\\.[a-zA-Z0-9]+')\n    match = pattern.search(text1)\n    if match:\n        print(\"True\")\n        return True\n    else:\n        print(\"False\")\n        return False\ndef is_valid_email(email):\n    \"\"\"\n    Check if the email string is valid.\n",
        "num_ids": 115
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return ''.join(text1.split())\n",
        "num_ids": 14
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    result = re.sub('\\s+','', text1)\n    return result\n",
        "num_ids": 22
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub('[\\s]+','', text1)\n    return text1\n    \ndef is_odd(n):\n    '''\n    Write a function to return true if the given number is odd, otherwise return false.\n    '''\n    return n%2!= 0\n",
        "num_ids": 11
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \",\"\")\n",
        "num_ids": 13
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount\n",
        "num_ids": 12
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost*sale_amount/100\n",
        "num_ids": 14
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return sale_amount - actual_cost\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = actual_cost - sale_amount\n    return loss_amount\n",
        "num_ids": 21
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost==0:\n        return 0\n    else:\n        return sale_amount - actual_cost\n",
        "num_ids": 29
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost == sale_amount:\n        return 0\n    else:\n        return sale_amount - actual_cost\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost == 0 or actual_cost == sale_amount:\n        return actual_cost\n    else:\n        return 0\n",
        "num_ids": 33
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if(actual_cost<sale_amount):\n        return 0\n    else:\n        return (sale_amount-actual_cost)\n",
        "num_ids": 34
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i = 1\n    sum = 0\n    while i < n : \n        if (i % 2 == 0 ) : \n            sum = sum + i \n        i = i + 1\n    return sum\n    ",
        "num_ids": 52
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if (n%i == 0) :\n            sum = sum + i\n    return sum\n",
        "num_ids": 43
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    Sum=0\n    factors=[]\n    while(n%2==0):\n        factors.append(2)\n        n=n/2\n    for i in range(1,n):\n        if(n%i==0):\n            factors.append(i)\n    for i in factors:\n        Sum=Sum+i\n    print(\"Sum of Even factors of\",n,\"is:\",Sum)\ndef sumofFactorsV2(n) :\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    Sum=0\n    factors=[]\n    while(n%2==0):\n        factors.append(2)\n        n=n/2\n    for i in range(1,n):\n        if(n%i==0):\n            factors.append(i)\n    for i in factors:\n        Sum=Sum+i\n    return Sum\ndef sumofFactorsV3(n) :\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    Sum=0\n    factors=[]\n    while(n%2==0):\n        factors.append(2)\n        n=n/2\n    for i in range(1,n):\n        if(n%i==0):\n            factors.append(i)\n    for i in factors:\n        Sum=Sum+i\n    return Sum\ndef sumofFactorsV4(n) :\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    Sum=0\n    factors=[]\n    while(n%2==0):\n        factors.append(2)\n        n=n/2\n    for i in range(1,n):\n        if(n%i==0):\n            factors.append(i)\n    for i in factors:\n        Sum=Sum+i\n    return sum(x for x in factors if x%2==0)\ndef sumofFactorsV5(n) :\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    Sum=0\n    factors=[]\n    while(n%2==0):\n        factors.append(2)\n        n=n/2\n    for i in range(1,n):\n        if(n%i==0):\n            factors.append(i)\n    for i in factors:\n        Sum=Sum+i\n    return sum(factors)\ndef sumofFactorsV6(n) :\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    Sum=0\n    factors=[]\n    while(n%2==0):\n        factors.append(2)\n        n=n/2\n    for i in range(1,n):\n        if(n%i==0):\n            factors.append(i)\n    for i in factors:\n        Sum=Sum+i\n    return sum(factors)\ndef primeFactors(n) :\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    if(n<2):\n        return []\n    factors=[]\n    while(n%2==0):\n        factors.append(2)\n        n=n/2\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if(n%i==0):\n            factors.append(i)\n            while(n%i==0):\n                n=n/i\n    if(n>2):\n        factors.append(n)\n    return factors\ndef primeFactorsV2(n) :\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    if(n<2):\n        return []\n    factors=[]\n    while(n%2==0):\n        factors.append(2)\n        n=n/2\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if(n%i==0):\n            factors.append(i)\n            while(n%i==0):\n                n=n/i\n    if(n>2):\n        factors.append(n)\n    return factors\ndef primeFactorsV3(n) :\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    if(n<2):\n        return []\n    factors=[]\n    while(n%2==0):\n        factors.append(2)\n        n=n/2\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if(n%i==0):\n            factors.append(i)\n            while(n%i==0):\n                n=n/i\n    if(n>2):\n        factors.append(n)\n    return factors\ndef primeFactorsV4(n) :\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    if(n<2):\n        return []\n    factors=[]\n    while(n%2==0):\n        factors.append(2)\n        n=n/2\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if(n%i==0):\n            factors.append(i)\n            while(n%i==0):\n                n=n/i\n    if(n>2):\n        factors.append(n)\n    return factors\ndef primeFactorsV5(n) :\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    if(n<2):\n        return []\n    factors=[]\n    while(n%2==0):\n        factors.append(2)\n        n=n/2\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if(n%i==0):\n            factors.append(i)\n            while(n%i==0):\n                n=n/i\n    if(n>2):\n        factors.append(n)\n    return factors\ndef primeFactorsV6(n) :\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    if(n<2):\n        return []\n    factors=[]\n    while(n%2==0):\n        factors.append(2)\n        n=n/2\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if(n%i==0):\n            factors.append(i)\n            while(n%i==0):\n                n=n/i\n    if(n>2):\n        factors.append(n)\n    return factors\ndef primeFactorsV7(n) :\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    if(n<2):\n        return []\n    factors=[]\n    while(n%2==0):\n        factors.append(2)\n        n=n/2\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if(n%i==0):\n            factors.append(i)\n            while(n%i==0):\n                n=n/i\n    if(n>2):\n        factors.append(n)\n    return factors\ndef primeFactorsV8(n) :\n    '''\n    Write a python function to find the prime factors of a given number.\n    '''\n    if(n<2):\n        return []\n    factors=[]\n    while(n%2==0):\n        factors.append(2)\n        n=n/2\n    for i in range(3,int(math.sqrt(n))+1,2):\n        if(n%i==0):\n            factors.append(i)\n            while(n%i==0):\n                n=n/i\n    if(n>2):\n        factors.append(n)\n    return factors\ndef primeFactorsV9(n",
        "num_ids": 134
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    print(n,\"=\", end=\"\")\n    for i in range(1, n + 1) :\n        if n % i == 0 and i % 2 == 0 :\n            print(i, end=\",\")\n    print()\n    # return n * (n - 1) / 2\n",
        "num_ids": 69
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum=0\n    for i in range(1,n) :\n        if(n%i==0):\n            sum=sum+i\n    return(sum)\n    \ndef squareofDigits(n) : \n    '''\n    Write a python function to calculate square of digits of a number.\n    '''\n    sum =0\n    while(n>0) : \n        sum = sum + (n%10)*(n%10)\n        n=n//10\n    return(sum)\n    \ndef squares(n) :\n    '''\n    Write a python function to calculate the squares of digits of a number.\n    '''\n    sum =0\n    while(n>0) : \n        sum = sum + (n%10)*(n%10)\n        n=n//10\n    return(sum)\n    \ndef sumofSquareOfDigits(n) :\n    '''\n    Write a python function to calculate sum of squares of digits of a number.\n    '''\n    sum =0\n    while(n>0) : \n        sum = sum + (n%10)*(n%10)*(n%10)\n        n=n//10\n    return(sum)\n    \ndef sumofSquare(n) :\n    '''\n    Write a python function to calculate sum of squares of digits of a number.\n    '''\n    sum =0\n    while(n>0) : \n        sum = sum + (n%10)*(n%10)*(n%10)\n        n=n//10\n    return(sum)\n    \ndef sumofDigits(n) :\n    '''\n    Write a python function to calculate sum of digits of a number.\n    '''\n    sum =0\n    while(n>0) : \n        sum = sum + (n%10)\n        n=n//10\n    return(sum)\n    \ndef sumofDigitsSquare(n) :\n    '''\n    Write a python function to calculate sum of digits of a number.\n    '''\n    sum =0\n    while(n>0) : \n        sum = sum + (n%10)*(n%10)\n        n=n//10\n    return(sum)\n    \ndef sumofDigitsSquareRoot(n) :\n    '''\n    Write a python function to calculate sum of digits of a number.\n    '''\n    sum =0\n    while(n>0) : \n        sum = sum + (n%10)*(n%10)*(n%10)\n        n=n//10\n    return(math.sqrt(sum))\n    \ndef sumofDigitsSquareRoot(n) :\n    '''\n    Write a python function to calculate sum of digits of a number.\n    '''\n    sum =0\n    while(n>0) : \n        sum = sum + (n%10)*(n%10)*(n%10)\n        n=n//10\n    return(sum)\n    \ndef sumofDigitsSquareRoot(n) :\n    '''\n    Write a python function to calculate sum of digits of a number.\n    '''\n    sum =0\n    while(n>0) : \n        sum = sum + (n%10)*(n%10)*(n%10)\n        n=n//10\n    return(sum)\n    \ndef sumofDigitsSquareRoot(n) :\n    '''\n    Write a python function to calculate sum of digits of a number.\n    '''\n    sum =0\n    while(n>0) : \n        sum = sum + (n%10)*(n%10)*(n%10)\n        n=n//10\n    return(sum)\n    \ndef sumofDigitsSquareRoot(n) :\n    '''\n    Write a python function to calculate sum of digits of a number.\n    '''\n    sum =0\n    while(n>0) : \n        sum = sum + (n%10)*(n%10)*(n%10)\n        n=n//10\n    return(sum)\n    \ndef sumofDigitsSquareRoot(n) :\n    '''\n    Write a python function to calculate sum of digits of a number.\n    '''\n    sum =0\n    while(n>0) : \n        sum = sum + (n%10)*(n%10)*(n%10)\n        n=n//10\n    return(sum)\n    \ndef sumofDigitsSquareRoot(n) :\n    '''\n    Write a python function to calculate sum of digits of a number.\n    '''\n    sum =0\n    while(n>0) : \n        sum = sum + (n%10)*(n%10)*(n%10)\n        n=n//10\n    return(sum)\n    \ndef sumofDigitsSquareRoot(n) :\n    '''\n    Write a python function to calculate sum of digits of a number.\n    '''\n    sum =0\n    while(n>0) : \n        sum = sum + (n%10)*(n%10)*(n%10)\n        n=n//10\n    return(sum)\n    \ndef sumofDigitsSquareRoot(n) :\n    '''\n    Write a python function to calculate sum of digits of a number.\n    '''\n    sum =0\n    while(n>0) : \n        sum = sum + (n%10)*(n%10)*(n%10)\n        n=n//10\n    return(sum)\n    \ndef sumofDigitsSquareRoot(n) :\n    '''\n    Write a python function to calculate sum of digits of a number.\n    '''\n    sum =0\n    while(n>0) : \n        sum = sum + (n%10)*(n%10)*(n%10)\n        n=n//10\n    return(sum)\n    \ndef sumofDigitsSquareRoot(n) :\n    '''\n    Write a python function to calculate sum of digits of a number.\n    '''\n    sum =0\n    while(n>0) : \n        sum = sum + (n%10)*(n%10)*(n%10)\n        n=n//10\n    return(sum)\n    \ndef sumofDigitsSquareRoot(n) :\n    '''\n    Write a python function to calculate sum of digits of a number.\n    '''\n    sum =0\n    while(n>0) : \n        sum = sum + (n%10)*(n%10)*(n%10)\n        n=n//10\n    return(sum)\n    \ndef sumofDigitsSquareRoot(n) :\n    '''\n    Write a python function to calculate sum of digits of a number.\n    '''\n    sum =0\n    while(n>0) : \n        sum = sum + (n%10)*(n%10)*(n%10)\n        n=n//10\n    return(sum)\n    \ndef sumofDigitsSquareRoot(n) :\n    '''\n    Write a python function to calculate sum of digits of a number.\n    '''\n    sum =0\n    while(n>0) : \n        sum = sum + (n%10)*(n%10)*(n%10)\n        n=n//10\n    return(sum)\n    \ndef sumofDigitsSquareRoot(n) :\n    '''\n    Write a python function to calculate sum of digits of a number.\n    '''\n    sum =0\n    while(n>0) : \n        sum = sum + (n%10)*(n%10)*(n%10)\n        n=n//10\n    return(sum)\n    \ndef sumofDigitsSquareRoot(n) :\n    '''\n    Write a python function to calculate sum of digits of a number.\n    '''\n    sum =0\n    while(n>0) : \n        sum = sum + (n%10)*(n%10)*(n%10)\n        n=n//10\n    return(sum)\n    \ndef sumofDigitsSquareRoot(n) :\n    '''\n    Write a python function to calculate sum of digits of a number.\n    '''\n    sum =0\n    while(n>0) : \n        sum = sum + (n%10)*(n%10)*(n%10)\n        n=n//10\n    return(sum)\n    \ndef sumofDigitsSquareRoot(n) :\n    ''",
        "num_ids": 67
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(1,n+1) : \n        if (n%i == 0) : \n            s = s + i \n    return s \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    i = 1\n    while (i <= n) : \n        if (n%i == 0) : \n            s = s + i \n            i = i + 1\n        else : \n            i = i + 1\n    return s",
        "num_ids": 64
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sumOfFactors = 0\n    for i in range(2,n) :\n        if(n%i == 0) :\n            sumOfFactors += i\n    return(sumOfFactors)\n    \ndef factorial(n) : \n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    factorial = 1\n    for i in range(1,n+1):\n        factorial = factorial * i\n    return(factorial)\n",
        "num_ids": 37
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    for i in range(1,n+1) :\n        if (n%i == 0) and (i%2 == 0) :\n            total += i\n    return total\nprint(sumofFactors(15))\n",
        "num_ids": 59
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum=0\n    while(n>0):\n        fact=n//2\n        if fact==n/2:\n            sum=sum+fact\n        n=n-fact\n    return sum\n",
        "num_ids": 49
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if(n==1):\n        return 1\n    else:\n        return (n*sumofFactors(int(n/2)))\n",
        "num_ids": 35
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # return re.search(r\"z\", text)\n    # print(re.search(r\"z\", text))\n    return re.search(r\"z\", text)\n    \ndef replace_words(text):\n    '''\n    Write a function that replaces each word containing 'z' with 'x'.\n    '''\n    # return re.sub(r\"z\", \"x\", text)\n    # print(re.sub(r\"z\", \"x\", text))\n    return re.sub(r\"z\", \"x\", text)\n    \ndef test_replace_words():\n    assert(text_match_wordz(replace_words(\"zebra and a dog!\")) == True)\n    assert(text_match_wordz(replace_words(\"zebra zebra and a dog!\")) == True)\n    assert(text_match_wordz(replace_words(\"A zebra and a dog!\")) == True)\n    assert(text_match_wordz(replace_words(\"a zebra and a dog!\")) == True)\n    assert(text_match_wordz(replace_words(\"zebra and a dog!\")) == True)\n    assert(text_match_wordz(replace_words(\"zebra zebra and a dog!\")) == False)\n    assert(text_match_wordz(replace_words(\"a zebra and a dog!\")) == False)\n    assert(text_match_wordz(replace_words(\"A zebra and a dog!\")) == False)\n    \nif __name__ == \"__main__\":\n    test_replace_words()\n",
        "num_ids": 292
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    \n    # match with z.\n    result = re.search('z', text)\n    print(result)\n    \n    if result:\n        print('It is a word containing a z.')\n    else:\n        print('It is not a word containing a z.')\n        \ntext = 'It is a word containing a z.'\ntext_match_wordz(text)\n",
        "num_ids": 91
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.findall(r'z',text)\n",
        "num_ids": 16
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #return re.findall(r\"\\bz{2}\\b\", text)\n    #return re.findall(\"z{2}\", text)\n    return re.findall(\"z{2}\", text)\n",
        "num_ids": 54
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    a = re.search(\"z\", text)\n    if a:\n        return True\n    else:\n        return False\n        \ndef test_text_match_wordz():\n    assert text_match_wordz(\"z\") == True\n    assert text_match_wordz(\"abc\") == False\n    assert text_match_wordz(\"abc z\") == True\n    assert text_match_wordz(\"z z\") == True\n    assert text_match_wordz(\"zz zz\") == False\n    assert text_match_wordz(\"zzz zzzz\") == True\n    \ndef text_match_word_count(text, n):\n    '''\n    Write a function that matches a word containing n.\n    '''\n    a = re.search(n, text)\n    if a:\n        return True\n    else:\n        return False\n    \ndef test_text_match_word_count():\n    assert text_match_word_count(\"z\", \"z\") == True\n    assert text_match_word_count(\"abc\", \"z\") == False\n    assert text_match_word_count(\"abc z\", \"z\") == True\n    assert text_match_word_count(\"z z\", \"z\") == False\n    assert text_match_word_count(\"zz zz\", \"z\") == False\n    assert text_match_word_count(\"zzz zzzz\", \"z\") == False\n    \ndef text_match_word_count_all(text, n):\n    '''\n    Write a function that matches a word containing n.\n    '''\n    a = re.search(n, text)\n    if a:\n        return True\n    else:\n        return False\n    \ndef test_text_match_word_count_all():\n    assert text_match_word_count_all(\"z\", \"z\") == True\n    assert text_match_word_count_all(\"abc\", \"z\") == False\n    assert text_match_word_count_all(\"abc z\", \"z\") == True\n    assert text_match_word_count_all(\"z z\", \"z\") == False\n    assert text_match_word_count_all(\"zz zz\", \"z\") == True\n    assert text_match_word_count_all(\"zzz zzzz\", \"z\") == False\n",
        "num_ids": 175
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.findall(r\"z+\", text)\n    if match:\n        return True\n    else:\n        return False\n    \ndef text_match_letter(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.findall(r\"z\", text)\n    if match:\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    def match_wordz(pattern):\n        return re.search(pattern, text)\n    return match_wordz\n",
        "num_ids": 30
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # # # your code here # # #\n",
        "num_ids": 13
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'z'\n    result = re.match(pattern, text)\n    return result\n    \ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'z'\n    return re.search(pattern, text)\n",
        "num_ids": 21
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    matched = re.search(r'z',text)\n    if matched:\n        print(\"True\")\n    else:\n        print(\"False\")\n",
        "num_ids": 37
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        print(\"31\")\n    else:\n        print(\"30\")\n",
        "num_ids": 63
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2==1:\n        return 31\n    elif monthnum2==3:\n        return 31\n    elif monthnum2==5:\n        return 31\n    elif monthnum2==7:\n        return 31\n    elif monthnum2==8:\n        return 31\n    elif monthnum2==10:\n        return 31\n    elif monthnum2==12:\n        return 31\n    else:\n        return 30\n",
        "num_ids": 107
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum2 = monthnum2 % 12\n    if(monthnum2 == 2):\n        return 31\n    elif(monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10):\n        return 30\n    else:\n        return 28\n",
        "num_ids": 80
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return True\n    if monthnum2 == 2:\n        return True\n    if monthnum2 == 3:\n        return True\n    if monthnum2 == 4:\n        return True\n    if monthnum2 == 5:\n        return True\n    if monthnum2 == 6:\n        return True\n    if monthnum2 == 7:\n        return True\n    if monthnum2 == 8:\n        return True\n    if monthnum2 == 9:\n        return True\n    if monthnum2 == 10:\n        return True\n    if monthnum2 == 11:\n        return True\n    if monthnum2 == 12:\n        return True\n    return False\n",
        "num_ids": 162
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 > 1 and monthnum2 <= 12:\n        print('True')\n    else:\n        print('False')\n",
        "num_ids": 33
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnumb_number = int(monthnum2)\n    if monthnumb_number == 1 or monthnumb_number == 3 or monthnumb_number == 5 or monthnumb_number == 7 or monthnumb_number == 8 or monthnumb_number == 10 or monthnumb_number == 12:\n        return True\n    else:\n        return False\n",
        "num_ids": 87
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 30\n    else:\n        return False\n",
        "num_ids": 91
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 <= 0 or monthnum2 > 12:\n        return False\n    elif monthnum2 == 1:\n        return True\n    elif monthnum2 == 2:\n        return True\n    elif monthnum2 == 3:\n        return True\n    elif monthnum2 == 4:\n        return True\n    elif monthnum2 == 5:\n        return True\n    elif monthnum2 == 6:\n        return True\n    elif monthnum2 == 7:\n        return True\n    elif monthnum2 == 8:\n        return True\n    elif monthnum2 == 9:\n        return True\n    elif monthnum2 == 10:\n        return True\n    elif monthnum2 == 11:\n        return True\n    elif monthnum2 == 12:\n        return True\n    else:\n        return False\n",
        "num_ids": 197
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if int(monthnum2) in range(1, 13):\n        print(\"yes\")\n    else:\n        print(\"No\")\n",
        "num_ids": 34
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    if monthnum2 == months.index(month):\n        print(\"Yes, you have 31 days\")\n    else:\n        print(\"No, you have 30 days\")\n",
        "num_ids": 81
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Example: ['abc', 'def'] => ['def', 'abc']\n    # Example: ['abc', 'def', 'ghi'] => ['ghi', 'def', 'abc']\n    # Example: ['abc', 'def', 'ghi', 'jkl','mno', 'pqr'] => ['pqr','mno', 'jkl', 'ghi', 'def', 'abc']\n    # Example: ['hello', 'abc', 'def', 'ghi', 'jkl','mno', 'pqr'] => ['ghi', 'abc','mno', 'jkl', 'pqr', 'def', 'hello']\n",
        "num_ids": 152
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for i in range(len(stringlist)):\n        reversed_list.append(stringlist[i][::-1])\n    return reversed_list\n",
        "num_ids": 49
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if not isinstance(stringlist, list):\n        raise ValueError(\"Invalid type. Expected 'list', but got '{}'\".format(type(stringlist)))\n    if len(stringlist) == 0:\n        raise ValueError(\"The list is empty!\")\n    for index in range(len(stringlist)):\n        stringlist[index] = stringlist[index][::-1]\n    return stringlist\n",
        "num_ids": 100
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for i in range(len(stringlist)):\n        newlist.append(stringlist[i][::-1])\n    return newlist\n",
        "num_ids": 42
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for i in range(len(stringlist)):\n        new_list.append(stringlist[len(stringlist) - i - 1])\n    return new_list\n",
        "num_ids": 49
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [s[::-1] for s in stringlist]\n",
        "num_ids": 18
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    def reverse(lst):\n        return lst[::-1]\n    return reverse(stringlist)\n",
        "num_ids": 28
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_index = i\n    return min_index\n",
        "num_ids": 66
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    return min(lst, key=len)\n    \n",
        "num_ids": 16
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst_min_length = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > lst_min_length:\n            lst_min_length = len(lst[i])\n    return lst_min_length\n",
        "num_ids": 68
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    min_index = 0\n    for i in range(len(lst)):\n        if len(lst[i]) < len(min):\n            min = lst[i]\n            min_index = i\n    return min, min_index\n",
        "num_ids": 70
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len
        "num_ids": 2017
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst)==0:\n        return 0\n    else:\n        for i in range(len(lst)):\n            if i==len(lst)-1:\n                return lst[i]\n            if len(lst[i])>len(lst[i+1]):\n                return lst[i]\n        return -1\n",
        "num_ids": 88
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    m=len(lst[0])\n    for i in range(1,len(lst)):\n        if len(lst[i])<m:\n            m=len(lst[i])\n    print(lst[lst.index(min(lst, key=len))])\n",
        "num_ids": 74
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    mini = lst[0]\n    for i in range(len(lst)):\n        if len(lst[i]) < len(mini):\n            mini = lst[i]\n    return mini\n    \n    \ndef Remove_Duplicates(lst): \n    '''\n    Write a python function to remove all the duplicates from a list.\n    '''\n    temp = lst[:]\n    res = []\n    for i in range(len(temp)):\n        count = 0\n        for j in range(len(res)):\n            if temp[i] == res[j]:\n                count = count+1\n        if count == 0:\n            res.append(temp[i])\n    return res\n    \n    \ndef Nested_list_depth(lst): \n    '''\n    Write a python function to find the depth of each sublist in a list of list.\n    '''\n    depth = []\n    res = []\n    for i in range(len(lst)):\n        depth.append(0)\n        temp = lst[i]\n        for j in range(len(temp)):\n            if temp[j] in lst:\n                depth[i] = depth[i]+1\n    for i in range(len(lst)):\n        if depth[i] not in res:\n            res.append(depth[i])\n    return res\n    \n    \ndef Finding_val(key,lst): \n    '''\n    Write a python function to find the occurance of an element in a list.\n    '''\n    for i in range(len(lst)):\n        if lst[i] == key:\n            return i\n    return -1\n    \n    \ndef Find_Duplicates(lst): \n    '''\n    Write a python function to find all the duplicates in a list.\n    '''\n    temp = lst[:]\n    res = []\n    for i in range(len(temp)):\n        if temp[i] in res:\n            continue\n        else:\n            res.append(temp[i])\n    return res\n    \n    \ndef Number_of_Balls_in_a_Row(row, balls): \n    '''\n    Write a python function to count the number of balls in a row.\n    '''\n    num = 0\n    for i in range(len(balls)):\n        if balls[i] == row:\n            num = num + 1\n    return num\n    \n    \ndef Number_of_Balls_in_a_Column(col, balls): \n    '''\n    Write a python function to count the number of balls in a column.\n    '''\n    res = 0\n    for i in range(len(balls)):\n        if balls[i] == col:\n            res = res+1\n    return res\n    \n    \ndef Number_of_Balls_in_a_Block(block, balls): \n    '''\n    Write a python function to count the number of balls in a block.\n    '''\n    res = 0\n    for i in range(len(balls)):\n        if (balls[i] >= block[0] and balls[i] <= block[1]) or (balls[i] >= block[2] and balls[i] <= block[3]):\n            res = res+1\n    return res\n    \n    \ndef Unique_Character_in_String(s): \n    '''\n    Write a python function to check if a string contains all unique characters.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        if len(s) > 0:\n            s = s.lower()\n            s = list(s)\n            dct = {}\n            for i in s:\n                if i in dct.keys():\n                    return False\n                else:\n                    dct[i] = 1\n            return True\n    \n    \ndef Unique_Character_in_String_II(s): \n    '''\n    Write a python function to check if a string contains all unique characters.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        if len(s) > 0:\n            s = s.lower()\n            s = list(s)\n            dct = {}\n            for i in s:\n                if i in dct.keys():\n                    return False\n                else:\n                    dct[i] = 1\n            return True\n    \n    \ndef Minimum_Difference(arr,n): \n    '''\n    Write a python function to find the minimum difference between the two sets of numbers in a list.\n    '''\n    arr1 = []\n    for i in range(len(arr)):\n        arr1.append(arr[i])\n    arr1 = set(arr1)\n    res = 100000\n    for i in range(len(arr1)):\n        temp = abs(arr[i]-arr1[i])\n        if temp < res:\n            res = temp\n    return res\n    \n    \ndef Minimum_Distance(s,d): \n    '''\n    Write a python function to find the minimum distance between the two sets of characters in a string.\n    '''\n    if len(s) == 0 or len(d) == 0:\n        return -1\n    else:\n        dct = {}\n        for i in range(len(s)):\n            if s[i] in dct.keys():\n                dct[s[i]] = dct[s[i]]+1\n            else:\n                dct[s[i]] = 1\n        for i in range(len(d)):\n            if d[i] in dct.keys():\n                dct[d[i]] = dct[d[i]]-1\n            else:\n                dct[d[i]] = -1\n        for i in range(len(d)):\n            if dct[d[i]] > 0:\n                return -1\n        else:\n            return 0\n    \n    \ndef Nested_Sum(lst): \n    '''\n    Write a python function to find the sum of all numbers in a nested list.\n    '''\n    res = 0\n    for i in range(len(lst)):\n        if type(lst[i]) == list:\n            res = res+Nested_Sum(lst[i])\n        else:\n            res = res+lst[i]\n    return res\n    \n    \ndef Nested_Sum_II(lst): \n    '''\n    Write a python function to find the sum of all numbers in a nested list.\n    '''\n    for i in range(len(lst)):\n        if type(lst[i]) == list:\n            lst[i] = Nested_Sum_II(lst[i])\n        else:\n            lst[i] = 0\n    return lst\n    \n    \ndef Is_vowel(s): \n    '''\n    Write a python function to check if a string is a vowel or not.\n    '''\n    if s == 'a' or s == 'e' or s == 'i' or s == 'o' or s == 'u':\n        return True\n    else:\n        return False\n    \n    \ndef Is_Vowel_II(s): \n    '''\n    Write a python function to check if a string is a vowel or not.\n    '''\n    if s == 'a' or s == 'e' or s == 'i' or s == 'o' or s == 'u':\n        return True\n    else:\n        return False\n    \n    \ndef Integer_Digits(n): \n    '''\n    Write a python function to count the total number of integers in a string.\n    '''\n    temp = 0\n    temp = int(n)\n    while temp!= 0:\n        if temp%10 == 0:\n            temp = temp//10\n        else:\n            temp = temp-1\n            break\n    return temp\n    \n    \ndef Integer_Digits_II(n): \n    '''\n    Write a python function to count the total number of integers in a string.\n    '''\n    temp = 0\n    temp = int(n)\n    while temp!= 0:\n        if temp%10 == 0:\n            temp = temp//10\n        else:\n            temp = temp-1\n            break\n    return temp\n    \n    \ndef Square_Root(n): \n    '''\n    Write a python functio",
        "num_ids": 9
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len=len(lst[0])\n    result=lst[0]\n    for i in range(1,len(lst)):\n        curr_len=len(lst[i])\n        if curr_len<min_len:\n            min_len=curr_len\n            result=lst[i]\n    return result\n",
        "num_ids": 88
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # code here\n    return min(lst,key=lambda x:len(x))\n",
        "num_ids": 24
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(f\"area of rectangle is {l*b}\")\n",
        "num_ids": 18
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n",
        "num_ids": 13
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    a = l * b\n    print(\"Area of rectangle:\", a)\n",
        "num_ids": 20
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    print('Area of rectangle:',area)\nrectangle_area(10,20)\n",
        "num_ids": 30
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n    \n    \nprint(rectangle_area(5,6))\n",
        "num_ids": 29
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    print(re.sub('[A-Z]','',str1))\n",
        "num_ids": 20
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if len(str1) == 0:\n        return ''\n    upper = True\n    i = 0\n    while i < len(str1):\n        if upper:\n            if str1[i].isupper():\n                upper = False\n        else:\n            if str1[i].islower():\n                upper = True\n        i += 1\n    return str1\n",
        "num_ids": 88
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    result = str1.lower()\n    result = result.replace(\"CAPITALIZE\", \"\")\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n",
        "num_ids": 10
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n",
        "num_ids": 10
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    lst = []\n    for i in range(len(str1)):\n        if i!= 0 and ord(str1[i]) >= 65 and ord(str1[i]) <= 90:\n            lst.append(str1[i])\n    return ''.join(lst)\n",
        "num_ids": 71
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.strip()\n    return re.sub('[A-Z]', '', str1)\n",
        "num_ids": 30
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    \n    return str1.lower().replace(str1.upper(), '')\n",
        "num_ids": 21
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.casefold()\n",
        "num_ids": 11
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]', '', str1)\n",
        "num_ids": 22
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return map(lambda sublist: sublist[0], lst)\n",
        "num_ids": 19
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in lst:\n        lst1=i\n    return lst1\n    \ndef Extract(lst):\n    '''\n    Write a python function to get the last element of each sublist.\n    '''\n    for i in lst:\n        lst1=i[::-1]\n    return lst1\n    \ndef Sort(lst):\n    '''\n    Write a python function to sort a list of lists\n    '''\n    lst=sorted(lst)\n    return lst\n    \ndef Sort(lst):\n    '''\n    Write a python function to sort a list of dictionaries\n    '''\n    lst1=[]\n    for i in range(len(lst)):\n        lst1.append(sorted(lst[i].items()))\n    return lst1\n    \ndef Sort(lst):\n    '''\n    Write a python function to sort a list of lists by their first element of each sublist\n    '''\n    for i in lst:\n        lst1=i\n    return sorted(lst1)\n    \ndef Sort(lst):\n    '''\n    Write a python function to sort a list of dictionaries by their value of a specific key\n    '''\n    lst1=[]\n    for i in range(len(lst)):\n        lst1.append(sorted(lst[i].items(),key=lambda x:x[1]))\n    return lst1\n    \ndef Sort(lst):\n    '''\n    Write a python function to sort a list of dictionaries by their value of a specific key\n    '''\n    lst1=[]\n    for i in range(len(lst)):\n        lst1.append(sorted(lst[i].items(),key=lambda x:x[1]))\n    return lst1\n    \ndef Sort(lst):\n    '''\n    Write a python function to sort a list of dictionaries by their value of a specific key\n    '''\n    lst1=[]\n    for i in range(len(lst)):\n        lst1.append(sorted(lst[i].items(),key=lambda x:x[1]))\n    return lst1\n    \ndef Sort(lst):\n    '''\n    Write a python function to sort a list of lists by the second element of each sublist\n    '''\n    for i in lst:\n        lst1=i\n    return sorted(lst1, key=lambda x: x[1])\n    \ndef Sort(lst):\n    '''\n    Write a python function to sort a list of dictionaries by their key and value of a specific key\n    '''\n    lst1=[]\n    for i in range(len(lst)):\n        lst1.append(sorted(lst[i].items(),key=lambda x:x[0], reverse=True))\n    return lst1\n    \ndef Sort(lst):\n    '''\n    Write a python function to sort a list of dictionaries by their key and value of a specific key\n    '''\n    lst1=[]\n    for i in range(len(lst)):\n        lst1.append(sorted(lst[i].items(),key=lambda x:x[0], reverse=True))\n    return lst1\n    \ndef Sort(lst):\n    '''\n    Write a python function to sort a list of dictionaries by their key and value of a specific key\n    '''\n    lst1=[]\n    for i in range(len(lst)):\n        lst1.append(sorted(lst[i].items(),key=lambda x:x[0], reverse=True))\n    return lst1\n    \ndef Sort(lst):\n    '''\n    Write a python function to sort a list of lists by their second element of each sublist\n    '''\n    for i in lst:\n        lst1=i\n    return sorted(lst1, key=lambda x: x[1])\n    \ndef Sort(lst):\n    '''\n    Write a python function to sort a list of dictionaries by their key and value of a specific key\n    '''\n    lst1=[]\n    for i in range(len(lst)):\n        lst1.append(sorted(lst[i].items(),key=lambda x:x[0], reverse=True))\n    return lst1\n    \ndef Sort(lst):\n    '''\n    Write a python function to sort a list of dictionaries by their key and value of a specific key\n    '''\n    lst1=[]\n    for i in range(len(lst)):\n        lst1.append(sorted(lst[i].items(),key=lambda x:x[0], reverse=True))\n    return lst1\n    \ndef Sort(lst):\n    '''\n    Write a python function to sort a list of dictionaries by their key and value of a specific key\n    '''\n    lst1=[]\n    for i in range(len(lst)):\n        lst1.append(sorted(lst[i].items(),key=lambda x:x[0], reverse=True))\n    return lst1\n    \ndef Sort(lst):\n    '''\n    Write a python function to sort a list of dictionaries by their value of a specific key\n    '''\n    for i in lst:\n        lst1=i\n    return sorted(lst1, key=lambda x: x[1])\n    \ndef Sort(lst):\n    '''\n    Write a python function to sort a list of dictionaries by their key and value of a specific key\n    '''\n    for i in lst:\n        lst1=i\n    return sorted(lst1, key=lambda x: x[0], reverse=True)\n    \ndef Sort(lst):\n    '''\n    Write a python function to sort a list of dictionaries by their value of a specific key\n    '''\n    for i in lst:\n        lst1=i\n    return sorted(lst1, key=lambda x: x[1], reverse=True)\n    \ndef Sort(lst):\n    '''\n    Write a python function to sort a list of dictionaries by their value of a specific key\n    '''\n    for i in lst:\n        lst1=i\n    return sorted(lst1, key=lambda x: x[0], reverse=True)\n    \ndef Sort(lst):\n    '''\n    Write a python function to sort a list of dictionaries by their value of a specific key\n    '''\n    for i in lst:\n        lst1=i\n    return sorted(lst1, key=lambda x: x[1])\n    \ndef Sort(lst):\n    '''\n    Write a python function to sort a list of lists by their second element of each sublist\n    '''\n    for i in lst:\n        lst1=i\n    return sorted(lst1, key=lambda x: x[1])\n    \ndef Sort(lst):\n    '''\n    Write a python function to sort a list of dictionaries by their key and value of a specific key\n    '''\n    for i in lst:\n        lst1=i\n    return sorted(lst1, key=lambda x: x[0])\n    \ndef Sort(lst):\n    '''\n    Write a python function to sort a list of dictionaries by their key and value of a specific key\n    '''\n    for i in lst:\n        lst1=i\n    return sorted(lst1, key=lambda x: x[0])\n    \ndef Sort(lst):\n    '''\n    Write a python function to sort a list of dictionaries by their key and value of a specific key\n    '''\n    for i in lst:\n        lst1=i\n    return sorted(lst1, key=lambda x: x[0])\n    \ndef Sort(lst):\n    '''\n    Write a python function to sort a list of dictionaries by their value of a specific key\n    '''\n    for i in lst:\n        lst1=i\n    return sorted(lst1, key=lambda x: x[1])\n    \ndef Sort(lst):\n    '''\n    Write a python function to sort a list of dictionaries by their key and value of a specific key\n    '''\n    for i in lst",
        "num_ids": 8
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    s = []\n    for i in range(len(lst)):\n        s.append(lst[i][0])\n    return s \n",
        "num_ids": 38
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1=[]\n    for i in range(0,len(lst),1):\n        if(i==0):\n            lst1.append(lst[i])\n        else:\n            lst1.append(lst[i][0])\n    return lst1 \n",
        "num_ids": 72
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    #Write your Code here\n    return [x[0] for x in lst]\n",
        "num_ids": 23
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    arr = []\n    for i in lst:\n        arr.append(i[0])\n    return arr\n",
        "num_ids": 29
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)):\n        if isinstance(lst[i], list):\n            Extract(lst[i])\n        else:\n            lst[i] = lst[i][0]\n    return lst\n",
        "num_ids": 62
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in lst:\n        print(i[0])\n",
        "num_ids": 18
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Your code here\n    return [n[0] for n in lst]\n",
        "num_ids": 22
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return str.count('U')\n",
        "num_ids": 11
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    a=0\n    for i in str:\n        if i.isupper():\n            a+=1\n    return a\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    \n    upper_count = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            upper_count += 1\n    return upper_count\n    \ndef common_characters(str1, str2):\n    '''\n    Write a python function to count the common characters in the two given strings.\n    '''\n    \n    char_count = {}\n    for i in range(len(str1)):\n        if str1[i] in char_count.keys():\n            char_count[str1[i]] += 1\n        else:\n            char_count[str1[i]] = 1\n    for i in range(len(str2)):\n        if str2[i] in char_count.keys():\n            char_count[str2[i]] += 1\n        else:\n            char_count[str2[i]] = 1\n    common_count = 0\n    for key, value in char_count.items():\n        if value == 2:\n            common_count += 1\n    return common_count\n    \ndef is_palindrome(str):\n    '''\n    Write a python function to check whether the string is a palindrome or not.\n    '''\n    \n    if len(str) == 0:\n        return False\n    if str == str[::-1]:\n        return True\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([c for c in str if c.isupper()])\n",
        "num_ids": 19
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count = count + 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for ch in str:\n        if ch.isupper():\n            ctr += 1\n    return ctr\n",
        "num_ids": 32
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for ch in str:\n        if ch.isupper():\n            upper_count += 1\n    print(upper_count)\n",
        "num_ids": 39
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    counter = 0\n    for i in str:\n        if i.isupper():\n            counter += 1\n    return counter\nprint(upper_ctr('hello'))\n",
        "num_ids": 41
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    output = []\n    for i in range(len(list1)):\n        output.append([list1[i]])\n        for j in range(i+1,len(list1)):\n            output.append([list1[i],list1[j]])\n    return output\n",
        "num_ids": 70
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if not list1:\n        return []\n    combinations = []\n    curr_comb = []\n    for i in list1:\n        curr_comb.append(i)\n        if len(curr_comb) > 1:\n            combinations.append(curr_comb)\n            curr_comb = []\n    return combinations\n",
        "num_ids": 83
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(0, len(list1) + 1):\n        result += [[list1[j] for j in range(len(list1)) if i <= j]]\n    return result\n",
        "num_ids": 53
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [[list1[0]]]\n    combinations = []\n    for i in range(len(list1)):\n        for rest in combinations_list(list1[i+1:]):\n            combinations.append([list1[i]] + rest)\n    return combinations\n",
        "num_ids": 78
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if not list1:\n        return []\n    comb = []\n    for i in range(len(list1)):\n        comb += [[list1[i]] + x for x in combinations_list(list1[i + 1:])]\n    return comb\n",
        "num_ids": 63
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)+1):\n        for j in range(i+1,len(list1)+1):\n            combination = set(list1[i:j])\n            if len(combination) == len(list1):\n                print(combination)\n",
        "num_ids": 69
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1)==0:\n        return []\n    if len(list1)==1:\n        return [[list1[0]]]\n    combs = []\n    for i in range(len(list1)-1):\n        combs = combs + combinations_list([list1[i+1]] + list1[i+2:])\n    return combs + combinations_list(list1[1:])\n",
        "num_ids": 102
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            for k in range(j+1,len(list1)):\n                print(list1[i],list1[j],list1[k])\n    print(\"The combinations of the list are:\")\n",
        "num_ids": 80
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1.sort()\n    lst = []\n    if len(list1) == 1:\n        return [list1]\n    \n    for i in range(len(list1)):\n        if i == 0:\n            x = list1[:i+1]\n            lst.append(x)\n        else:\n            y = list1[:i+1]\n            lst.append(y)\n            x = y[:]\n            x.append(list1[i])\n            lst.append(x)\n    return lst\n",
        "num_ids": 133
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    list_comb = []\n    for i in range(0, n+1):\n        for j in range(0, n-i+1):\n            list_comb.append(list1[i:i+j])\n    print(list_comb)\n    print(len(list_comb))\n",
        "num_ids": 81
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    curr_max = arr[0]\n    max_so_far = arr[0]\n    for i in range(1, n):\n        curr_max = max(curr_max * arr[i], arr[i])\n        max_so_far = max(curr_max, max_so_far)\n    return max_so_far\n",
        "num_ids": 95
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    curr_max = max_sub = 1\n    for i in range(len(arr)):\n        curr_max = max(curr_max * arr[i], arr[i])\n        max_sub = max(max_sub, curr_max)\n    return max_sub\n",
        "num_ids": 71
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Initialize a negative value to find the maximum subarray of the given array.\n    max_product = -float('inf')\n    \n    # Find the maximum product subarray in the given array.\n    for i in range(len(arr)):\n        \n        # Find the maximum product subarray\n        # with the product of the given array\n        # in the current subarray.\n        current_product = max(arr[i], arr[i] * arr[i+1])\n        \n        # Update maximum product subarray.\n        max_product = max(max_product, current_product)\n        \n    # Return maximum product subarray.\n    return max_product\n",
        "num_ids": 157
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Maximum product subarray of a subarray A = (i, j) such that A[i] * A[i+1] *... * A[j] is maximum.\n",
        "num_ids": 43
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    max_product = arr[0] * arr[1]\n    subarrays = []\n    for i in range(0, len(arr) - 1):\n        if i == 0:\n            subarrays.append(arr[0])\n        elif i == len(arr) - 2:\n            subarrays.append(arr[len(arr) - 1])\n        else:\n            subarrays.append(arr[i])\n        product = 1\n        for j in range(0, len(subarrays)):\n            product *= subarrays[j]\n        if product > max_product:\n            max_product = product\n    return max_product\n",
        "num_ids": 190
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    max_product = -sys.maxsize - 1\n    curr_max = arr[0]\n    curr_min = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            curr_min = arr[i]\n            continue\n        curr_max = max(curr_max * arr[i], arr[i])\n        curr_min = min(curr_min * arr[i], arr[i])\n        max_product = max(curr_max, max_product)\n",
        "num_ids": 152
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = -1\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "num_ids": 75
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n    max_product = arr[0]\n    max_start = max_end = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            max_product = max(max_product, arr[i])\n            if i - max_start > max_end - max_start:\n                max_end = i\n        else:\n            max_start = max(max_start, max_end)\n            max_end = i\n    return max_product\n",
        "num_ids": 128
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = 0\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    for i in range(len(arr)):\n        print(arr[i])\n        for j in range(i+1,len(arr)):\n            print(arr[j])\n            tmp = arr[i] * arr[j]\n            print(tmp)\n            if tmp > max_product:\n                max_product = tmp\n    return max_product\n",
        "num_ids": 125
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = curr_max = arr[0]\n    for i in range(1, len(arr)):\n        curr_max = max(curr_max * arr[i], arr[i])\n        max_so_far = max(max_so_far, curr_max)\n    return max_so_far\n",
        "num_ids": 84
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # my solution\n    for k, v in dict.items():\n        if v!= dict[k]:\n            return False\n",
        "num_ids": 32
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for v in dict.values():\n        if v!= n:\n            return False\n    return True\n",
        "num_ids": 27
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n",
        "num_ids": 33
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(set(dict.values())) <= 1\n",
        "num_ids": 16
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for k, v in dict.items():\n        if v!= n:\n            return False\n    return True\n",
        "num_ids": 29
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    d = {k:v for k, v in dict.items()}\n    if len(d.keys())!= len(d.values()):\n        return False\n    else:\n        return True\n",
        "num_ids": 50
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # return len(dict) == 1\n    return len(dict) == n and len(set(dict.values())) == 1\n",
        "num_ids": 33
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    assert type(dict) == dict, 'Invalid type: dict'\n    for item in dict:\n        assert type(item) == int, 'Invalid type: dict.key'\n        assert item > 0, 'Invalid key: dict.key'\n        assert len(dict[item]) == n, 'Invalid length: dict[item]'\n    for item in dict:\n        assert dict[item] == list(range(1, item+1)), 'Invalid value: dict[item]'\n    return True\n",
        "num_ids": 115
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(set(dict.values())) == 1\n",
        "num_ids": 16
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return (len(dict) == 1)\n",
        "num_ids": 13
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict([i for i in dict1.items() if i[1]!=None])\n",
        "num_ids": 25
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for x in dict1:\n        if not dict1[x]:\n            del dict1[x]\n    return dict1\n",
        "num_ids": 32
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if len(dict1) > 0:\n        return dict(filter(lambda item: len(item[1]) > 0, dict1.items()))\n    else:\n        return {}\n    \n    \ndef drop_empty_list(list1):\n    '''\n    Write a function to drop empty items from a given list.\n    '''\n    if len(list1) > 0:\n        return list(filter(lambda item: item!= \"\", list1))\n    else:\n        return []\n        \n",
        "num_ids": 41
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if len(dict1) == 0:\n        return {}\n    else:\n        return dict(dict1)\n",
        "num_ids": 29
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if len(dict1)!= 0:\n        return dict(filter(lambda x: len(x[1]) > 0, dict1.items()))\n    else:\n        return dict1\n",
        "num_ids": 47
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    list1 = list(dict1.keys())\n    list2 = list(dict1.values())\n    for i in range(len(list1)):\n        if list2[i] == '':\n            del list2[i]\n    list3 = []\n    for i in range(len(list2)):\n        list3.append(list1[i])\n    return list3\n",
        "num_ids": 94
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    a=[]\n    for key, value in dict1.items():\n        if value=='':\n            pass\n        else:\n            a.append(value)\n    for key, value in dict1.items():\n        if value==a:\n            pass\n        else:\n            dict1[key]=a\n    return dict1\n",
        "num_ids": 80
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k in dict1.keys():\n        if dict1[k] == '':\n            del dict1[k]\n",
        "num_ids": 31
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict1.pop('', None)\n    print(dict1)\n",
        "num_ids": 19
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    empty_dict = {}\n    for k in dict1.keys():\n        if dict1[k]!= {}:\n            empty_dict[k] = dict1[k]\n    return empty_dict\n",
        "num_ids": 51
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    arr = sorted(arr)\n    return_product = arr[-1] * arr[0]\n    # print(arr)\n    # print(return_product)\n    for i in range(len(arr)-1):\n        return_product = max(return_product, arr[i]*arr[i+1])\n    return return_product\n",
        "num_ids": 98
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = -sys.maxsize\n    min_product = sys.maxsize\n",
        "num_ids": 23
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_prod = arr[0]\n    min_prod = arr[0]\n    if len(arr) == 1:\n        return arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > min_prod:\n            min_prod = arr[i]\n            \n        if arr[i] < max_prod:\n            if arr[i] * max_prod > arr[i] * min_prod:\n                max_prod = arr[i] * max_prod\n            else:\n                max_prod = arr[i] * max_prod\n            if arr[i] * min_prod > arr[i] * max_prod:\n                min_prod = arr[i] * min_prod\n            else:\n                min_prod = arr[i] * min_prod\n    return max_prod\n            \n        \n    \n",
        "num_ids": 239
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    product = max(arr)\n    arr.remove(product)\n    for i in arr:\n        product *= i\n    return product\n",
        "num_ids": 35
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    def product(arr):\n        if len(arr) == 0:\n            return 0\n        if len(arr) == 1:\n            return arr[0]\n        return max(product(arr[:len(arr)//2]),product(arr[len(arr)//2:]))\n",
        "num_ids": 69
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return\n    dp = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n):\n        dp[i][i] = arr[i]\n    for i in range(n-2,-1,-1):\n        for j in range(i+1,n):\n            dp[i][j] = max(arr[i] * dp[i+1][j],arr[j] * dp[i+1][j],arr[j] * dp[i+1][j-1])\n    return dp[0][n-1]\n",
        "num_ids": 157
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    #Solution\n    max = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n        elif arr[i] < 0:\n            break\n    \n    max2 = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < 0:\n            break\n",
        "num_ids": 119
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # note: this solution is in O(n)\n    # initilize three variables, the currrent_max and the max_so_far\n    # for every element in the array, if its value is greater than currrent_max, update currrent_max\n    # if its value is greater than the max_so_far, update max_so_far\n    # return max_so_far\n    currrent_max = arr[0]\n    max_so_far = arr[0]\n    for num in arr[1:]:\n        if num > currrent_max:\n            currrent_max = num\n        elif num > max_so_far:\n            max_so_far = num\n    return max_so_far\n",
        "num_ids": 179
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    product = 1\n    max_product = -sys.maxsize - 1\n    for i in arr:\n        product = product * i\n        if product > max_product:\n            max_product = product\n    return max_product\n",
        "num_ids": 56
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    p = 0\n    tup = ()\n    while len(tup)<6:\n        tup = test_tup[p]\n        p += 1\n    return tup\n",
        "num_ids": 46
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return (test_tup, test_tup)\n    else:\n        (test_tup_1, test_tup_2) = add_pairwise(test_tup[1:])\n        return (test_tup_1, test_tup_1 + test_tup_2)\n",
        "num_ids": 89
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    tup = test_tup\n    tup1 = list(tup)\n    tup1.sort()\n    i = 1\n    while(i<len(tup)):\n        a = tup1[i-1]\n        b = tup1[i]\n        tup1.remove(b)\n        tup1.remove(a)\n        tup1.insert(i,a+b)\n        i += 1\n    return tuple(tup1)\n",
        "num_ids": 117
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    x, y = test_tup\n    return (x+y)\n",
        "num_ids": 20
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if not test_tup:\n        return []\n    if len(test_tup) == 1:\n        return [test_tup]\n    result = []\n    for i in range(len(test_tup)):\n        if i == 0:\n            result.append(test_tup[i] + test_tup[i + 1])\n        elif i == len(test_tup) - 1:\n            result.append(test_tup[i - 1] + test_tup[i])\n        else:\n            result.append(test_tup[i - 1] + test_tup[i] + test_tup[i + 1])\n    return result\n",
        "num_ids": 167
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    \n    # Method 1\n    # tup = test_tup\n    # tup = map(int,tup)\n    # print(tup)\n    # for i in range(len(tup)-1):\n    #     print(i)\n    #     for j in range(i+1,len(tup)):\n    #         if(tup[i]+tup[j]==0):\n    #             print(tup[i],tup[j])\n",
        "num_ids": 117
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # for i in range(0, len(test_tup)-1):\n    #     for j in range(i+1, len(test_tup)):\n    #         print(i, j)\n    return test_tup\n",
        "num_ids": 59
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(x + y for x, y in zip(test_tup, test_tup[1:]))\n",
        "num_ids": 30
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # 1st solution - using a nested list comprehension\n    tup = test_tup\n    nested_list = []\n    for i in range(len(tup)-1):\n        nested_list.append(tup[i:i+2])\n    return nested_list\n",
        "num_ids": 69
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    res = test_tup[0]\n    if len(test_tup) == 1:\n        return res\n    else:\n        for i in range(1,len(test_tup)):\n            res = res + test_tup[i]\n        return res\n",
        "num_ids": 68
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(0, n): \n        product = product * arr[i] \n    return product % n \n        \nprint(find_remainder([1,2,3,4,5], 5))",
        "num_ids": 59
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    product = 1\n    for i in range(0,n):\n        product = product * arr[i]\n    return product%n\n",
        "num_ids": 36
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod % n\n",
        "num_ids": 28
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    res = 1\n    for i in range(0, n):\n        res = res * arr[i] % n\n    return res\n",
        "num_ids": 34
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if n == 1:\n        return arr[0]\n    p = 1\n    for i in arr:\n        p *= i\n    return p % n\n",
        "num_ids": 40
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for x in range(len(arr)):\n        product = product * arr[x]\n        \n    return product % n\n",
        "num_ids": 37
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = product * i % n\n    return product\n",
        "num_ids": 27
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # get the product of the array multiplication\n    product = 1\n    for i in range(n):\n        product = product * arr[i]\n",
        "num_ids": 36
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    # Find the product of all the elements of array\n    prod = 1\n    for i in range(n):\n        prod *= arr[i]\n    \n    # Find the product of all the remainder of divided by n\n    prod_remainder = 1\n    for i in range(n):\n        prod_remainder *= (arr[i] % n)\n    \n    # Multiply both products\n    return prod * prod_remainder % n\n",
        "num_ids": 116
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    fact = [1] * n\n    \n    for i in range(2, n): \n        fact[i] = fact[i - 1] * i \n    \n    prod = 1\n    for i in range(n): \n        prod = prod * arr[i] % n\n        \n    print(fact[prod])\n        \nfind_remainder([4, 3, 2, 8], 3) \n    ",
        "num_ids": 104
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    try:\n        if l[0] == l[1] + 1:\n            if l[1] == l[2] + 1:\n                if l[2] == l[3] + 1:\n                    if l[3] == l[4] + 1:\n                        if l[4] == l[5] + 1:\n                            if l[5] == l[6] + 1:\n                                if l[6] == l[7] + 1:\n                                    if l[7] == l[8] + 1:\n                                        if l[8] == l[9] + 1:\n                                            return True\n                                        else:\n                                            return False\n                                else:\n                                    return False\n                            else:\n                                return False\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return False\n    except:\n        return False\n    ",
        "num_ids": 224
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    flag = False\n    for i in range(0, len(l)-1):\n        if (l[i] == l[i+1] -1):\n            flag = True\n    return flag\n",
        "num_ids": 49
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return True\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(0,n-1):\n        if (l[i+1]-l[i])!=1:\n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i]==l[i+1]:\n            print(\"No consecutive numbers are found.\")\n            break\n        elif l[i]<l[i+1]:\n            print(\"Consecutive numbers are found.\")\n            break\n",
        "num_ids": 71
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n=len(l)\n    if n==0:\n        print(\"No numbers in the list\")\n        return\n    count=0\n    for i in range(1,n):\n        if l[i]==l[i-1]+1:\n            count+=1\n    if count>1:\n        print(f\"Yes, there are {count} consecutive numbers\")\n    else:\n        print(f\"No, there are no consecutive numbers\")\n    return\n",
        "num_ids": 111
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if not l:\n        return True\n    if len(l) < 2:\n        return False\n    \n    for i in range(1, len(l)):\n        if l[i-1] + 1!= l[i]:\n            return False\n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2013
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(0, len(l)-1):\n        if l[i+1]-l[i]!= 1:\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l)==1:\n        return True\n    count = 1\n    for i in range(len(l)-1):\n        if l[i]==l[i+1]:\n            count +=1\n    if count == len(l)-1:\n        return True\n    else:\n        return False\nprint(check_Consecutive([1, 2, 4, 4, 5, 6, 7, 7, 8, 9, 9]))\nprint(check_Consecutive([]))\nprint(check_Consecutive([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\n",
        "num_ids": 151
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return True\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple(set(test_list1).intersection(test_list2))\n",
        "num_ids": 22
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # SOLUTION\n    return tuple(sorted(set(test_list1).intersection(set(test_list2))))\n    #OR\n    return tuple(test_list1&test_list2)\n    #OR\n    return tuple(set(test_list1).intersection(set(test_list2)))\n",
        "num_ids": 77
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    res_set = set()\n    for i in test_list1:\n        for j in test_list2:\n            if i == j:\n                res_set.add(i)\n                break\n    return res_set\n",
        "num_ids": 56
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result_tuple = ()\n    for x in test_list1:\n        if x in test_list2:\n            result_tuple += (x,)\n    return result_tuple\n",
        "num_ids": 47
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1).intersection(set(test_list2)))\n",
        "num_ids": 24
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    if len(test_list1) < len(test_list2):\n        test_list1, test_list2 = test_list2, test_list1\n    for element1, element2 in zip(test_list1, test_list2):\n        if element1 == element2:\n            intersection.append(element1)\n    return intersection\n",
        "num_ids": 91
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersect_list = []\n    for item in test_list1:\n        if item in test_list2:\n            intersect_list.append(item)\n    return intersect_list\n",
        "num_ids": 47
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    res = list(set(test_list1).intersection(set(test_list2)))\n    return tuple(res)\n",
        "num_ids": 32
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Your Code Here\n    result = []\n    for i in test_list1:\n        if i in test_list2:\n            result.append(i)\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #to_return = set(test_list1).intersection(set(test_list2))\n    #to_return = {element for element in test_list1 if element in test_list2}\n    #to_return = {tuple(element) for element in zip(test_list1, test_list2)}\n    to_return = set(tuple(element) for element in zip(test_list1, test_list2))\n    return to_return\n",
        "num_ids": 112
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = ''\n    for i in str1:\n        if i == ch:\n            newstr += newch\n        else:\n            newstr += i\n    return newstr\n",
        "num_ids": 45
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    lst=list(str1)\n    lst[lst.index(ch)]=newch\n    return \"\".join(lst)\n",
        "num_ids": 37
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i == ch:\n            new_str += newch\n        else:\n            new_str += i\n    return new_str\n",
        "num_ids": 49
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    lst=list(str1)\n    for i in range(0,len(lst)):\n        if lst[i]==ch:\n            lst[i]=newch\n    return ''.join(lst)\n    \n",
        "num_ids": 59
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch, newch)\n    return str1\n",
        "num_ids": 22
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    string=str1\n    string=string.replace(ch,newch)\n    return string\n",
        "num_ids": 25
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,'')\n    str1 = str1.replace(newch,'')\n    return str1\n",
        "num_ids": 34
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    #TODO: Write your solution here\n    pass\n",
        "num_ids": 16
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = ''\n    for i in str1:\n        if i == ch:\n            str2 += newch\n        else:\n            str2 += i\n    return str2\n",
        "num_ids": 45
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n",
        "num_ids": 22
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    #create a new sorted dictionary\n    new_dict = sorted(dict1.items(),key=lambda x:x[1])\n    return new_dict\n",
        "num_ids": 38
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    l = []\n    for key, value in dict1.items():\n        l.append((value, key))\n    l.sort(reverse = True)\n    # print(l)\n    return {k: v for v, k in l}\n",
        "num_ids": 60
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    list1 = []\n    for i in dict1:\n        list1.append((i, dict1[i]))\n    list1.sort(key = lambda x: x[1], reverse = True)\n    return list1\n",
        "num_ids": 56
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    if not dict1: return dict1\n    return dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n",
        "num_ids": 38
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # your code here\n    dict1 = sorted(dict1.items(), key=lambda item: item[1])\n    return dict1\n    \nif __name__ == '__main__':\n    # num = int(input('Enter number of elements: '))\n    # dict1 = {}\n    # for i in range(num):\n    #     element = input('Enter element: ')\n    #     dict1[element] = 0\n    # print(dict1)\n",
        "num_ids": 112
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda kv: kv[1])\n",
        "num_ids": 23
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = {}\n    for i in sorted(dict1.items(), key = lambda x: x[1], reverse = True):\n        sorted_dict[i[0]] = i[1]\n    return sorted_dict\n",
        "num_ids": 57
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    pass\ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    pass\ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n",
        "num_ids": 25
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a new dictionary with value as key\n    new_dict = {}\n    # iterate over the values in the dictionary\n    for key in sorted(dict1, key=dict1.get, reverse=True):\n        # add the value to new_dict\n        new_dict[dict1[key]] = key\n    return new_dict\n",
        "num_ids": 81
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    result = max(nums) + min(nums)\n    return result\n",
        "num_ids": 21
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return False\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        return max(nums) + min(nums)\n",
        "num_ids": 55
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num\n",
        "num_ids": 34
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    smallest = None\n    largest = None\n    # code here\n    return sum(nums)\n    ",
        "num_ids": 27
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Create a variable to store the sum and set it to the largest value in the array.\n    largest = nums[0]\n",
        "num_ids": 32
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum_min = nums[0]\n    sum_max = nums[0]\n    sum_min_index = 0\n    sum_max_index = 0\n    for i in range(len(nums)):\n        if nums[i] < nums[sum_min_index]:\n            sum_min_index = i\n        if nums[i] > nums[sum_max_index]:\n            sum_max_index = i\n    return sum_min + nums[sum_max_index] + nums[sum_min_index]\n",
        "num_ids": 135
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    print(\"The sum of the largest and smallest values in a given array is:\",min(nums) + max(nums))\n",
        "num_ids": 32
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    a = []\n    for i in range(0, len(nums)):\n        if i == 0:\n            max_value = nums[i]\n            min_value = nums[i]\n        elif nums[i] > max_value:\n            max_value = nums[i]\n        elif nums[i] < min_value:\n            min_value = nums[i]\n    a.append(max_value)\n    a.append(min_value)\n    return (sum(a))\n",
        "num_ids": 129
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    maxi,mini=max(nums),min(nums)\n    print(\"Largest\",maxi,\"Smallest\",mini)\n    return (maxi+mini)\n",
        "num_ids": 44
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    print(\"Big sum is:\",max(nums) + min(nums))\n",
        "num_ids": 22
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    new_string = \"\"\n    for letter in string:\n        if letter.islower():\n            new_string += letter.lower()\n        else:\n            new_string += letter.upper()\n    return new_string\n    \nprint(is_lower(\"Hi there!\"))\nprint(is_lower(\"Hello World!\"))\n",
        "num_ids": 78
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    new_string=string.lower()\n    print(new_string)\n    return new_string\n",
        "num_ids": 26
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    \n    return string.lower()\n",
        "num_ids": 11
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    print(string.lower())\n",
        "num_ids": 10
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    #string=string.lower()\n    string=\"Inverse\"\n    string.lower()\n    #return string\n    \n    \ndef get_upper(string):\n    '''\n    Write a python function to get the upper case letters from a given string.\n    '''\n    string=\"Hello\"\n    string=\"Hello\"\n    string.upper()\n    #return string\n    \ndef get_lower(string):\n    '''\n    Write a python function to get the lower case letters from a given string.\n    '''\n    string=\"Hello\"\n    string=\"Hello\"\n    string.lower()\n    #return string\n    \ndef is_alpha(string):\n    '''\n    Write a python function to check whether the given string contains only alphabetic characters.\n    '''\n    string=\"Hello\"\n    string=\"Hello\"\n    string.isalpha()\n    #return string\n    \ndef is_numeric(string):\n    '''\n    Write a python function to check whether the given string contains only numeric characters.\n    '''\n    string=\"Hello\"\n    string=\"Hello\"\n    string.isnumeric()\n    #return string\n    \ndef is_alphanumeric(string):\n    '''\n    Write a python function to check whether the given string contains only alphabetic and numeric characters.\n    '''\n    string=\"Hello\"\n    string=\"Hello\"\n    string.isalnum()\n    #return string\n    \ndef is_alphabet(string):\n    '''\n    Write a python function to check whether the given string contains only alphabetic characters.\n    '''\n    string=\"Hello\"\n    string=\"Hello\"\n    string.isalpha()\n    #return string\n    \ndef is_digit(string):\n    '''\n    Write a python function to check whether the given string contains only numeric characters.\n    '''\n    string=\"Hello\"\n    string=\"Hello\"\n    string.isdigit()\n    #return string\n    \ndef is_punctuation(string):\n    '''\n    Write a python function to check whether the given string contains only punctuation characters.\n    '''\n    string=\"Hello\"\n    string=\"Hello\"\n    string.isalpha()\n    #return string\n    \ndef is_digit_or_punctuation(string):\n    '''\n    Write a python function to check whether the given string contains only digit characters or punctuation characters.\n    '''\n    string=\"Hello\"\n    string=\"Hello\"\n    string.isdigit()\n    #return string\n    \ndef is_empty_string(string):\n    '''\n    Write a python function to check whether the given string is empty or not.\n    '''\n    string=\"Hello\"\n    string=\"Hello\"\n    string.isspace()\n    #return string\n    \ndef is_space(string):\n    '''\n    Write a python function to check whether the given string contains space characters.\n    '''\n    string=\"Hello\"\n    string=\"Hello\"\n    string.isspace()\n    #return string\n    \ndef is_non_empty_string(string):\n    '''\n    Write a python function to check whether the given string is non empty or not.\n    '''\n    string=\"Hello\"\n    string=\"Hello\"\n    string.isnumeric()\n    #return string\n    \ndef is_lowercase(string):\n    '''\n    Write a python function to check whether the given string is in lowercase.\n    '''\n    string=\"Hello\"\n    string=\"Hello\"\n    string.islower()\n    #return string\n    \ndef is_uppercase(string):\n    '''\n    Write a python function to check whether the given string is in uppercase.\n    '''\n    string=\"Hello\"\n    string=\"Hello\"\n    string.isupper()\n    #return string\n    \ndef is_numerical(string):\n    '''\n    Write a python function to check whether the given string is in numerical.\n    '''\n    string=\"Hello\"\n    string=\"Hello\"\n    string.isnumeric()\n    #return string\n    \ndef is_whitespace(string):\n    '''\n    Write a python function to check whether the given string contains whitespace characters.\n    '''\n    string=\"Hello\"\n    string=\"Hello\"\n    string.isspace()\n    #return string\n    \ndef is_titlecase(string):\n    '''\n    Write a python function to check whether the given string is titlecase.\n    '''\n    string=\"Hello\"\n    string=\"Hello\"\n    string.istitle()\n    #return string\n    \ndef is_capitalized(string):\n    '''\n    Write a python function to check whether the given string is capitalized.\n    '''\n    string=\"Hello\"\n    string=\"Hello\"\n    string.isupper()\n    #return string\n    \ndef is_number(string):\n    '''\n    Write a python function to check whether the given string is in numerical.\n    '''\n    string=\"Hello\"\n    string=\"Hello\"\n    string.isnumeric()\n    #return string\n    \ndef is_alphabet_string(string):\n    '''\n    Write a python function to check whether the given string is alphabetic or not.\n    '''\n    string=\"Hello\"\n    string=\"Hello\"\n    string.isalpha()\n    #return string\n    \ndef is_alphanumeric_string(string):\n    '''\n    Write a python function to check whether the given string is alphabetic and numeric or not.\n    '''\n    string=\"Hello\"\n    string=\"Hello\"\n    string.isalnum()\n    #return string\n    \ndef is_alphanumeric_string_or_digit(string):\n    '''\n    Write a python function to check whether the given string is alphabetic, numeric or digit or not.\n    '''\n    string=\"Hello\"\n    string=\"Hello\"\n    string.isalnum()\n    #return string\n    \ndef is_startswith(string,prefix):\n    '''\n    Write a python function to check whether the given string starts with the given prefix.\n    '''\n    string=\"Hello\"\n    string=\"Hello\"\n    string.startswith(\"Hello\")\n    #return string\n    \ndef is_endswith(string,prefix):\n    '''\n    Write a python function to check whether the given string ends with the given prefix.\n    '''\n    string=\"Hello\"\n    string=\"Hello\"\n    string.endswith(\"Hello\")\n    #return string\n    \ndef is_contained(string,substring):\n    '''\n    Write a python function to check whether the given string contains the given substring.\n    '''\n    string=\"Hello\"\n    string=\"Hello\"\n    string.find(\"Hello\")\n    #return string\n    \ndef is_start_with(string,prefix):\n    '''\n    Write a python function to check whether the given string starts with the given prefix.\n    '''\n    string=\"Hello\"\n    string=\"Hello\"\n    string.startswith(\"Hello\")\n    #return string\n    \ndef is_end_with(string,prefix):\n    '''\n    Write a python function to check whether the given string ends with the given prefix.\n    '''\n    string=\"Hello\"\n    string=\"Hello\"\n    string.endswith(\"Hello\")\n    #return string\n    \ndef is_starts_with(string,prefix):\n    '''\n    Write a python function to check whether the given string starts with the given prefix.\n    '''\n    string=\"Hello\"\n    string=\"Hello\"\n    string.startswith(\"Hello\")\n    #return string\n    \ndef is_ends_with(string,prefix):\n    '''\n    Write a python function to check whether the given string ends with the given prefix.\n    '''\n    string=\"Hello\"\n    string=\"Hello\"\n    string.endswith(\"Hello\")\n    #return string\n    \ndef is_starts_with(string,prefix):\n    '''\n    Write a python function to check whether the given string starts with the given prefix.\n    '''\n    string=\"Hello\"\n    string=\"Hello\"\n    string.startswith(\"Hello\")\n    #return string\n    \ndef is_ends_with(string,prefix):\n    '''\n    Write a python function to check whether the given string ends with the given prefix.\n    '''\n    string=\"Hello\"\n    string=\"Hello\"\n    string.endswith(\"Hello\")\n    #return string\n    \ndef is_reversed(string):\n    '''\n    Write a pytho",
        "num_ids": 8
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(\"[a-z]\", \"\", str1).lower()\n",
        "num_ids": 22
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i].islower():\n            str1 = str1[0:i] + str1[i+1:]\n    return str1\n",
        "num_ids": 51
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    match = re.findall(\"[a-z]\", str1)\n    str1 = str1.replace(\"\".join(match), \"\")\n    print(str1)\n",
        "num_ids": 44
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1=str1.lower()\n    str1=re.sub(\"[a-z]\",'',str1)\n    return str1\n",
        "num_ids": 37
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower()\n",
        "num_ids": 10
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if len(str1) == 0:\n        return ''\n    elif str1 == str1.lower():\n        return ''\n    else:\n        return str1\n",
        "num_ids": 42
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub('[a-z]', '', str1)\n    return str1\n",
        "num_ids": 27
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r\"\\b[a-z]+\\b\"\n    result = re.findall(pattern, str1)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    new_str=re.sub('[a-z]', '', str1)\n    return new_str\n",
        "num_ids": 29
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]','',str1)\n",
        "num_ids": 21
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    count = 0\n    while n >= 1 :\n        count += 1\n        n = n // 10\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n",
        "num_ids": 8
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n//10\n",
        "num_ids": 8
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10\n",
        "num_ids": 8
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = abs(n)\n    while n!= 0 :\n        n = n // 10\n    return n\n",
        "num_ids": 29
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    i = 0\n    while (n//10) > 0 :\n        i = i + 1\n        n = n//10\n    return i\n",
        "num_ids": 36
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    number_string = str(n)\n    first_digit = number_string[0]\n    return int(first_digit)\n",
        "num_ids": 33
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n",
        "num_ids": 8
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try :\n        n = int(n)\n        return (n)%10\n    except ValueError :\n        print('Invalid input, please enter a number.')\n",
        "num_ids": 41
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n",
        "num_ids": 13
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    #odd = []\n    #for i in range(len(list)):\n    #    if list[i] % 2 == 1:\n    #        odd.append(list[i])\n    #return odd\n    return [i for i in list if i % 2!= 0]\n    #return even\n    \ndef Divide(n):\n    '''\n    Write a python function which takes a non negative integer and returns the binary representation of that number.\n    '''\n    #binary = []\n    #while n!= 0:\n    #    binary.append(n % 2)\n    #    n = n // 2\n    #return binary\n    return bin(n)\n    #return binary\n    \ndef LeftRotate(arr, d):\n    '''\n    Write a python function which left rotates the given array by d elements. It should perform this in place.\n    '''\n    #for i in range(d):\n    #    arr.append(arr.pop(0))\n    #return arr\n    return arr[d:] + arr[:d]\n    #return arr\n    \ndef Reverse(arr):\n    '''\n    Write a python function which reverses the given array. It should perform this in place.\n    '''\n    #return arr[::-1]\n    return arr.reverse()\n    #return arr\n    \ndef Search(arr, target):\n    '''\n    Write a python function which searches an array and returns the index of first occurrence of the target.\n    '''\n    #return arr.index(target)\n    return arr.index(target, 0)\n    #return arr.index(target, 0, len(arr))\n    \ndef Sort(arr):\n    '''\n    Write a python function which sorts the given array in place.\n    '''\n    #return arr.sort()\n    #return arr\n    #return sorted(arr)\n    \ndef Max(arr):\n    '''\n    Write a python function which returns the maximum of the array.\n    '''\n    #return max(arr)\n    return max(arr, default = -1)\n    #return arr.max()\n    #return arr\n    \ndef Min(arr):\n    '''\n    Write a python function which returns the minimum of the array.\n    '''\n    #return min(arr)\n    return min(arr, default = -1)\n    #return arr.min()\n    #return arr\n    \ndef Copy(arr):\n    '''\n    Write a python function which creates a copy of the given array.\n    '''\n    #return arr.copy()\n    return arr[:]\n    #return arr\n    \ndef Sum(arr):\n    '''\n    Write a python function which calculates the sum of all the elements in the given array.\n    '''\n    #return sum(arr)\n    #return sum(arr, 0)\n    return sum(arr, 0)\n    #return arr\n    \ndef BinarySearch(arr, target):\n    '''\n    Write a python function which searches an array and returns the index of first occurrence of the target.\n    '''\n    #return arr.index(target)\n    return arr.index(target, 0, len(arr))\n    #return arr.index(target, 0, len(arr))\n    \ndef Gaussian(a, b):\n    '''\n    Write a python function which returns the Gaussian function with the given a and b.\n    '''\n    #return exp(-(a**2) / (2*b**2))\n    return exp(-(a**2) / (2*b**2))\n    #return (1 / sqrt(2*pi*b**2)) * exp(-1/(2*b**2) * ((a**2)) )\n    \ndef Fibonacci(n):\n    '''\n    Write a python function which returns the nth fibonacci number.\n    '''\n    #return fib(n)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return Fibonacci(n-1) + Fibonacci(n-2)\n    #return a + b\n    #return fib(n-1) + fib(n-2)\n    \ndef FibonacciPrime(n):\n    '''\n    Write a python function which returns the nth fibonacci prime.\n    '''\n    #return fibo_p(n)\n    if n == 0:\n        return 2\n    if n == 1:\n        return 3\n    return FibonacciPrime(n-1) + FibonacciPrime(n-2)\n    #return a + b\n    #return fibo_p(n-1) + fibo_p(n-2)\n    \ndef ReverseVowels(s):\n    '''\n    Write a python function which returns the reverse vowels of the given string.\n    '''\n    #return s.replace('a','*').replace('e','*').replace('i','*').replace('o','*').replace('u','*')\n    return s.replace('a', '*').replace('e', '*').replace('i', '*').replace('o', '*').replace('u', '*')\n    #return s.replace('a', '*').replace('e', '*').replace('i', '*').replace('o', '*').replace('u', '*')\n    #return s.replace('a', '*').replace('e', '*').replace('i', '*').replace('o', '*').replace('u', '*')\n    \ndef VowelToNumber(s):\n    '''\n    Write a python function which returns the vowels of a string in the corresponding numbers.\n    '''\n    #return vowel_to_num(s)\n    return s.replace('a', '1').replace('e', '1').replace('i', '1').replace('o', '0').replace('u', '0')\n    #return vowel_to_num(s)\n    #return s.replace('a', '1').replace('e', '1').replace('i', '1').replace('o', '0').replace('u', '0')\n    #return s.replace('a', '1').replace('e', '1').replace('i', '1').replace('o', '0').replace('u', '0')\n    \ndef NumberToVowel(n):\n    '''\n    Write a python function which returns the vowels of a number in the corresponding string.\n    '''\n    #return vowel_to_num(n)\n    return chr(ord('a') + int(n))\n    #return vowel_to_num(n)\n    #return chr(ord('a') + int(n))\n    #return vowel_to_num(n)\n    \ndef Game(a, b, c, d):\n    '''\n    Write a python function which returns the 'Game' of the given numbers a, b, c and d.\n    '''\n    #return a + b + c + d\n    return a + b + c + d\n    #return a + b + c + d\n    #return a + b + c + d\n    \ndef GameEven(a, b):\n    '''\n    Write a python function which returns the 'Game' of even numbers in the given range.\n    '''\n    #return a + b\n    return a + b\n    #return a + b\n    #return a + b\n    \ndef GameOdd(a, b):\n    '''\n    Write a python function which returns the 'Game' of odd numbers in the given range.\n    '''\n    #return a + b\n    return a + b\n    #return a + b\n    #return a + b\n    \ndef GameEvenOdd(a, b):\n    '''\n    Write a python function which returns the 'Game' of even and odd numbers in the given range.\n    '''\n    #return a + b\n    return a + b\n    #return a + b\n    #return a + b\n    \ndef Reverse(s):\n    '''\n    Write a python function which reverses the given string.\n    '''\n    #return s.replace(' ', '').replace('\\n', '').replace('\\t', '')[::-1]\n    #return s.replace(' ', '').replace('\\n', '').replace('\\t', '')[::-1]\n    #return s.replace(' ', '').replace('\\n', '').replace('\\t', '')[::-1]\n    #return s.replace(' ', '').replace('\\n', '').replace('\\t'",
        "num_ids": 111
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i%2 == 1:\n            odd_list.append(i)\n    return odd_list\n",
        "num_ids": 41
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    lst=[]\n    for i in range(len(list)):\n        if list[i]%2==1:\n            lst.append(list[i])\n    return lst\n",
        "num_ids": 48
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    if len(list)==0:\n        return []\n    else:\n        if list[0]%2==0:\n            return list[0:len(list):2]\n        else:\n            return list[1:len(list):2]\n",
        "num_ids": 62
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = [] \n    for i in range(len(list)): \n        if (list[i]%2!= 0): \n            odd.append(list[i]) \n    return odd\n    \n    \ndef Insert(list): \n    '''\n    Write a python function which takes a list of integers and only returns the even ones.\n    '''\n    even = [] \n    for i in range(len(list)): \n        if (list[i]%2 == 0): \n            even.append(list[i]) \n    return even\n    \n    \ndef Replace(list): \n    '''\n    Write a python function which takes a list of integers and only returns the list with the odd elements replaced with a five. \n    '''\n    replace = [] \n    for i in range(len(list)): \n        if (list[i]%2!= 0): \n            replace.append(5) \n        else: \n            replace.append(list[i]) \n    return replace\n    \n    \ndef Remove_duplicates(list): \n    '''\n    Write a python function which takes a list of integers and only returns the list with the duplicates removed. \n    '''\n    remove_duplicates = [] \n    for i in range(len(list)): \n        if list[i] not in remove_duplicates: \n            remove_duplicates.append(list[i]) \n    return remove_duplicates\n    \n    \ndef Multiply(list): \n    '''\n    Write a python function which takes a list of integers and only returns the list multiplied by 2. \n    '''\n    multiply = [] \n    for i in range(len(list)): \n        multiply.append(list[i]*2) \n    return multiply\n    \n    \ndef Minimum(list): \n    '''\n    Write a python function which takes a list of integers and returns the minimum element of the list. \n    '''\n    minimum = min(list) \n    return minimum\n    \n    \ndef Maximum(list): \n    '''\n    Write a python function which takes a list of integers and returns the maximum element of the list. \n    '''\n    maximum = max(list) \n    return maximum\n    \n    \ndef Fibonacci(n): \n    '''\n    Write a python function which takes a positive integer n and returns the nth Fibonacci number. \n    '''\n    if n == 0 or n == 1: \n        return n\n    else: \n        return Fibonacci(n-1) + Fibonacci(n-2)\n    \n    \ndef Power(n, p): \n    '''\n    Write a python function which takes a number n and an exponent p and returns the n raised to the pth power. \n    '''\n    return n**p\n    \n    \ndef Floor_Divide(n, d): \n    '''\n    Write a python function which takes a number n and a divisor d and returns the floor of n/d. \n    '''\n    return n//d\n    \n    \ndef Ceiling_Divide(n, d): \n    '''\n    Write a python function which takes a number n and a divisor d and returns the ceiling of n/d. \n    '''\n    return n//d + 1\n    \n    \ndef GCD(n, d): \n    '''\n    Write a python function which takes two positive integers and returns their greatest common divisor. \n    '''\n    if d == 0: \n        return n \n    else: \n        return GCD(d, n%d)\n        \n    \ndef LCM(n, d): \n    '''\n    Write a python function which takes two positive integers and returns their least common multiple. \n    '''\n    return (n * d) / GCD(n, d)\n    \n    \ndef Print_LCM_and_GCD(n, d): \n    '''\n    Write a python function which takes two positive integers and returns their least common multiple and greatest common divisor. \n    '''\n    print(\"The LCM of\",n,\"and\",d,\"is\",LCM(n,d))\n    print(\"The GCM of\",n,\"and\",d,\"is\",GCD(n,d))\n    \n    \ndef Strings_to_Numbers(s): \n    '''\n    Write a python function which takes a string as input and returns a list with the string converted to integers. \n    '''\n    s_list = []\n    for i in range(len(s)):\n        s_list.append(ord(s[i]))\n    return s_list\n    \n    \ndef Numbers_to_Strings(n): \n    '''\n    Write a python function which takes a list of integers and returns a string as output. \n    '''\n    s = \"\"\n    for i in range(len(n)):\n        s += chr(n[i])\n    return s\n    \n    \ndef  Sort_ASC(n): \n    '''\n    Write a python function which takes a list of integers and returns the same list sorted in ascending order. \n    '''\n    n.sort()\n    return n\n    \n    \ndef Sort_DESC(n): \n    '''\n    Write a python function which takes a list of integers and returns the same list sorted in descending order. \n    '''\n    n.sort(reverse = True)\n    return n\n    \n    \ndef Merge_Sort(n): \n    '''\n    Write a python function which takes a list of integers and returns the same list sorted in ascending order. \n    '''\n    def merge_sort(a):\n        if len(a) > 1:\n            mid = len(a)//2\n            L = a[:mid]\n            R = a[mid:]\n",
        "num_ids": 48
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in range(len(list)):\n        if list[i] % 2!= 0:\n            odd.append(list[i])\n    return odd\n",
        "num_ids": 46
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    #   1\n    #   3\n    #   5\n    #   7\n    #   9\n    #   11\n    #   13\n    #   15\n    #   17\n    #   19\n    #   21\n    #   23\n    #   25\n    #   27\n    #   29\n    #   31\n    #   33\n    #   35\n    #   37\n    #   39\n    #   41\n    #   43\n    #   45\n    #   47\n    #   49\n    #   51\n    #   53\n    #   55\n    #   57\n    #   59\n    #   61\n    #   63\n    #   65\n    #   67\n    #   69\n    #   71\n    #   73\n    #   75\n    #   77\n    #   79\n    #   81\n    #   83\n    #   85\n    #   87\n    #   89\n    #   91\n    #   93\n    #   95\n    #   97\n    #   99\n    #  101\n    #  103\n    #  105\n    #  107\n    #  109\n    #  111\n    #  113\n    #  115\n    #  117\n    #  119\n    #  121\n    #  123\n    #  125\n    #  127\n    #  129\n    #  131\n    #  133\n    #  135\n    #  137\n    #  139\n    #  141\n    #  143\n    #  145\n    #  147\n    #  149\n    #  151\n    #  153\n    #  155\n    #  157\n    #  159\n    #  161\n    #  163\n    #  165\n    #  167\n    #  169\n    #  171\n    #  173\n    #  175\n    #  177\n    #  179\n    #  181\n    #  183\n    #  185\n    #  187\n    #  189\n    #  191\n    #  193\n    #  195\n    #  197\n    #  199\n    #  201\n    #  203\n    #  205\n    #  207\n    #  209\n    #  211\n    #  213\n    #  215\n    #  217\n    #  219\n    #  221\n    #  223\n    #  225\n    #  227\n    #  229\n    #  231\n    #  233\n    #  235\n    #  237\n    #  239\n    #  241\n    #  243\n    #  245\n    #  247\n    #  249\n    #  251\n    #  253\n    #  255\n    #  257\n    #  259\n    #  261\n    #  263\n    #  265\n    #  267\n    #  269\n    #  271\n    #  273\n    #  275\n    #  277\n    #  279\n    #  281\n    #  283\n    #  285\n    #  287\n    #  289\n    #  291\n    #  293\n    #  295\n    #  297\n    #  299\n    #  301\n    #  303\n    #  305\n    #  307\n    #  309\n    #  311\n    #  313\n    #  315\n    #  317\n    #  319\n    #  321\n    #  323\n    #  325\n    #  327\n    #  329\n    #  331\n    #  333\n    #  335\n    #  337\n    #  339\n    #  341\n    #  343\n    #  345\n    #  347\n    #  349\n    #  351\n    #  353\n    #  355\n    #  357\n    #  359\n    #  361\n    #  363\n    #  365\n    #  367\n    #  369\n    #  371\n    #  373\n    #  375\n    #  377\n    #  379\n    #  381\n    #  383\n    #  385\n    #  387\n    #  389\n    #  391\n    #  393\n    #  395\n    #  397\n    #  399\n    #  401\n    #  403\n    #  405\n    #  407\n    #  409\n    #  411\n    #  413\n    #  415\n    #  417\n    #  419\n    #  421\n    #  423\n    #  425\n    #  427\n    #  429\n    #  431\n    #  433\n    #  435\n    #  437\n    #  439\n    #  441\n    #  443\n    #  445\n    #  447\n    #  449\n    #  451\n    #  453\n    #  455\n    #  457\n    #  459\n    #  461\n    #  463\n    #  465\n    #  467\n    #  469\n    #  471\n    #  473\n    #  475\n    #  477\n    #  479\n    #  481\n    #  483\n    #  485\n    #  487\n    #  489\n    #  491\n    #  493\n    #  495\n    #  497\n    #  499\n    #  501\n    #  503\n    #  505\n    #  507\n    #  509\n    #  511\n    #  513\n    #  515\n    #  517\n    #  519\n    #  521\n    #  523\n    #  525\n    #  527\n    #  529\n    #  531\n    #  533\n    #  535\n    #  537\n    #  539\n    #  541\n    #  543\n    #  545\n    #  547\n    #  549\n    #  551\n    #  553\n    #  555\n    #  557\n    #  559\n    #  561\n    #  563\n    #  566\n    #  568\n    #  570\n    #  572\n    #  574\n    #  576\n    #  578\n    #  580\n    #  582\n    #  584\n    #  586\n    #  588\n    #  590\n    #  592\n    #  594\n    #  596\n    #  598\n    #  600\n    #  602\n    #  604\n    #  606\n    #  608\n    #  610\n    #  612\n    #  614\n    #  616\n    #  618\n    #  620\n    #  622\n    #  624\n    #  626\n    #  628\n    #  630\n    #  632\n    #  634\n    #  636\n    #  638\n    #  640\n    #  642\n    #  644\n    #  646\n    #  648\n    #  650\n    #  652\n    #  654\n    #  656\n    #  658\n    #  660\n    #  662\n    #  664\n    #  666\n    #  668\n    #  670\n    #  672\n    #  674\n    #  676\n    #  678\n    #  680\n    #  682\n    #  684\n    #  686\n    #  688\n    #  690\n    #  692\n    #  694\n    #  696\n    #  698\n    #  700\n    #  702\n    #  704\n    #  706\n    #  708\n    #  710\n    #  712\n    #  714\n    #  716\n    #  718\n    #  720\n    #  722\n    #  724\n    #  726\n    #  728\n    #  730\n    #  732\n    #  734\n    #  736\n    #  738\n    #  740\n    #  742\n    #  744\n    #  746\n    #  748\n    #  750\n    #  752\n    #  754\n    #  756\n    #  758\n    #  760\n    #  762\n    #  764\n    #  766\n    #  768\n    #  770\n    #  772\n    #  774\n    #  776\n    #  778\n    #  780\n    #  782\n    #  784\n    #  786\n    #  788\n    #  790\n    #  792\n    #  794\n",
        "num_ids": 2015
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for item in list:\n        if item % 2!= 0:\n            result.append(item)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list\n",
        "num_ids": 42
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list = []\n    for i in range(len(list)):\n        if i % 2 == 0:\n            list.append(list[i])\n        else:\n            list.append(list[i])\n    return list\n",
        "num_ids": 56
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_n = sum([i**3 for i in range(n)])\n    sum_n_2 = sum([i**3 for i in range(n)])\n    return sum_n-sum_n_2\n",
        "num_ids": 54
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_n=0\n    sum_n_sq=0\n    for i in range(1,n+1) :\n        sum_n = sum_n + i\n        sum_n_sq = sum_n_sq + i**2\n    print(\"sum_n is \",sum_n)\n    print(\"sum_n_sq is \",sum_n_sq)\n    return sum_n_sq - sum_n**3\n",
        "num_ids": 104
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def cube_of_sum_of_first_n_natural_numbers(n):\n        sum_of_first_n_natural_numbers = n * (n + 1) // 2\n        sum_of_cubes_of_first_n_natural_numbers = n * (n + 1) * (2 * n + 1) // 6\n        return sum_of_cubes_of_first_n_natural_numbers - sum_of_first_n_natural_numbers\n    print(cube_of_sum_of_first_n_natural_numbers(5))\n",
        "num_ids": 141
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    diff = 0\n    for i in range(n+1) :\n        sum = sum + i**3\n    for j in range(n+1) :\n        diff = diff + j\n    return diff - sum\nprint(difference(3))\nprint(difference(7))\n",
        "num_ids": 74
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum([i**3 for i in range(n)]) - sum([i**3 for i in range(n)])\n",
        "num_ids": 32
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        sum = sum + i**3\n    print(sum)\n    difference = sum - (n * (n + 1) / 2)\n    return difference\n",
        "num_ids": 58
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n1=n\n    sum1=0\n    for i in range(1,n+1) :\n        sum1=sum1+pow(i,3)\n    sum2=0\n    for i in range(1,n+1) :\n        sum2=sum2+i\n    diff=(sum1-sum2)\n    return diff\n    \ndef maximum_difference(n) :\n    '''\n    Write a python function to find the maximum difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n1=n\n    sum1=0\n    for i in range(1,n+1) :\n        sum1=sum1+pow(i,3)\n    sum2=0\n    for i in range(1,n+1) :\n        sum2=sum2+i\n    diff=(sum1-sum2)\n    return diff\n    \ndef minimum_difference(n) :\n    '''\n    Write a python function to find the minimum difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n1=n\n    sum1=0\n    for i in range(1,n+1) :\n        sum1=sum1+pow(i,3)\n    sum2=0\n    for i in range(1,n+1) :\n        sum2=sum2+i\n    diff=(sum1-sum2)\n    return diff\n    \ndef minimum_and_maximum(n) :\n    '''\n    Write a python function to find the minimum and maximum difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n1=n\n    sum1=0\n    for i in range(1,n+1) :\n        sum1=sum1+pow(i,3)\n    sum2=0\n    for i in range(1,n+1) :\n        sum2=sum2+i\n    diff=(sum1-sum2)\n    return (diff,diff)\n",
        "num_ids": 90
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    num = int(input(\"Enter the number : \"))\n    i = 0\n    j = 0\n    while (i < num):\n        j += i * i * i\n        i += 1\n    k = j\n    while (j > 0):\n        k -= j\n        j -= 1\n    print(\"Difference is : \",k)\n",
        "num_ids": 82
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n = int(input(\"Enter the number : \"))\n    i = 0\n    sum1 = 0\n    sum2 = 0\n    while i < n : \n        sum1 = sum1 + i**3\n        i = i + 1\n    print(sum1)\n    while i < n :\n        sum2 = sum2 + i\n        i = i + 1\n    print(sum2)\n    print(\"Difference : \" + str((sum1 - sum2)))\n",
        "num_ids": 113
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_n = 0\n    sum_of_n_square = 0\n    \n    for i in range(n):\n        sum_of_n += i+1\n        sum_of_n_square += i+1\n    \n    difference = abs(sum_of_n_square - sum_of_n**3)\n    \n    print(difference)\n    \ndef find_pythagorean_triplet(arr) :\n    '''\n    Write a python function to find all pythagorean triples that sum up to the given number.\n    '''\n    triplet = []\n    \n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            for k in range(j+1,len(arr)):\n                if ((arr[i]**2) + (arr[j]**2)) == (arr[k]**2):\n                    triplet.append((arr[i],arr[j],arr[k]))\n    \n    print(triplet)\n    \ndef count_instances(arr) :\n    '''\n    Write a python function to count instances of a particular element in an array.\n    '''\n    arr.sort()\n    \n    count = 0\n    for i in range(1,len(arr)):\n        if(arr[i] == arr[i-1]):\n            count += 1\n    print(count)\n",
        "num_ids": 56
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    n = len(A)\n    cnt = 0\n    for i in range(n) :\n        for j in range(i + 1, n):\n            if A[i] ^ A[j] == 1 :\n                cnt += 1\n    return cnt\n",
        "num_ids": 65
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        for j in range(i+1, N) :\n            if A[i] ^ A[j] == 0 :\n                count += 1\n    return count \n",
        "num_ids": 56
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # Code here\n    \n    xor = 0\n    temp = 0\n    for i in range(0,N):\n        xor = xor ^ A[i]\n    for j in range(0,N):\n        temp = temp ^ A[j]\n        if (xor & temp) :\n            print(A[i], \" \", A[j])\n            return 1\n        else:\n            continue\n    return 0\n",
        "num_ids": 103
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    #code here\n",
        "num_ids": 7
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) & 1:\n                count += 1\n    return count\n",
        "num_ids": 56
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    sum = 0\n    for i in range(0,N) :\n        sum = sum + A[i]\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    #if N <= 1 : \n    #    return 0\n    #elif N == 2 :\n    #    return 1\n    #else : \n    #    return (find_Odd_Pair(A,N-2) + find_Odd_Pair(A,N-1))%1000000000\n    #print(A[0])\n    #print(find_Odd_Pair(A,N))\n    return find_Odd_Pair_Lazy_Pair(A,N,0)\n",
        "num_ids": 126
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    cnt = 0\n    for i in range(N) :\n        if A[i] == 1 :\n            continue\n        for j in range(i+1,N) :\n            if A[j] == 1 :\n                if not (i ^ j)%2 :\n                    cnt += 1\n    return cnt\n",
        "num_ids": 78
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N - 1, 2) :\n        if ((A[i] ^ A[i + 1]) & 1) == 1 :\n            count += 1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) : \n        xor_value = 0\n        for j in range(N) :\n            if (i!= j) :\n                xor_value ^= A[i]\n        if (xor_value % 2!= 0) :\n            count += 1\n    return count",
        "num_ids": 81
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n    \n    \n    \n    \n",
        "num_ids": 19
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.upper() if string.islower() else string.lower()\n    \n",
        "num_ids": 22
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string.isupper():\n        return string.swapcase()\n    if string.islower():\n        return string.swapcase()\n    if string.isupper():\n        return string.swapcase()\n    if string.islower():\n        return string.swapcase()\n",
        "num_ids": 70
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    #another way\n    # return string.upper() if string.isupper() else string.lower()\n",
        "num_ids": 26
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    lower = string.lower()\n    upper = string.upper()\n    for c in string:\n        if c.isalpha():\n            if c.islower():\n                lower = lower.replace(c,c.upper())\n            elif c.isupper():\n                upper = upper.replace(c,c.lower())\n            else:\n                raise TypeError(\"{} is not a letter\".format(c))\n        else:\n            raise TypeError(\"{} is not a letter\".format(c))\n    return lower, upper\n",
        "num_ids": 126
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if type(string)!= str:\n        return None\n    else:\n        res = ''\n        for c in string:\n            if c.isupper():\n                res += c.lower()\n            else:\n                res += c.upper()\n        return res\n",
        "num_ids": 64
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n    \n",
        "num_ids": 13
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    for i in range(len(str(n1))):\n        sum += abs(n1%10-n2%10)\n        n1 = n1//10\n        n2 = n2//10\n    return sum\n",
        "num_ids": 60
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    s = 0\n    while n1 or n2:\n        s += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return s\n",
        "num_ids": 50
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d = 0\n    sum_digit = 0\n    while(n1>0):\n        d = n1 % 10\n        sum_digit += abs(d-n2%10)\n        n1 = n1//10\n    return sum_digit\n",
        "num_ids": 61
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(int(n1)-int(n2))])\n",
        "num_ids": 20
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_dist = 0\n    if n1 < n2:\n        for i in range(n1, n2):\n            sum_dist += i\n    else:\n        for i in range(n2, n1):\n            sum_dist += i\n    return sum_dist\n",
        "num_ids": 68
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_digits = 0\n    for i in range(1,len(str(n1))+1):\n        sum_digits += abs(n1%10 - n2%10)\n",
        "num_ids": 48
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    def difference(n):\n        diff = 0\n        while n > 0:\n            diff += n%10\n            n = n//10\n        return diff\n    def sum_digit(n):\n        s = 0\n        while n > 0:\n            s += n%10\n            n = n//10\n        return s\n    dist = difference(n1) - difference(n2)\n    if dist >= 0:\n        return sum_digit(dist)\n    else:\n        return -sum_digit(dist)\n    \n    \ndef sum_digit_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    def difference(n):\n        diff = 0\n        while n > 0:\n            diff += n%10\n            n = n//10\n        return diff\n    dist = difference(n1) - difference(n2)\n    if dist >= 0:\n        return dist\n    else:\n        return -dist\n    \n",
        "num_ids": 76
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == 0 or n2 == 0:\n        return 0\n    else:\n        diff = abs(n1-n2)\n        return diff\n        \ndef digit_distance_nums_general(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == 0 or n2 == 0:\n        return 0\n    else:\n        if n1 == n2:\n            return 0\n        else:\n            diff = abs(n1-n2)\n            return diff\n",
        "num_ids": 56
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_digit_diff = 0\n    for i in range(len(str(n1))):\n        sum_digit_diff += abs(int(str(n1)[i]) - int(str(n2)[i]))\n    return sum_digit_diff\n",
        "num_ids": 64
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1, d2 = str(n1), str(n2)\n    l = len(d1)\n    if len(d2)!= l:\n        raise Exception(\"The two numbers should be of the same length\")\n    else:\n        return sum(abs(int(d1[i]) - int(d2[i])) for i in range(l))\n",
        "num_ids": 89
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sub = 0\n    i = 0\n    j = 0\n    while j < size:\n        while i < size:\n            temp_sum = 0\n            while temp_sum <= max_sub and j < size:\n                temp_sum += a[j]\n                j += 1\n            if temp_sum > max_sub:\n                max_sub = temp_sum\n            i += 1\n    return max_sub\n",
        "num_ids": 101
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sub_sum = 0\n    max_sub = 0\n    i = 0\n    while i < size:\n        if sub_sum < a[i]:\n            sub_sum = a[i]\n        else:\n            sub_sum += a[i]\n        if max_sub < sub_sum:\n            max_sub = sub_sum\n        i += 1\n    return max_sub\n",
        "num_ids": 94
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # max_sum = float('-inf')\n    # for i in range(size):\n    #     max_sum = max(a[i], max_sum + a[i])\n    #     print(max_sum)\n    # return max_sum\n    max_sum = float('-inf')\n    max_sum_index = None\n    max_sum_index_val = None\n    for i in range(size):\n        max_sum = max(max_sum + a[i], a[i])\n        print(max_sum)\n        if max_sum > max_sum_val:\n            max_sum_index = i\n            max_sum_val = max_sum\n    return max_sum_index, max_sum_val\n",
        "num_ids": 178
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    # First attempt:\n    sums = []\n    sum_sofar = 0\n    for val in a:\n        sum_sofar += val\n        if sum_sofar < 0:\n            sum_sofar = 0\n        if len(sums) == 0 or sum_sofar >= sums[-1]:\n            sums.append(sum_sofar)\n        else:\n            sums = [sum_sofar]\n",
        "num_ids": 98
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    largest = 0\n    temp = 0\n",
        "num_ids": 12
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # handle empty list\n    if size == 0:\n        return 0\n    else:\n        max_sum = 0\n        curr_sum = 0\n        for i in range(size):\n            curr_sum += a[i]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n            if curr_sum < 0:\n                curr_sum = 0\n        return max_sum\n",
        "num_ids": 104
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sum = 0\n    max_sum = -1\n    temp_sum = 0\n    temp_max_sum = 0\n    for i in range(0,size):\n        temp_sum = temp_sum + a[i]\n        if temp_sum > temp_max_sum:\n            temp_max_sum = temp_sum\n        if sum <= temp_sum:\n            sum = temp_sum\n            max_sum = temp_max_sum\n    return max_sum\n",
        "num_ids": 113
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    \n    left = 0\n    right = 1\n    max_left = 0\n    max_right = 0\n    sum_left = 0\n    sum_right = 0\n    while right < size:\n        sum_left += a[left]\n        sum_right += a[right]\n        if sum_left > max_left:\n            max_left = sum_left\n        if sum_right > max_right:\n            max_right = sum_right\n        left += 1\n        right += 1\n    \n    return max_left, max_right\n",
        "num_ids": 145
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sub_sum = a[0]\n    max_sub_length = 1\n    current_sum = a[0]\n",
        "num_ids": 33
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sum = 0\n    max_sum = -sys.maxsize-1\n    for i in range(0, size):\n        sum = sum + a[i]\n        max_sum = max(sum, max_sum)\n        if sum < 0:\n            sum = 0\n    return max_sum\n",
        "num_ids": 73
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_union = []\n    for i in test_tup1:\n        if i not in test_union:\n            test_union.append(i)\n    for i in test_tup2:\n        if i not in test_union:\n            test_union.append(i)\n    test_union.sort()\n    return test_union\n",
        "num_ids": 85
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list1 = []\n    union_list2 = []\n    \n    for i in test_tup1:\n        union_list1.append(i)\n        \n    for i in test_tup2:\n        union_list2.append(i)\n    \n    union_list = union_list1 + union_list2\n    union_list.sort()\n    \n    return union_list\n",
        "num_ids": 99
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return (sorted(set(test_tup1) | set(test_tup2)))\n",
        "num_ids": 26
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = []\n    union = set(test_tup1).union(set(test_tup2))\n    # print(union)\n    return sorted(union)\n",
        "num_ids": 43
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = []\n    if test_tup1 > test_tup2:\n        for i in range(len(test_tup2)):\n            if test_tup1[i]!= test_tup2[i]:\n                union_list.append(test_tup2[i])\n            else:\n                union_list.append(test_tup2[i])\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i]!= test_tup2[i]:\n                union_list.append(test_tup1[i])\n            else:\n                union_list.append(test_tup1[i])\n",
        "num_ids": 174
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(list(set(test_tup1) | set(test_tup2)))\n",
        "num_ids": 26
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_elements = []\n    for element1 in test_tup1:\n        if element1 not in union_elements:\n            union_elements.append(element1)\n    for element2 in test_tup2:\n        if element2 not in union_elements:\n            union_elements.append(element2)\n    return union_elements\n",
        "num_ids": 89
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    test_list1.extend(test_list2)\n    test_list1 = sorted(test_list1)\n    return test_list1\n",
        "num_ids": 68
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    tup = test_tup1 + test_tup2\n    tup.sort()\n    return tup\n    \ndef union_elements_2(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    tup = set(test_tup1) | set(test_tup2)\n    tup = list(tup)\n    tup.sort()\n    return tup\n    \ndef union_elements_3(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    tup = set(test_tup1) | set(test_tup2)\n    tup = list(tup)\n    tup.sort()\n    return tup\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1816
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in union:\n            union.append(test_tup1[i])\n        if test_tup2[i] not in union:\n            union.append(test_tup2[i])\n    return union\n",
        "num_ids": 85
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        max_length = max(max_length,len(lst[i]))\n    return max_length\n",
        "num_ids": 48
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    max_l = 1\n    cur_l = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            cur_l += 1\n        else:\n            max_l = max(cur_l, max_l)\n            cur_l = 1\n    max_l = max(max_l, cur_l)\n    return max_l\n",
        "num_ids": 118
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    d = {}\n    for i in lst:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    m = max(d.values())\n    return m\n",
        "num_ids": 56
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    l=len(lst)\n    count=1\n    max=1\n    for i in range(1,l):\n        if lst[i]==lst[i-1]:\n            count+=1\n        else:\n            count=1\n        if count>max:\n            max=count\n    return max\n",
        "num_ids": 78
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length_list = []\n    for i in range(len(lst)):\n        length_list.append(len(lst[i]))\n    length_list.sort()\n    return length_list\n    #write your python function below\n",
        "num_ids": 60
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length=1\n    length=0\n    for i in range(1,len(lst)):\n        if lst[i]==lst[i-1]:\n            length+=1\n        else:\n            length=1\n        if length>max_length:\n            max_length=length\n    return max_length\n",
        "num_ids": 81
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    lst_len = len(lst)\n    if lst_len == 0:\n        return 0\n    if lst_len == 1:\n        return 1\n    for i in range(lst_len):\n        for j in range(i+1,lst_len):\n            if lst[j] > lst[i]:\n                tmp_len = j - i + 1\n                if tmp_len > max_len:\n                    max_len = tmp_len\n    return max_len\n",
        "num_ids": 128
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest_sublist = []\n    for i in range(len(lst)):\n        if len(lst[i]) > len(longest_sublist):\n            longest_sublist = lst[i]\n    return len(longest_sublist)\n",
        "num_ids": 67
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max = 0\n    for i in range(0,len(lst)):\n        if len(lst[i]) > max:\n            max = len(lst[i])\n    return max\n        \nFind_Max_Length(lst)\n",
        "num_ids": 62
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(\"[\\\"]([^\\\"]*?)[\\\"]\", text)\n",
        "num_ids": 25
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    txt = str(text)\n    return txt[txt.find(\" \") + 1:txt.find('\"')]\n",
        "num_ids": 32
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'\"[a-zA-Z0-9 ]+\"', text)\nprint(extract_values(\"'Hello' and 'world'!\"))\n",
        "num_ids": 45
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    val_lst = re.findall(r\"\\\".*\\\"\", text)\n    print(\"Extracted Quotes: \", val_lst)\n",
        "num_ids": 38
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    regex = re.compile(r\"(\\\"(.*?)\\\"|\\'(.*?)\\')\")\n    values = regex.findall(text)\n    return values\n",
        "num_ids": 42
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # return re.findall(\"[\\\"](.*?)[\\\"]\", text)\n    # return re.findall(\"[\\\"]([^\\\"]*?)[\\\"]\", text)\n    # return re.findall(\"(\\\"[^\\\"]*?\\\")\", text)\n    \n    pattern = r'\\\"(.*?)\\\"'\n    return re.findall(pattern, text)\n",
        "num_ids": 94
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(\"(?<=\\\").+(?=\\\")\", text)\n",
        "num_ids": 23
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    value=re.findall(r'\"(.+?)\"',text)\n    print(value)\n    return value\n",
        "num_ids": 31
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if not text:\n        return \"\"\n    values = re.findall(r\"\\\"([\\w ]+)\\\"\", text)\n    return values\n",
        "num_ids": 37
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern,text)\n    #return [v.strip('\"') for v in values]\n    return values\n",
        "num_ids": 45
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    l = len(arr) \n    count = 0\n    for i in range(0, l - 1): \n        for j in range(i + 1, l): \n            if (arr[i] == arr[j] and (arr[i]!= -1 or arr[j]!= -1)): \n                count += 1\n    print(\"Total number of possible unordered pairs = \",count) \n",
        "num_ids": 100
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    from collections import Counter\n    dic = Counter(arr)\n    for i in range(n):\n        if(arr[i] in dic):\n            if(arr[i]!= i):\n                dic[arr[i]]-=1\n    if(arr[n-1] in dic):\n        return dic[arr[n-1]]\n    else:\n        return 0\n",
        "num_ids": 96
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count = count + 1\n    return count\n",
        "num_ids": 64
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    ans = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i] == arr[j] and arr[i]!= -1 and arr[j]!= -1:\n                ans += 1\n    return ans\n",
        "num_ids": 73
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    \n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count = count + 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # a = {}\n    # b = {}\n    # for i in range(n):\n    #     a[i] = 0\n    # for j in range(n):\n    #     b[j] = 0\n    # for i in range(n):\n    #     for j in range(n):\n    #         if arr[i] == arr[j] and i!= j:\n    #             a[i] += 1\n    #             b[j] += 1\n    # for i in range(n):\n    #     for j in range(n):\n    #         if arr[i] == arr[j] and i!= j:\n    #             a[i] += 1\n    #             b[j] += 1\n    #         if a[i] > 0 and b[j] > 0:\n    #             return False\n    # return True\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if arr[i] == arr[j] and i!= j:\n                count += 1\n    return count\n",
        "num_ids": 256
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    d={}\n    for i in arr:\n        if i not in d:\n            d[i]=0\n        d[i]+=1\n    count=0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count+=1\n    print(count)\n",
        "num_ids": 89
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    \n    # Traverse through all list elements\n    for i in range(0, n):\n        \n        # Last element of the sublist\n        x = arr[i]\n        \n        # Number of elements to the left\n        k = n - 1\n        \n        # Last element of the remaining sublist\n        y = arr[k]\n        \n        # Move to the right\n        k -= 1\n        \n        # Keep counting till k comes to 0\n        while k >= 0:\n            \n            # If x and y are equal, then the element was found\n            if x == y:\n                count += 1\n            \n            # Update the value of x\n            x = arr[k]\n            \n            # Decrement the value of k\n            k -= 1\n            \n    print (count)\n",
        "num_ids": 190
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] == arr[j]:\n                count += 1\n    print(count)\n",
        "num_ids": 52
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    n = len(arr)\n    if(n <= 2):\n        return count\n    for i in range(n):\n        for j in range(i+1,n):\n            if(arr[i] == arr[j]):\n                count += 1\n    return count\n",
        "num_ids": 72
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    #storing characters in a list\n    list1=list(word)\n    #print(list1)\n    \n    #converting characters in list1 into lowercase\n    for i in range(len(list1)):\n        list1[i]=list1[i].lower()\n        \n    return ''.join(list1)\n",
        "num_ids": 81
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    new_string = \"\" \n    for i in range(len(word)): \n        new_string += word[i] \n    return new_string\n    \nword = \"geeksforgeeks\"\nresult = split(word) \n",
        "num_ids": 59
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n",
        "num_ids": 9
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "num_ids": 9
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "num_ids": 9
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "num_ids": 9
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word\n",
        "num_ids": 6
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "num_ids": 9
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "num_ids": 9
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)\n",
        "num_ids": 33
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n:\n        s += n % 10\n        n = n // 10\n    return s\n",
        "num_ids": 30
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return -sum_digits(n * -1)\n    else:\n        return n % 10 + sum_digits(n // 10)\n",
        "num_ids": 43
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Solution 1\n    # if n >= 10:\n    #     sum_of_digits = 0\n    #     i = 0\n    #     while n!= 0:\n    #         sum_of_digits = sum_of_digits + (n % 10)\n    #         n = n // 10\n    #         i += 1\n    #     return sum_of_digits\n    # else:\n    #     return n\n",
        "num_ids": 105
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    result = 0\n    while n > 0:\n        result += (n % 10)\n        n = n // 10\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return n\n",
        "num_ids": 6
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    while n:\n        n, r = divmod(n, 10)\n        sum_ = sum_ + r\n    return sum_\n",
        "num_ids": 34
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # while n > 0:\n    #     n //= 10\n    #     n += n * 10\n    #     print(n)\n    #     print(type(n))\n    return sum(int(d) for d in str(n))\n    \ndef sum_digits(n):\n    return sum(int(d) for d in str(n))\n",
        "num_ids": 88
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if not isinstance(n, int) or n < 0:\n        raise ValueError\n    result = 0\n    while n > 0:\n        result = result + n % 10\n        n = n // 10\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return -(sum_digits(-n))\n    elif n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n // 10)\n",
        "num_ids": 53
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i+1] < list1[i]:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    a = 1\n    for i in range(0,len(list1)-1):\n        if list1[i+1] < list1[i]:\n            a = 0\n            break\n    return a\n",
        "num_ids": 51
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if (list1 == sorted(list1)):\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    list1.sort()\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\n",
        "num_ids": 13
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1)<=1:\n        return True\n    elif list1[0]<=list1[1]:\n        return issort_list(list1[1:])\n    else:\n        return False\n",
        "num_ids": 56
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\n",
        "num_ids": 13
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\n    \nprint(issort_list([5,6,7,8,1,2,3])) # True\nprint(issort_list([5,6,7,8,1,2,3,1])) # False\nprint(issort_list([\"apple\", \"banana\", \"cherry\"])) # True\nprint(issort_list([\"apple\", \"banana\", \"cherry\", \"apple\"])) # False\nprint(issort_list([\"apple\", \"banana\", \"cherry\", \"orange\"])) # False\nprint(issort_list([1,2,3,4,5,6,7,8])) # True\nprint(issort_list([1,2,3,4,5,6,7,8,5,4,3,2,1])) # False\nprint(issort_list([1,2,3,4,5,6,7,8,1,2,3])) # True\nprint(issort_list([\"a\",\"b\",\"c\"])) # False\nprint(issort_list([1,2,3])) # False\nprint(issort_list([1,2,3,3,2,3,2,3,1])) # Tru",
        "num_ids": 299
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # No. of elements of the list\n    size = len(list1)\n",
        "num_ids": 21
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    \n    return [{}]*length\n    ",
        "num_ids": 14
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    \n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst\n",
        "num_ids": 32
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n",
        "num_ids": 33
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    dlist = []\n    for i in range(0, length):\n        dlist.append({})\n    return dlist\n",
        "num_ids": 32
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n    \nprint(empty_list(2))\nprint(empty_list(3))\n",
        "num_ids": 53
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length\n",
        "num_ids": 11
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    my_list = []\n    for i in range(length):\n        my_list.append({})\n    return my_list\n",
        "num_ids": 33
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        sublists = list1[i]\n        list1[i] = sorted(sublists)\n",
        "num_ids": 38
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in list1:\n        new_list.append(sorted(sublist))\n    return new_list\n    #pass\n",
        "num_ids": 42
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return(list1)\n",
        "num_ids": 37
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # iterate through each sublist\n    for sublist in list1:\n        # sort sublists\n        sublist.sort()\n",
        "num_ids": 33
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list_of_lists = []\n    list_of_lists.append(list1)\n    return sorted(list_of_lists)\n",
        "num_ids": 35
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublists = []\n    for i in range(len(list1)):\n        sublists.append([])\n        for j in range(len(list1[i])):\n            sublists[i].append(list1[i][j])\n    for i in range(len(sublists)):\n        sublists[i].sort()\n    final = []\n    for i in range(len(sublists)):\n        final.append(sublists[i])\n    return final\n",
        "num_ids": 115
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list_of_lists = []\n    for x in list1:\n        x_list = []\n        for y in x:\n            x_list.append(y)\n        list_of_lists.append(x_list)\n    list_of_lists.sort()\n    for i in range(len(list_of_lists)):\n        list_of_lists[i] = ''.join(list_of_lists[i])\n    return list_of_lists\n",
        "num_ids": 114
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n    \ndef flatten_list(list1):\n    '''\n    Write a function to flatten a given list.\n    '''\n    list1 = [item for sublist in list1 for item in sublist]\n    return list1\n    \ndef sort_first_occurrence(str1):\n    '''\n    Write a function that sorts first occurrence of a substring in a string.\n    '''\n    str1 = sorted(str1)\n    for i in range(len(str1)):\n        if str1[i] =='':\n            str1[i] = '\\n'\n    return str1\n    \ndef reverse_list(list1):\n    '''\n    Write a function that reverses a list.\n    '''\n    list1.reverse()\n    return list1\n    \ndef print_list(list1):\n    '''\n    Write a function to print a list.\n    '''\n    print(list1)\n    \ndef print_list_item(item):\n    '''\n    Write a function to print a single item.\n    '''\n    print(item)\n    \ndef print_list_items(list1):\n    '''\n    Write a function to print all items in a list.\n    '''\n    for item in list1:\n        print_list_item(item)\n        \ndef print_list_item_range(list1, lower, upper):\n    '''\n    Write a function to print a range of items in a list.\n    '''\n    for item in list1[lower:upper]:\n        print_list_item(item)\n        \ndef print_list_item_range_reversed(list1, lower, upper):\n    '''\n    Write a function to print a range of items in a list in reversed order.\n    '''\n    for item in list1[upper:lower:-1]:\n        print_list_item(item)\n        \ndef list_remove_item(list1, item):\n    '''\n    Write a function to remove a given item from a list.\n    '''\n    while item in list1:\n        list1.remove(item)\n    return list1\n    \ndef list_remove_item_from_position(list1, item, position):\n    '''\n    Write a function to remove a given item from a list at a given position.\n    '''\n    list1.pop(position)\n    return list1\n    \ndef list_remove_item_at_index(list1, item):\n    '''\n    Write a function to remove a given item from a list at a given index.\n    '''\n    list1.pop(item)\n    return list1\n    \ndef list_copy_element_at_index(list1, item, position):\n    '''\n    Write a function to copy a given element from a list at a given index.\n    '''\n    list1_copy = list1[:]\n    list1_copy.pop(position)\n    list1_copy.insert(position, item)\n    return list1_copy\n    \ndef list_copy_element_at_index_reversed(list1, item, position):\n    '''\n    Write a function to copy a given element from a list at a given index in reversed order.\n    '''\n    list1_copy = list1[:]\n    list1_copy.pop(position)\n    list1_copy.insert(position, item)\n    return list1_copy\n    \ndef list_get_first_index_of_item(list1, item):\n    '''\n    Write a function to get the index of the first occurrence of a given item in a list.\n    '''\n    index = 0\n    while index < len(list1):\n        if list1[index] == item:\n            return index\n        index += 1\n    return -1\n    \ndef list_get_last_index_of_item(list1, item):\n    '''\n    Write a function to get the index of the last occurrence of a given item in a list.\n    '''\n    index = 0\n    while index < len(list1):\n        if list1[index] == item:\n            return index\n        index += 1\n    return -1\n    \ndef list_get_index_of_item_at_position(list1, item, position):\n    '''\n    Write a function to get the index of a given item in a list at a given position.\n    '''\n    index = 0\n    while index < position:\n        if list1[index] == item:\n            return index\n        index += 1\n    return -1\n    \ndef list_get_item_at_index(list1, item, position):\n    '''\n    Write a function to get a given item from a list at a given index.\n    '''\n    index = 0\n    while index < position:\n        if list1[index] == item:\n            return list1[index]\n        index += 1\n    return -1\n    \ndef list_get_item_at_index_or_none(list1, item, position):\n    '''\n    Write a function to get a given item from a list at a given index or None if no item is found.\n    '''\n    index = 0\n    while index < position:\n        if list1[index] == item:\n            return list1[index]\n        index += 1\n    return None\n    \ndef list_get_item_index_or_none(list1, item):\n    '''\n    Write a function to get a given item from a list or None if no item is found.\n    '''\n    index = 0\n    while index < len(list1):\n        if list1[index] == item:\n            return index\n        index += 1\n    return None\n    \ndef list_is_member_of_list(list1, item):\n    '''\n    Write a function to check if an item exists in a list.\n    '''\n    if item in list1:\n        return True\n    else:\n        return False\n    \ndef list_is_member_of_list_or_none(list1, item):\n    '''\n    Write a function to check if an item exists in a list or None if no item is found.\n    '''\n    if item in list1:\n        return True\n    else:\n        return None\n    \ndef list_contains_item(list1, item):\n    '''\n    Write a function to check if an item exists in a list.\n    '''\n    if item in list1:\n        return True\n    else:\n        return False\n    \ndef list_contains_item_or_none(list1, item):\n    '''\n    Write a function to check if an item exists in a list or None if no item is found.\n    '''\n    if item in list1:\n        return True\n    else:\n        return None\n    \ndef list_clear(list1):\n    '''\n    Write a function to clear a list.\n    '''\n    list1 = []\n    return list1\n    \ndef list_remove_if_item_equals(list1, item):\n    '''\n    Write a function to remove all items in a list that are equal to a given item.\n    '''\n    while item in list1:\n        list1.remove(item)\n    return list1\n    \ndef list_get_count_of_item(list1, item):\n    '''\n    Write a function to get the count of a given item in a list.\n    '''\n    count = 0\n    for item in list1:\n        if item == item:\n            count += 1\n    return count\n    \ndef list_list_sort(list1):\n    '''\n    Write a function to sort a list in ascending order.\n    '''\n    list1.sort()\n    return list1\n    \ndef list_list_sort_reversed(list1):\n    '''\n    Write a function to sort a list in descending order.\n    '''\n    list1.sort(reverse=True)\n    return list1\n    \ndef list_sort_by_key(list1, key):\n    '''\n    Write a function to sort a list by the given key.\n    '''\n    list1.sort(key=key)\n    return list1\n    \ndef list_sort_by_key_reversed",
        "num_ids": 32
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # for each sublist\n    for i in range(len(list1)):\n        # sort the sublist\n        list1[i] = sorted(list1[i])\n    return list1\n    # return list1\n",
        "num_ids": 55
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n",
        "num_ids": 35
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Solution\n    #nums = {[1,2,3], 3, 4, 5, 6, 7}\n    #nums = {[1,2,3], 3, 4, 5, 6, 7}\n    nums = {1, 2, 2, 3, 4, 4, 4, 5, 6, 7}\n    # initialize list\n    numbers = []\n    # Iterate over the given list\n    for i in range(0, len(nums)):\n        # If element exists in the list\n        if nums[i] not in numbers:\n            # Add element to the list\n            numbers.append(nums[i])\n    # Return the list\n    return numbers\n",
        "num_ids": 166
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    return [x for x in nums if x not in seen and not seen.add(x)]\n",
        "num_ids": 31
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    #for each element in nums\n    #check if element is not already in result\n    #if element not in result, add it\n    result = []\n    for i in nums:\n        if i not in result:\n            result.append(i)\n    return result\n",
        "num_ids": 66
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = list(set(nums))\n    return nums\n",
        "num_ids": 19
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    seen = set()\n    for num in nums:\n        if num not in seen:\n            unique_nums.append(num)\n            seen.add(num)\n    return unique_nums\n",
        "num_ids": 58
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    result = list(set(nums))\n    return result\n",
        "num_ids": 22
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    for i in nums:\n        if i in seen:\n            return False\n        else:\n            seen.add(i)\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    num_lst = []\n    for num in nums:\n        if num not in num_lst:\n            num_lst.append(num)\n    return num_lst\n",
        "num_ids": 47
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    uniq_nums = []\n    for num in nums:\n        if num not in uniq_nums:\n            uniq_nums.append(num)\n    return uniq_nums\n",
        "num_ids": 51
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    res = {}\n    for i in nums:\n        if i in res:\n            res[i] += 1\n        else:\n            res[i] = 1\n    for i in res:\n        if res[i] == 1:\n            return i\n",
        "num_ids": 63
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for data in list_data:\n        if data not in product:\n            product *= data\n    return product\n",
        "num_ids": 34
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = []\n    for number in list_data:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return math.prod(unique_numbers)\n    \n    \n    \ndef move_to_end(list_data, to_move):\n    '''\n    Write a python function to move an element to the end of a list.\n    '''\n    list_data.remove(to_move)\n    list_data.append(to_move)\n    return list_data\n    \n    \n    \ndef reverse_list(list_data):\n    '''\n    Write a python function to reverse a list.\n    '''\n    list_data.reverse()\n    return list_data\n    \n    \n    \ndef group_list(list_data):\n    '''\n    Write a python function to group a list into a dictionary.\n    '''\n    dict_data = {}\n    for i in range(len(list_data)):\n        if list_data[i] in dict_data:\n            dict_data[list_data[i]] += 1\n        else:\n            dict_data[list_data[i]] = 1\n    return dict_data\n    \n    \n    \ndef remove_duplicates(list_data):\n    '''\n    Write a python function to remove duplicates in a list.\n    '''\n    final_list = []\n    for number in list_data:\n        if number not in final_list:\n            final_list.append(number)\n    return final_list\n    \n    \n    \ndef product_of_elements(list_data):\n    '''\n    Write a python function to calculate the product of the elements in a given list.\n    '''\n    product = 1\n    for i in range(len(list_data)):\n        product *= list_data[i]\n    return product\n    \n    \n    \ndef count_occurences(list_data):\n    '''\n    Write a python function to count the occurences of an element in a given list.\n    '''\n    element_count = 0\n    for i in range(len(list_data)):\n        if list_data[i] == 'z':\n            element_count += 1\n    return element_count\n    \n    \n    \ndef remove_nth_index(list_data, to_remove):\n    '''\n    Write a python function to remove an element at a given position.\n    '''\n    list_data.pop(to_remove)\n    return list_data\n    \n    \n    \ndef add_element_at_position(list_data, element, position):\n    '''\n    Write a python function to add an element at a given position in a given list.\n    '''\n    list_data.insert(position, element)\n    return list_data\n    \n    \n    \ndef add_elements_at_positions(list_data, element, start, end):\n    '''\n    Write a python function to add an element at given positions in a given list.\n    '''\n    for i in range(start, end+1):\n        list_data.insert(i, element)\n    return list_data\n    \n    \n    \ndef remove_element_at_position(list_data, position):\n    '''\n    Write a python function to remove an element at a given position.\n    '''\n    list_data.pop(position)\n    return list_data\n    \n    \n    \ndef length_of_list(list_data):\n    '''\n    Write a python function to find the length of a given list.\n    '''\n    return len(list_data)\n    \n    \n    \ndef maximum_in_list(list_data):\n    '''\n    Write a python function to find the maximum element in a given list.\n    '''\n    max_number = list_data[0]\n    for i in range(len(list_data)):\n        if list_data[i] > max_number:\n            max_number = list_data[i]\n    return max_number\n    \n    \n    \ndef minimum_in_list(list_data):\n    '''\n    Write a python function to find the minimum element in a given list.\n    '''\n    min_number = list_data[0]\n    for i in range(len(list_data)):\n        if list_data[i] < min_number:\n            min_number = list_data[i]\n    return min_number\n    \n    \n    \ndef odd_even_list(list_data):\n    '''\n    Write a python function to find the even numbers in a given list.\n    '''\n    list_odd = []\n    list_even = []\n    for i in range(len(list_data)):\n        if list_data[i] % 2 == 0:\n            list_even.append(list_data[i])\n        else:\n            list_odd.append(list_data[i])\n    return list_even, list_odd\n    \n    \n    \ndef first_occurence(list_data, element):\n    '''\n    Write a python function to find the first occurrence of an element in a given list.\n    '''\n    for i in range(len(list_data)):\n        if list_data[i] == element:\n            return i\n            break\n    return -1\n    \n    \n    \ndef get_indexes_of_elements(list_data, element):\n    '''\n    Write a python function to find the indexes of first occurrences of an element in a given list.\n    '''\n    indexes = []\n    for i in range(len(list_data)):\n        if list_data[i] == element:\n            indexes.append(i)\n    return indexes\n    \n    \n    \ndef get_sub_list(list_data, start, end):\n    '''\n    Write a python function to get a sub-list from a given list.\n    '''\n    return list_data[start:end+1]\n    \n    \n    \ndef remove_sub_list(list_data, start, end):\n    '''\n    Write a python function to remove a sub-list from a given list.\n    '''\n    list_data[start:end+1] = []\n    return list_data\n    \n    \n    \ndef list_sum(list_data):\n    '''\n    Write a python function to find the sum of a given list.\n    '''\n    total = 0\n    for i in range(len(list_data)):\n        total += list_data[i]\n    return total\n    \n    \n    \ndef list_average(list_data):\n    '''\n    Write a python function to find the average of a given list.\n    '''\n    total = 0\n    for i in range(len(list_data)):\n        total += list_data[i]\n    average = total / len(list_data)\n    return average\n    \n    \n    \ndef reverse_list_using_recursion(list_data):\n    '''\n    Write a python function to reverse a given list using recursion.\n    '''\n    if len(list_data) == 0:\n        return\n    else:\n        new_list = reverse_list_using_recursion(list_data[1:])\n        new_list.insert(0, list_data[0])\n        return new_list\n    \n    \n    \ndef reverse_list_using_while_loop(list_data):\n    '''\n    Write a python function to reverse a given list using recursion.\n    '''\n    if len(list_data) == 0:\n        return\n    else:\n        i = 0\n        j = len(list_data) - 1\n        while i < j:\n            temp = list_data[i]\n            list_data[i] = list_data[j]\n            list_data[j] = temp\n            i += 1\n            j -= 1\n    return list_data\n    \n    \n    \ndef reverse_list_using_for_loop(list_data):\n    '''\n    Write a python function to reverse a given list using recursion.\n    '''\n    if len(list_data) == 0:\n        return\n    else:\n        list_data = list_data[::-1]\n    return list_data\n    \n    \n    \ndef reverse_list_using_slicing",
        "num_ids": 57
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for i in range(len(list_data)):\n        if list_data[i] not in unique_list:\n            unique_list.append(list_data[i])\n    product = 1\n    for i in range(len(unique_list)):\n        product = product * unique_list[i]\n    return product\n",
        "num_ids": 87
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    if len(list_data) == 0:\n        return None\n    return reduce(lambda x, y: x * y, set(list_data))\n",
        "num_ids": 38
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = sorted(list_data)\n    p = 1\n    for i in range(len(list_data)-1):\n        if list_data[i] == list_data[i+1]:\n            p = p*list_data[i+1]\n    print(p)\n",
        "num_ids": 72
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return list_data[0]*(len(list_data)-1) if len(list_data)==len(set(list_data)) else 1\n",
        "num_ids": 39
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    result = 1\n    for i in list_data:\n        result = result * i\n    return result\n",
        "num_ids": 27
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data.sort()\n    print(list_data)\n    length = len(list_data)\n    # print(length)\n    sum = 1\n    for i in range(length):\n        # print(i)\n        if i == length-1:\n            sum = sum * list_data[i]\n        else:\n            sum = sum * list_data[i+1]\n    return sum\n    ",
        "num_ids": 100
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_num_list = []\n    product = 1\n    for i in range(0, len(list_data)):\n        if list_data[i] not in unique_num_list:\n            unique_num_list.append(list_data[i])\n    for num in unique_num_list:\n        product = product * num\n    print(\"The product of unique numbers in the list is: \", product)\n",
        "num_ids": 100
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    result = 1\n    for i in list_data:\n        if list_data.count(i) == 1:\n            result = result * i\n    return result\n",
        "num_ids": 41
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    area = math.pi * (r**2) + math.pi * (h**2)\n    return area\n",
        "num_ids": 33
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    from math import pi\n    return 2*pi*r*h\n",
        "num_ids": 18
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159265358979\n    return pi*r**2*h\n",
        "num_ids": 24
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a = 3.14\n    a = a * (r * r)\n    surface_area = a * h\n    return surface_area\n",
        "num_ids": 35
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #define pi\n    pi = 3.14\n",
        "num_ids": 14
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    surface = math.pi * h * (r ** 2)\n    return surface\n    \ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    surface = math.pi * r * (r + h)\n    return surface\n    \ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    import math\n    surface = 4 * math.pi * (r ** 3)\n    return surface\n    \ndef surfacearea_cone_symmetric(r,h):\n    '''\n    Write a function to find the surface area of a cone when the cone is symmetric.\n    '''\n    import math\n    r = abs(r)\n    surface = math.pi * r * (r + h)\n    return surface\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = r * h\n    return volume\n    \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * (r ** 2) * h\n    return volume\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    import math\n    volume = (4 / 3) * math.pi * (r ** 3)\n    return volume\n    \ndef volume_cone_symmetric(r,h):\n    '''\n    Write a function to find the volume of a cone when the cone is symmetric.\n    '''\n    import math\n    volume = (4/3) * math.pi * (r ** 2) * h\n    return volume\n    \ndef volume_rectangle(l,w):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    import math\n    volume = l * w\n    return volume\n    \ndef volume_parallelepiped(a,b,c):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    volume = a * b * c\n    return volume\n    \ndef volume_tetrahedron(a,b,c,d):\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    volume = (a + b + c + d) / 2\n    return volume\n    \ndef volume_cube(a,b,c):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume = a * b * c\n    return volume\n    \ndef volume_dodecahedron(a,b,c,d,e):\n    '''\n    Write a function to find the volume of a dodecahedron.\n    '''\n    volume = (a + b + c + d + e) / 3\n    return volume\n    \ndef volume_icosahedron(a,b,c,d,e,f):\n    '''\n    Write a function to find the volume of an icosahedron.\n    '''\n    volume = (a + b + c + d + e + f) / 5\n    return volume\n    \ndef volume_octahedron(a,b,c,d,e,f,g):\n    '''\n    Write a function to find the volume of an octahedron.\n    '''\n    volume = (a + b + c + d + e + f + g) / 6\n    return volume\n    \ndef volume_dodecahedron_hypotenuse(a,b,c,d,e,f,g,h):\n    '''\n    Write a function to find the volume of a dodecahedron when the dodecahedron is hypotenuse shaped.\n    '''\n    volume = (a + b + c + d + e + f + g + h) / 6\n    return volume\n    \ndef volume_dodecahedron_not_hypotenuse(a,b,c,d,e,f,g,h,i):\n    '''\n    Write a function to find the volume of a dodecahedron when the dodecahedron is not hypotenuse shaped.\n    '''\n    volume = (a + b + c + d + e + f + g + h + i) / 6\n    return volume\n    \ndef volume_hexahedron(a,b,c,d,e,f,g):\n    '''\n    Write a function to find the volume of a hexahedron.\n    '''\n    volume = (a + b + c + d + e + f + g) / 6\n    return volume\n    \ndef volume_icosahedron_hypotenuse(a,b,c,d,e,f,g,h,i):\n    '''\n    Write a function to find the volume of an icosahedron when the icosahedron is hypotenuse shaped.\n    '''\n    volume = (a + b + c + d + e + f + g + h + i) / 12\n    return volume\n    \ndef volume_icosahedron_not_hypotenuse(a,b,c,d,e,f,g,h,i,j):\n    '''\n    Write a function to find the volume of an icosahedron when the icosahedron is not hypotenuse shaped.\n    '''\n    volume = (a + b + c + d + e + f + g + h + i + j) / 12\n    return volume\n    \ndef volume_octahedron_hypotenuse(a,b,c,d,e,f,g,h,i,j,k):\n    '''\n    Write a function to find the volume of an octahedron when the octahedron is hypotenuse shaped.\n    '''\n    volume = (a + b + c + d + e + f + g + h + i + j + k) / 24\n    return volume\n    \ndef volume_octahedron_not_hypotenuse(a,b,c,d,e,f,g,h,i,j,k,l):\n    '''\n    Write a function to find the volume of an octahedron when the octahedron is not hypotenuse shaped.\n    '''\n    volume = (a + b + c + d + e + f + g + h + i + j + k + l) / 24\n    return volume\n    \ndef volume_dodecahedron_hypotenuse(a,b,c,d,e,f,g,h,i,j,k,l,m):\n    '''\n    Write a function to find the volume of a dodecahedron when the dodecahedron is hypotenuse shaped.\n    '''\n    volume = (a + b + c + d + e + f + g + h + i + j + k + l + m) / 24\n    return volume\n    \ndef volume_dodecahedron_not_hypotenuse(a,b,c,d,e,f,g,h,i,j,k,l,m,n):\n    '''\n    Write a function to find the volume of a dodecahedron when the dodecahedron is not hypotenuse shaped.\n    '''\n    volume = (a + b + c + d + e + f + g + h + i + j + k + l + m + n) / 24\n    return volume\n    \ndef volume_tetrahedron_hypotenuse(a,b,c,d,e,f):\n    '''\n    Write a function to find the volume of a tetrahedron when the tetrahedron is hypotenuse shaped.\n    '''\n    volume = (a + b + c + d + e + f) / 2\n    return volume\n    \ndef volume_tetrahedron_not_hypotenuse(a,b,c,d,e,f,g,h):\n    '''\n    Write a function to find the volume of a tetrahedron when the tetrahedron is not hypotenuse shaped.\n    '''\n    volume = (a + b + c + d + e + f + g + h) / 2\n    return volume\n    \ndef volume_tetrahedron_hexagonal_hypotenuse(a,b,c,d,e,f,g,h):",
        "num_ids": 64
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    S=pi*r*(r+h)\n    return S\n",
        "num_ids": 19
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 3.14*(r**2)*h\n    return area\n",
        "num_ids": 20
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*h + 2*pi*r**2\n",
        "num_ids": 20
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = (2*3.14*r*h) + (2*3.14*r*2*h)\n    print(area)\n",
        "num_ids": 37
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    c = 0\n    for i in range(len(A)):\n        for j in range(len(B)):\n            if A[i] == B[j]:\n                c += 1\n                break\n    if c == len(A):\n        print(\"Yes\")\n    else:\n        print(\"No\")\nA = input().split(' ')\nprint(A)\nB = input().split(' ')\nis_Sub_Array(A,B)",
        "num_ids": 109
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    A_set = set(A)\n    B_set = set(B)\n    if A_set.issubset(B_set):\n        print(True)\n    else:\n        print(False)\n        \nis_Sub_Array(A,B)\n",
        "num_ids": 66
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)):\n        if A[i] not in B:\n            return False\n    return True\n",
        "num_ids": 33
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    else:\n        for i in range(0,len(B)):\n            if A[i] in B:\n                continue\n            else:\n                return False\n        return True\n",
        "num_ids": 61
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i] in B:\n            continue\n        else:\n            return False\n    return True\n    \ndef is_Sub_List(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i] in B:\n            return True\n    return False\n",
        "num_ids": 32
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B)>len(A):\n        return False\n    else:\n        for i in range(len(A)):\n            if A[i]==B[0]:\n                if A[i+1:i+len(B)]==B:\n                    return True\n    return False\n",
        "num_ids": 72
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if(len(A)<len(B)):\n        temp=A\n        A=B\n        B=temp\n    if(B>A):\n        return False\n    else:\n        for i in range(len(A)):\n            if(A[i] in B):\n                if(B.index(A[i])==i):\n                    return True\n                else:\n                    continue\n            else:\n                return False\n",
        "num_ids": 104
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    print(\"Python function is_Sub_Array\")\n    for i in range(len(A)):\n        if A[i:len(A)] == B:\n            return True\n    return False\n    \ndef is_Sub_Array_2(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    print(\"Python function is_Sub_Array\")\n    A = set(A)\n    B = set(B)\n    if A.intersection(B):\n        return True\n    return False\n    \ndef is_subset(A,B):\n    '''\n    Write a python function to check whether a list is subset of another or not.\n    '''\n    print(\"Python function is_Sub_Array\")\n    A = set(A)\n    B = set(B)\n    if A.issubset(B):\n        return True\n    return False\n    \ndef is_subset_2(A,B):\n    '''\n    Write a python function to check whether a list is subset of another or not.\n    '''\n    print(\"Python function is_Sub_Array\")\n    A = set(A)\n    B = set(B)\n    if A.issubset(B):\n        return True\n    return False\n    \ndef is_element(list_1,list_2):\n    '''\n    Write a python function to check whether a list is subset of another or not.\n    '''\n    print(\"Python function is_Sub_Array\")\n    if list_1 == list_2:\n        return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i,j = 0,0\n    while i < len(A) and j < len(B):\n        if A[i]!= B[j]:\n            return False\n        i += 1\n        j += 1\n    return True\n",
        "num_ids": 58
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    result = False\n    if len(A) < len(B):\n        result = True\n        for i in range(0,len(B)-len(A)+1):\n            if A == B[i:i+len(A)]:\n                result = True\n                break\n    else:\n        result = False\n    return result\n",
        "num_ids": 80
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if(n==0 or n==1):\n        return n\n    else:\n        return n%10*last_Digit_Factorial(n//10)\n        \nprint(last_Digit_Factorial(12))\n",
        "num_ids": 56
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact=1\n    for i in range(n,-1,-1):\n        fact=fact*i\n    print(fact%10)\n    return fact%10\n",
        "num_ids": 41
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return n\n    return n % 10\n",
        "num_ids": 30
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n%10\n",
        "num_ids": 23
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<0:\n        raise ValueError(\"Factorial of negative integers not allowed\")\n    if n==0 or n==1 or n==2:\n        return n\n    else:\n        return n%10 + last_Digit_Factorial(n//10)\n    \ndef all_Digit_Factorial(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if n<0:\n        raise ValueError(\"Factorial of negative integers not allowed\")\n    if n==0 or n==1 or n==2:\n        return 1\n    else:\n        return n*all_Digit_Factorial(n-1)\n        \ndef factorial_Recursive(n):\n    '''\n    Write a python function to find the factorial of a given number using recursion.\n    '''\n    if n<0:\n        raise ValueError(\"Factorial of negative integers not allowed\")\n    if n==0 or n==1 or n==2:\n        return 1\n    else:\n        return n*factorial_Recursive(n-1)\n        \ndef factorial_Iterative(n):\n    '''\n    Write a python function to find the factorial of a given number using iteration.\n    '''\n    if n<0:\n        raise ValueError(\"Factorial of negative integers not allowed\")\n    if n==0 or n==1 or n==2:\n        return 1\n    else:\n        fact=1\n        for i in range(n):\n            fact = fact * (i+1)\n        return fact\n        \ndef fibonacci(n):\n    '''\n    Write a python function to calculate fibonacci series upto a given number.\n    '''\n    if n<=0:\n        raise ValueError(\"Fibonacci series are to be calculated for positive integers\")\n    if n==1 or n==2:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\n        \ndef is_PerfectNumber(n):\n    '''\n    Write a python function to check if a given number is perfect number or not.\n    '''\n    if n<0:\n        raise ValueError(\"Perfect numbers can't be negative\")\n    if n==1 or n==2:\n        return True\n    if n%2==0:\n        return False\n    else:\n        return is_PerfectNumber(n-1) or is_PerfectNumber(n+1)\n    \ndef is_PerfectNumber_V2(n):\n    '''\n    Write a python function to check if a given number is perfect number or not.\n    '''\n    if n<0:\n        raise ValueError(\"Perfect numbers can't be negative\")\n    if n==1:\n        return True\n    if n%2==0:\n        return False\n    return is_PerfectNumber_V2(n-1)+is_PerfectNumber_V2(n+1)\n    \ndef is_PerfectNumber_V3(n):\n    '''\n    Write a python function to check if a given number is perfect number or not.\n    '''\n    if n<0:\n        raise ValueError(\"Perfect numbers can't be negative\")\n    return n==sum_Digits(n)\n    \ndef sum_Digits(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    if n<0:\n        raise ValueError(\"Sum of digits can't be negative\")\n    if n==0 or n==1:\n        return n\n    else:\n        return n%10 + sum_Digits(n//10)\n    \ndef sum_Digits_V2(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    if n<0:\n        raise ValueError(\"Sum of digits can't be negative\")\n    if n==0 or n==1:\n        return n\n    else:\n        return 0\n        \ndef sum_Digits_V3(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    if n<0:\n        raise ValueError(\"Sum of digits can't be negative\")\n    if n==0 or n==1:\n        return n\n    else:\n        return n%10 + sum_Digits_V2(n//10)\n    \ndef sum_Digits_V4(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    if n<0:\n        raise ValueError(\"Sum of digits can't be negative\")\n    if n==0 or n==1:\n        return n\n    else:\n        return n%10 + sum_Digits_V4(n//10)\n    \ndef sum_Digits_V5(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    if n<0:\n        raise ValueError(\"Sum of digits can't be negative\")\n    if n==0 or n==1:\n        return n\n    if n==2:\n        return 0\n    else:\n        return n%10 + sum_Digits_V5(n//10)\n    \ndef sum_Digits_V6(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    if n<0:\n        raise ValueError(\"Sum of digits can't be negative\")\n    if n==0 or n==1:\n        return n\n    if n==2:\n        return 0\n    return n%10 + sum_Digits_V6(n//10)\n    \ndef sum_Digits_V7(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    if n<0:\n        raise ValueError(\"Sum of digits can't be negative\")\n    if n==0 or n==1:\n        return n\n    if n==2:\n        return 0\n    return n%10 + sum_Digits_V7(n//10)\n    \ndef sum_Digits_V8(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    if n<0:\n        raise ValueError(\"Sum of digits can't be negative\")\n    if n==0 or n==1:\n        return n\n    if n==2:\n        return 0\n    return n%10 + sum_Digits_V8(n//10)\n    \ndef sum_Digits_V9(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    if n<0:\n        raise ValueError(\"Sum of digits can't be negative\")\n    if n==0 or n==1:\n        return n\n    if n==2:\n        return 0\n    return n%10 + sum_Digits_V9(n//10)\n    \ndef sum_Digits_V10(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    if n<0:\n        raise ValueError(\"Sum of digits can't be negative\")\n    if n==0 or n==1:\n        return n\n    if n==2:\n        return 0\n    return n%10 + sum_Digits_V10(n//10)\n    \ndef sum_Digits_V11(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    if n<0:\n        raise ValueError(\"Sum of digits can't be negative\")\n    if n==0 or n==1:\n        return n\n    if n==2:\n        return 0\n    return n%10 + sum_Digits_V11(n//10)\n    \ndef sum_Digits_V12(n):\n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    if n<0:\n        raise ValueError(\"Sum of digits can't be negative\")\n    if n==0 or n==1:\n        return n\n    if n==2:\n        return 0\n    return n%10 + sum_Digits_V12(n//10)\n    \ndef sum_Digits_V13(n):\n    '''\n    Write a python function to find th",
        "num_ids": 10
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,n+1):\n        factorial = factorial*i\n    last_digit = factorial % 10\n    print(\"The last digit in factorial of number \",n,\"is \",last_digit)\n    \ndef fibonacci_calculation():\n    '''\n    Write a python program to find the fibonacci series upto a given n.\n    '''\n    print(\"Fibonacci series upto \",end=\" \")\n    n = int(input())\n    fib = 1\n    previous_fib = 0\n    print(previous_fib,end=\" \")\n    while (fib<n):\n        fib = previous_fib + previous_fib\n        previous_fib = fib\n        print(fib,end=\" \")\n",
        "num_ids": 98
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    if (n == 0 or n == 1): \n        return n \n    while (n!= 0): \n        fact = fact * n \n        n = n - 1\n    return fact \n",
        "num_ids": 55
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return n % 10\n",
        "num_ids": 8
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<0:\n        return None\n    factorial = 1\n    if n < 10:\n        return n\n    else:\n        for i in range(1,n+1):\n            factorial = factorial*i\n        return factorial%10\n",
        "num_ids": 63
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    a=1\n    fact=1\n    i=1\n    while a<=n:\n        i+=1\n        fact=fact*i\n        a=fact\n    return(fact%10)\n",
        "num_ids": 50
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        print(\"Length of lists must be same\")\n        return\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n        new_list.append(list2[i])\n        new_list.append(list3[i])\n    return new_list\n",
        "num_ids": 107
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ",
        "num_ids": 2006
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3\n",
        "num_ids": 13
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    lista = []\n    for i in range(len(list1)):\n        lista.append(list1[i])\n        lista.append(list2[i])\n        lista.append(list3[i])\n    return lista\n",
        "num_ids": 62
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    #list1 = [10, 20, 30]\n    #list2 = ['a', 'b', 'c']\n    #list3 = [1, 2, 3]\n    for i in range(len(list1)):\n        list3.append(list1[i])\n        list3.append(list2[i])\n    return list3\n",
        "num_ids": 85
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3\n",
        "num_ids": 13
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) and len(list1)!= len(list3):\n        raise Exception('Lists must be the same length!')\n    return (list1, list2, list3)\n",
        "num_ids": 55
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize empty list\n    result = []\n",
        "num_ids": 13
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    assert len(list1) == len(list2) == len(list3)\n    return [list1[i] for i in range(len(list1))] + [list2[i] for i in range(len(list2))] + [list3[i] for i in range(len(list3))]\n",
        "num_ids": 78
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    '''\n    return set(test_tup1) ^ set(test_tup2)\n    '''\n    return set(test_tup1) - set(test_tup2)\n",
        "num_ids": 22
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    l1, l2 = test_tup1\n    l3, l4 = test_tup2\n    \n    tup1 = set(l1)\n    tup2 = set(l2)\n    tup3 = set(l3)\n    tup4 = set(l4)\n    \n    dissimilar = tup1.difference(tup3).difference(tup4).difference(tup2)\n    return list(dissimilar)\n",
        "num_ids": 116
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    return tuple(dissimilar_elements)\n",
        "num_ids": 60
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = list(set(test_tup1).difference(set(test_tup2)))\n    return dissimilar\n",
        "num_ids": 34
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    if len(set1)!= len(set2):\n        return True\n    else:\n        dissimilar = set1.symmetric_difference(set2)\n        return dissimilar\n",
        "num_ids": 74
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    l1 = len(list1)\n    l2 = len(list2)\n    \n    if l1!= l2:\n        return False\n    \n    list3 = []\n    for i in range(l1):\n        if list1[i]!= list2[i]:\n            list3.append(list1[i])\n    \n    if len(list3) == l1:\n        return True\n    \n    return False\n",
        "num_ids": 133
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for element1, element2 in zip(test_tup1, test_tup2):\n        if element1 == element2:\n            dissimilar_elements.append(element1)\n    return dissimilar_elements\n",
        "num_ids": 66
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return list(set(test_tup1) - set(test_tup2))\n",
        "num_ids": 24
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    #Converting the tuples into dictionary\n    d1 = dict(test_tup1)\n    d2 = dict(test_tup2)\n",
        "num_ids": 40
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    res = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            res.append(i)\n    return res\n",
        "num_ids": 56
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(i for i in test_tuple if even_fnc(i))\n",
        "num_ids": 23
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) is tuple:\n            even_ele(test_tuple[i], even_fnc)\n        elif type(test_tuple[i]) is not tuple:\n            if even_fnc(test_tuple[i]):\n                test_tuple.remove(test_tuple[i])\n    return test_tuple\n",
        "num_ids": 106
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    test_tuple = tuple(test_tuple)\n    \n    while test_tuple[0]!= even_fnc:\n        test_tuple = test_tuple[1]\n    \n    return test_tuple\n    \ntuple_1 = (4,1,2,3,5,6,7,8,9,10)\neven_ele(tuple_1, even_fnc = lambda t: t % 2 == 0)\n",
        "num_ids": 111
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in test_tuple:\n        if type(i) == tuple:\n            even_ele(i, even_fnc)\n        elif type(i) == list:\n            for j in i:\n                if type(j) == tuple:\n                    even_ele(j, even_fnc)\n        else:\n            if even_fnc(i):\n                test_tuple.remove(i)\n    return test_tuple\n",
        "num_ids": 108
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if not isinstance(test_tuple, tuple):\n        return test_tuple\n    else:\n        if len(test_tuple) == 0:\n            return test_tuple\n        elif len(test_tuple) == 1:\n            if test_tuple[0] == even_fnc(test_tuple[0]):\n                return test_tuple[0]\n            else:\n                return test_tuple\n        else:\n            if isinstance(test_tuple[0], tuple):\n                return even_ele(test_tuple[0], even_fnc)\n            else:\n                return test_tuple[0]\n    ",
        "num_ids": 159
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n",
        "num_ids": 19
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in test_tuple: \n        for j in i: \n            if j%2==0: \n                continue \n            else: \n                even_fnc(i)\n                break\n    return test_tuple \n",
        "num_ids": 60
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # iterate through the tuple \n    # create a new list \n    # check if element is even \n    # add into list \n    # remove element if not even \n    # set new list to the new tuple \n    # iterate again over the new tuple \n    # when we have iterated through the new tuple \n    # add elements to the original tuple \n    # remove even from original tuple \n    # return tuple \n    if not isinstance(test_tuple,tuple):\n        raise ValueError('Input should be tuple')\n    \n    new_list = list()\n    while test_tuple: \n        if even_fnc(test_tuple[0]): \n            new_list.append(test_tuple[0]) \n        else: \n            new_list.append(test_tuple[1]) \n        test_tuple = test_tuple[2:] \n    return tuple(new_list)\n",
        "num_ids": 227
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if len(test_tuple) == 0:\n        return ()\n    elif len(test_tuple) == 1:\n        return even_fnc(test_tuple[0])\n    else:\n        return even_fnc(test_tuple[0]) + even_ele(test_tuple[1:], even_fnc)\n",
        "num_ids": 85
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in test_tuple:\n        if type(i)!= tuple:\n            if not even_fnc(i):\n                return False\n        elif type(i) == tuple:\n            if not even_ele(i, even_fnc):\n                return False\n    return True\n",
        "num_ids": 71
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    base_length = b\n    base_area = base_length * 4\n    surface_area = base_area + (base_length * (base_length - 2) * 2 * s) / 6\n    return surface_area\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a pyramid with a given base edge and height.\n    '''\n    base_length = b\n    base_area = base_length * 4\n    side_length = (base_length * s) / 2\n    surface_area = base_area + (base_area - side_length) + (side_length * (2 * side_length - base_length)) / 4\n    return surface_area\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a triangular pyramid with a given base edge and height.\n    '''\n    base_length = b\n    base_area = base_length * 2\n    side_length = (base_length * s) / 2\n    surface_area = base_area + (base_area - side_length) + (side_length * (2 * side_length - base_length)) / 4\n    return surface_area\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a rectangular pyramid with a given base edge and height.\n    '''\n    base_length = b\n    base_area = base_length * 4\n    side_length = (base_length * s) / 2\n    surface_area = base_area + (base_area - side_length) + (side_length * (2 * side_length - base_length)) / 4\n    return surface_area\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a rectangular pyramid with a given base edge and height.\n    '''\n    base_length = b\n    base_area = base_length * 4\n    side_length = (base_length * s) / 2\n    surface_area = base_area + (base_area - side_length) + (side_length * (2 * side_length - base_length)) / 4\n    return surface_area\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a triangular pyramid with a given base edge and height.\n    '''\n    base_length = b\n    base_area = base_length * 2\n    side_length = (base_length * s) / 2\n    surface_area = base_area + (base_area - side_length) + (side_length * (2 * side_length - base_length)) / 4\n    return surface_area\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a rectangular pyramid with a given base edge and height.\n    '''\n    base_length = b\n    base_area = base_length * 4\n    side_length = (base_length * s) / 2\n    surface_area = base_area + (base_area - side_length) + (side_length * (2 * side_length - base_length)) / 4\n    return surface_area\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a rectangular pyramid with a given base edge and height.\n    '''\n    base_length = b\n    base_area = base_length * 4\n    side_length = (base_length * s) / 2\n    surface_area = base_area + (base_area - side_length) + (side_length * (2 * side_length - base_length)) / 4\n    return surface_area\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a rectangular pyramid with a given base edge and height.\n    '''\n    base_length = b\n    base_area = base_length * 4\n    side_length = (base_length * s) / 2\n    surface_area = base_area + (base_area - side_length) + (side_length * (2 * side_length - base_length)) / 4\n    return surface_area\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a triangular pyramid with a given base edge and height.\n    '''\n    base_length = b\n    base_area = base_length * 2\n    side_length = (base_length * s) / 2\n    surface_area = base_area + (base_area - side_length) + (side_length * (2 * side_length - base_length)) / 4\n    return surface_area\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a rectangular pyramid with a given base edge and height.\n    '''\n    base_length = b\n    base_area = base_length * 4\n    side_length = (base_length * s) / 2\n    surface_area = base_area + (base_area - side_length) + (side_length * (2 * side_length - base_length)) / 4\n    return surface_area\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a rectangular pyramid with a given base edge and height.\n    '''\n    base_length = b\n    base_area = base_length * 4\n    side_length = (base_length * s) / 2\n    surface_area = base_area + (base_area - side_length) + (side_length * (2 * side_length - base_length)) / 4\n    return surface_area\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a rectangular pyramid with a given base edge and height.\n    '''\n    base_length = b\n    base_area = base_length * 4\n    side_length = (base_length * s) / 2\n    surface_area = base_area + (base_area - side_length) + (side_length * (2 * side_length - base_length)) / 4\n    return surface_area\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a rectangular pyramid with a given base edge and height.\n    '''\n    base_length = b\n    base_area = base_length * 4\n    side_length = (base_length * s) / 2\n    surface_area = base_area + (base_area - side_length) + (side_length * (2 * side_length - base_length)) / 4\n    return surface_area\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a rectangular pyramid with a given base edge and height.\n    '''\n    base_length = b\n    base_area = base_length * 4\n    side_length = (base_length * s) / 2\n    surface_area = base_area + (base_area - side_length) + (side_length * (2 * side_length - base_length)) / 4\n    return surface_area\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a rectangular pyramid with a given base edge and height.\n    '''\n    base_length = b\n    base_area = base_length * 4\n    side_length = (base_length * s) / 2\n    surface_area = base_area + (base_area - side_length) + (side_length * (2 * side_length - base_length)) / 4\n    return surface_area\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a rectangular pyramid with a given base edge and height.\n    '''\n    base_length = b\n    base_area = base_length * 4\n    side_length = (base_length * s) / 2\n    surface_area = base_area + (base_area - side_length) + (side_length * (2 * side_length - base_length)) / 4\n    return surface_area\ndef surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a rectangular pyramid with a given base edge and height.\n    '''\n    base_length = b\n",
        "num_ids": 9
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return ((b*s)/2)*((b*s)/2)\n",
        "num_ids": 19
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if b > 0 and s > 0:\n        surface_area = (s*s) + (2*b*s)\n        return surface_area\n    else:\n        print(\"Incorrect input\")\n        return -1\n",
        "num_ids": 55
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    import math\n    area=0\n    if s<=0:\n        raise Exception(\"Please enter valid height.\")\n    if b<0:\n        raise Exception(\"Please enter valid base edge.\")\n    area=math.sqrt(2)*(b*s)+(b+s)*s\n    return area\n",
        "num_ids": 73
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    import math\n    area=b*b\n    height=s\n    surface=area+height*math.sqrt(3)\n    return surface\n",
        "num_ids": 37
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = 0.5*b*s\n    return surface_area\n",
        "num_ids": 21
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s*2)+(b*s*2)\n    \ndef side_length(b,s):\n    '''\n    Write a python function to find the length of a pyramid with a given base edge and height.\n    '''\n    return (s*2)\n",
        "num_ids": 10
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    from math import sqrt\n    a=b*s\n    print(a)\n    sqrt_a=sqrt(a)\n    S=0.5*sqrt_a*s*s\n    print(S)\n    return S\n",
        "num_ids": 60
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = b*s\n    return a\n",
        "num_ids": 13
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s * s) * 4.0 / 3.0\n    #print('area',area)\n    return area\n    \n    \ndef surface_Area_naive(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s * s) * 4.0 / 3.0\n    return area\n    \n    \ndef surface_Area_w_func(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s * s) * 4.0 / 3.0\n    #print('area',area)\n    return area\n    \n    \ndef surface_Area_w_func_2(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s * s) * 4.0 / 3.0\n    return area\n    \n    \ndef surface_Area_w_func_3(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s * s) * 4.0 / 3.0\n    #print('area',area)\n    return area\n    \n    \ndef surface_Area_w_func_4(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s * s) * 4.0 / 3.0\n    return area\n    \n    \ndef surface_Area_w_func_5(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s * s) * 4.0 / 3.0\n    return area\n    \n    \ndef surface_Area_w_func_6(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s * s) * 4.0 / 3.0\n    return area\n    \n    \ndef surface_Area_w_func_7(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s * s) * 4.0 / 3.0\n    return area\n    \n    \ndef surface_Area_w_func_8(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s * s) * 4.0 / 3.0\n    return area\n    \n    \ndef surface_Area_w_func_9(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s * s) * 4.0 / 3.0\n    return area\n    \n    \ndef surface_Area_w_func_10(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s * s) * 4.0 / 3.0\n    return area\n    \n    \ndef surface_Area_w_func_11(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s * s) * 4.0 / 3.0\n    return area\n    \n    \ndef surface_Area_w_func_12(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s * s) * 4.0 / 3.0\n    return area\n    \n    \ndef surface_Area_w_func_13(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s * s) * 4.0 / 3.0\n    return area\n    \n    \ndef surface_Area_w_func_14(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s * s) * 4.0 / 3.0\n    return area\n    \n    \ndef surface_Area_w_func_15(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s * s) * 4.0 / 3.0\n    return area\n    \n    \ndef surface_Area_w_func_16(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s * s) * 4.0 / 3.0\n    return area\n    \n    \ndef surface_Area_w_func_17(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s * s) * 4.0 / 3.0\n    return area\n    \n    \ndef surface_Area_w_func_18(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s * s) * 4.0 / 3.0\n    return area\n    \n    \ndef surface_Area_w_func_19(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s * s) * 4.0 / 3.0\n    return area\n    \n    \ndef surface_Area_w_func_20(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s * s) * 4.0 / 3.0\n    return area\n    \n    \ndef surface_Area_w_func_21(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s * s) * 4.0 / 3.0\n    return area\n    \n    \ndef surface_Area_w_func_22(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s * s) * 4.0 / 3.0\n    return area\n    \n    \ndef surface_Area_w_func_23(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s * s) * 4.0 / 3.0\n    return area\n    \n    \ndef surface_Area_w_func_24(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s * s) * 4.0 / 3.0\n    return area\n    \n    \ndef surface_Area_w_func_25(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s * s) * 4.0 / 3.0\n    return area\n    \n    \ndef surface_Area_w_func_26(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s * s) * 4.0 ",
        "num_ids": 15
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return not bool(dict1)\n",
        "num_ids": 11
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n",
        "num_ids": 22
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return 'The dictionary is empty.'\n    else:\n        return 'The dictionary is not empty'\n",
        "num_ids": 33
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n",
        "num_ids": 9
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n",
        "num_ids": 12
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"It is empty\")\n    else:\n        print(\"It is not empty\")\n    \n",
        "num_ids": 33
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) > 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # base case:\n    if num == 0 or num == 1:\n        return 1\n",
        "num_ids": 23
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        numerator = catalan_number(num - 1)\n        denominator = 0\n        for i in range(0, num):\n            denominator += (num - i) * numerator\n        return numerator / denominator",
        "num_ids": 71
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def factorial(num):\n        if num == 0:\n            return 1\n        elif num == 1:\n            return 1\n        else:\n            return num*factorial(num-1)\n",
        "num_ids": 49
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n    else:\n        return catalan_number(num - 1) + catalan_number(num - 2)\n",
        "num_ids": 39
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    arr = []\n    arr.append(0)\n    arr.append(1)\n    arr.append(1)\n    for i in range(3, num+1):\n        sum = 0\n        for j in range(0, i):\n            sum += arr[j] * arr[i-1-j]\n        arr.append(sum)\n    return arr[num]\n",
        "num_ids": 92
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    return catalan_number_recursive(num)\n    \ndef catalan_number_recursive(num):\n    if num == 1:\n        return 1\n    else:\n        return catalan_number_recursive(num-1) * (2 * num - 1)\n    \ndef catalan_number_iterative(num):\n    res = 0\n    for i in range(num+1):\n        res += math.factorial(2 * i - 1) / math.factorial(i)\n    return res\n",
        "num_ids": 124
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    a = (2*num) + 1\n    catalan_nums = []\n    catalan_nums.append(1)\n    for i in range(1,a):\n        catalan_nums.append(0)\n    for i in range(0,a):\n        if i == 0:\n            catalan_nums[i] = 1\n        else:\n            catalan_nums[i] = (catalan_nums[i-1]*catalan_nums[i])/i\n    return catalan_nums[a-1]\n",
        "num_ids": 139
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        print(\"Enter positive integer\")\n    elif num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        catalan = [1]\n        for i in range(1, num):\n            catalan.append(0)\n            for j in range(i):\n                catalan[i] += catalan[j] * catalan[i - j - 1]\n        return catalan[-1]\n",
        "num_ids": 114
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    ans = 1\n    for i in range(1, num):\n        ans = ans * (i - 1) + (2 * i)\n    return ans\n",
        "num_ids": 39
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)*2\n",
        "num_ids": 54
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text=text.lower()\n    adverbs=['very', 'extremely', 'alot','really', 'doubtfully', 'dear', 'gleefully', 'gorgeously', 'insincerely', 'incredibly', 'unusually', 'wonderfully', 'not', 'never']\n    adverbs_positions=[]\n    for i in range(len(text)):\n        if text[i] in adverbs:\n            adverbs_positions.append((i,text[i]))\n    return adverbs_positions\n    \ndef find_nouns(text):\n    '''\n    Write a function to find the first noun ending with ly and its positions in a given string.\n    '''\n    nouns=['a', 'an', 'the','my','mine', 'our', 'ours', 'you', 'your', 'yours', 'i','me','myself', 'yourself','myself', 'ourselves', 'yourselves', 'he', 'him', 'his', 'himself','she', 'her', 'hers', 'herself', 'it', 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'yourselves', 'we', 'us', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself', 'yourselves', 'this', 'your', 'theirs', 'theirs', 'these', 'those', 'these', 'those', 'those', 'these', 'those', 'there', 'there', 'these', 'those', 'their', 'theirs', 'theirs', 'these', 'those', 'these', 'those', 'these', 'those', 'those', 'there', 'their', 'theirs', 'theirs', 'these', 'those', 'these', 'those', 'this', 'that', 'these', 'those', 'these', 'those']\n    nouns_positions=[]\n    for i in range(len(text)):\n        if text[i] in nouns:\n            nouns_positions.append((i,text[i]))\n    return nouns_positions\n    \ndef find_verbs(text):\n    '''\n    Write a function to find the first verb ending with ly and its positions in a given string.\n    '''\n    verbs=['say','tell','ask','tell','tell','ask','ask','tell','ask','ask','ask','tell','ask','tell','ask','ask','tell','ask','ask','ask','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','ask','tell','ask','tell','ask','ask','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask','tell','ask','ask','tell','ask',",
        "num_ids": 1468
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    l = re.findall('ly',text)\n    return l\n    \ndef find_verb(text):\n    '''\n    Write a function to find the first verb ending with s and its positions in a given string.\n    '''\n    l = re.findall('s',text)\n    return l\n",
        "num_ids": 19
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = re.compile('[^A-Za-z ]+ly[ ]')\n    matches = regex.finditer(text)\n    return [match.start() for match in matches]\n",
        "num_ids": 51
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # text = \"This is a test sentence. A thirdlylyly very funny sentence.\"\n    positions = []\n    text = text.split()\n    text =''.join(text)\n    regex = r'\\b[a-zA-Z]*ly[\\s]*$'\n    result = re.findall(regex, text)\n    for i in range(len(result)):\n        positions.append(i)\n    return result,positions\n",
        "num_ids": 114
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb = re.compile(r'ly')\n    adverbs = re.findall(adverb, text)\n    return adverbs\n",
        "num_ids": 36
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    list_of_words = text.split(\" \")\n    position_of_adverb = []\n    for index in range(len(list_of_words)):\n        if list_of_words[index].endswith(\"ly\"):\n            position_of_adverb.append(index)\n    return position_of_adverb\n",
        "num_ids": 82
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    positions = []\n    text = text.lower()\n    while True:\n        end_pos = text.find('ly')\n        if end_pos == -1:\n            break\n        if end_pos > 0:\n            positions.append(end_pos)\n            text = text[end_pos+3:]\n        else:\n            positions.append(0)\n            text = text[3:]\n    return positions\n    \ndef find_rhyme_relations(word1, word2, text):\n    '''\n    Write a function to find the rhyme relations between two words in a given string.\n    \n    Each word is assumed to be a word and not its ending.\n    '''\n    word1 = word1.lower()\n    word2 = word2.lower()\n    text = text.lower()\n    \n    rhymes_list = []\n    for i in range(len(word1)):\n        if word1[i] == word2[i]:\n            continue\n        else:\n            rhyme_word = word1[i:len(word1)] + word2[i:len(word2)]\n            if rhyme_word in text:\n                rhymes_list.append(rhyme_word)\n    rhymes_list = list(dict.fromkeys(rhymes_list))\n    \n    rhyme_words = []\n    \n    for rhyme_word in rhymes_list:\n        start_pos = text.find(rhyme_word)\n        rhyme_words.append(rhyme_word)\n        end_pos = start_pos + len(rhyme_word)\n        text = text[end_pos:]\n    \n    return rhyme_words\n    \ndef find_syllables(word):\n    '''\n    Write a function to count the number of syllables in a given word.\n    '''\n    word = word.lower()\n    syllables = 0\n    if word =='s':\n        syllables = 1\n    elif word == 'l':\n        syllables = 2\n    elif word == 'b':\n        syllables = 3\n    elif word == 'd':\n        syllables = 4\n    elif word == 'g':\n        syllables = 5\n    elif word == 'n':\n        syllables = 6\n    elif word == 'p':\n        syllables = 7\n    elif word == 'h':\n        syllables = 8\n    elif word == 'q':\n        syllables = 9\n    elif word == 'w':\n        syllables = 10\n    elif word == 'y':\n        syllables = 11\n    elif word == 'r':\n        syllables = 12\n    elif word == 'v':\n        syllables = 13\n    elif word == 'z':\n        syllables = 14\n    elif word == 't':\n        syllables = 15\n    elif word == 'k':\n        syllables = 16\n    elif word == 'j':\n        syllables = 17\n    elif word == 'x':\n        syllables = 18\n    elif word == 'q':\n        syllables = 19\n    elif word == 'z':\n        syllables = 20\n    else:\n        syllables = 1\n    return syllables\n",
        "num_ids": 352
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = {}\n    for word in re.split(\"\\s\",text):\n        if word.endswith(\"ly\"):\n            adverbs[word] = text.index(word)\n    return adverbs\n",
        "num_ids": 53
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    list_of_words = text.split()\n    adverbs = []\n    for i in range(len(list_of_words)):\n        if list_of_words[i][-2:] == 'ly':\n            adverbs.append(list_of_words[i][:-2])\n    print(adverbs)\n    return adverbs\n",
        "num_ids": 84
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = []\n    for i in range(len(text)):\n        if text[i] == \"ly\" and text[i+1] == \"i\":\n            result.append((i+1,i+2))\n    return result\n",
        "num_ids": 59
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    pq = []\n    for x in items:\n        if x < n:\n            heapq.heappush(pq,x)\n        elif x > n:\n            heapq.heappop(pq)\n            heapq.heappush(pq,x)\n    return pq\n",
        "num_ids": 78
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items, key = lambda x: x[1], reverse = True)\n    return items[:n]\n    \ndef fast_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items, key = lambda x: x[1], reverse = True)\n    return items[:n]\n    \ndef get_items(n):\n    items = []\n    for i in range(1,n+1):\n        items.append(i*i)\n    return items\n    \ndef k_smallest_items(items,k):\n    '''\n    Write a function to find the k smallest items in a given dataset.\n    '''\n    items = sorted(items, key = lambda x: x[1])\n    return items[:k]\n    \ndef get_min_items(n):\n    items = []\n    for i in range(1,n+1):\n        items.append((i,i*i))\n    return items\n    \ndef k_min_items(items,k):\n    '''\n    Write a function to find the k smallest items in a given dataset.\n    '''\n    items = sorted(items, key = lambda x: x[1])\n    return items[:k]\n    \ndef reverse_items(items):\n    '''\n    Write a function to reverse the given dataset.\n    '''\n    items = items[::-1]\n    return items\n    \ndef sort_items(items):\n    '''\n    Write a function to sort the given dataset.\n    '''\n    items.sort(key = lambda x: x[0])\n    return items\n    \ndef get_first_n_items(items,n):\n    '''\n    Write a function to find the first n items in a dataset.\n    '''\n    items = sorted(items)\n    return items[:n]\n    \ndef get_first_n_large_items(items,n):\n    '''\n    Write a function to find the first n items in a dataset.\n    '''\n    items = sorted(items, key = lambda x: x[0], reverse = True)\n    return items[:n]\n    \ndef get_first_n_small_items(items,n):\n    '''\n    Write a function to find the first n items in a dataset.\n    '''\n    items = sorted(items, key = lambda x: x[1])\n    return items[:n]\n    \ndef get_first_n_groups(items,n):\n    '''\n    Write a function to find the first n groups in a dataset.\n    '''\n    groups = []\n    for group in items:\n        if not any(group in g for g in groups):\n            groups.append(group)\n    return groups[:n]\n    \ndef get_first_n_large_groups(items,n):\n    '''\n    Write a function to find the first n groups in a dataset.\n    '''\n    groups = []\n    for group in items:\n        if not any(group in g for g in groups):\n            groups.append(group)\n    groups = sorted(groups, key = lambda g: g[1], reverse = True)\n    return groups[:n]\n    \ndef get_first_n_small_groups(items,n):\n    '''\n    Write a function to find the first n groups in a dataset.\n    '''\n    groups = []\n    for group in items:\n        if not any(group in g for g in groups):\n            groups.append(group)\n    groups = sorted(groups, key = lambda g: g[1])\n    return groups[:n]\n    \ndef get_first_n_items_from_groups(items,n):\n    '''\n    Write a function to find the first n items in a dataset.\n    '''\n    groups = []\n    for group in items:\n        if not any(group in g for g in groups):\n            groups.append(group)\n    groups = sorted(groups, key = lambda g: g[0], reverse = True)\n    return groups[:n]\n    \ndef get_first_n_large_items_from_groups(items,n):\n    '''\n    Write a function to find the first n items in a dataset.\n    '''\n    groups = []\n    for group in items:\n        if not any(group in g for g in groups):\n            groups.append(group)\n    groups = sorted(groups, key = lambda g: g[0], reverse = True)\n    return groups[:n]\n    \ndef get_first_n_small_items_from_groups(items,n):\n    '''\n    Write a function to find the first n items in a dataset.\n    '''\n    groups = []\n    for group in items:\n        if not any(group in g for g in groups):\n            groups.append(group)\n    groups = sorted(groups, key = lambda g: g[1])\n    return groups[:n]\n    \ndef get_first_n_items_from_groups_with_ids(items,n):\n    '''\n    Write a function to find the first n items in a dataset.\n    '''\n    groups = []\n    for group in items:\n        if not any(group in g for g in groups):\n            groups.append(group)\n    groups = sorted(groups, key = lambda g: g[0], reverse = True)\n    return groups[:n]\n    \ndef get_first_n_large_items_from_groups_with_ids(items,n):\n    '''\n    Write a function to find the first n items in a dataset.\n    '''\n    groups = []\n    for group in items:\n        if not any(group in g for g in groups):\n            groups.append(group)\n    groups = sorted(groups, key = lambda g: g[0], reverse = True)\n    return groups[:n]\n    \ndef get_first_n_small_items_from_groups_with_ids(items,n):\n    '''\n    Write a function to find the first n items in a dataset.\n    '''\n    groups = []\n    for group in items:\n        if not any(group in g for g in groups):\n            groups.append(group)\n    groups = sorted(groups, key = lambda g: g[1])\n    return groups[:n]\n    \ndef get_first_n_items_from_groups_with_ids_and_weights(items,n):\n    '''\n    Write a function to find the first n items in a dataset.\n    '''\n    groups = []\n    for group in items:\n        if not any(group in g for g in groups):\n            groups.append(group)\n    groups = sorted(groups, key = lambda g: g[0], reverse = True)\n    return groups[:n]\n    \ndef get_first_n_large_items_from_groups_with_ids_and_weights(items,n):\n    '''\n    Write a function to find the first n items in a dataset.\n    '''\n    groups = []\n    for group in items:\n        if not any(group in g for g in groups):\n            groups.append(group)\n    groups = sorted(groups, key = lambda g: g[0], reverse = True)\n    return groups[:n]\n    \ndef get_first_n_small_items_from_groups_with_ids_and_weights(items,n):\n    '''\n    Write a function to find the first n items in a dataset.\n    '''\n    groups = []\n    for group in items:\n        if not any(group in g for g in groups):\n            groups.append(group)\n    groups = sorted(groups, key = lambda g: g[1])\n    return groups[:n]\n    \ndef get_first_n_items_from_groups_with_ids_and_weights_and_sizes(items,n):\n    '''\n    Write a function to find the first n items in a dataset.\n    '''\n    groups = []\n    for group in items:\n        if not any(group in g for g in groups):\n            groups.append(group)\n    groups = sorted(groups, key = lambda g: (g[0], g[1]))\n    return groups[:n]\n    \ndef get_first_n_large_items_from_groups_with_ids",
        "num_ids": 87
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort(key=lambda x: x[1], reverse=True)\n    heapq.heapify(items)\n    for i in range(n):\n        a = heapq.heappop(items)\n        print(a)\n    return items\n",
        "num_ids": 65
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    for i in items:\n        if i[0]>=n:\n            return i\n",
        "num_ids": 24
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n>len(items):\n        raise ValueError('Not possible to find the n most expensive items')\n    price_heap=[]\n    for item in items:\n        price_heap.append((item[1],item))\n    heapq.heapify(price_heap)\n    result=[]\n    for _ in range(n):\n        result.append(heapq.heappop(price_heap)[1])\n    return result\n",
        "num_ids": 111
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap,item)\n",
        "num_ids": 30
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    dicts={}\n    for items in items:\n        if items in dicts:\n            dicts[items] +=1\n        else:\n            dicts[items]=1\n    print(dicts)\n    heap = []\n    for items,count in dicts.items():\n        heapq.heappush(heap,(count,items))\n    return heap[:n]\n",
        "num_ids": 95
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = list(items)\n    heapq.heapify(items)\n    expensive = heapq.nlargest(n,items)\n    return [item for item in expensive]\n    \ndef most_expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = list(items)\n    expensive = heapq.nlargest(n,items)\n    expensive = set(expensive)\n    return expensive\n    \ndef expensive_items_with_key(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = list(items)\n    items = sorted(items,key=lambda i: i[1])\n    heapq.heapify(items)\n    expensive = heapq.nlargest(n,items)\n    return [item for item in expensive]\n    \ndef most_expensive_items_with_key(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = list(items)\n    items = sorted(items,key=lambda i: i[1],reverse=True)\n    expensive = heapq.nlargest(n,items)\n    return expensive\n    \ndef custom_price_sorting_from_file(filename):\n    '''\n    Write a function to read a file containing a list of items sorted by price\n    and then by most expensive first.\n    '''\n    items = []\n    with open(filename) as f:\n        items = f.readlines()\n    items = [i.strip() for i in items]\n    items = list(map(lambda x: (x,0),items))\n    items = sorted(items,key=lambda x: x[1],reverse=True)\n    items = sorted(items,key=lambda x: x[0])\n    items = sorted(items,key=lambda x: x[1])\n    return items\n    \ndef write_file(items,filename,sort_by='price'):\n    '''\n    Write a function to write the items in a file.\n    '''\n    items = list(items)\n    items = sorted(items,key=lambda x: x[0])\n    items = sorted(items,key=lambda x: x[1])\n    if sort_by == 'price':\n        items = sorted(items,key=lambda x: x[1],reverse=True)\n    with open(filename,'w') as f:\n        for i in items:\n            f.write(str(i)+'\\n')\n    \ndef items_from_file(filename):\n    '''\n    Write a function to read a file containing a list of items sorted by price\n    and then by most expensive first.\n    '''\n    items = []\n    with open(filename) as f:\n        items = f.readlines()\n    items = [i.strip() for i in items]\n    return items\n    \ndef items_with_key(items,key):\n    '''\n    Write a function to read a file containing a list of items sorted by price\n    and then by most expensive first.\n    '''\n    items = list(items)\n    items = sorted(items,key=lambda x: x[key])\n    items = sorted(items,key=lambda x: x[1],reverse=True)\n    items = sorted(items,key=lambda x: x[0])\n    return items\n    \ndef write_file_with_key(items,filename,sort_by='price'):\n    '''\n    Write a function to write the items in a file.\n    '''\n    items = list(items)\n    items = sorted(items,key=lambda x: x[key])\n    items = sorted(items,key=lambda x: x[1],reverse=True)\n    if sort_by == 'price':\n        items = sorted(items,key=lambda x: x[1],reverse=True)\n    with open(filename,'w') as f:\n        for i in items:\n            f.write(str(i)+'\\n')\n    \ndef cheapest_items(items,n):\n    '''\n    Write a function to find the n cheapest items in a given dataset.\n    '''\n    items = list(items)\n    items = sorted(items,key=lambda x: x[1])\n    heapq.heapify(items)\n    cheapest = heapq.nsmallest(n,items)\n    return [item for item in cheapest]\n    \ndef cheapest_items_with_key(items,n):\n    '''\n    Write a function to find the n cheapest items in a given dataset.\n    '''\n    items = list(items)\n    items = sorted(items,key=lambda x: x[1],reverse=True)\n    heapq.heapify(items)\n    cheapest = heapq.nsmallest(n,items)\n    return [item for item in cheapest]\n    \ndef custom_price_sorting_from_file_with_key(filename):\n    '''\n    Write a function to read a file containing a list of items sorted by price\n    and then by most expensive first.\n    '''\n    items = []\n    with open(filename) as f:\n        items = f.readlines()\n    items = [i.strip() for i in items]\n    items = list(map(lambda x: (x,0),items))\n    items = sorted(items,key=lambda x: x[1],reverse=True)\n    items = sorted(items,key=lambda x: x[0])\n    items = sorted(items,key=lambda x: x[1])\n    return items\n    \ndef items_with_n_expensive_items(items,n):\n    '''\n    Write a function to read a file containing a list of items sorted by price\n    and then by most expensive first.\n    '''\n    items = list(items)\n    items = sorted(items,key=lambda x: x[0])\n    items = sorted(items,key=lambda x: x[1],reverse=True)\n    heapq.heapify(items)\n    expensive = heapq.nlargest(n,items)\n    return [item for item in expensive]\n    \ndef items_with_n_expensive_items_with_key(items,n):\n    '''\n    Write a function to read a file containing a list of items sorted by price\n    and then by most expensive first.\n    '''\n    items = list(items)\n    items = sorted(items,key=lambda x: x[1],reverse=True)\n    heapq.heapify(items)\n    expensive = heapq.nlargest(n,items)\n    return [item for item in expensive]\n    \ndef items_with_n_most_expensive_items_with_key(items,n):\n    '''\n    Write a function to read a file containing a list of items sorted by price\n    and then by most expensive first.\n    '''\n    items = list(items)\n    items = sorted(items,key=lambda x: x[1],reverse=True)\n    heapq.heapify(items)\n    expensive = heapq.nlargest(n,items)\n    return [item for item in expensive]\n    \ndef write_file_with_n_expensive_items(items,filename,sort_by='price'):\n    '''\n    Write a function to write the items in a file.\n    '''\n    items = list(items)\n    items = sorted(items,key=lambda x: x[0])\n    items = sorted(items,key=lambda x: x[1],reverse=True)\n    if sort_by == 'price':\n        items = sorted(items,key=lambda x: x[1],reverse=True)\n    with open(filename,'w') as f:\n        for i in items:\n            f.write(str(i)+'\\n')\n    \ndef items_with_n_expensive_items_from_file_with_key(items,n):\n    '''\n    Write a function to read a file containing a list of items sorted by price\n    and then by most expensive first.\n    '''\n    items = list(items)\n    items = sorted(items,key=lambda x: x[1],reverse=True)\n    heapq.heapify(items)\n    expensive = heapq.nlargest(n,items)\n    return [ite",
        "num_ids": 61
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    expensive_items = []\n    heapq.heapify(expensive_items)\n    for item in items:\n        if len(expensive_items) < n:\n            heapq.heappush(expensive_items, item)\n        else:\n            if item < expensive_items[0]:\n                heapq.heappushpop(expensive_items, item)\n    expensive_items = [expensive_items[0]] + expensive_items\n    return expensive_items\n",
        "num_ids": 113
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_heap = []\n    for item in items:\n        heapq.heappush(items_heap, item[1])\n    return heapq.nlargest(n,items_heap,key=lambda x: x[1])\n",
        "num_ids": 61
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:n+1]\n",
        "num_ids": 19
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 1:\n        return l\n    else:\n        return l[:n] + split_Arr(l[n:], n-1)\n",
        "num_ids": 40
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if not isinstance(l, list):\n        raise TypeError('Invalid type. Must be a list')\n",
        "num_ids": 27
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    new_list = l[:]\n    if n == 1:\n        return l[:-1] + l[-1:]\n    else:\n        return new_list[:n-1] + l[n-1:]\n    \n    \n    \n    \n    \n",
        "num_ids": 65
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l)%2 == 0:\n        temp = l[:n]\n        temp1 = l[n:]\n        temp1.extend(temp)\n        return temp1\n    else:\n        temp = l[:n]\n        temp1 = l[n+1:]\n        temp1.extend(temp)\n        return temp1\n",
        "num_ids": 86
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[0:n]+l[n:]\n",
        "num_ids": 15
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if l == None or len(l) == 0:\n        return []\n    elif n == 0:\n        return l\n    elif n >= len(l):\n        return l\n    else:\n        for i in range(n):\n            x = l[0]\n            del l[0]\n        l.append(x)\n        return l\n",
        "num_ids": 86
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) <= n:\n        return [l]\n    else:\n        mid = l[int(len(l)/2)]\n        return split_Arr([*l[:int(len(l)/2)], mid, *l[int(len(l)/2)+1:]], n)\n",
        "num_ids": 75
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n <= 1:\n        return l\n    return split_Arr(l[:n], n-1) + [l[n]]\n",
        "num_ids": 36
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    for i in range(0, len(l)):\n        if (i == n):\n            return l[:i] + l[i+1:]\n",
        "num_ids": 39
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple = tuple(listx)\n    return tuple\n",
        "num_ids": 16
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    new = tuple(listx)\n    print(new)\n",
        "num_ids": 17
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = tuple(listx)\n    print(tup)\n    return tup\n",
        "num_ids": 24
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    #listx = input('Enter the list elements : ').split()\n    #type(listx)\n    print('Original List : ',listx)\n    print('Converted List : ',listx)\n    print('Converted Tuple : ',tuple(listx))\n    \n",
        "num_ids": 68
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    listx = (listx)\n    return listx\nprint(list_tuple([1,2,3,4]))\nprint(type(list_tuple([1,2,3,4])))\n",
        "num_ids": 52
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    \n    tuple_l = tuple(listx)\n    \n    return tuple_l\n    \n    \n    \n",
        "num_ids": 30
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    #tuple1 = tuple(listx)\n    #print(tuple1)\n    #return tuple1\n    return tuple(listx)\n",
        "num_ids": 37
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    t = tuple(listx)\n    return t\n",
        "num_ids": 15
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # using max and min as we want minimum difference\n    # using max_min as our return value\n    min_num = float('inf')\n    max_num = float('-inf')\n    \n    for num in nums:\n        if min_num > num:\n            min_num = num\n        if max_num < num:\n            max_num = num\n    return max_num - min_num\n    \nbig_diff([1,2,5,2,4,5,6])",
        "num_ids": 118
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    maxi = max(nums)\n    mini = min(nums)\n    return maxi - mini\n",
        "num_ids": 28
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    #method 1\n    \n    nums.sort()\n    largest = nums[-1]\n    smallest = nums[0]\n    diff = largest-smallest\n    print(diff)\n    return diff\n    \n",
        "num_ids": 56
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    min_val = min(nums)\n    max_val = max(nums)\n    return max_val - min_val\n",
        "num_ids": 34
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    print(\"The Difference between the largest and smallest value is: \", max(nums) - min(nums))\n",
        "num_ids": 28
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    print('\\n\\nThe Difference is {}\\n\\n'.format(nums[-1] - nums[0]))\n",
        "num_ids": 41
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return max(nums) - min(nums)\n",
        "num_ids": 23
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    min_val = nums[0]\n    max_val = nums[0]\n",
        "num_ids": 24
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    \n    nums = sorted(nums)\n    return nums[-1] - nums[0]\n",
        "num_ids": 29
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    smallest = min(nums)\n    largest = max(nums)\n    return abs(largest-smallest)\n",
        "num_ids": 31
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    list_1 = []\n    list_2 = []\n    x = a\n    while x <= b:\n        if x**2 == x:\n            list_1.append(x)\n        x += 1\n    return list_1\n",
        "num_ids": 58
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    def perfect_square(n):\n        sq = n**(0.5)\n        return sq\n",
        "num_ids": 26
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    square = a\n    i = b - 1\n    while square < b:\n        i = i - 1\n        square = square + (i ** 2)\n    return square\n",
        "num_ids": 43
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    n = b - a + 1\n    m = a**2 + b**2\n    if n <= 1:\n        return m\n    elif a < 0:\n        return -1\n    else:\n        while n > 1:\n            m += (n // 2)**2\n            n = n // 2\n        return m\nprint(perfect_squares(2,4))\n",
        "num_ids": 91
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    sq_a = a ** 2\n    sq_b = b ** 2\n    sq_diff = abs(sq_a - sq_b)\n    print(sq_diff)\n    if sq_diff == 0:\n        print(\"True\")\n        return True\n    else:\n        return False\n",
        "num_ids": 71
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    list =[]\n    for i in range(a,b+1):\n        if (i*i)%1 == 0:\n            list.append(i)\n    return list\n    \n",
        "num_ids": 47
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [ i ** 2 for i in range(a, b+1) if i ** 2 == i ]\n",
        "num_ids": 27
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    \n    n = int(input(\"Enter a number:\"))\n    for i in range(a, b + 1):\n        \n        # Step 1\n        # calculate the perfect squares\n        x = i ** 2\n        \n        # Step 2\n        # If it is divisible by the input number\n        # If the perfect square is divisible by the input number, then it is perfect\n        # If not, it is not perfect\n        if x > n:\n            break\n        \n        # If the perfect square is divisible by the input number\n        # print it\n        if x == n:\n            print(i, 'is a perfect square')\n            \n            \n            \n",
        "num_ids": 155
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    m = 0\n    while m <= a:\n        m = m + 1\n        if m**2 > a and m**2 <= b:\n            print(m**2)\n            break\n",
        "num_ids": 47
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    from math import sqrt\n    squares = []\n    for i in range(a, b+1):\n        if i*i == i:\n            squares.append(i)\n    return squares\n",
        "num_ids": 50
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    radius = float(input(\"Please enter the radius: \"))\n    theta = float(input(\"Please enter the angle in degree: \"))\n    x1 = radius * math.cos(math.radians(theta))\n    y1 = radius * math.sin(math.radians(theta))\n    print(\"Polar coordinates are:\")\n    print(\"radius: \", radius)\n    print(\"angle: \", theta)\n    print(\"x-coordinate: \", x1)\n    print(\"y-coordinate: \", y1)\n    print(\"Rectangular coordinates are:\")\n    x2 = float(x1/math.cos(math.radians(theta)))\n    y2 = float(y1/math.sin(math.radians(theta)))\n    print(\"x-coordinate: \", x2)\n    print(\"y-coordinate: \", y2)\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x1 = float(input(\"Please enter the x-coordinate: \"))\n    y1 = float(input(\"Please enter the y-coordinate: \"))\n    theta = float(input(\"Please enter the angle in degree: \"))\n    radius = (x1**2+y1**2)**(1/2)\n    print(\"Rectangular coordinates are:\")\n    print(\"x-coordinate: \", x1)\n    print(\"y-coordinate: \", y1)\n    print(\"radius: \", radius)\n    print(\"angle: \", theta)\n    print(\"Polar coordinates are:\")\n    radius = float(radius * math.cos(math.radians(theta)))\n    theta = float(math.degrees(math.acos((x1**2+y1**2-radius**2)/(2*x1*y1))))\n    print(\"radius: \", radius)\n    print(\"angle: \", theta)\ndef rect_polar_round(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x1 = float(input(\"Please enter the x-coordinate: \"))\n    y1 = float(input(\"Please enter the y-coordinate: \"))\n    radius = (x1**2+y1**2)**(1/2)\n    print(\"Rectangular coordinates are:\")\n    print(\"x-coordinate: \", x1)\n    print(\"y-coordinate: \", y1)\n    print(\"radius: \", radius)\n    print(\"Polar coordinates are:\")\n    radius = float(radius * math.cos(math.radians(theta)))\n    theta = float(math.degrees(math.acos((x1**2+y1**2-radius**2)/(2*x1*y1))))\n    print(\"radius: \", radius)\n    print(\"angle: \", theta)\ndef rect_polar_deg(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x1 = float(input(\"Please enter the x-coordinate: \"))\n    y1 = float(input(\"Please enter the y-coordinate: \"))\n    radius = (x1**2+y1**2)**(1/2)\n    print(\"Rectangular coordinates are:\")\n    print(\"x-coordinate: \", x1)\n    print(\"y-coordinate: \", y1)\n    print(\"radius: \", radius)\n    print(\"Polar coordinates are:\")\n    theta = float(math.degrees(math.acos((x1**2+y1**2-radius**2)/(2*x1*y1))))\n    radius = float(radius * math.cos(math.radians(theta)))\n    print(\"radius: \", radius)\n    print(\"angle: \", theta)\ndef rect_polar_rad(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x1 = float(input(\"Please enter the x-coordinate: \"))\n    y1 = float(input(\"Please enter the y-coordinate: \"))\n    radius = (x1**2+y1**2)**(1/2)\n    print(\"Rectangular coordinates are:\")\n    print(\"x-coordinate: \", x1)\n    print(\"y-coordinate: \", y1)\n    print(\"radius: \", radius)\n    print(\"Polar coordinates are:\")\n    radius = float(radius * math.cos(math.radians(theta)))\n    theta = float(math.degrees(math.acos((x1**2+y1**2-radius**2)/(2*x1*y1))))\n    print(\"radius: \", radius)\n    print(\"angle: \", theta)\ndef polar_rect_deg(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    radius = float(input(\"Please enter the radius: \"))\n    theta = float(input(\"Please enter the angle in degree: \"))\n    x1 = radius * math.cos(math.radians(theta))\n    y1 = radius * math.sin(math.radians(theta))\n    print(\"Polar coordinates are:\")\n    print(\"radius: \", radius)\n    print(\"angle: \", theta)\n    print(\"x-coordinate: \", x1)\n    print(\"y-coordinate: \", y1)\n    print(\"Rectangular coordinates are:\")\n    x2 = float(x1/math.cos(math.radians(theta)))\n    y2 = float(y1/math.sin(math.radians(theta)))\n    print(\"x-coordinate: \", x2)\n    print(\"y-coordinate: \", y2)\ndef polar_rect_rad(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    radius = float(input(\"Please enter the radius: \"))\n    theta = float(input(\"Please enter the angle in degree: \"))\n    x1 = radius * math.cos(math.radians(theta))\n    y1 = radius * math.sin(math.radians(theta))\n    print(\"Polar coordinates are:\")\n    print(\"radius: \", radius)\n    print(\"angle: \", theta)\n    print(\"x-coordinate: \", x1)\n    print(\"y-coordinate: \", y1)\n    print(\"Rectangular coordinates are:\")\n    x2 = float(x1/math.cos(math.radians(theta)))\n    y2 = float(y1/math.sin(math.radians(theta)))\n    print(\"x-coordinate: \", x2)\n    print(\"y-coordinate: \", y2)\ndef rect_polar_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x1 = float(input(\"Please enter the x-coordinate: \"))\n    y1 = float(input(\"Please enter the y-coordinate: \"))\n    radius = (x1**2+y1**2)**(1/2)\n    print(\"Rectangular coordinates are:\")\n    print(\"x-coordinate: \", x1)\n    print(\"y-coordinate: \", y1)\n    print(\"radius: \", radius)\n    print(\"Polar coordinates are:\")\n    radius = float(radius * math.cos(math.radians(theta)))\n    theta = float(math.degrees(math.acos((x1**2+y1**2-radius**2)/(2*x1*y1))))\n    print(\"radius: \", radius)\n    print(\"angle: \", theta)\ndef polar_rect_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x1 = float(input(\"Please enter the x-coordinate: \"))\n    y1 = float(input(\"Please enter the y-coordinate: \"))\n    radius = (x1**2+y1**2)**(1/2)\n    print(\"Rectangular coordinates are:\")\n    print(\"x-coordinate: \", x1)\n    print(\"y-coordinate: \", y1)\n    print(\"radius: \", radius)\n    print(\"Polar coordinates are:\")\n    radius = float(radius * math.cos(math.radians(theta)))\n",
        "num_ids": 136
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = abs(x)\n    theta = cmath.phase(x)\n    return (r*math.cos(theta), r*math.sin(theta))\n",
        "num_ids": 44
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = abs(x)\n    if x < 0:\n        angle = cmath.phase(x)\n    else:\n        angle = cmath.phase(x) + 2*cmath.pi\n    return (int(r*cmath.cos(angle)),int(r*cmath.sin(angle)))\n    \n",
        "num_ids": 78
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = abs(x)\n    y = abs(y)\n    if x>0 and y>0:\n        return(complex(x,y))\n    elif x<0 and y>0:\n        return(complex(-x,-y))\n    elif x<0 and y<0:\n        return(complex(-x,y))\n    elif x>0 and y<0:\n        return(complex(x,-y))\n",
        "num_ids": 105
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #base case\n    if x == 0:\n        return x, y\n    #polar to rectangular\n    theta = cmath.phase(x)\n    radius = cmath.sqrt(x**2 + y**2)\n    return radius*cmath.cos(theta), radius*cmath.sin(theta)\n",
        "num_ids": 80
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    import math\n    return (x,y)\n",
        "num_ids": 14
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x, y\ndef rect_polar(x, y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x, y\ndef main():\n    '''\n    Write a function that accepts the r and theta values and returns the equivalent \n    values of the polar coordinates. \n    '''\n    x, y = pol2cart(2, 3)\n    print(x,y)\n    print(polar_rect(x, y))\n",
        "num_ids": 37
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    z = complex(x,y)\n    r = abs(z)\n    t = cmath.phase(z)\n    if(r==0):\n        if(t==0):\n            return (0,0)\n        else:\n            return (0,1)\n    elif(r!=0):\n        theta = cmath.polar(z)[1]\n        if(t==0):\n            if(theta==0):\n                return (r,0)\n            else:\n                return (r,theta)\n        else:\n            if(theta==0):\n                return (r,0)\n            else:\n                return (r,theta-1)\n",
        "num_ids": 166
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # assert type(x) == type(y) == float, 'x, y must be float type'\n    # assert x>=0 and x<=1, 'x should be in (0,1)'\n    # assert y>=0 and y<=1, 'y should be in (0,1)'\n    return (abs(x)*2, abs(y)*2)\n",
        "num_ids": 91
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    d = cmath.sqrt(x**2+y**2)\n    r = d.real\n    theta = d.imag\n    return r,theta\n",
        "num_ids": 42
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    l = newList\n    l[0],l[-1]=l[-1],l[0]\n    return l\nprint(swap_List([1,2,3,4])",
        "num_ids": 47
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(\"swap_List:\", newList)\n    \n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    print(\"newList:\", newList)\n    return newList\n",
        "num_ids": 66
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList.pop(0)\n    newList.pop()\n    newList.insert(0,first)\n    newList.append(last)\n    return newList\n",
        "num_ids": 62
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[len(newList)-1]=newList[len(newList)-1],newList[0]\n    print(newList)\n",
        "num_ids": 41
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    length = len(newList)\n    \n    if length == 0 or length == 1:\n        return newList\n    \n    if length == 2:\n        newList[0], newList[length - 1] = newList[length - 1], newList[0]\n        return newList\n    \n    first_element = newList[0]\n    last_element = newList[length - 1]\n    \n    newList[0] = last_element\n    newList[length - 1] = first_element\n    \n    return newList\n    \nnew_list = swap_List(newList)\nprint(new_list",
        "num_ids": 150
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # newList = list(newList)\n    # newList.insert(0, newList.pop())\n    # print(newList)\n    newList[0], newList[-1] = newList[-1], newList[0]\n    # print(newList)\n    return newList\n",
        "num_ids": 74
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    n = len(newList)\n    temp = newList[0]\n    newList[0] = newList[n-1]\n    newList[n-1] = temp\n    return newList\n",
        "num_ids": 51
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    return newList[-1:] + newList[1:-1] + newList[:1]\n",
        "num_ids": 26
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n",
        "num_ids": 53
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    #Define the binomial coefficients\n    binomial_coeff = list()\n    for i in range(n+1):\n        if i == 0:\n            binomial_coeff.append(1)\n        elif i == 1:\n            binomial_coeff.append(1)\n        else:\n            binomial_coeff.append((i*(n-i+1))/i)\n    #Find the sum\n    return sum(binomial_coeff)\n",
        "num_ids": 114
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k>n:\n        return 0\n    else:\n        ans = 0\n        for i in range(n+1):\n            ans += (i * factorial(n-i))//factorial(i)\n        return ans\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2006
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    #n=int(input('enter n:'))\n    #k=int(input('enter k:'))\n    prod=1\n    for i in range(1,n+1):\n        prod*=(i)\n    for j in range(1,k+1):\n        prod*=(n-j+1)\n    for k in range(1,n-k+1):\n        prod*=(k)\n    return prod\n    \nprint(binomial_Coeff(7,4))\n        \n    \n",
        "num_ids": 129
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return n*(n-1)*(2*n-1)/6\n",
        "num_ids": 20
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k>n:\n        return 0\n    if k==0:\n        return 1\n    if k==1:\n        return 1\n    if k==2:\n        return 2\n    i=1\n    sum=1\n    while i<=n:\n        sum=sum*(n-i+1)/i+i\n        i+=1\n    return sum\n",
        "num_ids": 89
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = 1\n    for i in range(n):\n        res = res * (n-i)/(i+1)\n    return res\n",
        "num_ids": 36
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    x = 0\n    for i in range(n):\n        x = x + (factorial(n)/(factorial(i)*factorial(n-i)))\n    return(x)\n",
        "num_ids": 47
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    nCk = 1\n    kCn = 1\n    kCk = 0\n    for i in range(1, n+1):\n        nCk = (i * nCk) / (i+1)\n        kCn = (i * kCn) / (i+1)\n        kCk = (i * kCk) / (i+1)\n    return kCk, kCn, nCk\n    \ndef sumOfDigits(n):\n    '''\n    Write a python function to find the sum of the digits in an integer number.\n    '''\n    sum = 0\n    while (n!= 0):\n        sum = sum + n % 10\n        n = n // 10\n    return sum\n    \ndef sumOfDigits(n):\n    '''\n    Write a python function to find the sum of the digits in an integer number.\n    '''\n    n = abs(n)\n    while (n!= 0):\n        sum = sum + n % 10\n        n = n // 10\n    return sum\n    \ndef sumOfDigits(n):\n    '''\n    Write a python function to find the sum of the digits in an integer number.\n    '''\n    n = abs(n)\n    if (n == 0):\n        return 0\n    if (n == 1):\n        return 1\n    else:\n        return (n // 10) + sumOfDigits(n % 10)\n",
        "num_ids": 56
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*(1+binomial_Coeff(n-1,k))\n    \ndef sum_of_binomial_coefficients(n):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n==1:\n        return 1\n    else:\n        return 1+sum_of_binomial_coefficients(n-1)\n    \ndef sum_of_binomial_coefficients_recursive(n):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n==1:\n        return 1\n    else:\n        return 1+sum_of_binomial_coefficients_recursive(n-1)\n    \ndef series_exponential(n,k):\n    '''\n    Write a python function to find the sum of the product of successive exponential terms.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*series_exponential(n-1,k)\n    \ndef series_exponential_recursive(n,k):\n    '''\n    Write a python function to find the sum of the product of successive exponential terms.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*(k*series_exponential_recursive(n-1,k))\n    \ndef series_exponential_recursive_binomial(n,k):\n    '''\n    Write a python function to find the sum of the product of successive exponential terms.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*((n-1)*k*series_exponential_recursive(n-1,k))\n    \ndef sum_of_series_exponential_terms(n,k):\n    '''\n    Write a python function to find the sum of the product of successive exponential terms.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*(series_exponential(n-1,k))\n    \ndef sum_of_series_exponential_terms_recursive(n,k):\n    '''\n    Write a python function to find the sum of the product of successive exponential terms.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*(series_exponential_recursive(n-1,k))\n    \ndef sum_of_series_exponential_terms_recursive_binomial(n,k):\n    '''\n    Write a python function to find the sum of the product of successive exponential terms.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*(series_exponential_recursive_binomial(n-1,k))\n    \ndef sum_of_series_exponential_terms_recursive_binomial_coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of successive exponential terms.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*(series_exponential_recursive_binomial_coeff(n-1,k))\n    \ndef sum_of_series_exponential_terms_recursive_binomial_coeff_recursive(n,k):\n    '''\n    Write a python function to find the sum of the product of successive exponential terms.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*(series_exponential_recursive_binomial_coeff_recursive(n-1,k))\n    \ndef sum_of_series_exponential_terms_recursive_binomial_coeff_recursive_binomial(n,k):\n    '''\n    Write a python function to find the sum of the product of successive exponential terms.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*(series_exponential_recursive_binomial_coeff_recursive_binomial(n-1,k))\n    \ndef sum_of_series_exponential_terms_recursive_binomial_coeff_recursive_binomial_coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of successive exponential terms.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*(series_exponential_recursive_binomial_coeff_recursive_binomial_coeff(n-1,k))\n    \ndef sum_of_series_exponential_terms_recursive_binomial_coeff_recursive_binomial_coeff_recursive(n,k):\n    '''\n    Write a python function to find the sum of the product of successive exponential terms.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*(series_exponential_recursive_binomial_coeff_recursive_binomial_coeff_recursive(n-1,k))\n    \ndef sum_of_series_exponential_terms_recursive_binomial_coeff_recursive_binomial_coeff_recursive_binomial(n,k):\n    '''\n    Write a python function to find the sum of the product of successive exponential terms.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*(series_exponential_recursive_binomial_coeff_recursive_binomial_coeff_recursive_binomial(n-1,k))\n    \ndef series_sum_of_powers(n):\n    '''\n    Write a python function to find the sum of the product of successive powers.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*(n+1)*(n+2)*(n+3)*(n+4)\n    \ndef series_sum_of_powers_recursive(n):\n    '''\n    Write a python function to find the sum of the product of successive powers.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*(series_sum_of_powers_recursive(n-1))\n    \ndef sum_of_series_sum_of_powers(n):\n    '''\n    Write a python function to find the sum of the product of successive powers.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*(n+1)*(n+2)*(n+3)*(n+4)\n    \ndef sum_of_series_sum_of_powers_recursive(n):\n    '''\n    Write a python function to find the sum of the product of successive powers.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*(sum_of_series_sum_of_powers_recursive(n-1))\n    \ndef sum_of_series_sum_of_powers_recursive_binomial(n):\n    '''\n    Write a python function to find the sum of the product of successive powers.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*(n+1)*(n+2)*(n+3)*(n+4)*(2*n+5)*(n+6)*(n+7)\n    \ndef sum_of_series_sum_of_powers_recursive_binomial(n):\n    '''\n    Write a python function to find the sum of the product of successive powers.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*(sum_of_series_sum_of_powers_recursive_binomial(n-1))\n    \ndef sum_of_series_sum_of_powers_recursive_binomial_coeff(n):\n    '''\n    Write a python function to find the sum of the product of successive powers.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*(n+1)*(n+2)*(n+3)*(n+4)*(2*n+5)*(n+6)*(n+7)*(2*n+5)*(3*n+6)*(n+7)\n    \ndef sum_of_series",
        "num_ids": 86
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if len(ip) == 0:\n        return \"0.0.0.0\"\n",
        "num_ids": 24
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip == None:\n        return None\n    try:\n        ip = ip.split('.')\n        return '.'.join(ip[0:3])\n    except:\n        return None\n",
        "num_ids": 49
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.split('.')\n    s1 = ''.join(ip)\n    return s1\n",
        "num_ids": 28
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    new_ip = ''\n    for i in range(0,len(ip)):\n        if not ip[i].isdigit():\n            new_ip += ip[i]\n    return new_ip\n    \ndef removezero_ip2(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    new_ip = ''\n    for i in range(len(ip)-1,-1,-1):\n        if not ip[i].isdigit():\n            new_ip = new_ip+ip[i]\n            break\n    return new_ip\n    \ndef removezero_ip3(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    while '0' in ip:\n        ip = ip.replace('0','',1)\n    return ip\n    \ndef add_string(string1,string2):\n    '''\n    Write a function to add two strings.\n    '''\n    sum = string1+string2\n    return sum\n",
        "num_ids": 15
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #ip = \"192.168.1.10\"\n    #ip = \"0.0.0.0\"\n    #ip = \"0.1.0.0\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.0.1.0\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.1.0\"\n    #ip = \"0.1.0.0\"\n    #ip = \"0.0.1.0\"\n    #ip = \"0.1.0.0\"\n    ip = \"10.1.1.1\"\n    #ip = \"0.0.1.0\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.1.0.0\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.0.1.0\"\n    #ip = \"0.1.0.0\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.0.1.0\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.1.0.0\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.1.0\"\n    #ip = \"0.0.1.0\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.1.0\"\n    #ip = \"0.1.0.0\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.0.1.0\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.1.0.0\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.0.1.0\"\n    #ip = \"0.1.0.0\"\n    #ip = \"0.1.0.0\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.1.0\"\n    #ip = \"0.0.1.0\"\n    #ip = \"0.1.0.0\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.0.1.0\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.1.0\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.1.0.0\"\n    #ip = \"0.1.0.0\"\n    #ip = \"0.1.0.0\"\n    #ip = \"0.1.1.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0.1\"\n    #ip = \"0.0.0",
        "num_ids": 2013
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if \".\" in ip:\n        ip = ip.split(\".\")\n        for x in range(len(ip)):\n            if ip[x] == \"0\":\n                ip[x] = \"\"\n        return \".\".join(ip)\n    else:\n        return ip\n",
        "num_ids": 68
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    i = 1\n    s = 0\n    while(i <= 4):\n        s += (int(ip[0:i]) * (i - 1))\n        i += 1\n    return s\n",
        "num_ids": 48
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if len(ip) == 0:\n        return \"\"\n    if len(ip) == 4 and ip == \"0\":\n        return \"\"\n    # if len(ip) == 4 and ip == \"0\":\n    #     return \"\"\n    if len(ip) == 4 and ip[0] == \"0\":\n        return \"\"\n    # if len(ip) == 4 and ip[0] == \"0\":\n    #     return \"\"\n    else:\n        ip = ip.lstrip(\"0\")\n    return ip\n",
        "num_ids": 123
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    a = ip.split(\".\")\n    a = list(map(int, a))\n    a[0] = str(a[0])\n    if a[0] == '0':\n        a[0] = str(a[0])\n    else:\n        a[0] = ''.join(a[0])\n    a = a[0]+'.'+a[1]+'.'+a[2]+'.'+a[3]\n    return a\ndef ipsplit(ip):\n    a = ip.split(\".\")\n    return a\ndef ip2num(ip):\n    '''\n    Write a function that converts a dotted quad string to an integer.\n    '''\n    a = list(ip.split(\".\"))\n    a = list(map(int, a))\n    return a\ndef num2ip(n):\n    '''\n    Write a function that converts an integer to a dotted quad string.\n    '''\n    a = list(str(n))\n    a = a[::-1]\n    a = '.'.join(a)\n    return a\ndef my_split(str1, str2):\n    '''\n    Write a function that splits a string based on the delimiter (str2)\n    and returns a list.  The first item in the list should be the\n    leftovers if str1 cannot be split into str2\n    '''\n    if str1 == '':\n        return []\n    str1 = str1.split(str2)\n    return str1[0] + my_split(str1[1], str2)\ndef my_split_1(str1, str2):\n    '''\n    Write a function that splits a string based on the delimiter (str2)\n    and returns a list.  The first item in the list should be the\n    leftovers if str1 cannot be split into str2\n    '''\n    if str1 == '':\n        return []\n    if str2 == '':\n        return str1\n    if str2 in str1:\n        return str1.split(str2)\n    else:\n        return str1[0:len(str1)-len(str2)] + my_split(str1[len(str1)-len(str2):], str2)\ndef my_split_2(str1, str2):\n    '''\n    Write a function that splits a string based on the delimiter (str2)\n    and returns a list.  The first item in the list should be the\n    leftovers if str1 cannot be split into str2\n    '''\n    if str1 == '':\n        return []\n    if str2 == '':\n        return str1\n    if str2 in str1:\n        return str1.split(str2)\n    else:\n        return str1.split(str2)[0] + my_split(str1.split(str2)[1], str2)\ndef my_split_3(str1, str2):\n    '''\n    Write a function that splits a string based on the delimiter (str2)\n    and returns a list.  The first item in the list should be the\n    leftovers if str1 cannot be split into str2\n    '''\n    if str1 == '':\n        return []\n    if str2 == '':\n        return str1\n    if str2 in str1:\n        return str1.split(str2)\n    else:\n        return str1.split(str2)[0] + my_split(str1.split(str2)[1], str2)\ndef my_split_4(str1, str2):\n    '''\n    Write a function that splits a string based on the delimiter (str2)\n    and returns a list.  The first item in the list should be the\n    leftovers if str1 cannot be split into str2\n    '''\n    if str1 == '':\n        return []\n    if str2 == '':\n        return str1\n    if str2 in str1:\n        return str1.split(str2)\n    else:\n        return str1.split(str2)[0] + my_split_4(str1.split(str2)[1], str2)\ndef my_split_5(str1, str2):\n    '''\n    Write a function that splits a string based on the delimiter (str2)\n    and returns a list.  The first item in the list should be the\n    leftovers if str1 cannot be split into str2\n    '''\n    if str1 == '':\n        return []\n    if str2 == '':\n        return str1\n    if str2 in str1:\n        return str1.split(str2)\n    else:\n        return str1.split(str2)[0] + my_split_5(str1.split(str2)[1], str2)\ndef my_split_6(str1, str2):\n    '''\n    Write a function that splits a string based on the delimiter (str2)\n    and returns a list.  The first item in the list should be the\n    leftovers if str1 cannot be split into str2\n    '''\n    if str1 == '':\n        return []\n    if str2 == '':\n        return str1\n    if str2 in str1:\n        return str1.split(str2)\n    else:\n        return str1.split(str2)[0] + my_split_6(str1.split(str2)[1], str2)\ndef my_split_7(str1, str2):\n    '''\n    Write a function that splits a string based on the delimiter (str2)\n    and returns a list.  The first item in the list should be the\n    leftovers if str1 cannot be split into str2\n    '''\n    if str1 == '':\n        return []\n    if str2 == '':\n        return str1\n    if str2 in str1:\n        return str1.split(str2)\n    else:\n        return str1.split(str2)[0] + my_split_7(str1.split(str2)[1], str2)\ndef my_split_8(str1, str2):\n    '''\n    Write a function that splits a string based on the delimiter (str2)\n    and returns a list.  The first item in the list should be the\n    leftovers if str1 cannot be split into str2\n    '''\n    if str1 == '':\n        return []\n    if str2 == '':\n        return str1\n    if str2 in str1:\n        return str1.split(str2)\n    else:\n        return str1.split(str2)[0] + my_split_8(str1.split(str2)[1], str2)\ndef my_split_9(str1, str2):\n    '''\n    Write a function that splits a string based on the delimiter (str2)\n    and returns a list.  The first item in the list should be the\n    leftovers if str1 cannot be split into str2\n    '''\n    if str1 == '':\n        return []\n    if str2 == '':\n        return str1\n    if str2 in str1:\n        return str1.split(str2)\n    else:\n        return str1.split(str2)[0] + my_split_9(str1.split(str2)[1], str2)\ndef my_split_10(str1, str2):\n    '''\n    Write a function that splits a string based on the delimiter (str2)\n    and returns a list.  The first item in the list should be the\n    leftovers if str1 cannot be split into str2\n    '''\n    if str1 == '':\n        return []\n    if str2 == '':\n        return str1\n    if str2 in str1:\n        return str1.split(str2)\n    else:\n        return str1.split(str2)[0] + my_split_10(str1.split(str2)[1], str2)\ndef my_split_11(str1, str2):\n    '''\n    Write a function that splits a string based on the delimiter (str2)\n    and returns a list.  The first item in the list should be the\n    leftovers if str1 cannot be split into str2\n    '''\n    if str1 == '':\n        return []\n    if str2 == '':\n        return str1\n    if str2 in str1:\n        return str1.split(str2)\n    else",
        "num_ids": 49
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    result = re.search(r'^0+', ip)\n    if result:\n        return ip[result.end():]\n    else:\n        return ip\n",
        "num_ids": 41
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if not list1:\n        return None\n    if not type(list1) == list:\n        raise ValueError(\"list must be a list\")\n    if not len(list1) == 0:\n        l = len(list1)\n        l1 = list1[0:l-1:2]\n        l2 = list1[1:l-1:2]\n        result = (l1[0] - l2[0])\n        return result\n    else:\n        return None\n",
        "num_ids": 118
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return (list1[0] - list1[1])\n",
        "num_ids": 17
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in list1:\n        if i%2 == 0:\n            even += i\n        else:\n            odd += i\n    return even - odd\n",
        "num_ids": 49
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    even_odd = list1[0]\n    if len(list1) == 1:\n        return even_odd\n    odd_even = list1[1]\n    for i in range(2, len(list1)):\n        odd_even = list1[i] - odd_even\n    return odd_even\n",
        "num_ids": 92
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    print(list1[0])\n    if len(list1)==1:\n        return 0\n    else:\n        if list1[0]%2==0:\n            return list1[1]-list1[0]\n        else:\n            return list1[0]-list1[1]\n",
        "num_ids": 73
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            if list1[i] % 2 == 0:\n                even_count += 1\n            else:\n                even_count += 2\n        else:\n            if list1[i] % 2 == 0:\n                odd_count += 1\n            else:\n                odd_count += 2\n    return abs(even_count - odd_count)\n",
        "num_ids": 117
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return (list1[0]-list1[1])\n",
        "num_ids": 16
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1)==0:\n        return None\n    else:\n        x=len(list1)\n        even_num=list1[0]\n        odd_num=list1[1]\n        if (even_num+odd_num)%2==0:\n            return (even_num-odd_num)\n        else:\n            return (odd_num-even_num)\n",
        "num_ids": 97
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    return len(even) - len(odd)\n",
        "num_ids": 72
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    if len(list1) > 0:\n        for num in list1:\n            if num % 2 == 0:\n                even = num\n            else:\n                odd = num\n    return abs(even - odd)\n",
        "num_ids": 63
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    i = 0\n    while i < len(str1) :\n        if str1[i]!= str2[i] :\n            if str1[i] == '0' :\n                str1 = str1[:i]+'1'+str1[i+1:]\n            else :\n                str1 = str1[:i]+'0'+str1[i+1:]\n            count += 1\n        i += 1\n    return count\n",
        "num_ids": 114
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    swaps = 0\n    for i in range(0,len(str1)) :\n        if str1[i]!= str2[i] :\n            swaps += 1\n            #print(str1[i],str2[i])\n    return swaps\n",
        "num_ids": 64
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    counter = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            counter += 1\n    return counter\n",
        "num_ids": 45
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Compute the length of both strings \n    # Create two empty arrays \n    arr1 = [] \n    arr2 = [] \n    \n    for i in range(0,len(str1)): \n        arr1.append(str1[i]) \n    \n    for i in range(0,len(str2)): \n        arr2.append(str2[i]) \n    \n    # Compare each element \n    \n    swaps = 0 \n    i = 0\n    while(i < len(arr1)): \n        if arr1[i]!= arr2[i]: \n            if (arr2[i] == '1' and arr1[i] == '0') or (arr2[i] == '0' and arr1[i] == '1'): \n                arr1[i] = '0' \n                arr2[i] = '1' \n                swaps+=1\n            else: \n                arr1[i] = '1' \n                arr2[i] = '0' \n                swaps+=1\n        i+=1\n    print(\"Minimum swaps required:\", swaps)\n    return swaps\n    \nif __name__ == \"__main__\": \n    str1 = \"01010101\"\n    str2 = \"10101010\"\n    min_Swaps(str1, str2",
        "num_ids": 326
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)): \n        if str1[i]!= str2[i]: \n            count += 1\n    return count\nprint(min_Swaps('010101010','0101010101'))\n",
        "num_ids": 66
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    length = len(str1)\n    swaps = 0\n",
        "num_ids": 17
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    arr = list(str1)\n    arr_rev = list(str2)\n    arr.reverse()\n    arr_rev.reverse()\n    \n    arr_new = []\n    for i in range(len(arr)):\n        arr_new.append(arr.pop())\n    arr.reverse()\n    arr = arr_new\n    \n    arr_new = []\n    for i in range(len(arr_rev)):\n        arr_new.append(arr_rev.pop())\n    arr_rev.reverse()\n    arr_rev = arr_new\n    \n    n = len(arr)\n    arr_i = 0\n    arr_j = 0\n    count = 0\n    while arr_i < n and arr_j < n :\n        if arr[arr_i] == arr_rev[arr_j] :\n            arr_i += 1\n            arr_j += 1\n            count = 0\n        else :\n            arr_i += 1\n            count += 1\n            \n    return count\n",
        "num_ids": 240
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    m,n=len(str1),len(str2)\n    count=0\n    if m!=n :\n        return -1\n    dp=[[0 for j in range(n+1)] for i in range(m+1)]\n    for i in range(m+1) :\n        for j in range(n+1) :\n            if i==0 or j==0 :\n                dp[i][j]=0\n            elif str1[i-1]==str2[j-1] :\n                dp[i][j]=1+dp[i-1][j-1]\n            else :\n                dp[i][j]=max(dp[i][j-1],dp[i-1][j])\n    return dp[m][n]\n    \n",
        "num_ids": 186
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1 = str1.replace(' ','')\n    str2 = str2.replace(' ','')\n    num = len(str1)\n    i = 0\n    j = 0\n    count = 0\n    while i < num and j < num :\n        if str1[i]!= str2[j] :\n            if str1[i] == '0' :\n                str1 = str1[:i] + '1' + str1[i+1:]\n                i+= 1\n            else :\n                str1 = str1[:i] + '0' + str1[i+1:]\n                i+= 1\n        j += 1\n    return str1\n",
        "num_ids": 162
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    num1 = list(str1)\n    num2 = list(str2)\n    num1_count = len(num1)\n    num2_count = len(num2)\n    if (num1_count!= num2_count):\n        print(\"Lengths of both strings don't match.\")\n        return 0\n    count = 0\n    sorted_arr = []\n    if (num1_count == 0) :\n        print(\"One of the strings is empty.\")\n        return 0\n    #sorting the string\n    for i in range(num1_count):\n        if num1[i]!= num2[i]:\n            sorted_arr.append(num1[i])\n            sorted_arr.append(num2[i])\n            \n    sorted_arr = sorted(sorted_arr)\n    #print(sorted_arr)\n    if sorted_arr == num1:\n        print(\"String 1 is same as string 2.\")\n        return num1_count\n    if sorted_arr == num2:\n        print(\"String 2 is same as string 1.\")\n        return num2_count\n    print(count)\n    #swaps\n    for i in range(num1_count):\n        if num1[i]!= num2[i]:\n            num2_index = num2.index(num1[i])\n            num2[num2_index] = num1[i]\n            num1[i] = num2[num2_index]\n            count = count + 1\n    return count\n",
        "num_ids": 362
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_list_len = len(tuple_list)\n    tuple_element_size = (sys.getsizeof(tuple_list[0])*tuple_list_len)\n    return tuple_list_len, tuple_element_size\n",
        "num_ids": 63
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\ndef tuple_size_and_count(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return (tuple_size(tuple_list), tuple_list)\ndef tuple_size_and_count_extended(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return tuple_size(tuple_list), tuple_list\ndef tuple_and_tuple_size_count(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return (tuple_list, tuple_size(tuple_list))\ndef tuple_and_tuple_size_count_extended(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return (tuple_list, tuple_size(tuple_list))\ndef tuple_and_list_size_count(list_list):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    return (list_list, tuple_size(list_list))\ndef tuple_and_list_size_count_extended(list_list):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    return (list_list, tuple_size(list_list))\ndef tuple_and_set_size_count(set_list):\n    '''\n    Write a function to find the size in bytes of the given set.\n    '''\n    return (set_list, tuple_size(set_list))\ndef tuple_and_set_size_count_extended(set_list):\n    '''\n    Write a function to find the size in bytes of the given set.\n    '''\n    return (set_list, tuple_size(set_list))\ndef list_and_list_size_count(list_list):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    return (list_list, tuple_size(list_list))\ndef list_and_list_size_count_extended(list_list):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    return (list_list, tuple_size(list_list))\ndef list_and_set_size_count(set_list):\n    '''\n    Write a function to find the size in bytes of the given set.\n    '''\n    return (list_list, tuple_size(set_list))\ndef list_and_set_size_count_extended(set_list):\n    '''\n    Write a function to find the size in bytes of the given set.\n    '''\n    return (list_list, tuple_size(set_list))\ndef set_and_set_size_count(set_list):\n    '''\n    Write a function to find the size in bytes of the given set.\n    '''\n    return (set_list, tuple_size(set_list))\ndef set_and_set_size_count_extended(set_list):\n    '''\n    Write a function to find the size in bytes of the given set.\n    '''\n    return (set_list, tuple_size(set_list))\ndef tuple_and_list_size_count_and_list_size_count_extended(list_list):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    return (list_list, tuple_size(list_list), tuple_size(list_list))\ndef list_and_list_size_count_and_list_size_count_extended(list_list):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    return (list_list, tuple_size(list_list), tuple_size(list_list))\ndef set_and_set_size_count_and_set_size_count_extended(set_list):\n    '''\n    Write a function to find the size in bytes of the given set.\n    '''\n    return (set_list, tuple_size(set_list), tuple_size(set_list))\ndef set_and_set_size_count_and_set_size_count_extended(set_list):\n    '''\n    Write a function to find the size in bytes of the given set.\n    '''\n    return (set_list, tuple_size(set_list), tuple_size(set_list))\ndef list_and_tuple_list_size_count_and_list_size_count_extended(list_list):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    return (list_list, tuple_size(list_list), tuple_size(tuple_list), tuple_size(list_list))\ndef list_and_tuple_list_size_count_and_list_size_count_extended(list_list):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    return (list_list, tuple_size(list_list), tuple_size(tuple_list), tuple_size(list_list))\ndef tuple_and_tuple_list_size_count_and_tuple_list_size_count_extended(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    return (tuple_list, tuple_size(tuple_list), tuple_size(tuple_list), tuple_size(tuple_list))\ndef tuple_and_tuple_list_size_count_and_tuple_list_size_count_extended(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    return (tuple_list, tuple_size(tuple_list), tuple_size(tuple_list), tuple_size(tuple_list))\ndef list_and_tuple_list_size_count_and_set_size_count_extended(list_list):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    return (list_list, tuple_size(list_list), tuple_size(tuple_list), tuple_size(set_list))\ndef list_and_tuple_list_size_count_and_set_size_count_extended(list_list):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    return (list_list, tuple_size(list_list), tuple_size(tuple_list), tuple_size(set_list))\ndef tuple_and_tuple_list_size_count_and_tuple_list_size_count_extended(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    return (tuple_list, tuple_size(tuple_list), tuple_size(tuple_list), tuple_size(tuple_list))\ndef tuple_and_tuple_list_size_count_and_tuple_list_size_count_extended(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    return (tuple_list, tuple_size(tuple_list), tuple_size(tuple_list), tuple_size(tuple_list))\ndef list_and_set_size_count_and_set_size_count_extended(set_list):\n    '''\n    Write a function to find the size in bytes of the given set.\n    '''\n    return (list_list, tuple_size(set_list), tuple_size(set_list))\ndef list_and_set_size_count_and_set_size_count_extended(set_list):\n    '''\n    Write a function to find the size in bytes of the given set.\n    '''\n    return (list_list, tuple_size(set_list), tuple_size(set_list))\ndef set_and_set_size",
        "num_ids": 34
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size = size + sys.getsizeof(i)\n",
        "num_ids": 30
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    byte_list = []\n    for x in tuple_list:\n        byte_list.append(x.__sizeof__())\n    return byte_list\n",
        "num_ids": 39
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # return len(tuple_list) * (sys.getsizeof(tuple_list[0]))\n    return len(tuple_list) * (sys.getsizeof(tuple_list) - (sys.getsizeof(tuple_list[0])) )\n",
        "num_ids": 69
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size = size + sys.getsizeof(i)\n    print(size)\n",
        "num_ids": 36
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    #base_count = 0\n    #base_size = 0\n    #for tup in tuple_list:\n    #    base_count += len(tup)\n    #    base_size += sys.getsizeof(tup)\n    #print(base_count)\n    #print(base_size)\n    total = 0\n    for i in tuple_list:\n        total += sys.getsizeof(i)\n    print(total)\n",
        "num_ids": 109
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 16
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    list_of_bytes = []\n    for i in range(len(tuple_list)):\n        list_of_bytes.append(tuple_list[i].__sizeof__())\n    print(sys.getsizeof(list_of_bytes))\n    return list_of_bytes\n",
        "num_ids": 72
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for value in tuple_list:\n        size += sys.getsizeof(value)\n    return size\n",
        "num_ids": 32
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # print(arr1)\n    # print(arr2)\n    n = len(arr1)\n    m = len(arr2)\n",
        "num_ids": 36
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0:\n        return arr2[k-1]\n    if len(arr2) == 0:\n        return arr1[k-1]\n",
        "num_ids": 44
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0:\n        return arr2[k-1]\n    if len(arr2) == 0:\n        return arr1[k-1]\n",
        "num_ids": 44
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    return None\n",
        "num_ids": 82
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    while True:\n        m = len(arr1)\n        n = len(arr2)\n        p1 = m - 1\n        p2 = n - 1\n        while p1 >= 0 and p2 >= 0:\n            if arr1[p1] > arr2[p2]:\n                arr1.insert(p1, arr2[p2])\n                p1 -= 1\n                p2 -= 1\n            elif arr1[p1] <= arr2[p2]:\n                arr1.insert(p1 + 1, arr1[p1])\n                p1 -= 1\n        if p1 < -1 and p2 < -1:\n            break\n        elif p1 > -1 and p2 < -1:\n            for i in range(p1, -1, -1):\n                arr1.insert(i, arr1[i])\n        elif p1 < -1 and p2 > -1:\n            for i in range(p2, -1, -1):\n                arr1.insert(0, arr1[i])\n        if p1 < 0 and p2 > 0:\n            for i in range(1, p2 + 1):\n                arr1.insert(0, arr1[i])\n        if k == p1:\n            return arr1[p1]\n        elif k == p2:\n            return arr2[p2]\n        elif k < p1:\n            return arr1[p1]\n        elif k > p2:\n            return arr1[p2]\n",
        "num_ids": 361
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    #brute force\n    index = 0\n    while index < len(arr1) and index < len(arr2):\n        if arr1[index] < arr2[index]:\n            index += 1\n        elif arr1[index] > arr2[index]:\n            index += 1\n        else:\n            return arr1[index]\n    if index < len(arr1):\n        return arr1[index]\n    elif index < len(arr2):\n        return arr2[index]\n    else:\n        return None\n",
        "num_ids": 127
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    l = len(arr1) + len(arr2)\n    i, j = 0, 0\n",
        "num_ids": 26
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = len(arr2)-1\n    while i<j:\n        mid = (i+j)//2\n        if arr2[mid] == arr1[mid]:\n            if mid == 0 or arr2[mid-1]!= arr1[mid]:\n                return arr1[mid]\n            j = mid\n        elif arr2[mid] < arr1[mid]:\n            j = mid\n        else:\n            i = mid+1\n",
        "num_ids": 114
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    for i in range(len(arr1)):\n        if k == 0:\n            return arr1[i]\n        k -= 1\n        \n    for i in range(len(arr2)):\n        if k == 0:\n            return arr2[i]\n        k -= 1\n    \n    return -1\n",
        "num_ids": 79
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    m, n = len(arr1), len(arr2)\n    while k > 0:\n        if i < m and j < n:\n            if arr1[i] < arr2[j]:\n                k -= 1\n                i += 1\n            else:\n                k -= 1\n                j += 1\n        elif i < m:\n            k -= 1\n            i += 1\n        elif j < n:\n            k -= 1\n            j += 1\n    return arr1[i-1]\n",
        "num_ids": 129
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number>0:\n        sum = 0\n        n = number\n        while (n > 0):\n            sum = sum + (n % 10) ** 3\n            n = n // 10\n        if sum == number:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 74
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    s = 0\n    r = number\n    while r!= 0:\n        s += r%10\n        r //= 10\n    return number == s**3\n",
        "num_ids": 41
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    i = 1\n    sum = 0\n    while i <= number:\n        sum = sum + (i*i*i)\n        i = i+1\n    if sum == number:\n        return True\n    else:\n        return False\n",
        "num_ids": 58
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    while(number>0):\n        number = number//10\n        sum = sum + (temp%10)*(temp%10)*(temp%10)\n    if(number==sum):\n        print(str(number) + \" is an Armstrong number\")\n    else:\n        print(str(number) + \" is not an Armstrong number\")\n",
        "num_ids": 91
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number > 9 and number < 1000:\n        temp = number\n        sum = 0\n        while temp > 0:\n            digit = temp % 10\n            sum = sum + digit ** 3\n            temp //= 10\n        if number == sum:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 79
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_list = []\n    while number > 0:\n        num = number % 10\n        num_list.append(num)\n        number //= 10\n    length = len(num_list)\n    total_sum = 0\n    for i in range(length):\n        total_sum += num_list[i] ** length\n    return total_sum == number\n",
        "num_ids": 87
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    # '''\n    #  1.\n    # '''\n    # # The length of the number\n    # length = len(number)\n    # # 1\n    # res = 0\n    # # for i in range(length):\n    # #     res = res + int(number[i])**length\n    # # return res == int(number)\n    # '''\n    #  2.\n    # '''\n    # # The length of the number\n    # length = len(number)\n    # # 1\n    # res = 0\n    # # for i in range(length):\n    # #     res = res + int(number[i])**length\n    # # return res == int(number)\n    # # 2\n    # for i in range(length):\n    #     res = res + int(number[i])**length\n    # return res == int(number)\n    \n    \n    # '''\n    #  3.\n    # '''\n    # # The length of the number\n    # length = len(number)\n    # # 1\n    # res = 0\n    # # for i in range(length):\n    # #     res = res + int(number[i])**length\n    # # return res == int(number)\n    # # 2\n    # for i in range(length):\n    #     res = res + int(number[i])**length\n    #     while res >= 10:\n    #         res = res%10 + res//10\n    # return res == int(number)\n    \n    \n    '''\n    4.\n    '''\n    \n    # The length of the number\n    length = len(number)\n    # 1\n    res = 0\n    # for i in range(length):\n    #     res = res + int(number[i])**length\n    # return res == int(number)\n    # 2\n    for i in range(length):\n        res = res + int(number[i])**length\n        while res >= 10:\n            res = res%10 + res//10\n    return res == int(number)\n    \n    \n    \n    '''\n    5.\n    '''\n    \n    # The length of the number\n    length = len(number)\n    # 1\n    res = 0\n    # for i in range(length):\n    #     res = res + int(number[i])**length\n    # return res == int(number)\n    # 2\n    for i in range(length):\n        res = res + int(number[i])**length\n        while res >= 10:\n            res = res%10 + res//10\n    return res == int(number)\n    \n    \n    \n    '''\n    6.\n    '''\n    \n    # The length of the number\n    length = len(number)\n    # 1\n    res = 0\n    # for i in range(length):\n    #     res = res + int(number[i])**length\n    # return res == int(number)\n    # 2\n    for i in range(length):\n        res = res + int(number[i])**length\n        while res >= 10:\n            res = res%10 + res//10\n    return res == int(number)\n    \n    \n    \n    '''\n    7.\n    '''\n    \n    # The length of the number\n    length = len(number)\n    # 1\n    res = 0\n    # for i in range(length):\n    #     res = res + int(number[i])**length\n    # return res == int(number)\n    # 2\n    for i in range(length):\n        res = res + int(number[i])**length\n        while res >= 10:\n            res = res%10 + res//10\n    return res == int(number)\n    \n    \n    '''\n    8.\n    '''\n    \n    # The length of the number\n    length = len(number)\n    # 1\n    res = 0\n    # for i in range(length):\n    #     res = res + int(number[i])**length\n    # return res == int(number)\n    # 2\n    for i in range(length):\n        res = res + int(number[i])**length\n        while res >= 10:\n            res = res%10 + res//10\n    return res == int(number)\n    \n    \n    \n    '''\n    9.\n    '''\n    \n    # The length of the number\n    length = len(number)\n    # 1\n    res = 0\n    # for i in range(length):\n    #     res = res + int(number[i])**length\n    # return res == int(number)\n    # 2\n    for i in range(length):\n        res = res + int(number[i])**length\n        while res >= 10:\n            res = res%10 + res//10\n    return res == int(number)\n    \n    \n    '''\n    10.\n    '''\n    \n    # The length of the number\n    length = len(number)\n    # 1\n    res = 0\n    # for i in range(length):\n    #     res = res + int(number[i])**length\n    # return res == int(number)\n    # 2\n    for i in range(length):\n        res = res + int(number[i])**length\n        while res >= 10:\n            res = res%10 + res//10\n    return res == int(number)\n    \n    \n    \n    '''\n    11.\n    '''\n    \n    # The length of the number\n    length = len(number)\n    # 1\n    res = 0\n    # for i in range(length):\n    #     res = res + int(number[i])**length\n    # return res == int(number)\n    # 2\n    for i in range(length):\n        res = res + int(number[i])**length\n        while res >= 10:\n            res = res%10 + res//10\n    return res == int(number)\n    \n    \n    '''\n    12.\n    '''\n    \n    # The length of the number\n    length = len(number)\n    # 1\n    res = 0\n    # for i in range(length):\n    #     res = res + int(number[i])**length\n    # return res == int(number)\n    # 2\n    for i in range(length):\n        res = res + int(number[i])**length\n        while res >= 10:\n            res = res%10 + res//10\n    return res == int(number)\n    \n    \n    \n    '''\n    13.\n    '''\n    \n    # The length of the number\n    length = len(number)\n    # 1\n    res = 0\n    # for i in range(length):\n    #     res = res + int(number[i])**length\n    # return res == int(number)\n    # 2\n    for i in range(length):\n        res = res + int(number[i])**length\n        while res >= 10:\n            res = res%10 + res//10\n    return res == int(number)\n    \n    \n    '''\n    14.\n    '''\n    \n    # The length of the number\n    length = len(number)\n    # 1\n    res = 0\n    # for i in range(length):\n    #     res = res + int(number[i])**length\n    # return res == int(number)\n    # 2\n    for i in range(length):\n        res = res + int(number[i])**length\n        while res >= 10:\n            res = res%10 + res//10\n    return res == int(number)\n    \n    \n    \n    '''\n    15.\n    '''\n    \n    # The length of the number\n    length = len(number)\n    # 1\n    res = 0\n    # for i in range(length):\n    #     res = res + int(number[i])**length\n    # return res == int(number)\n    # 2\n    for i in range(length):\n        res = res + int(number[i])**length\n        while res >= 10:\n            res = res%10 + res//10\n    return res == int(number)\n    \n    \n    \n    '''\n    16.\n    '''\n    \n    # The length of the number\n    length = len(number)\n    # 1\n    re",
        "num_ids": 26
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if sum == number:\n        return True\n    else:\n        return False\n",
        "num_ids": 58
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum = sum + digit ** 3\n        temp = temp // 10\n    return number == sum\n",
        "num_ids": 48
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    number_string = str(number)\n    for num in number_string:\n        sum += int(num)**3\n    if sum == number:\n        return f\"{number} is armstrong number\"\n    else:\n        return f\"{number} is not armstrong number\"\n",
        "num_ids": 74
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    s = 0\n    a = 0\n    for i in range(1,number+1):\n        s = s + i\n        a = a + i\n    print(f'Sum of first {number} natural numbers is {s}.')\n    print(f'Average of first {number} natural numbers is {a/number}.')\n",
        "num_ids": 81
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number+1):\n        sum += i\n    average = sum/number\n    print('Sum of first {} natural numbers is: {}'.format(number, sum))\n    print('Average of first {} natural numbers is: {}'.format(number, average))\n",
        "num_ids": 70
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # first_number = 0\n    # sum = 0\n    # average = 0\n    # counter = 0\n    # while first_number < n:\n    #     first_number += 1\n    #     sum += first_number\n    #     counter += 1\n    #     average = sum / counter\n    # return average\n    return sum(range(n)), sum(range(n))/n\n",
        "num_ids": 94
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum=0\n    avg=0\n    for i in range(number):\n        sum += i\n    avg = sum / number\n    return sum,avg\n",
        "num_ids": 42
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,number+1):\n        sum+=i\n    average = sum/number\n    return sum,average\n",
        "num_ids": 38
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum=0\n    for i in range(number):\n        sum+=i\n    average=sum/number\n    return sum,average\n",
        "num_ids": 34
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_ = 0\n    for i in range(1,number+1):\n        sum_ += i\n    return sum_,sum_/number\n",
        "num_ids": 37
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return number\n",
        "num_ids": 6
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return None\n",
        "num_ids": 6
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    n = int(input(\"Enter the number of natural numbers: \"))\n    for i in range(n):\n        sum += number\n        count += 1\n    average = sum / count\n    print(\"Sum:\", sum, \"Average:\", average)\n",
        "num_ids": 70
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    \n    return True if n%2 == 0 else False\n    \n    \nprint(is_Even(8))\n",
        "num_ids": 29
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 :\n        return True\n    return False\n",
        "num_ids": 19
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2 == 0) : \n        print(n, \"is even\")\n    else : \n        print(n, \"is odd\") \n",
        "num_ids": 40
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n%2 == 0):\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2) == 0 : \n        return True \n    return False\n",
        "num_ids": 23
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True\n    else : \n        return False\n    \n    \ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    if n%2!= 0 : \n        return True\n    else : \n        return False\n    \n    \ndef is_Prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    \n    if n == 2 or n == 3 : \n        return True\n    \n    if n % 2 == 0 or n % 3 == 0 : \n        return False\n    \n    i = 5\n    \n    while i * i <= n : \n        if n % i == 0 or n % (i + 2) == 0 : \n            return False\n        i += 6\n    return True\n    \n    \ndef is_Power_of_Two(n) : \n    '''\n    Write a python function to check whether the given number is power of two.\n    '''\n    if n < 2 : \n        return False\n    if n == 2 : \n        return True\n    while n > 1 : \n        if n % 2 == 0 : \n            return False\n        else : \n            return True\n            break\n        \n        \ndef is_Divisible_by_3(n) : \n    '''\n    Write a python function to check whether the given number is divisible by 3 or not.\n    '''\n    if n%3 == 0 : \n        return True\n    else : \n        return False\n    \n    \ndef find_Unique_Digits(n) : \n    '''\n    Write a python function to find the number of unique digits in a number.\n    '''\n    s = str(n)\n    set1 = set(s)\n    cnt = len(set1)\n    return cnt\n    \n    \ndef get_Pythagorean_triplet() : \n    '''\n    Write a python function to find a Pythagorean Triplet.\n    '''\n    for a in range(1, 50) : \n        for b in range(1, 50) : \n            for c in range(1, 50) :\n                if a**2 + b**2 == c**2 : \n                    return a*b*c\n    \n    \ndef find_a_Perfect_Square(n) : \n    '''\n    Write a python function to find the first perfect square in a given range.\n    '''\n    for i in range(n//2) : \n        if i*i == n : \n            return i\n        if i*i < n : \n            return i+1\n    return -1\n    \n    \ndef get_Numbers_divisible_by_x(n, x) : \n    '''\n    Write a python function to get the numbers divisible by x in a range.\n    '''\n    result = []\n    for i in range(n) : \n        if i%x == 0 : \n            result.append(i)\n    return result\n    \n    \ndef find_the_Sum_Divisible_by_3_and_5(n) : \n    '''\n    Write a python function to find the sum of the numbers divisible by 3 and 5.\n    '''\n    sum1 = 0\n    for i in range(n) : \n        if i%3 == 0 or i%5 == 0 : \n            sum1 += i\n    return sum1\n    \n    \ndef find_the_Sum_Divisible_by_3_and_5_again(n) : \n    '''\n    Write a python function to find the sum of the numbers divisible by 3 and 5 again.\n    '''\n    sum1 = 0\n    for i in range(n) : \n        if i%3 == 0 or i%5 == 0 : \n            sum1 += i\n    return sum1\n    \n    \ndef is_Sum_of_Squares(n) : \n    '''\n    Write a python function to check whether the given number is sum of all its squares.\n    '''\n    for i in range(n) : \n        if i**2 == n : \n            return True\n    return False\n    \n    \ndef is_Sum_of_Squares_again(n) : \n    '''\n    Write a python function to check whether the given number is sum of all its squares again.\n    '''\n    for i in range(n) : \n        if i**2 == n : \n            return True\n    return False\n    \n    \ndef is_Power_of_Two_again(n) : \n    '''\n    Write a python function to check whether the given number is power of two again.\n    '''\n    if n < 2 : \n        return False\n    if n == 2 : \n        return True\n    while n > 1 : \n        if n % 2 == 0 : \n            return False\n        else : \n            return True\n            break\n        \n    \ndef find_Numbers_Equals_0(n) : \n    '''\n    Write a python function to find the numbers equal to 0.\n    '''\n    for i in range(n) : \n        if i == 0 : \n            continue\n        if i%2 == 0 : \n            print(i, end = \" \")\n    \n    \ndef find_Numbers_Equals_1(n) : \n    '''\n    Write a python function to find the numbers equal to 1.\n    '''\n    for i in range(n) : \n        if i == 0 : \n            continue\n        if i%2 == 1 : \n            print(i, end = \" \")\n            \n    \ndef find_Numbers_Equals_2(n) : \n    '''\n    Write a python function to find the numbers equal to 2.\n    '''\n    for i in range(n) : \n        if i == 0 : \n            continue\n        if i%2 == 2 : \n            print(i, end = \" \")\n            \n            \ndef find_Numbers_Equals_3(n) : \n    '''\n    Write a python function to find the numbers equal to 3.\n    '''\n    for i in range(n) : \n        if i == 0 : \n            continue\n        if i%2 == 3 : \n            print(i, end = \" \")\n            \n    \ndef find_Numbers_Equals_4(n) : \n    '''\n    Write a python function to find the numbers equal to 4.\n    '''\n    for i in range(n) : \n        if i == 0 : \n            continue\n        if i%2 == 4 : \n            print(i, end = \" \")\n            \n    \ndef find_Numbers_Equals_5(n) : \n    '''\n    Write a python function to find the numbers equal to 5.\n    '''\n    for i in range(n) : \n        if i == 0 : \n            continue\n        if i%2 == 5 : \n            print(i, end = \" \")\n            \n    \ndef find_Numbers_Equals_6(n) : \n    '''\n    Write a python function to find the numbers equal to 6.\n    '''\n    for i in range(n) : \n        if i == 0 : \n            continue\n        if i%2 == 6 : \n            print(i, end = \" \")\n            \n            \ndef find_Numbers_Equals_7(n) : \n    '''\n    Write a python function to find the numbers equal to 7.\n    '''\n    for i in range(n) : \n        if i == 0 : \n            continue\n        if i%2 == 7 : \n            print(i, end = \" \")\n            \n    \ndef find_Numbers_Equals_8(n) : \n    '''\n    Write a python function to find the numbers equal to 8.\n    '''\n    for i in range(n) : \n        if i == 0 : \n            continue\n        if i%2 == 8 : \n            print(i, end = \" \")\n            \n            \ndef find_Numbers_Equals_9(n) : \n    '''\n    Write a python function to find the numbers equal to 9.\n    '''\n    for i in range(n) : \n        if i =",
        "num_ids": 17
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 :\n        return True\n    else :\n        return False\n        \ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    if n%2 == 1 :\n        return True\n    else :\n        return False\n        \ndef is_Prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    for i in range(2,n) :\n        if n%i == 0 :\n            return False\n    return True\n        \ndef is_Perfect(n) : \n    '''\n    Write a python function to check whether the given number is perfect or not.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if n%i == 0 :\n            sum += i\n    return sum == n\n        \ndef is_Composite(n) : \n    '''\n    Write a python function to check whether the given number is composite or not.\n    '''\n    if is_Prime(n) == False :\n        return True\n    else :\n        return False\n        \ndef is_Harshad(n) : \n    '''\n    Write a python function to check whether the given number is harshad or not.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if n%i == 0 :\n            sum += i\n    return sum == n\n    \ndef is_Palindrome(s) : \n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    return s == s[::-1]\n        \ndef is_Square(n) : \n    '''\n    Write a python function to check whether the given number is square or not.\n    '''\n    if n == 0 or n == 1 :\n        return True\n    else :\n        return False\n        \ndef is_Pentagonal(n) : \n    '''\n    Write a python function to check whether the given number is pentagonal or not.\n    '''\n    return n == (1/3)*((n**2)-(n-1))\n        \ndef is_Hexagonal(n) : \n    '''\n    Write a python function to check whether the given number is hexagonal or not.\n    '''\n    return n == (1/2)*((n**2)-(n-1))\n        \ndef is_Octagonal(n) : \n    '''\n    Write a python function to check whether the given number is octagonal or not.\n    '''\n    return n == (1/4)*((n**2)-(n-1))\n        \ndef is_Heptagonal(n) : \n    '''\n    Write a python function to check whether the given number is heptagonal or not.\n    '''\n    return n == (1/5)*((n**2)-(n-1))\n        \ndef is_Nonagonal(n) : \n    '''\n    Write a python function to check whether the given number is nonagonal or not.\n    '''\n    return n == (1/3)*((n**2)-(n-1))\n        \ndef is_Octagonal(n) : \n    '''\n    Write a python function to check whether the given number is octagonal or not.\n    '''\n    return n == (1/2)*((n**2)-(n-1))\n        \ndef is_Septagonal(n) : \n    '''\n    Write a python function to check whether the given number is septagonal or not.\n    '''\n    return n == (1/4)*((n**2)-(n-1))\n        \ndef is_Novagonal(n) : \n    '''\n    Write a python function to check whether the given number is novagonal or not.\n    '''\n    return n == (1/5)*((n**2)-(n-1))\n        \ndef is_Icosagonal(n) : \n    '''\n    Write a python function to check whether the given number is icosagonal or not.\n    '''\n    return n == (1/3)*((n**2)-(n-1))\n        \ndef is_Noniagonal(n) : \n    '''\n    Write a python function to check whether the given number is noniagonal or not.\n    '''\n    return n == (1/2)*((n**2)-(n-1))\n        \ndef is_Icosagonal(n) : \n    '''\n    Write a python function to check whether the given number is icosagonal or not.\n    '''\n    return n == (1/3)*((n**2)-(n-1))\n        \ndef is_Icosagonal(n) : \n    '''\n    Write a python function to check whether the given number is icosagonal or not.\n    '''\n    return n == (1/2)*((n**2)-(n-1))\n        \ndef is_Hexagonal(n) : \n    '''\n    Write a python function to check whether the given number is hexagonal or not.\n    '''\n    return n == (1/4)*((n**2)-(n-1))\n        \ndef is_Hexagonal(n) : \n    '''\n    Write a python function to check whether the given number is hexagonal or not.\n    '''\n    return n == (1/2)*((n**2)-(n-1))\n        \ndef is_Icosagonal(n) : \n    '''\n    Write a python function to check whether the given number is icosagonal or not.\n    '''\n    return n == (1/3)*((n**2)-(n-1))\n        \ndef is_Hexagonal(n) : \n    '''\n    Write a python function to check whether the given number is hexagonal or not.\n    '''\n    return n == (1/2)*((n**2)-(n-1))\n        \ndef is_Icosagonal(n) : \n    '''\n    Write a python function to check whether the given number is icosagonal or not.\n    '''\n    return n == (1/3)*((n**2)-(n-1))\n        \ndef is_Octagonal(n) : \n    '''\n    Write a python function to check whether the given number is octagonal or not.\n    '''\n    return n == (1/2)*((n**2)-(n-1))\n        \ndef is_Icosagonal(n) : \n    '''\n    Write a python function to check whether the given number is icosagonal or not.\n    '''\n    return n == (1/3)*((n**2)-(n-1))\n        \ndef is_Icosagonal(n) : \n    '''\n    Write a python function to check whether the given number is icosagonal or not.\n    '''\n    return n == (1/3)*((n**2)-(n-1))\n        \ndef is_Icosagonal(n) : \n    '''\n    Write a python function to check whether the given number is icosagonal or not.\n    '''\n    return n == (1/2)*((n**2)-(n-1))\n        \ndef is_Noniagonal(n) : \n    '''\n    Write a python function to check whether the given number is noniagonal or not.\n    '''\n    return n == (1/3)*((n**2)-(n-1))\n        \ndef is_Octagonal(n) : \n    '''\n    Write a python function to check whether the given number is octagonal or not.\n    '''\n    return n == (1/4)*((n**2)-(n-1))\n        \ndef is_Noniagonal(n) : \n    '''\n    Write a python function to check whether the given number is noniagonal or not.\n    '''\n    return n == (1/2)*((n**2)-(n-1))\n        \ndef is_Noniagonal(n) : \n    '''\n    Write a python function to check whether the given number is noniagonal or not.\n    '''\n    return n == (1/3)*((n**2)-(n-1))\n        \ndef is_Icosagonal(n) : \n    '''\n    Write a python function to check whether the given numbe",
        "num_ids": 14
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        print(\"%d is even\"%n) \n    else : \n        print(\"%d is odd\"%n) \n",
        "num_ids": 43
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2) == 0: \n        print(n, \"is an Even number\") \n    else : \n        print(n, \"is an Odd number\")\n",
        "num_ids": 44
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    cnt = {}\n    for i in range(len(str1)):\n        if str1[i] in cnt:\n            cnt[str1[i]]+=1\n        else:\n            cnt[str1[i]]=1\n    for i in range(len(str1)):\n        if cnt[str1[i]]>1:\n            return str1[i]\n    return -1\n",
        "num_ids": 101
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    l = list(str1)\n    for i in range(len(l)):\n        if l.count(l[i]) > 1:\n            return l[i]\n",
        "num_ids": 44
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    #str1 = input(\"Enter a string : \")\n",
        "num_ids": 16
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    #input\n    str1 = 'geeksforgeeks'\n",
        "num_ids": 17
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Creating an empty dictionary\n    d = {}\n    # Finding the index of the first repeated character\n    for i in range(len(str1)):\n        if str1[i] in d:\n            d[str1[i]] += 1\n        else:\n            d[str1[i]] = 1\n    for i, j in d.items():\n        if j > 1:\n            return i\n        else:\n            return \"There is no repeated character\"\n",
        "num_ids": 111
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1=str1.strip()\n    count=0\n    d=dict()\n    for i in str1:\n        if i not in d:\n            d[i]=1\n        else:\n            d[i]+=1\n            count=1\n    if count==0:\n        return -1\n    else:\n        return min(d,key=d.get)\n",
        "num_ids": 92
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    count=0\n    for i in range(len(str1)):\n        if str1[i] in str1[i+1:]:\n            count+=1\n            if count==1:\n                return str1[i]\n    return -1\n",
        "num_ids": 62
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    char_list = []\n    for i in range(0,len(str1)-1):\n        if str1[i]==str1[i+1]:\n            char_list.append(str1[i])\n    if len(char_list) > 0:\n        return char_list[0]\n    else:\n        return 'null'\n    \n    \ndef first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    char_list = []\n    for i in range(0,len(str1)-1):\n        if str1[i]==str1[i+1]:\n            char_list.append(str1[i])\n    if len(char_list) > 0:\n        return char_list[0]\n    else:\n        return 'null'\n    \n",
        "num_ids": 97
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    import collections\n    res = collections.Counter(str1)\n    for i in range(len(str1)):\n        if res[str1[i]] > 1:\n            return str1[i]\n    return None\n    \nif __name__ == '__main__':\n    str1 = 'It is the best of times to be wrong, it is the worst of times to be right.'\n    ans = first_repeated_char(str1)\n    print(ans)",
        "num_ids": 113
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    l = list(str1)\n    for i in range(len(l)):\n        if l[i] == l[i-1]:\n            print(l[i])\n            break\n    else:\n        print(\"No repeated character found\")\n",
        "num_ids": 63
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_nums = []\n    ludic = 0\n    while ludic_nums!= ludic_nums:\n        if n - ludic == 2 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 1 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 3 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 4 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 5 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 6 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 7 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 8 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 9 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 10 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 11 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 12 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 13 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 14 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 15 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 16 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 17 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 18 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 19 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 20 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 21 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 22 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 23 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 24 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 25 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 26 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 27 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 28 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 29 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 30 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 31 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 32 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 33 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 34 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 35 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 36 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 37 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 38 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 39 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 40 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 41 and (ludic + 1) == n and n >= 0:\n            ludic_nums.append(ludic)\n            ludic += 1\n        elif n - ludic == 42 an",
        "num_ids": 1805
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(n):\n        if i**3 == n:\n            lucids.append(i)\n        elif i**3 < n:\n            lucids.append(i)\n            for j in range(i**3, n, i):\n                lucids.append(j)\n    return lucids\n",
        "num_ids": 87
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return list(x for x in range(1,n) if is_ludic(x))\n",
        "num_ids": 25
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    i = 2\n    while i <= n:\n        if is_prime(i):\n            ludics.append(i)\n        i += 1\n    return ludics\n",
        "num_ids": 51
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n+1):\n        if is_ludic(i):\n            ludic.append(i)\n    return lucid\n",
        "num_ids": 42
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 1: return 1\n    elif n < 1: return -1\n    elif n%5 == 0: return -1\n    else: return n\n",
        "num_ids": 41
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    \n    lucids = []\n    num = 1\n    while num <= n:\n        if is_lucid(num):\n            lucids.append(num)\n        num += 1\n    return lucids\n",
        "num_ids": 54
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    a = []\n    for i in range(1, n):\n        if \"lucid\" in str(i):\n            a.append(i)\n    return a\n",
        "num_ids": 43
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return list(filter(lambda x: x==lucid_num(x), range(n)))\n",
        "num_ids": 26
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # The first solution is to store each value in a list and then iterate through\n    # and compare each value with the given integer.\n    # However, the time complexity is O(n^2), because the list is \n    # being iterated through. \n    # We can use two pointers, one for i and the other for j.\n    # i is the start of the list and j is the end of the list.\n    # When i = j, we know that all numbers in the range are ludic numbers, since\n    # the product of the numbers must be less than the given integer.\n    # When i is not equal to j, we know that the products of the numbers in the\n    # range are greater than the given integer.\n    # We also want to keep track of the products, so we will keep track of the\n    # number of products smaller than the given integer.\n    # Then we can compare the products of the numbers with the given integer.\n    # If the product of the numbers is less than the given integer, we move j\n    # to the end of the list. If it is not, we move i to the start of the list.\n    # The time complexity is O(n^2), because we have to check every number\n    # in the list and have to check the products of the numbers. \n    \n    # Alternatively, we can use a dictionary, which stores the products of \n    # the numbers. We can use the product of the numbers as the key in the dictionary.\n    # When the product of the numbers is less than the given integer, we move j\n    # to the end of the list. If it is not, we move i to the start of the list.\n    # Then the time complexity is O(n), because we can access the dictionary \n    # as a dictionary of dictionaries.\n",
        "num_ids": 412
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    reverse_words = s.split(' ')\n    reverse_words.reverse()\n    return''.join(reverse_words)\n    \n",
        "num_ids": 34
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    reverse = ''\n    s = s.split(\" \")\n    for word in s:\n        reverse += word[::-1] + \" \"\n    reverse = reverse[:-1]\n    return reverse\n",
        "num_ids": 50
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(s.split(\" \")[::-1])\n",
        "num_ids": 19
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(reversed(s.split()))\n    \n",
        "num_ids": 20
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n    # s = s.split(' ')\n    # for i in range(len(s)):\n    #     s[i] = s[i][::-1]\n    # return''.join(s)\n",
        "num_ids": 67
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if len(s)==0 or len(s)==1:\n        return s\n    res=\"\"\n    new_s=s.split(' ')\n    for i in range(len(new_s)):\n        if i==0:\n            res=res+new_s[i]\n        else:\n            res=res+' '+new_s[i]\n    return res\n",
        "num_ids": 95
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split(\" \")\n    s = s[::-1]\n    s = \" \".join(s)\n    return s\n",
        "num_ids": 36
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    word = \"\"\n    word_list = s.split()\n    #reverse word\n    for i in range(len(word_list)-1,-1,-1):\n        word += word_list[i] + \" \"\n    print(word)\n    return word\n",
        "num_ids": 64
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(reversed(s.split()))\n    \n    \ndef reverse_words_2(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s_list = s.split(\" \")\n    s_list.reverse()\n    return \" \".join(s_list)\n    \n",
        "num_ids": 35
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.strip()\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n",
        "num_ids": 37
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    count = 0\n    for i in range(1,num+1):\n        if num%i == 0:\n            count = count + 1\n    if count == 2:\n        print(\"True\")\n    else:\n        print(\"False\")\n",
        "num_ids": 59
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if num % i == 0:\n                return False\n        return True\n    else:\n        return False\n",
        "num_ids": 45
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                print(f\"{num} is not a prime number\")\n                return\n        print(f\"{num} is a prime number\")\n    else:\n        print(f\"{num} is not a prime number\")\n",
        "num_ids": 82
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    divisor = 2\n    while divisor < num:\n        if num % divisor == 0:\n            return False\n        divisor += 1\n    return True\n",
        "num_ids": 44
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    elif num < 2 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0:\n            return False\n        i += 2\n    return True\n",
        "num_ids": 81
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # 2 is the smallest prime number\n    if num < 2:\n        return False\n    # make the number into a list of divisors\n    divisors = []\n    for i in range(2, num):\n        if num % i == 0:\n            divisors.append(i)\n    if len(divisors) > 0:\n        return False\n    return True\n",
        "num_ids": 92
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    #check if the given number is greater than 1\n    if num > 1:\n        #check if the given number is greater than 1\n        for i in range(2,num):\n            #if the number is divisible by another number, the number is not prime\n            if num % i == 0:\n                #break out of the loop, the number is not prime\n                break\n        else:\n            #if the number is not divisible by another number, the number is prime\n            print(num, \"is a prime number\")\n    else:\n        #if the number is equal to 1, it is not a prime number\n        print(num, \"is not a prime number\")\n",
        "num_ids": 156
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                print(num, \"is not a prime number\")\n                break\n        else:\n            print(num, \"is a prime number\")\n    else:\n        print(num, \"is not a prime number\")\n",
        "num_ids": 80
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef radian_degree(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef radian_degree(deg):\n    return deg * 180 / math.pi\ndef radian_degree(rad):\n    return rad * 180 / math.pi\ndef degree_radian(degree):\n    return degree * math.pi / 180\ndef degree_radian(radian):\n    return radian * 180 / math.pi\ndef degree_radian(deg):\n    return deg * math.pi / 180\ndef degree_radian(rad):\n    return rad * 180 / math.pi\ndef degree_degree(degree):\n    return degree * 360 / (2*math.pi)\ndef degree_degree(radian):\n    return radian * 360 / (2*math.pi)\ndef degree_degree(deg):\n    return deg * 360 / (2*math.pi)\ndef degree_degree(rad):\n    return rad * 360 / (2*math.pi)\ndef degree_degree(sec):\n    return sec * 360 / (2*math.pi)\ndef degree_degree(min):\n    return min * 360 / (2*math.pi)\ndef degree_degree(hour):\n    return hour * 360 / (2*math.pi)\ndef degree_degree(hour):\n    return hour * 360 / (2*math.pi)\ndef degree_degree(day):\n    return day * 360 / (2*math.pi)\ndef degree_degree(day):\n    return day * 360 / (2*math.pi)\ndef degree_degree(week):\n    return week * 360 / (2*math.pi)\ndef degree_degree(week):\n    return week * 360 / (2*math.pi)\ndef degree_degree(month):\n    return month * 360 / (2*math.pi)\ndef degree_degree(month):\n    return month * 360 / (2*math.pi)\ndef degree_degree(year):\n    return year * 360 / (2*math.pi)\ndef degree_degree(year):\n    return year * 360 / (2*math.pi)\ndef degree_degree(day_min):\n    return day_min * 360 / (2*math.pi)\ndef degree_degree(day_min):\n    return day_min * 360 / (2*math.pi)\ndef degree_degree(day_hour):\n    return day_hour * 360 / (2*math.pi)\ndef degree_degree(day_hour):\n    return day_hour * 360 / (2*math.pi)\ndef degree_degree(week_day):\n    return week_day * 360 / (2*math.pi)\ndef degree_degree(week_day):\n    return week_day * 360 / (2*math.pi)\ndef degree_degree(month_day):\n    return month_day * 360 / (2*math.pi)\ndef degree_degree(month_day):\n    return month_day * 360 / (2*math.pi)\ndef degree_degree(year_day):\n    return year_day * 360 / (2*math.pi)\ndef degree_degree(year_day):\n    return year_day * 360 / (2*math.pi)\ndef degree_degree(day_min_hour):\n    return day_min_hour * 360 / (2*math.pi)\ndef degree_degree(day_min_hour):\n    return day_min_hour * 360 / (2*math.pi)\ndef degree_degree(month_day_hour):\n    return month_day_hour * 360 / (2*math.pi)\ndef degree_degree(month_day_hour):\n    return month_day_hour * 360 / (2*math.pi)\ndef degree_degree(week_day_hour):\n    return week_day_hour * 360 / (2*math.pi)\ndef degree_degree(week_day_hour):\n    return week_day_hour * 360 / (2*math.pi)\ndef degree_degree(year_day_hour):\n    return year_day_hour * 360 / (2*math.pi)\ndef degree_degree(year_day_hour):\n    return year_day_hour * 360 / (2*math.pi)\ndef degree_degree(day_min_sec):\n    return day_min_sec * 360 / (2*math.pi)\ndef degree_degree(day_min_sec):\n    return day_min_sec * 360 / (2*math.pi)\ndef degree_degree(month_day_sec):\n    return month_day_sec * 360 / (2*math.pi)\ndef degree_degree(month_day_sec):\n    return month_day_sec * 360 / (2*math.pi)\ndef degree_degree(week_day_sec):\n    return week_day_sec * 360 / (2*math.pi)\ndef degree_degree(week_day_sec):\n    return week_day_sec * 360 / (2*math.pi)\ndef degree_degree(year_day_sec):\n    return year_day_sec * 360 / (2*math.pi)\ndef degree_degree(year_day_sec):\n    return year_day_sec * 360 / (2*math.pi)\ndef degree_degree(day_min_sec):\n    return day_min_sec * 360 / (2*math.pi)\ndef degree_degree(day_min_sec):\n    return day_min_sec * 360 / (2*math.pi)\ndef degree_degree(month_day_sec):\n    return month_day_sec * 360 / (2*math.pi)\ndef degree_degree(month_day_sec):\n    return month_day_sec * 360 / (2*math.pi)\ndef degree_degree(week_day_sec):\n    return week_day_sec * 360 / (2*math.pi)\ndef degree_degree(week_day_sec):\n    return week_day_sec * 360 / (2*math.pi)\ndef degree_degree(year_day_sec):\n    return year_day_sec * 360 / (2*math.pi)\ndef degree_degree(year_day_sec):\n    return year_day_sec * 360 / (2*math.pi)\ndef degree_degree(day_min_hour):\n    return day_min_hour * 360 / (2*math.pi)\ndef degree_degree(day_min_hour):\n    return day_min_hour * 360 / (2*math.pi)\ndef degree_degree(month_day_hour):\n    return month_day_hour * 360 / (2*math.pi)\ndef degree_degree(month_day_hour):\n    return month_day_hour * 360 / (2*math.pi)\ndef degree_degree(week_day_hour):\n    return week_day_hour * 360 / (2*math.pi)\ndef degree_degree(week_day_hour):\n    return week_day_hour * 360 / (2*math.pi)\ndef degree_degree(year_day_hour):\n    return year_day_hour * 360 / (2*math.pi)\ndef degree_degree(year_day_hour):\n    return year_day_hour * 360 / (2*math.pi)\ndef degree_degree(day_min_sec):\n    return day_min_sec * 360 / (2*math.pi)\ndef degree_degree(day_min_sec):\n    return day_min_sec * 360 / (2*math.pi)\ndef degree_degree(month_day_sec):\n    return month_day_sec * 360 / (2*math.pi)\ndef degree_degree(month_day_sec):\n    return month_day_sec * 360 / (2*math.pi)\ndef degree_degree(week_day_sec):\n    return week_day_sec * 360 / (2*math.pi)\ndef degree_degree(week_day_sec):\n    return week_day_sec * 360 / (2*math.pi)\ndef degree_degree(year_day_sec):\n    return year_day_sec * 360 / (2*math.pi)\ndef degree_degree(year_day_sec):\n    return year_day_sec * 360 / (2*math.pi)\ndef degree_degree(day_min_day):\n    return day_min_day * 360 / (2*math.pi)\ndef degree_degree",
        "num_ids": 1977
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef convert_degrees_to_radians(angle):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return angle * math.pi / 180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * math.pi / 180\n    return rad\n",
        "num_ids": 17
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\n",
        "num_ids": 14
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * math.pi / 180\n    return radians\n",
        "num_ids": 19
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)\ndef radian_degree_back(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians * (180/math.pi)\ndef cosine(radian):\n    '''\n    Write a function to calculate cosine of given radian.\n    '''\n    return math.cos(radian)\ndef cosine_back(degree):\n    '''\n    Write a function to calculate cosine of given degree.\n    '''\n    return math.cos(radian_degree_back(degree))\ndef sine(radian):\n    '''\n    Write a function to calculate sine of given radian.\n    '''\n    return math.sin(radian)\ndef sine_back(degree):\n    '''\n    Write a function to calculate sine of given degree.\n    '''\n    return math.sin(radian_degree_back(degree))\ndef tangent(radian):\n    '''\n    Write a function to calculate tangent of given radian.\n    '''\n    return math.tan(radian)\ndef tangent_back(degree):\n    '''\n    Write a function to calculate tangent of given degree.\n    '''\n    return math.tan(radian_degree_back(degree))\ndef inverse_cosine(cosine):\n    '''\n    Write a function to calculate inverse cosine of given cosine.\n    '''\n    return math.asin(cosine)\ndef inverse_cosine_back(degree):\n    '''\n    Write a function to calculate inverse cosine of given degree.\n    '''\n    return math.asin(cosine_back(degree))\ndef inverse_sine(sine):\n    '''\n    Write a function to calculate inverse sine of given sine.\n    '''\n    return math.acos(sine)\ndef inverse_sine_back(degree):\n    '''\n    Write a function to calculate inverse sine of given degree.\n    '''\n    return math.acos(sine_back(degree))\ndef inverse_tangent(tangent):\n    '''\n    Write a function to calculate inverse tangent of given tangent.\n    '''\n    return math.atan(tangent)\ndef inverse_tangent_back(degree):\n    '''\n    Write a function to calculate inverse tangent of given degree.\n    '''\n    return math.atan(tangent_back(degree))\ndef inverse_tangent_to_cosine(tangent):\n    '''\n    Write a function to calculate inverse tangent to given cosine.\n    '''\n    return math.acos(-tangent)\ndef inverse_tangent_to_cosine_back(degree):\n    '''\n    Write a function to calculate inverse tangent to given degree.\n    '''\n    return math.acos(-tangent_back(degree))\ndef inverse_tangent_to_sine(tangent):\n    '''\n    Write a function to calculate inverse tangent to given sine.\n    '''\n    return math.asin(-tangent)\ndef inverse_tangent_to_sine_back(degree):\n    '''\n    Write a function to calculate inverse tangent to given degree.\n    '''\n    return math.asin(-tangent_back(degree))\ndef inverse_tangent_to_inverse_cosine(tangent):\n    '''\n    Write a function to calculate inverse tangent to given inverse cosine.\n    '''\n    return math.asin(-tangent)\ndef inverse_tangent_to_inverse_cosine_back(degree):\n    '''\n    Write a function to calculate inverse tangent to given inverse cosine.\n    '''\n    return math.asin(-tangent_back(degree))\ndef inverse_tangent_to_inverse_sine(tangent):\n    '''\n    Write a function to calculate inverse tangent to given inverse sine.\n    '''\n    return math.acos(-tangent)\ndef inverse_tangent_to_inverse_sine_back(degree):\n    '''\n    Write a function to calculate inverse tangent to given inverse sine.\n    '''\n    return math.acos(-tangent_back(degree))\ndef inverse_tangent_to_inverse_inverse_cosine(tangent):\n    '''\n    Write a function to calculate inverse tangent to given inverse inverse cosine.\n    '''\n    return math.acos(-tangent)\ndef inverse_tangent_to_inverse_inverse_cosine_back(degree):\n    '''\n    Write a function to calculate inverse tangent to given inverse inverse cosine.\n    '''\n    return math.acos(-tangent_back(degree))\ndef inverse_tangent_to_inverse_inverse_sine(tangent):\n    '''\n    Write a function to calculate inverse tangent to given inverse inverse sine.\n    '''\n    return math.asin(-tangent)\ndef inverse_tangent_to_inverse_inverse_sine_back(degree):\n    '''\n    Write a function to calculate inverse tangent to given inverse inverse sine.\n    '''\n    return math.asin(-tangent_back(degree))\ndef inverse_inverse_tangent_to_cosine(inverse_tangent):\n    '''\n    Write a function to calculate inverse inverse tangent to given cosine.\n    '''\n    return math.acos(inverse_tangent)\ndef inverse_inverse_tangent_to_cosine_back(degree):\n    '''\n    Write a function to calculate inverse inverse tangent to given degree.\n    '''\n    return math.acos(inverse_tangent_back(degree))\ndef inverse_inverse_tangent_to_sine(inverse_tangent):\n    '''\n    Write a function to calculate inverse inverse tangent to given sine.\n    '''\n    return math.asin(inverse_tangent)\ndef inverse_inverse_tangent_to_sine_back(degree):\n    '''\n    Write a function to calculate inverse inverse tangent to given degree.\n    '''\n    return math.asin(inverse_tangent_back(degree))\ndef inverse_inverse_tangent_to_inverse_cosine(inverse_tangent):\n    '''\n    Write a function to calculate inverse inverse tangent to given inverse cosine.\n    '''\n    return math.asin(inverse_tangent)\ndef inverse_inverse_tangent_to_inverse_cosine_back(degree):\n    '''\n    Write a function to calculate inverse inverse tangent to given inverse cosine.\n    '''\n    return math.asin(inverse_tangent_back(degree))\ndef inverse_inverse_tangent_to_inverse_sine(inverse_tangent):\n    '''\n    Write a function to calculate inverse inverse tangent to given inverse sine.\n    '''\n    return math.acos(inverse_tangent)\ndef inverse_inverse_tangent_to_inverse_sine_back(degree):\n    '''\n    Write a function to calculate inverse inverse tangent to given inverse sine.\n    '''\n    return math.acos(inverse_tangent_back(degree))\ndef inverse_inverse_inverse_tangent_to_cosine(inverse_inverse_tangent):\n    '''\n    Write a function to calculate inverse inverse inverse tangent to given cosine.\n    '''\n    return math.acos(inverse_inverse_tangent)\ndef inverse_inverse_inverse_tangent_to_cosine_back(degree):\n    '''\n    Write a function to calculate inverse inverse inverse tangent to given degree.\n    '''\n    return math.acos(inverse_inverse_tangent_back(degree))\ndef inverse_inverse_inverse_tangent_to_sine(inverse_inverse_tangent):\n    '''\n    Write a function to calculate inverse inverse inverse tangent to given sine.\n    '''\n    return math.asin(inverse_inverse_tangent)\ndef inverse_inverse_inverse_tangent_t",
        "num_ids": 33
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = pattern.search(text)\n    if matches:\n        return matches.group(), matches.start(), matches.end()\n",
        "num_ids": 33
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    matches = pattern.finditer(text)\n    for i, match in enumerate(matches):\n        print(\"Match {}: {}\".format(i, match.group()))\n    return matches\n",
        "num_ids": 60
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    res = re.search(pattern, text)\n    start = res.start()\n    end = res.end()\n    return text[start:end], start, end\n",
        "num_ids": 42
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    p = re.compile(pattern)\n    print(p.findall(text))\n    for match in re.finditer(pattern,text):\n        print(match.group(),match.start(),match.end())\n",
        "num_ids": 54
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Implementation\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    start = 0\n    end = 0\n    matches = []\n    found_string = \"\"\n    for i in range(len(pattern)):\n        if text[i] == pattern[i]:\n            start += 1\n            end += 1\n            found_string += pattern[i]\n        else:\n            start = 0\n            end = 0\n            found_string = \"\"\n        if start >= len(text):\n            break\n    print(found_string)\n    print(\"{\"+str(start)+\", \"+str(end)+\"}\")\n    return found_string, start, end\n",
        "num_ids": 161
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    for i, substring in enumerate(re.finditer(pattern, text)):\n        yield text[substring.start() : substring.end()], substring.start(), substring.end()\n",
        "num_ids": 51
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    try:\n        match = re.search(pattern, text)\n        start = match.start()\n        end = match.end()\n        return text[start:end], start, end\n    except AttributeError:\n        return None\n",
        "num_ids": 57
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    def search_literals(text, pattern):\n        m = re.search(pattern, text)\n        if m:\n            start = m.start()\n            end = m.end()\n            return text[start:end], start, end\n",
        "num_ids": 59
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern_list = re.findall(pattern, text)\n    if pattern_list:\n        for match in pattern_list:\n            match_start = text.find(match)\n            match_end = match_start + len(match)\n            return (match, match_start, match_end)\n        return (None, None, None)\n    else:\n        return (None, None, None)\n",
        "num_ids": 97
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matched_pattern = re.search(pattern, text)\n    return matched_pattern.group() if matched_pattern else None\n",
        "num_ids": 31
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # code here\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    if n == 5:\n        return 7\n    if n == 6:\n        return 11\n    if n == 7:\n        return 13\n    if n == 8:\n        return 15\n    if n == 9:\n        return 21\n    if n == 10:\n        return 28\n    if n == 11:\n        return 37\n    if n == 12:\n        return 47\n    if n == 13:\n        return 55\n    if n == 14:\n        return 63\n    if n == 15:\n        return 72\n    if n == 16:\n        return 81\n    if n == 17:\n        return 91\n    if n == 18:\n        return 100\n    if n == 19:\n        return 107\n    if n == 20:\n        return 116\n    if n == 21:\n        return 122\n    if n == 22:\n        return 132\n    if n == 23:\n        return 145\n    if n == 24:\n        return 154\n    if n == 25:\n        return 163\n    if n == 26:\n        return 176\n    if n == 27:\n        return 190\n    if n == 28:\n        return 200\n    if n == 29:\n        return 213\n    if n == 30:\n        return 225\n    if n == 31:\n        return 238\n    if n == 32:\n        return 241\n    if n == 33:\n        return 253\n    if n == 34:\n        return 276\n    if n == 35:\n        return 295\n    if n == 36:\n        return 314\n    if n == 37:\n        return 327\n    if n == 38:\n        return 331\n    if n == 39:\n        return 336\n    if n == 40:\n        return 340\n    if n == 41:\n        return 344\n    if n == 42:\n        return 357\n    if n == 43:\n        return 375\n    if n == 44:\n        return 392\n    if n == 45:\n        return 414\n    if n == 46:\n        return 427\n    if n == 47:\n        return 431\n    if n == 48:\n        return 446\n    if n == 49:\n        return 457\n    if n == 50:\n        return 484\n    if n == 51:\n        return 502\n    if n == 52:\n        return 516\n    if n == 53:\n        return 527\n    if n == 54:\n        return 542\n    if n == 55:\n        return 555\n    if n == 56:\n        return 563\n    if n == 57:\n        return 578\n    if n == 58:\n        return 592\n    if n == 59:\n        return 607\n    if n == 60:\n        return 622\n    if n == 61:\n        return 636\n    if n == 62:\n        return 641\n    if n == 63:\n        return 646\n    if n == 64:\n        return 654\n    if n == 65:\n        return 667\n    if n == 66:\n        return 681\n    if n == 67:\n        return 695\n    if n == 68:\n        return 710\n    if n == 69:\n        return 717\n    if n == 70:\n        return 728\n    if n == 71:\n        return 735\n    if n == 72:\n        return 744\n    if n == 73:\n        return 754\n    if n == 74:\n        return 767\n    if n == 75:\n        return 785\n    if n == 76:\n        return 798\n    if n == 77:\n        return 804\n    if n == 78:\n        return 819\n    if n == 79:\n        return 837\n    if n == 80:\n        return 847\n    if n == 81:\n        return 864\n    if n == 82:\n        return 871\n    if n == 83:\n        return 883\n    if n == 84:\n        return 901\n    if n == 85:\n        return 909\n    if n == 86:\n        return 933\n    if n == 87:\n        return 953\n    if n == 88:\n        return 964\n    if n == 89:\n        return 983\n    if n == 90:\n        return 990\n    if n == 91:\n        return 1007\n    if n == 92:\n        return 1025\n    if n == 93:\n        return 1045\n    if n == 94:\n        return 1062\n    if n == 95:\n        return 1087\n    if n == 96:\n        return 1105\n    if n == 97:\n        return 1114\n    if n == 98:\n        return 1133\n    if n == 99:\n        return 1151\n    if n == 100:\n        return 1167\n    if n == 101:\n        return 1185\n    if n == 102:\n        return 1205\n    if n == 103:\n        return 1236\n    if n == 104:\n        return 1263\n    if n == 105:\n        return 1280\n    if n == 106:\n        return 1297\n    if n == 107:\n        return 1316\n    if n == 108:\n        return 1344\n    if n == 109:\n        return 1361\n    if n == 110:\n        return 1396\n    if n == 111:\n        return 1417\n    if n == 112:\n        return 1446\n    if n == 113:\n        return 1475\n    if n == 114:\n        return 1514\n    if n == 115:\n        return 1543\n    if n == 116:\n        return 1584\n    if n == 117:\n        return 1614\n    if n == 118:\n        return 1651\n    if n == 119:\n        return 1696\n    if n == 120:\n        return 1734\n    if n == 121:\n        return 1775\n    if n == 122:\n        return 1801\n    if n == 123:\n        return 1834\n    if n == 124:\n        return 1874\n    if n == 125:\n        return 1895\n    if n == 126:\n        return 1921\n    if n == 127:\n        return 1947\n    if n == 128:\n        return 1973\n    if n == 129:\n        return 1999\n    if n == 130:\n        return 2029\n    if n == 131:\n        return 2065\n    if n == 132:\n        return 2098\n    if n == 133:\n        return 2132\n    if n == 134:\n        return 2154\n    if n == 135:\n        return 2180\n    if n == 136:\n        return 2201\n    if n == 137:\n        return 2223\n    if n == 138:\n        return 2247\n    if n == 139:\n        return 2276\n    if n == 140:\n        return 2314\n    if n == 141:\n        return 2353\n    if n == 142:\n        return 2393\n    if n == 143:\n        return 2403\n    if n == 144:\n        return 2451\n    if n == 145:\n        return 2496\n    if n == 146:\n        return 2531\n    if n == 147:\n        return 2576\n    if n == 148:\n        return 2623\n    if n == 149:\n        return 2663\n    if n == 150:\n        return 2694\n    if n == 151:\n        return 2736\n    if n == 152:\n        return 2787\n    if n == 153:\n        return 2827\n    if n == 154:\n        return 2878\n    if n == 155:\n        return 2919\n    if n == 156:\n        return 2971\n    if n == 157:\n        return 3026\n    if n == 158:\n        return 3079\n    if n == 159:\n        return 3114\n    if n == 160:\n        return 3153\n    if n == 161:\n        return 3186\n    if n == 162:\n        return 3237\n    if n == 163:\n        return 3285\n    if n == 164:\n        return 3319\n    if n == 165:\n        return 3369\n    if n == 166:\n        return 3444\n    if n == 167:\n        return 3486\n    if n == 168:\n        return 3524\n    if n == 169:\n        return 3569\n    if n == 170:\n        return 3610\n    if n == 171:\n        return 3669\n    if n =",
        "num_ids": 2019
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_number = 0\n    i = 1\n    while i < n:\n        bell_number += 1\n        i += 1\n    return bell_number\n",
        "num_ids": 39
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # TODO: write your code here\n    bell_number = []\n    bell_number = n * (1 + (n - 1) * 2) // 2\n    return bell_number\n",
        "num_ids": 46
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*bell_Number(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if (n==0):\n        return 0\n    if (n==1):\n        return 1\n    b=0\n    for i in range(2,n+1):\n        b=i*(2*b-i)\n    return b\n",
        "num_ids": 61
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    sum=1\n    while(n>0):\n        sum=sum+n\n        n=n-1\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    from math import factorial\n    bell = 1\n    i = 1\n    while i <= n:\n        bell = bell*(i)\n        i += 1\n    return bell\n",
        "num_ids": 44
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 3\n    return n*bell_Number(n-1)\n",
        "num_ids": 48
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_fact = 1\n    for i in range(1, n + 1):\n        bell_fact = bell_fact * (n - i + 1) // i\n    return bell_fact\n",
        "num_ids": 47
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    n = int(input())\n    return (n * (n + 1) // 2)\n",
        "num_ids": 24
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    L.sort()\n    return(L[:L.index(list1[k])+1] + L[L.index(list1[k])+1:])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2000
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = list(list1)\n    list2.pop(L)\n    return list2\n",
        "num_ids": 26
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) <= 1:\n        return []\n    else:\n        return list1[:k] + list1[k+1:]\n",
        "num_ids": 38
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    #\n    # Your code here\n    #\n    return list1[:k] + list1[k+1:]\n",
        "num_ids": 31
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # If k element is less than the length of list, then remove the k'th element\n    if k < len(list1):\n        list1.pop(k)\n    else:\n        # If k element is greater than the length of list, then remove the first k elements\n        for i in range(k):\n            list1.pop(0)\n    return list1\n",
        "num_ids": 89
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) > 1:\n        list1.pop(L)\n        return list1\n    else:\n        return list1\n        ",
        "num_ids": 37
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    i = 0\n    L_new = []\n    for i in range(len(list1)):\n        if i == L:\n            pass\n        else:\n            L_new.append(list1[i])\n    return L_new\n",
        "num_ids": 60
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    result = []\n    #print(len(list1))\n    for i in range(len(list1)-1):\n        if i == L:\n            continue\n        else:\n            result.append(list1[i])\n    return result\n",
        "num_ids": 60
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if(len(list1) == 1):\n        print(list1)\n    else:\n        if(L == 0):\n            return list1\n        else:\n            for i in range(len(list1)):\n                if(i == L):\n                    del list1[i]\n                    print(list1)\n                    break\n            if(i == len(list1)):\n                return list1\n            else:\n                return remove_kth_element(list1, L + 1)\n",
        "num_ids": 119
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:k] + list1[k+1:]\n",
        "num_ids": 19
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_value = 0\n    col_number = N\n    for row in test_list:\n        if row[col_number] > max_value:\n            max_value = row[col_number]\n    return max_value\n",
        "num_ids": 57
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    res = []\n    for i in range(0, len(test_list)):\n        res.append(max(test_list[i][:N]))\n    return res\n",
        "num_ids": 45
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # matrix = [[1,2,3],\n    #             [4,5,6],\n    #             [7,8,9]]\n    # N = 2\n    # print(matrix[0][N-1])\n    if N > len(test_list):\n        return None\n    if N < 1:\n        return None\n    return max(col)\n",
        "num_ids": 89
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    n=len(test_list)\n    if n==0 or N>n:\n        return 0\n    max_val=test_list[0][N-1]\n    for i in range(1,n):\n        if max_val<test_list[i][N-1]:\n            max_val=test_list[i][N-1]\n    return max_val\n",
        "num_ids": 93
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # N = int(input(\"Enter the value of N: \"))\n    # print(N)\n    # test_list = [[1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,16]]\n    return max(test_list[N-1])\n    \nprint(max_of_nth([[1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,16]], 2))",
        "num_ids": 132
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # np.max(a,axis=1)\n    # np.argmax(a,axis=1)\n    # a = np.array([[3,6,9],[8,1,4]])\n    # np.argmax(a,axis=0)\n    # print(np.max(a, axis=0))\n    # print(a)\n    # print(a.shape)\n    # print(np.argmax(a, axis=0))\n    # print(np.argmax(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=0))\n    # print(np.max(a, axis=",
        "num_ids": 2001
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    output_list = []\n    for i in range(len(test_list)):\n        if len(test_list[i]) == N:\n            output_list.append(max(test_list[i]))\n    return output_list\n",
        "num_ids": 62
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    def nth_column(matrix, n):\n        '''\n        Given a 2D matrix, return then'th column as a list.\n        '''\n        return matrix[n]\n",
        "num_ids": 9
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([row[N-1] for row in test_list])\n",
        "num_ids": 20
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    nth_column = []\n    for i in range(len(test_list)):\n        nth_column.append(test_list[i][N-1])\n    return max(nth_column)\n",
        "num_ids": 53
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst1 = []\n    lst2 = []\n    for i in lst:\n        lst1.append(i[0])\n        lst2.append(i[1])\n    return lst1,lst2\n    \nprint(merge([[1,3],[2,5],[6,7],[4,9],[3,8]]))",
        "num_ids": 87
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst_lst = []\n    for i in range(len(lst)):\n        if i%2 == 0:\n            lst_lst.append(lst[i][0])\n        else:\n            lst_lst.append(lst[i][1])\n    return lst_lst\n    \nprint(merge([[1,2],[3,4],[5,6],[7,8]]))\nprint(merge([[1,2],[3,4],[5,6]]))",
        "num_ids": 124
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst = sorted(lst)\n    return lst\n    \n",
        "num_ids": 19
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    merged = []\n    for sublist in lst:\n        merged.append(sublist[0])\n        merged.append(sublist[1])\n    return merged\n",
        "num_ids": 47
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sub_list in lst:\n        merged_list.append(sub_list[0])\n        merged_list.append(sub_list[1])\n    return merged_list\n",
        "num_ids": 56
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return[lst[0][0],lst[0][1]]\n",
        "num_ids": 20
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if lst == [] or lst == [[]]:\n        return []\n    else:\n        return [lst[0][0],lst[0][1],merge(lst[1:])]\n",
        "num_ids": 52
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    for i in range(len(lst)):\n        lst[i].sort()\n    return lst\nprint(merge([[3, 4], [2, 5], [1, 6]]))\n",
        "num_ids": 51
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for i in range(len(lst)):\n        merged.append(lst[i][0])\n        merged.append(lst[i][1])\n    return merged\n",
        "num_ids": 53
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) < 2:\n        return lst\n    \n    sublists = []\n    for i in range(len(lst)):\n        if i == 0:\n            sublists.append([lst[0][0], lst[0][1]])\n        elif i!= len(lst) - 1:\n            sublists.append([lst[i][0], lst[i][1]])\n        else:\n            sublists.append([lst[i][0]])\n            sublists.append([lst[i][1]])\n    return sublists\n    \nmerge([1,2,3,4])\n",
        "num_ids": 158
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for i in range(len(test_list)):\n        sum = sum + test_list[i]\n    print(sum)\n",
        "num_ids": 39
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum += test_list[i]\n    return cumulative_sum\n",
        "num_ids": 43
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if test_list[i] == 0:\n            test_list.pop(i)\n    return sum(test_list)\n",
        "num_ids": 47
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    summ = 0\n    for i in test_list:\n        summ += i\n    return summ\n",
        "num_ids": 27
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    a=0\n    b=0\n    for i in range(0,len(test_list)):\n        if(test_list[i]!=0):\n            a=a+test_list[i]\n            b=b+1\n    return a,b\n",
        "num_ids": 67
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    assert isinstance(test_list, tuple) or isinstance(test_list, list), \"Input must be a tuple or list\"\n    if isinstance(test_list, tuple):\n        for i in test_list:\n            assert isinstance(i, int) or isinstance(i, float), \"All values in the tuple must be integer or float\"\n    else:\n        for i in test_list:\n            assert isinstance(i, int) or isinstance(i, float), \"All values in the list must be integer or float\"\n    total = 0\n    for i in range(len(test_list)):\n        total += test_list[i]\n    return total\n",
        "num_ids": 160
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for i in range(len(test_list)):\n        cummulative_sum += test_list[i]\n    return cummulative_sum\n",
        "num_ids": 47
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = 0\n    for i in range(len(test_list)):\n        result += test_list[i]\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    #we can use list comprehension to do the same thing\n    #List comprehension:\n    return sum(i for i in test_list if i>0)\n",
        "num_ids": 38
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = []\n    for i in range(1,len(test_list)):\n        result.append(test_list[i-1] + test_list[i])\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    for i in nums:\n        for j in i:\n            total = total + j\n        count = count + 1\n        average = total/count\n    return average\n",
        "num_ids": 52
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [(i, sum(j) / len(j)) for i, j in enumerate(nums) if len(nums) > 0]\n",
        "num_ids": 37
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = ()\n    for n in nums:\n        result += (sum(n)/len(n))\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    tuple1 = (1,2,3,4)\n    tuple2 = (5,6,7,8)\n    tuple3 = (9,10,11,12)\n    tuple4 = (13,14,15,16)\n    tuple5 = (17,18,19,20)\n    list1 = (tuple1,tuple2,tuple3,tuple4,tuple5)\n    tuple1_list = list(tuple1)\n    tuple2_list = list(tuple2)\n    tuple3_list = list(tuple3)\n    tuple4_list = list(tuple4)\n    tuple5_list = list(tuple5)\n    tuple_list = list(list1)\n    avg_list = []\n    for i in tuple_list:\n        avg = 0\n        for j in i:\n            avg += j\n        avg = avg/len(i)\n        avg_list.append(avg)\n    return avg_list\n    \n    # print(tuple_list)\n    # print(avg_list)\n",
        "num_ids": 272
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return tuple(map(lambda x: sum(x)/len(x), nums))\n",
        "num_ids": 23
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Make an empty list\n    averages = []\n    # Loop over each element in nums\n    for tup in nums:\n        # Get the total of each tuple\n        total = 0\n        for element in tup:\n            total += element\n        # Append the average to the list\n        averages.append(total / len(tup))\n    # Return the list\n    return averages\n",
        "num_ids": 95
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    result = []\n    for item in nums:\n        total += item\n        count += 1\n    average = total / count\n    return average\n",
        "num_ids": 46
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for i in range(len(nums)):\n        num_list = []\n        for j in range(len(nums[i])):\n            num_list.append(nums[i][j])\n        average_list.append(sum(num_list)/len(num_list))\n    return average_list\n",
        "num_ids": 85
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # nums = (1,2,3,4,5)\n    # nums = (1,2,3,4,5)\n    # nums = ((1,2,3,4,5),(1,2,3,4,5),(1,2,3,4,5))\n    # nums = ((1,2,3,4,5),(1,2,3,4,5),(1,2,3,4,5))\n    # nums = ((1,2,3,4,5),(1,2,3,4,5))\n    # nums = ((1,2,3,4,5),(1,2,3,4,5))\n",
        "num_ids": 170
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        new_tuple = []\n        for j in range(len(nums[i])):\n            new_tuple.append(nums[i][j])\n        new_list.append(new_tuple)\n    return new_list\n    \nprint(average_tuple([(1, 2), (3, 4), (5, 6)]))\n",
        "num_ids": 106
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # ----- Task -----\n    return (x % y for x, y in zip(test_tup1, test_tup2))\n",
        "num_ids": 34
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    tup3 = []\n    for i in range(len(test_tup1)):\n        tup3.append(test_tup1[i] % test_tup2[i])\n    return tuple(tup3)\n",
        "num_ids": 59
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    for i in range(0,len(list1)):\n        list1[i] = list1[i]%list2[i]\n    tup1_mod = tuple(list1)\n    print(tup1_mod)\n",
        "num_ids": 85
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup = new_tup + (test_tup1[i] % test_tup2[i], )\n    return new_tup\n",
        "num_ids": 64
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    test_result = []\n    for i in range(len(test_tup1)):\n        test_result.append(test_tup1[i] % test_tup2[i])\n    return test_result\n",
        "num_ids": 56
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([x % y for x, y in zip(test_tup1, test_tup2)])\n",
        "num_ids": 30
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] % test_tup2[i],)\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    try:\n        return tuple(x % y for x, y in zip(test_tup1, test_tup2))\n    except:\n        return ('Error')\n",
        "num_ids": 43
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tuple of unequal length')\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))\n",
        "num_ids": 61
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda a,b:a%b, test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    from collections import deque\n    q = deque([(0,0)])\n    visited = set()\n    visited.add((0,0))\n    steps = steps+1\n    max_steps = steps\n    while(len(q)!=0):\n        dist, steps = q.popleft()\n        if(dist==d):\n            max_steps = min(max_steps,steps)\n        # print(dist, steps, max_steps)\n        for i in range(1,dist):\n            for j in range(2):\n                new_dist = i+j\n                if(new_dist<d):\n                    new_step = steps+1\n                    if((new_dist,new_step) not in visited):\n                        q.append((new_dist,new_step))\n                        visited.add((new_dist,new_step))\n        \n    return max_steps\n",
        "num_ids": 213
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if(d < 0):\n        return 0\n    if(d == 0):\n        return 1\n    if(d > steps):\n        return 0\n",
        "num_ids": 38
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Base case \n    if steps < 2: \n        return 0\n",
        "num_ids": 20
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: \n        return steps \n    if d < 0: \n        return -1\n    steps = steps + 1 \n    return min_Jumps(steps, d-1) \n",
        "num_ids": 51
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return -1\n    min_steps = 1e9\n    steps_counter = 0\n    steps_counter += 1\n    if steps >= 1 and (steps - 1) % d!= 0:\n        return -1\n    if steps >= 1 and steps % d == 0:\n        return 1\n    while True:\n        if steps - 1 == d:\n            return steps_counter\n        if steps - 1 > d:\n            return -1\n        steps += 1\n        steps_counter += 1\n        steps_counter += 1\n",
        "num_ids": 130
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # d = 0\n    # steps = 2\n    # if steps == 0:\n    #     return 0\n",
        "num_ids": 28
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0: \n        return 0 \n    if steps < 2: \n        return 1 \n    if steps == 2: \n        return 1 if d == 0 else 0 \n",
        "num_ids": 47
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps <= d:\n        return 1\n    count = 0\n    if steps >= d:\n        count += min_Jumps(steps - d, d)\n    if steps >= d:\n        count += min_Jumps(steps - d, d)\n    if steps >= d:\n        count += min_Jumps(steps - d, d)\n    return count\n",
        "num_ids": 88
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    num_steps = 0\n    for i in range(0, steps+1): \n        if d == 1: \n            num_steps = i\n            break\n        if i < d: \n            d = d - i \n        else: \n            d = d + i - d \n            num_steps = num_steps + 1\n    return num_steps\n",
        "num_ids": 89
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0: return 0\n    steps = min(steps, d)\n    for i in range(1, steps):\n        # d = 2 means the point is (d, 0) and jump 1 step to reach that point is 1.\n        if d-i >= steps:\n            return 1 + min_Jumps(steps - 1, d - i)\n    return 1\n",
        "num_ids": 89
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [x/y for x,y in zip(nums1,nums2)]\n",
        "num_ids": 24
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [x/y for x,y in zip(nums1,nums2)]\n    \ndef add_list(nums1,nums2):\n    '''\n    Write a function to add two lists element wise.\n    '''\n    return [x+y for x,y in zip(nums1,nums2)]\n    \ndef mul_list(nums1,nums2):\n    '''\n    Write a function to multiply two lists element wise.\n    '''\n    return [x*y for x,y in zip(nums1,nums2)]\n    \ndef convert_to_int(nums1):\n    '''\n    Write a function to convert a list of strings to integers.\n    '''\n    return list(map(int, nums1))\n    \ndef convert_to_str(nums1):\n    '''\n    Write a function to convert a list of integers to strings.\n    '''\n    return list(map(str, nums1))\n    \ndef delete_str(nums1):\n    '''\n    Write a function to delete a substring in a list of strings.\n    '''\n    return nums1.replace(\"#\",\"\")\n    \ndef delete_int(nums1):\n    '''\n    Write a function to delete a substring in a list of integers.\n    '''\n    return nums1.pop(0)\n    \ndef delete_str_int(nums1):\n    '''\n    Write a function to delete a substring in a list of strings and integers.\n    '''\n    return nums1.pop(0)\n    \ndef remove_neg(nums1):\n    '''\n    Write a function to remove the negative elements from a list.\n    '''\n    return list(filter(lambda x: x>0, nums1))\n    \ndef sort_list(nums1):\n    '''\n    Write a function to sort a list of integers.\n    '''\n    return sorted(nums1)\n    \ndef add_list_int(nums1,nums2):\n    '''\n    Write a function to add a list of integers and another list of integers.\n    '''\n    return nums1+nums2\n    \ndef reverse_list(nums1):\n    '''\n    Write a function to reverse a list of integers.\n    '''\n    return nums1[::-1]\n    \ndef list_join(nums1,delim):\n    '''\n    Write a function to join elements of a list with a delimiter.\n    '''\n    return delim.join(nums1)\n    \ndef reverse_nums(nums1):\n    '''\n    Write a function to reverse a list of integers.\n    '''\n    return nums1[::-1]\n    \ndef list_comp(nums1):\n    '''\n    Write a function to convert a list of strings to a list of integers.\n    '''\n    return list(map(int, nums1))\n    \ndef str_comp(nums1):\n    '''\n    Write a function to convert a list of integers to a list of strings.\n    '''\n    return list(map(str, nums1))\n    \ndef same_list(nums1,nums2):\n    '''\n    Write a function to check if two lists are the same.\n    '''\n    return nums1 == nums2\n    \ndef sum_odd(nums1):\n    '''\n    Write a function to calculate the sum of odd elements in a list.\n    '''\n    return sum(x for x in nums1 if x%2!= 0)\n    \ndef sum_even(nums1):\n    '''\n    Write a function to calculate the sum of even elements in a list.\n    '''\n    return sum(x for x in nums1 if x%2 == 0)\n    \ndef next_even(nums1):\n    '''\n    Write a function to find the next even number in a list.\n    '''\n    return next(x for x in nums1 if x%2!= 0)\n    \ndef next_odd(nums1):\n    '''\n    Write a function to find the next odd number in a list.\n    '''\n    return next(x for x in nums1 if x%2 == 0)\n    \ndef set_set(nums1):\n    '''\n    Write a function to find the difference between two sets.\n    '''\n    return nums1.difference(set(nums2))\n    \ndef list_add(nums1,nums2):\n    '''\n    Write a function to add two lists element wise.\n    '''\n    return nums1+nums2\n    \ndef list_minus(nums1,nums2):\n    '''\n    Write a function to subtract two lists element wise.\n    '''\n    return nums1-nums2\n    \ndef list_int_div(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return nums1//nums2\n    \ndef list_int_mul(nums1,nums2):\n    '''\n    Write a function to multiply two lists element wise.\n    '''\n    return nums1*nums2\n    \ndef list_int_mod(nums1,nums2):\n    '''\n    Write a function to calculate the remainder of two numbers.\n    '''\n    return nums1%nums2\n    \ndef swap_odd_even(nums1):\n    '''\n    Write a function to swap the odd and even elements in a list.\n    '''\n    return nums1[::2], nums1[1::2]\n    \ndef swap_odd_even_reversed(nums1):\n    '''\n    Write a function to reverse the order of the odd and even elements in a list.\n    '''\n    return nums1[::2][::-1], nums1[1::2][::-1]\n    \ndef list_copy(nums1):\n    '''\n    Write a function to copy a list.\n    '''\n    return nums1[:]\n    \ndef list_copy_with_swap(nums1):\n    '''\n    Write a function to copy a list and swap the elements.\n    '''\n    return nums1[:], nums1[::-1]\n    \ndef list_copy_with_swap_reversed(nums1):\n    '''\n    Write a function to copy a list and reverse it.\n    '''\n    return nums1[:], nums1[::-1]\n    \ndef list_remove_reversed(nums1):\n    '''\n    Write a function to remove the last element from a list and reverse the order of the remaining list.\n    '''\n    return nums1[:-1], nums1[::-1]\n    \ndef list_remove_reversed_2(nums1):\n    '''\n    Write a function to remove the last element from a list and reverse the order of the remaining list.\n    '''\n    return nums1[:-1], nums1[::-1]\n    \ndef remove_odd(nums1):\n    '''\n    Write a function to remove the odd elements from a list.\n    '''\n    return list(filter(lambda x: x%2 == 0, nums1))\n    \ndef remove_odd_reversed(nums1):\n    '''\n    Write a function to reverse the order of the odd elements from a list.\n    '''\n    return nums1[::2][::-1], nums1[1::2]\n    \ndef remove_odd_reversed_2(nums1):\n    '''\n    Write a function to reverse the order of the odd elements from a list.\n    '''\n    return nums1[::2][::-1], nums1[1::2]\n    \ndef remove_odd_reversed_3(nums1):\n    '''\n    Write a function to reverse the order of the odd elements from a list.\n    '''\n    return nums1[::2][::-1], nums1[1::2]\n    \ndef remove_odd_reversed_4(nums1):\n    '''\n    Write a function to reverse the order of the odd elements from a list.",
        "num_ids": 18
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for x in nums1:\n        result.append(x/nums2)\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    lst1 = []\n    lst2 = []\n    for i in nums1:\n        lst1.append(i/nums2)\n    for j in nums2:\n        lst2.append(j/nums1)\n    return lst1,lst2\n",
        "num_ids": 72
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i,j in zip(nums1,nums2):\n        result.append(i/j)\n    return result\nprint(div_list([2,4], [2,0]))\nprint(div_list([2,4], [0,1]))\nprint(div_list([2,4], [0,1]))\n",
        "num_ids": 89
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return list(map(lambda x,y : x / y, nums1,nums2))\n",
        "num_ids": 26
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    n1,n2=len(nums1),len(nums2)\n    if n1!= n2:\n        return []\n    return [num1/num2 for num1,num2 in zip(nums1,nums2)]\n",
        "num_ids": 62
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i, j in zip(nums1, nums2):\n        result.append(i/j)\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return (nums1[:],nums2[:])\n    \n    \ndef reverse_dict(dict):\n    '''\n    Write a function to reverse a dictionary.\n    '''\n    return dict.copy()\n    \n    \ndef make_counter():\n    '''\n    Write a function to return a dictionary that keeps count of each element in the dictionary.\n    '''\n    # ans = dict()\n    # for i in range(10):\n    #     ans[i] = 0\n    # return ans\n    return collections.Counter()\n    \n    \ndef count_a(text):\n    '''\n    Write a function that counts the number of appearances of 'a' in a text.\n    '''\n    # ans = 0\n    # for ch in text:\n    #     if ch == 'a':\n    #         ans += 1\n    # return ans\n    \n    return text.count('a')\n    \n    \ndef count_a_all(text):\n    '''\n    Write a function that counts the number of appearances of 'a' in a text.\n    '''\n    # ans = 0\n    # for ch in text:\n    #     if ch == 'a':\n    #         ans += 1\n    # return ans\n    \n    return text.count('a')\n    \n    \ndef make_dict(d):\n    '''\n    Write a function to return the length of dictionary.\n    '''\n    return len(d)\n    \n    \ndef make_dict_all(d):\n    '''\n    Write a function to return the length of dictionary.\n    '''\n    return len(d)\n    \n    \ndef empty_dict(d):\n    '''\n    Write a function to return an empty dictionary.\n    '''\n    return d.copy()\n    \n    \ndef reverse_dict_all(d):\n    '''\n    Write a function to return an empty dictionary.\n    '''\n    return d.copy()\n    \n    \ndef dict_to_list(d):\n    '''\n    Write a function to return a list from a dictionary.\n    '''\n    return d.items()\n    \n    \ndef dict_to_list_all(d):\n    '''\n    Write a function to return a list from a dictionary.\n    '''\n    return d.items()\n    \n    \ndef make_dict_from_list(keys,values):\n    '''\n    Write a function to return a dictionary from lists.\n    '''\n    return dict(zip(keys,values))\n    \n    \ndef sorted_dict_to_list(d):\n    '''\n    Write a function to return a list from a sorted dictionary.\n    '''\n    return sorted(d.items())\n    \n    \ndef sorted_dict_to_list_all(d):\n    '''\n    Write a function to return a list from a sorted dictionary.\n    '''\n    return sorted(d.items())\n    \n    \ndef sorted_dict_to_list_by_value(d):\n    '''\n    Write a function to return a list from a sorted dictionary by key.\n    '''\n    return sorted(d.items(), key = lambda x: x[1])\n    \n    \ndef dict_to_sorted_list_by_value(d):\n    '''\n    Write a function to return a list from a dictionary.\n    '''\n    return sorted(d.items(), key = lambda x: x[1])\n    \n    \ndef dict_to_sorted_list_by_value_all(d):\n    '''\n    Write a function to return a list from a dictionary.\n    '''\n    return sorted(d.items(), key = lambda x: x[1])\n    \n    \ndef dict_to_sorted_list_by_value_all_with_string(d):\n    '''\n    Write a function to return a list from a dictionary.\n    '''\n    return sorted(d.items(), key = lambda x: x[1])\n    \n    \ndef dict_to_sorted_list_by_value_all_with_key(d):\n    '''\n    Write a function to return a list from a dictionary.\n    '''\n    return sorted(d.items(), key = lambda x: x[1])\n    \n    \ndef dict_to_sorted_list_by_value_all_with_key_with_string(d):\n    '''\n    Write a function to return a list from a dictionary.\n    '''\n    return sorted(d.items(), key = lambda x: x[1])\n    \n    \ndef dict_to_sorted_list_by_value_all_with_key_with_string_and_string_value(d):\n    '''\n    Write a function to return a list from a dictionary.\n    '''\n    return sorted(d.items(), key = lambda x: x[1])\n    \n    \ndef sorted_list_to_dict(l):\n    '''\n    Write a function to return a dictionary from a list of tuples.\n    '''\n    return dict(l)\n    \n    \ndef sorted_list_to_dict_all(l):\n    '''\n    Write a function to return a dictionary from a list of tuples.\n    '''\n    return dict(l)\n    \n    \ndef sorted_list_to_dict_with_string(l):\n    '''\n    Write a function to return a dictionary from a list of tuples.\n    '''\n    return dict(l)\n    \n    \ndef sorted_list_to_dict_with_string_all(l):\n    '''\n    Write a function to return a dictionary from a list of tuples.\n    '''\n    return dict(l)\n    \n    \ndef sorted_list_to_dict_with_string_and_string_value(l):\n    '''\n    Write a function to return a dictionary from a list of tuples.\n    '''\n    return dict(l)\n    \n    \ndef sorted_list_to_dict_with_string_and_string_value_all(l):\n    '''\n    Write a function to return a dictionary from a list of tuples.\n    '''\n    return dict(l)\n    \n    \ndef sorted_list_to_dict_with_string_and_string_value_all_with_key(l):\n    '''\n    Write a function to return a dictionary from a list of tuples.\n    '''\n    return dict(l)\n    \n    \ndef sorted_list_to_dict_with_string_and_string_value_all_with_key_all(l):\n    '''\n    Write a function to return a dictionary from a list of tuples.\n    '''\n    return dict(l)\n    \n    \ndef sorted_list_to_dict_with_string_and_string_value_all_with_string_and_string_value(l):\n    '''\n    Write a function to return a dictionary from a list of tuples.\n    '''\n    return dict(l)\n    \n    \ndef sorted_list_to_dict_with_string_and_string_value_all_with_string_and_string_value_all(l):\n    '''\n    Write a function to return a dictionary from a list of tuples.\n    '''\n    return dict(l)\n    \n    \ndef sorted_list_to_dict_with_string_and_string_value_all_with_string_and_string_value_all_with_key(l):\n    '''\n    Write a function to return a dictionary from a list of tuples.\n    '''\n    return dict(l)\n    \n    \ndef sorted_list_to_dict_with_string_and_string_value_all_with_string_and_string_value_all_with_key_all(l):\n    '''\n    Write a function to return a dictionary from a list of tuples.\n    '''\n    return dict(l)\n    \n    \ndef sorted_list_to_dict_with_string_and_string_value_all_with_string_and_string_value_all_with_key_all_with_string_and_string_value(l):\n    '''\n    Write a function to return a dictionary from a list of tuples.\n    '''\n    return dict(l)\n    \n    \ndef sorted_list_to_dict_with_string_and_string_value_all_with_string_and_strin",
        "num_ids": 42
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div_list = []\n    for i in range(len(nums1)):\n        div_list.append(nums1[i]//nums2[i])\n    return div_list\n",
        "num_ids": 50
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    a = test_str.split(\" \")\n    b = \"\"\n    for i in a:\n        if i.isnumeric():\n            b += \" \" + i\n        else:\n            b += i\n    return b\n",
        "num_ids": 56
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    list_num = []\n    list_str = list(test_str)\n    for i in range(len(test_str)):\n        if list_str[i].isdigit():\n            list_num.append(list_str[i])\n    while list_num[-1] == 0:\n        list_num.pop()\n    for i in range(len(list_str)):\n        if list_str[i].isdigit() == False:\n            list_str[i], list_str[i + 1] = list_str[i + 1], list_str[i]\n            list_str[i + 1] = '0'\n    return ''.join(list_str)\n",
        "num_ids": 169
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_array = []\n    for ch in test_str:\n        if ch.isnumeric():\n            num_array.append(ch)\n    num_array.sort(reverse=True)\n    \n    for i, ch in enumerate(test_str):\n        if ch.isnumeric():\n            new_string = num_array.pop() + test_str[i:]\n            return test_str[:i] + new_string\n",
        "num_ids": 107
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # replace all numbers with'' in the string\n    # replace the leading numbers with '1' and the rest with '0'\n    # return the string\n",
        "num_ids": 37
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    char_list = list(test_str)\n    num_list = []\n    for i in range(len(char_list)):\n        if char_list[i].isnumeric():\n            num_list.append(char_list[i])\n    for i in range(len(num_list)):\n        char_list.remove(num_list[i])\n    char_list.extend(num_list)\n    return \"\".join(char_list)\n",
        "num_ids": 114
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if test_str == '':\n        return ''\n    numbers = []\n    for i in range(len(test_str)):\n        if test_str[i] in '0123456789':\n            numbers.append(test_str[i])\n    for i in range(len(numbers)):\n        test_str = test_str.replace(numbers[i], '')\n    return test_str + ''.join(numbers)\n",
        "num_ids": 111
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = ''\n    for i in test_str:\n        if i.isnumeric():\n            new_str += i\n        else:\n            new_str +=''\n    return new_str\n",
        "num_ids": 51
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_set = set([str(n) for n in range(10)])\n    str_lst = list(test_str)\n    for num in num_set:\n        if num in str_lst:\n            str_lst.remove(num)\n            str_lst.append(num)\n    return ''.join(str_lst)\n",
        "num_ids": 88
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    list_1 = []\n    new_str = ''\n    list_1 = list(test_str)\n",
        "num_ids": 28
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if len(test_str) < 2:\n        return test_str\n    for index, char in enumerate(test_str[1:]):\n        if test_str[index] in '1234567890':\n            test_str = test_str[:index] + test_str[index + 1:]\n    return test_str\n",
        "num_ids": 81
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Base case\n    if len(a) == 1:\n        return 1\n",
        "num_ids": 21
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    #Solution 1: sorting, O(n*log(n))\n    n = len(a)\n    a.sort()\n    for i in range(n-2):\n        if a[i]%2!= 0:\n            if a[i+1]%2!= 0:\n                if a[i+2]%2!= 0:\n                    return 1\n    #Solution 2: brute force: O(n^2)\n    #n = len(a)\n    #for i in range(n-2):\n    #    for j in range(i+1, n-1):\n    #        if a[i]%2!= 0 and a[j]%2!= 0:\n    #            if a[i+1]%2!= 0 and a[j+1]%2!= 0:\n    #                if a[i+2]%2!= 0 and a[j+2]%2!= 0:\n    #                    return 1\n    #Solution 3: sorting, O(n*log(n))\n    n = len(a)\n    a.sort()\n    if a[0] % 2!= 0:\n        return 1\n    for i in range(n-2):\n        if a[i]%2!= 0:\n            if a[i+1]%2!= 0:\n                if a[i+2]%2!= 0:\n                    return 2\n    #Solution 4: sorting, O(n*log(n))\n    n = len(a)\n    a.sort()\n    if a[0] % 2!= 0:\n        return 1\n    if a[-1] % 2!= 0:\n        return 2\n    if a[-2] % 2!= 0:\n        return 3\n    for i in range(n-3, 0, -1):\n        if a[i]%2!= 0:\n            if a[i+1]%2!= 0:\n                if a[i+2]%2!= 0:\n                    if a[i+3]%2!= 0:\n                        return 4\n    return 5\n",
        "num_ids": 502
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # First of all we need to find the largest divisor\n    # This is a simple one. We have to find a divisor first so that\n    # 1,2,4,8,16,32 are divisible by that number.\n    # Then we need to find the largest divisor in that list\n    # and remove that number from our set of numbers\n    # We can start with just 1,2,4,8,16,32\n    # we need to find a largest divisor of 1,2,4,8,16,32\n    # Then we need to find the largest divisor of 1,2,4,8,16,32\n    # Then we need to remove 1,2,4,8,16,32 from the list\n    # Then we need to repeat the process with 1,2,4,8,16,32\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # Then we need to repeat the process with 1,2,4,8,16,32\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on...\n    # Then we need to repeat the process with 1,2,4,8,16,32\n    # Then we need to repeat the process with 1,2,4,8,16,32\n    # And so on...\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we need to repeat the process with 1,2,4,8,16,32\n    # And so on\n    # Now we nee",
        "num_ids": 2008
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    s = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if(a[i] % a[j] == 0):\n                s += 1\n    return s\n",
        "num_ids": 60
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    max_set = set()\n    for i in range(len(a)-1):\n        set1 = set(a[:i+1])\n        for j in range(i+1, len(a)):\n            if (j-i+1)%2 == 0 and len(set1.intersection(set(a[i+1:j]))) > 0:\n                max_set.add(tuple(sorted(set1.union(set(a[i+1:j])))))\n            if (j-i+1)%2 == 1 and len(set1.intersection(set(a[i+1:j]))) > 0:\n                max_set.add(tuple(sorted(set1.union(set(a[i+1:j])))))\n    return max(max_set, key=len)\n",
        "num_ids": 208
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sort list\n    #iterate through list, if a divisor of two elements\n    # append to set\n    # return set\n    s = set()\n    l = sorted(a)\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] % l[j] == 0:\n                s.add(l[i])\n    return len(s)\n",
        "num_ids": 108
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a)\n    def check(a):\n        n = len(a)\n        if n <= 1:\n            return n\n        temp = a[n//2]\n        if temp % 2 == 0:\n            return 2\n        if temp % 2 == 1:\n            return 1\n    def helper(a):\n        if a == 0:\n            return 0\n        if a == 1:\n            return 1\n        if a == 2:\n            return 2\n        if a == 3:\n            return 3\n        else:\n            return max(helper(a//2), helper(a//3), helper(a//4), helper(a//5), helper(a//6), helper(a//7), helper(a//8), helper(a//9))\n    if check(a) == 2:\n        return 2\n    if check(a) == 1:\n        return 1\n    if check(a) == 0:\n        return 0\n    return helper(len(a))\n",
        "num_ids": 232
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    if n==1: return 1\n    d = defaultdict(int)\n    d[a[0]] = 1\n    for i in range(1,n):\n        if a[i] % a[i-1] == 0:\n            d[a[i]] += d[a[i-1]]\n        else:\n            d[a[i]] += 1\n    return max(d.values())\n",
        "num_ids": 112
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 0:\n        return 0\n    elif len(a) == 1:\n        return 1\n    max_div_size = 0\n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            if a[i] % a[j] == 0 and a[i] / a[j] > max_div_size:\n                max_div_size = a[i] / a[j]\n    return max_div_size\n",
        "num_ids": 124
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    #set of elements from a\n    #set1 = set(a)\n    #print(a)\n    #print(set1)\n    #set2 = set(set1)\n    #print(set2)\n    set1 = set(a)\n    #print(set1)\n    set2 = set(set1)\n    #print(set2)\n    #print(set2)\n    set3 = set(set1)\n    #print(set3)\n    #set4 = set(set3)\n    #print(set4)\n    #set5 = set(set3)\n    #print(set5)\n    #set6 = set(set5)\n    #print(set6)\n    #set7 = set(set5)\n    #print(set7)\n    #set8 = set(set6)\n    #print(set8)\n    #set9 = set(set7)\n    #print(set9)\n    #set10 = set(set8)\n    #print(set10)\n    #set11 = set(set9)\n    #print(set11)\n    #set12 = set(set10)\n    #print(set12)\n    #set13 = set(set11)\n    #print(set13)\n    #set14 = set(set12)\n    #print(set14)\n    #set15 = set(set13)\n    #print(set15)\n    #set16 = set(set14)\n    #print(set16)\n    #set17 = set(set15)\n    #print(set17)\n    #set18 = set(set16)\n    #print(set18)\n    #set19 = set(set17)\n    #print(set19)\n    #set20 = set(set18)\n    #print(set20)\n    #set21 = set(set19)\n    #print(set21)\n    #set22 = set(set20)\n    #print(set22)\n    #set23 = set(set21)\n    #print(set23)\n    #set24 = set(set22)\n    #print(set24)\n    #set25 = set(set23)\n    #print(set25)\n    #set26 = set(set24)\n    #print(set26)\n    #set27 = set(set25)\n    #print(set27)\n    #set28 = set(set26)\n    #print(set28)\n    #set29 = set(set27)\n    #print(set29)\n    #set30 = set(set28)\n    #print(set30)\n    #set31 = set(set29)\n    #print(set31)\n    #set32 = set(set30)\n    #print(set32)\n    #set33 = set(set31)\n    #print(set33)\n    #set34 = set(set32)\n    #print(set34)\n    #set35 = set(set33)\n    #print(set35)\n    #set36 = set(set34)\n    #print(set36)\n    #set37 = set(set35)\n    #print(set37)\n    #set38 = set(set36)\n    #print(set38)\n    #set39 = set(set37)\n    #print(set39)\n    #set40 = set(set38)\n    #print(set40)\n    #set41 = set(set39)\n    #print(set41)\n    #set42 = set(set40)\n    #print(set42)\n    #set43 = set(set41)\n    #print(set43)\n    #set44 = set(set42)\n    #print(set44)\n    #set45 = set(set43)\n    #print(set45)\n    #set46 = set(set44)\n    #print(set46)\n    #set47 = set(set45)\n    #print(set47)\n    #set48 = set(set46)\n    #print(set48)\n    #set49 = set(set47)\n    #print(set49)\n    #set50 = set(set48)\n    #print(set50)\n    #set51 = set(set49)\n    #print(set51)\n    #set52 = set(set50)\n    #print(set52)\n    #set53 = set(set51)\n    #print(set53)\n    #set54 = set(set52)\n    #print(set54)\n    #set55 = set(set53)\n    #print(set55)\n    #set56 = set(set54)\n    #print(set56)\n    #set57 = set(set55)\n    #print(set57)\n    #set58 = set(set56)\n    #print(set58)\n    #set59 = set(set57)\n    #print(set59)\n    #set60 = set(set58)\n    #print(set60)\n    #set61 = set(set59)\n    #print(set61)\n    #set62 = set(set60)\n    #print(set62)\n    #set63 = set(set61)\n    #print(set63)\n    #set64 = set(set62)\n    #print(set64)\n    #set65 = set(set63)\n    #print(set65)\n    #set66 = set(set64)\n    #print(set66)\n    #set67 = set(set65)\n    #print(set67)\n    #set68 = set(set66)\n    #print(set68)\n    #set69 = set(set67)\n    #print(set69)\n    #set70 = set(set68)\n    #print(set70)\n    #set71 = set(set69)\n    #print(set71)\n    #set72 = set(set70)\n    #print(set72)\n    #set73 = set(set71)\n    #print(set73)\n    #set74 = set(set72)\n    #print(set74)\n    #set75 = set(set73)\n    #print(set75)\n    #set76 = set(set74)\n    #print(set76)\n    #set77 = set(set75)\n    #print(set77)\n    #set78 = set(set76)\n    #print(set78)\n    #set79 = set(set77)\n    #print(set79)\n    #set80 = set(set78)\n    #print(set80)\n    #set81 = set(set79)\n    #print(set81)\n    #set82 = set(set80)\n    #print(set82)\n    #set83 = set(set81)\n    #print(set83)\n    #set84 = set(set82)\n    #print(set84)\n    #set85 = set(set83)\n    #print(set85)\n    #set86 = set(set84)\n    #print(set86)\n    #set87 = set(set85)\n    #print(set87)\n    #set88 = set(set86)\n    #print(set88)\n    #set89 = set(set87)\n    #print(set89)\n    #set90 = set(set88)\n    #print(set90)\n    #set91 = set(set89)\n    #print(set91)\n    #set92 = set(set90)\n    #print(set92)\n    #set93 = set(set91)\n    #print(set93)\n    #set94 = set(set92)\n    #print(set94)\n    #set95 = set(set93)\n    #print(set95)\n    #set96 = set(set94)\n    #print(set96)\n    #set97 = set(set95)\n    #print(set97)\n    #set98 = set(set96)\n    #print(set98)\n    #set99 = set(set97)\n    #print(set99)\n    #set100 = set(set98)\n    #print(set100)\n    #set101 = set(set99)\n    #print(set101)\n    #set102 = set(set100)\n    #print(set102)\n    #set103 = set(set101)",
        "num_ids": 2006
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) == len(arr2):\n        arr_merged = arr1 + arr2\n        arr_merged.sort()\n        return arr_merged[n//2]\n    else:\n        return 'Error'\n        \n",
        "num_ids": 61
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n%2==0:\n        if arr1[n//2]>arr2[n//2]:\n            return arr2[n//2]\n        else:\n            return arr1[n//2]\n    else:\n        return max(arr1[n//2],arr2[n//2])\n",
        "num_ids": 76
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Edge case\n    if n == 1:\n        return min(arr1)\n    # Get the size of each array\n    m = len(arr1)\n    n = len(arr2)\n    # If the length of both arrays are the same then return the median of the two\n    if m == n:\n        return (arr1[m//2] + arr2[m//2])/2\n    # If only one of the array is smaller than half of the other\n    elif m < n:\n        for i in range(m):\n            if arr1[i] < arr2[n//2]:\n                arr1[i], arr2[n//2] = arr2[n//2], arr1[i]\n                break\n        return get_median(arr1, arr2, n)\n    # If only one of the array is bigger than half of the other\n    else:\n        for i in range(n):\n            if arr2[i] < arr1[m//2]:\n                arr1[i], arr2[m//2] = arr2[m//2], arr1[i]\n                break\n        return get_median(arr1, arr2, m)\n",
        "num_ids": 282
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = j = 0\n    k = len(arr1) + len(arr2)\n    while i<len(arr1) and j<len(arr2):\n        if arr1[i] < arr2[j]:\n            k -= 1\n            i += 1\n        else:\n            k -= 1\n            j += 1\n    if i == len(arr1):\n        k -= len(arr2)\n        j = j + len(arr2)\n    if j == len(arr2):\n        k -= len(arr1)\n        i = i + len(arr1)\n    if k == 0:\n        print(arr1[i], arr2[j])\n    if k % 2 == 0:\n        print((arr1[i] + arr2[j])/2)\n    else:\n        print((max(arr1[i], arr2[j])+min(arr1[i], arr2[j]))/2)\n",
        "num_ids": 225
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    l1 = arr1.copy()\n    l2 = arr2.copy()\n    l1.sort()\n    l2.sort()\n",
        "num_ids": 36
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = []\n    # print(\"n: \", n)\n    for i in range(n):\n        arr.append(arr1[i])\n        arr.append(arr2[i])\n    arr.sort()\n    arr.append(arr1[n])\n    arr.append(arr2[n])\n    return arr[(n*2)+1]\n",
        "num_ids": 88
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    median = 0\n    if n % 2 == 1:\n        return median\n    elif n % 2 == 0:\n        for i in range(n//2):\n            median += arr1[i]\n        median += arr1[n//2]\n        return median/2\n",
        "num_ids": 70
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    sorted_list = merge(arr1, arr2)\n    return find_median(sorted_list)\n    \ndef find_median(arr):\n    \"\"\"\n    Finds the median of a list of values\n    \"\"\"\n    return (len(arr))//2\n",
        "num_ids": 68
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    n1=len(arr1)\n    n2=len(arr2)\n    arr1.sort()\n    arr2.sort()\n    if n1==n2:\n        return 0\n    if n==n1:\n        return (arr1[n//2]+arr2[n//2])//2\n    if n==n2:\n        return (arr1[n//2]+arr2[n//2]+1)//2\n    if n==1:\n        return arr1[0]\n    if n==2:\n        return (arr1[0]+arr2[0])//2\n    if n==3:\n        return (arr1[0]+arr2[1]+arr2[2]+arr1[1])//2\n    if n==4:\n        return (arr1[0]+arr2[1]+arr2[2]+arr1[2]+arr1[3]+arr2[3]+arr1[4]+arr2[4])//2\n",
        "num_ids": 231
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # finding middle element\n    mid = n // 2\n    if n % 2 == 0:\n        return (arr1[mid] + arr2[mid]) / 2\n    else:\n        return arr1[mid]\n",
        "num_ids": 53
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    assert n > 0, 'n should be a positive number'\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums\n",
        "num_ids": 50
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    def power(num):\n        return num**n\n    return map(power,nums)\n",
        "num_ids": 25
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**n\n    return nums\n",
        "num_ids": 35
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    i = 0\n    for i in nums:\n        i = i**n\n    print(nums)\n",
        "num_ids": 29
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums_powers = []\n    for num in nums:\n        nums_powers.append(num ** n)\n    return nums_powers\n",
        "num_ids": 38
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    pow_list = []\n    for i in range(len(nums)):\n        pow_list.append(pow(nums[i],n))\n    return pow_list\n",
        "num_ids": 48
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if nums == []:\n        return []\n    if n == 0:\n        return [1]\n    if n == 1:\n        return nums\n    if n == 2:\n        return [x*y for x,y in zip(nums,nums)]\n    if n > 2:\n        return nth_nums(nums[1:],n-1) + nums[0:1]\n",
        "num_ids": 100
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums = np.array(nums)\n    return nums**n\n",
        "num_ids": 21
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i**n)\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    assert type(n) == int and n >= 0\n    \n    result = []\n    for i in nums:\n        result.append(i**n)\n    \n    return result\n",
        "num_ids": 46
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if isinstance(string, str):\n        return string.upper()\n    else:\n        raise TypeError(\"Invalid input\")\n",
        "num_ids": 32
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    \ndef remove_spaces(string):\n    '''\n    Write a python function to remove leading and trailing spaces in a given string.\n    '''\n    return string.strip()\n    \ndef remove_trailing_spaces(string):\n    '''\n    Write a python function to remove trailing spaces in a given string.\n    '''\n    return string.strip(\" \")\n    \ndef remove_first_and_last_characters(string):\n    '''\n    Write a python function to remove characters at the beginning and at the end of a given string.\n    '''\n    return string.strip(string[0], string[-1])\n    \ndef get_characters_count(string):\n    '''\n    Write a python function to count the occurrence of each character in a given string.\n    '''\n    return {char:string.count(char) for char in string}\n    \ndef find_string(string, sub_string):\n    '''\n    Write a python function to find a given substring in a given string.\n    '''\n    return string.find(sub_string)\n    \ndef reverse_string(string):\n    '''\n    Write a python function to reverse the string.\n    '''\n    return string[::-1]\n    \ndef split_string(string, delimiter):\n    '''\n    Write a python function to split a given string using a delimiter.\n    '''\n    return string.split(delimiter)\n    \ndef swap_case(string):\n    '''\n    Write a python function to swap case of a given string.\n    '''\n    return string.swapcase()\n    \ndef is_palindrome(string):\n    '''\n    Write a python function to check if a string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef remove_key_from_dictionary(dictionary, key):\n    '''\n    Write a python function to remove a given key from a dictionary.\n    '''\n    return {key:dictionary[key] for key in dictionary if key!= key}\n    \ndef convert_string_to_list(string):\n    '''\n    Write a python function to convert a string to a list.\n    '''\n    return string.split()\n    \ndef find_first_index(string, sub_string):\n    '''\n    Write a python function to find the first index of a given substring in a given string.\n    '''\n    return string.find(sub_string)\n    \ndef length_of_longest_substring(string):\n    '''\n    Write a python function to find the length of the longest substring in a given string.\n    '''\n    return {string.index(sub_string):string.index(sub_string)+len(sub_string) for sub_string in set(string)}\n    \ndef rotate_left(string, steps):\n    '''\n    Write a python function to rotate the given string left by given amount of steps.\n    '''\n    return string[-steps:] + string[:-steps]\n    \ndef rotate_right(string, steps):\n    '''\n    Write a python function to rotate the given string right by given amount of steps.\n    '''\n    return string[steps:] + string[:steps]\n    \ndef is_rotation(string1, string2):\n    '''\n    Write a python function to check if a given strings are rotation of each other.\n    '''\n    return string1 == rotate_left(string2, len(string1))\n    \ndef merge_the_tools(string, k):\n    '''\n    Write a python function to merge the given string using given number of tools.\n    '''\n    for i in range(0,len(string),k):\n        print(\"\".join(string[i:i+k]))\n    \ndef is_palindrome2(string):\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef is_palindrome3(string):\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef is_palindrome4(string):\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef count_odd_numbers(numbers):\n    '''\n    Write a python function to count the number of odd numbers in a given string.\n    '''\n    return {len(list(filter(lambda x:x%2!= 0, numbers))):len(list(filter(lambda x:x%2 == 0, numbers)))}\n    \ndef is_odd(number):\n    '''\n    Write a python function to find out if a given number is odd or even.\n    '''\n    return number%2!= 0\n    \ndef get_median(numbers):\n    '''\n    Write a python function to get the median of a given list of numbers.\n    '''\n    return {len(numbers)//2:sorted(numbers)[(len(numbers)//2)]}\n    \ndef reverse_words_order_in_a_sentence(sentence):\n    '''\n    Write a python function to reverse the words order in a given sentence.\n    '''\n    return \" \".join([word[::-1] if not word[0].isupper() else word for word in sentence.split(\" \")])\n    \ndef is_prime_number(number):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    return number > 1 and all(number%i!= 0 for i in range(2, number))\n    \ndef find_longest_palindromic_substring(string):\n    '''\n    Write a python function to find the longest palindromic substring in a given string.\n    '''\n    return {string.index(sub_string):string.index(sub_string)+len(sub_string) for sub_string in set(string) if len(sub_string) == len(set(string)) and string == string[::-1]}\n    \ndef has_hundreds_digits(number):\n    '''\n    Write a python function to check if a given number is a hundreds digit number.\n    '''\n    return number >= 100 and number <= 999\n    \ndef find_first_occurrence(number, array):\n    '''\n    Write a python function to find the first occurrence of a given number in a given array.\n    '''\n    return {number:array.index(number) if number in array else -1}\n    \ndef get_number_of_consistent_divisors(number):\n    '''\n    Write a python function to find the number of divisors of a given number.\n    '''\n    return {number:sum([i for i in range(2, number) if number%i == 0])}\n    \ndef find_first_prime_number_greater_than_or_equal_to_number(number):\n    '''\n    Write a python function to find the first prime number greater than or equal to a given number.\n    '''\n    return {i:number for i in range(2, number+1) if is_prime_number(i)}\n    \ndef two_strings_are_anagrams(string1, string2):\n    '''\n    Write a python function to find if two strings are anagrams or not.\n    '''\n    return {string1:sorted(string1), string2:sorted(string2)}\n    \ndef is_palindrome2(string):\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef is_palindrome3(string):\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef is_palindrome4(string):\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '''\n    return string == string[::-1]\n    \ndef is_palindrome5(string):\n    '''\n    Write a python function to check if a given string is a palindrome.\n    '",
        "num_ids": 22
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    \n",
        "num_ids": 11
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper_string = ''\n    for i in string:\n        if i.isupper():\n            upper_string += i\n    return upper_string\n",
        "num_ids": 37
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    for i in range(length):\n        temp = newList[i]\n        newList[i] = newList[length - 1]\n        newList[length - 1] = temp\n    print(newList)\n    return newList\n",
        "num_ids": 67
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.pop(len(newList)-1)\n    newList.pop(0)\n    return newList\n",
        "num_ids": 30
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    first = newList[0]\n    last = newList[length-1]\n    newList[0] = last\n    newList[length-1] = first\n    return newList\n",
        "num_ids": 56
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    i = 0\n    j = -1\n    while(j < i):\n        if(newList[i] > newList[j]):\n            temp = newList[i]\n            newList[i] = newList[j]\n            newList[j] = temp\n        i += 1\n        j -= 1\n    print(newList)\n",
        "num_ids": 85
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #start writing your code here\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n",
        "num_ids": 39
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) <= 2:\n        return newList\n    return newList[-1:] + newList[1:-1] + newList[0:1]\n",
        "num_ids": 43
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    if length > 0:\n        newList[length-1], newList[0] = newList[0], newList[length-1]\n    return newList\n    #Remove pass and write your logic here\n",
        "num_ids": 60
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList.pop(0)\n    newList.pop(-1)\n    newList.insert(0,newList[-1])\n    newList.insert(-1,newList[0])\n    return newList\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2013
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    i = 0\n    j = len(newList) - 1\n    while i < j:\n        newList[i], newList[j] = newList[j], newList[i]\n        i += 1\n        j -= 1\n",
        "num_ids": 58
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    l = newList[:]\n    l[0],l[-1]=l[-1],l[0]\n    return l\n",
        "num_ids": 34
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n",
        "num_ids": 6
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    for i in range(1,1000):\n        if (i*i)>=2*r:\n            return ((i*i)*math.sqrt(1-((1-i)/r)**2))/2\n    \nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 3 = \",triangle_area(3))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 7 = \",triangle_area(7))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 8 = \",triangle_area(8))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 9 = \",triangle_area(9))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 10 = \",triangle_area(10))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 12 = \",triangle_area(12))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 15 = \",triangle_area(15))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 18 = \",triangle_area(18))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 19 = \",triangle_area(19))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 20 = \",triangle_area(20))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 24 = \",triangle_area(24))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 30 = \",triangle_area(30))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 40 = \",triangle_area(40))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 60 = \",triangle_area(60))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 120 = \",triangle_area(120))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 180 = \",triangle_area(180))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 240 = \",triangle_area(240))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 300 = \",triangle_area(300))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 720 = \",triangle_area(720))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 1200 = \",triangle_area(1200))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 1800 = \",triangle_area(1800))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 3600 = \",triangle_area(3600))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 4800 = \",triangle_area(4800))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 6000 = \",triangle_area(6000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 9000 = \",triangle_area(9000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 12000 = \",triangle_area(12000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 18000 = \",triangle_area(18000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 25000 = \",triangle_area(25000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 30000 = \",triangle_area(30000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 35000 = \",triangle_area(35000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 40000 = \",triangle_area(40000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 50000 = \",triangle_area(50000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 60000 = \",triangle_area(60000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 75000 = \",triangle_area(75000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 80000 = \",triangle_area(80000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 100000 = \",triangle_area(100000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 120000 = \",triangle_area(120000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 150000 = \",triangle_area(150000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 200000 = \",triangle_area(200000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 250000 = \",triangle_area(250000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 300000 = \",triangle_area(300000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 350000 = \",triangle_area(350000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 40000 = \",triangle_area(40000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 50000 = \",triangle_area(50000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 60000 = \",triangle_area(60000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 70000 = \",triangle_area(70000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 80000 = \",triangle_area(80000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 100000 = \",triangle_area(100000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 120000 = \",triangle_area(120000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 150000 = \",triangle_area(150000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 200000 = \",triangle_area(200000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 250000 = \",triangle_area(250000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 300000 = \",triangle_area(300000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 350000 = \",triangle_area(350000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 40000 = \",triangle_area(40000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 50000 = \",triangle_area(50000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 60000 = \",triangle_area(60000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 70000 = \",triangle_area(70000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 80000 = \",triangle_area(80000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 100000 = \",triangle_area(100000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 120000 = \",triangle_area(120000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 150000 = \",triangle_area(150000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 200000 = \",triangle_area(200000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 250000 = \",triangle_area(250000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 300000 = \",triangle_area(300000))\nprint(\"Area of the largest triangle inscribed in a semicircle with a radius of 350000 = \",triangle_area(350000))\nprint(\"Area of the largest triangle inscribed i",
        "num_ids": 2001
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #Solutions\n    return 1/3 * r**2 * math.sin(math.pi/3)\n",
        "num_ids": 28
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    from math import pi\n",
        "num_ids": 12
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    radius = r\n    A = radius * radius * 3.141592\n    return A\n",
        "num_ids": 24
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # getting the base and height of the triangle\n    x = r * 2\n    y = r * 2\n    # calculate the area of the circle\n    area = pi * x * y\n    print(\"The area of the circle is: \", area)\n    # calculate the area of the triangle\n    area = 0.5 * x * y\n    print(\"The area of the triangle is: \", area)\n    # calculate the area of the triangle\n    area = 0.5 * x * y / 2\n    print(\"The area of the triangle is: \", area)\n",
        "num_ids": 129
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r < 0 :\n        raise ValueError(\"Radius should be a positive number\")\n    if r == 0 :\n        raise ValueError(\"Radius should be a positive number\")\n    if r == 1 :\n        raise ValueError(\"Radius should be a positive number\")\n    a = math.sqrt(3)*r**2/2\n    return a\n",
        "num_ids": 85
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #Input radius\n    r = float(input(\"Enter radius of the circle : \"))\n    #Calculate area of the triangle\n    area_triangle = 0.5*r**2*math.sin(math.pi/3)\n    print(\"Area of the triangle inscribed in the circle with given radius is : \",area_triangle)\n",
        "num_ids": 81
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # ***********\n    # Segment 1\n    # ***********\n    from math import pi\n    x_seg = (r/pi) * (3/2)\n    area_seg1 = 3 * (r**2) / 2\n    \n    # ***********\n    # Segment 2\n    # ***********\n    x_seg2 = (r/pi) * (7/2)\n    area_seg2 = 7 * (r**2) / 2\n    \n    # ***********\n    # Segment 3\n    # ***********\n    x_seg3 = (r/pi) * (11/2)\n    area_seg3 = 11 * (r**2) / 2\n    \n    # ***********\n    # Segment 4\n    # ***********\n    x_seg4 = (r/pi) * (13/2)\n    area_seg4 = 13 * (r**2) / 2\n    \n    # ***********\n    # Segment 5\n    # ***********\n    x_seg5 = (r/pi) * (17/2)\n    area_seg5 = 17 * (r**2) / 2\n    \n    # ***********\n    # Segment 6\n    # ***********\n    x_seg6 = (r/pi) * (19/2)\n    area_seg6 = 19 * (r**2) / 2\n    \n    # ***********\n    # Segment 7\n    # ***********\n    x_seg7 = (r/pi) * (23/2)\n    area_seg7 = 23 * (r**2) / 2\n    \n    # ***********\n    # Segment 8\n    # ***********\n    x_seg8 = (r/pi) * (27/2)\n    area_seg8 = 27 * (r**2) / 2\n    \n    # ***********\n    # Segment 9\n    # ***********\n    x_seg9 = (r/pi) * (31/2)\n    area_seg9 = 31 * (r**2) / 2\n    \n    # ***********\n    # Segment 10\n    # ***********\n    x_seg10 = (r/pi) * (37/2)\n    area_seg10 = 37 * (r**2) / 2\n    \n    # ***********\n    # Segment 11\n    # ***********\n    x_seg11 = (r/pi) * (43/2)\n    area_seg11 = 43 * (r**2) / 2\n    \n    # ***********\n    # Segment 12\n    # ***********\n    x_seg12 = (r/pi) * (47/2)\n    area_seg12 = 47 * (r**2) / 2\n    \n    # ***********\n    # Segment 13\n    # ***********\n    x_seg13 = (r/pi) * (53/2)\n    area_seg13 = 53 * (r**2) / 2\n    \n    # ***********\n    # Segment 14\n    # ***********\n    x_seg14 = (r/pi) * (59/2)\n    area_seg14 = 59 * (r**2) / 2\n    \n    # ***********\n    # Segment 15\n    # ***********\n    x_seg15 = (r/pi) * (65/2)\n    area_seg15 = 65 * (r**2) / 2\n    \n    # ***********\n    # Segment 16\n    # ***********\n    x_seg16 = (r/pi) * (71/2)\n    area_seg16 = 71 * (r**2) / 2\n    \n    # ***********\n    # Segment 17\n    # ***********\n    x_seg17 = (r/pi) * (77/2)\n    area_seg17 = 77 * (r**2) / 2\n    \n    # ***********\n    # Segment 18\n    # ***********\n    x_seg18 = (r/pi) * (83/2)\n    area_seg18 = 83 * (r**2) / 2\n    \n    # ***********\n    # Segment 19\n    # ***********\n    x_seg19 = (r/pi) * (87/2)\n    area_seg19 = 87 * (r**2) / 2\n    \n    # ***********\n    # Segment 20\n    # ***********\n    x_seg20 = (r/pi) * (93/2)\n    area_seg20 = 93 * (r**2) / 2\n    \n    # ***********\n    # Segment 21\n    # ***********\n    x_seg21 = (r/pi) * (97/2)\n    area_seg21 = 97 * (r**2) / 2\n    \n    # ***********\n    # Segment 22\n    # ***********\n    x_seg22 = (r/pi) * (103/2)\n    area_seg22 = 103 * (r**2) / 2\n    \n    # ***********\n    # Segment 23\n    # ***********\n    x_seg23 = (r/pi) * (107/2)\n    area_seg23 = 107 * (r**2) / 2\n    \n    # ***********\n    # Segment 24\n    # ***********\n    x_seg24 = (r/pi) * (113/2)\n    area_seg24 = 113 * (r**2) / 2\n    \n    # ***********\n    # Segment 25\n    # ***********\n    x_seg25 = (r/pi) * (117/2)\n    area_seg25 = 117 * (r**2) / 2\n    \n    # ***********\n    # Segment 26\n    # ***********\n    x_seg26 = (r/pi) * (123/2)\n    area_seg26 = 123 * (r**2) / 2\n    \n    # ***********\n    # Segment 27\n    # ***********\n    x_seg27 = (r/pi) * (127/2)\n    area_seg27 = 127 * (r**2) / 2\n    \n    # ***********\n    # Segment 28\n    # ***********\n    x_seg28 = (r/pi) * (133/2)\n    area_seg28 = 133 * (r**2) / 2\n    \n    # ***********\n    # Segment 29\n    # ***********\n    x_seg29 = (r/pi) * (137/2)\n    area_seg29 = 137 * (r**2) / 2\n    \n    # ***********\n    # Segment 30\n    # ***********\n    x_seg30 = (r/pi) * (143/2)\n    area_seg30 = 143 * (r**2) / 2\n    \n    # ***********\n    # Segment 31\n    # ***********\n    x_seg31 = (r/pi) * (147/2)\n    area_seg31 = 147 * (r**2) / 2\n    \n    # ***********\n    # Segment 32\n    # ***********\n    x_seg32 = (r/pi) * (153/2)\n    area_seg32 = 153 * (r**2) / 2\n    \n    # ***********\n    # Segment 33\n    # ***********\n    x_seg33 = (r/pi) * (157/2)\n    area_seg33 = 157 * (r**2) / 2\n    \n    # ***********\n    # Segment 34\n    # ***********\n    x_seg34 = (r/pi) * (163/2)\n    area_seg34 = 163 * (r**2) / 2\n    \n    # ***********\n    # Segment 35\n    # ***********\n    x_seg35 = (r/pi) * (167/2)\n    area_seg35 = 167 * (r**2) / 2\n    \n    # ***********\n    # Segment 36\n    # ***********\n    x_seg36 = (r/pi) * (173/2)",
        "num_ids": 2003
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def triangle_area(r) : \n    # Calculate the area of the largest triangle that can be inscribed in a semicircle with a given radius\n    #  (using the formula)\n    # Area = 0.5 * \u03c0 * r2;\n    area = 0.5 * 3.14159 * r ** 2\n    return area \n",
        "num_ids": 82
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # initialize\n    start=0\n    end=len(array)-1\n    if end<=start:\n        return start\n    while start<end:\n        mid=(start+end)//2\n        if array[mid]==mid:\n            start=mid+1\n        else:\n            end=mid\n    return start\n    \nif __name__=='__main__':\n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 3\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 2\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 5\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 7\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 8\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 9\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 10\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 11\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 12\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 13\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 14\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 15\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 16\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 17\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 18\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 19\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 20\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 21\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 22\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 23\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 24\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 25\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 26\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 27\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 28\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 29\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 30\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 31\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 32\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 33\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 34\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 35\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 36\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 37\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 38\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 39\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 40\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 41\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 42\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 43\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    print(find_First_Missing(array))\n    \n    # Output: 44\n    \n    array=[1,2,3,4,5,6,7,8,9,10]\n    prin",
        "num_ids": 2005
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    for i in range(start,end):\n        if i!= array[i]:\n            return i\n    return end+1\n",
        "num_ids": 48
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if start == end:\n        if start!= array[start]:\n            return array[start]\n        else:\n            return array[start+1]\n    elif start < end:\n        mid = (start + end)//2\n        if array[mid] == mid:\n            return find_First_Missing(array,mid+1,end)\n        else:\n            return find_First_Missing(array,start,mid)\n    else:\n        return end\n",
        "num_ids": 112
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if start==0:\n        start=1\n    \n    for i in range(start,end):\n        if array[i]!=i+1:\n            return i+1\n    return end+1\n",
        "num_ids": 67
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start > end:\n        return None\n    for i in range(start,end):\n        if i!=array[i]:\n            return i\n    return end\n",
        "num_ids": 57
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start>end:\n        return -1\n    \n    while start<end:\n        mid = (start+end)//2\n        if array[mid]==mid:\n            start = mid+1\n        else:\n            end = mid\n    return start\n",
        "num_ids": 79
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    for i in range(start,end):\n        if i!=array[i]:\n            return i\n    return end+1\nprint(find_First_Missing([2,2,4]))\nprint(find_First_Missing([2,2,5]))\nprint(find_First_Missing([1,3,2,5]))\n",
        "num_ids": 98
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # raise NotImplementedError\n    if end is None:\n        end = len(array)\n",
        "num_ids": 26
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n",
        "num_ids": 19
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if start==end:\n        return start\n    elif end==None:\n        end=len(array)\n    elif start>end:\n        return None\n    if array[start]==start+1:\n        return start+1\n    elif array[start]>start:\n        return find_First_Missing(array,start+1,end)\n    elif array[start]==end:\n        return end+1\n    else:\n        return find_First_Missing(array,start+1,end)\n    \ndef find_Last_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if start==end:\n        return start\n    elif end==None:\n        end=len(array)\n    elif start>end:\n        return None\n    if array[start]==start-1:\n        return start-1\n    elif array[start]<start:\n        return find_Last_Missing(array,start+1,end)\n    elif array[start]==end:\n        return end-1\n    else:\n        return find_Last_Missing(array,start+1,end)\n    \ndef find_Range(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if start==end:\n        return start,start\n    elif end==None:\n        end=len(array)\n    elif start>end:\n        return None\n    if array[start]==start-1:\n        return start-1,start-1\n    elif array[start]<start:\n        return find_Range(array,start+1,end)\n    elif array[start]==end:\n        return end-1,end-1\n    else:\n        return find_Range(array,start+1,end)\n    \ndef find_Duplicates(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    duplicate_array=[]\n    for element in array:\n        if element in duplicate_array:\n            return element\n        else:\n            duplicate_array.append(element)\n    return None\n",
        "num_ids": 51
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(\" \", \"%20\")\n    return string\n",
        "num_ids": 18
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    \n    return string.replace(\" \", \"%20\")\n",
        "num_ids": 15
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n    \n    \n    \n    \n    \ndef string_compression(string):\n    '''\n    Write a function which compresses the given string.\n    '''\n    if not string:\n        return string\n    \n    compression_string = ''\n    prev_char = string[0]\n    count = 1\n    \n    for char in string[1:]:\n        if char == prev_char:\n            count += 1\n        else:\n            compression_string += prev_char + str(count)\n            prev_char = char\n            count = 1\n    \n    compression_string += prev_char + str(count)\n    \n    return compression_string if len(compression_string) < len(string) else string\n",
        "num_ids": 134
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "num_ids": 13
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    result = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            result.append(list[i])\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = [] \n    for x in list: \n        if x % 2 == 0: \n            even.append(x) \n    return even \n",
        "num_ids": 40
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    x = 0\n    odd = []\n    even = []\n    for i in list:\n        if i%2==0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even,odd\n",
        "num_ids": 59
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n    return even\n",
        "num_ids": 35
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    result = []\n    for i in range(len(list)):\n        if(list[i]%2==0):\n            result.append(list[i])\n    return result",
        "num_ids": 45
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even=[]\n    for i in list:\n        if i%2==0:\n            even.append(i)\n    return even\n",
        "num_ids": 35
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return(list[::2])\n",
        "num_ids": 11
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = list(filter(lambda x: (x%2 == 0), list))\n    return even_list\n",
        "num_ids": 30
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list = list.split(\" \")\n    list = list[0:len(list)-1]\n    for i in range(len(list)):\n        list[i] = int(list[i])\n    even = []\n    for i in range(len(list)):\n        if list[i]%2 == 0:\n            even.append(list[i])\n    print(\"Even numbers in list:\",even)\n",
        "num_ids": 102
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    count_even=0\n    even_list=[]\n    for num in list:\n        if num%2==0:\n            even_list.append(num)\n            count_even+=1\n    return even_list, count_even\n    \n",
        "num_ids": 61
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if(x - 1 >= 0): \n        sub.append((x - 1, y))\n    if(x + 1 < 8): \n        sub.append((x + 1, y))\n    if(y - 1 >= 0): \n        sub.append((x, y - 1))\n    if(y + 1 < 8): \n        sub.append((x, y + 1))\n    return sub\n",
        "num_ids": 105
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele == (0,0): return [(-1,0), (0,-1), (1,0), (0,1)]\n    else: return [[ele[0], ele[1] - 1], [ele[0], ele[1] + 1], [ele[0] - 1, ele[1]], [ele[0] + 1, ele[1]]]\n    \ndef change(lst, num):\n    '''\n    Write a function to change a given list (lst) by given num.\n    '''\n    return lst[:num] + lst[num + 1:]\n",
        "num_ids": 19
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele.x == 1:\n        sub.append((ele.y, ele.x+1))\n        sub.append((ele.y, ele.x-1))\n    if ele.x == 8:\n        sub.append((ele.y, ele.x-1))\n        sub.append((ele.y, ele.x+1))\n    if ele.y == 1:\n        sub.append((ele.y+1, ele.x))\n        sub.append((ele.y-1, ele.x))\n    if ele.y == 8:\n        sub.append((ele.y-1, ele.x))\n        sub.append((ele.y+1, ele.x))\n    return sub\n",
        "num_ids": 170
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    new_arr = []\n    if ele[0]+1 <= 7 and ele[1]+1 <= 7:\n        new_arr.append((ele[0]+1, ele[1]+1))\n    if ele[0]-1 >= 0 and ele[1]+1 <= 7:\n        new_arr.append((ele[0]-1, ele[1]+1))\n    if ele[0]+1 <= 7 and ele[1]-1 >= 0:\n        new_arr.append((ele[0]+1, ele[1]-1))\n    if ele[0]-1 >= 0 and ele[1]-1 >= 0:\n        new_arr.append((ele[0]-1, ele[1]-1))\n    if ele[0]+1 <= 7 and ele[1]-1 >= 0:\n        new_arr.append((ele[0]+1, ele[1]-1))\n    if ele[0]-1 >= 0 and ele[1]-1 >= 0:\n        new_arr.append((ele[0]-1, ele[1]-1))\n    if ele[0]+1 <= 7 and ele[1]+1 <= 7:\n        new_arr.append((ele[0]+1, ele[1]+1))\n    if ele[0]-1 >= 0 and ele[1]+1 <= 7:\n        new_arr.append((ele[0]-1, ele[1]+1))\n    return new_arr\n",
        "num_ids": 327
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    x = ele[0]\n    y = ele[1]\n    r = ele[2]\n    n = x + r\n    e = x - r\n    s = y - r\n    w = y + r\n    #print(n, e, s, w)\n    sub.append([n,e,s,w])\n    return sub\n",
        "num_ids": 87
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub.append(ele)\n    if ele[0] == 0 or ele[0] == 1:\n        if ele[1] == 0 or ele[1] == 1:\n            return [ele, (ele[0]+1, ele[1]), (ele[0]-1, ele[1]), (ele[0], ele[1]+1), (ele[0], ele[1]-1)]\n        else:\n            return [ele, (ele[0]+1, ele[1]), (ele[0]-1, ele[1]), (ele[0], ele[1]-1)]\n    else:\n        if ele[1] == 0 or ele[1] == 1:\n            return [(ele[0]-1, ele[1]), (ele[0]+1, ele[1]), (ele[0], ele[1]+1), (ele[0], ele[1]-1)]\n        else:\n            return [(ele[0]-1, ele[1]), (ele[0]+1, ele[1]), (ele[0], ele[1]-1), (ele[0], ele[1]+1)]\n",
        "num_ids": 256
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x,y = ele\n    return [(x+dx,y+dy) for dx,dy in adjac_dirs]\n",
        "num_ids": 32
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return sub + [(ele[0]-1, ele[1]-1), (ele[0]-1, ele[1]), (ele[0]-1, ele[1]+1), (ele[0], ele[1]-1), (ele[0], ele[1]+1), (ele[0]+1, ele[1]-1), (ele[0]+1, ele[1]), (ele[0]+1, ele[1]+1)]\n",
        "num_ids": 103
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for i in range(len(ele)):\n        sub.append((ele[i], ele[(i+1)%len(ele)]))\n    return sub\n",
        "num_ids": 41
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    x, y = ele\n    sub.append([x+1, y])\n    sub.append([x-1, y])\n    sub.append([x, y+1])\n    sub.append([x, y-1])\n    sub.append([x+1, y+1])\n    sub.append([x+1, y-1])\n    sub.append([x-1, y+1])\n    sub.append([x-1, y-1])\n    return sub\n",
        "num_ids": 119
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    return text.strip().replace(\" \", \"_\").replace(\"_\", \" \")\n",
        "num_ids": 23
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if text.count(' ') == 0:\n        return text\n    else:\n        res = text.split()\n        for i in range(len(res)):\n            if res[i]!= \" \":\n                res[i] = res[i].replace(\" \",\"_\")\n            else:\n                res[i] = \"_\"\n        return''.join(res)\n",
        "num_ids": 92
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_').replace('_',' ')\n",
        "num_ids": 19
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.strip().replace(\" \", \"_\").replace(\"_\", \" \")\n    \n",
        "num_ids": 23
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('_','')\n    return text\n",
        "num_ids": 30
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")\n",
        "num_ids": 12
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # your code here\n",
        "num_ids": 8
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    import re\n    text = re.sub(r\"\\s\", \"_\", text)\n    return text\n    \n",
        "num_ids": 29
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if len(text) == 0:\n        return text\n    else:\n        if text.isalpha():\n            if text.find(' ') == -1:\n                return text\n            else:\n                return replace_spaces(text.replace(' ', '_'))\n        else:\n            return replace_spaces(text.replace('_',''))\n",
        "num_ids": 86
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(text)):\n        if text[i] == \" \":\n            new_str = new_str + \"_\"\n        else:\n            new_str = new_str + text[i]\n    return new_str\n",
        "num_ids": 68
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    for index in range(len(num_list)):\n        for j in range(len(num_list)-1):\n            if num_list[j] == 0:\n                num_list.pop(j)\n                num_list.append(0)\n                \n                break\n",
        "num_ids": 70
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            for j in range(i,len(num_list)):\n                if num_list[j]!= 0:\n                    num_list[i],num_list[j]=num_list[j],num_list[i]\n                    break\n    return num_list\n",
        "num_ids": 92
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # given_list = list(num_list)\n    # i = 0\n    # while i < len(given_list):\n    #     if given_list[i] == 0:\n    #         if i == len(given_list) - 1:\n    #             break\n    #         for j in range(i+1, len(given_list)):\n    #             given_list[j] = given_list[j-1]\n    #         given_list[i] = 0\n    #     i += 1\n    # print(given_list)\n    \n    # list comprehension\n    print(given_list[0]) if num_list[0] else print(given_list[1]) if num_list[1] else print(given_list[2])\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            if i == 0:\n                continue\n            if i == 1:\n                if num_list[i+1]!= 0:\n                    num_list[0] = num_list[i+1]\n                    num_list[i+1] = 0\n                    break\n            if i == 2:\n                if num_list[i-1] == 0 and num_list[i+1]!= 0:\n                    num_list[i] = num_list[i+1]\n                    num_list[i+1] = 0\n                    break\n                else:\n                    if num_list[i-1]!= 0:\n                        num_list[i] = num_list[i-1]\n                        num_list[i-1] = 0\n                        break\n    \n    # given_list = list(num_list)\n    # i = 0\n    # while i < len(given_list):\n    #     if given_list[i] == 0:\n    #         if i == len(given_list) - 1:\n    #             break\n    #         for j in range(i+1, len(given_list)):\n    #             given_list[j] = given_list[j-1]\n    #         given_list[i] = 0\n    #     i += 1\n    # print(given_list)\n    \n    # list comprehension\n    # for i in range(len(given_list)):\n    #     if given_list[i] == 0:\n    #         given_list[i-1:i+1] = 0\n    # print(given_list)\n    \n    # while i < len(given_list):\n    #     if given_list[i] == 0:\n    #         if i == len(given_list) - 1:\n    #             break\n    #         for j in range(i+1, len(given_list)):\n    #             given_list[j] = given_list[j-1]\n    #         given_list[i] = 0\n    #     i += 1\n    # print(given_list)\n    \n    # given_list = list(num_list)\n    # for i in range(len(given_list)):\n    #     if given_list[i] == 0:\n    #         given_list[i:len(given_list)] = given_list[i+1:]\n    #         given_list[i+1:i+1] = 0\n    # print(given_list)\n    \n    # for i in range(len(num_list)):\n    #     if num_list[i] == 0:\n    #         num_list[:i] = num_list[i+1:]\n    #         num_list[i+1:] = 0\n    # print(num_list)\n    \n    # for i in range(len(num_list)):\n    #     if num_list[i] == 0:\n    #         num_list[i:] = num_list[i+1:]\n    #         num_list[i+1:] = 0\n    # print(num_list)\n    \n    # for i in range(len(num_list)):\n    #     if num_list[i] == 0:\n    #         num_list[i:i] = num_list[i+1:]\n    #         num_list[i+1:] = 0\n    # print(num_list)\n    \n    # for i in range(len(num_list)):\n    #     if num_list[i] == 0:\n    #         num_list = num_list[:i] + num_list[i+1:]\n    # print(num_list)\n    \n    # for i in range(len(num_list)):\n    #     if num_list[i] == 0:\n    #         num_list = num_list[:i] + num_list[i+1:]\n    #         num_list[i] = 0\n    # print(num_list)\n    \n    # for i in range(len(num_list)):\n    #     if num_list[i] == 0:\n    #         num_list = num_list[:i] + num_list[i+1:]\n    #         num_list = num_list[:i] + num_list[i+1:]\n    # print(num_list)\n    \n    # for i in range(len(num_list)):\n    #     if num_list[i] == 0:\n    #         num_list = num_list[:i] + num_list[i+1:]\n    #         num_list = num_list[:i] + num_list[i+1:]\n    #         num_list = num_list[:i] + num_list[i+1:]\n    # print(num_list)\n    \n    # for i in range(len(num_list)):\n    #     if num_list[i] == 0:\n    #         num_list = num_list[:i] + num_list[i+1:]\n    #         num_list = num_list[:i] + num_list[i+1:]\n    #         num_list = num_list[:i] + num_list[i+1:]\n    #         num_list = num_list[:i] + num_list[i+1:]\n    #         num_list = num_list[:i] + num_list[i+1:]\n    # print(num_list)\n    \n    # for i in range(len(num_list)):\n    #     if num_list[i] == 0:\n    #         num_list = num_list[:i] + num_list[i+1:]\n    #         num_list = num_list[:i] + num_list[i+1:]\n    #         num_list = num_list[:i] + num_list[i+1:]\n    #         num_list = num_list[:i] + num_list[i+1:]\n    #         num_list = num_list[:i] + num_list[i+1:]\n    #         num_list = num_list[:i] + num_list[i+1:]\n    # print(num_list)\n    \n    # for i in range(len(num_list)):\n    #     if num_list[i] == 0:\n    #         num_list = num_list[:i] + num_list[i+1:]\n    #         num_list = num_list[:i] + num_list[i+1:]\n    #         num_list = num_list[:i] + num_list[i+1:]\n    #         num_list = num_list[:i] + num_list[i+1:]\n    #         num_list = num_list[:i] + num_list[i+1:]\n    #         num_list = num_list[:i] + num_list[i+1:]\n    # print(num_list)\n    \n    # for i in range(len(num_list)):\n    #     if num_list[i] == 0:\n    #         num_list = num_list[:i] + num_list[i+1:]\n",
        "num_ids": 1945
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    zero_count = 0\n    \n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_count += 1\n            \n    for i in range(len(num_list)-zero_count):\n        num_list[i] = num_list[i+1]\n    \n    for j in range(len(num_list)-1, zero_count, -1):\n        num_list[j] = 0\n        \n    return num_list\n    \n",
        "num_ids": 126
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list.append(num_list.pop(i))\n            count += 1\n            \n    print(f'The length of the given list is {len(num_list)}.')\n    print(f'The list after moving all zeroes to the end is {num_list}.')\n    print(f'The number of zeroes moved is {count}.')\n",
        "num_ids": 125
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # initialize and empty list\n    # for loop to check if current value is not equal to zero and add it to the new list\n    # if it is not, append it to the new list\n    new_list = []\n    for value in num_list:\n        if value!= 0:\n            new_list.append(value)\n    # since we can't compare 0 to anything else, we need to sort the new list\n    new_list.sort()\n    return new_list\n",
        "num_ids": 113
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.append(0)\n            num_list.pop(i)\n    return num_list\n",
        "num_ids": 54
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    for i in range(len(num_list)):\n        if num_list[i]==0:\n            num_list.append(num_list.pop(i))\n            \n    return num_list\n",
        "num_ids": 54
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[count] = num_list[i]\n            count += 1\n    while count < len(num_list):\n        num_list[count] = 0\n        count += 1\n",
        "num_ids": 80
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # List to store the final output\n    list_output = []\n    # Creating the output list\n    for i in range(0, len(num_list)):\n        if num_list[i]!= 0:\n            list_output.append(num_list[i])\n    # Appending the list_output to num_list\n    num_list.extend(list_output)\n    return num_list\n",
        "num_ids": 100
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans = 0\n    if len(arr) == 0 : \n        return 0\n    for i in range(0,len(arr)-1) : \n        for j in range(i+1,len(arr)) : \n            ans = ans + arr[i] ^ arr[j] \n    return ans \nif __name__ == \"__main__\":\n    arr =[1,2,4]\n    sum = pair_xor_Sum(arr,len(arr))\n    print(sum)\n",
        "num_ids": 122
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr.sort()\n    sum=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            sum+=arr[i]^arr[j]\n    return sum\n",
        "num_ids": 54
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            s = s + (arr[i] ^ arr[j])\n    return s\n",
        "num_ids": 51
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum=0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum=xor_sum+(arr[i]^arr[j])\n    return xor_sum\n",
        "num_ids": 60
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(0,n-1) :\n        for j in range(i+1,n) :\n            sum = sum + (arr[i] ^ arr[j])\n    return sum\n",
        "num_ids": 55
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum1=0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum1=sum1^(arr[i]+arr[j])\n    return sum1\n",
        "num_ids": 52
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(0,n-1) :\n        for j in range(i+1,n) :\n            xor_sum = xor_sum + (arr[i] ^ arr[j])\n    print('xor_sum : ',xor_sum)\n    return xor_sum\n",
        "num_ids": 82
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += (arr[i] ^ arr[j])\n    return xor_sum\narr = list(map(int, input().split()))\nn = len(arr)\nresult = pair_xor_Sum(arr, n)\nprint(result)",
        "num_ids": 95
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Code here\n    s = 0\n    for i in range(n) :\n        for j in range(n) :\n            if i!= j :\n                s += arr[i] ^ arr[j]\n    return s\n",
        "num_ids": 57
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            sum = sum + (arr[i] ^ arr[j])\n    return sum\n",
        "num_ids": 53
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    \n    for i in iterable:\n        hq.heappush(h, i)\n        \n    return [hq.heappop(h) for i in range(len(h))]\n",
        "num_ids": 55
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) <= 1:\n        return iterable\n    else:\n        return heap_sort([i for i in iterable if i < iterable[0]]) + iterable[0:1] + heap_sort([i for i in iterable if i >= iterable[0]])\n",
        "num_ids": 72
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    s = 0\n    result = []\n    while len(iterable) > 0:\n        result.append(hq.heappop(iterable))\n        s += 1\n    return result\n",
        "num_ids": 60
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for i in iterable:\n        hq.heappush(heap, i)\n    sorted_list = []\n    while heap:\n        smallest = heapq.heappop(heap)\n        sorted_list.append(smallest)\n    return sorted_list\n",
        "num_ids": 76
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    arr = []\n    while iterable:\n        arr.append(hq.heappop(iterable))\n    return arr\n",
        "num_ids": 45
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    min_heap = MinHeap()\n    hq.heappush(min_heap, iterable[0])\n    for i in range(1, len(iterable)):\n        if iterable[i] < min_heap.peek():\n            hq.heappush(min_heap, iterable[i])\n        else:\n            hq.heappush(min_heap, iterable[i])\n            hq.heappop(min_heap)\n    return list(min_heap)\n",
        "num_ids": 130
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while len(iterable) > 0:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list\n",
        "num_ids": 58
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return sorted(iterable)\n",
        "num_ids": 22
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    size = len(iterable)\n    if size < 2:\n        return iterable\n    else:\n        max_heap = []\n        for i in range(0,size):\n            hq.heappush(max_heap,iterable[i])\n        for i in range(0,size):\n            if len(max_heap) == 0:\n                break\n            elif iterable[i] < max_heap[0]:\n                break\n            else:\n                tmp = iterable[i]\n                iterable[i] = max_heap[0]\n                max_heap.remove(max_heap[0])\n                hq.heappush(max_heap,tmp)\n    return iterable\n",
        "num_ids": 177
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return iterable\n",
        "num_ids": 19
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost>=sale_amount:\n        print(\"True\")\n    else:\n        print(\"False\")\n        \nnoprofit_noloss(10,5)\nnoprofit_noloss(10,10)\nnoprofit_noloss(10,11)\nnoprofit_noloss(1,1)\nnoprofit_noloss(1,10)\n",
        "num_ids": 102
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return \"The profit is negative\"\n    elif actual_cost < sale_amount:\n        return \"The loss is negative\"\n    else:\n        return \"The profit and loss is zero\"\n",
        "num_ids": 58
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    noloss_result = actual_cost - sale_amount\n    return noloss_result\n",
        "num_ids": 25
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    loss = actual_cost - sale_amount\n    if loss > 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 32
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    assert actual_cost > 0\n    assert sale_amount > 0\n    assert actual_cost <= sale_amount\n    print(\"Actual_Cost:{} Sale_Amount:{}\".format(actual_cost,sale_amount))\n    profit = actual_cost - sale_amount\n    print(\"Profit:{}\".format(profit))\n    if profit > 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 97
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost - sale_amount >= 0:\n        print(\"No Profit No Loss\")\n    else:\n        print(\"Profit No Loss\")\n",
        "num_ids": 37
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # your code here\n    if actual_cost < sale_amount:\n        return False\n    else:\n        return True\n",
        "num_ids": 31
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        print(\"Profit and loss\")\n        return \"NO\"\n    else:\n        print(\"Profit and loss\")\n        return \"YES\"\nnoprofit_noloss(80000,20000)\n",
        "num_ids": 63
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit=actual_cost-sale_amount\n    loss=actual_cost-sale_amount\n    if profit>=0 and loss>=0:\n        return 'True'\n    else:\n        return 'False'\n",
        "num_ids": 53
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    ws = 5.74 + 0.6215 * t - 11.37 * math.pow(v,0.16) + 0.4275 * t * math.pow(v,0.16)\n    return int(round(ws))\n",
        "num_ids": 60
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v < 0 or t < 0:\n        return \"Invalid inputs\"\n    else:\n        a = 35.74 + 0.6215 * t - 35.75 * (v ** 0.16) + 0.4275 * t * (v ** 0.16)\n        return int(a)\nprint(wind_chill(10,10))\nprint(wind_chill(10,-1))\nprint(wind_chill(10,-10))\nprint(wind_chill(-1,10))\nprint(wind_chill(-10,10))\n",
        "num_ids": 132
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n    e = 35.75\n    f = 0.00002\n    temp_in_c = t + 273.15\n    wind_chill = a + (b * temp_in_c) + (c * v**0.16) + (d * v**0.16 * temp_in_c) + (e * v**0.16 * temp_in_c * temp_in_c) + (f * v**0.16 * temp_in_c * temp_in_c * temp_in_c)\n    return round(wind_chill,1)\n",
        "num_ids": 182
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    WV = v*0.621371\n    tempC = t\n    \n    windChill = 35.74 + 0.6215*tempC + (0.4275*tempC*tempC) - (0.108*tempC*tempC*tempC)\n    windChill = math.floor(windChill)\n    return windChill\n",
        "num_ids": 87
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #code goes here\n    #print(v,t)\n    v = (v ** 2) / 2\n    a = 35.74 + 0.6215 * t - 35.75 * v ** 0.16 + 0.4275 * t * v ** 0.16\n    #print(a)\n    b = 35.74 + 0.6215 * t + 35.75 * v ** 0.16 + 0.4275 * t * v ** 0.16\n    #print(b)\n    wind_chill = (a * (10 ** 4)) / (b * (10 ** 4))\n    #print(wind_chill)\n    wind_chill = math.floor(wind_chill)\n    return wind_chill\n",
        "num_ids": 173
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # validate input\n    if type(v) is not int or type(t) is not int:\n        raise TypeError(\"v and t should be integers\")\n    if v<= 0 or t<= 0:\n        raise ValueError(\"v and t should be positive\")\n",
        "num_ids": 65
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 35.74 + 0.6215 * v * (t - 273.16) + 0.4275 * math.pow(t, 2) - 10.3 * math.pow(t, 3)\n    return round(wci)\n",
        "num_ids": 62
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 35.74 + 0.6215*t - 35.75*(v**0.16) + 0.4275*t*(v**0.16)\n    return(round(wci))\n",
        "num_ids": 53
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed = v\n    temp = t\n    if wind_speed < 2:\n        wind_chill = 35.74 + 0.6215 * temp + (0.4275 * wind_speed ** 0.16)\n    elif wind_speed < 5:\n        wind_chill = 35.74 + 0.6215 * temp + (0.4275 * wind_speed ** 0.16) - (0.009 * wind_speed ** 0.16)\n    else:\n        wind_chill = 35.74 + 0.6215 * temp + (0.4275 * wind_speed ** 0.16) - (0.009 * wind_speed ** 0.16) - (5.676 * (wind_speed ** 0.16))\n    \n    return int(wind_chill)\n    \ndef vp(temp):\n    '''\n    Write a function that calculates the virtual potential temperature (VP) given the temperature in celsius.\n    '''\n    return temp + 459.67\n",
        "num_ids": 11
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n    e = 35.75\n    f = 0.6215\n    g = 35.75\n    h = 0.4275\n    if v < 2:\n        return t\n    elif v < 5:\n        return t + (a - b * t) / (2 * v)\n    elif v < 10:\n        return t + (c - d * t) / (2 * (v ** 0.16))\n    elif v < 20:\n        return t + (e - f * t) / (2 * (v ** 0.16))\n    elif v < 40:\n        return t + (g - h * t) / (2 * (v ** 0.16))\n    elif v < 60:\n        return t + (a - b * t) / (2 * (v ** 0.16)) + (c - d * t) / (2 * (v ** 0.16))\n    elif v < 80:\n        return t + (e - f * t) / (2 * (v ** 0.16)) + (g - h * t) / (2 * (v ** 0.16))\n    else:\n        return t + (a - b * t) / (2 * (v ** 0.16)) + (c - d * t) / (2 * (v ** 0.16)) + (e - f * t) / (2 * (v ** 0.16)) + (g - h * t) / (2 * (v ** 0.16))\n",
        "num_ids": 376
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    name = ['Sam', 'Emma', 'Alex', 'Olivia']\n    s = 0\n    for i in name:\n        if i[0].isupper():\n            s += len(i)\n    print(s)\n    \ndef sample_if(sample_names):\n    '''\n    Write a function to return whether a given name is \"Kelly\" or \"Erica\".\n    '''\n    name = ['Kelly', 'Erica', 'Jim', 'Bob', 'Brandon', 'Alex']\n    k = 'Kelly'\n    j = 'Erica'\n    if name.count(k) > 0 and name.count(j) > 0:\n        if k in name and j in name:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 92
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = sample_names\n    nam = []\n    for i in names:\n        if i[0] == i[0].upper():\n            nam.append(i)\n    print(nam)\n    return len(nam)\n",
        "num_ids": 56
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_nam = 0\n    for x in sample_names:\n        if x[0].isupper() and x!= 'Troy':\n            sum_nam += len(x)\n    return sum_nam\n",
        "num_ids": 52
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    string = ''\n    for x in sample_names:\n        if x.islower() == True:\n            x = x.strip()\n            if len(x) > 0:\n                string += x +''\n    return string.strip()\n",
        "num_ids": 59
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = sample_names.split()\n    lowercase = []\n    new_name = []\n    for name in sample_names:\n        if name[0].islower():\n            lowercase.append(name)\n        else:\n            new_name.append(name)\n    print(sum(map(len, new_name)))\n    print(len(new_name))\n    print(sum(map(len, new_name)))\n",
        "num_ids": 107
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    list1 = []\n    for name in sample_names:\n        name = name.strip()\n        if name.startswith('t'):\n            continue\n        else:\n            list1.append(name)\n    print(list1)\n    return sum([len(x) for x in list1])\n",
        "num_ids": 75
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = sample_names.split(\" \")\n    for i in range(len(sample_names)):\n        if sample_names[i].startswith(\"a\"):\n            sample_names[i] = \"apple\"\n        elif sample_names[i].startswith(\"e\"):\n            sample_names[i] = \"elephant\"\n        elif sample_names[i].startswith(\"i\"):\n            sample_names[i] = \"Iphone\"\n        elif sample_names[i].startswith(\"o\"):\n            sample_names[i] = \"orange\"\n        elif sample_names[i].startswith(\"u\"):\n            sample_names[i] = \"Ups\"\n    return sample_names\n",
        "num_ids": 183
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    x = 0\n    for i in sample_names:\n        x = x + len(i)\n    print(\"sum of the length of the name of the list of names after removing the names that start with a lowercase letter is: \", x)\n",
        "num_ids": 58
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    n_list = []\n    for x in range(len(sample_names)):\n        n_list.append(sample_names[x].lower())\n    \n    res = 0\n    for x in range(len(n_list)):\n        if n_list[x].find(\"a\")!= -1:\n            res += len(n_list[x]) - n_list[x].find(\"a\")\n    \n    return res\n",
        "num_ids": 107
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names_lowercase_noprefix = []\n    for name in sample_names:\n        if not name[0].islower():\n            sample_names_lowercase_noprefix.append(name)\n    return len(sample_names_lowercase_noprefix)\n",
        "num_ids": 72
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    output = \"\"\n    for item in items:\n        if item.isalpha():\n            output += item\n        else:\n            if output!= \"\":\n                output += \" \"\n            output += item\n    output = re.sub(' +','', output)\n    return output.strip()\n",
        "num_ids": 70
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.strip('()')\n",
        "num_ids": 11
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub('\\([^()]+\\)', '', items)\n    return items\n",
        "num_ids": 25
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # split the string by parenthesis\n    items = items.split('(')\n    # join all items together\n    items = ''.join(items)\n    # split the string by ')\n    items = items.split(')')\n    # join all items together\n    items = ''.join(items)\n    return items\n",
        "num_ids": 78
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    string_list = items.split(\"(\")\n    string_list.append(string_list.pop(0))\n    return \"\".join(string_list)\n    \ndef remove_underscore(items):\n    '''\n    Write a function to remove the underscore and what is inbetween them from a string.\n    '''\n    string_list = items.split(\"_\")\n    string_list.append(string_list.pop(0))\n    return \"\".join(string_list)\n",
        "num_ids": 41
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace('(','')\n    items = items.replace(')','')\n    return items\n",
        "num_ids": 30
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Split the string by, and from that split by ()\n    # Join the list by ', '\n    items = items.replace('(', '')\n    items = items.replace(')', '')\n    items = items.split(', ')\n",
        "num_ids": 60
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # your code here\n    return items.replace(\"(\",\"\").replace(\")\",\"\")\n    \ndef reverse(items):\n    '''\n    Write a function to reverse a string in place.\n    '''\n    # your code here\n    items = items[::-1]\n    return items\n",
        "num_ids": 22
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.split(\",\")\n    items = list(map(lambda x: x.strip(), items))\n    items = list(filter(lambda x: len(x) > 0, items))\n    for i, item in enumerate(items):\n        if \"(\" in item and \")\" in item:\n            items[i] = item[item.find(\"(\")+1:item.find(\")\")]\n    return items\n",
        "num_ids": 103
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.strip()\n    items = re.sub(r'\\(.*?\\)','',items)\n    items = items.strip()\n    return items\n",
        "num_ids": 41
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    while True:\n        if (i * (i - 1)) <= n:\n            n -= (i * (i - 1))\n            i += 1\n        else:\n            return i - 1\n",
        "num_ids": 53
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    x = 0\n    a = 0\n    while x < n:\n        a = (a * 10) + (a + 1)\n        x += 1\n    return a\n",
        "num_ids": 43
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # brute force:\n    if n == 1: return 1\n    elif n == 2: return 3\n    else:\n        return n*(n-1) + 1\n",
        "num_ids": 43
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 0\n    return n*(n-1)//2\n",
        "num_ids": 25
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    x=0\n    if n==0:\n        return 1\n    for i in range(1,n+1):\n        x=x+1\n    return x\n",
        "num_ids": 42
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n**2 + n\n",
        "num_ids": 10
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*(n+1)*(2*n+1)/6\n",
        "num_ids": 35
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n**2 + n + 1\n",
        "num_ids": 12
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # base case\n    if n == 0:\n        return 0\n    return n*(n+1)*(2*n+1)//6\n",
        "num_ids": 37
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 6\n    else:\n        return n * (n+1)\n",
        "num_ids": 39
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    text = re.sub(r\"\\s+\", \" \", text)\n    text = re.sub(r\"\\n\", \" \", text)\n    text = text.split()\n    #print(text)\n    print(\"\\n\")\n    for word in text:\n        if word == 'z':\n            if word == 'z' and text[0] == 'z' and text[-1] == 'z':\n                continue\n            else:\n                return False\n    return True\n",
        "num_ids": 124
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    wordz = text.split()\n    wordz = list(filter(None, wordz))\n",
        "num_ids": 25
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(r'[A-Za-z]',text):\n        return False\n    if re.search(r'[^z]',text):\n        return False\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    words = re.findall(r'\\w+', text)\n    print(words)\n    if 'z' in words:\n        return(True)\n    else:\n        return(False)\n",
        "num_ids": 50
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    try:\n        if text == 'a':\n            return True\n        else:\n            if text[0] == 'z':\n                return True\n            if text[-1] == 'z':\n                return True\n            else:\n                return False\n    except:\n        return False\n",
        "num_ids": 69
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    \n    z_list = []\n    for word in text.split():\n        if word.startswith('z') or word.endswith('z'):\n            z_list.append(word)\n    if len(z_list)!= 0:\n        print('yes')\n    else:\n        print('no')\n    \n    \n    \ntext = 'z zzzzzzz z zzzzzzzz z zzzzzzz z zzzzzzzzzz z zzzzzzzzzzzz z zzzzzzzz z zzzzzzzzzzzz z zzzzzzzzzzzzzz z zzzzzzzzzzzzzzz z zzzzzzzzzzzzzzzz z zzzzzzzzzzzzzzzzzz z zzzzzzzzzzzzzzzzzzzz z zzzzzzzzzzzzzzzzzzzzzz z zzzzzzzzzzzzzzzzzzzzzzzz z zzzzzzzzzzzzzzzzzzzzzzzz z zzzzzzzzzzzzzzzzzzzzzzzzzz z zzzzzzzzzzzzzzzzzzzzzzzzzz z zzzzzzzzzzzzzzzzzzzzzzzzzz z zzzzzzzzzzzzzzzzzzzzzzzzzz z zzzzzzzzzzzzzzzzzzzzzzzzzz z zzzzzzzzzzzzzzzzzzzzzzzzzz z zzzzzzzzzzzzzzzzzzzzzzzzzz z zzzzzzzzzzzzzzzzzzzzzzzzzz z zzzzzzzzzzzzzzzzzzzzzzzzzzzz z zzzzzzzzzzzzzzzzzzzzzzzzzzzz z zzzzzzzzzzzzzzzzzzzzzzzzzzzz z zzzzzzzzzzzzzzzzzzzzzzzzzzzz z zzzzzzzzzzzzzzzzzzzzzzzzzzzzzz z zzzzzzzzzzzzzzzzzzzzzzzzzzzzzz z zzzzzzzzzzzzzzzzzzzzzzzzzzzzzz z zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz z zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz z zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz z zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
        "num_ids": 2002
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    def process_text(text):\n        text_list = text.split(' ')\n        output_list = []\n        for i in text_list:\n            if i.startswith(\"z\"):\n                i = \"Z\" + i[1:]\n            elif i.endswith(\"z\"):\n                i = i[:-1] + \"Z\"\n            else:\n                pass\n            output_list.append(i)\n        return output_list\n    return process_text(text)\n",
        "num_ids": 121
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    a = re.search(r'\\bz\\b',text)\n    if a:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
        "num_ids": 41
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #split string into a list of words\n    text = text.split()\n    \n    #split word into a list of characters\n    for word in text:\n        word = word.split()\n        print(word)\n        #find index of z\n        for i in range(0,len(word)):\n            if word[i] == 'z':\n                middle_index = i\n        #print(middle_index)\n        #insert z after middle_index\n        new_word = word[:middle_index]\n        new_word.insert(middle_index,'z')\n        #insert z at the end of the word\n        new_word.append('z')\n        #add a space after the z\n        new_word.append(' ')\n        word = new_word\n        #print(word)\n        #create new string\n        new_string = ''.join(word)\n        print(new_string)\n    return new_string\n",
        "num_ids": 223
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    \n    test_str = text.lower()\n    # you can assume that 'z' is not the first or last character of the string\n    if test_str.startswith('z') and test_str.endswith('z'):\n        return True\n    return False\n",
        "num_ids": 67
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    j = k-1\n    array = []\n    for i in range(len(input)):\n        if(i > k):\n            array.append(input[j])\n            j -= 1\n        else:\n            array.append(input[i])\n    return array\n",
        "num_ids": 67
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = input[:]\n    arr.reverse()\n    arr = arr[:k]\n    return arr\n    ",
        "num_ids": 29
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    i = 0\n    j = 0\n    arr = input.copy()\n    arr.sort()\n    while i < k:\n        arr.insert(0, input[j])\n        arr.pop(-1)\n        i += 1\n        j += 1\n    print(arr)\n",
        "num_ids": 69
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    start = 0\n    end = len(input)-1\n    while start<=end:\n        #print start, end, input\n        temp = input[end]\n        input[end] = input[start]\n        input[start] = temp\n        end-=1\n        start+=1\n    return input[0:k]\n        ",
        "num_ids": 81
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    #write your code here\n    #return the reversed array\n    return input[::-1]\n    \n    \n    \n    \nif __name__ == \"__main__\":\n    print(reverse_Array_Upto_K([1, 2, 3, 4, 5], 1)) #[5, 4, 3, 2, 1]\n    print(reverse_Array_Upto_K([1, 2, 3, 4, 5], 5)) #[1, 2, 3, 4, 5]\n    print(reverse_Array_Upto_K([1, 2, 3, 4, 5], 6)) #[5, 4, 3, 2, 1]\n    print(reverse_Array_Upto_K([1, 2, 3, 4, 5], 10)) #[5, 4, 3, 2, 1]\n",
        "num_ids": 196
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    rev = [] \n    for i in range(k): \n        rev.append(input[i]) \n",
        "num_ids": 29
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k >= len(input):\n        k = k % len(input)\n    return input[:k] + input[k:]\n",
        "num_ids": 34
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    start = 0\n    end = len(input)-1\n",
        "num_ids": 16
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    k = k + 1\n    s = len(input) - 1\n    for i in range(s):\n        print(input[i], end=\" \")\n    for i in range(k):\n        print(input[s - i], end=\" \")\n    print()\n    for i in range(k):\n        print(input[i], end=\" \")\n    for i in range(s - k, s):\n        print(input[i], end=\" \")\n    print()\n",
        "num_ids": 117
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # l = []\n    # l.append(i)\n    # input.sort()\n    # for i in input:\n    #     if i < k:\n    #         l.append(i)\n    # return l\n    # return sorted(input, reverse=True)[:k]\n    return sorted(input, reverse=True)[:k]\n",
        "num_ids": 85
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict, )\n",
        "num_ids": 16
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup + (test_dict,))\n",
        "num_ids": 17
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_tup[1].update(test_dict))\n",
        "num_ids": 26
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict, )\n",
        "num_ids": 16
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    l = list(test_tup)\n    l.append(test_dict)\n    return tuple(l)\n",
        "num_ids": 30
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return(test_tup + (test_dict,))\n",
        "num_ids": 17
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n",
        "num_ids": 26
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n",
        "num_ids": 26
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "num_ids": 15
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for x in range(len(test_tup)):\n        for y in range(len(test_tup[x])):\n            test_tup[x][y] += test_dict[x][y]\n    return test_tup\n",
        "num_ids": 61
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    minCost = min(min(x) for x in cost)\n    max = 0\n    for row in cost:\n        for cell in row:\n            max = max(max, cell-minCost)\n    return max\n    \ndef maxAverageOfPath(cost):\n    '''\n    Another way to solve the above problem is to find the minimum element in the matrix, and then do a greedy to find the path that minimizes the average of all cells visited. This is equivalent to finding a path where the sum of all the minimums in the matrix is minimized.\n    '''\n    max = 0\n    minim = min(cost)\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if minim == cost[i][j]:\n                max = max(max, cost[i][j])\n    return max\n",
        "num_ids": 71
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = 0\n    best_path = []\n    for row in range(N):\n        for col in range(N):\n            if row == 0 and col == 0:\n                best_path.append([0,0])\n                max_avg = cost[0][0] / 1\n                continue\n            elif row == 0 and col!= 0:\n                best_path.append([0, col])\n                temp = 0\n                for val in range(col+1, N):\n                    temp += cost[0][val]\n                max_avg = temp / col\n                continue\n            elif col == 0 and row!= 0:\n                best_path.append([row, 0])\n                temp = 0\n                for val in range(row + 1, N):\n                    temp += cost[val][0]\n                max_avg = temp / row\n                continue\n            # i is the index of the cell in the path\n            # j is the index of the cell to the right of the cell at i\n            # k is the index of the cell below the cell at i\n            i = row\n            j = col\n            k = 0\n            while (i!= 0 or j!= 0) and k < col:\n                # check if we are in the first row or column or if we are in the upper or lower diagonal\n                if i == 0 or j == 0 or i == N-1 or j == N-1:\n                    temp = cost[i][j]\n                else:\n                    temp = cost[i][j] + min(cost[i][k] + cost[k+1][j], cost[i][k] + cost[k+1][j] + cost[k+1][k])\n                # update path and max average\n                if max_avg < temp / (i+j+1):\n                    max_avg = temp / (i+j+1)\n                    best_path = []\n                    best_path.append([i,j])\n                if i == 0 or j == 0 or i == N-1 or j == N-1:\n                    break\n                k += 1\n                i -= 1\n                j -= 1\n    return max_avg, best_path\n",
        "num_ids": 520
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # This recursion finds the path with maximum average, and hence returns the max value\n    # and returns an empty list in case of no path found\n    # This function assumes that the bottom right cell is not visited\n    def maxAverageRec(cost,path):\n        # Base condition\n        if len(path) == 0:\n            return 0\n        # This return value is used to calculate the max average over all paths\n        # and hence used as a return value\n        val = 0\n        for i in range(len(path)):\n            # If the cell visited is the bottom right cell\n            if path[i] == len(cost)-1:\n                val = max(val,(cost[path[i]][path[i-1]])/(len(path)-1))\n            else:\n                # Recursion for all the other cells\n                val = max(val,(cost[path[i]][path[i-1]]+maxAverageRec(cost,path[i+1:])))\n        return val\n    \n    # This function takes the input cost and returns the path with maximum average\n    def maxAverage(cost):\n        return maxAverageRec(cost,[0])\n    return maxAverage(cost)\n",
        "num_ids": 277
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m, n = len(cost), len(cost[0])\n",
        "num_ids": 18
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0]*n for i in range(n)]\n    #dp[i][j] - maximum possible average after taking path from (i, j) to (i+1, j)\n    #dp[i][j] = max(dp[i][j-1]+cost[i][j], dp[i+1][j]+cost[i][j])\n    for i in range(n):\n        for j in range(n):\n            if i==0 or j==0:\n                dp[i][j] = cost[i][j]\n            elif i==0:\n                dp[i][j] = cost[i][j] + dp[i][j-1]\n            elif j==0:\n                dp[i][j] = cost[i][j] + dp[i-1][j]\n            else:\n                dp[i][j] = cost[i][j] + max(dp[i][j-1], dp[i-1][j])\n    return max(dp[n-1])/n\n",
        "num_ids": 259
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    row = len(cost)\n    col = len(cost[0])\n    dp = [[0] * col for i in range(row)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, row):\n        dp[i][0] = cost[i][0] + dp[i-1][0]\n    for j in range(1, col):\n        dp[0][j] = cost[0][j] + dp[0][j-1]\n    for i in range(1, row):\n        for j in range(1, col):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    return dp[row-1][col-1]/row\n",
        "num_ids": 196
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    return\n",
        "num_ids": 5
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if not cost:\n        return 0\n",
        "num_ids": 12
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    return average_of_path(cost)\n    \ndef average_of_path(matrix, row_index=0, col_index=0, size=None):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    #base case\n    if row_index == size and col_index == size:\n        return matrix[row_index][col_index]\n    #recursive call\n    else:\n        total_cost = 0\n        visited_cost = 0\n        \n        #up\n        if row_index >= 1:\n            total_cost = total_cost + matrix[row_index][col_index] + average_of_path(matrix, row_index - 1, col_index)\n            visited_cost = visited_cost + 1\n        \n        #down\n        if row_index + 1 <= size:\n            total_cost = total_cost + matrix[row_index][col_index] + average_of_path(matrix, row_index + 1, col_index)\n            visited_cost = visited_cost + 1\n        \n        #right\n        if col_index + 1 <= size:\n            total_cost = total_cost + matrix[row_index][col_index] + average_of_path(matrix, row_index, col_index + 1)\n            visited_cost = visited_cost + 1\n        \n        #left\n        if col_index >= 1:\n            total_cost = total_cost + matrix[row_index][col_index] + average_of_path(matrix, row_index, col_index - 1)\n            visited_cost = visited_cost + 1\n        \n        return total_cost / visited_cost\n    \ndef maxAverageOfPathWithLists(matrix):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    #base case\n    if len(matrix) == 1:\n        return matrix[0][0]\n    #recursive call\n    else:\n        return average_of_path_with_lists(matrix)\n    \ndef average_of_path_with_lists(matrix):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    size = len(matrix)\n    \n    #top left\n    if size == 1:\n        return matrix[0][0]\n    #top right\n    elif size > 1:\n        return average_of_path_with_lists(matrix[:size - 1]) + average_of_path_with_lists(matrix[1:])\n    #down left\n    elif size > 0:\n        return average_of_path_with_lists(matrix[size - 2::-1]) + average_of_path_with_lists(matrix[size - 1::-1])\n    #down right\n    elif size > 0:\n        return average_of_path_with_lists(matrix[size - 2::-1]) + average_of_path_with_lists(matrix[size - 1::-1])\n    #left\n    elif size > 0:\n        return average_of_path_with_lists(matrix[size - 2::-1]) + average_of_path_with_lists(matrix[size - 1::-1])\n    #right\n    elif size > 0:\n        return average_of_path_with_lists(matrix[size - 2::-1]) + average_of_path_with_lists(matrix[size - 1::-1])\n    #bottom left\n    elif size > 0:\n        return average_of_path_with_lists(matrix[size - 2::-1]) + average_of_path_with_lists(matrix[size - 1::-1])\n    #bottom right\n    elif size > 0:\n        return average_of_path_with_lists(matrix[size - 2::-1]) + average_of_path_with_lists(matrix[size - 1::-1])\n    \n",
        "num_ids": 427
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    #for each cell in the first row\n    for i in range(1, n):\n        #for each cell in the current row\n        for j in range(1, n):\n            #find the maximum average of current cell and its left and right\n            #cell\n            cost[i][j] += max(cost[i][j-1], cost[i-1][j])\n            #find the maximum average of current cell and its upper and lower\n            #cell\n            cost[i][j] += max(cost[i-1][j], cost[i][j-1])\n",
        "num_ids": 144
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    res = {}\n    for name,height_weight in students.items():\n        if (height_weight[0]>=h) and (height_weight[1]>=w):\n            res[name]=height_weight\n    return res\n",
        "num_ids": 59
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    s = {}\n    for i in range(len(students)):\n        if h > students[i]['height'] or w > students[i]['weight']:\n            s[students[i]['name']] = students[i]\n    return s\n",
        "num_ids": 65
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    pass",
        "num_ids": 4
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    height = []\n    weight = []\n    for i in range(len(students)):\n        height.append(students[i][1][0])\n        weight.append(students[i][1][1])\n    \n    height_min = min(height)\n    weight_min = min(weight)\n    \n    students = []\n    for i in range(len(students)):\n        if students[i][1][0] >= height_min and students[i][1][1] >= weight_min:\n            students.append(students[i])\n    return students\n",
        "num_ids": 143
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    heights = []\n    weights = []\n    for i in students.values():\n        heights.append(i[0])\n        weights.append(i[1])\n",
        "num_ids": 43
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for student, values in students.items():\n        if values[0] > h and values[1] > w:\n            print(f\"{student} is above the threshold\")\n        else:\n            print(f\"{student} is below the threshold\")\n    return students\n",
        "num_ids": 66
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    a = dict(filter(lambda x: x[0] > h and x[1] > w, students.items()))\n    return a\n",
        "num_ids": 36
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    output = {}\n    for key in students.keys():\n        if students[key][0]>=h and students[key][1]>=w:\n            output[key]=students[key]\n    return output\n",
        "num_ids": 54
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    dic={}\n    for key in students:\n        if students[key]>=min(h,w):\n            dic[key]=students[key]\n    return dic\n",
        "num_ids": 47
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return -1\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            return i\n    return -1\n",
        "num_ids": 62
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    common = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            common += 1\n    return common\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return len([i for i in range(len(nums1)) if nums1[i] == nums2[i]])\n",
        "num_ids": 34
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    dict1 = {}\n    dict2 = {}\n    for index in range(len(nums1)):\n        dict1[nums1[index]] = 1\n        dict2[nums2[index]] = 1\n    count = 0\n    for key in dict1.keys():\n        if key in dict2.keys():\n            count += 1\n    return count\n",
        "num_ids": 88
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # first try\n    return sum([1 for i, j in zip(nums1, nums2) if i == j])\n",
        "num_ids": 33
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if not nums1 or not nums2:\n        return 0\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\ndef count_same_pair_v2(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if not nums1 or not nums2:\n        return 0\n    count = 0\n    d = {}\n    for i in range(len(nums1)):\n        if nums1[i] in d:\n            d[nums1[i]] = d[nums1[i]] + 1\n        else:\n            d[nums1[i]] = 1\n    for j in range(len(nums2)):\n        if nums2[j] in d:\n            d[nums2[j]] = d[nums2[j]] - 1\n            if d[nums2[j]] == 0:\n                del d[nums2[j]]\n            else:\n                count += 1\n    return count\ndef count_same_pair_v3(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if not nums1 or not nums2:\n        return 0\n    count = 0\n    d = {}\n    for i in range(len(nums1)):\n        if nums1[i] in d:\n            d[nums1[i]] = d[nums1[i]] + 1\n        else:\n            d[nums1[i]] = 1\n    for j in range(len(nums2)):\n        if nums2[j] in d:\n            d[nums2[j]] = d[nums2[j]] - 1\n            if d[nums2[j]] == 0:\n                del d[nums2[j]]\n            else:\n                count += 1\n    return count\ndef count_same_pair_v4(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if not nums1 or not nums2:\n        return 0\n    count = 0\n    nums1.sort()\n    nums2.sort()\n    i = j = 0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] == nums2[j]:\n            count += 1\n            i += 1\n            j += 1\n        elif nums1[i] < nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return count\ndef count_same_pair_v5(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if not nums1 or not nums2:\n        return 0\n    count = 0\n    d = {}\n    for i in range(len(nums1)):\n        if nums1[i] in d:\n            d[nums1[i]] = d[nums1[i]] + 1\n        else:\n            d[nums1[i]] = 1\n    for j in range(len(nums2)):\n        if nums2[j] in d:\n            d[nums2[j]] = d[nums2[j]] - 1\n            if d[nums2[j]] == 0:\n                del d[nums2[j]]\n            else:\n                count += 1\n    return count\ndef count_same_pair_v6(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if not nums1 or not nums2:\n        return 0\n    count = 0\n    nums1.sort()\n    nums2.sort()\n    i = j = 0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] == nums2[j]:\n            count += 1\n            i += 1\n            j += 1\n        elif nums1[i] < nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return count\ndef count_same_pair_v7(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if not nums1 or not nums2:\n        return 0\n    count = 0\n    nums1.sort()\n    nums2.sort()\n    i = j = 0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] == nums2[j]:\n            count += 1\n            i += 1\n            j += 1\n        elif nums1[i] < nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return count\ndef count_same_pair_v8(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if not nums1 or not nums2:\n        return 0\n    count = 0\n    nums1.sort()\n    nums2.sort()\n    i = j = 0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] == nums2[j]:\n            count += 1\n            i += 1\n            j += 1\n        elif nums1[i] < nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return count\ndef count_same_pair_v9(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if not nums1 or not nums2:\n        return 0\n    count = 0\n    nums1.sort()\n    nums2.sort()\n    i = j = 0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] == nums2[j]:\n            count += 1\n            i += 1\n            j += 1\n        elif nums1[i] < nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return count\ndef count_same_pair_v10(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if not nums1 or not nums2:\n        return 0\n    count = 0\n    d = {}\n    for i in range(len(nums1)):\n        if nums1[i] in d:\n            d[nums1[i]] = d[nums1[i]] + 1\n        else:\n            d[nums1[i]] = 1\n    for j in range(len(nums2)):\n        if nums2[j] in d:\n            d[nums2[j]] = d[nums2[j]] - 1\n            if d[nums2[j]] == 0:\n                del d[nums2[j]]\n            else:\n                count += 1\n    return count\ndef count_same_pair_v11(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if not nums1 or not nums2:\n        return 0\n    count = 0\n    d ",
        "num_ids": 27
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n",
        "num_ids": 44
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    result = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            result = result + 1\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    assert base > 0 and power > 0, 'Base or Power must be greater than 0'\n",
        "num_ids": 23
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n    while power!= 0:\n        digit = base % 10\n        base = base // 10\n        sum_of_digits += digit\n        power -= 1\n",
        "num_ids": 49
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    if power == 0:\n        return 1\n    if base == 0:\n        return 0\n    for i in range(base):\n        result += 1 + power\n    return result\nprint(power_base_sum(3, 1))\nprint(power_base_sum(3, 2))\nprint(power_base_sum(3, -1))\nprint(power_base_sum(0, 1))\nprint(power_base_sum(1, -2))\nprint(power_base_sum(-1, -1))\n",
        "num_ids": 130
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        sum += (base ** power)\n        power -= 1\n    return sum\n",
        "num_ids": 32
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_result = 0\n    \n    while power:\n        if power % 2 == 1:\n            base_result += (base % 10)\n        power, base = (power - 1), (base // 10)\n    \n    return base_result\n",
        "num_ids": 60
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(int(i) for i in str(base))**power\n",
        "num_ids": 20
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base = str(base)\n    power = int(power)\n    def power_base_sum(base, power):\n        if power < 0:\n            base = base[::-1]\n            power = abs(power)\n            base = ''.join(list(base))\n            total = 0\n            for i in range(len(base)):\n                if int(base[i]) >= power:\n                    total += int(base[i])\n                else:\n                    total -= int(base[i])\n            return total\n        else:\n            base = base[::-1]\n            power = abs(power)\n            base = ''.join(list(base))\n            total = 0\n            for i in range(len(base)):\n                if int(base[i]) < power:\n                    total += int(base[i])\n                else:\n                    total -= int(base[i])\n            return total\n    return power_base_sum(base, power)\n",
        "num_ids": 229
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    if power < 0:\n        return result\n    while power!= 0:\n        result += base % 10\n        base //= 10\n        power -= 1\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    base = base % 10\n    \n    for i in range(power):\n        result += base % 10\n        base = int(base / 10)\n        \n    return result\n    \nprint(power_base_sum(2, 4))\nprint(power_base_sum(2, 5))\nprint(power_base_sum(2, 8))\nprint(power_base_sum(2, 10))\nprint(power_base_sum(2, 12))\n",
        "num_ids": 115
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 1\n    else:\n        return base * power_base_sum(base, power-1)\n",
        "num_ids": 34
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # pattern1 = r\"\\\"(.*?)\\\"\"\n    # pattern2 = r'\\\"(.*?)\\\"'\n    # re_pattern1 = re.compile(pattern1)\n    # re_pattern2 = re.compile(pattern2)\n    # print(re_pattern1.findall(text1))\n    # print(re_pattern2.findall(text1))\n    pattern = r'\\\"(.*?)\\\"'\n    re_pattern = re.compile(pattern)\n    string = re_pattern.findall(text1)\n    return string\n",
        "num_ids": 137
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    try:\n        quot_value = re.findall(r'\"(.*?)\"',text1)\n        return quot_value\n    except:\n        return None\n",
        "num_ids": 42
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_index=text1.find('\"')\n    while(quotation_index>-1):\n        left_quote=text1.find('\"',quotation_index+1)\n        text1=text1[:left_quote]+text1[quotation_index+1:]\n        right_quote=text1.find('\"',left_quote+1)\n        text1=text1[:right_quote]+text1[left_quote+1:]\n        quotation_index=text1.find('\"')\n    return text1\ndef extract_name(text1):\n    '''\n    Write a function to extract all names in a string and return a string with names separated by comma and a space \" \".\n    '''\n    return extract_quotation(text1)\ndef extract_email(text1):\n    '''\n    Write a function to extract all emails in a string and return a string with emails separated by comma and a space \" \".\n    '''\n    pattern=r'[\\w\\d.+-]+@[\\w\\d.+-]+'\n    return re.findall(pattern,text1)\ndef extract_phone_number(text1):\n    '''\n    Write a function to extract all phone numbers in a string and return a string with numbers separated by comma and a space \" \".\n    '''\n    pattern=r'(?:\\+?[2-9][0-9]{2})?[1-9][0-9]{8,12}'\n    return re.findall(pattern,text1)\ndef extract_citations(text1):\n    '''\n    Write a function to extract all citations in a string and return a string with citations separated by comma and a space \" \".\n    '''\n    pattern=r'[\\w\\d\\s]+'\n    return re.findall(pattern,text1)\ndef extract_full_name(text1):\n    '''\n    Write a function to extract all names, email addresses, phone numbers and citations in a string and return a string with names, emails, phone numbers and citations separated by comma and a space \" \".\n    '''\n    return extract_name(extract_email(extract_phone_number(extract_citations(text1))))\ndef write_to_file(file,data):\n    '''\n    Write a function to write data to a file\n    '''\n    with open(file,'a') as f:\n        f.write(data+'\\n')\n    f.close()\ndef get_list(file):\n    '''\n    Write a function to read data from a file and return a list of data\n    '''\n    with open(file,'r') as f:\n        data=f.read()\n    f.close()\n    data=data.split('\\n')\n    data.pop()\n    return data\ndef write_data(file,data):\n    '''\n    Write a function to write data to a file\n    '''\n    with open(file,'w') as f:\n        f.write(data)\n    f.close()\ndef get_text(file):\n    '''\n    Write a function to read text from a file and return a string\n    '''\n    with open(file,'r') as f:\n        data=f.read()\n    f.close()\n    return data\ndef modify_file(file,text):\n    '''\n    Write a function to read text from a file and write the modified text in the same file\n    '''\n    write_data(file,text)\ndef get_modified_file(file):\n    '''\n    Write a function to read text from a file and write the modified text in a different file\n    '''\n    text=get_text(file)\n    data=extract_full_name(text)\n    write_to_file('modified_files/modified_file.txt',data)\n    print(data)\ndef delete_line(file,line_number):\n    '''\n    Write a function to delete a line from a file\n    '''\n    with open(file,'r') as f:\n        data=f.readlines()\n    f.close()\n    data.pop(line_number-1)\n    with open(file,'w') as f:\n        f.writelines(data)\n    f.close()\ndef create_file(file):\n    '''\n    Write a function to create a file\n    '''\n    with open(file,'w') as f:\n        pass\n    f.close()\ndef read_lines(file):\n    '''\n    Write a function to read lines from a file and return a list of lines\n    '''\n    with open(file,'r') as f:\n        data=f.readlines()\n    f.close()\n    return data\ndef delete_file(file):\n    '''\n    Write a function to delete a file\n    '''\n    with open(file,'r') as f:\n        data=f.read()\n    f.close()\n    data=data.split('\\n')\n    data.pop()\n    with open(file,'w') as f:\n        f.write(data)\n    f.close()\ndef copy_file(file1,file2):\n    '''\n    Write a function to copy a file\n    '''\n    with open(file1,'r') as f:\n        data=f.read()\n    f.close()\n    with open(file2,'w') as f:\n        f.write(data)\n    f.close()\ndef read_modified_file(file):\n    '''\n    Write a function to read modified file and return a list of data\n    '''\n    data=get_list(file)\n    return data\ndef read_file(file):\n    '''\n    Write a function to read a file and return a string\n    '''\n    with open(file,'r') as f:\n        data=f.read()\n    f.close()\n    return data\ndef write_file(file,data):\n    '''\n    Write a function to write data to a file\n    '''\n    with open(file,'w') as f:\n        f.write(data)\n    f.close()\ndef copy_files(file1,file2):\n    '''\n    Write a function to copy a file\n    '''\n    with open(file1,'r') as f:\n        data=f.read()\n    f.close()\n    with open(file2,'w') as f:\n        f.write(data)\n    f.close()\ndef read_files(file1,file2):\n    '''\n    Write a function to read files and return strings\n    '''\n    with open(file1,'r') as f:\n        data=f.read()\n    f.close()\n    with open(file2,'r') as f:\n        data1=f.read()\n    f.close()\n    return data,data1\ndef get_file_extension(file):\n    '''\n    Write a function to get extension of a file\n    '''\n    return file.split('.')[-1]\ndef get_file_type(file):\n    '''\n    Write a function to get file type of a file\n    '''\n    return get_file_extension(file).upper()\ndef get_sub_directories(file):\n    '''\n    Write a function to get sub directories of a file\n    '''\n    directories=[]\n    file_type=get_file_type(file)\n    for directory in os.listdir():\n        if file_type in directory:\n            directories.append(directory)\n    return directories\ndef get_file_size(file):\n    '''\n    Write a function to get file size of a file\n    '''\n    return os.path.getsize(file)\ndef get_sub_files(file):\n    '''\n    Write a function to get sub files of a file\n    '''\n    files=[]\n    file_type=get_file_type(file)\n    for file in os.listdir():\n        if file_type in file:\n            files.append(file)\n    return files\ndef get_sub_directories(file):\n    '''\n    Write a function to get sub directories of a file\n    '''\n    directories=[]\n    file_type=get_file_type(file)\n    for directory in os.listdir():\n        if file_type in directory:\n            directories.append(directory)\n    retur",
        "num_ids": 53
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    x = re.findall(r'\"(.*)\"', text1)\n    if x:\n        return x\n    else:\n        return \"Not found\"\n",
        "num_ids": 40
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    q = re.findall(r'\\\"[^\"]+\\\"',text1)\n    print(q)\n    return q\n",
        "num_ids": 33
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # This is the regular expression to get the values between quotation marks.\n    # you should assign it to a variable.\n    pattern = re.compile(r'\\\"(.*?)\\\"')\n    # Now we can use this regex to get the data\n    result = pattern.findall(text1)\n    # We return this data as a list.\n    return result\n",
        "num_ids": 86
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    match = re.search(\"[\\\"]+(.*?)[\\\"]\", text1)\n    if match:\n        return match.group(1)\n    else:\n        return ''\n",
        "num_ids": 45
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text=text1.lower()\n    reg=re.findall(\"\\\"(.*?)\\\"\",text)\n    print(reg)\n    if reg:\n        reg=reg[0]\n        print(reg)\n        return reg\n    else:\n        print(\"There is no quote in this string\")\ndef extract_between_square_brackets(text2):\n    '''\n    Write a function to extract values between square brackets [ ] of the given string.\n    '''\n    text=text2.lower()\n    reg=re.findall(\"\\[(.*?)\\]\",text)\n    print(reg)\n    if reg:\n        reg=reg[0]\n        print(reg)\n        return reg\n    else:\n        print(\"There is no square bracket in this string\")\ndef extract_between_curly_brackets(text3):\n    '''\n    Write a function to extract values between curly brackets {} of the given string.\n    '''\n    text=text3.lower()\n    reg=re.findall(\"\\{(.*?)\\}\",text)\n    print(reg)\n    if reg:\n        reg=reg[0]\n        print(reg)\n        return reg\n    else:\n        print(\"There is no curly bracket in this string\")\ndef extract_between_parenthesis(text4):\n    '''\n    Write a function to extract values between parentheses () of the given string.\n    '''\n    text=text4.lower()\n    reg=re.findall(\"\\([^()]*?\\)\",text)\n    print(reg)\n    if reg:\n        reg=reg[0]\n        print(reg)\n        return reg\n    else:\n        print(\"There is no parentheses in this string\")\ndef extract_between_single_quote(text5):\n    '''\n    Write a function to extract values between single quotes (' ') of the given string.\n    '''\n    text=text5.lower()\n    reg=re.findall(\"\\'.*?\\'\",text)\n    print(reg)\n    if reg:\n        reg=reg[0]\n        print(reg)\n        return reg\n    else:\n        print(\"There is no single quote in this string\")\ndef extract_between_double_quote(text6):\n    '''\n    Write a function to extract values between double quotes (\" \") of the given string.\n    '''\n    text=text6.lower()\n    reg=re.findall(\"\\\"[^\\\"]*\\\"\",text)\n    print(reg)\n    if reg:\n        reg=reg[0]\n        print(reg)\n        return reg\n    else:\n        print(\"There is no double quote in this string\")\ndef extract_between_dollar_sign(text7):\n    '''\n    Write a function to extract values between dollar signs ($) of the given string.\n    '''\n    text=text7.lower()\n    reg=re.findall(\"\\$[^$]*\\$\",text)\n    print(reg)\n    if reg:\n        reg=reg[0]\n        print(reg)\n        return reg\n    else:\n        print(\"There is no dollar sign in this string\")\ndef extract_between_percent_sign(text8):\n    '''\n    Write a function to extract values between percent signs (%) of the given string.\n    '''\n    text=text8.lower()\n    reg=re.findall(\"\\%[^%]*\\%\",text)\n    print(reg)\n    if reg:\n        reg=reg[0]\n        print(reg)\n        return reg\n    else:\n        print(\"There is no percent sign in this string\")\ndef extract_between_question_mark(text9):\n    '''\n    Write a function to extract values between question marks (?) of the given string.\n    '''\n    text=text9.lower()\n    reg=re.findall(\"\\?[^?]*\\?\",text)\n    print(reg)\n    if reg:\n        reg=reg[0]\n        print(reg)\n        return reg\n    else:\n        print(\"There is no question mark in this string\")\ndef extract_between_single_quote(text10):\n    '''\n    Write a function to extract values between single quotes (' ') of the given string.\n    '''\n    text=text10.lower()\n    reg=re.findall(\"\\'.*?\\'\",text)\n    print(reg)\n    if reg:\n        reg=reg[0]\n        print(reg)\n        return reg\n    else:\n        print(\"There is no single quote in this string\")\ndef extract_between_double_quote(text11):\n    '''\n    Write a function to extract values between double quotes (\" \") of the given string.\n    '''\n    text=text11.lower()\n    reg=re.findall(\"\\\"[^\\\"]*\\\"\",text)\n    print(reg)\n    if reg:\n        reg=reg[0]\n        print(reg)\n        return reg\n    else:\n        print(\"There is no double quote in this string\")\ndef extract_between_square_brackets(text12):\n    '''\n    Write a function to extract values between square brackets [ ] of the given string.\n    '''\n    text=text12.lower()\n    reg=re.findall(\"\\[[^()]*\\]\",text)\n    print(reg)\n    if reg:\n        reg=reg[0]\n        print(reg)\n        return reg\n    else:\n        print(\"There is no square bracket in this string\")\ndef extract_between_curly_brackets(text13):\n    '''\n    Write a function to extract values between curly brackets {} of the given string.\n    '''\n    text=text13.lower()\n    reg=re.findall(\"\\{(.*?)\\}\",text)\n    print(reg)\n    if reg:\n        reg=reg[0]\n        print(reg)\n        return reg\n    else:\n        print(\"There is no curly bracket in this string\")\ndef extract_between_parenthesis(text14):\n    '''\n    Write a function to extract values between parentheses () of the given string.\n    '''\n    text=text14.lower()\n    reg=re.findall(\"\\([^()]*?\\)\",text)\n    print(reg)\n    if reg:\n        reg=reg[0]\n        print(reg)\n        return reg\n    else:\n        print(\"There is no parentheses in this string\")\ndef extract_between_single_quote(text15):\n    '''\n    Write a function to extract values between single quotes (' ') of the given string.\n    '''\n    text=text15.lower()\n    reg=re.findall(\"\\'.*?\\'\",text)\n    print(reg)\n    if reg:\n        reg=reg[0]\n        print(reg)\n        return reg\n    else:\n        print(\"There is no single quote in this string\")\ndef extract_between_double_quote(text16):\n    '''\n    Write a function to extract values between double quotes (\" \") of the given string.\n    '''\n    text=text16.lower()\n    reg=re.findall(\"\\\"[^\\\"]*\\\"\",text)\n    print(reg)\n    if reg:\n        reg=reg[0]\n        print(reg)\n        return reg\n    else:\n        print(\"There is no double quote in this string\")\ndef extract_between_dollar_sign(text17):\n    '''\n    Write a function to extract values between dollar signs ($) of the given string.\n    '''\n    text=text17.lower()\n    reg=re.findall(\"\\$[^$]*\\$\",text)\n    print(reg)\n    if reg:\n        reg=reg[0]\n        print(reg)\n        return reg\n    else:\n        print(\"There is no dollar sign in this string\")\ndef extract_between_percent_sign(text18):\n    '''\n    Write a function to extract values between percent signs (%) of the given string.\n    '''\n    text=text18.lower()\n    reg=re.findall(\"\\%[^%]*\\%\",text)\n    print(reg)\n    if reg:\n        reg=reg[0]\n        print(reg)\n        return reg\n    else:\n        print(\"There is no percent sign in this string\")\ndef extract_between_question_mark(text19):\n    ''",
        "num_ids": 92
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'\\\"(.+?)\\\"',text1)\n",
        "num_ids": 22
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    regex = r'\\\"[^\\\"]*\\\"'\n    return re.findall(regex,text1)\n",
        "num_ids": 31
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # a = (1,2,3,4,5)\n    # b = (3,4,5,6,7)\n    # c = (2,3,4,5,6)\n    # multiply_elements(a) #(1,2,3,4,5)\n    # multiply_elements(b) #(3,4,5,6,7)\n    # multiply_elements(c) #(2,3,4,5,6)\n",
        "num_ids": 116
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    #x = list(test_tup)\n    #x.extend(test_tup)\n    #print(x)\n    #y = []\n    #for i in range(0,len(x)):\n        #y.append(x[i] * (i+1))\n    #return tuple(y)\n",
        "num_ids": 80
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup)):\n        new_tup += (test_tup[i] * (i + 1),)\n    return new_tup\n",
        "num_ids": 54
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_list = []\n    for i in range(len(test_tup) - 1):\n        result_list.append(test_tup[i] * test_tup[i + 1])\n    return tuple(result_list)\n",
        "num_ids": 60
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    first_number = test_tup[0]\n    if len(test_tup) == 1:\n        return first_number\n    else:\n        second_number = test_tup[1]\n        if len(test_tup) == 2:\n            return first_number * second_number\n        else:\n            return multiply_elements(test_tup[1:]) * first_number\n",
        "num_ids": 98
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    return (test_tup[0] * test_tup[1], test_tup[1] * test_tup[2])\n",
        "num_ids": 38
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    mult_tup = ()\n    for i in range(len(test_tup)-1):\n        mult_tup += (test_tup[i] * test_tup[i+1],)\n    return mult_tup\n",
        "num_ids": 59
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    a = test_tup\n    res = a[0]\n    for i in range(1,len(a)-1):\n        res = res * a[i+1]\n    return (res, a[-1])\n",
        "num_ids": 56
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # your code here\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]*test_tup[i+1])\n    result.append(test_tup[-1])\n    return tuple(result)\n",
        "num_ids": 73
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(t_i*(t_i+1) for t_i in test_tup)\n",
        "num_ids": 28
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst = []\n    for i in range(len(lst1)):\n        lst.append(lst1[i]+lst2[i])\n    return lst\n",
        "num_ids": 46
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1+lst2\n",
        "num_ids": 12
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    list_sum = []\n    for i in range(len(lst1)):\n        list_sum.append(lst1[i] + lst2[i])\n    return list_sum\n    \ndef test_sum_list():\n    '''\n    Some tests for sum_list\n    '''\n    assert sum_list([1,2,3], [4,5,6]) == [1,5,9]\n    assert sum_list([1,2,3], [4,5,6,7]) == [1,5,9,13]\n    assert sum_list([1,2,3], [5,6,7]) == [6,7,13]\n    assert sum_list([], []) == []\n    assert sum_list([1,2,3], []) == []\n    assert sum_list([1,2,3], [1]) == [2,3,3]\n    assert sum_list([1,2,3], [4,5,6]) == [5,7,9]\n    \ndef subtract_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists of integers and returns the list of integers from the first list\n    that are not in the second list.\n    '''\n    list_sub = []\n    for i in range(len(lst1)):\n        if lst1[i] not in lst2:\n            list_sub.append(lst1[i])\n    return list_sub\n    \ndef test_subtract_list():\n    '''\n    Some tests for subtract_list\n    '''\n    assert subtract_list([1,2,3], []) == [1,2,3]\n    assert subtract_list([1,2,3], [1]) == [2,3]\n    assert subtract_list([1,2,3], [2]) == [1]\n    assert subtract_list([1,2,3], [4]) == [1,2,3]\n    assert subtract_list([1,2,3], [1,2,3]) == []\n    assert subtract_list([1,2,3], [1,4]) == [2,3]\n    assert subtract_list([1,2,3], [4]) == [1,2,3]\n    assert subtract_list([1,2,3], [1,2]) == []\n    assert subtract_list([1,2,3], [4,5,6]) == [1,2,3]\n    \ndef lcm(x, y):\n    '''\n    Write a function takes two integers and returns the least common multiple (LCM) of the two integers\n    '''\n    if x > y:\n        greater = x\n    else:\n        greater = y\n    while (True):\n        if (x % greater == 0) and (y % greater == 0):\n            lcm = greater\n        greater += 1\n    return lcm\n    \ndef test_lcm():\n    '''\n    Some tests for lcm\n    '''\n    assert lcm(12,8) == 24\n    assert lcm(12,9) == 42\n    assert lcm(15,10) == 30\n    assert lcm(19,19) == 196\n    assert lcm(17,17) == 17\n    assert lcm(0,17) == 0\n    assert lcm(6,6) == 6\n    assert lcm(6,8) == 12\n    assert lcm(1,1) == 1\n    \ndef median(lst):\n    '''\n    Write a function takes as input a list and returns the median of the list.\n    '''\n    lst.sort()\n    if len(lst) % 2 == 0:\n        middle = int(len(lst)/2)\n        median = lst[middle - 1] + lst[middle]\n        return median\n    else:\n        middle = int(len(lst)/2)\n        median = lst[middle]\n        return median\n    \ndef test_median():\n    '''\n    Some tests for median\n    '''\n    assert median([1,2,3]) == 2\n    assert median([1,2,3,4,5]) == 3\n    assert median([1,2,3,4,5,6,7]) == 4\n    assert median([5,4,3,2,1]) == 3\n    assert median([5,4,3,2,1,2]) == 3\n    assert median([1,2,3,4,5,6]) == 4\n    assert median([5,4,3,2,1,2,3,4]) == 3\n    assert median([5,4,3,2,1,2,3,4,5,6,7]) == 4\n    assert median([1,2,3,4,5,6,7,8,9,10]) == 4\n    assert median([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 4\n    assert median([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60]) == 4\n    \ndef bin_search(lst, item):\n    '''\n    Write a function takes as input a sorted list and an item and returns the index of the item in the list.\n    If the item is not in the list, return -1.\n    '''\n    def binary_search_recur(lst, item):\n        if len(lst) == 0:\n            return -1\n        else:\n            middle = int(len(lst)/2)\n            if item == lst[middle]:\n                return middle\n            elif item < lst[middle]:\n                return binary_search_recur(lst[:middle], item)\n            else:\n                return binary_search_recur(lst[middle+1:], item)\n    return binary_search_recur(lst, item)\n    \ndef test_bin_search():\n    '''\n    Some tests for bin_search\n    '''\n    assert bin_search([1,2,3,4,5], 1) == 0\n    assert bin_search([1,2,3,4,5], 5) == 4\n    assert bin_search([1,2,3,4,5], 6) == -1\n    assert bin_search([1,2,3,4,5], 1) == 0\n    assert bin_search([1,2,3,4,5], 4) == 3\n    assert bin_search([1,2,3,4,5], 5) == 4\n    assert bin_search([1,2,3,4,5], 6) == -1\n    assert bin_search([1,2,3,4,5], 0) == -1\n    assert bin_search([1,2,3,4,5], 1) == 0\n    assert bin_search([1,2,3,4,5], 2) == 1\n    assert bin_search([1,2,3,4,5], 3) == 2\n    assert bin_search([1,2,3,4,5], 4) == 3\n    assert bin_search([1,2,3,4,5], 5) == 4\n    assert bin_search([1,2,3,4,5], 6) == -1\n    assert bin_search([1,2,3,4,5], 7) == -1\n    assert bin_search([1,2,3,4,5], -1) == -1\n    assert bin_search([1,2,3,4,5], 0) == -1\n    \ndef bin_search_recur(lst, item):\n    '''\n    Write a function takes as input a sorted list and an item and returns the index of the item in the list.\n    If the item is not in the list, return -1.\n    '''",
        "num_ids": 1
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1 + lst2\n    \n    \ndef dot_product_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns (a_1*b_1, a_1*b_2,..., a_1*b_n, a_n*b_1,..., a_n*b_n)\n    '''\n    result = []\n    for a in range(len(lst1)):\n        for b in range(len(lst2)):\n            result.append(lst1[a] * lst2[b])\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    for i in range(len(lst1)):\n        lst1[i] += lst2[i]\n    return lst1\n",
        "num_ids": 37
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1 + lst2\n",
        "num_ids": 12
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!= len(lst2):\n        raise ValueError\n    else:\n        sum = []\n        for i in range(len(lst1)):\n            sum.append(lst1[i]+lst2[i])\n        return sum\n",
        "num_ids": 68
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    new_lst = []\n    for i in range(len(lst1)):\n        new_lst.append(lst1[i] + lst2[i])\n    return new_lst\n",
        "num_ids": 53
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    \n    lst = []\n    for i in range(len(lst1)):\n        lst.append(lst1[i] + lst2[i])\n    return lst\n",
        "num_ids": 49
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sumList = []\n    sumList = lst1 + lst2\n    return sumList\n",
        "num_ids": 25
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    num_list = list(nums)\n    num_list.sort()\n    return_list = []\n    count = 0\n    for item in num_list:\n        if item!= count + 1:\n            return_list.append(item)\n            count = item\n        else:\n            count += 1\n    return return_list\n",
        "num_ids": 82
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    consec_duplicates = []\n    for key, group in groupby(nums):\n        consec_duplicates.append(key)\n    return consec_duplicates\n",
        "num_ids": 46
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    lst = []\n    for k, v in groupby(nums):\n        lst.append(list(v))\n    print(lst)\n    return lst\n    \n    ",
        "num_ids": 47
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    def remove_consecutive_duplicates(iterable):\n        seen = set()\n        for i in iterable:\n            if i in seen:\n                seen.remove(i)\n                seen.add(i)\n            else:\n                seen.add(i)\n        return seen\n",
        "num_ids": 71
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # already done on 1st attempt, but used set to remove duplicates.\n    if not nums:\n        return nums\n    seen_nums = set()\n    for num in nums:\n        if num in seen_nums:\n            seen_nums.remove(num)\n        else:\n            seen_nums.add(num)\n    return seen_nums\n",
        "num_ids": 92
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        if key!= None:\n            if(len(list(group)) > 1):\n                return False\n    return True\n",
        "num_ids": 44
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    pairs = []\n    for k, g in groupby(nums):\n        pairs.append((k,list(g)))\n    return ([i[0] for i in pairs])\n",
        "num_ids": 47
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Solution 1:\n    # for i in range(len(nums)-1):\n    #     if nums[i+1] == nums[i]:\n    #         nums.pop(i+1)\n",
        "num_ids": 54
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    i = 0\n    while i < len(nums)-1:\n        if nums[i] == nums[i+1]:\n            del nums[i]\n        else:\n            i += 1\n",
        "num_ids": 52
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    s = set(nums)\n    return list(s)\n",
        "num_ids": 18
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*(r**2)*h/3\n",
        "num_ids": 19
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #surface_area = h*r**2\n    surface_area = math.pi*r**2*h\n    return surface_area\n",
        "num_ids": 35
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface = math.pi * math.pow(r,2)\n    lateral_surface = 2*lateral_surface + math.pi*r*h\n    lateral_surface = lateral_surface /2\n    return lateral_surface\n",
        "num_ids": 61
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (2*math.pi*r*h) + (2*math.pi*r*(r+h))\n",
        "num_ids": 31
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def lsurface(r,h):\n        def half_perimeter(h):\n            return ((2 * r) * h) / (r + h)\n        def cuberoot(h):\n            return math.sqrt(h)\n        return (2 * half_perimeter(h) + cuberoot(h))\n    return lsurface(r,h)\n",
        "num_ids": 88
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    side_a = math.pi*(r**2)\n    side_b = 2*math.pi*r*h\n    return side_a*side_b\n",
        "num_ids": 42
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * (r**2 + h**2) * 0.5\n    return area\n",
        "num_ids": 27
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    surface = pi*r**2*h/3\n    return surface\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    surface = (4*pi*r**3)/3\n    return surface\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    surface = pi*r**2*h\n    return surface\n",
        "num_ids": 17
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def cone_surface(r,h):\n        return math.pi*r*r*(h/2)\n    print(cone_surface(r,h))\nlateralsurface_cone(2.5,3)",
        "num_ids": 54
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (math.pi * r * r * h)/3\n",
        "num_ids": 17
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    \n    return text.replace(\" \", \":\")\n",
        "num_ids": 15
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    newtext = text.replace(' ',':')\n    return newtext\n",
        "num_ids": 20
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':')\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    return text\n",
        "num_ids": 44
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ',':')\n    text = text.replace(',','.')\n    return text\n",
        "num_ids": 30
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r\"[,;]+\\s\",':',text)\n",
        "num_ids": 21
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(\",\",\":\").replace(\" \",\":\").replace(\".\",\":\")\n",
        "num_ids": 24
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #splits on spaces\n    text = text.split(' ')\n",
        "num_ids": 19
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    if not isinstance(text, str):\n        raise TypeError(\"Input should be of type string\")\n    return re.sub(r'[.,:;]', ':', text)\n",
        "num_ids": 46
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_chars = \":.,;\"\n    text = text.replace(\" \", \":\")\n    for special_char in special_chars:\n        text = text.replace(special_char, \":\")\n    return text\n",
        "num_ids": 56
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #text = 'the,mice,@\\nfor,_,:z\\n.@'\n    #s=re.sub(r'\\s+', ':', text)\n    #return s\n    return re.sub('[\\n,\\.]',':',text)\n    \nprint(replace_specialchar('the,mice,@\\nfor,_,:z\\n.@'))",
        "num_ids": 99
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Insertion Sort \n    for i in range(1, len(A)):\n        j = i-1\n        key = A[i]\n        while(j >= 0 and A[j] > key):\n            A[j+1] = A[j]\n            j -= 1\n        A[j+1] = key\n",
        "num_ids": 81
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # find rightmost element >= x\n    start = 0\n    end = len(A) - 1\n    \n    # if A is not sorted, then we can't find the first occurrence\n    if A[start] > x or A[end] < x:\n        return -1\n    \n    while start + 1 < end:\n        mid = (start + end) // 2\n        if A[mid] == x:\n            return mid\n        if A[mid] < x:\n            start = mid\n        else:\n            end = mid\n    \n    if A[start] == x:\n        return start\n    if A[end] == x:\n        return end\n    return -1\n    ",
        "num_ids": 163
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    start = 0\n    end = len(A)-1\n    while start < end:\n        mid = (start + end)//2\n        if A[mid] > x:\n            end = mid\n        elif A[mid] < x:\n            start = mid + 1\n        else:\n            return mid\n    return -1\n",
        "num_ids": 95
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n",
        "num_ids": 85
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # find the smallest index in A[0, i]\n    left = 0\n    right = len(A)\n    while left < right:\n        mid = left + (right - left) // 2\n        if A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n",
        "num_ids": 79
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low, high = 0, len(A)\n    while low < high:\n        mid = low + (high - low) // 2\n        if A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    if low == 0 or A[low - 1]!= x:\n        return -1\n    else:\n        return low - 1\n",
        "num_ids": 92
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    lo = 0\n    hi = len(A) - 1\n    while lo < hi:\n        mid = lo + (hi - lo) // 2\n        if A[mid] < x:\n            lo = mid + 1\n        elif A[mid] > x:\n            hi = mid - 1\n        else:\n            if mid - 1 >= 0 and A[mid - 1]!= x:\n                return mid\n            hi = mid - 1\n    return lo if lo == 0 else lo - 1\n",
        "num_ids": 118
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    lo = 0\n    hi = len(A) - 1\n    while lo < hi:\n        mid = lo + (hi - lo) // 2\n        if x < A[mid]:\n            hi = mid - 1\n        elif x > A[mid]:\n            lo = mid + 1\n        else:\n            return mid\n    return lo\n",
        "num_ids": 82
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low, high = 0, len(A) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n",
        "num_ids": 84
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # find the index of the leftmost element that is larger than or equal to x\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # we should return left if x is not found\n    if left == len(A):\n        return -1\n    else:\n        return left\n    \n    \ndef find_last_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # find the index of the rightmost element that is smaller than or equal to x\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] <= x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    # we should return right if x is not found\n    if right == -1:\n        return -1\n    else:\n        return right\n    \n    \ndef find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # find the index of the leftmost element that is larger than or equal to x\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # we should return left if x is not found\n    if left == len(A):\n        return -1\n    else:\n        return left\n    \n    \ndef find_last_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # find the index of the rightmost element that is smaller than or equal to x\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] <= x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    # we should return right if x is not found\n    if right == -1:\n        return -1\n    else:\n        return right\n    \n    \ndef find_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # find the index of the rightmost element that is smaller than or equal to x\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] <= x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    # we should return left if x is not found\n    if right == -1:\n        return -1\n    else:\n        return right + 1\n    \n    \ndef find_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # find the index of the rightmost element that is smaller than or equal to x\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] <= x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    # we should return left if x is not found\n    if right == -1:\n        return -1\n    else:\n        return right + 1\n    \n    \ndef find_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # find the index of the rightmost element that is smaller than or equal to x\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] <= x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    # we should return left if x is not found\n    if right == -1:\n        return -1\n    else:\n        return right + 1\n    \n    \ndef find_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # find the index of the rightmost element that is smaller than or equal to x\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] <= x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    # we should return left if x is not found\n    if right == -1:\n        return -1\n    else:\n        return right + 1\n    \n    \ndef find_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # find the index of the rightmost element that is smaller than or equal to x\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] <= x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    # we should return left if x is not found\n    if right == -1:\n        return -1\n    else:\n        return right + 1\n    \n    \ndef find_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # find the index of the rightmost element that is smaller than or equal to x\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] <= x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    # we should return left if x is not found\n    if right == -1:\n        return -1\n    else:\n        return right + 1\n    \n    \ndef find_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # find the index of the rightmost element that is smaller than or equal to x\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] <= x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    # we should return left if x is not found\n    if right == -1:\n        return -1\n    else:\n        return right + 1\n    \n    \ndef find_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # find the index of the rightmost element that is smaller than or equal to x\n    left = 0\n    right = len(A) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] <= x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    # we should return left if x is not found\n    if right == -1:\n        return -1\n    else:\n        return right + 1\n    \n    \ndef find_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # find the index of the rightmost element that is smaller than or equal to x\n    left = 0\n    right = len(A) - 1\n    \n",
        "num_ids": 38
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    result = []\n    if n == 1:\n        return 0\n    result = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        result[i][i] = arr[i]\n",
        "num_ids": 68
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    total = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            total += arr[i] * arr[j]\n    return total\n",
        "num_ids": 50
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # sum_of_prod = 0\n    # for i in range(0, len(arr)):\n    #     for j in range(i+1, len(arr)):\n    #         prod = prod * arr[j]\n    #         sum_of_prod += prod\n    # return sum_of_prod\n    # idea: find the sum of product of all subarray products.\n    # then we can divide the array in two sublists and find their product and sum of products.\n    # time complexity = O(n2)\n    # space complexity = O(n)\n    total_product = 0\n    start_index = 0\n    end_index = 0\n    sum_product_arr = []\n    # sum_product_arr.append(arr[0])\n    for i in range(0, len(arr)):\n        sum_product_arr.append(arr[i])\n        sum_product_arr.append(arr[i])\n",
        "num_ids": 227
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    def product(arr):\n        prod = 1\n        for num in arr:\n            prod *= num\n        return prod\n    \n    sum_of_prod_arr = []\n    \n    def permutations(arr,size,ans):\n        if size == 0:\n            sum_of_prod_arr.append(ans)\n        for i in range(size):\n            n = arr[i]\n            print('original',arr)\n            print('index',i,n)\n            print('ans',ans)\n            print('ans+n',ans+n)\n            #print('index',i)\n            #arr[i] = 0\n            arr[i],ans = 0,ans + n\n            #print('ans',ans)\n            permutations(arr,size-1,ans)\n            arr[i],ans = n,ans - n\n    \n    \n    permutations(arr,len(arr),0)\n    print(sum_of_prod_arr)\n    s = 0\n    for i in range(len(sum_of_prod_arr)):\n        s += product(sum_of_prod_arr[i])\n    \n    return s\n",
        "num_ids": 283
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            prod = 1\n            for k in range(i, j+1):\n                prod *= arr[k]\n            sum += prod\n    return sum\n",
        "num_ids": 71
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    res = 0\n    for i in range(0, n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                res += arr[i] * arr[j] * arr[k]\n    return res\n",
        "num_ids": 78
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    prod = 1\n    res = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            prod = prod * arr[j]\n            res = res + prod\n            prod = 1\n    return res\n",
        "num_ids": 67
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    ans = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            ans += arr[i] * arr[j-1]\n    print(ans)\n",
        "num_ids": 57
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr)==0:\n        return 0\n    if len(arr)==1:\n        return arr[0]\n    \n    n=len(arr)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = arr[i]\n        \n    for j in range(1, n):\n        for i in range(0, n-j):\n            dp[i][i+j] = dp[i+1][i+j-1] * arr[i]\n            \n    sum_of_subarray_prod = 0\n    \n    for i in range(n):\n        for j in range(i, n):\n            sum_of_subarray_prod += dp[i][j]\n    \n    return sum_of_subarray_prod\n",
        "num_ids": 212
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sums = []\n    total = 1\n    for i in range(len(arr)-1):\n        total *= arr[i]\n        sums.append(total)\n        total /= arr[i]\n    sums.append(total)\n    return sums\n",
        "num_ids": 66
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n == 0:\n        return 1\n    \n    temp = 0\n    for i in range(1,31):\n        temp = (n >> i) & 1\n        if temp:\n            n = n - (1 << i)\n    \n    return n\n",
        "num_ids": 64
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    print(\"The number is\", n)\n    n = n | (1 << 1)\n    n = n ^ (1 << 1)\n    n = n & (~(1 << 1))\n    print(\"The number after change is \", n)\n",
        "num_ids": 58
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    bit = 1\n    for i in range(n.bit_length()):\n        n = n | bit\n        n = n & ~bit\n        bit = bit << 1\n    return n\n",
        "num_ids": 47
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    res = n & 0b11110000  # Extract MSB\n    res = res ^ 0b11111000  # XOR with magic value\n    res = res ^ 0b00001111  # Invert the last bit\n    res = res | 0b00001111  # Invert the first bit\n    res = res & 0b11110000  # Apply the mask\n    return res\n",
        "num_ids": 87
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # To get reverse order of the integer, we need to keep\n    # a bit mask and using bit-wise not operation we can\n    # get reverse order\n    # mask = 0xFFFFFFFF\n    # no_of_ones = 0\n    # for i in range(31, -1, -1):\n    #     if (mask & 1) == 1:\n    #         no_of_ones += 1\n    #     mask = mask >> 1\n    # print(no_of_ones)\n",
        "num_ids": 119
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return (n ^ ((1 << (len(bin(n)) - 2)) - 1)) \n",
        "num_ids": 25
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n ^ (n >> 1)\n",
        "num_ids": 12
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n | ~(n << 1)\n    n = n & ~(n >> 1)\n    return n\n",
        "num_ids": 30
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    #code here\n    a=n\n    a=(a<<1)\n    a=(a|(a>>1))\n    return a\n",
        "num_ids": 35
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    print(n)\n    # return n ^ (1 << 1)\n",
        "num_ids": 19
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index==0 or a[index-1]!=x:\n        return index\n    else:\n        return index-1\n",
        "num_ids": 49
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left, right = 0, len(a)\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n",
        "num_ids": 62
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == 0:\n        return -1\n    if x <= a[i-1]:\n        return i-1\n    else:\n        return i\n",
        "num_ids": 55
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    a.insert(i, x)\n    return i\n",
        "num_ids": 32
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if not a:\n        return 1\n    i = bisect.bisect_left(a,x)\n    if i:\n        return i\n    return 1\n",
        "num_ids": 41
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a == None:\n        return 0\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return len(a)\n    if a[i] < x:\n        return i\n    else:\n        return i+1\n",
        "num_ids": 69
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = 0\n    h = len(a) - 1\n    \n    while l <= h:\n        m = (l+h)//2\n        if a[m] == x:\n            return m\n        if a[m] < x:\n            l = m + 1\n        else:\n            h = m - 1\n    \n    return l\n",
        "num_ids": 85
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a,x)\n",
        "num_ids": 17
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = len(a)\n    #if l is 0\n    if l == 0:\n        a.append(x)\n        return 0\n    #if x is greater than the last element\n    if x >= a[l-1]:\n        a.append(x)\n        return l+1\n    #if x is less than the last element\n    i = 0\n    #looping\n    while i < l-1:\n        if a[i] <= x and a[i+1] > x:\n            a.insert(i+1,x)\n            return i+2\n        i += 1\n    #if left insertion is not possible\n    a.append(x)\n    return l+1\n",
        "num_ids": 167
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return -1\n",
        "num_ids": 45
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex,string)\n    if match is None:\n        return False\n    else:\n        return True\n",
        "num_ids": 34
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search('^[aeiouAEIOU][A-Za-z0-9_]*',string):\n        return True\n    else:\n        return False\n",
        "num_ids": 45
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex, string)) \n",
        "num_ids": 17
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.match(regex,string)):\n        return True\n    else:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    result = re.match(regex, string)\n    if(result):\n        return True\n    else:\n        return False\nprint(check_str(\"Hello\"))\nprint(check_str(\"Jhgjg\"))\nprint(check_str(\"Whrshrsfh\"))\nprint(check_str(\"tstf\"))\nprint(check_str(\"a\"))\n",
        "num_ids": 89
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        print('The given string starts with a vowel')\n    else:\n        print('The given string does not start with a vowel')\n",
        "num_ids": 53
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string):\n        print(\"True\")\n    else:\n        print(\"False\")\n",
        "num_ids": 30
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex,string)) \n",
        "num_ids": 17
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    result = pattern.match(string)\n    if result: \n        return True\n    return False\n        \n",
        "num_ids": 40
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    \n    #matching the first character with vowel\n    if re.match(regex,string[0]):\n        return True\n    else:\n        return False\ndef vowel_count(string):\n    '''\n    Write a function to get the count of vowels in a given string.\n    '''\n    count = 0\n    string = string.lower()\n    for letter in string:\n        if letter in 'aeiou':\n            count = count + 1\n    return count\ndef main():\n    '''\n    Main function.\n    '''\n    #take input \n    print(\"Enter a string:\")\n    string = input()\n    #checking the input\n    print(\"The string entered is:\",string)\n    #calling the function\n    if check_str(string):\n        count = vowel_count(string)\n        print(\"The string contains {} vowels\".format(count))\n    else:\n        print(\"The entered string is not starting with a vowel\")\n",
        "num_ids": 99
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n < 1:\n        return None\n    if n == 1:\n        return 1\n    return n*(n+1)/2\n",
        "num_ids": 35
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*(n-1)\n",
        "num_ids": 27
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n",
        "num_ids": 30
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n*(n+1)/2\n",
        "num_ids": 28
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n * (n-1)\n",
        "num_ids": 12
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def fun(n):\n        if n==0:\n            return 1\n        else:\n            return fun(n-1)+fun(n-2)\n    return fun(n)\n",
        "num_ids": 46
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def recursive_geometric_sum(n):\n        if n == 0:\n            return 1\n        else:\n            return 1 / (1 + n)\n    return recursive_geometric_sum(n - 1)\n",
        "num_ids": 53
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n * (n - 1)\n",
        "num_ids": 12
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # your code here\n    for i in range(1,n):\n        n1 = int(str(i*(i+1))[::-1])\n        n2 = int(str(i*(i+1))[::-1])\n        if n1 == n2:\n            return i\n        else:\n            continue\n        # print(n1,n2)\n    return -1\n",
        "num_ids": 97
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    if n <= 0:\n        return 0\n    else:\n        return int(math.sqrt(n))+1\ndef find_Index_of_Triangular_Number(n):\n    '''\n    Write a python function to find the index of the smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    if n <= 0:\n        return 0\n    else:\n        return int(n*(n+1)/2)\ndef find_index_of_2_2(n):\n    '''\n    Write a python function to find the index of the smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    if n <= 0:\n        return 0\n    else:\n        return int(math.sqrt(n))+1\ndef find_Index_of_Square_Number(n):\n    '''\n    Write a python function to find the index of the smallest square number with n digits. https://www.geeksforgeeks.org/index-of-smallest-square-number-with-n-digits/\n    '''\n    n = int(n)\n    if n <= 0:\n        return 0\n    else:\n        return int(math.sqrt(n))+1\ndef find_index_of_3_3(n):\n    '''\n    Write a python function to find the index of the smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    if n <= 0:\n        return 0\n    else:\n        return int(n*(n+1)*(n+2)/6)\ndef find_Index_of_3_3(n):\n    '''\n    Write a python function to find the index of the smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    if n <= 0:\n        return 0\n    else:\n        return int(n*(n+1)*(n+2))\ndef find_Index_of_4_4(n):\n    '''\n    Write a python function to find the index of the smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    if n <= 0:\n        return 0\n    else:\n        return int(n*(n+1)*(n+2)*(n+3)/24)\ndef find_Index_of_4_4(n):\n    '''\n    Write a python function to find the index of the smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    if n <= 0:\n        return 0\n    else:\n        return int(n*(n+1)*(n+2)*(n+3))\ndef find_Index_of_5_5(n):\n    '''\n    Write a python function to find the index of the smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    if n <= 0:\n        return 0\n    else:\n        return int(n*(n+1)*(n+2)*(n+3)*(n+4)/(24*24))\ndef find_Index_of_5_5(n):\n    '''\n    Write a python function to find the index of the smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    if n <= 0:\n        return 0\n    else:\n        return int(n*(n+1)*(n+2)*(n+3)*(n+4))\ndef find_Index_of_6_6(n):\n    '''\n    Write a python function to find the index of the smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    if n <= 0:\n        return 0\n    else:\n        return int(n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)/(60*60*60))\ndef find_Index_of_6_6(n):\n    '''\n    Write a python function to find the index of the smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    if n <= 0:\n        return 0\n    else:\n        return int(n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5))\ndef find_Index_of_7_7(n):\n    '''\n    Write a python function to find the index of the smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    if n <= 0:\n        return 0\n    else:\n        return int(n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)/(720*720*720))\ndef find_Index_of_7_7(n):\n    '''\n    Write a python function to find the index of the smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    if n <= 0:\n        return 0\n    else:\n        return int(n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6))\ndef find_Index_of_8_8(n):\n    '''\n    Write a python function to find the index of the smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    if n <= 0:\n        return 0\n    else:\n        return int(n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7)/(840*840*840*840))\ndef find_Index_of_8_8(n):\n    '''\n    Write a python function to find the index of the smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    if n <= 0:\n        return 0\n    else:\n        return int(n*(n+1)*(n+2)*(n+3)*(n+4)*(n+5)*(n+6)*(n+7))\ndef find_Index_of_9_9(n):\n    '''\n    Write a python function to find the index of the smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    if n <= 0:\n        return 0\n    else:\n        return int(n*(n+",
        "num_ids": 34
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(n,1,-1):\n        if(i*(i+1)//2 <n):\n            return i\n        elif(i*(i+1)//2 ==n):\n            return i-1\n        else:\n            continue\n",
        "num_ids": 65
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Naive approach\n    if (n==3):\n        return 0\n    if (n==2):\n        return 1\n    # Compute the index of largest triangular number with 3 digits.\n    m = 3\n    while(True):\n        n = n - m + 1\n        if (n==0):\n            return m\n        m = m + 1\n",
        "num_ids": 86
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1,n+1):\n        if (1+math.sqrt(1+8*i))/2 == int((1+math.sqrt(1+8*i))/2):\n            return i\n    return -1\n",
        "num_ids": 62
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    lower = 1\n    upper = (10**n)-1\n    while lower < upper:\n        mid = (lower + upper) // 2\n        if (mid*(mid+1)//2) == (lower*(lower+1)//2):\n            return lower\n        if (mid*(mid+1)//2) > (lower*(lower+1)//2):\n            upper = mid\n        else:\n            lower = mid + 1\n    return -1\n",
        "num_ids": 112
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n==0:\n        return 0\n    temp = 0\n    i = 1\n    while i<=n:\n        temp = temp + (i-1)*i\n        i = i + 1\n    return temp\n",
        "num_ids": 54
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if(n == 0):\n        return 0\n    for i in range(1,n+1):\n        i2 = i*i\n        if(i2 <=n):\n            j = i\n            while (j*i2 < n):\n                j += 1\n        else:\n            break\n    return j-1\n",
        "num_ids": 78
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # method 1\n    t=0\n    while (1<<t)<=n:\n        t+=1\n    for i in range(t):\n        if ((1<<i)&n)==n:\n            return i\n    # method 2\n    for i in range(t-1,-1,-1):\n        if ((1<<i)&n)==n:\n            return i\n    return t\n",
        "num_ids": 98
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #triangular number of length n\n    triangularNumber = 0\n    for i in range(1,n+1):\n        triangularNumber = triangularNumber*(i+1)/(i+2)\n    #returning index of the triangular number\n    return int(triangularNumber)\n",
        "num_ids": 69
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_tup = {}\n    for i in range(len(test_tup)-1):\n        dict_tup[test_tup[i]] = test_tup[i+1]\n    return dict_tup\n",
        "num_ids": 57
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = dict()\n    for i in range(len(test_tup)):\n        d[test_tup[i]] = test_tup[i+1]\n    return d\n",
        "num_ids": 48
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if type(test_tup)!= tuple:\n        raise TypeError(\"Input should be a tuple\")\n",
        "num_ids": 27
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {k:v for k,v in zip(test_tup, test_tup[1:])}\n",
        "num_ids": 30
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict = {}\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict[key] = value\n    return dict\n    ",
        "num_ids": 60
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    my_dict = {}\n    for i in range(len(test_tup)):\n        my_dict[test_tup[i]] = test_tup[i + 1]\n",
        "num_ids": 47
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(len(test_tup)):\n        d[test_tup[i]] = test_tup[i+1]\n    return d\n",
        "num_ids": 47
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict = {}\n    for i in range(0, len(test_tup), 2):\n        dict[test_tup[i]] = test_tup[i+1]\n    return dict\n    \ndef sorted_dict_to_list(sorted_dict):\n    '''\n    Write a function to convert the given dictionary to a list of tuples using the keys and corresponding values.\n    '''\n    dict_list = []\n    for k,v in sorted_dict.items():\n        dict_list.append((k,v))\n    return dict_list\n",
        "num_ids": 40
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_val = {}\n    for i in range(0, len(test_tup), 2):\n        dict_val[test_tup[i]] = test_tup[i+1]\n    return dict_val\n",
        "num_ids": 56
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))\n",
        "num_ids": 27
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    x = set(s)\n    print (x)\n    if len(x) == 1 :\n        print ('All same')\n        return True\n    else :\n        print ('Not same')\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)-1) :\n        if s[i]!= s[i+1] :\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) < 2 :\n        return False\n    s = s.lower()\n    s = s.replace(' ','')\n    lst = list(s)\n    return lst == list(set(lst))\n",
        "num_ids": 57
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if(len(s)!=0):\n        if(s[0]!=s[len(s)-1]):\n            return False\n    else:\n        return False\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    result = True\n    s1 = s.lower()\n    if len(s)!= len(set(s1)) :\n        result = False\n    return result\n",
        "num_ids": 41
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s = s.lower()\n    count = 0\n    for i in range(0,len(s)-1) :\n        if s[i] == s[i+1] :\n            count += 1\n        else :\n            return False\n    return count == len(s)-1\nprint(all_Characters_Same(input()))\n",
        "num_ids": 81
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) > 1:\n        if s[0] == s[1]:\n            return all_Characters_Same(s[1:])\n        else:\n            return False\n    else:\n        return True\n",
        "num_ids": 54
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)-1) :\n        if s[i]!= s[i+1] :\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # If not same, return False\n    if len(s) > 1 and s[0] == s[1] :\n        return all_Characters_Same(s[1:len(s)])\n    else :\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) == 1\n",
        "num_ids": 13
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (0.5)*((math.sqrt(5))*(side**2))\nprint(\"The area of a tetrahedron with side 5 is: \",area_tetrahedron(5))\ndef area_tetrahedron_1(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (math.sqrt(5)*side*2)\nprint(\"The area of a tetrahedron with side 5 is: \",area_tetrahedron_1(5))\n",
        "num_ids": 46
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = math.sqrt(3)/6\n    return (1/2)*math.sqrt(3)*(side**2)*(a)\ndef is_triangle(side):\n    '''\n    Write a function that takes a length and determines whether or not a\n    triangle of that length is a triangle.\n    '''\n    if side >= 1 and side <= 3:\n        return True\n    else:\n        return False\ndef is_pentagon(side):\n    '''\n    Write a function that takes a length and determines whether or not a\n    pentagon of that length is a pentagon.\n    '''\n    if side >= 1 and side <= 5:\n        return True\n    else:\n        return False\ndef is_hexagon(side):\n    '''\n    Write a function that takes a length and determines whether or not a\n    hexagon of that length is a hexagon.\n    '''\n    if side >= 1 and side <= 6:\n        return True\n    else:\n        return False\ndef is_octagon(side):\n    '''\n    Write a function that takes a length and determines whether or not an\n    octagon of that length is an octagon.\n    '''\n    if side >= 1 and side <= 8:\n        return True\n    else:\n        return False\ndef is_equilateral_triangle(side):\n    '''\n    Write a function that takes a length and determines whether or not an\n    equilateral triangle of that length is an equilateral triangle.\n    '''\n    if side >= 1 and side <= 2:\n        return True\n    else:\n        return False\ndef is_equilateral_pentagon(side):\n    '''\n    Write a function that takes a length and determines whether or not an\n    equilateral pentagon of that length is an equilateral pentagon.\n    '''\n    if side >= 1 and side <= 5:\n        return True\n    else:\n        return False\ndef is_equilateral_hexagon(side):\n    '''\n    Write a function that takes a length and determines whether or not an\n    equilateral hexagon of that length is an equilateral hexagon.\n    '''\n    if side >= 1 and side <= 6:\n        return True\n    else:\n        return False\ndef is_equilateral_octagon(side):\n    '''\n    Write a function that takes a length and determines whether or not an\n    equilateral octagon of that length is an equilateral octagon.\n    '''\n    if side >= 1 and side <= 8:\n        return True\n    else:\n        return False\ndef is_isosceles_triangle(side):\n    '''\n    Write a function that takes a length and determines whether or not an\n    equilateral triangle of that length is an isosceles triangle.\n    '''\n    if side >= 1 and side <= 2:\n        return True\n    elif side >= 3 and side <= 5:\n        return True\n    else:\n        return False\ndef is_isosceles_pentagon(side):\n    '''\n    Write a function that takes a length and determines whether or not an\n    equilateral pentagon of that length is an isosceles pentagon.\n    '''\n    if side >= 1 and side <= 5:\n        return True\n    elif side >= 6 and side <= 8:\n        return True\n    else:\n        return False\ndef is_isosceles_hexagon(side):\n    '''\n    Write a function that takes a length and determines whether or not an\n    equilateral hexagon of that length is an isosceles hexagon.\n    '''\n    if side >= 1 and side <= 6:\n        return True\n    elif side >= 7 and side <= 9:\n        return True\n    else:\n        return False\ndef is_isosceles_octagon(side):\n    '''\n    Write a function that takes a length and determines whether or not an\n    equilateral octagon of that length is an isosceles octagon.\n    '''\n    if side >= 1 and side <= 8:\n        return True\n    elif side >= 9 and side <= 11:\n        return True\n    else:\n        return False\ndef is_right_triangle(side):\n    '''\n    Write a function that takes a length and determines whether or not a\n    right triangle of that length is a right triangle.\n    '''\n    if side >= 1 and side <= 3:\n        return True\n    else:\n        return False\ndef is_right_pentagon(side):\n    '''\n    Write a function that takes a length and determines whether or not a\n    right pentagon of that length is a right pentagon.\n    '''\n    if side >= 1 and side <= 5:\n        return True\n    else:\n        return False\ndef is_right_hexagon(side):\n    '''\n    Write a function that takes a length and determines whether or not a\n    right hexagon of that length is a right hexagon.\n    '''\n    if side >= 1 and side <= 6:\n        return True\n    else:\n        return False\ndef is_right_octagon(side):\n    '''\n    Write a function that takes a length and determines whether or not a\n    right octagon of that length is a right octagon.\n    '''\n    if side >= 1 and side <= 8:\n        return True\n    else:\n        return False\ndef is_square(side):\n    '''\n    Write a function that takes a length and determines whether or not a\n    square of that length is a square.\n    '''\n    if side >= 1 and side <= 2:\n        return True\n    elif side >= 3 and side <= 4:\n        return True\n    else:\n        return False\ndef is_rectangle(side):\n    '''\n    Write a function that takes a length and determines whether or not a\n    rectangle of that length is a rectangle.\n    '''\n    if side >= 1 and side <= 2:\n        return True\n    elif side >= 3 and side <= 4:\n        return True\n    else:\n        return False\ndef is_square_or_rectangle(side):\n    '''\n    Write a function that takes a length and determines whether or not a\n    square or rectangle of that length is a square or rectangle.\n    '''\n    if side >= 1 and side <= 2:\n        return True\n    elif side >= 3 and side <= 4:\n        return True\n    else:\n        return False\ndef is_rhombus(side):\n    '''\n    Write a function that takes a length and determines whether or not a\n    rhombus of that length is a rhombus.\n    '''\n    if side >= 1 and side <= 3:\n        return True\n    elif side >= 4 and side <= 5:\n        return True\n    else:\n        return False\ndef is_non_rhombus(side):\n    '''\n    Write a function that takes a length and determines whether or not a\n    non-rhombus of that length is a non-rhombus.\n    '''\n    if side >= 1 and side <= 4:\n        return True\n    elif side >= 5 and side <= 6:\n        return True\n    else:\n        return False\ndef is_pentagon(side):\n    '''\n    Write a function that takes a length and determines whether or not a\n    pentagon of that length is a pentagon.\n    '''\n    if side >= 1 and side <= 5:\n        return True\n    else:\n        return False\ndef is_non_pentagon(side):\n    '''\n    Write a function that takes a length and determines whether or not a\n    non-pentagon of that length is a non-pentagon.\n    '''\n    if side >= 1 and side <= 6:\n        return True\n    else:\n        return False\ndef is_equilateral_line(side):\n    '''\n    Write a function that takes a length and determines whether or not a\n    equilateral line of that length is an equilateral line.\n    '''\n    if side >= 1 and side <= 2:\n        return True\n    elif side >= 3 and side <= 4:\n        return True\n    else:\n        return False\ndef is_equilateral_circle(radius):\n    '''\n    Write a function that takes a length and determines whether or not an\n    equilateral circle of that radius is an equilateral circle.\n    '''\n    if radius >= 1 and radius <= 2:\n        return True\n    elif radius >= 3 and radius <= 4:\n        return True\n    else:\n        return False\ndef is_equilateral_triangle(side):",
        "num_ids": 52
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # a = math.sqrt(3) * side / 2\n    a = side / 2\n    return 4 * a * a\n",
        "num_ids": 33
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side / 2\n    area = (3 * math.sqrt(3) / 4) * a**2\n    return area\n",
        "num_ids": 34
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**2\n",
        "num_ids": 8
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(2)/2*side**2\n    \ndef area_pyramid(height,width):\n    '''\n    Write a function to caluclate the area of a pyramid.\n    '''\n    return height*width\n",
        "num_ids": 8
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3)/3*side**2\n",
        "num_ids": 17
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    side=side\n    b=side**(1/2)\n    return (math.sqrt(3)/4)*side**2\n",
        "num_ids": 34
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = (side**2)/2\n    c = math.sqrt(a)\n    area = 4*c\n    return area\n",
        "num_ids": 34
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if type(side)!= float:\n        raise TypeError\n    if side <= 0:\n        raise ValueError\n    return (1/3) * side * side * side\n",
        "num_ids": 43
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    for i in range(n):\n        list[(n - 1) - i] = list[i]\n    for i in range(n - m, n):\n        list[i] = list[i - 1]\n",
        "num_ids": 62
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if not list or not m:\n        return list\n    n = len(list)\n    temp = list[-1]\n    i = n-1\n    while i > m-1:\n        list[i] = list[i-1]\n        i -= 1\n    list[m-1] = temp\n    return list\n",
        "num_ids": 80
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    m = int(m)\n    m_list = list\n    n = len(m_list)\n    if m == 0 or n == 0:\n        print('no change')\n    else:\n        for i in range(m):\n            m_list.append(m_list.pop(0))\n        print(m_list)\nrotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)\nrotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9], -3)\nrotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9], -3)\nrotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9], 0)\nrotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9], -10)\nrotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9], -20)\nrotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9], -10000)\nrotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9], -1000000)\n",
        "num_ids": 297
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "num_ids": 15
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        temp = list.pop()\n        list.insert(0, temp)\n    return list\n",
        "num_ids": 33
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # if m > len(list):\n    #     return list\n    # if m <= 0:\n    #     return list\n    # m = m % len(list)\n    # return list[len(list)-m:] + list[:len(list)-m]\n    # O(n) Time and O(1) Space\n    # Use the last element as pivot\n    # Move all smaller elements to the right side\n    # And move all greater elements to the left side\n    # Initialize new left and right pointer\n    # Swap pivot with the last element\n    # Move pivot to its new position\n    # The new right pointer is the last element from new left\n    # The new left pointer is the first element from new right\n    # Return the new list\n    pivot = list[-1]\n    new_right = list[0:m]\n    new_left = list[m:len(list)]\n    new_left.append(pivot)\n    for i in range(0, len(new_right)):\n        if new_right[i] > pivot:\n            new_left.append(new_right[i])\n            new_right.pop(i)\n    new_right.append(pivot)\n    return new_left + new_right\n",
        "num_ids": 294
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list = list[m:] + list[:m]\n    return list\n",
        "num_ids": 20
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        list.append(list.pop(0))\n",
        "num_ids": 23
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list[:] = list[m:] + list[:m]\n",
        "num_ids": 18
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list = list[m:] + list[:m]\n    return list\n",
        "num_ids": 20
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return True if None in test_tup else False\n",
        "num_ids": 15
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(x == None for x in test_tup)\n",
        "num_ids": 18
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(x is None for x in test_tup)\n",
        "num_ids": 18
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(value is None for value in test_tup)\n",
        "num_ids": 18
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(i is None for i in test_tup):\n        print('None found')\n    else:\n        print('None not found')\n",
        "num_ids": 37
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    assert test_tup!= None\n    for element in test_tup:\n        if element == None:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    test = True\n    if test_tup:\n        for i in test_tup:\n            if i is None:\n                test = False\n                break\n    return test\n",
        "num_ids": 44
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup == None:\n        print('tuples have none value')\n    else:\n        print('tuples have none value')\n",
        "num_ids": 36
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    return False\n",
        "num_ids": 20
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # for num in range(startnum, endnum):\n    #     if all(num % d == 0 for d in range(10)):\n    #         print(num)\n    print([num for num in range(startnum, endnum) if all(num % d == 0 for d in range(10))])\n",
        "num_ids": 76
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: x%startnum == 0 and x%endnum == 0, range(startnum, endnum+1)))\n",
        "num_ids": 36
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [num for num in range(startnum, endnum) if all(x in str(num) for x in list(str(num)))]\n",
        "num_ids": 37
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_each_digit(num):\n        s = str(num)\n        d = [int(i) for i in s]\n        return True if all(i % j == 0 for i,j in zip(d, range(2, 10))) else False\n    return list(filter(divisible_by_each_digit, range(startnum, endnum+1)))\n",
        "num_ids": 93
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits(startnum, endnum):\n        return list(range(startnum, endnum))\n        #return range(startnum, endnum)\n    return divisible_by_digits\n",
        "num_ids": 54
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(range(startnum, endnum + 1))\n",
        "num_ids": 17
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    startnum = int(startnum)\n    endnum = int(endnum)\n    \n    for i in range(startnum, endnum + 1):\n        if (i % 2!= 0) and (i % 3!= 0) and (i % 5!= 0):\n            print(i)\n        elif (i % 2!= 0) and (i % 3 == 0) and (i % 5!= 0):\n            print(i)\n        elif (i % 2 == 0) and (i % 3!= 0) and (i % 5!= 0):\n            print(i)\n        elif (i % 2 == 0) and (i % 3 == 0) and (i % 5!= 0):\n            print(i)\n        elif (i % 2!= 0) and (i % 3!= 0) and (i % 5 == 0):\n            print(i)\n        elif (i % 2!= 0) and (i % 3 == 0) and (i % 5 == 0):\n            print(i)\n        elif (i % 2 == 0) and (i % 3!= 0) and (i % 5 == 0):\n            print(i)\n        elif (i % 2 == 0) and (i % 3 == 0) and (i % 5!= 0):\n            print(i)\n",
        "num_ids": 315
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: x%startnum == 0 and x%endnum == 0, range(startnum, endnum+1)))\n",
        "num_ids": 36
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [x for x in range(startnum, endnum+1) if all([x%int(i) == 0 for i in str(x)])]\n",
        "num_ids": 40
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    #first = sorted(str(i) for i in range(startnum, endnum+1))\n    #print(first)\n    #return first\n    return list(filter(lambda num: len(set(str(num)))==len(set(str(num))), filter(lambda num: all([num%i==0 for i in str(num)]),range(startnum,endnum+1))))\n",
        "num_ids": 96
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r>a and r<0 or a>360 or a<0:\n        return None\n    else:\n        return math.pi*a*r**2\n",
        "num_ids": 41
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    if(a%360==0):\n        return math.pi*r**2\n    return (1/2)*math.pi*r**2*math.sin(math.radians(a))\ndef manhattan_distance(x1,y1,x2,y2):\n    '''\n    Write a function to calculate distance between two points.\n    '''\n    return abs(x1-x2)+abs(y1-y2)\ndef find_num_triangles(x,y):\n    '''\n    Write a function to find number of triangles in a triangle shape. Function takes the x and y coordinates of the vertex as input. Function should return None if the coordinates are not within the triangle.\n    '''\n    if(x>0 and y>0 and x<=0 and y<=0):\n        return 1\n    return None\ndef find_triangle_area(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to find the area of a triangle. Function takes the x, y coordinates of the vertices as input. Function should return None if the coordinates are not within the triangle.\n    '''\n    if(find_num_triangles(x1,y1) and find_num_triangles(x2,y2) and find_num_triangles(x3,y3)):\n        return (0.5*abs(x2*y3-x3*y2-x1*y3+x3*y1+x1*y2-x2*y1))\n    return None\ndef is_palindrome(str1):\n    '''\n    Write a function that checks whether the given string is a palindrome or not. Return True if the string is a palindrome else False\n    '''\n    return str1 == str1[::-1]\ndef product_of_largest_three_numbers(n):\n    '''\n    Write a function that finds product of the three largest numbers among the given numbers\n    '''\n    n.sort(reverse=True)\n    return n[0]*n[1]*n[2]\ndef find_largest_triangle_area(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function that finds the largest triangle area given the coordinates of its vertices. Function takes the coordinates of the vertices as input. Function should return None if the coordinates are not within the triangle.\n    '''\n    if(find_num_triangles(x1,y1) and find_num_triangles(x2,y2) and find_num_triangles(x3,y3)):\n        return max((x2*y3-x3*y2-x1*y3+x3*y1+x1*y2-x2*y1)/2,0)\n    return None\ndef find_number_of_inversions_in_merge_sort(data):\n    '''\n    Write a function that finds number of inversions in the merge sort. This function takes a data array and returns None if the array is empty else a number of inversions.\n    '''\n    if(len(data)==0):\n        return 0\n    return _find_number_of_inversions_in_merge_sort(data,0,len(data)-1)\ndef _find_number_of_inversions_in_merge_sort(data,lo,hi):\n    if(hi-lo<=1):\n        return 0\n    mid=(hi+lo)//2\n    return (1+_find_number_of_inversions_in_merge_sort(data,lo,mid)+_find_number_of_inversions_in_merge_sort(data,mid,hi))\ndef find_number_of_inversions_in_quick_sort(data):\n    '''\n    Write a function that finds number of inversions in the quick sort. This function takes a data array and returns None if the array is empty else a number of inversions.\n    '''\n    if(len(data)==0):\n        return 0\n    return _find_number_of_inversions_in_quick_sort(data,0,len(data)-1)\ndef _find_number_of_inversions_in_quick_sort(data,lo,hi):\n    if(hi-lo<=1):\n        return 0\n    pivot=data[lo]\n    lt,gt=lo,hi\n    while(lo<hi):\n        while(lo<hi and data[hi]>pivot):\n            hi-=1\n        data[lo]=data[hi]\n        while(lo<hi and data[lo]<=pivot):\n            lo+=1\n        data[hi]=data[lo]\n    data[lo]=pivot\n    return _find_number_of_inversions_in_quick_sort(data,lo,lo)+_find_number_of_inversions_in_quick_sort(data,lo+1,hi)\ndef find_number_of_inversions_in_merge_sort_alternate(data):\n    '''\n    Write a function that finds number of inversions in the merge sort. This function takes a data array and returns None if the array is empty else a number of inversions.\n    '''\n    if(len(data)==0):\n        return 0\n    return _find_number_of_inversions_in_merge_sort_alternate(data,0,len(data)-1)\ndef _find_number_of_inversions_in_merge_sort_alternate(data,lo,hi):\n    if(hi-lo<=1):\n        return 0\n    mid=(hi+lo)//2\n    return (1+_find_number_of_inversions_in_merge_sort_alternate(data,lo,mid)+_find_number_of_inversions_in_merge_sort_alternate(data,mid,hi))\ndef find_number_of_inversions_in_quick_sort_alternate(data):\n    '''\n    Write a function that finds number of inversions in the quick sort. This function takes a data array and returns None if the array is empty else a number of inversions.\n    '''\n    if(len(data)==0):\n        return 0\n    return _find_number_of_inversions_in_quick_sort_alternate(data,0,len(data)-1)\ndef _find_number_of_inversions_in_quick_sort_alternate(data,lo,hi):\n    if(hi-lo<=1):\n        return 0\n    pivot=data[lo]\n    lt,gt=lo,hi\n    while(lo<hi):\n        while(lo<hi and data[hi]>pivot):\n            hi-=1\n        data[lo]=data[hi]\n        while(lo<hi and data[lo]<=pivot):\n            lo+=1\n        data[hi]=data[lo]\n    data[lo]=pivot\n    return _find_number_of_inversions_in_quick_sort_alternate(data,lo,lo)+_find_number_of_inversions_in_quick_sort_alternate(data,lo+1,hi)\ndef find_number_of_inversions_in_quick_sort(data):\n    '''\n    Write a function that finds number of inversions in the quick sort. This function takes a data array and returns None if the array is empty else a number of inversions.\n    '''\n    if(len(data)==0):\n        return 0\n    return _find_number_of_inversions_in_quick_sort(data,0,len(data)-1)\ndef _find_number_of_inversions_in_quick_sort(data,lo,hi):\n    if(hi-lo<=1):\n        return 0\n    pivot=data[lo]\n    lt,gt=lo,hi\n    while(lo<hi):\n        while(lo<hi and data[hi]>pivot):\n            hi-=1\n        data[lo]=data[hi]\n        while(lo<hi and data[lo]<=pivot):\n            lo+=1\n        data[hi]=data[lo]\n    data[lo]=pivot\n    return _find_number_of_inversions_in_quick_sort(data",
        "num_ids": 202
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (a > 360):\n        return None\n    else:\n        return math.pi*r**2*math.sin(a*(math.pi/180))\n",
        "num_ids": 42
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r**2*a/180\n",
        "num_ids": 31
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>=360:\n        return None\n    else:\n        return math.pi*(r**2)*(a/360)\ndef rect_area(l,b):\n    '''\n    Write a function to find area of a rectangle. The function takes the length and breadth as inputs. Function should return None if the length and breadth are not greater than 0.\n    '''\n    if l<=0 or b<=0:\n        return None\n    else:\n        return (l*b)\n",
        "num_ids": 31
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r < 0 or a < 0 or a >= 360 or math.pi*r > (2*math.pi):\n        return None\n    return math.pi*r**2*(a/360)*math.sin(a/360)\n",
        "num_ids": 58
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return math.pi*r*r*a/360\n",
        "num_ids": 16
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<0:\n        return None\n    area = math.pi*(r**2)\n    if a>360:\n        return area\n    else:\n        return None\n",
        "num_ids": 45
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        r = float(r)\n        a = float(a)\n        A = math.pi * r**2\n        theta = a * math.pi/180\n        area = A * math.sin(theta)\n        return area\n",
        "num_ids": 73
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    sector_area = r*r*math.sin(a/2)\n    if a >= 360:\n        sector_area = None\n    return sector_area\n",
        "num_ids": 40
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    DP_table = [[0 for i in range(o + 1)] for j in range(n + 1)] \n",
        "num_ids": 56
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Dynamic programming table, 2D array \n    # 1st row is 0 (empty)\n    # 2nd row is 1 (only one character)\n    # 3rd row is 2 (1+1)\n    # 4th row is 2 (1+1+1)\n    # 5th row is 2 (1+1+1+1)\n    #...\n    # Rows are indexed from 0 to n-1 \n    # Columns are indexed from 0 to m-1\n    # Initialize the table as empty \n    dp = [[0 for i in range(len(Y)+1)] for j in range(len(X)+1)] \n    \n    # Fill the table using the optimized dp_table function\n    lcs_of_three_optimized(dp, X, Y, Z) \n    \n    # Initialize result string \n    result = \"\" \n    \n    # To store the result string, follow the steps \n    # in the given explanation \n    i, j, k = len(X)-1, len(Y)-1, len(Z)-1\n    while i >= 0 and j >= 0 and k >= 0: \n        if X[i] == Y[j] == Z[k]: \n            result += X[i] \n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i+1][j] > dp[i][j+1]: \n            i -= 1\n        else: \n            j -= 1\n    return result[::-1] \n",
        "num_ids": 360
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    L = [[0 for x in range(o+1)] for y in range(n+1)] \n",
        "num_ids": 54
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # if a == b == c == 0 then no LCS\n    if len(X)==0 or len(Y)==0 or len(Z)==0:\n        return 0\n    # create a DP table, dp[i][j] = 1 if substring X[i:] and Y[j:] is the LCS\n    dp = [[0 for i in range(len(Y) + 1)] for j in range(len(X) + 1)] \n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            if X[i - 1] == Y[j - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])\n    # for each cell, there are three possibilities:\n    # 1) cell is 0\n    # 2) cell is 1\n    # 3) cell is 2\n    # we need to return the maximum of three possibilities\n    return dp[-1][-1]\n",
        "num_ids": 269
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    dp = [[0 for x in range(len(Y)+1)] for x in range(len(X)+1)] \n",
        "num_ids": 31
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    if m == 0 or n == 0 or o == 0: \n        return 0\n    \n    L = [[0 for i in range(o + 1)] for j in range(m + 1)] \n    \n    \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(o + 1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]: \n                    L[i][j] = L[i-1][j-1] + 1\n                else: \n                    L[i][j] = max(L[i][j-1], L[i-1][j]) \n    return L[m][n] \n",
        "num_ids": 232
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    matrix = [[0 for i in range(len(Z) + 1)] for j in range(len(X) + 1)] \n    for i in range(1, len(X) + 1): \n        for j in range(1, len(Y) + 1): \n            for k in range(1, len(Z) + 1): \n                if (X[i - 1] == Y[j - 1] == Z[k - 1]): \n                    matrix[i][j] = matrix[i - 1][j - 1] + 1\n                else: \n                    matrix[i][j] = max(matrix[i - 1][j], matrix[i][j - 1]) \n    return matrix[len(X)][len(Y)]\n",
        "num_ids": 182
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if len(X) == 0 or len(Y) == 0 or len(Z) == 0:\n        return 0\n    # base cases \n    if X[0] == Y[0] == Z[0]:\n        return 1 + lcs_of_three(X[1:], Y[1:], Z[1:])\n    else:\n        return max(lcs_of_three(X, Y, Z[1:]), lcs_of_three(X[1:], Y, Z[1:]))\n",
        "num_ids": 124
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    # declaring the array for storing the dp values \n    L = [[None]*(n+1) for i in range(m+1)] \n    \n    \"\"\"Following steps build L[m+1][n+1] in bottom up fashion \n    Note: L[i][j] contains length of LCS of X[0..i-1] \n    and Y[0..j-1]\"\"\"\n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n    print(L)\n    # L[m][n] contains the length of LCS of X[0..n-1] & Y[0..m-1]\n    return L[m][n]\n",
        "num_ids": 289
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    \n    dp = [[0 for x in range(p+1)] for y in range(n+1)]\n    \n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j] = 1 + dp[i-1][j-1]\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[m][n]\n",
        "num_ids": 202
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    capital_words = re.findall('\\w+(?=\\s)',str1)\n    return''.join(capital_words)\n",
        "num_ids": 35
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    #output = \"\"\n    if not str1:\n        return \"\"\n    # output += \" \"\n    str1 = str1.strip()\n    # output += str1\n    str1 = re.sub(\"([a-zA-Z])\", r\" \\1\", str1)\n    str1 = re.sub(\"\\s+\", \" \", str1)\n    return str1\n",
        "num_ids": 92
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    result = re.sub(r'\\b[A-Z][a-z]+\\b', r' \\1 ', str1)\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    #s = re.sub('([a-z])([A-Z])', r'\\1 \\2', s)\n    return re.sub(r'([A-Z])([a-z])', r'\\1 \\2', str1).capitalize()\n    #return s.replace(\" \",\"\")\n",
        "num_ids": 77
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    lst1 = []\n    if(isinstance(str1,str)):\n        str1 = str1.split()\n        for i in range(len(str1)):\n            if(str1[i][0].isupper()):\n                lst1.append(str1[i].title())\n            else:\n                lst1.append(str1[i].lower())\n        return \" \".join(lst1)\n    else:\n        raise Exception('Please Enter a valid String')\n",
        "num_ids": 120
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    #str1='    hello world  '\n    #str1='    Thrall Tarralla       '\n    str1=re.sub(r'[A-Z][a-z]*',' ',str1)\n    str1=re.sub(r'\\s+',' ',str1)\n    return str1\n    \nprint(capital_words_spaces('w3resource'))\nprint(capital_words_spaces('w3resource'))\nprint(capital_words_spaces('w3RESOURCE'))\nprint(capital_words_spaces('w3RESOURCE'))\nprint(capital_words_spaces('w3RESOURCE '))\nprint(capital_words_spaces('w3RESOURCE '))\n",
        "num_ids": 174
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    a=str1\n    print(a)\n    b=a.split()\n    print(b)\n    for i in b:\n        if re.match(r'\\w+[A-Z]+',i):\n            z=\" \"\n            print(z)\n        else:\n            print(i)\n        \ncapital_words_spaces('Welcome to the Geeks World')\n",
        "num_ids": 93
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    #return str1.title()\n    return re.sub(\"([a-zA-Z])([^A-Z\\s]+)([A-Z])\", r\"\\1 \\3\",str1)\n",
        "num_ids": 52
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z][^A-Z ]*[a-z]')\n    str1 = str1.split()\n    str1 = pattern.sub(' ', str1)\n    print(str1)\n",
        "num_ids": 62
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    s = str1.split(' ')\n    for i in range(len(s)):\n        if s[i][0] in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            s[i] ='' + s[i]\n    return ''.join(s)\n",
        "num_ids": 74
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    # create an empty list\n    nums = []\n    \n    # traversing the string\n    for i in nums_str:\n        \n        # using try and except to\n        # convert the string into number\n        try:\n            nums.append(int(i))\n        except ValueError:\n            continue\n    \n    # sorting the list\n    nums.sort()\n    \n    # return the numbers list\n    return nums\n",
        "num_ids": 107
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_list = []\n    for str in nums_str:\n        nums_list.append(float(str))\n    nums_list.sort()\n    return nums_list\n    \n",
        "num_ids": 51
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # for each number, find its index\n    def get_index(n):\n        return int(n[n.index(\".\") + 1:])\n",
        "num_ids": 37
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for item in nums_str:\n        num = int(item)\n        nums.append(num)\n    nums.sort()\n    new_nums_str = []\n    for num in nums:\n        num_str = str(num)\n        new_nums_str.append(num_str)\n    return new_nums_str\n",
        "num_ids": 94
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = nums_str.split(\" \")\n    nums_str.sort()\n    return \" \".join(nums_str)\n",
        "num_ids": 39
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=str_num, reverse=True)\n    return nums_str\n    # O(n log n) time | O(n) space\n",
        "num_ids": 44
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: x.split('.')[0])\n",
        "num_ids": 25
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [x.strip() for x in nums_str.split(',')]\n    for i in range(len(nums)):\n        try:\n            nums[i] = int(nums[i])\n        except ValueError:\n            continue\n    nums = sorted(nums)\n    result_str = ','.join([str(x) for x in nums])\n    return result_str\n",
        "num_ids": 103
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=sort_numeric_strings)\n",
        "num_ids": 21
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    from operator import itemgetter\n    def num_compare(a,b):\n        a = a.split(\".\")\n        a = [int(i) for i in a]\n        b = b.split(\".\")\n        b = [int(i) for i in b]\n        return (a<b) - (a>b)\n    nums_str.sort(key = itemgetter(0,1),reverse=True)\n    return \"\".join(sorted(nums_str, key=lambda x: (x[0], x[1])))\n",
        "num_ids": 135
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n",
        "num_ids": 18
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if len(test_list) == 0:\n        test_list.append(test_tup)\n    else:\n        for i in range(len(test_list)):\n            if len(test_list[i]) == len(test_tup):\n                test_list[i] = list(test_list[i])\n                test_list[i].append(test_tup[i])\n                test_list[i] = tuple(test_list[i])\n                break\n            elif len(test_list[i]) < len(test_tup):\n                test_list[i] = list(test_list[i])\n                test_list[i].append(test_tup[i])\n                test_list[i] = tuple(test_list[i])\n                break\n    return test_list\n",
        "num_ids": 198
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    \n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 23
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) or not arr[i]:\n        return False\n    if 2 * i + 2 < len(arr) and arr[i] > arr[2 * i + 2]:\n        return False\n    if 2 * i + 1 < len(arr) and arr[i] > arr[2 * i + 1]:\n        return False\n    return True\n",
        "num_ids": 87
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    l = len(arr)\n    if l <= 1:\n        return True\n    if arr[i] > arr[0]:\n        return False\n    while i < l and arr[i] > arr[i+1]:\n        i += 1\n    return i + 1 == l\n",
        "num_ids": 68
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > (len(arr) - 1):\n        return True\n    else:\n        if arr[i] > arr[2 * i + 1] and arr[i] > arr[2 * i + 2]:\n            return True\n        else:\n            return False\n",
        "num_ids": 65
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] < arr[2 * i + 1] and arr[i] < arr[2 * i + 2]:\n        return True\n    return False\n    \n",
        "num_ids": 42
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    count = 0\n    for j in range(i, len(arr)):\n        if arr[j] < arr[i]:\n            count += 1\n    if count % 2 == 0:\n        print('true')\n    else:\n        print('false')\n",
        "num_ids": 63
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case\n    if i < 1:\n        return True\n    # If left child exists and is less than the current node\n    if i*2 <= len(arr)-1:\n        if arr[i*2-1] > arr[i-1]:\n            return False\n    # If right child exists and is less than the current node\n    if i*2 + 1 <= len(arr)-1:\n        if arr[i*2] > arr[i-1]:\n            return False\n    # If none of the child is less than the current node\n    return True\n",
        "num_ids": 134
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if arr[i] > arr[i//2]:\n        return False\n    return check_min_heap_helper(arr, i//2)\n",
        "num_ids": 50
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] < arr[i-1] and (i * 2) < len(arr) and (i * 2) + 1 < len(arr):\n        print(arr[i], arr[i-1], arr[i*2], arr[i*2+1])\n        if arr[i] > arr[i * 2] or arr[i] > arr[i*2+1]:\n            return False\n    if arr[i] > arr[i-1] and (i * 2) < len(arr) and (i * 2) + 1 < len(arr):\n        print(arr[i], arr[i-1], arr[i*2], arr[i*2+1])\n        if arr[i] < arr[i * 2] or arr[i] < arr[i * 2 + 1]:\n            return False\n    if arr[i] > arr[i-1] and (i * 2) < len(arr) and (i * 2) + 1 < len(arr):\n        print(arr[i], arr[i-1], arr[i*2], arr[i*2+1])\n        if arr[i] > arr[i * 2] or arr[i] > arr[i * 2 + 1]:\n            return False\n    return True\n",
        "num_ids": 300
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n",
        "num_ids": 20
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    print(arr[i], end = \" \")\n    if i == 0:\n        return\n    if arr[i] < arr[i//2]:\n        return\n    else:\n        check_min_heap_helper(arr, (i-1)//2)\n",
        "num_ids": 68
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2) + jacobsthal_num(n-3)\n",
        "num_ids": 82
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # since 5th jacobsthal number is 284\n    n -= 1\n    lst = jacobsthal_list()\n    s = 0\n    for i in range(len(lst)):\n        s += lst[i]\n        if n == s:\n            return i + 1\n    raise Exception(\"jacobsthal_num: \", n)\n",
        "num_ids": 89
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: return 0\n    elif n == 1: return 1\n    elif n == 2: return 1\n    elif n == 3: return 2\n    elif n == 4: return 3\n    elif n == 5: return 5\n    else:\n        L = 6\n        R = n\n        while(R > L):\n            p = (((R - 1) * R) >> 1) + 1\n            if (L <= R) and (p <= L) and (p >= R):\n                break\n            elif (L > R):\n                return \"Invalid value\"\n            else:\n                if (p & 1) == 0:\n                    R = p\n                else:\n                    L = p + 1\n        if L == R:\n            return L\n        elif L == R - 1:\n            return L + 1\n        else:\n            return L + 2\n",
        "num_ids": 208
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    n=int(n)\n    if n==0:\n        return 0\n    if n==1 or n==2:\n        return 1\n    if n==3 or n==4:\n        return 2\n    return n*jacobsthal_num(n-1) + jacobsthal_num(n-2)\n",
        "num_ids": 80
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    from math import sqrt\n    for i in range(n):\n        i_sqr = int(sqrt(i))\n        for j in range(1, i_sqr + 1):\n            if (i-j**2)%(i+j) == 0:\n                return i\n",
        "num_ids": 71
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    sum = 0\n    temp = 0\n    count = 1\n    while count < n:\n        count = count + 1\n        sum = sum + count\n        temp = temp + count\n        if temp == count:\n            count = count + 1\n            temp = 0\n        print(sum, temp)\n    return sum\n",
        "num_ids": 76
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n <= 0: \n        return n \n    if n == 1: \n        return 0\n    if n == 2: \n        return 1\n    # the first two numbers are 0 and 1.\n    # x is the number to be calculated. \n    x = 5\n    # y is the number to be calculated. \n    y = x + 1\n    # storing the last calculated value in last_jacobsthal_num. \n    last_jacobsthal_num = -1\n    while(True): \n        # If x and y are the same, then x+y = x*y. \n        if x == y: \n            return x\n        # else x and y are not the same and x = 5 and y = x+1. \n        if x!= y: \n            # calculate x = 5 and y = x+1. \n            x = 5\n            y = x + 1\n        # else x = 5 and y = x+1\n        last_jacobsthal_num = x\n        x = y\n        y = last_jacobsthal_num + 1\n",
        "num_ids": 262
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1: return 1\n    if n == 2: return 1\n    if n == 3: return 2\n    if n == 4: return 3\n    if n == 5: return 5\n    if n == 6: return 8\n    if n == 7: return 13\n    if n == 8: return 21\n    if n == 9: return 34\n    if n == 10: return 55\n    if n == 11: return 89\n    if n == 12: return 144\n    if n == 13: return 233\n    if n == 14: return 377\n    if n == 15: return 610\n    if n == 16: return 987\n    if n == 17: return 1597\n    if n == 18: return 2584\n    if n == 19: return 4181\n    if n == 20: return 6765\n    if n == 21: return 10946\n    if n == 22: return 17711\n    if n == 23: return 28657\n    if n == 24: return 46368\n    if n == 25: return 75025\n    if n == 26: return 121393\n    if n == 27: return 196418\n    if n == 28: return 317811\n    if n == 29: return 514229\n    if n == 30: return 8717829\n    if n == 31: return 1303679\n    if n == 32: return 22681397\n    if n == 33: return 34741855\n    if n == 34: return 60586961\n    if n == 35: return 110366463\n    if n == 36: return 183903036\n    if n == 37: return 285714298\n    if n == 38: return 4503599627\n    if n == 39: return 805430019\n    if n == 40: return 129626000\n    if n == 41: return 2415781729\n    if n == 42: return 3908816931\n    if n == 43: return 6304425253\n    if n == 44: return 11227253503\n    if n == 45: return 183464000\n    if n == 46: return 2748779069\n    if n == 47: return 5443526757\n    if n == 48: return 9780504606896\n    if n == 49: return 1505101328321\n    if n == 50: return 2882303761517\n    if n == 51: return 40992399879129\n    if n == 52: return 6281318559423\n    if n == 53: return 10997000374797\n    if n == 54: return 17486945196335\n    if n == 55: return 2612132971167\n    if n == 56: return 43349443765112\n    if n == 57: return 70140873344963\n    if n == 58: return 11027257586269\n    if n == 59: return 18454918283379\n    if n == 60: return 2865716660105\n    if n == 61: return 4611686018427\n    if n == 62: return 7502534246580\n    if n == 63: return 12795869125441\n    if n == 64: return 22724297565322\n    if n == 65: return 37689926757877\n    if n == 66: return 54975581398883\n    if n == 67: return 81593329852479\n    if n == 68: return 12777522070475\n    if n == 69: return 24159194296875\n    if n == 70: return 39571055138723\n    if n == 71: return 6686090277777\n    if n == 72: return 11142783656359\n    if n == 73: return 17711537020751\n    if n == 74: return 29175921836735\n    if n == 75: return 47152300803711\n    if n == 76: return 71787769335938\n    if n == 77: return 10333671669518\n    if n == 78: return 17542528261719\n    if n == 79: return 26554424657927\n    if n == 80: return 43349443765112\n    if n == 81: return 70140873344963\n    if n == 82: return 11027257586269\n    if n == 83: return 18454918283379\n    if n == 84: return 2865716660105\n    if n == 85: return 4611686018427\n    if n == 86: return 7502534246580\n    if n == 87: return 12795869125441\n    if n == 88: return 22724297565322\n    if n == 89: return 37689926757877\n    if n == 90: return 54975581398883\n    if n == 91: return 81593329852479\n    if n == 92: return 12777522070475\n    if n == 93: return 24159194296875\n    if n == 94: return 39571055138723\n    if n == 95: return 6686090277777\n    if n == 96: return 11142783656359\n    if n == 97: return 17711537020751\n    if n == 98: return 29175921836735\n    if n == 99: return 47152300803711\n    if n == 100: return 71787769335938\n    if n == 101: return 10333671669518\n    if n == 102: return 17542528261719\n    if n == 103: return 26554424657927\n    if n == 104: return 43349443765112\n    if n == 105: return 70140873344963\n    if n == 106: return 11027257586269\n    if n == 107: return 18454918283379\n    if n == 108: return 2865716660105\n    if n == 109: return 4611686018427\n    if n == 110: return 7502534246580\n    if n == 111: return 12795869125441\n    if n == 112: return 22724297565322\n    if n == 113: return 37689926757877\n    if n == 114: return 54975581398883\n    if n == 115: return 81593329852479\n    if n == 116: return 12777522070475\n    if n == 117: return 24159194296875\n    if n == 118: return 39571055138723\n    if n == 119: return 6686090277777\n    if n == 120: return 11142783656359\n    if n == 121: return 17711537020751\n    if n == 122: return 29175921836735\n    if n == 123: return 47152300803711\n    if n == 124: return 71787769335938\n    if n == 125: return 10333671669518\n    if n == 126: return 17542528261719\n    if n == 127: return 26554424657927\n    if n == 128: return 43349443765112\n    if n == 129: return 70140873344963\n    if n == 130: return 11027257586269\n    if n == 131: return 18454918283379\n    if n == 132: return 2865716660105\n    if n == 133: return 4611686018427\n    if n == 134: return 7502534246580\n    if n == 135: return 12795869125441\n    if n == 136: return 22724297565322\n    if n == 137: return 37689926757877\n    if n == 138: return 54975581398883\n    if n == 139: return 81593329852479\n    if n == 140: return 12777522070475\n    if n == 141: return 24159194296875\n    if n == 142: return 39571055138723\n    if n == 143: return 6686090277777\n    if n == 144: return 11142783656359\n    if n == 145: return 17711537020751\n    if n == 146: return 29175921836735\n    if n == 147: return 47152300803711\n    if n == 148: return 717",
        "num_ids": 1950
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    import math\n    return ((((n+1)**(n+1)) / 2) % (math.factorial(n+1)))\n",
        "num_ids": 35
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    a, b = 1, 2\n    for i in range(n):\n        a, b = a+b, a\n    return a\n",
        "num_ids": 35
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # import heapq\n    # s = []\n    # heapq.heapify(s)\n    # heapq.heappush(s, (1, 1))\n    # heapq.heappush(s, (3, 3))\n    # heapq.heappush(s, (4, 4))\n    # heapq.heappush(s, (5, 5))\n    # heapq.heappush(s, (2, 2))\n    # heapq.heappush(s, (6, 6))\n    # heapq.heappush(s, (7, 7))\n    # heapq.heappush(s, (8, 8))\n    # heapq.heappush(s, (9, 9))\n    # print heapq.nsmallest(3, s)\n    # print heapq.nsmallest(5, s)\n    # print heapq.nlargest(3, s)\n    # print heapq.nlargest(5, s)\n    # print heapq.nlargest(K, s)\n    # print heapq.nlargest(1, s)\n",
        "num_ids": 265
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # to find minimum k elements in a list\n    if K >= len(test_list) or len(test_list) == 0:\n        return []\n",
        "num_ids": 38
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) == 0:\n        return None\n    if K == 0:\n        return test_list\n    if K > len(test_list):\n        return None\n    if len(test_list) == 1:\n        return test_list\n    \n    if len(test_list) == K:\n        return test_list\n    \n    \n    left = test_list[0:K]\n    right = test_list[K:]\n    \n    min_val = left[0]\n    \n    if left[len(left) - 1][1] < min_val[1]:\n        min_val = left[len(left) - 1]\n    \n    for i in range(len(left)):\n        if left[i][1] < min_val[1]:\n            min_val = left[i]\n        \n    for i in range(len(right)):\n        if right[i][1] < min_val[1]:\n            min_val = right[i]\n            \n    return left + right\n    \n    \n    '''\n    Time complexity - O(nlogk)\n    Space complexity - O(n)\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    new_list = []\n    for i in range(0, len(test_list)):\n        new_list.append((test_list[i][0], test_list[i][1]))\n    new_list = sorted(new_list, key=lambda x: x[0])\n    min_k_list = []\n    for i in range(0, K):\n        min_k_list.append(new_list[i])\n    for i in range(K, len(new_list)):\n        if new_list[i][0] < min_k_list[0][0]:\n            min_k_list[0] = new_list[i]\n        else:\n            for j in range(0, K):\n                if new_list[i][0] < min_k_list[j][0]:\n                    min_k_list.insert(j, new_list[i])\n                    break\n    return min_k_list\n    '''\n    Without using lambda, the above function is still O(n^2)\n    Time complexity: O(n^2)\n    Space complexity: O(n^2)\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    #If len(test_list) < k then return all\n    if len(test_list) < K:\n        return test_list\n    #If k is smaller than half of length of test_list, return all\n    if K < K//2 + 1:\n        return test_list\n    #Make a list of tuples of length of K\n    min_list = []\n    for i in range(K):\n        min_list.append(min(test_list))\n        test_list.remove(min(test_list))\n    #Sort list of length of K\n    min_list.sort()\n    return min_list\n",
        "num_ids": 150
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    '''\n    def min_k(test_list, K):\n        result = []\n        test_list.sort()\n        for k in range(K):\n            result.append(test_list[k])\n        return result\n    '''\n    '''\n    def min_k(test_list, K):\n        return (sorted(test_list)[0:K])\n    '''\n    def min_k(test_list, K):\n        test_list.sort()\n        return (test_list[0:K])\n    '''\n    def min_k(test_list, K):\n        result = []\n        for i in range(K):\n            min_el = min(test_list)\n            result.append(min_el)\n            test_list.remove(min_el)\n        return result\n    '''\n    def min_k(test_list, K):\n        result = []\n        for i in range(K):\n            min_el = test_list[0]\n            result.append(min_el)\n            test_list.remove(min_el)\n        return result\n    '''\n    '''\n    def min_k(test_list, K):\n        result = []\n        for i in range(K):\n            min_el = test_list[0]\n            result.append(min_el)\n            test_list.remove(min_el)\n        return result\n    '''\n    '''\n    def min_k(test_list, K):\n        result = []\n        while len(test_list) > 0:\n            result.append(test_list[0])\n            test_list.remove(test_list[0])\n        return result\n    '''\n    '''\n    def min_k(test_list, K):\n        result = []\n        while len(test_list) > 0 and K > 0:\n            result.append(test_list[0])\n            test_list.remove(test_list[0])\n            K -= 1\n        return result\n    '''\n    def min_k(test_list, K):\n        result = []\n        while len(test_list) > 0 and K > 0:\n            result.append(test_list[0])\n            test_list.remove(test_list[0])\n            K -= 1\n        return result\n",
        "num_ids": 71
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    count = 0\n    min_k = (0,0)\n    for i in range(len(test_list)):\n        count += 1\n        if count < K:\n            if test_list[i][0] < min_k[0]:\n                min_k = (test_list[i][0], test_list[i][1])\n    return min_k\n",
        "num_ids": 91
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # list_len = len(test_list)\n    # record_count = 0\n    # minimum_k = -1\n    # minimum_k_tuple = ()\n    # for i in range(0, list_len):\n    #     if record_count == K:\n    #         if minimum_k == -1 or minimum_k_tuple[-1] > test_list[i][-1]:\n    #             minimum_k = record_count\n    #             minimum_k_tuple = test_list[i]\n    #         record_count = 0\n    #     else:\n    #         record_count += 1\n    # print(minimum_k_tuple)\n    # print(minimum_k)\n    return (min(test_list, key=lambda x:x[-1]))[-1]\n",
        "num_ids": 198
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    n = len(test_list)\n    if K >= n:\n        return test_list\n    else:\n        return test_list[:K]\n",
        "num_ids": 39
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # code here\n    k = 0\n    temp = test_list[0]\n    for i in test_list:\n        if temp > i:\n            temp = i\n    for i in test_list:\n        if i == temp and k < K:\n            k += 1\n        else:\n            break\n    print(k)\n",
        "num_ids": 81
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index = []\n    i = 0\n    while i < len(l1):\n        index.append(l1.index(l1[i]))\n        i = i + 1\n    i = 0\n    while i < len(l2):\n        if l2.index(l2[i]) in index:\n            index.remove(l2.index(l2[i]))\n        i = i + 1\n    i = 0\n    while i < len(l3):\n        if l3.index(l3[i]) in index:\n            index.remove(l3.index(l3[i]))\n        i = i + 1\n    return index\n",
        "num_ids": 160
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1 = set(l1)\n    l2 = set(l2)\n    l3 = set(l3)\n    #create empty list \n    common = []\n    for i in l1:\n        if i in l2 and i in l3:\n            common.append(i)\n    return common\n",
        "num_ids": 77
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    final = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    final.append(l1[i])\n    return final\n",
        "num_ids": 81
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    '''\n    result = []\n    for i in l1:\n        if i in l2 and i in l3:\n            result.append(i)\n    return result\n    '''\n    return [i for i in l1 if i in l2 and i in l3]\n",
        "num_ids": 23
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    for i in l1:\n        if l1.count(i) == l2.count(i) and l1.count(i) == l3.count(i):\n            return i\n",
        "num_ids": 48
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    #a = set(l1) & set(l2) & set(l3)\n    a = [i for i in l1 if i in l2 and i in l3]\n    return a\n",
        "num_ids": 50
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            result_list.append(l1[i])\n    return result_list\n",
        "num_ids": 67
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1 = set(l1)\n    l2 = set(l2)\n    l3 = set(l3)\n    common = set()\n    for i in l1:\n        if i in l2 and i in l3:\n            common.add(i)\n    return common\n",
        "num_ids": 71
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            if l1[i] in l3:\n                index_list.append(i)\n    for i in range(len(l2)):\n        if l2[i] in l3:\n            if l2[i] in l1:\n                index_list.append(i)\n    for i in range(len(l3)):\n        if l3[i] in l1:\n            if l3[i] in l2:\n                index_list.append(i)\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            if l1[i] in l3:\n                index_list.append(i)\n    for i in range(len(l2)):\n        if l2[i] in l3:\n            if l2[i] in l1:\n                index_list.append(i)\n    for i in range(len(l3)):\n        if l3[i] in l1:\n            if l3[i] in l2:\n                index_list.append(i)\n    for i in range(len(l1)):\n        if l1[i] in l3:\n            if l1[i] in l2:\n                index_list.append(i)\n    for i in range(len(l2)):\n        if l2[i] in l3:\n            if l2[i] in l1:\n                index_list.append(i)\n    for i in range(len(l3)):\n        if l3[i] in l1:\n            if l3[i] in l2:\n                index_list.append(i)\n    if len(index_list) == 0:\n        common_list = l1\n    else:\n        common_list = list(set(l1) & set(l2) & set(l3))\n    return common_list\n",
        "num_ids": 494
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    #your code here\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common.append(l1[i])\n    return common\n",
        "num_ids": 62
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the array\n    numbers.sort()\n    # Get the last index, which is the second smallest number\n    index = 0\n    for i in range(len(numbers)):\n        if numbers[i] == min(numbers[:i+1]):\n            index = i\n            break\n    # Return the second smallest number\n    return numbers[index+1]\n",
        "num_ids": 91
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n",
        "num_ids": 16
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return min(numbers, key=numbers.count)\n",
        "num_ids": 17
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return numbers.pop(numbers.index(min(numbers)))\n",
        "num_ids": 19
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n",
        "num_ids": 16
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n",
        "num_ids": 12
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n",
        "num_ids": 16
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = numbers.copy()\n    numbers.sort()\n    return numbers[1]\n",
        "num_ids": 25
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n",
        "num_ids": 16
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # convert numbers to a set and remove duplicates\n    numbers = set(numbers)\n    # sort the list and find the element with the smallest difference to the smallest element\n    numbers = sorted(numbers)\n    diffs = []\n    for i in range(1, len(numbers)):\n        diff = numbers[i] - numbers[i - 1]\n        diffs.append(diff)\n    # return the element with the smallest difference to the smallest element\n    return min(diffs)\n",
        "num_ids": 119
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a+b'\n    if re.search(pattern,text):\n        return 'Match found!'\n    else:\n        return 'No Match'\ndef text_match_one_zero(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a+b'\n    if re.search(pattern,text):\n        return 'Match found!'\n    else:\n        return 'No Match'\ndef text_match_zero_one_two(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b', and then by two or more 'c'. https://www.w3resource.com/python-exercises/re/python-re-exercise-4.php\n    '''\n    pattern = r'a+b(?:c)+'\n    if re.search(pattern,text):\n        return 'Match found!'\n    else:\n        return 'No Match'\ndef text_match_one_zero_two(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b', and then by two or more 'c'. https://www.w3resource.com/python-exercises/re/python-re-exercise-4.php\n    '''\n    pattern = r'a+b(?:c)+'\n    if re.search(pattern,text):\n        return 'Match found!'\n    else:\n        return 'No Match'\ndef text_match_one_zero_two_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b', and then by two or more 'c', and then by three or more 'd'. https://www.w3resource.com/python-exercises/re/python-re-exercise-4.php\n    '''\n    pattern = r'a+b(?:c)+d(?:e)+'\n    if re.search(pattern,text):\n        return 'Match found!'\n    else:\n        return 'No Match'\ndef text_match_two_zero_two_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by two or more 'b', and then by two or more 'c', and then by three or more 'd'. https://www.w3resource.com/python-exercises/re/python-re-exercise-4.php\n    '''\n    pattern = r'a+b(?:c)+d(?:e)+'\n    if re.search(pattern,text):\n        return 'Match found!'\n    else:\n        return 'No Match'\ndef text_match_one_zero_two_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b', and then by two or more 'c', and then by three or more 'd'. https://www.w3resource.com/python-exercises/re/python-re-exercise-4.php\n    '''\n    pattern = r'a+b(?:c)+d(?:e)+'\n    if re.search(pattern,text):\n        return 'Match found!'\n    else:\n        return 'No Match'\ndef text_match_two_zero_two(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by two or more 'b', and then by two or more 'c'. https://www.w3resource.com/python-exercises/re/python-re-exercise-5.php\n    '''\n    pattern = r'a+b(?:c)+'\n    if re.search(pattern,text):\n        return 'Match found!'\n    else:\n        return 'No Match'\ndef text_match_two_zero_two_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by two or more 'b', and then by two or more 'c', and then by three or more 'd'. https://www.w3resource.com/python-exercises/re/python-re-exercise-5.php\n    '''\n    pattern = r'a+b(?:c)+d(?:e)+'\n    if re.search(pattern,text):\n        return 'Match found!'\n    else:\n        return 'No Match'\ndef text_match_one_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b', and then by one or more 'c'. https://www.w3resource.com/python-exercises/re/python-re-exercise-6.php\n    '''\n    pattern = r'a+b(?:c)+'\n    if re.search(pattern,text):\n        return 'Match found!'\n    else:\n        return 'No Match'\ndef text_match_zero_one_one(text):\n    '''\n    Write a function that matches a string that has zero or more 'a', followed by one or more 'b', and then by one or more 'c'. https://www.w3resource.com/python-exercises/re/python-re-exercise-6.php\n    '''\n    pattern = r'a+b(?:c)+'\n    if re.search(pattern,text):\n        return 'Match found!'\n    else:\n        return 'No Match'\ndef text_match_one_zero_one_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b', followed by one or more 'c'. https://www.w3resource.com/python-exercises/re/python-re-exercise-6.php\n    '''\n    pattern = r'a+b(?:c)+'\n    if re.search(pattern,text):\n        return 'Match found!'\n    else:\n        return 'No Match'\ndef text_match_one_zero_one_more_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b', followed by one or more 'c', and then by three or more 'd'. https://www.w3resource.com/python-exercises/re/python-re-exercise-6.php\n    '''\n    pattern = r'a+b(?:c)+d(?:e)+'\n    if re.search(pattern,text):\n        return 'Match found!'\n    else:\n        return 'No Match'\ndef text_match_two_zero_one_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by two or more 'b', followed by one or more 'c', and then by three or more 'd'. https://www.w3resource.com/python-exercises/re/python-re-exercise-6.php\n    '''\n    pattern = r'a+b(?:c)+d(?:e)+'\n    if re.search(pattern,text):\n        return 'Match found!'\n    else:\n        return 'No Match'\ndef text_match_zero_one_one_more(text):\n    '''\n    Write a function that matches a string that has zero or more 'a', followed by one or more 'b', and then by one or more 'c'. https://www.w3resource.com/python-exercises/re/python-re-exercise-6.php\n    '''\n    pattern = r'a+b(?:c)+'\n    if re.search(pattern,text):\n        return 'Match found!'\n    else:\n        return 'No Match'\ndef text_match_one_zero_one_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b', followed by one or more 'c'. https://www.w3resource.com/python-exercises/re/python-re-exercise-6.php\n    '''\n    pattern = r'a+b(?:c)",
        "num_ids": 14
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #return True if pattern occurs in text otherwise False\n    pattern = re.compile(r'a.*b')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_zero_plus_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b'.\n    '''\n    #return True if pattern occurs in text otherwise False\n    pattern = re.compile(r'a+b')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_one_plus_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b'.\n    '''\n    #return True if pattern occurs in text otherwise False\n    pattern = re.compile(r'a+b')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_zero_one_plus_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b'.\n    '''\n    #return True if pattern occurs in text otherwise False\n    pattern = re.compile(r'a.+b')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_zero_one_plus_one_non_capturing(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b'.\n    '''\n    #return True if pattern occurs in text otherwise False\n    pattern = re.compile(r'a(?:.+?)b')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_zero_one_plus_one_non_capturing(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b'.\n    '''\n    #return True if pattern occurs in text otherwise False\n    pattern = re.compile(r'a(?:.+?)b')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_one_plus_one_non_capturing(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b'.\n    '''\n    #return True if pattern occurs in text otherwise False\n    pattern = re.compile(r'(?:a)+b')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_one_plus_one_non_capturing(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b'.\n    '''\n    #return True if pattern occurs in text otherwise False\n    pattern = re.compile(r'(?:a)+b')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_zero_one_plus_one_non_capturing(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b'.\n    '''\n    #return True if pattern occurs in text otherwise False\n    pattern = re.compile(r'a(?:.+?)b')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_one_plus_one_non_capturing(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b'.\n    '''\n    #return True if pattern occurs in text otherwise False\n    pattern = re.compile(r'(?:a)+b')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_zero_one_plus_one_non_capturing(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b'.\n    '''\n    #return True if pattern occurs in text otherwise False\n    pattern = re.compile(r'a(?:.+?)b')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_one_plus_one_non_capturing(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b'.\n    '''\n    #return True if pattern occurs in text otherwise False\n    pattern = re.compile(r'(?:a)+b')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_zero_one_plus_one_non_capturing_newline(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b'.\n    '''\n    #return True if pattern occurs in text otherwise False\n    pattern = re.compile(r'a(?:.+?)b')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_zero_one_plus_one_non_capturing_newline(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b'.\n    '''\n    #return True if pattern occurs in text otherwise False\n    pattern = re.compile(r'a(?:.+?)b')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_one_plus_one_non_capturing_newline(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b'.\n    '''\n    #return True if pattern occurs in text otherwise False\n    pattern = re.compile(r'(?:a)+b')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_one_plus_one_non_capturing_newline(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b'.\n    '''\n    #return True if pattern occurs in text otherwise False\n    pattern = re.compile(r'(?:a)+b')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_zero_one_plus_one_non_capturing_newline(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b'.\n    '''\n    #return True if pattern occurs in text otherwise False\n    pattern = re.compile(r'a(?:.+?)b')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_one_plus_one_non_capturing_newline(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b'.\n    '''\n    #return True if pattern occurs in text otherwise False\n    pattern = re.compile(r'(?:a)+b')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_zero_one_plus_one_newline(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b'.\n    '''\n    #return True if pattern occurs in text otherwise False\n    pattern = re.compile(r'a(?:.+?)b')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_zero_one_plus_one_newline(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b'.\n    '''\n    #return True if pattern occurs in text otherwise False\n    pattern = re.compile(r'a(?:.+?)b')\n    if re.search(pattern,text):\n        return True\n    return False\ndef text_match_one_plus_one_non_capturing_newline(text):\n    '''\n    Write a function that matches ",
        "num_ids": 9
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #match = re.search(r\"a+b\", text)\n    #match = re.search(r\"a(b)+\", text)\n    match = re.search(r\"a(b)+\", text)\n    if match:\n        return True\n    else:\n        return False\n",
        "num_ids": 71
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a(b+)')\n    print(re.findall(pattern,text))\n    \ndef string_slice_one_two(text):\n    '''\n    Write a function that takes in a string of words (separated by whitespace) and a length, and returns the first (length) words.\n    '''\n    words = text.split()\n    print(words[:length])\n",
        "num_ids": 19
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.findall('a+b',text)\n    return result\n",
        "num_ids": 21
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.search(\"a.b\",text):\n        return 1\n    else:\n        return 0\ndef text_match_zero_one_no_title(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. (No Title) https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.search(\"^a.b\",text):\n        return 1\n    else:\n        return 0\n",
        "num_ids": 28
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search('a+b', text)\n    if match:\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = re.match(r'a(?:b)+', text)\n    if text:\n        return text.group(0)\n    else:\n        return None\n    \n",
        "num_ids": 44
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search('a[ab]', text)\n",
        "num_ids": 16
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r\"^a+b$\", text)\n",
        "num_ids": 19
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pairs = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] == test_list[i + 1][::-1]:\n            pairs += 1\n    return pairs\n",
        "num_ids": 56
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #given_list = list(test_list)\n    dict_pairs = {}\n    for word in test_list:\n        word_rev = word[::-1]\n        if word_rev in dict_pairs:\n            dict_pairs[word_rev] += 1\n        else:\n            dict_pairs[word_rev] = 1\n    count = 0\n    for key, value in dict_pairs.items():\n        if key!= value:\n            count += 1\n    return count\n",
        "num_ids": 122
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    print(count)\n",
        "num_ids": 66
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # for a list of length n, we can consider 2 pairs\n    # we can consider the first and the last in the list and count the reverse pairs\n    # what if we count the pairs of 2nd to n-2nd in the list\n    '''\n    input: \"aacecaa\"\n    output: 2\n    '''\n    # if we say that the first element is the element we are looking for in the middle of the string\n    # if we say that the last element is the element we are looking for in the middle of the string\n    # we can count the number of times we have seen the elements\n    # when we count them in the middle of the string, we have to account for the edge cases\n    # to have an even length, we need to assume that the last element is the same as the first element\n    '''\n    input: \"aacecaa\"\n    output: 2\n    '''\n    # lets say we have two elements a and e\n    # we can see that the elements are at indexes 2 and 3\n    # so we count the element e as we seen it in the middle\n    # when we see it again we count e again\n    # this is a repeated element\n    '''\n    input: \"aacecaa\"\n    output: 3\n    '''\n    # the second example of counting pairs of reverse strings\n    '''\n    input: \"abac\"\n    output: 2\n    '''\n    # the elements are at indexes 0 and 1\n    # if we count the element at index 0, we see it again\n    # but we don't count it again\n    '''\n    input: \"abac\"\n    output: 1\n    '''\n    # if we count the element at index 0 we see it, and we also see it again\n    # so we add it twice\n    '''\n    input: \"abac\"\n    output: 3\n    '''\n    # if we count the element at index 1, we see it twice\n    # and we also see it again\n    # so we add it twice\n    '''\n    input: \"abac\"\n    output: 4\n    '''\n    # if we count the element at index 2, we see it twice\n    # and we also see it again\n    # so we add it twice\n    '''\n    input: \"abac\"\n    output: 6\n    '''\n    # if we count the element at index 3, we see it twice\n    # and we also see it again\n    # so we add it twice\n    '''\n    input: \"abac\"\n    output: 8\n    '''\n    # if we count the element at index 4, we see it twice\n    # and we also see it again\n    # so we add it twice\n    '''\n    input: \"abac\"\n    output: 10\n    '''\n    # if we count the element at index 5, we see it twice\n    # and we also see it again\n    # so we add it twice\n    '''\n    input: \"abac\"\n    output: 12\n    '''\n    # if we count the element at index 6, we see it twice\n    # and we also see it again\n    # so we add it twice\n    '''\n    input: \"abac\"\n    output: 14\n    '''\n    # if we count the element at index 7, we see it twice\n    # and we also see it again\n    # so we add it twice\n    '''\n    input: \"abac\"\n    output: 16\n    '''\n    # if we count the element at index 8, we see it twice\n    # and we also see it again\n    # so we add it twice\n    '''\n    input: \"abac\"\n    output: 18\n    '''\n    # if we count the element at index 9, we see it twice\n    # and we also see it again\n    # so we add it twice\n    '''\n    input: \"abac\"\n    output: 20\n    '''\n    # if we count the element at index 10, we see it twice\n    # and we also see it again\n    # so we add it twice\n    '''\n    input: \"abac\"\n    output: 22\n    '''\n    # if we count the element at index 11, we see it twice\n    # and we also see it again\n    # so we add it twice\n    '''\n    input: \"abac\"\n    output: 24\n    '''\n    # if we count the element at index 12, we see it twice\n    # and we also see it again\n    # so we add it twice\n    '''\n    input: \"abac\"\n    output: 26\n    '''\n    # if we count the element at index 13, we see it twice\n    # and we also see it again\n    # so we add it twice\n    '''\n    input: \"abac\"\n    output: 28\n    '''\n    # if we count the element at index 14, we see it twice\n    # and we also see it again\n    # so we add it twice\n    '''\n    input: \"abac\"\n    output: 30\n    '''\n    # if we count the element at index 15, we see it twice\n    # and we also see it again\n    # so we add it twice\n    '''\n    input: \"abac\"\n    output: 32\n    '''\n    # if we count the element at index 16, we see it twice\n    # and we also see it again\n    # so we add it twice\n    '''\n    input: \"abac\"\n    output: 34\n    '''\n    # if we count the element at index 17, we see it twice\n    # and we also see it again\n    # so we add it twice\n    '''\n    input: \"abac\"\n    output: 36\n    '''\n    # if we count the element at index 18, we see it twice\n    # and we also see it again\n    # so we add it twice\n    '''\n    input: \"abac\"\n    output: 38\n    '''\n    # if we count the element at index 19, we see it twice\n    # and we also see it again\n    # so we add it twice\n    '''\n    input: \"abac\"\n    output: 40\n    '''\n    # if we count the element at index 20, we see it twice\n    # and we also see it again\n    # so we add it twice\n    '''\n    input: \"abac\"\n    output: 42\n    '''\n    # if we count the element at index 21, we see it twice\n    # and we also see it again\n    # so we add it twice\n    '''\n    input: \"abac\"\n    output: 44\n    '''\n    # if we count the element at index 22, we see it twice\n    # and we also see it again\n    # so we add it twice\n    '''\n    input: \"abac\"\n    output: 46\n    '''\n    # if we count the element at index 23, we see it twice\n    # and we also see it again\n    # so we add it twice\n    '''\n    input: \"abac\"\n    output: 48\n    '''\n    # if we count the element at index 24, we see it twice\n    # and we also see it again\n    # so we add it twice\n    '''\n    input: \"abac\"\n    output: 50\n    '''\n    # if we count the element at index 25, we see it twice\n    # and we also see it again\n    # so we add it twice\n    '''\n    input: \"abac\"\n    output: 52\n    '''\n    # if we count the element at index 26, we see it twice\n    # and we also see it again\n    # so we add it twice\n    '''\n    input: \"abac\"\n    output: 54\n    '''\n    # if we count the element at index 27, we see it twice\n    # and we also see it again\n    # so we add it twice\n    '''\n    input: \"abac\"\n    output: 56\n    '''\n    # if we count the element at index 28, we see it twice\n    # and we also see it again\n    # so we add it twice\n    '''\n    input: \"abac\"\n    output: 58\n    '''\n    # if we count the element at index 29, we see it twice\n    # and we also see it again\n    # so we add it twice",
        "num_ids": 34
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # given_list = test_list\n    # print(given_list)\n    # given_list = given_list.split(\" \")\n    # for i in range(0,len(given_list)):\n    #     given_list[i] = given_list[i][::-1]\n    # print(given_list)\n",
        "num_ids": 83
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # 1. Declare a set for storing the index values\n    # 2. Make a set with the all the indexes\n    # 3. Populate the set with the index value\n    # 4. Populate the counter with 0\n    # 5. While the lenght of the test_list is greater than 1\n    # 6. Store the index value from the list\n    # 7. Loop from the index value to the length of the list\n    # 8. Populate the set with the index value\n    # 9. Get the difference between the index and the length\n    # 10. If the difference is less than 0, set the count to 1\n    # 11. Else, set the count to 0\n    # 12. Increment the counter by 1\n    # 13. Remove the last element\n    # 14. Loop from 0 to the length - 1\n    # 15. While the lenght of the list is greater than 1\n    # 16. Populate the set with the index value\n    # 17. Get the difference between the index and the length\n    # 18. If the difference is less than 0, set the count to 1\n    # 19. Else, set the count to 0\n    # 20. Increment the counter by 1\n    # 21. Remove the last element\n    # 22. Loop from 0 to the length - 1\n    # 23. Store the count in a final list\n    # 24. Return the final list\n    \n    final_list = []\n    index_set = set()\n    \n    for index in range(0, len(test_list)):\n        \n        # Populate the set\n        index_set.add(test_list[index])\n        \n        # Increment the counter\n        count = 0\n        \n        # Loop from the index to the length of the list\n        for i in range(0, len(test_list)):\n            \n            # Populate the set\n            index_set.add(test_list[i])\n            \n            # Get the difference between the index and the length\n            diff = abs(index - len(test_list))\n            \n            # If the difference is less than 0, set the count to 1\n            if diff < 0:\n                count += 1\n            \n            # Else, set the count to 0\n            else:\n                count = 0\n            \n            # Increment the counter\n            count += 1\n            \n            # Remove the last element\n            test_list.pop()\n            \n            # Loop from 0 to the length - 1\n            for i in range(0, len(test_list)):\n                \n                # Populate the set\n                index_set.add(test_list[i])\n                \n                # Get the difference between the index and the length\n                diff = abs(index - len(test_list))\n                \n                # If the difference is less than 0, set the count to 1\n                if diff < 0:\n                    count += 1\n                \n                # Else, set the count to 0\n                else:\n                    count = 0\n                \n                # Increment the counter\n                count += 1\n                \n                # Remove the last element\n                test_list.pop()\n                \n                # Loop from 0 to the length - 1\n                for i in range(0, len(test_list)):\n                    \n                    # Populate the set\n                    index_set.add(test_list[i])\n                    \n                    # Get the difference between the index and the length\n                    diff = abs(index - len(test_list))\n                    \n                    # If the difference is less than 0, set the count to 1\n                    if diff < 0:\n                        count += 1\n                    \n                    # Else, set the count to 0\n                    else:\n                        count = 0\n                    \n                    # Increment the counter\n                    count += 1\n                    \n                    # Remove the last element\n                    test_list.pop()\n                    \n                    # Loop from 0 to the length - 1\n                    for i in range(0, len(test_list)):\n                        \n                        # Populate the set\n                        index_set.add(test_list[i])\n                        \n                        # Get the difference between the index and the length\n                        diff = abs(index - len(test_list))\n                        \n                        # If the difference is less than 0, set the count to 1\n                        if diff < 0:\n                            count += 1\n                        \n                        # Else, set the count to 0\n                        else:\n                            count = 0\n                        \n                        # Increment the counter\n                        count += 1\n                        \n                        # Remove the last element\n                        test_list.pop()\n                        \n                        # Loop from 0 to the length - 1\n                        for i in range(0, len(test_list)):\n                            \n                            # Populate the set\n                            index_set.add(test_list[i])\n                            \n                            # Get the difference between the index and the length\n                            diff = abs(index - len(test_list))\n                            \n                            # If the difference is less than 0, set the count to 1\n                            if diff < 0:\n                                count += 1\n                            \n                            # Else, set the count to 0\n                            else:\n                                count = 0\n                            \n                            # Increment the counter\n                            count += 1\n                            \n                            # Remove the last element\n                            test_list.pop()\n                            \n                            # Loop from 0 to the length - 1\n                            for i in range(0, len(test_list)):\n                                \n                                # Populate the set\n                                index_set.add(test_list[i])\n                                \n                                # Get the difference between the index and the length\n                                diff = abs(index - len(test_list))\n                                \n                                # If the difference is less than 0, set the count to 1\n                                if diff < 0:\n                                    count += 1\n                                \n                                # Else, set the count to 0\n                                else:\n                                    count = 0\n                                \n                                # Increment the counter\n                                count += 1\n                                \n                                # Remove the last element\n                                test_list.pop()\n                                \n                                # Loop from 0 to the length - 1\n                                for i in range(0, len(test_list)):\n                                    \n                                    # Populate the set\n                                    index_set.add(test_list[i])\n                                    \n                                    # Get the difference between the index and the length\n                                    diff = abs(index - len(test_list))\n                                    \n                                    # If the difference is less than 0, set the count to 1\n                                    if diff < 0:\n                                        count += 1\n                                    \n                                    # Else, set the count to 0\n                                    else:\n                                        count = 0\n                                    \n                                    # Increment the counter\n                                    count += 1\n                                    \n                                    # Remove the last element\n                                    test_list.pop()\n                                    \n                                    # Loop from 0 to the length - 1\n                                    for i in range(0, len(test_list)):\n                                        \n                                        # Populate the set\n                                        index_set.add(test_list[i])\n                                        \n                                        # Get the difference between the index and the length\n                                        diff = abs(index - len(test_list))\n                                        \n                                        # If the difference is less than 0, set the count to 1\n                                        if diff < 0:\n                                            count += 1\n                                        \n                                        # Else, set the count to 0\n                                        else:\n                                            count = 0\n                                        \n                                        # Increment the counter\n                                        count += 1\n                                        \n                                        # Remove the last element\n                                        test_list.pop()\n                                        \n                                        # Loop from 0 to the length - 1\n                                        for i in range(0, len(test_list)):\n                                            \n                                            # Populate the set\n                                            index_set.add(test_list[i])\n                                            \n                                            # Get the difference between the index and the length\n                                            diff = abs(index - len(test_list))\n                                            \n                                            # If the difference is less than 0, set the count to 1\n                                            if diff < 0:\n                                                count += 1\n                                            \n                                            # Else, set the count to 0\n                                            else:\n                                                count = 0\n                                            \n                                            # Increment the counter\n                                            count += 1\n                                            \n                                            # Remove the last element\n                                            test_list.pop()\n                                        \n                                            # Loop from 0 to the length - 1\n                                            for i in range(0, len(test_list)):\n                                                \n                                                # Populate the set\n                                                index_set.add(test_list[i])\n                                                \n                                                ",
        "num_ids": 1988
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Sort the list in ascending order.\n    test_list.sort()\n    n = len(test_list)\n    # Create an empty count and set count to 0.\n    count = 0\n    # Traverse the list from second item and pair it with the item\n    # one item before.\n    for i in range(1, n):\n        for j in range(i):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n",
        "num_ids": 116
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # list_str = []\n    # for i in test_list:\n    #     list_str.append(i[::-1])\n    # list_str.sort()\n    # count = 0\n    # for i in range(len(list_str)):\n    #     for j in range(i + 1, len(list_str)):\n    #         if list_str[i] == list_str[j]:\n    #             count += 1\n    # return count\n",
        "num_ids": 116
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    from collections import Counter\n    \n    def reverse_count_pairs(test_list):\n        # count_dict = Counter(test_list)\n        count_dict = dict(Counter(test_list))\n        # print(count_dict)\n        \n        for key, value in count_dict.items():\n            if value % 2!= 0:\n                return count_dict.get(key) // 2\n        \n    return reverse_count_pairs(test_list)\n",
        "num_ids": 114
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # your code here\n    test_list = test_list.split()\n    test_list = list(map(str, test_list))\n    test_list = ''.join(test_list)\n    test_list = test_list.split()\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][::-1]\n    c = {}\n    for i in range(len(test_list)):\n        if test_list[i] in c:\n            c[test_list[i]] += 1\n        else:\n            c[test_list[i]] = 1\n    result = 0\n    for key in c:\n        if c[key] % 2 == 1:\n            result += 1\n    return result\n",
        "num_ids": 187
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict_count = {}\n    for lst in list1:\n        if lst not in dict_count:\n            dict_count[lst] = 1\n        else:\n            dict_count[lst] += 1\n    return dict_count\n",
        "num_ids": 61
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    dictionary = {}\n    for i in range(len(list1)):\n        if tuple(list1[i]) in dictionary.keys():\n            dictionary[tuple(list1[i])] += 1\n        else:\n            dictionary[tuple(list1[i])] = 1\n    return dictionary\n",
        "num_ids": 78
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    dic = {}\n    for i in range(0,len(list1)):\n        sublist = tuple(list1[i])\n        if sublist in dic:\n            dic[sublist] = dic[sublist] + 1\n        else:\n            dic[sublist] = 1\n    return(dic)\n",
        "num_ids": 84
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for sublist in list1:\n        if sublist in sublists:\n            sublists[sublist] += 1\n        else:\n            sublists[sublist] = 1\n    return sublists\n",
        "num_ids": 55
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = dict()\n    for sublist in list1:\n        if result.get(sublist):\n            result[sublist] += 1\n        else:\n            result[sublist] = 1\n    return result\n",
        "num_ids": 53
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    d = {}\n    for i in list1:\n        d[tuple(i)] = 0\n    for i in list1:\n        d[tuple(i)] += 1\n    \n    return(d)\n",
        "num_ids": 55
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1 = sorted(list1)\n    dict1 = {}\n    for i in range(len(list1)):\n        if list1[i] not in dict1:\n            dict1[tuple(list1[i])] = 1\n        else:\n            dict1[tuple(list1[i])] += 1\n    return dict1\n",
        "num_ids": 85
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    def count_list(list2):\n        tuple_list2 = []\n        for i in list2:\n            tuple_list2.append(tuple(i))\n        dictionary = {}\n        for i in tuple_list2:\n            if i in dictionary:\n                dictionary[i] = dictionary[i] + 1\n            else:\n                dictionary[i] = 1\n        return dictionary\n    return count_list(list1)\n",
        "num_ids": 108
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_list = {}\n    for i in list1:\n        if i not in unique_list:\n            unique_list[tuple(i)] = 1\n        else:\n            unique_list[tuple(i)] += 1\n    return unique_list\n",
        "num_ids": 63
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = 0\n    list_count = {}\n    for i in range(len(list1)):\n        tuple_list = (list1[i],)\n        if tuple_list not in list_count:\n            list_count[tuple_list] = 1\n            count += 1\n        else:\n            list_count[tuple_list] += 1\n    return list_count\n",
        "num_ids": 94
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return True if type(num) == float and (num-int(num)) < 0.01 and int(num) == num else False\n",
        "num_ids": 34
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if isinstance(num, str) and num.replace('.', '').replace('-', '').replace('+', '').replace(',', '').isdigit():\n        if float(num) == int(float(num)):\n            return True\n    return False\n",
        "num_ids": 66
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n    except TypeError:\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Use string.isdigit() to check whether the first character is a digit\n    if num[0] == '-':\n        num = num[1:]\n        return (num.isdigit())\n    elif num.isdigit():\n        return (num[1:].isdigit())\n    else:\n        return False\n",
        "num_ids": 81
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return re.match(r\"^[-+]?[0-9]*\\.?[0-9]+$\", num)\n",
        "num_ids": 33
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num == \"\":\n        return False\n    else:\n        for char in num:\n            if char not in \"0123456789.\":\n                return False\n        return True\n",
        "num_ids": 46
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num_str = str(num)\n    if len(num_str) <= 2:\n        return True\n    else:\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        return isinstance(float(num), float) and num.count('.') == 1 and num.index('.') == len(num) - 1\n    except:\n        return False\n",
        "num_ids": 49
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return bool(re.match(r\"^[-+]?(\\d*\\.\\d+|\\.\\d+)([eE][-+]?\\d+)?\",\"{}\".format(num)))\n    \nprint(is_decimal(\"42.24\"))\nprint(is_decimal(\"-42.2\"))\nprint(is_decimal(\"+42.2\"))\nprint(is_decimal(\"-42\"))\nprint(is_decimal(\"+42\"))\nprint(is_decimal(\"42\"))\nprint(is_decimal(\"\"))\nprint(is_decimal(\"42.2\"))\nprint(is_decimal(\"-42.2\"))\nprint(is_decimal(\"-42.2e3\"))\nprint(is_decimal(\"42.2e3\"))\nprint(is_decimal(\"-42e3\"))\nprint(is_decimal(\"42e3\"))\nprint(is_decimal(\"+42e3\"))\nprint(is_decimal(\"-42.2e-3\"))\nprint(is_decimal(\"42.2e-3\"))\nprint(is_decimal(\"-42.2e+3\"))\nprint(is_decimal(\"42.2e+3\"))\nprint(is_decimal(\"42e3.5\"))\nprint(is_decimal(\"42e-3.5\"))\nprint(is_decimal(\"42.e-3.5\"))\nprint(is_decimal(\"+42e3.5\"))\nprint(is_decimal(\"-42e3.5\"))\nprint(is_decimal(\"42e3.5+\"))\nprint(is_decimal(\"42e3.5-\"))\nprint(is_decimal(\"+42e3.5\"))\nprint(is_decimal(\"-42e3.5\"))\nprint(is_decimal(\"+42.2e3\"))\nprint(is_decimal(\"-42.2e3\"))\nprint(is_decimal(\"+42.2e-3\"))\nprint(is_decimal(\"-42.2e-3\"))\nprint(is_decimal(\"+42.2e+3\"))\nprint(is_decimal(\"-42.2e+3\"))\nprint(is_decimal(\"+42e3.5\"))\nprint(is_decimal(\"-42e3.5\"))\nprint(is_decimal(\"+42.2e-3.5\"))\nprint(is_decimal(\"-42.2e-3.5\"))\nprint(is_decimal(\"+42.2e+3.5\"))\nprint(is_decimal(\"-42.2e+3.5\"))\nprint(is_decimal(\"+42e3.5+\"))\nprint(is_decimal(\"-42e3.5+\"))\nprint(is_decimal(\"+42.2e-3.5+\"))\nprint(is_decimal(\"-42.2e-3.5+\"))\nprint(is_decimal(\"+42.2e+3.5+\"))\nprint(is_decimal(\"-42.2e+3.5+\"))\nprint(is_decimal(\"+42e3.5-\"))\nprint(is_decimal(\"-42e3.5-\"))\nprint(is_decimal(\"+42.2e-3.5-\"))\nprint(is_decimal(\"-42.2e-3.5-\"))\nprint(is_decimal(\"+42.2e+3.5-\"))\nprint(is_decimal(\"-42.2e+3.5-\"))\nprint(is_decimal(\"+42e3.5+e3\"))\nprint(is_decimal(\"-42e3.5+e3\"))\nprint(is_decimal(\"+42.2e-3.5+e3\"))\nprint(is_decimal(\"-42.2e-3.5+e3\"))\nprint(is_decimal(\"+42.2e+3.5+e3\"))\nprint(is_decimal(\"-42.2e+3.5+e3\"))\nprint(is_decimal(\"+42e3.5+e-3\"))\nprint(is_decimal(\"-42e3.5+e-3\"))\nprint(is_decimal(\"+42.2e-3.5+e-3\"))\nprint(is_decimal(\"-42.2e-3.5+e-3\"))\nprint(is_decimal(\"+42.2e+3.5+e-3\"))\nprint(is_decimal(\"-42.2e+3.5+e-3\"))\nprint(is_decimal(\"+42e3.5+e-4\"))\nprint(is_decimal(\"-42e3.5+e-4\"))\nprint(is_decimal(\"+42.2e-3.5+e-4\"))\nprint(is_decimal(\"-42.2e-3.5+e-4\"))\nprint(is_decimal(\"+42.2e+3.5+e-4\"))\nprint(is_decimal(\"-42.2e+3.5+e-4\"))\nprint(is_decimal(\"+42e3.5+e+3\"))\nprint(is_decimal(\"-42e3.5+e+3\"))\nprint(is_decimal(\"+42.2e-3.5+e+3\"))\nprint(is_decimal(\"-42.2e-3.5+e+3\"))\nprint(is_decimal(\"+42.2e+3.5+e+3\"))\nprint(is_decimal(\"-42.2e+3.5+e+3\"))\nprint(is_decimal(\"+42e3.5+e+4\"))\nprint(is_decimal(\"-42e3.5+e+4\"))\nprint(is_decimal(\"+42.2e-3.5+e+4\"))\nprint(is_decimal(\"-42.2e-3.5+e+4\"))\nprint(is_decimal(\"+42.2e+3.5+e+4\"))\nprint(is_decimal(\"-42.2e+3.5+e+4\"))\nprint(is_decimal(\"+42e3.5+e+2\"))\nprint(is_decimal(\"-42e3.5+e+2\"))\nprint(is_decimal(\"+42.2e-3.5+e+2\"))\nprint(is_decimal(\"-42.2e-3.5+e+2\"))\nprint(is_decimal(\"+42.2e+3.5+e+2\"))\nprint(is_decimal(\"-42.2e+3.5+e+2\"))\nprint(is_decimal(\"+42e3.5+e-2\"))\nprint(is_decimal(\"-42e3.5+e-2\"))\nprint(is_decimal(\"+42.2e-3.5+e-2\"))\nprint(is_decimal(\"-42.2e-3.5+e-2\"))\nprint(is_decimal(\"+42.2e+3.5+e-2\"))\nprint(is_decimal(\"-42.2e+3.5+e-2\"))\nprint(is_decimal(\"+42e3.5+e-4\"))\nprint(is_decimal(\"-42e3.5+e-4\"))\nprint(is_decimal(\"+42.2e-3.5+e-4\"))\nprint(is_decimal(\"-42.2e-3.5+e-4\"))\nprint(is_decimal(\"+42.2e+3.5+e-4\"))\nprint(is_decimal(\"-42.2e+3.5+e-4\"))\nprint(is_decimal(\"+42e3.5+e+3\"))\nprint(is_decimal(\"-42e3.5+e+3\"))\nprint(is_decimal(\"+42.2e-3.5+e+3\"))\nprint(is_decimal(\"-42.2e-3.5+e+3\"))\nprint(is_decimal(\"+42.2e+3.5+e+3\"))\nprint(is_decimal(\"-42.2e+3.5+e+3\"))\nprint(is_decimal(\"+42e3.5+e+4\"))\nprint(is_decimal(\"-42e3.5+e+4\"))\nprint(is_decimal(\"+42.2e-",
        "num_ids": 2011
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1\n    # or\n    # arr.count(arr[0]) == len(arr)\n",
        "num_ids": 33
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    #Solution 1\n    #count=0\n    #for i in range(len(arr)):\n    #    if arr[i]==arr[count]:\n    #        count+=1\n    #    else:\n    #        count=i\n    #    if count==len(arr)-1:\n    #        return True\n    #    else:\n    #        return False\n",
        "num_ids": 93
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    set1=set(arr)\n    if len(set1)==1:\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique=False\n    i=0\n    while i<len(arr):\n        if arr.count(arr[i])==1:\n            unique=True\n        else:\n            unique=False\n        i+=1\n    if unique==True:\n        return True\n    else:\n        return False\n",
        "num_ids": 73
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #Check if length is not equal to 1\n    if len(arr) == 1:\n        return True\n    else:\n        #Create an array with distinct elements\n        elem_arr = []\n        for elem in arr:\n            if elem in elem_arr:\n                return False\n            else:\n                elem_arr.append(elem)\n        return True\n",
        "num_ids": 91
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # given list\n    x = []\n    # for loop\n    for i in range(len(arr)):\n        # check if the element already exist in the list\n        if arr[i] not in x:\n            # append if the element doesn't exist in the list\n            x.append(arr[i])\n        else:\n            # return false if the element already exist in the list\n            return False\n    # if the loop is done, then it means that all the elements are unique\n    return True\n",
        "num_ids": 118
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    a = set(arr)\n    if len(a) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]==arr[j]:\n                return False\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    found = False\n    if len(arr) == 1:\n        found = True\n    else:\n        for i in range(len(arr)):\n            if arr.count(arr[i]) == 1:\n                found = True\n            else:\n                found = False\n                break\n    return found\n    \nprint(unique_Element([1,2,3,4,5,5,6]))\nprint(unique_Element([1,2,2,3,4,5,5,6]))\n",
        "num_ids": 121
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return False\n    else:\n        return True\n",
        "num_ids": 59
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == '31':\n        return True\n    elif monthnum3 == '30':\n        return True\n    elif monthnum3 == '29':\n        return True\n    elif monthnum3 == '28':\n        return True\n    else:\n        return False\n",
        "num_ids": 69
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    if monthnum3 >= 1 and monthnum3 <= 12:\n        if monthnum3 == 2:\n            if (year%4 == 0 and year%100!= 0) or year%400 == 0:\n                if monthnum3 == 2:\n                    if day >= 29:\n                        return print(\"This month contains 29 days\")\n                    else:\n                        return print(\"This month contains 28 days\")\n                else:\n                    if day >= 28:\n                        return print(\"This month contains 29 days\")\n                    else:\n                        return print(\"This month contains 28 days\")\n            else:\n                if monthnum3 == 2:\n                    if day >= 29:\n                        return print(\"This month contains 29 days\")\n                    else:\n                        return print(\"This month contains 28 days\")\n                else:\n                    if day >= 28:\n                        return print(\"This month contains 29 days\")\n                    else:\n                        return print(\"This month contains 28 days\")\n        elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n            if day >= 30:\n                return print(\"This month contains 30 days\")\n            else:\n                return print(\"This month contains 29 days\")\n        else:\n            if day >= 31:\n                return print(\"This month contains 31 days\")\n            else:\n                return print(\"This month contains 30 days\")\n    else:\n        return print(\"There is no such month\")\n        \n",
        "num_ids": 329
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == '31':\n        return True\n    else:\n        return False\n        \ndef check_is_leap(year):\n    '''\n    Write a function to check whether the given year is a leap year or not. Leap year is a year that is divisible by 4.\n    '''\n    if year%4 == 0:\n        return True\n    else:\n        return False\n    \ndef check_time_format(time1):\n    '''\n    Write a function that takes a time in string format and returns true if the time is in 24 hour format and false otherwise.\n    '''\n    if time1.find(':')!= -1:\n        if len(time1.split(':')) == 2:\n            if len(time1.split(':')[0]) == 2 and len(time1.split(':')[1]) == 2:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n    \ndef string_split(s):\n    '''\n    Write a function that takes a string and splits the string into a list where each word is an element in the list.\n    '''\n    s = s.split()\n    return s\n    \ndef add_string(str1, str2):\n    '''\n    Write a function that takes two strings and returns the sum of the two strings as a single string.\n    '''\n    str1 = str1.split()\n    str2 = str2.split()\n    return str1 + str2\n    \ndef add_list(lst1, lst2):\n    '''\n    Write a function that takes two lists and returns the sum of the two lists as a single list.\n    '''\n    lst3 = lst1 + lst2\n    return lst3\n    \ndef letter_count(string):\n    '''\n    Write a function that takes a string and returns the number of letters in it.\n    '''\n    string = string.lower()\n    count = 0\n    for i in string:\n        if i.isalpha():\n            count += 1\n    return count\n    \ndef n_digits(n):\n    '''\n    Write a function that takes a number and returns its digits in a list.\n    '''\n    list = []\n    while n!= 0:\n        list.append(n%10)\n        n = n//10\n    return list\n    \ndef number_of_evens(n):\n    '''\n    Write a function that takes a list and returns the number of even numbers in it.\n    '''\n    count = 0\n    for i in n:\n        if i%2 == 0:\n            count += 1\n    return count\n    \ndef reverse_list(lst):\n    '''\n    Write a function that takes a list and returns the list with values reversed.\n    '''\n    n = len(lst)\n    lst1 = lst.copy()\n    for i in range(0,n//2):\n        lst1[i], lst1[n - i - 1] = lst1[n - i - 1], lst1[i]\n    return lst1\n    \ndef reverse_number(num):\n    '''\n    Write a function that takes a number and returns it in reverse.\n    '''\n    num = list(str(num))\n    length = len(num) - 1\n    i = 0\n    while i < length:\n        num[i], num[length] = num[length], num[i]\n        i += 1\n    return int(''.join(num))\n    \ndef prime_factors(n):\n    '''\n    Write a function that takes a positive integer n and returns its prime factors.\n    '''\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n    \ndef prime_factors_recursion(n):\n    '''\n    Write a function that takes a positive integer n and returns its prime factors in a list.\n    '''\n    factors = []\n    if n > 1:\n        for i in range(2, n + 1):\n            while n % i == 0:\n                factors.append(i)\n                n = n // i\n    return factors\n    \ndef is_palindrome(s):\n    '''\n    Write a function that takes a string and returns True if it is a palindrome and False otherwise.\n    '''\n    s = s.lower()\n    n = len(s)\n    if n == 0 or n == 1:\n        return True\n    else:\n        return s[0] == s[n - 1] and is_palindrome(s[1:n - 1])\n    \ndef is_palindrome_recursion(s):\n    '''\n    Write a function that takes a string and returns True if it is a palindrome and False otherwise.\n    '''\n    s = s.lower()\n    n = len(s)\n    if n == 0 or n == 1:\n        return True\n    else:\n        if s[0] == s[n - 1]:\n            return is_palindrome_recursion(s[1:n - 1])\n        else:\n            return False\n    \ndef is_palindrome_slicing(s):\n    '''\n    Write a function that takes a string and returns True if it is a palindrome and False otherwise.\n    '''\n    s = s.lower()\n    n = len(s)\n    if n == 0 or n == 1:\n        return True\n    else:\n        return s == s[::-1]\n    \ndef convert_int_to_roman(num):\n    '''\n    Write a function that takes a number and returns the Roman numeral representation of the number.\n    '''\n    nums = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX']\n    values = [1, 4, 5, 9, 10, 40, 50, 90, 100]\n    num_roman = ''\n    i = 0\n    while num:\n        for _ in range(num // values[i]):\n            num_roman += nums[i]\n            num -= values[i]\n        i += 1\n    return num_roman\n    \ndef sum_pairs(nums, goal):\n    '''\n    Write a function that takes a list of numbers and a goal number as parameters and returns a list of tuples, each tuple containing two elements in the list representing a pair of numbers that sums up to the goal number.\n    '''\n    nums.sort()\n    pairs = []\n    i = 0\n    j = len(nums) - 1\n    while i < j:\n        if nums[i] + nums[j] == goal:\n            pairs.append((nums[i], nums[j]))\n            i += 1\n            j -= 1\n        elif nums[i] + nums[j] < goal:\n            i += 1\n        else:\n            j -= 1\n    return pairs\n    \ndef is_there_a_pair(arr, num):\n    '''\n    Write a function that takes a list of numbers and a target number and returns True if there are two numbers in the list that add up to the target number and False otherwise.\n    '''\n    nums = dict()\n    for i in arr:\n        nums[i] = 1\n    for i in arr:\n        if num == i + num:\n            return True\n    return False\n    \ndef is_there_a_pair_sorting(arr, num):\n    '''\n    Write a function that takes a list of numbers and a target number and returns True if there are two numbers in the list that add up to the target number and False otherwise.\n    '''\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] + arr[j] == num:\n            return True\n        elif arr[i] + arr[j] > num:\n            j -= 1\n        else:\n            i += 1\n    return False\n    \ndef is_there_a_pair_reversed(arr, num):\n    '''\n    Write a function that takes a list of number",
        "num_ids": 12
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    return (monthnum3 % 4) == 0 and (((monthnum3 % 100) == 0) or (monthnum3 % 100) > 30)\n",
        "num_ids": 37
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    if monthnum3 in range(1,13):\n        if months[monthnum3-1] == \"February\":\n            if monthnum3 == 2:\n                if 30 in range(1,31):\n                    return True\n                else:\n                    return False\n            elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n                if 30 in range(1,31):\n                    return True\n                else:\n                    return False\n            else:\n                if 30 in range(1,31):\n                    return True\n                else:\n                    return False\n        elif months[monthnum3-1] == \"December\":\n            if monthnum3 == 12:\n                if 30 in range(1,31):\n                    return True\n                else:\n                    return False\n            else:\n                if 30 in range(1,31):\n                    return True\n                else:\n                    return False\n        else:\n            if 30 in range(1,31):\n                return True\n            else:\n                return False\n    else:\n        return False\n",
        "num_ids": 308
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # A helper function to find the length of month\n    def get_month_length(month):\n        month_length = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        return month_length[month - 1]\n",
        "num_ids": 67
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_list = ['jan','feb','mar','apr','may','jun','jul','aug','sep','oct','nov','dec']\n    if month_list.count(monthnum3) > 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 65
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    count = 0\n    for month in range(1, monthnum3):\n        if (monthnum3)%month == 0:\n            count = count + 1\n            if count == 3:\n                return True\n            else:\n                return False\n",
        "num_ids": 59
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3>=1 and monthnum3<=12:\n        if monthnum3==2:\n            if 29<=int(input(\"Enter the number of days in month number 2: \"))<=31:\n                print(True)\n            else:\n                print(False)\n        elif monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11:\n            if 30<=int(input(\"Enter the number of days in month number 4, 6, 9, 11: \"))<=30:\n                print(True)\n            else:\n                print(False)\n        else:\n            if 29<=int(input(\"Enter the number of days in month number 1, 3, 5, 7, 8, 10, 12: \"))<=31:\n                print(True)\n            else:\n                print(False)\n    else:\n        print(\"Invalid month number\")\n",
        "num_ids": 216
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n <= 1:\n        return -1\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        min_diff = min(min_diff,arr[i+1]-arr[i])\n    return min_diff\n",
        "num_ids": 69
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    for i in range(n): \n        min_val = sys.maxsize \n        for j in range(i+1,n): \n            min_val = min(min_val,arr[j] - arr[i]) \n        return min_val \n    \n    \ndef find_min_diff_2(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    a = arr[:]\n    a.sort()\n    min_diff = a[1] - a[0]\n    for i in range(n): \n        for j in range(i+1,n): \n            if(a[j] - a[i] < min_diff): \n                min_diff = a[j] - a[i] \n    return min_diff\n    \n    \n    \n    \ndef find_min_diff_3(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    a = arr[:]\n    a.sort()\n    min_diff = a[1] - a[0]\n    for i in range(n): \n        if a[i] - a[i+1] < min_diff: \n            min_diff = a[i] - a[i+1] \n    return min_diff\n    \n    \n    \ndef find_min_diff_4(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    a = arr[:]\n    a.sort()\n    min_diff = sys.maxsize \n    for i in range(n): \n        if a[i] - a[i+1] < min_diff: \n            min_diff = a[i] - a[i+1] \n    return min_diff\n    \n    \n    \ndef find_min_diff_5(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    a = arr[:]\n    a.sort()\n    min_diff = sys.maxsize \n    for i in range(n): \n        if a[i] - a[i+1] < min_diff: \n            min_diff = a[i] - a[i+1] \n    return min_diff\n    \n    \n    \ndef find_min_diff_6(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    a = arr[:]\n    a.sort()\n    min_diff = sys.maxsize \n    for i in range(n): \n        if a[i] - a[i+1] < min_diff: \n            min_diff = a[i] - a[i+1] \n    return min_diff\n    \n    \n    \ndef find_min_diff_7(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    a = arr[:]\n    a.sort()\n    min_diff = sys.maxsize \n    for i in range(n): \n        if a[i] - a[i+1] < min_diff: \n            min_diff = a[i] - a[i+1] \n    return min_diff\n    \n    \n    \ndef find_min_diff_8(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    a = arr[:]\n    a.sort()\n    min_diff = sys.maxsize \n    for i in range(n): \n        if a[i] - a[i+1] < min_diff: \n            min_diff = a[i] - a[i+1] \n    return min_diff\n    \n    \n    \ndef find_min_diff_9(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    a = arr[:]\n    a.sort()\n    min_diff = sys.maxsize \n    for i in range(n): \n        if a[i] - a[i+1] < min_diff: \n            min_diff = a[i] - a[i+1] \n    return min_diff\n    \n    \n    \ndef find_min_diff_10(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    a = arr[:]\n    a.sort()\n    min_diff = sys.maxsize \n    for i in range(n): \n        if a[i] - a[i+1] < min_diff: \n            min_diff = a[i] - a[i+1] \n    return min_diff\n    \n    \n    \ndef find_min_diff_11(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    a = arr[:]\n    a.sort()\n    min_diff = sys.maxsize \n    for i in range(n): \n        if a[i] - a[i+1] < min_diff: \n            min_diff = a[i] - a[i+1] \n    return min_diff\n    \n    \n    \ndef find_min_diff_12(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    a = arr[:]\n    a.sort()\n    min_diff = sys.maxsize \n    for i in range(n): \n        if a[i] - a[i+1] < min_diff: \n            min_diff = a[i] - a[i+1] \n    return min_diff\n    \n    \n    \ndef find_min_diff_13(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    a = arr[:]\n    a.sort()\n    min_diff = sys.maxsize \n    for i in range(n): \n        if a[i] - a[i+1] < min_diff: \n            min_diff = a[i] - a[i+1] \n    return min_diff\n    \n    \n    \ndef find_min_diff_14(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    a = arr[:]\n    a.sort()\n    min_diff = sys.maxsize \n    for i in range(n): \n        if a[i] - a[i+1] < min_diff: \n            min_diff = a[i] - a[i+1]",
        "num_ids": 72
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if arr[0] < arr[1]:\n        min_diff = arr[0] - arr[1]\n    else:\n        min_diff = arr[1] - arr[0]\n    for i in range(1, n):\n        if min_diff > abs(arr[i] - arr[i-1]):\n            min_diff = abs(arr[i] - arr[i-1])\n    return min_diff\nif __name__ == \"__main__\":\n    arr = [1,2,3,4,5,6,7,8,9]\n    print(\"Minimum difference is \",find_min_diff(arr, len(arr)))\n    arr = [0,0,0,0,0,0,0,0,0]\n    print(\"Minimum difference is \",find_min_diff(arr, len(arr)))",
        "num_ids": 201
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if abs(arr[i]-arr[j]) < min_diff:\n                min_diff = abs(arr[i]-arr[j])\n    return min_diff\n    \n",
        "num_ids": 78
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n    arr.sort()\n",
        "num_ids": 18
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    \n    if len(arr) == 1:\n        return arr[0]\n",
        "num_ids": 21
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    \n    arr.sort()\n    min_diff = float('inf')\n    for i in range(0,n-1):\n        min_diff = min(min_diff,arr[i+1]-arr[i])\n    return min_diff\n",
        "num_ids": 61
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr = sorted(arr)\n    min_diff = float('inf')\n    for i in range(0,n-1):\n        diff = abs(arr[i]-arr[i+1])\n        if(diff<min_diff):\n            min_diff = diff\n    return min_diff\n",
        "num_ids": 72
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    n=len(arr)\n    if n<=1:\n        return -1\n    \n    arr.sort()\n    minimum_diff = arr[1]-arr[0]\n    for i in range(1,n-1):\n        diff = arr[i+1]-arr[i]\n        if diff<minimum_diff:\n            minimum_diff = diff\n    return minimum_diff\n",
        "num_ids": 94
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if len(arr) < 2:\n        return -1\n    else:\n        min_diff = float('inf')\n        for i in range(len(arr)-1):\n            for j in range(i+1,len(arr)):\n                min_diff = min(min_diff,abs(arr[i] - arr[j]))\n        return min_diff \n",
        "num_ids": 91
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num = len(str)\n    print(num)\n",
        "num_ids": 16
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    x = int(str)\n    return len(str)\n",
        "num_ids": 17
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    #print(str, type(str))\n    count = 0\n    for i in range(len(str)):\n        if str[i].isdigit():\n            count += 1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isdigit():\n            count+=1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    i=0\n    for n in str:\n        if n.isdigit():\n            i+=1\n    print(i)\n",
        "num_ids": 34
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    # initialize the result\n    result = 0\n    # Iterate over each chracter and increment count of digits\n    for char in str:\n        if char.isdigit():\n            result += 1\n    \n    return result\n",
        "num_ids": 55
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 5:\n        return 5\n    if n < 11:\n        return 11\n    if n < 17:\n        return 17\n    if n < 29:\n        return 29\n    if n < 40:\n        return 40\n    if n < 57:\n        return 57\n    if n < 70:\n        return 70\n    if n < 84:\n        return 84\n    if n < 97:\n        return 97\n    if n < 109:\n        return 109\n    if n < 131:\n        return 131\n    if n < 152:\n        return 152\n    if n < 171:\n        return 171\n    if n < 181:\n        return 181\n    if n < 202:\n        return 202\n    if n < 223:\n        return 223\n    if n < 254:\n        return 254\n    if n < 267:\n        return 267\n    if n < 280:\n        return 280\n    if n < 302:\n        return 302\n    if n < 324:\n        return 324\n    if n < 335:\n        return 335\n    if n < 347:\n        return 347\n    if n < 349:\n        return 349\n    if n < 371:\n        return 371\n    if n < 397:\n        return 397\n    if n < 428:\n        return 428\n    if n < 441:\n        return 441\n    if n < 462:\n        return 462\n    if n < 487:\n        return 487\n    if n < 489:\n        return 489\n    if n < 509:\n        return 509\n    if n < 521:\n        return 521\n    if n < 543:\n        return 543\n    if n < 561:\n        return 561\n    if n < 573:\n        return 573\n    if n < 589:\n        return 589\n    if n < 610:\n        return 610\n    if n < 622:\n        return 622\n    if n < 648:\n        return 648\n    if n < 672:\n        return 672\n    if n < 691:\n        return 691\n    if n < 709:\n        return 709\n    if n < 730:\n        return 730\n    if n < 751:\n        return 751\n    if n < 769:\n        return 769\n    if n < 784:\n        return 784\n    if n < 807:\n        return 807\n    if n < 831:\n        return 831\n    if n < 853:\n        return 853\n    if n < 877:\n        return 877\n    if n < 908:\n        return 908\n    if n < 923:\n        return 923\n    if n < 949:\n        return 949\n    if n < 965:\n        return 965\n    if n < 983:\n        return 983\n    if n < 1020:\n        return 1020\n    if n < 1042:\n        return 1042\n    if n < 1064:\n        return 1064\n    if n < 1092:\n        return 1092\n    if n < 1129:\n        return 1129\n    if n < 1141:\n        return 1141\n    if n < 1161:\n        return 1161\n    if n < 1183:\n        return 1183\n    if n < 1207:\n        return 1207\n    if n < 1233:\n        return 1233\n    if n < 1257:\n        return 1257\n    if n < 1283:\n        return 1283\n    if n < 1311:\n        return 1311\n    if n < 1334:\n        return 1334\n    if n < 1368:\n        return 1368\n    if n < 1392:\n        return 1392\n    if n < 1422:\n        return 1422\n    if n < 1453:\n        return 1453\n    if n < 1486:\n        return 1486\n    if n < 1516:\n        return 1516\n    if n < 1543:\n        return 1543\n    if n < 1567:\n        return 1567\n    if n < 1596:\n        return 1596\n    if n < 1628:\n        return 1628\n    if n < 1654:\n        return 1654\n    if n < 1687:\n        return 1687\n    if n < 1707:\n        return 1707\n    if n < 1741:\n        return 1741\n    if n < 1762:\n        return 1762\n    if n < 1796:\n        return 1796\n    if n < 1827:\n        return 1827\n    if n < 1848:\n        return 1848\n    if n < 1863:\n        return 1863\n    if n < 1894:\n        return 1894\n    if n < 1917:\n        return 1917\n    if n < 1947:\n        return 1947\n    if n < 1974:\n        return 1974\n    if n < 1995:\n        return 1995\n    if n < 2032:\n        return 2032\n    if n < 2054:\n        return 2054\n    if n < 2085:\n        return 2085\n    if n < 2114:\n        return 2114\n    if n < 2140:\n        return 2140\n    if n < 2160:\n        return 2160\n    if n < 2179:\n        return 2179\n    if n < 2204:\n        return 2204\n    if n < 2243:\n        return 2243\n    if n < 2268:\n        return 2268\n    if n < 2293:\n        return 2293\n    if n < 2310:\n        return 2310\n    if n < 2342:\n        return 2342\n    if n < 2370:\n        return 2370\n    if n < 2392:\n        return 2392\n    if n < 2419:\n        return 2419\n    if n < 2454:\n        return 2454\n    if n < 2482:\n        return 2482\n    if n < 2524:\n        return 2524\n    if n < 2563:\n        return 2563\n    if n < 2588:\n        return 2588\n    if n < 2626:\n        return 2626\n    if n < 2657:\n        return 2657\n    if n < 2697:\n        return 2697\n    if n < 2736:\n        return 2736\n    if n < 2768:\n        return 2768\n    if n < 2797:\n        return 2797\n    if n < 2841:\n        return 2841\n    if n < 2871:\n        return 2871\n    if n < 2896:\n        return 2896\n    if n < 2936:\n        return 2936\n    if n < 2961:\n        return 2961\n    if n < 2988:\n        return 2988\n    if n < 3032:\n        return 3032\n    if n < 3056:\n        return 3056\n    if n < 3080:\n        return 3080\n    if n < 3106:\n        return 3106\n    if n < 3140:\n        return 3140\n    if n < 3172:\n        return 3172\n    if n < 3194:\n        return 3194\n    if n < 3241:\n        return 3241\n    if n < 3265:\n        return 3265\n    if n < 3292:\n        return 3292\n    if n < 3305:\n        return 3305\n    if n < 3338:\n        return 3338\n    if n < 3355:\n        return 3355\n    if n < 3378:\n        return 3378\n    if n < 3399:\n        return 3399\n    if n < 3432:\n        return 3432\n    if n < 3454:\n        return 3454\n    if n < 3481:\n        return 3481\n    if n < 3499:\n        return 3499\n    if n < 3517:\n        return 3517\n    if n < 3541:\n        return 3541\n    if n < 3560:\n        return 3560\n    if n < 3588:\n        return 3588\n    if n < 3629:\n        return 3629\n    if n < 3650:\n        return 3650\n    if n < 3673:\n        return 3673\n    if n < 3696:\n        return 3696\n    if n < 3733:\n        return 3733\n    if n < 3756:\n        return 3756\n    if n < 3789:\n        return 3789\n    if n < 3825:\n        return 3825\n    if n < 3853:",
        "num_ids": 1999
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n = int(n)\n    if n == 1: \n        return 1\n    polite_count = 0\n    i = 1\n    while n > i: \n        if n % i == 0: \n            polite_count += 1\n        i += 1\n    return polite_count + n - 1\n",
        "num_ids": 76
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    res = 0\n    n = int(n)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    for i in range(2, n+1):\n        res += i\n    return res\n",
        "num_ids": 70
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<=0:\n        return -1\n    if n==1:\n        return 1\n    else:\n        if n%2!=0:\n            return poli1(n//2)+1\n        else:\n            return poli1(n//2)\n    \ndef poli1(n):\n    '''\n    Write a function to find nth polite number. \n    '''\n    while n>0:\n        if n%2==0:\n            n=n//2\n        else:\n            n=(n*3)+1\n    return n\n",
        "num_ids": 42
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    n = int(n)\n    i = 0\n    polite_no = 0\n    while n > 1: \n        if n % 2!= 0: \n            n = n - 1\n        else: \n            n = n / 2\n        i = i + 1\n    if i % 2 == 0:\n        polite_no = polite_no + 1\n    else:\n        polite_no = polite_no + 2\n    return polite_no \n",
        "num_ids": 114
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==1: \n        return 1\n    elif n==2: \n        return 2\n    elif n==3: \n        return 3\n    else: \n        for i in range(4,n+1): \n            if (i%3)==0: \n                return i ",
        "num_ids": 75
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    num = 1\n    while num <= n:\n        num += 1\n        if num % 5 == 0:\n            print(num)\n",
        "num_ids": 34
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_polite_rec(n, start): \n        if n == 0: \n            return start\n        elif n > 0: \n            if start + 1 <= 5: \n                return is_polite_rec(n - 1, start + 1) \n            else: \n                return start + 1\n",
        "num_ids": 78
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 3\n    else:\n        prev=is_polite(n-1)\n        if n%2==0:\n            return ((prev+1)*2)\n        else:\n            return (prev+1)\ndef nth_polite(n):\n    '''\n    Write a function that accepts a number n and returns the nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    elif n==3:\n        return 3\n    else:\n        prev=nth_polite(n-1)\n        if n%2==0:\n            return ((prev+1)*2)\n        else:\n            return (prev+1)\ndef gcd(a, b):\n    '''\n    Write a function to find the Greatest Common Divisor of a and b.\n    '''\n    if a==0 or b==0:\n        return max(a,b)\n    else:\n        return gcd(b%a,a)\ndef gcd_recursive(a, b):\n    '''\n    Write a function to find the Greatest Common Divisor of a and b.\n    '''\n    if a==0 or b==0:\n        return max(a,b)\n    elif a==b:\n        return a\n    elif a<b:\n        return gcd_recursive(a+b,b)\n    else:\n        return gcd_recursive(a,b-a)\ndef lcm(a, b):\n    '''\n    Write a function to find the least common multiple of a and b.\n    '''\n    return (a*b)//gcd(a,b)\ndef lcm_recursive(a, b):\n    '''\n    Write a function to find the least common multiple of a and b.\n    '''\n    if a==0 or b==0:\n        return max(a,b)\n    elif a==b:\n        return a\n    elif a<b:\n        return lcm_recursive(a+b,b)\n    else:\n        return lcm_recursive(a,b-a)\ndef cubic(a, b, c):\n    '''\n    Write a function to find the cubic of a, b and c.\n    '''\n    if a==0 or b==0 or c==0:\n        return max(a,b,c)\n    else:\n        return a*b*c*(1+(2*a*c/b)+(3*a**2/b**2))\ndef cubic_recursive(a, b, c):\n    '''\n    Write a function to find the cubic of a, b and c.\n    '''\n    if a==0 or b==0 or c==0:\n        return max(a,b,c)\n    elif a<0 or b<0 or c<0:\n        return -1\n    else:\n        return ((-1*a)*b*c)\ndef quadratic(a, b, c):\n    '''\n    Write a function to find the quadratic of a, b and c.\n    '''\n    if a==0 or b==0 or c==0:\n        return max(a,b,c)\n    else:\n        return a*b**2+2*a*c+b*c**2\ndef quadratic_recursive(a, b, c):\n    '''\n    Write a function to find the quadratic of a, b and c.\n    '''\n    if a==0 or b==0 or c==0:\n        return max(a,b,c)\n    elif a<0 or b<0 or c<0:\n        return -1\n    else:\n        return ((-1*a)*b**2+2*a*c+b*c**2)\ndef log(n, base):\n    '''\n    Write a function to find the log base e of n.\n    '''\n    if base==0:\n        return -1\n    else:\n        return math.log(n, base)\ndef log_recursive(n, base):\n    '''\n    Write a function to find the log base e of n.\n    '''\n    if base==0:\n        return -1\n    elif n==1:\n        return 0\n    else:\n        return math.log(n, base)\ndef sqrt(n):\n    '''\n    Write a function to find the sqrt of n.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return n**(1/2)\ndef sqrt_recursive(n):\n    '''\n    Write a function to find the sqrt of n.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n<1:\n        return -1\n    else:\n        return sqrt(n)\ndef is_palindrome(s):\n    '''\n    Write a function to check whether a string is palindrome or not.\n    '''\n    if s==s[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome_recursive(s):\n    '''\n    Write a function to check whether a string is palindrome or not.\n    '''\n    if len(s)<=1:\n        return True\n    elif s[0]==s[-1]:\n        return is_palindrome_recursive(s[1:-1])\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if n==0 or n==1:\n        return False\n    elif n==2:\n        return True\n    elif n>2 and n%2==0:\n        return False\n    else:\n        for i in range(3,n//2+1,2):\n            if n%i==0:\n                return False\n        return True\ndef is_prime_recursive(n):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if n==0 or n==1:\n        return False\n    elif n==2:\n        return True\n    elif n>2 and n%2==0:\n        return False\n    else:\n        return not is_prime_recursive(n-1)\ndef is_prime_3(n):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if n==0 or n==1:\n        return False\n    elif n==2:\n        return True\n    elif n>2 and n%2==0:\n        return False\n    else:\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n%i==0:\n                return False\n        return True\ndef is_prime_3_recursive(n):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if n==0 or n==1:\n        return False\n    elif n==2:\n        return True\n    elif n>2 and n%2==0:\n        return False\n    else:\n        return not is_prime_3_recursive(n-1)\ndef fib(n):\n    '''\n    Write a function to find the nth fibonacci number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fib(n-1)+fib(n-2)\ndef fib_recursive(n):\n    '''\n    Write a function to find the nth fibonacci number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fib_recursive(n-1)+fib_recursive(n-2)\ndef prime_factors(n):\n    '''\n    Write a function to find the prime factors o",
        "num_ids": 12
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    l=[]\n    for i in range(1,n+1):\n        if n%i == 0:\n            l.append(i)\n    for i in range(len(l)):\n        if n//l[i] == 1:\n            return l[i-1]\n",
        "num_ids": 70
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    if len(l1) <= 1:\n        return pairs\n    p = 0\n    n = 1\n    while n <= len(l1)-1:\n        pairs.append([l1[p], l1[n]])\n        n += 1\n        p += 1\n    return pairs\n",
        "num_ids": 77
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    ans = []\n    for i in range(len(l1)-1):\n        x = l1[i]\n        for j in range(i+1, len(l1)):\n            y = l1[j]\n            ans.append([x,y])\n    return ans\n",
        "num_ids": 70
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    if l1:\n        for i in range(0, len(l1) - 1):\n            result.append([l1[i], l1[i + 1]])\n        return result\n    else:\n        return result\nprint(\"pair_wise([]) -->\", pair_wise([]))\nprint(\"pair_wise([1, 2]) -->\", pair_wise([1, 2]))\nprint(\"pair_wise([1, 2, 3]) -->\", pair_wise([1, 2, 3]))\nprint(\"pair_wise([1, 2, 3, 4, 5, 6, 7]) -->\", pair_wise([1, 2, 3, 4, 5, 6, 7]))\n",
        "num_ids": 167
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1_copy = l1.copy()\n    pair_list = []\n    for i in range(len(l1_copy)-1):\n        pair_list.append([l1_copy[i],l1_copy[i+1]])\n    return pair_list\n",
        "num_ids": 68
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l=[]\n    for i in range(len(l1)):\n        if i==len(l1)-1:\n            break\n        l.append((l1[i],l1[i+1]))\n    return l\n",
        "num_ids": 58
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for x in range(0,len(l1)):\n        l2.append(l1[x:x+2])\n    return l2\n",
        "num_ids": 44
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for i in range(len(l1)-1):\n        l.append((l1[i], l1[i+1]))\n    return l\n",
        "num_ids": 44
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(0, len(l1)-1):\n        temp = []\n        temp.append(l1[i])\n        temp.append(l1[i+1])\n        result.append(temp)\n    return result\n",
        "num_ids": 64
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    #set of unique values \n    unique_elements = set(l1)\n    #empty list \n    list1 = []\n    for i in range(len(unique_elements)):\n        for j in range(i+1,len(unique_elements)):\n            list1.append((unique_elements[i],unique_elements[j]))\n    return list1\n",
        "num_ids": 95
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    arr.sort()\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "num_ids": 67
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if (arr[i]+arr[j]) == sum:\n                count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    return sum//2 - (sum//2)-1\n",
        "num_ids": 15
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if (arr[i]+arr[j]) == sum:\n                count+=1\n    return count\nprint(get_pairs_count([1,2,3,4,5],5))\n",
        "num_ids": 81
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if(arr[i]+arr[j] == sum):\n                count = count+1\n    print(\"Count of pairs is\",count)\n    return\n",
        "num_ids": 71
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n",
        "num_ids": 53
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i]+arr[j]==sum):\n                pairs+=1\n    return pairs\n",
        "num_ids": 63
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    c = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]+arr[j] == sum:\n                c = c+1\n    return c\n",
        "num_ids": 62
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count\n",
        "num_ids": 67
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "num_ids": 61
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    l1 = set(li1)\n    l2 = set(li2)\n    res = l1 - l2\n    return list(res)\n    \n    \ndef main():\n    li1 = list(map(int, input(\"Enter the list of integers: \").strip().split()))\n    li2 = list(map(int, input(\"Enter the list of integers: \").strip().split()))\n    print(\"List 1: {}\".format(li1))\n    print(\"List 2: {}\".format(li2))\n    print(\"Difference between the two lists: {}\".format(Diff(li1,li2)))\n    \nif __name__=='__main__':\n    main(",
        "num_ids": 165
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # li1 =[1,2,3]\n    # li2 =[2,3,4]\n    #Difference between 2 list : 3\n    return (list(set(li1) - set(li2)))\n",
        "num_ids": 55
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_diff = []\n    for i in li1:\n        if i not in li2:\n            li_diff.append(i)\n    for i in li2:\n        if i not in li1:\n            li_diff.append(i)\n    print(li_diff)\n",
        "num_ids": 71
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    l1=sorted(li1)\n    l2=sorted(li2)\n    res=[]\n    for i in l1:\n        if i not in l2:\n            res.append(i)\n    for i in l2:\n        if i not in l1:\n            res.append(i)\n    return res\n    \ndef main():\n    print(Diff([\"apple\",\"orange\",\"mango\",\"banana\"],[\"orange\",\"apple\",\"mango\",\"banana\"]))\n    print(Diff([\"car\",\"train\",\"bike\",\"boat\"],[\"boat\",\"car\",\"bike\",\"train\"]))\n    print(Diff([\"a\",\"b\",\"c\",\"d\",\"e\"],[\"a\",\"b\",\"c\",\"d\",\"e\"]))\n    print(Diff([\"a\",\"b\",\"c\",\"d\",\"e\"],[\"a\",\"b\",\"c\",\"e\"]))\n    print(Diff([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"],[\"a\",\"b\",\"c\",\"d\",\"e\"]))\n    \nif __name__==\"__main__\":\n    main()",
        "num_ids": 246
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    x = []\n    for i in li1:\n        if i not in li2:\n            x.append(i)\n    return x\n",
        "num_ids": 36
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1).difference(set(li2)))\n",
        "num_ids": 20
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return(list(set(li1)-set(li2)))\n",
        "num_ids": 18
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    d={}\n    for i in li1:\n        if i not in li2:\n            d[i]=1\n    for i in li2:\n        if i not in li1:\n            d[i]=1\n    return d\n",
        "num_ids": 59
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    res=[]\n    for item in li1:\n        if item not in li2:\n            res.append(item)\n    for item in li2:\n        if item not in li1:\n            res.append(item)\n    return res\n",
        "num_ids": 61
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_a = list(li1)\n    li_b = list(li2)\n    li_c = []\n    for num in li_a:\n        if num not in li_b:\n            li_c.append(num)\n    for num in li_b:\n        if num not in li_a:\n            li_c.append(num)\n    return li_c\n",
        "num_ids": 95
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if i % 2!= 0:\n            count += i ** 4\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2) :\n        sum += i**4\n",
        "num_ids": 30
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_num = [i for i in range(1,n+1) if i % 2!=0]\n    odd_sum = sum(odd_num)\n    print(f'The sum of first {n} odd natural numbers are {odd_sum}')\n",
        "num_ids": 64
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = n-1\n    sum = 0\n    for i in range(n,0,-1):\n        if (i%2!=0):\n            sum = sum + pow(i,4)\n    return sum\n",
        "num_ids": 54
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1) : \n        if (i % 2) == 1 : \n            sum += i ** 4\n    return sum\n",
        "num_ids": 45
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum(i*i for i in range(n) if i%2==1)\n",
        "num_ids": 24
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    s=0\n    for i in range(1,n+1):\n        if i%2!=0:\n            s += i**4\n    return s\n",
        "num_ids": 41
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_num = list(filter(lambda x: x % 2!= 0, range(1, n+1)))\n    return sum(odd_num)\n",
        "num_ids": 39
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_odd_num = 0\n    for i in range(1, n+1, 2) :\n        sum_odd_num = sum_odd_num + i**4\n    return sum_odd_num\n",
        "num_ids": 52
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum([i**4 for i in range(1,n) if i % 2!= 0])\n    \n",
        "num_ids": 29
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    brackets = {\"(\":\")\", \"{\":\"}\", \"[\":\"]\"}\n    # 1. Pop all the opening brackets\n    for i in range(len(exp)):\n        if exp[i] in brackets.values():\n            stack.append(exp[i])\n        elif exp[i] in brackets.keys():\n            # if stack is not empty and top of stack is \"(\"\n            if stack and brackets[exp[i]] == stack[-1]:\n                # pop the top element and compare with the last element\n                stack.pop()\n            else:\n                # if \"(\" is not balanced then return false\n                return False\n    # 2. Check if the stack is empty or not\n    if stack:\n        # if stack is not empty then return false\n        return False\n    else:\n        # if stack is empty then return true\n        return True\n",
        "num_ids": 205
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(' or char == '[' or char == '{':\n            stack.append(char)\n        if char == ')' or char == ']':\n            if len(stack) > 0 and stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n        if char == '}':\n            if len(stack) > 0 and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n    \ndef check_paranthesis_balance(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    left_parenthesis_count = 0\n    right_parenthesis_count = 0\n    for i in exp:\n        if i == '(':\n            left_parenthesis_count += 1\n        if i == ')':\n            if left_parenthesis_count == 0:\n                return False\n            else:\n                left_parenthesis_count -= 1\n        if i == '{':\n            right_parenthesis_count += 1\n        if i == '}':\n            if right_parenthesis_count == 0:\n                return False\n            else:\n                right_parenthesis_count -= 1\n        if i == '[':\n            right_parenthesis_count += 1\n        if i == ']':\n            if right_parenthesis_count == 0:\n                return False\n            else:\n                right_parenthesis_count -= 1\n    return True if left_parenthesis_count == 0 and right_parenthesis_count == 0 else False\n",
        "num_ids": 219
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # if len(exp) % 2!= 0:\n    #     return False\n    stack = deque()\n    left = ['(', '{', '[']\n    right = [')', '}', ']']\n    for i in exp:\n        if i in left:\n            stack.append(i)\n        elif i in right:\n            if len(stack) == 0:\n                return False\n            elif left.index(stack.pop())!= right.index(i):\n                return False\n    return True if len(stack) == 0 else False\n",
        "num_ids": 136
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    bracket = {'(':')','[':']','{':'}'}\n",
        "num_ids": 28
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    operations = {'(': ')', '{': '}', '[': ']'}\n    for item in exp:\n        if item in operations:\n            stack.append(operations[item])\n        elif len(stack) == 0 and item!='':\n            return False\n        elif item!='':\n            if len(stack) == 0:\n                return False\n            if stack[-1]!= item:\n                return False\n            stack.pop()\n    return True\n",
        "num_ids": 124
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    '''\n    The idea is to use stack and a set of symbols, so that we can check whether there are balanced parentheses in the given expression or not.\n    First we will use stack to add all the symbols in the expression. If we encounter a parenthesis symbol, we will push it to the stack and then we will check if that\n    parenthesis symbol is balanced or not. If we encounter a ] or }, we will pop it from the stack and we check if that symbol is balanced or not and if it is not balanced, then\n    then the expression is not balanced.\n    '''\n    '''\n    # Time Complexity: O(n)\n    # Space Complexity: O(n)\n    '''\n    op_stack = []\n    parentheses = [\"(\", \"{\", \"[\"]\n    bracket_mapping = {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n    symbol_mapping = {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n    stack = deque()\n    for i in exp:\n        if i in parentheses:\n            stack.append(i)\n        elif i in bracket_mapping.keys():\n            if i == \"(\" or i == \"[\":\n                if stack:\n                    if stack[-1]!= bracket_mapping[i]:\n                        return False\n                    else:\n                        stack.pop()\n            else:\n                if stack:\n                    if stack[-1]!= symbol_mapping[i]:\n                        return False\n                    else:\n                        stack.pop()\n    return True if not stack else False\n",
        "num_ids": 206
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    l_brackets = []\n    r_brackets = []\n",
        "num_ids": 18
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for p in exp:\n        if p == '(':\n            stack.append(p)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n",
        "num_ids": 66
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    map = {'{': '}', '(': ')', '[': ']','': None}\n    for i in exp:\n        if i in map:\n            stack.append(i)\n        elif i in map.values():\n            if len(stack) == 0:\n                return False\n            elif map[stack.pop()]!= i:\n                return False\n    return True\n",
        "num_ids": 101
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # We'll use two stack to check for balanced expression.\n    s = deque()\n    opening = {'(':')','[':']','{':'}'}\n    closing = {'(':')','[':']','{':'}'}\n    for i in range(len(exp)):\n        if exp[i] in opening:\n            s.append(exp[i])\n        else:\n            if not s:\n                return False\n            else:\n                top = s.pop()\n                if opening[top]!= exp[i]:\n                    return False\n    if s:\n        return False\n    return True\n",
        "num_ids": 152
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if test_str == '':\n        return ''\n    if test_str.isalpha():\n        if test_str == test_str[::-1]:\n            test_str =''\n        return test_str\n    test_str = remove_space(test_str)\n    test_list = test_str.split()\n    while '' in test_list:\n        test_list.remove('')\n    for i in range(len(test_list)):\n        if len(test_list[i]) == K:\n            test_list.remove(test_list[i])\n    return''.join(test_list)\n",
        "num_ids": 150
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_str = ''\n    if K <= len(test_str):\n        for word in test_str.split():\n            if len(word) > K:\n                new_str += word\n        return new_str\n    else:\n        return new_str\n",
        "num_ids": 64
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    result = []\n    for i in range(len(test_str)):\n        if len(test_str[i]) == K:\n            continue\n        else:\n            result.append(test_str[i])\n",
        "num_ids": 54
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Inputs\n    # test_str: A string\n    # K: A positive integer\n    # Outputs\n    # A list of strings\n    \n    # Solution\n    if (len(test_str) == 0) or (K == 1):\n        return test_str\n    return''.join([w for w in test_str.split(' ') if len(w)!= K])\n",
        "num_ids": 93
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    '''\n    1. Create a list for storing the words.\n    2. Iterate through the given string.\n    3. If current index matches k and length of the current word in the list is less than k\n        then we can remove the word.\n    4. Also make sure that the length of the word is more than K.\n    5. Check if the length of the word is still greater than k. If so then append to the\n        the list.\n    6. After the loop ends, return the list.\n    '''\n    res = []\n    curr_word = \"\"\n    for word in test_str.split(\" \"):\n        if len(word) == K:\n            curr_word = word\n        else:\n            res.append(curr_word)\n    return \" \".join(res)\n",
        "num_ids": 70
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Initialize a stack\n    stack = []\n",
        "num_ids": 14
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for word in words:\n        if len(word) == K:\n            words.remove(word)\n    print(words)\n",
        "num_ids": 43
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split(\" \")\n    result = []\n    for word in words:\n        if len(word) == K:\n            continue\n        result.append(word)\n    return \" \".join(result)\n",
        "num_ids": 56
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    word_list = test_str.split()\n    word_list.sort(key=len)\n    for i in range(0, len(word_list)):\n        if len(word_list[i]) == K:\n            word_list.remove(word_list[i])\n    return \" \".join(word_list)\n",
        "num_ids": 81
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    #remove_indexes = []\n    #for i in range(len(test_str.split())):\n    #    if len(test_str.split()[i]) == K:\n    #        remove_indexes.append(i)\n    #for i in reversed(remove_indexes):\n    #    test_str = test_str.replace(test_str.split()[i], '')\n    #return test_str\n    #one line\n    return''.join(word for word in test_str.split() if len(word) == K)\n",
        "num_ids": 134
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result_dict = {}\n    result_dict['occurance_substring'] = {}\n    text = text.split()\n    pattern = pattern.split()\n    for i in range(len(pattern)):\n        for j in range(len(text)):\n            if pattern[i] == text[j]:\n                if pattern[i] not in result_dict.keys():\n                    result_dict['occurance_substring'].update({pattern[i]:[j,j+1]})\n                else:\n                    result_dict['occurance_substring'].update({pattern[i]:[result_dict['occurance_substring'][pattern[i]][0]+1,result_dict['occurance_substring'][pattern[i]][1]]})\n    return result_dict\n",
        "num_ids": 186
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    '''\n    s = \"tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau tau ta",
        "num_ids": 1995
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_search = re.search(pattern, text)\n    if pattern_search:\n        return pattern_search.group()\n    else:\n        return None\n",
        "num_ids": 40
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    count = 0\n    matches = re.finditer(pattern,text)\n    for match in matches:\n        substring = match.group()\n        pos = match.start()\n        count += 1\n        if len(substring)==len(pattern):\n            print('Pattern found')\n        elif len(substring) < len(pattern):\n            print('Not found')\n        print(substring,pos)\n    if count == 0:\n        print('Not found')\n    else:\n        print('Found',count,'times')\n",
        "num_ids": 128
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_length = len(pattern)\n    for i in range(0, len(text)-pattern_length+1):\n        if re.search(pattern, text[i:i+pattern_length]):\n            print(i, i+pattern_length)\n            return i\n    return None\n",
        "num_ids": 71
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    for i in range(len(text)-len(pattern)+1):\n        if re.search(pattern,text[i:i+len(pattern)]):\n            return re.search(pattern,text[i:i+len(pattern)]).span()\n    return None\n",
        "num_ids": 65
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    str=text\n    pat=pattern\n    for i in range(0,len(str)-len(pat)+1):\n        if re.search(pat,str[i:i+len(pat)]):\n            return i,i+len(pat)-1\n    else:\n        return None\n",
        "num_ids": 71
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pos=re.finditer(pattern,text)\n    pos_list=[]\n    for i in pos:\n        pos_list.append(i.span())\n    return pos_list\n",
        "num_ids": 47
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Your code here\n    x = re.findall(pattern,text)\n    if len(x)>0:\n        return x[0]\n    else:\n        return None\n",
        "num_ids": 46
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m=re.search(pattern,text)\n    if m is not None:\n        return m.span()\n    else:\n        return None\n",
        "num_ids": 37
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_indices = []\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if nums[i] % 2!= 0:\n                odd_indices.append(i)\n    return odd_indices\n",
        "num_ids": 64
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (i + 1) % 2 == 0:\n            if nums[i] % 2!= 0:\n                return True\n    return False\n",
        "num_ids": 50
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i%2==0:\n            if nums[i]%2==1:\n                return False\n    return True\nodd_position([1,2,3,4,5])\nodd_position([1,2,3,4,5,6])\nodd_position([1,2,3,4,5,6,7,8])\n",
        "num_ids": 98
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(i % 2!= 0 for i in nums)\nodd_position([0, 1, 2, 3, 4, 5, 6, 7])\n",
        "num_ids": 40
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if all(num % 2!= 0 for num in nums):\n        return True\n    else:\n        return False\n",
        "num_ids": 31
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i]%2 == 0:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i%2!= 0:\n            if nums[i]%2!= 0:\n                return \"Odd numbers present in given index\"\n        else:\n            continue\n    return \"Even numbers present in given index\"\n",
        "num_ids": 69
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    flag = 0\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            flag += 1\n    if flag == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n",
        "num_ids": 62
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    temp = nums[::]\n    for i in range(len(temp)):\n        if i%2!= 0:\n            temp[i] = 0\n    if temp == nums:\n        print(True)\n    else:\n        print(False)\n",
        "num_ids": 65
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    res = {}\n    res['a'] = test_str.count('a')\n    res['e'] = test_str.count('e')\n    res['i'] = test_str.count('i')\n    res['o'] = test_str.count('o')\n    res['u'] = test_str.count('u')\n    return res\n",
        "num_ids": 86
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # For Python, we can get the vowels by use the help() function\n    # help(str)\n    # The help() function will show us the information about a specific character\n    # the help(str.lower)\n    # If you want to know about the help() function, use the following code\n    # help(str.lower)\n    # But what if the string does not contain vowels?\n    # We can pass a character as argument\n    # If we pass any character, it will count it as a vowel\n    # We can also use the operator = to check if a character is a vowel\n    # print(help(str.lower) == 'lower' or help(str.lower) =='str.lower')\n    # If we pass a character, it will count it as a vowel\n    # print(help(str.lower) == 'lower' or help(str.lower) =='str.lower')\n    # The above code will return True, if we pass a character and False otherwise\n    # The above code will also return True, if we pass a character and False otherwise\n    # The above code will also return True, if we pass a character and False otherwise\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowel\n    # If we pass a character, it will count it as a vowe",
        "num_ids": 2010
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    str = test_str\n    return sum([1 for i in range(len(str)-1) if str[i] == 'a' or str[i] == 'e' or str[i] == 'i' or str[i] == 'o' or str[i] == 'u'])\n",
        "num_ids": 72
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a','e','i','o','u','y','A','E','I','O','U','Y']\n    count = 0\n",
        "num_ids": 38
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    counter = 0\n",
        "num_ids": 28
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # The key idea is to use hash map. \n    # Time O(N) and Space O(N)\n",
        "num_ids": 29
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count_vowels = 0\n    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n    for char in test_str:\n        if char in vowels:\n            count_vowels += 1\n    return count_vowels\n",
        "num_ids": 62
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"]\n    vowel_count = 0\n    if len(test_str) < 2:\n        return 0\n    else:\n        for i in range(len(test_str)-1):\n            if test_str[i] in vowels and test_str[i+1] in vowels:\n                vowel_count += 1\n    return vowel_count\n",
        "num_ids": 103
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(0,len(test_str)):\n        if test_str[i] in \"aeiouAEIOU\":\n            count += 1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum_ = 0\n    for i in range(0, len(arr)):\n        if arr.count(arr[i]) == 1:\n            sum_ += arr[i]\n    return sum_\n",
        "num_ids": 50
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # sum = 0\n    # non_repeated_sum = 0\n    # for i in arr:\n    #     if i not in sum:\n    #         sum = sum + i\n    #     else:\n    #         non_repeated_sum = non_repeated_sum + i\n    # return non_repeated_sum, sum\n    sum = 0\n    non_repeated_sum = 0\n    for i in arr:\n        sum = sum + i\n        if sum not in arr:\n            non_repeated_sum = non_repeated_sum + i\n    return non_repeated_sum, sum\n",
        "num_ids": 148
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    # write your solution here\n    for i in range(len(arr)):\n        if arr[i] not in arr[:i]:\n            sum = sum + arr[i]\n    return sum\n    \n",
        "num_ids": 56
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    n = len(arr)\n    s = 0\n    for i in range(0, n):\n        if (arr[i]!= arr[i-1]):\n            s += arr[i]\n    return s\n",
        "num_ids": 55
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum=0\n    for i in arr:\n        if arr.count(i)==1:\n            sum+=i\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] not in arr[i+1:]:\n            sum += arr[i]\n    print(sum)\n    return sum\n",
        "num_ids": 53
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    seen = set()\n    total = 0\n    for i in arr:\n        total += i\n        if i not in seen:\n            seen.add(i)\n    return total\n",
        "num_ids": 45
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i]!= arr[i + 1]:\n                sum = arr[i]\n        else:\n            if arr[i]!= arr[i - 1]:\n                sum = sum + arr[i]\n    return sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2013
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if i not in arr:\n            sum += i\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] not in arr[i+1:] :\n            sum += arr[i]\n    return sum\n",
        "num_ids": 47
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        result.append(list(group))\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    res=[]\n    for key, group in groupby(list1):\n        res.append(list(group))\n    return res\nprint(pack_consecutive_duplicates([1, 2, 2, 3, 4, 4, 4, 4, 5, 5, 5, 5]))\n",
        "num_ids": 72
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    if len(list1) == 1:\n        result.append(list1)\n    else:\n        result = [[list1[0], list1[1]]]\n        for i in range(2, len(list1)):\n            if list1[i-1] == list1[i]:\n                result[-1].append(list1[i])\n            else:\n                result.append([list1[i-1], list1[i]])\n    return result\n",
        "num_ids": 119
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if len(list1)==0:\n        return False\n    else:\n        pairs = sorted(zip(list1,list1[1:]))\n        return list(groupby(pairs,lambda x:x[0]))\n    \n",
        "num_ids": 60
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    indexes = []\n    for k, g in groupby(list1):\n        if k:\n            indexes.append(list(g))\n    for i in range(len(indexes)):\n        indexes[i] = indexes[i][0]\n    return indexes\n",
        "num_ids": 68
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    res=[]\n    if len(list1)==0:\n        return res\n    else:\n        l=[]\n        for i in range(len(list1)):\n            if i+1<len(list1) and list1[i]==list1[i+1]:\n                l.append(list1[i])\n            else:\n                res.append(l)\n                l=[]\n                l.append(list1[i])\n        return res\n",
        "num_ids": 113
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for group, group_size in groupby(list1):\n        result.append([i for i in group_size])\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [[list1[0]]]\n    else:\n        prev = list1[0]\n        prev_index = 0\n        for i, v in enumerate(list1):\n            if v == prev:\n                continue\n            if i - prev_index > 1:\n                return_list = list1[prev_index:i+1]\n                return_list.append(prev)\n                return_list = sort_list(return_list)\n                return return_list\n            prev = v\n            prev_index = i\n        return_list = list1[prev_index:]\n        return_list.append(prev)\n        return sort_list(return_list)\n",
        "num_ids": 186
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list_size = len(list1)\n    if list_size < 1:\n        return []\n    i = 1\n    while i < list_size:\n        if list1[i] == list1[i-1]:\n            list1 = list1[:i-1] + list1[i:]\n            list_size = len(list1)\n            i = 1\n        else:\n            i += 1\n    return list1\n",
        "num_ids": 105
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for k, g in groupby(list1):\n        if k!= None:\n            yield [x for x in g]\n",
        "num_ids": 34
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict_count = {}\n    count = 1\n    for sublist in list1:\n        if type(sublist) == list:\n            dict_count[count] = sublist\n            count += 1\n    return dict_count\n",
        "num_ids": 56
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict1 = {}\n    for i in range(len(list1)-1):\n        list1[i] = tuple(list1[i])\n        if list1[i] not in dict1.keys():\n            dict1[list1[i]] = 1\n        else:\n            dict1[list1[i]] += 1\n    return dict1\n",
        "num_ids": 85
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    dic = dict()\n    for item in list1:\n        if item not in dic.keys():\n            dic[item] = 1\n        else:\n            dic[item] = dic[item]+1\n    return dic\n",
        "num_ids": 62
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # list2 = []\n    # for i in range(len(list1)):\n    #     for j in range(len(list1)):\n    #         if list1[i] == list1[j]:\n    #             list2.append(list1[i])\n    # return len(list2)\n    # print(len(list2))\n    # return list2\n",
        "num_ids": 93
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for i in list1:\n        if i not in counts.keys():\n            counts[i] = 1\n        else:\n            counts[i] += 1\n    return counts\n",
        "num_ids": 52
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for x in list1:\n        if x not in count_dict:\n            count_dict[x] = 1\n        else:\n            count_dict[x] = count_dict[x] + 1\n",
        "num_ids": 58
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    return {key:len(value) for key,value in set(tuple(value) for value in list1)}\n",
        "num_ids": 32
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_lists = []\n    for i in range(len(list1)):\n        unique_list = []\n        unique_list.append(list1[i])\n        for j in range(len(list1)):\n            if list1[i]!= list1[j] and list1[i] not in unique_list:\n                unique_list.append(list1[j])\n        unique_lists.append(tuple(unique_list))\n    return unique_lists\n",
        "num_ids": 116
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Empty list\n    list_ = []\n    count = {}\n",
        "num_ids": 18
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    counter = {}\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            if list1[i] == list1[j]:\n                counter[tuple(sorted(list1[i]))] += 1\n    return counter\n",
        "num_ids": 76
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    a = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            comb = test_list[i] + test_list[j]\n            a.append(comb)\n    return a\n",
        "num_ids": 68
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = sorted(test_list)\n    comb = combinations(test_list, 3)\n    for i in comb:\n        print(i)\n",
        "num_ids": 39
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    com_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            for k in range(j+1,len(test_list)):\n                com_list.append(tuple(sorted((test_list[i],test_list[j],test_list[k]))))\n    return com_list\nprint(find_combinations([1,2,3,4,5,6,7,8,9,10]))\n",
        "num_ids": 127
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return combinations(test_list,2)\n",
        "num_ids": 13
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Write your code here\n    # number = 4\n    # print(list(combinations(test_list, number)))\n    #print(list(combinations(test_list, 2)))\n    # print(list(combinations(test_list, 1)))\n    # print(list(combinations(test_list, 0)))\n",
        "num_ids": 79
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    temp = test_list[:]\n    temp_list = list(combinations(temp,2))\n",
        "num_ids": 26
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Your code here\n    print('Original List = ',test_list)\n    return list(combinations(test_list,2))\n    ",
        "num_ids": 35
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #initializing dict\n    dict = {}\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if(test_list[i]+test_list[j] in dict):\n                temp = dict[test_list[i]+test_list[j]]\n                temp.append(tuple([test_list[i],test_list[j]]))\n                dict[test_list[i]+test_list[j]] = temp\n            else:\n                dict[test_list[i]+test_list[j]] = list([tuple([test_list[i],test_list[j]])])\n",
        "num_ids": 163
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for i in test_list:\n        for j in combinations(i,2):\n            combinations_list.append(tuple(sorted(j)))\n    print(combinations_list)\n    # return combinations_list\n",
        "num_ids": 63
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    list_of_combinations = []\n    for a in test_list:\n        list_of_combinations.append(list(combinations(a, 2)))\n    # print(list_of_combinations)\n    return list_of_combinations\n",
        "num_ids": 62
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if n % i == 0 : \n            divisors += 2\n        elif n % (i + 1) == 0 : \n            divisors += 1\n    if divisors % 2 == 0 : \n        return 'Even'\n    else : \n        return 'Odd'\n",
        "num_ids": 101
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    if n == 1 :\n        return 1\n    for i in range(1,n+1) :\n        if n % i == 0 :\n            count += 1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    count = 0\n    while i <= math.sqrt(n) :\n        if n % i == 0 : \n            count += 1\n            if i == math.sqrt(n) :\n                return True\n            i += 1\n        else : \n            i += 1\n    return False\n",
        "num_ids": 76
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n % 2 == 0) : \n        return True\n    else : \n        return False\ndef count_divisors_v2(n) : \n    '''\n    Write a python function to count the total number of divisors in a given number\n    '''\n    count = 0\n    for i in range(1, n) :\n        if (n % i == 0) : \n            count += 1\n    return count\ndef count_divisors_v3(n) :\n    '''\n    Write a python function to count the total number of divisors in a given number\n    '''\n    if n <= 0 : return 0\n    i = 1\n    count = 0\n    while i * i <= n :\n        if n % i == 0 :\n            count += 2\n        i += 1\n    return count\ndef count_divisors_v4(n) :\n    '''\n    Write a python function to count the total number of divisors in a given number\n    '''\n    if n <= 0 : return 0\n    count = 0\n    for i in range(1, n+1) :\n        if n % i == 0 : \n            count += 1\n    return count\ndef count_divisors_v5(n) :\n    '''\n    Write a python function to count the total number of divisors in a given number\n    '''\n    if n <= 0 : return 0\n    count = 0\n    i = 1\n    while i * i <= n :\n        if n % i == 0 :\n            count += 2\n        i += 1\n    return count\ndef count_divisors_v6(n) :\n    '''\n    Write a python function to count the total number of divisors in a given number\n    '''\n    if n <= 0 : return 0\n    count = 0\n    i = 1\n    while i * i <= n :\n        if n % i == 0 : \n            count += 1\n        i += 1\n    return count\ndef is_prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not\n    '''\n    if (n <= 1) : return False\n    if (n == 2) : return True\n    if (n % 2 == 0) : return False\n    i = 3\n    while (i * i <= n) :\n        if (n % i == 0) : \n            return False\n        i += 2\n    return True\ndef is_prime_v2(n) :\n    '''\n    Write a python function to check whether the given number is prime or not\n    '''\n    if n <= 1 : return False\n    i = 2\n    while i * i <= n : \n        if n % i == 0 : \n            return False\n        i += 1\n    return True\ndef is_prime_v3(n) :\n    '''\n    Write a python function to check whether the given number is prime or not\n    '''\n    if n <= 1 : return False\n    if (n == 2) : return True\n    if (n % 2 == 0) : return False\n    i = 3\n    while (i * i <= n) :\n        if (n % i == 0) :\n            return False\n        i += 2\n    return True\ndef is_prime_v4(n) :\n    '''\n    Write a python function to check whether the given number is prime or not\n    '''\n    if n <= 1 : return False\n    if (n == 2) : return True\n    if (n % 2 == 0) : return False\n    i = 3\n    while (i * i <= n) :\n        if (n % i == 0) :\n            return False\n        i += 2\n    return True\ndef is_prime_v5(n) :\n    '''\n    Write a python function to check whether the given number is prime or not\n    '''\n    if n <= 1 : return False\n    i = 2\n    while i * i <= n :\n        if (n % i == 0) :\n            return False\n        i += 1\n    return True\ndef is_prime_v6(n) :\n    '''\n    Write a python function to check whether the given number is prime or not\n    '''\n    if n <= 1 : return False\n    i = 2\n    while i * i <= n :\n        if (n % i == 0) :\n            return False\n        i += 1\n    return True\ndef count_factors(n) :\n    '''\n    Write a python function to count the total number of factors of a given number\n    '''\n    if (n <= 1) : return 0\n    i = 1\n    count = 1\n    while i * i <= n :\n        if (n % i == 0) :\n            count += 1\n        i += 1\n    return count\ndef count_factors_v2(n) : \n    '''\n    Write a python function to count the total number of factors of a given number\n    '''\n    if (n <= 1) : return 0\n    count = 1\n    i = 1\n    while i * i <= n :\n        if (n % i == 0) : \n            count += 1\n        i += 1\n    return count\ndef count_factors_v3(n) : \n    '''\n    Write a python function to count the total number of factors of a given number\n    '''\n    if (n <= 1) : return 0\n    i = 1\n    count = 1\n    while i * i <= n :\n        if (n % i == 0) : \n            count += 1\n        i += 1\n    return count\ndef count_factors_v4(n) : \n    '''\n    Write a python function to count the total number of factors of a given number\n    '''\n    if (n <= 1) : return 0\n    count = 0\n    i = 1\n    while i * i <= n :\n        if (n % i == 0) : \n            count += 1\n        i += 1\n    return count\ndef count_factors_v5(n) : \n    '''\n    Write a python function to count the total number of factors of a given number\n    '''\n    if (n <= 1) : return 0\n    count = 0\n    i = 1\n    while i * i <= n :\n        if (n % i == 0) : \n            count += 1\n        i += 1\n    return count\ndef count_factors_v6(n) : \n    '''\n    Write a python function to count the total number of factors of a given number\n    '''\n    if (n <= 1) : return 0\n    count = 0\n    i = 1\n    while i * i <= n :\n        if (n % i == 0) : \n            count += 1\n        i += 1\n    return count\ndef is_prime_v2(n) :\n    '''\n    Write a python function to check whether the given number is prime or not\n    '''\n    if n <= 1 : return False\n    if (n == 2) : return True\n    if (n % 2 == 0) : return False\n    i = 3\n    while i * i <= n : \n        if (n % i == 0) :\n            return False\n        i += 2\n    return True\ndef is_prime_v3(n) :\n    '''\n    Write a python function to check whether the given number is prime or not\n    '''\n    if n <= 1 : return False\n    if (n == 2) : return True\n    if (n % 2 == 0) : return False\n    i = 3\n    while i * i <= n :\n        if (n % i == 0) :\n            return False\n        i += 2\n    return True\ndef is_prime_v4(n) :\n    '''\n    Write a python function to check whether the given number is prime or not\n    '''\n    if n <= 1 : return False\n    if (n == 2) : return True\n    if (n % 2 == 0) : return False\n    i = 3\n    while i * i <= n :\n        if (n % i == 0) :\n            return False\n        i += 2\n    return True\ndef is_prime_v5(n) :\n    '''\n    Write a python function to check whether the given number is prime or not\n    '''\n    if n <= 1 ",
        "num_ids": 8
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    div = 1\n    for i in range(1, int(math.sqrt(n))+1) : \n        if n%i == 0 : \n            div += 2\n    if div%2 == 0 : \n        return True\n    else : \n        return False\n",
        "num_ids": 68
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisor = 2\n    while divisor * divisor <= n : \n        if n % divisor == 0 : \n            return False\n        divisor += 1\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors)\n",
        "num_ids": 50
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1, n) :\n        if (n % i == 0) :\n            divisors += 1\n    if divisors % 2 == 0 :\n        return True\n    else :\n        return False\n",
        "num_ids": 62
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    div_count = 1\n    for i in range(2,int(math.sqrt(n))+1) : \n        if n%i == 0 : \n            div_count+=1\n    return div_count\n",
        "num_ids": 55
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1 : \n        return 0 \n    else : \n        return n + 1 + count_divisors(n - 1)\n    \ndef nth_root(x, n) : \n    '''\n    Write a python function to find the nth root of the given number.\n    '''\n    if n == 1 : \n        return x ** (1.0/n) \n    else : \n        return nth_root(x, n-1) * (x/nth_root(x, n-1))\n",
        "num_ids": 57
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # start_sum = arr[0]\n    # output = 0\n    # for i in range(len(arr)):\n    #     start_sum += arr[i]\n    #     if i % 2!= 0:\n    #         output += start_sum\n",
        "num_ids": 65
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # starting_pos = 1\n    # total = 0\n    # for i in range(1, len(arr)):\n    #     if i % 2!= 0:\n    #         total += arr[i]\n    #     else:\n    #         total += arr[i]\n    # return total\n    # arr = [1,2,3,4,5]\n    # odd_length_sum = odd_length_sum(arr)\n    # print(odd_length_sum)\n    # print(sum(arr[i] for i in range(len(arr)-1, -1, -2) if i % 2!= 0))\n",
        "num_ids": 154
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    for i in range(len(arr)):\n        if i%2==1:\n            odd_sum += arr[i]\n    return odd_sum\n",
        "num_ids": 46
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    s = 0\n    for i in range(0,len(arr),2):\n        s+=arr[i]\n    return s\nodd_length_sum(arr)\n",
        "num_ids": 43
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # since the number of subarrays of a length n is n(n-1)/2\n    # we have to sum all subarrays of length k\n    return sum(odd_length_subarray(arr, n))\n",
        "num_ids": 54
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        if i % 2!= 0:\n            sum += arr[i]\n",
        "num_ids": 39
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd = sum(arr[i] for i in range(len(arr)) if i % 2)\n    return odd\n",
        "num_ids": 30
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    if len(arr) < 1:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    for i in range(len(arr)):\n        if i % 2 == 1:\n            odd_sum += arr[i]\n    return odd_sum\n",
        "num_ids": 78
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # number of elements in the array\n    n = len(arr)\n    # Initialize result\n    res = 0\n    # Traverse through all subarrays\n    for i in range(n):\n        for j in range(i, n):\n            # Compute length of subarray\n            k = j - i + 1\n            if k % 2!= 0:\n                res += sum(arr[i:j + 1])\n    return res\n",
        "num_ids": 106
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length = []\n    # TODO: Write your solution here\n    for i in range(len(arr)):\n        if arr[i] % 2!= 0:\n            odd_length.append(arr[i])\n    return sum(odd_length)\n    # return sum(odd_length)\n",
        "num_ids": 75
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = float(r), float(g), float(b)\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r - g) / df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df / mx\n    v = mx\n    return h, s, v\n",
        "num_ids": 220
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    min_num = min(r, g, b)\n    max_num = max(r, g, b)\n    # Compute the difference between max and min\n    diff = max_num - min_num\n",
        "num_ids": 52
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # initialize the max, min variables\n    max_v = max(r, g, b)\n    min_v = min(r, g, b)\n    # initialize the color value\n    v = max_v\n    # calculate the value to give\n    s = (max_v-min_v) / max_v\n    # calculate the value to give\n    if max_v == r:\n        h = (g-b)/(max_v-min_v)\n    elif max_v == g:\n        h = 2 + ((b-r)/(max_v-min_v))\n    else:\n        h = 4 + ((r-g)/(max_v-min_v))\n    h = h*60\n    # return the converted color\n    return h, s, v\n",
        "num_ids": 189
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    MIN_R, MIN_G, MIN_B = 0.0, 0.0, 0.0\n    MAX_R, MAX_G, MAX_B = 255.0, 255.0, 255.0\n    C = (MAX_R - MIN_R)\n    X = (MAX_G - MIN_G)\n    Y = (MAX_B - MIN_B)\n    if C == 0.0:\n        H = 0.0\n    elif X == 0.0:\n        H = (60 * (MIN_B - MIN_G)) // (MAX_B - MIN_B)\n    elif Y == 0.0:\n        H = (60 * (MIN_G - MIN_B)) // (MAX_G - MIN_G)\n    else:\n        H = (60 * (MIN_B - MIN_G)) // (MAX_B - MIN_B)\n        H = H + (60 * (MAX_G - MIN_G)) // (X)\n        H = H + (360 * (MAX_R - MIN_R)) // (C)\n    if H < 0:\n        H = H + 360\n    return (H, S, V)\n",
        "num_ids": 277
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h = 0\n    s = 0\n    v = 0\n",
        "num_ids": 17
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # \n    # YOUR CODE GOES HERE\n    # \n    r = r/255\n    g = g/255\n    b = b/255\n    maxrgb = max(r, g, b)\n    minrgb = min(r, g, b)\n    h = 0\n    s = 0\n    v = 0\n    if maxrgb == minrgb:\n        h = 0\n        s = 0\n        v = maxrgb\n    else:\n        if maxrgb == r:\n            h = (60 * (g - b)) / (maxrgb - minrgb)\n            if h < 0:\n                h = 360 + h\n            s = (maxrgb - minrgb) / maxrgb\n            v = maxrgb\n        elif maxrgb == g:\n            h = 120 + (60 * (b - r)) / (maxrgb - minrgb)\n            if h < 0:\n                h = 360 + h\n            s = (maxrgb - minrgb) / maxrgb\n            v = maxrgb\n        elif maxrgb == b:\n            h = 240 + (60 * (r - g)) / (maxrgb - minrgb)\n            if h < 0:\n                h = 360 + h\n            s = (maxrgb - minrgb) / maxrgb\n            v = maxrgb\n        if h == 0:\n            h = 360\n            v = minrgb\n            if s == 0:\n                s = 0.5\n                h = 360\n        elif h == 360:\n            h = 0\n            s = minrgb\n            v = maxrgb\n        if v == 0:\n            v = 0.5\n            h = 360\n    return (h, s, v)\n",
        "num_ids": 421
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    min_color = min(r, g, b)\n    max_color = max(r, g, b)\n    diff = max_color - min_color\n    if max_color == min_color:\n        return (0, 0, 0, 0)\n    elif max_color == r:\n        h = 0\n    elif max_color == g:\n        h = 60\n    elif max_color == b:\n        h = 120\n    else:\n        h = 240\n    if diff == 0:\n        s = 0\n        v = max_color\n    else:\n        s = diff / max_color\n        v = max_color\n    return (h, s, v)\n",
        "num_ids": 167
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # import numpy as np\n    r = r / 255\n    g = g / 255\n    b = b / 255\n",
        "num_ids": 31
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    h = 0\n    s = 0\n    v = 0\n",
        "num_ids": 17
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n        s = 0\n        v = mx\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n        s = df / mx\n        v = mx\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n        s = df / mx\n        v = mx\n    elif mx == b:\n        h = (60 * ((r - g) / df) + 240) % 360\n        s = df / mx\n        v = mx\n    return h, s, v\n",
        "num_ids": 220
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    a = []\n    for i in range(len(list1)):\n        if i%2 == 0:\n            a.append(list1[i])\n    b = []\n    for i in range(len(list1)):\n        if i%2!= 0:\n            b.append(list1[i])\n    c = []\n    for i in range(len(a)):\n        for j in range(len(b)):\n            c.append(a[i]*b[j])\n    return c\n",
        "num_ids": 127
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            product = product * list1[i]\n    print(\"Product of first even number\",product)\n    return product\n",
        "num_ids": 56
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # Create a empty dictionary to store even and odd numbers\n    d = {}\n    # Loop through the list\n    for i in range(len(list1)):\n        # if the element is even then store in the dictionary\n        if i % 2 == 0:\n            d[list1[i]] = list1[i]\n        # else if the element is odd then store in the dictionary\n        else:\n            d[list1[i]] = list1[i]\n    # return the dictionary\n    return d\n",
        "num_ids": 120
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return None\n    even = 0\n    odd = 0\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            even = even + list1[i]\n        else:\n            odd = odd + list1[i]\n    return even * odd\n",
        "num_ids": 81
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_number = 0\n    odd_number = 0\n    for i in list1:\n        if i%2==0:\n            even_number = i\n        else:\n            odd_number = i\n    print(f'The product of first even number in the list {list1} is {even_number}')\n    print(f'The product of first odd number in the list {list1} is {odd_number}')\n",
        "num_ids": 103
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even=[]\n    odd=[]\n    for i in range(len(list1)):\n        if list1[i]%2==0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    return even, odd\n",
        "num_ids": 70
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even=[]\n    odd=[]\n    list1=list(list1)\n    for i in list1:\n        if i%2==0:\n            even.append(i)\n        else:\n            odd.append(i)\n    print(\"product of even and odd numbers of the list is\",even[0]*odd[0])\n",
        "num_ids": 83
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    if len(list1) == 0:\n        return 0\n    elif len(list1) == 1:\n        return list1[0]\n    else:\n        for i in list1:\n            if i % 2 == 0:\n                even += i\n            else:\n                odd += i\n        return even*odd\n",
        "num_ids": 88
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    count_even=0\n    count_odd=0\n    for i in list1:\n        if i%2==0:\n            count_even+=1\n        else:\n            count_odd+=1\n    return count_even,count_odd\n",
        "num_ids": 61
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in list1:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even, odd\n",
        "num_ids": 55
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # You need to handle the following exceptions.\n    # You may assume the input string is not empty and there is no leading whitespace.\n    # ',' can be used as the separator for the tuple.\n    # '.' can be used as the separator for the tuple.\n    # If the input string is empty, return empty tuple.\n    \n    def tuple_int(x):\n        try:\n            x = eval(x)\n            return x\n        except (NameError, SyntaxError):\n            return x\n    try:\n        if test_str:\n            test_str = eval(test_str)\n            return tuple(map(tuple_int, test_str))\n        else:\n            return ()\n    except:\n        return ()\n",
        "num_ids": 176
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_str = test_str.strip().replace(' ', '')\n    return tuple(tuple_str.split(','))\n",
        "num_ids": 34
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return eval(test_str)\n",
        "num_ids": 11
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # str1 = \"A1,B2,C3\"\n    # str1 = \"A1,B2,C3,D4\"\n    # str1 = \"A1,B2,C3,D4,E5\"\n    # str1 = \"A1,B2,C3,D4,E5,F6\"\n    # str1 = \"A1,B2,C3,D4,E5,F6,G7\"\n    # str1 = \"A1,B2,C3,D4,E5,F6,G7,H8\"\n",
        "num_ids": 143
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_list = []\n    for i in test_str:\n        tuple_list.append(int(i))\n    return tuple_list\n",
        "num_ids": 38
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = test_str.replace('(','').replace(')','').split(',')\n    int_tuple = tuple(map(int, int_tuple))\n    return int_tuple\n",
        "num_ids": 54
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return (int(x) for x in test_str)\n",
        "num_ids": 17
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return int(test_str)\n",
        "num_ids": 11
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if test_str == None:\n        return None\n    #s = str(test_str)\n    #s = s.replace('(', 'int(')\n    #s = s.replace(')', ')')\n    #s = eval(s)\n    return eval(test_str)\n",
        "num_ids": 73
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return eval(test_str)\n",
        "num_ids": 11
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    pl = 0\n    pr = len(a) - 1\n    if pr == -1:\n        return -1\n    while pl <= pr:\n        mid = (pl + pr) // 2\n        if x <= a[mid]:\n            pr = mid - 1\n        else:\n            pl = mid + 1\n    if pl == len(a):\n        return len(a)\n    else:\n        return pl\n",
        "num_ids": 99
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left = 0\n    right = len(a)-1\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\ndef insert_sort(a):\n    '''\n    Write a function to sort an array using Insertion Sort.\n    '''\n    for i in range(1, len(a)):\n        key = a[i]\n        j = i - 1\n        while j >= 0 and key < a[j]:\n            a[j + 1] = a[j]\n            j = j - 1\n        a[j + 1] = key\ndef selection_sort(a):\n    '''\n    Write a function to sort an array using Selection Sort.\n    '''\n    for i in range(len(a)):\n        minimum = i\n        for j in range(i + 1, len(a)):\n            if a[j] < a[minimum]:\n                minimum = j\n        a[minimum], a[i] = a[i], a[minimum]\ndef bubble_sort(a):\n    '''\n    Write a function to sort an array using Bubble Sort.\n    '''\n    for i in range(len(a)):\n        for j in range(len(a) - 1 - i):\n            if a[j] > a[j + 1]:\n                a[j], a[j + 1] = a[j + 1], a[j]\ndef shell_sort(a):\n    '''\n    Write a function to sort an array using Shell Sort.\n    '''\n    # calculate gap\n    n = len(a)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and a[j] < a[j - gap]:\n                a[j], a[j - gap] = a[j - gap], a[j]\n                j -= gap\n        gap //= 2\ndef merge(a, start, mid, end):\n    '''\n    Write a function to merge two sorted arrays.\n    '''\n    i = start\n    j = mid + 1\n    n = len(a)\n    temp = []\n    while i <= mid and j <= end:\n        if a[i] <= a[j]:\n            temp.append(a[i])\n            i += 1\n        else:\n            temp.append(a[j])\n            j += 1\n    while i <= mid:\n        temp.append(a[i])\n        i += 1\n    while j <= end:\n        temp.append(a[j])\n        j += 1\n    for i in range(n):\n        a[start + i] = temp[i]\ndef merge_sort(a, start, end):\n    '''\n    Write a function to sort an array using Merge Sort.\n    '''\n    if end <= start:\n        return\n    mid = start + ((end - start) // 2)\n    merge_sort(a, start, mid)\n    merge_sort(a, mid + 1, end)\n    merge(a, start, mid, end)\ndef quick_sort(a, l, r):\n    '''\n    Write a function to sort an array using Quick Sort.\n    '''\n    if l >= r:\n        return\n    p = l\n    i = l + 1\n    j = r\n    while i <= j:\n        while i <= j and a[i] <= a[p]:\n            i += 1\n        while i <= j and a[j] >= a[p]:\n            j -= 1\n        if i <= j:\n            a[i], a[j] = a[j], a[i]\n    a[p], a[j] = a[j], a[p]\n    quick_sort(a, l, j - 1)\n    quick_sort(a, j + 1, r)\ndef heapify(a, n, i):\n    '''\n    Write a function to heapify a binary tree.\n    '''\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < n and a[i] < a[l]:\n        largest = l\n    if r < n and a[largest] < a[r]:\n        largest = r\n    if largest!= i:\n        a[i], a[largest] = a[largest], a[i]\n        heapify(a, n, largest)\ndef heap_sort(a):\n    '''\n    Write a function to sort an array using Heap Sort.\n    '''\n    n = len(a)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(a, n, i)\n    for i in range(n - 1, 0, -1):\n        a[0], a[i] = a[i], a[0]\n        heapify(a, i, 0)\ndef heap_sort_min_heap(a):\n    '''\n    Write a function to sort an array using Min Heap Sort.\n    '''\n    n = len(a)\n    for i in range(n//2 - 1, -1, -1):\n        heapify_min_heap(a, n, i)\n    for i in range(n - 1, 0, -1):\n        a[0], a[i] = a[i], a[0]\n        heapify_min_heap(a, i, 0)\ndef heapify_min_heap(a, n, i):\n    '''\n    Write a function to heapify a binary tree.\n    '''\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < n and a[i] > a[l]:\n        largest = l\n    if r < n and a[largest] > a[r]:\n        largest = r\n    if largest!= i:\n        a[i], a[largest] = a[largest], a[i]\n        heapify_min_heap(a, n, largest)\ndef heap_sort_max_heap(a):\n    '''\n    Write a function to sort an array using Max Heap Sort.\n    '''\n    n = len(a)\n    for i in range(n//2 - 1, -1, -1):\n        heapify_max_heap(a, n, i)\n    for i in range(n - 1, 0, -1):\n        a[0], a[i] = a[i], a[0]\n        heapify_max_heap(a, i, 0)\ndef heapify_max_heap(a, n, i):\n    '''\n    Write a function to heapify a binary tree.\n    '''\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < n and a[i] < a[l]:\n        largest = l\n    if r < n and a[largest] < a[r]:\n        largest = r\n    if largest!= i:\n        a[i], a[largest] = a[largest], a[i]\n        heapify_max_heap(a, n, largest)\ndef heap_sort_max_heap_arr_no_builtin(a):\n    '''\n    Write a function to sort an array using Max Heap Sort.\n    '''\n    n = len(a)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify_max_heap(a, n, i)\n    for i in range(n - 1, 0, -1):\n        a[0], a[i] = a[i], a[0]\n        heapify_max_heap(a, i, 0)\ndef heapify_min_heap_arr_no_builtin(a):\n    '''\n    Write a function to sort an array using Min Heap Sort.\n    '''\n    n = len(a)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify_min_heap(a, n, i)\n    for i in range(n - 1, 0, -1):\n        a[0], a[i] = a[i], a[0]\n        heapify",
        "num_ids": 85
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i==len(a):\n        return len(a)\n    return i\na = [1,2,3,4,5]\nx = 5\nprint(right_insertion(a,x))\n",
        "num_ids": 68
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect(a, x)\n    if i == len(a):\n        return len(a)\n    else:\n        if a[i] == x:\n            return i\n        else:\n            return i + 1\n",
        "num_ids": 60
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Linear search the value in the list and return the index\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return len(a)\n    elif a[index] == x:\n        return index\n    else:\n        return index+1\n",
        "num_ids": 73
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # I'm assuming a is sorted. But the test cases will not be. So I need to implement bisect_right\n    # to look for x\n    # use bisect.bisect_right to find the right insertion point.\n    # O(log(n))\n    # if the input value is smaller than the last element,\n    # put the value at the end of the array.\n    if a[-1] < x:\n        a.append(x)\n        return\n    # else, look to the left and find the first position that is greater than or equal to the value\n    # x.\n    # Use bisect.bisect_left to find the position that should be placed at that value.\n    # O(log(n))\n    pos = bisect.bisect_left(a, x)\n    a.insert(pos, x)\n",
        "num_ids": 198
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return i + 1\n",
        "num_ids": 46
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)\n",
        "num_ids": 17
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if x < a[0]:\n        return a\n    else:\n        return right_insertion_rec(a, x, 0, len(a)-1)\n",
        "num_ids": 41
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l, r = 0, len(a)\n    # Binary Search\n    while l < r:\n        mid = l + (r-l)//2\n        if x > a[mid]:\n            l = mid + 1\n        else:\n            r = mid\n    return l\n",
        "num_ids": 68
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.search('a+b+', text)\n    if match is not None:\n        print(\"Match: \" + match.group())\n        return True\n    else:\n        print(\"No Match\")\n        return False\n",
        "num_ids": 56
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"ab{3}\")\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n",
        "num_ids": 45
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3}',text)\n",
        "num_ids": 18
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern_to_match = re.compile(r'ab+')\n    if re.search(pattern_to_match, text):\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 49
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    a_b = re.compile(r'a+b')\n    return a_b.match(text)\n",
        "num_ids": 30
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.match(r'(b){3}',text):\n        return True\n    else:\n        return False\n",
        "num_ids": 31
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # open('out.txt', 'w').close()\n    with open('out.txt', 'a') as f:\n        if re.search('ab*b', text):\n            f.write(\"Found\")\n        else:\n            f.write(\"Not Found\")\n",
        "num_ids": 65
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    matches = re.findall(r\"ab*\", text)\n    return matches\n",
        "num_ids": 23
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r\"ab{3}\"\n    if re.search(pattern, text):\n        print(True)\n    else:\n        print(False)\n",
        "num_ids": 39
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    #patterns = re.findall(r'a{3}b', text)\n    patterns = re.findall(r'[a-z]{3}b', text)\n    return patterns\n",
        "num_ids": 51
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + list(test_str))\n",
        "num_ids": 17
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list)\n    new_tuple += (test_str,)\n    return new_tuple\n",
        "num_ids": 34
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, *test_list)\n",
        "num_ids": 15
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + test_str)\n",
        "num_ids": 15
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = ()\n    new_tuple = (test_str, *test_list)\n    return new_tuple\n",
        "num_ids": 34
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list)\n    \nif __name__ == \"__main__\":\n    print(new_tuple(['1', '2', '3'], '1234'))\n    print(new_tuple([1, 2, 3], '1234'))",
        "num_ids": 67
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list)\n    new_tuple += (test_str,)\n    return new_tuple\n",
        "num_ids": 34
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + test_str)\n",
        "num_ids": 15
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = test_list + test_str\n    print(new_tuple)\n    return new_tuple\n",
        "num_ids": 32
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + (test_str,)\n    #print(type(tuple(test_list)))\n    #return (tuple(test_list), test_str)\n",
        "num_ids": 47
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_index = []\n    for i in range(0,len(nums),2):\n        if i % 2 == 0:\n            even_index.append(nums[i])\n",
        "num_ids": 47
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums)):\n        if nums[i]%2 == 0:\n            print(True)\n            break\n        else:\n            print(False)\n    \n    \ndef test_even_position():\n    assert even_position([1,2,3,4]) == True\n    assert even_position([1,3,5,7]) == False\n    assert even_position([1,2,3,4,5]) == True\n    assert even_position([2,4,6,8,0]) == True\n    assert even_position([4,2,6,8,0]) == False\n    assert even_position([2,4,6,8,0,1]) == True\n    assert even_position([4,2,6,8,0,1,3]) == False\n    print('All test cases passed.')\n",
        "num_ids": 206
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if nums!= None:\n        for i in range(0, len(nums)):\n            if i % 2 == 0 and nums[i] % 2!= 0:\n                return False\n        return True\n    else:\n        return None\n",
        "num_ids": 62
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    nums_list = list(nums)\n    even_list = []\n    for i in range(0,len(nums_list)):\n        if i % 2 == 0:\n            even_list.append(nums_list[i])\n    return even_list\n",
        "num_ids": 68
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for index, num in enumerate(nums):\n        if (index + 1) % 2 == 0 and num % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # even_indices = []\n    # for i in range(len(nums)):\n    #     if i % 2 == 0:\n    #         even_indices.append(nums[i])\n",
        "num_ids": 52
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count=0\n    for i in range(len(nums)):\n        if(nums[i]%2==0):\n            count=count+1\n    if(count==len(nums)):\n        print(\"True\")\n    else:\n        print(\"False\")\nnums=[1,2,3,4,5]\neven_position(nums)\nprint(even_position.__doc__)\nprint(even_position.__name__)\n",
        "num_ids": 113
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            print(\"False\")\n            return False\n    print(\"True\")\n    return True\n    \nnums = [5,4,3,2,1,0]\neven_position(nums)\n",
        "num_ids": 71
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums)):\n        if(nums[i] % 2!= 0):\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    lst=[]\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            lst.append(nums[i])\n    for j in lst:\n        if j%2!=0:\n            return False\n    return True\n",
        "num_ids": 68
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return ()\n",
        "num_ids": 19
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for j in test_tup:\n        if type(j) is tuple:\n            for k in j:\n                remove_nested(k)\n        else:\n            test_tup = test_tup + (j,)\n    return test_tup\n",
        "num_ids": 64
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    tup = test_tup\n    \n    if len(tup) == 2:\n        return tup[0]\n    return tuple([remove_nested(x) for x in tup])\n",
        "num_ids": 50
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    lst = []\n    for tup in test_tup:\n        if len(tup) > 1:\n            lst.append(tup)\n        else:\n            lst.append(tup[0])\n    return tuple(lst)\n",
        "num_ids": 64
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for item in test_tup:\n        if isinstance(item,(tuple,list)):\n            remove_nested(item)\n        else:\n            test_tup.remove(item)\n    return test_tup\n",
        "num_ids": 58
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    x,y = test_tup\n    print(x,y)\n",
        "num_ids": 20
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple([x for x in test_tup if x!= (None, None)])\n",
        "num_ids": 25
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    x=test_tup\n    x=x[0][2:]\n    return x\n",
        "num_ids": 24
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[0]\n",
        "num_ids": 12
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return\n",
        "num_ids": 5
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    num_list = []\n    count = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) is list:\n            count += 1\n            num_list.append(input_list[i])\n    return count, num_list\n",
        "num_ids": 69
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count = count+1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    number_of_lists=0\n    for i in range(0,len(input_list)):\n        if isinstance(input_list[i],list):\n            number_of_lists=number_of_lists+1\n    return number_of_lists\n",
        "num_ids": 64
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if isinstance(input_list,list):\n        print('List is true')\n    else:\n        print('List is false')\n    count = 0\n    for i in range(len(input_list)):\n        if isinstance(input_list[i],list):\n            count += 1\n    print('Total no. of lists are: ',count)\n    return count\n",
        "num_ids": 90
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) == type([]):\n            count += 1\n",
        "num_ids": 42
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == type([]):\n            count += 1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    i=0\n    for x in input_list:\n        i=i+1\n    return i\n",
        "num_ids": 27
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    list_cnt = 0\n    for i in input_list:\n        if type(i) == list:\n            list_cnt += 1\n    return list_cnt\n",
        "num_ids": 44
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if isinstance(input_list[i], list):\n            count += 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    #l=len(arr)\n    low = 0\n    high = len(arr)-1\n    while low <= high:\n        mid = (low+high)//2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            high = mid-1\n        else:\n            low = mid+1\n    return -1",
        "num_ids": 90
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    #print(x)\n    if arr[-1] == x:\n        return len(arr)\n    else:\n        i = 0\n        while i < len(arr)-1:\n            i += 1\n            if arr[i] > x:\n                break\n        return i\n",
        "num_ids": 69
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            return i\n",
        "num_ids": 35
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1,0,-1):\n        if arr[i] == x:\n            return i\n        \n    return -1\n    ",
        "num_ids": 41
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if not arr:\n        return -1\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        mid = start + (end - start) // 2\n        if arr[mid] == x:\n            if mid == end:\n                return mid\n            else:\n                start = mid + 1\n        else:\n            end = mid\n    return start\n",
        "num_ids": 93
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1\narr = [1,2,2,2,3,4,4]\nx = 2\nprint(last(arr,x))\n'''\nTime Complexity:\nO(n)\nSpace Complexity:\nO(1)\n'''\n",
        "num_ids": 2
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr==[]:\n        return -1\n    elif arr[-1]==x:\n        return len(arr)-1\n    elif arr[-1]<x:\n        return last(arr[:-1],x)\n    else:\n        return last(arr[:-1],x)\n",
        "num_ids": 74
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr is None or x is None:\n        return None\n",
        "num_ids": 17
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    \n    length = len(arr)\n    if length == 0:\n        return -1\n    elif length == 1:\n        return 0 if x == arr[0] else -1\n    else:\n        mid = length // 2\n        if x == arr[mid]:\n            return mid\n        elif x > arr[mid]:\n            return last(arr[mid:],x)\n        elif x < arr[mid]:\n            return last(arr[:mid],x)\n    \nif __name__ == '__main__':\n    arr = [5, 7, 9, 11]\n    x = 11\n    print(last(arr,x))\n    ",
        "num_ids": 156
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    count = 0\n    for i in range(0,len(arr)):\n        if arr[i] == x:\n            count += 1\n            if count == 1:\n                return i\n            else:\n                continue\n        else:\n            continue\n    return -1\n",
        "num_ids": 66
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a[ab]')\n    result = pattern.search(text)\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    p1 = r'a[a-b]+$'\n    return(re.search(p1, text))\n",
        "num_ids": 30
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    result = re.findall(r'a.*?b', text)\n    if result:\n        print(result)\n    else:\n        print('No match')\n",
        "num_ids": 42
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.*?(b)$')\n    if re.search(pattern, text):\n        print(True)\n    else:\n        print(False)\n    # pass # Remove this when you are done.\n",
        "num_ids": 61
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    #Regex: (a[^b]*b)\n    #'^' -> beginning\n    #'$' -> end\n    #'*' -> 0 or more\n    #'+' -> 1 or more\n    #'?' -> 0 or 1\n    #'{2,5}' -> 2 to 5 times\n    #'{,2}' -> 0 to 2 times\n    #'{,5}' -> 0 to 5 times\n    return re.match(r'^a[^b]*b$',text)\n",
        "num_ids": 126
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    result = re.search(r'^a.*b$', text)\n    print('The match object:', result)\n    print('The match object groups:', result.groups())\n    print(result.group())\n    print(result.groups())\n",
        "num_ids": 61
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"(?i)(ab)+\"\n    m = re.findall(pattern, text)\n    return m\n    \nprint(text_starta_endb(\"abc\"))\nprint(text_starta_endb(\"abcab\"))\nprint(text_starta_endb(\"abcabcd\"))\nprint(text_starta_endb(\"a\"))\nprint(text_starta_endb(\"aab\"))\nprint(text_starta_endb(\"aaabbb\"))\n",
        "num_ids": 117
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = 'a.*b'\n    \n    if re.search(pattern, text):\n        return re.search(pattern, text).span()\n    else:\n        return None\n",
        "num_ids": 45
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'(a)(.*)(b)')\n    #search_object = pattern.search(text)\n    #print(search_object)\n    #match = pattern.search(text)\n    #match.group(0)\n    print(pattern.search(text).group(0))\n    #print(match.group(0))\n",
        "num_ids": 88
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    res = re.search('^a.*b$', text)\n    return res!= None\nprint(text_starta_endb('apples'))\n",
        "num_ids": 40
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # keys = dict.keys()\n    # sum = 0\n    # for i in keys:\n    #     sum += dict[i]\n    return sum(dict.values())\n",
        "num_ids": 44
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_ = 0\n    for key, value in dict.items():\n        sum_ += value\n    return sum_\n",
        "num_ids": 30
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum\n",
        "num_ids": 26
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    for i in dict.values():\n        sum_of_values += i\n    print(sum_of_values)\n",
        "num_ids": 30
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum=0\n    for key,values in dict.items():\n        sum+=values\n    return sum\n        \ndef return_keys(dict):\n    '''\n    Write function to find all unique keys in the given dictionary.\n    '''\n    list1=[]\n    for key,value in dict.items():\n        if value not in list1:\n            list1.append(value)\n    return list1\n",
        "num_ids": 42
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # print(dict)\n    # print(dict.items())\n    # print(list(dict.items()))\n    # print(dict.values())\n    # print(list(dict.values()))\n    # print(dict.keys())\n    # print(list(dict.keys()))\n    # print(dict.items())\n    # print(list(dict.items()))\n    return sum(list(dict.values()))\n",
        "num_ids": 105
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    #initializing sum\n    sum = 0\n",
        "num_ids": 13
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict:\n        total += dict[item]\n    return total\n",
        "num_ids": 26
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum\n",
        "num_ids": 26
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n<=0:\n        return 0\n    if n==1:\n        return n\n    return n + sum_odd(n-1)\n",
        "num_ids": 38
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2!= 0:\n            sum += i\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    l = 0\n    r = 10\n    for i in range(l,r+1): \n        if i % 2!= 0: \n            sum = sum + i\n    print(sum)\n",
        "num_ids": 55
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if (n<0):\n        return 0\n    else:\n        odd = 0\n        for i in range(n):\n            if (i%2!=0):\n                odd+=i\n        return odd\n",
        "num_ids": 52
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n <= 0 or n == 1: \n        return 0\n    else:\n        return n + sum_odd(n - 1)\n",
        "num_ids": 35
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(list(filter(lambda x: x%2!=0, range(l,r+1))))\n",
        "num_ids": 29
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    ans = 0\n    for i in range(n):\n        if i % 2!= 0:\n            ans += i\n    print(ans)\n",
        "num_ids": 37
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    n = int(n)\n    l = int(l)\n    r = int(r)\n    if l >= r:\n        raise ValueError(\"l should be less than or equal to r\")\n    elif l == r:\n        return n\n    else:\n        sum = 0\n        for i in range(l, r):\n            if i % 2!= 0:\n                sum += i\n        return sum\n",
        "num_ids": 100
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 1:\n            sum += i\n    print(sum)\n    return sum",
        "num_ids": 39
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if type(n) == type(int()) and n >= 0: \n        return sum(i for i in range(1,n+1) if i%2!= 0)\n    else:\n        raise ValueError(\"\"\"1. It should take only integer values as input.\"\"\")\n",
        "num_ids": 68
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if not arr:\n        return 0\n    return arr[0] + _sum(arr[1:])\n    \ndef _reverse(arr):\n    '''\n    Write a python function to reverse an array in place.\n    '''\n    if not arr:\n        return arr\n    arr_len = len(arr)\n    start, end = 0, arr_len - 1\n    while start < end:\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\n    return arr\n    \ndef _reverse_itr(arr):\n    '''\n    Write a python function to reverse an array using \n    a forward and backward pointer technique.\n    '''\n    if not arr:\n        return arr\n    start, end = 0, len(arr) - 1\n    while start < end:\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\n    return arr\n    \ndef _insert_sort(arr):\n    '''\n    Write a python function to sort the given array using \n    insert sort algorithm.\n    '''\n    if not arr:\n        return arr\n    for i in range(len(arr)):\n        j = i\n        while j > 0 and arr[j] < arr[j - 1]:\n            arr[j], arr[j - 1] = arr[j - 1], arr[j]\n            j -= 1\n    return arr\n    \ndef _insert_sort_rec(arr):\n    '''\n    Write a python function to sort the given array using \n    insert sort algorithm.\n    '''\n    if not arr:\n        return arr\n    for i in range(len(arr)):\n        if i == 0:\n            continue\n        j = i\n        while j > 0 and arr[j] < arr[j - 1]:\n            arr[j], arr[j - 1] = arr[j - 1], arr[j]\n            j -= 1\n    return arr\n    \ndef _bubble_sort(arr):\n    '''\n    Write a python function to sort the given array using \n    bubble sort algorithm.\n    '''\n    if not arr:\n        return arr\n    for i in range(len(arr) - 1):\n        flag = False\n        for j in range(len(arr) - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n                flag = True\n        if not flag:\n            break\n    return arr\n    \ndef _insert_sort_rec_swap(arr):\n    '''\n    Write a python function to sort the given array using \n    insert sort algorithm.\n    '''\n    if not arr:\n        return arr\n    for i in range(len(arr)):\n        if i == 0:\n            continue\n        j = i\n        while j > 0 and arr[j] < arr[j - 1]:\n            arr[j], arr[j - 1] = arr[j - 1], arr[j]\n            j -= 1\n    return arr\n    \ndef _quicksort_inplace(arr):\n    '''\n    Write a python function to sort the given array using \n    quick sort algorithm in place.\n    '''\n    if not arr:\n        return arr\n    return quicksort(arr, 0, len(arr) - 1)\n",
        "num_ids": 30
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    return _sum(arr[1:]) + arr[0]\n    \ndef _sum_even_odd(arr):\n    '''\n    Write a python function to find the sum of even numbers and the sum of odd numbers in an array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] % 2!= 0:\n        return _sum_even_odd(arr[1:]) + arr[0]\n    return _sum_even_odd(arr[1:])\n    \ndef _maximum_subarray(arr, s=0):\n    '''\n    Write a python function to find the largest possible sum subarray in an array, given a size s.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    if s == 1:\n        return arr[0]\n    return _maximum_subarray(arr[1:], s-1) + max(arr[0], arr[1])\n    \ndef _maximum_subarray_dp(arr, size, memo):\n    if size == 0:\n        return 0\n    if size == 1:\n        return arr[0]\n    \n    if memo[size-1]!= -1:\n        return memo[size-1]\n    \n    if arr[0] > memo[size-2]:\n        memo[size-1] = _maximum_subarray_dp(arr, size-1, memo) + arr[0]\n    else:\n        memo[size-1] = _maximum_subarray_dp(arr, size-1, memo)\n    return memo[size-1]\n    \ndef _minimum_subarray(arr, size, memo):\n    if size == 0:\n        return 0\n    if size == 1:\n        return arr[0]\n    \n    if memo[size-1]!= -1:\n        return memo[size-1]\n    \n    if arr[0] < memo[size-2]:\n        memo[size-1] = _minimum_subarray(arr, size-1, memo) + arr[0]\n    else:\n        memo[size-1] = _minimum_subarray(arr, size-1, memo)\n    return memo[size-1]\n    \ndef _minimum_subarray_dp(arr, size, memo):\n    if size == 0:\n        return 0\n    if size == 1:\n        return arr[0]\n    \n    if memo[size-1]!= -1:\n        return memo[size-1]\n    \n    if arr[0] > memo[size-2]:\n        memo[size-1] = _minimum_subarray_dp(arr, size-1, memo) + arr[0]\n    else:\n        memo[size-1] = _minimum_subarray_dp(arr, size-1, memo)\n    return memo[size-1]\n    \ndef _mean(arr):\n    return sum(arr)/len(arr)\n    \ndef _mean_dp(arr, memo):\n    if len(arr) == 1:\n        return arr[0]\n    if memo[len(arr)-1]!= -1:\n        return memo[len(arr)-1]\n    memo[len(arr)-1] = _mean_dp(arr[1:], memo)\n    return memo[len(arr)-1]\n    \ndef _median(arr):\n    arr.sort()\n    length = len(arr)\n    if length % 2 == 0:\n        return (arr[length//2] + arr[length//2 - 1])/2\n    else:\n        return arr[length//2]\n        \ndef _median_dp(arr, memo):\n    if len(arr) == 1:\n        return arr[0]\n    if memo[len(arr)-1]!= -1:\n        return memo[len(arr)-1]\n    if len(arr) % 2 == 0:\n        memo[len(arr)-1] = _median_dp(arr[1:], memo) + _median_dp(arr[0:len(arr)-1], memo)\n    else:\n        memo[len(arr)-1] = _median_dp(arr[1:], memo)\n    return memo[len(arr)-1]\n    \ndef _mode(arr):\n    _count = 1\n    _mode = None\n    _max = 0\n    _max_count = 1\n    for i in arr:\n        if i > _max:\n            _max = i\n            _max_count = 1\n        elif i == _max:\n            _max_count += 1\n        if _max_count > _count:\n            _count = _max_count\n            _mode = _max\n    return _mode\n    \ndef _mode_dp(arr, memo):\n    if len(arr) == 1:\n        return arr[0]\n    if memo[len(arr)-1]!= -1:\n        return memo[len(arr)-1]\n    \n    if arr[0] > memo[len(arr)-2]:\n        memo[len(arr)-1] = _mode_dp(arr[1:], memo) + 1\n    else:\n        memo[len(arr)-1] = _mode_dp(arr[1:], memo)\n    return memo[len(arr)-1]\n    \ndef _median_of_medians(arr):\n    length = len(arr)\n    if length == 1:\n        return arr[0]\n    \n    middle = length//2\n    left_arr = arr[:middle]\n    right_arr = arr[middle:]\n    \n    median_of_medians_dp(left_arr, right_arr, arr)\n    \ndef median_of_medians_dp(left_arr, right_arr, arr):\n    if len(left_arr) == 1:\n        return left_arr[0]\n    if len(right_arr) == 1:\n        return right_arr[0]\n        \n    mid = length//2\n    left_arr = left_arr[:mid]\n    right_arr = right_arr[:mid]\n    \n    median_of_medians_dp(left_arr, right_arr, arr)\n    \ndef _quartile(arr):\n    length = len(arr)\n    if length % 2 == 0:\n        return (_median(arr[:length//2]), _median(arr[length//2:]))\n    else:\n        return (_median(arr[:length//2]), _median(arr[length//2 + 1:]))\n        \ndef _quartile_dp(arr, memo):\n    if len(arr) == 1:\n        return (arr[0], arr[0])\n    if memo[len(arr)-1]!= -1:\n        return memo[len(arr)-1]\n    if len(arr) % 2 == 0:\n        memo[len(arr)-1] = (_quartile_dp(arr[:len(arr)//2], memo)[0], _quartile_dp(arr[len(arr)//2:], memo)[1])\n    else:\n        memo[len(arr)-1] = (_quartile_dp(arr[:len(arr)//2], memo)[0], _quartile_dp(arr[len(arr)//2 + 1:], memo)[1])\n    return memo[len(arr)-1]\n    \ndef _median_of_two_sorted_arrays(arr1, arr2):\n    _count = 1\n    _median = None\n    _max = 0\n    _max_count = 1\n    for i in arr1:\n        if i > _max:\n            _max = i\n            _max_count = 1\n        elif i == _max:\n            _max_count += 1\n        if _max_count > _count:\n            _count = _max_count\n            _median = _max\n    for i in arr2:\n        if i > _max:\n            _max = i\n            _max_count = 1\n        elif i == _max:\n            _max_count += 1\n        if _max_count > _count:\n            _count = _max_count\n            _median = _max\n    return _median\n    \ndef _median_of_two_sorted_arrays_dp(arr1, arr2, memo):\n    if len(arr",
        "num_ids": 1838
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n    \ndef _max(arr):\n    '''\n    Write a python function to find the max element of an array.\n    '''\n    return max(arr)\n    \ndef _min(arr):\n    '''\n    Write a python function to find the min element of an array.\n    '''\n    return min(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n",
        "num_ids": 23
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n",
        "num_ids": 23
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    return arr[0] + _sum(arr[1:])\n",
        "num_ids": 40
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if arr == None:\n        return None\n    else:\n        _sum = 0\n        for i in range(len(arr)):\n            _sum = _sum + arr[i]\n        return _sum\n",
        "num_ids": 52
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    print(f\"d is {d}\")\n    print(f\"n is {n}\")\n    print(f\"{d}<<{d}\")\n    return (n << d) & 0xFFFFFFFF\n    \n",
        "num_ids": 55
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    return ((n << d) | (n >> (32 - d))) & mask\n",
        "num_ids": 32
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d)|(n >> (32 - d))) & (2**32 -1)\n",
        "num_ids": 26
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\n",
        "num_ids": 24
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d)|(n >> (32-d)))\n",
        "num_ids": 18
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d)|(n >> (32 - d))\n",
        "num_ids": 18
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n << d | (n >> (32-d))\n",
        "num_ids": 17
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\ndef right_rotate(n,d):   \n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n >> d) | (n << (32 - d))) & 0xFFFFFFFF\n",
        "num_ids": 24
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n=int(n)\n    d=int(d)\n    n1=n>>d\n    n=n<<(32-d)\n    n=n|n1\n    return(n)\n",
        "num_ids": 51
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n<<d)|((n>>(32-d))&(~0))\n",
        "num_ids": 23
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\n",
        "num_ids": 12
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s', '', text)\n",
        "num_ids": 16
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text).strip()\n",
        "num_ids": 18
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # replace all whitespaces with spaces\n    # Remove all spaces from the string\n    # Replace all spaces with blank spaces\n    return''.join(text.split())\n",
        "num_ids": 39
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r'\\s', '', text)\n    return text\n",
        "num_ids": 23
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\n",
        "num_ids": 12
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\"\\s+\", \"\", text)\n",
        "num_ids": 17
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return ''.join(text.split())\ndef remove_all_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)\n",
        "num_ids": 16
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \",\"\")\n",
        "num_ids": 12
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s', '', text)\ndef test_remove_all_spaces():\n    print(\"Testing remove_all_spaces...\")\n    assert(remove_all_spaces(\"\") == \"\")\n    assert(remove_all_spaces(\" \") == \"\")\n    assert(remove_all_spaces(\"Hello\") == \"Hello\")\n    assert(remove_all_spaces(\"   Hello\") == \"Hello\")\n    assert(remove_all_spaces(\" Hello \") == \"Hello\")\n    assert(remove_all_spaces(\"Hello  \") == \"Hello\")\n    assert(remove_all_spaces(\"Hello \") == \"Hello\")\n    assert(remove_all_spaces(\"Hello\") == \"Hello\")\n    assert(remove_all_spaces(\"Hello \") == \"Hello\")\n    assert(remove_all_spaces(\"Hello   \") == \"Hello\")\n    assert(remove_all_spaces(\"Hello   Hello\") == \"Hello\")\n    print(\"... done!\")\n",
        "num_ids": 240
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n",
        "num_ids": 10
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y or x == z or y == z:\n        count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert 3 == y == x == z, \"Wrong answer\"\n    \ndef test_four_not_equal():\n    '''\n    Write a python function to count the number of not-equal numbers from three given integers.\n    '''\n    assert 0 == y!= x!= z, \"Wrong answer\"\n    \ndef test_five_one_is_bigger_than_two():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is greater than the number of odd numbers.\n    '''\n    assert 2 == y > 1 and 2 == z > 1, \"Wrong answer\"\n    \ndef test_six_three_are_smaller_than_five():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert 5 == y < 3 and 5 == z < 3, \"Wrong answer\"\n    \ndef test_seven_two_are_bigger_than_three():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert 2 == y < 3 and 2 == z < 3, \"Wrong answer\"\n    \ndef test_eight_all_numbers_are_bigger_than_three():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert 3 == y < 3 and 3 == z < 3, \"Wrong answer\"\n    \ndef test_nine_all_numbers_are_smaller_than_three():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert 3 == y < 3 and 3 == z < 3, \"Wrong answer\"\n    \ndef test_ten_numbers_are_same():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert y == z, \"Wrong answer\"\n    \ndef test_eleven_all_numbers_are_smaller_than_three():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert 3 == y < 3 and 3 == z < 3, \"Wrong answer\"\n    \ndef test_twelve_numbers_are_equal():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert y == z, \"Wrong answer\"\n    \ndef test_thirteen_all_numbers_are_same():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert y == z, \"Wrong answer\"\n    \ndef test_fourteen_all_numbers_are_equal():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert y == z, \"Wrong answer\"\n    \ndef test_sixteen_all_numbers_are_smaller_than_three():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert 3 == y < 3 and 3 == z < 3, \"Wrong answer\"\n    \ndef test_seventeen_all_numbers_are_smaller_than_three():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert 3 == y < 3 and 3 == z < 3, \"Wrong answer\"\n    \ndef test_eighteen_all_numbers_are_equal():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert y == z, \"Wrong answer\"\n    \ndef test_nineteen_all_numbers_are_equal():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert y == z, \"Wrong answer\"\n    \ndef test_twenty_three_are_smaller_than_two():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert 3 == y < 3 and 3 == z < 3, \"Wrong answer\"\n    \ndef test_twenty_four_are_bigger_than_three():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert 2 == y > 3 and 2 == z > 3, \"Wrong answer\"\n    \ndef test_twenty_five_are_smaller_than_three():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert 2 == y > 3 and 2 == z > 3, \"Wrong answer\"\n    \ndef test_twenty_six_are_equal():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert y == z, \"Wrong answer\"\n    \ndef test_twenty_seven_are_equal():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert y == z, \"Wrong answer\"\n    \ndef test_twenty_eight_are_smaller_than_three():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert 3 == y < 3 and 3 == z < 3, \"Wrong answer\"\n    \ndef test_twenty_nine_are_equal():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert y == z, \"Wrong answer\"\n    \ndef test_thirty_are_equal():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert y == z, \"Wrong answer\"\n    \ndef test_forty_one_are_smaller_than_three():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert 3 == y < 3 and 3 == z < 3, \"Wrong answer\"\n    \ndef test_forty_two_are_bigger_than_three():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert 2 == y > 3 and 2 == z > 3, \"Wrong answer\"\n    \ndef test_forty_three_are_smaller_than_three():\n    '''\n    Write a python function to count the number of numbers from a list where the number of even numbers \n    is less than the number of odd numbers.\n    '''\n    assert 2 == y > 3 and 2 == z > 3, \"Wrong answer\"\n    \ndef test_forty_four_are_equal():\n    '''",
        "num_ids": 1
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    result = 0\n    for i in range(1,x+1):\n        if x==y==z:\n            result += 1\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 25
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x,y):\n        if x==y and x==z:\n            count+=1\n    print('number of equal numbers in the range:',count)\n",
        "num_ids": 49
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    a,b,c = x,y,z\n    count = 0\n    for i in range(len(a)):\n        if a[i] == b[i] == c[i]:\n            count += 1\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z and x == z:\n        count = count + 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y and x == z:\n        return 3\n    elif x!= y and x!= z:\n        return 2\n    else:\n        return 1\n    \nprint(test_three_equal(1,1,1))\nprint(test_three_equal(1,1,3))\nprint(test_three_equal(1,1,4))\n",
        "num_ids": 90
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x = int(x)\n    y = int(y)\n    z = int(z)\n    x,y,z = sorted([x,y,z])\n    return x == y == z\n",
        "num_ids": 50
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # Logic: if number of elements is odd, then no of rotations required is: (no of elements)/2\n    #          if number of elements is even, then no of rotations required is: (no of elements-1)/2\n    def count_rotations(arr):\n        count = 0\n        if len(arr) <= 1:\n            return count\n        mid = len(arr)//2\n        left_sub = arr[:mid]\n        right_sub = arr[mid:]\n        count += count_rotations(left_sub)\n        count += count_rotations(right_sub)\n        # if number of elements is even\n        if len(arr)%2 == 0:\n            if arr[mid] > arr[mid+1]:\n                count += 1\n        else:\n            if arr[mid] < arr[mid+1]:\n                count += 1\n        return count\n    return count_rotations(arr)\n",
        "num_ids": 218
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    '''\n    T=O(n) and S=O(1)\n    '''\n    if len(arr)==1:\n        return 0\n    else:\n        index=len(arr)-1\n        count=0\n        while index>0:\n            if arr[index]<arr[index-1]:\n                count+=1\n            else:\n                break\n            index-=1\n        return count\n",
        "num_ids": 77
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    rotations = 0\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        if arr[left] <= arr[right]:\n            left += 1\n        else:\n            rotations += 1\n            # swap elements\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n    return rotations\n",
        "num_ids": 97
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    # Check if array is already sorted or not\n    # if not, make an array copy and swap the first and last element\n    # then move the second last element to the right\n    # then move the second last element to the left\n    # and so on and so forth\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            arr = arr[i+1:] + arr[:i+1]\n            break\n    for i in range(n-2):\n        if arr[i] > arr[i+2]:\n            arr = arr[i+2:] + arr[:i+2]\n            break\n    for i in range(n-3):\n        if arr[i] > arr[i+3]:\n            arr = arr[i+3:] + arr[:i+3]\n            break\n    for i in range(n-4):\n        if arr[i] > arr[i+4]:\n            arr = arr[i+4:] + arr[:i+4]\n            break\n    for i in range(n-5):\n        if arr[i] > arr[i+5]:\n            arr = arr[i+5:] + arr[:i+5]\n            break\n    for i in range(n-6):\n        if arr[i] > arr[i+6]:\n            arr = arr[i+6:] + arr[:i+6]\n            break\n    for i in range(n-7):\n        if arr[i] > arr[i+7]:\n            arr = arr[i+7:] + arr[:i+7]\n            break\n    for i in range(n-8):\n        if arr[i] > arr[i+8]:\n            arr = arr[i+8:] + arr[:i+8]\n            break\n    for i in range(n-9):\n        if arr[i] > arr[i+9]:\n            arr = arr[i+9:] + arr[:i+9]\n            break\n    for i in range(n-10):\n        if arr[i] > arr[i+10]:\n            arr = arr[i+10:] + arr[:i+10]\n            break\n    return arr\n",
        "num_ids": 537
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    n = len(arr)\n    i = 0\n    while(i < n-1):\n        if arr[i] <= arr[i+1]:\n            i+=1\n        else:\n            j = i\n            while j < n-1 and arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                count+=1\n                j+=1\n            i = j\n    return count\n    \n",
        "num_ids": 122
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    start, end = 0, len(arr) - 1\n    while start <= end:\n        if arr[start] > arr[end]:\n            count += 1\n            arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\n    return count\n",
        "num_ids": 78
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i]<arr[i+1]:\n            continue\n        else:\n            while arr[i]>arr[i+1]:\n                count+=1\n                arr[i+1],arr[i] = arr[i],arr[i+1]\n    \n    print(count)\n    \n    return count\n",
        "num_ids": 103
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count=0\n    for i in range(1,len(arr)):\n        if(arr[i]<arr[i-1]):\n            count+=1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # \n    #    if length of array is 1, then no rotation required\n    #    if length of array is 2, then array is sorted. so no rotation required\n    #    if length of array is n, then we have to consider all cases i.e. n-1, n-2, n-3,....., 1,2,.., n-1, n \n    #\n    #    If length of array is 2, then we need 1 rotation and if it is 3, then we need 2 rotations, 3 rotations, 1 rotation. So the answer is 3+2+1=5\n    #\n    #    If length of array is n, then we need 2*n-2 rotations and so on. If we have a total of n+1 rotations, then total of 2^n-1 rotations.\n    #\n    #    If length of array is n, we need 2*n-2 rotations, 2*n-3 rotations, 3*n-4 rotations, 2*n-5 rotations, n-1 rotations.\n    #\n    #    If length of array is n, then the total of 2^n-1 rotations\n    #\n",
        "num_ids": 272
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    i = 0\n    while(i < len(arr)-1):\n        if(arr[i] < arr[i+1]):\n            break\n        i += 1\n    if(i == len(arr)-1):\n        return 0\n    return (i+1)\n    \nprint(count_rotation([5, 4, 3, 2, 1]))\nprint(count_rotation([5, 3, 1, 2, 4]))\nprint(count_rotation([1, 2, 3, 4, 5]))\n",
        "num_ids": 126
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 0: return False\n    \n    sqrt = int(math.sqrt(n))\n    \n    if sqrt*sqrt == n: return True\n    else: return False",
        "num_ids": 47
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    \n    s = n**0.5\n    if s == int(s):\n        return True\n    return False\n",
        "num_ids": 30
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if int(n**0.5) == int(n**0.5)**2:\n        print(\"yes\")\n    else:\n        print(\"no\")\n",
        "num_ids": 41
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n <= 1):\n        return True\n",
        "num_ids": 14
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    root = int(n**0.5)\n    if root*root == n:\n        return True\n    return False",
        "num_ids": 30
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = int(math.sqrt(n))\n    return x*x == n\n",
        "num_ids": 23
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = 0\n    while x * x < n:\n        x += 1\n    if x * x == n:\n        return True\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0:\n        return 0\n    x = n\n    s = 1\n    while x % 2 == 0:\n        x = x / 2\n        s += 1\n    for _ in range(s):\n        x = x * x\n        if x == 1:\n            return 1\n        elif x == n:\n            return 0\n    return 0\n",
        "num_ids": 87
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    root = n**0.5\n    return root == int(root)\n",
        "num_ids": 31
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0 :\n        return False\n    \n    left = 0\n    right = n\n    \n    while (left <= right) :\n        mid = left + (right - left) // 2\n        sq = mid * mid\n        \n        if sq == n :\n            return True\n        elif sq < n :\n            left = mid + 1\n        else :\n            right = mid - 1\n    \n    return False\n",
        "num_ids": 101
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return product_even(arr)\n",
        "num_ids": 11
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product = product * num\n    return product % 2 == 0\n",
        "num_ids": 30
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    i=0\n    while i<len(arr):\n        i=i+1\n        total=1\n        for j in range(i,len(arr)):\n            total=total*arr[j]\n        if total%2==0:\n            return True\n        else:\n            return False\n    return False\nprint(is_product_even([1,2,3,4,5,6,7,8,9,10])",
        "num_ids": 105
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return False\n    else:\n        if arr[0] == 0:\n            return is_product_even(arr[1:])\n        else:\n            return arr[0] % 2 == 0 and is_product_even(arr[1:])\n",
        "num_ids": 71
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if sum(arr)%2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in arr:\n        if i%2 == 0:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    prod=1\n    for i in arr:\n        prod*=i\n    return prod%2==0\n    \n    \ndef is_string_palindrome(str): \n    '''\n    Write a function to check whether the given string is palindrome or not. \n    Palindrome is the word, phrase, or sequence that reads the same backward as forward, \n    for example, madam or nurses run.\n    '''\n    return str==str[::-1]\n    \n    \ndef is_string_in_list(str, lst): \n    '''\n    Write a function to check whether the given string is in the list or not. \n    '''\n    return str in lst\n    \n    \ndef is_sum_of_squares(num): \n    '''\n    Write a function to calculate the sum of the square of the numbers in a range. \n    '''\n    sum = 0\n    for i in range(1, num+1):\n        sum += i**2\n    return sum\n    \n    \ndef is_odd_or_even(num): \n    '''\n    Write a function to check whether the given number is even or odd. \n    '''\n    return num%2==0 or num%2!=0\n    \n    \ndef is_even_number_greater_than_ten(num): \n    '''\n    Write a function to check whether the given number is greater than 10. \n    '''\n    return num>10\n    \n    \ndef is_zero_or_one(num): \n    '''\n    Write a function to check whether the given number is 0 or 1. \n    '''\n    return num==0 or num==1\n    \n    \ndef is_two_numbers_equal(num1, num2): \n    '''\n    Write a function to check whether the given numbers are equal or not. \n    '''\n    return num1==num2\n    \n    \ndef is_reverse_palindrome(str): \n    '''\n    Write a function to check whether the given string is a palindrome or not. \n    '''\n    return str==str[::-1]\n    \n    \ndef is_palindrome_using_stack(str): \n    '''\n    Write a function to check whether the given string is a palindrome or not. \n    '''\n    stk=[]\n    for i in str:\n        stk.append(i)\n        \n    while len(stk)>1:\n        if stk.pop()!=stk.pop():\n            return False\n        \n    return True\n    \n    \ndef is_palindrome_using_recursion(str): \n    '''\n    Write a function to check whether the given string is a palindrome or not. \n    '''\n    \n    if len(str)<=1:\n        return True\n    \n    else:\n        if str[0]==str[-1]:\n            return is_palindrome_using_recursion(str[1:-1])\n        else:\n            return False\n    \n    \ndef is_palindrome_using_slicing(str): \n    '''\n    Write a function to check whether the given string is a palindrome or not. \n    '''\n    if len(str)<=1:\n        return True\n    \n    else:\n        if str[0]==str[-1]:\n            return is_palindrome_using_slicing(str[1:-1])\n        else:\n            return False\n    \n    \ndef is_palindrome_using_slicing_recursive(str): \n    '''\n    Write a function to check whether the given string is a palindrome or not. \n    '''\n    if len(str)<=1:\n        return True\n    \n    else:\n        if str[0]==str[-1]:\n            return is_palindrome_using_slicing_recursive(str[1:-1])\n        else:\n            return False\n    \n    \ndef reverse_numbers(lst): \n    '''\n    Write a function to reverse the numbers in the given list.\n    '''\n    for i in range(len(lst)//2):\n        temp = lst[i]\n        lst[i] = lst[len(lst)-i-1]\n        lst[len(lst)-i-1] = temp\n    return lst\n    \n    \ndef rotate_list(lst): \n    '''\n    Write a function to rotate the given list. \n    '''\n    return lst[-1:]+lst[:-1]\n    \n    \ndef list_sorting_algorithms(): \n    '''\n    Write a function to sort a list in ascending order. \n    '''\n    lst = [1, 4, 3, 0, 9, -2, 8]\n    lst.sort()\n    print(lst)\n    \n    \ndef binary_search_recursive(lst, target):\n    '''\n    Write a function to search whether the target is in the list using recursion. \n    '''\n    if len(lst)==0:\n        return False\n    else:\n        mid = len(lst)//2\n        if lst[mid]==target:\n            return True\n        else:\n            if target<lst[mid]:\n                return binary_search_recursive(lst[:mid], target)\n            else:\n                return binary_search_recursive(lst[mid+1:], target)\n            \n            \ndef binary_search_iterative(lst, target):\n    '''\n    Write a function to search whether the target is in the list using iterative. \n    '''\n    for i in range(len(lst)):\n        if lst[i]==target:\n            return True\n    return False\n    \n    \ndef find_duplicate(lst):\n    '''\n    Write a function to find and return the duplicate element in the given list. \n    '''\n    for i in range(len(lst)):\n        if lst[i]!=i:\n            return i\n        else:\n            return -1\n    \n    \ndef find_duplicate_with_set(lst): \n    '''\n    Write a function to find and return the duplicate element in the given list. \n    '''\n    seen = set()\n    for i in lst:\n        if i in seen:\n            return i\n        else:\n            seen.add(i)\n    return -1\n    \n    \ndef get_str_after_last_occurrence_of_str(str, substr): \n    '''\n    Write a function to find and return the last occurrence of a substring in a given string. \n    '''\n    index = str.rfind(substr)\n    if index==-1:\n        return -1\n    else:\n        return str[index+1:]\n        \n    \ndef get_str_after_last_occurrence_of_str_without_substring(str, substr): \n    '''\n    Write a function to find and return the last occurrence of a substring in a given string. \n    '''\n    index = str.rfind(substr)\n    if index==-1:\n        return -1\n    else:\n        return str[index+1:]\n    \n    \ndef get_str_before_last_occurrence_of_str(str, substr): \n    '''\n    Write a function to find and return the first occurrence of a substring in a given string. \n    '''\n    index = str.find(substr)\n    if index==-1:\n        return -1\n    else:\n        return str[:index]\n        \n    \ndef get_str_before_last_occurrence_of_str_without_substring(str, substr): \n    '''\n    Write a function to find and return the first occurrence of a substring in a given string. \n    '''\n    index = str.find(substr)\n    if index==-1:\n        return -1\n    else:\n        return str[:index]\n    \n    \ndef get_str_after_first_occurrence_of_str(str, substr): \n    '''\n    Write a function to find and return the last occurrence of a substrin",
        "num_ids": 17
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    try:\n        product = 1\n        for n in arr:\n            product *= n\n        if product % 2 == 0:\n            return True\n        else:\n            return False\n    except:\n        return False\n        \ndef is_product_odd(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is odd or not.\n    '''\n    try:\n        product = 1\n        for n in arr:\n            product *= n\n        if product % 2 == 1:\n            return True\n        else:\n            return False\n    except:\n        return False\n",
        "num_ids": 53
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        return True\n    \n    res = 1\n    for i in range(len(arr)):\n        res *= arr[i]\n",
        "num_ids": 58
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    s = 1\n    for i in range(len(arr)):\n        s = s*arr[i]\n    if s%2==0:\n        return True\n    else:\n        return False\n        \n'''\nprint(is_product_even([1, 2, 3, 4]))\nprint(is_product_even([1, 2, 3, 4, 5]))\n'''\n",
        "num_ids": 2
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists)==0:\n        return []\n    if len(lists)==1:\n        if lists[0]>0:\n            return [[lists[0]]]\n        else:\n            return []\n    if len(lists)==2:\n        if lists[0]>0:\n            return [[lists[0]],[lists[1]]]\n        elif lists[1]>0:\n            return [[lists[1]],[lists[0]]]\n        else:\n            return []\n    highest_sum
        "num_ids": 2010
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if lists is None or len(lists) == 0:\n        return None\n    if len(lists) == 1:\n        return lists\n    low, high = 0, len(lists) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if max_sum_rec(lists, low, mid) < max_sum_rec(lists, mid + 1, high):\n            high = mid - 1\n        else:\n            low = mid + 1\n    return max_sum_rec(lists, low, high)\n",
        "num_ids": 129
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    #max_sum = 0\n    #max_sum_list = []\n    #result_list = []\n    \n    #for i in range(0,len(lists)):\n    #    for j in range(0,len(lists[i])):\n    #        if lists[i][j] > max_sum:\n    #            max_sum = lists[i][j]\n    #            max_sum_list = lists[i]\n    #            result_list = lists[i]\n    \n    #print(result_list)\n    \n    return max_sum_list(lists)\n    \n    \ndef max_sum_list_with_extra_index(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    max_sum = 0\n    max_sum_list = []\n    result_list = []\n    \n    #for i in range(0,len(lists)):\n    #    for j in range(0,len(lists[i])):\n    #        if lists[i][j] > max_sum:\n    #            max_sum = lists[i][j]\n    #            max_sum_list = lists[i]\n    #            result_list = lists[i]\n    \n    #print(result_list)\n    \n    return max_sum_list(lists)\n    \n    \ndef max_sum_list_2(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    max_sum = 0\n    max_sum_list = []\n    result_list = []\n    \n    for i in range(0,len(lists)):\n        for j in range(0,len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                max_sum_list = lists[i]\n                result_list = lists[i]\n    \n    print(result_list)\n    \n    return max_sum_list(lists)\n    \n    \ndef max_sum_list_2_with_extra_index(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    max_sum = 0\n    max_sum_list = []\n    result_list = []\n    \n    for i in range(0,len(lists)):\n        for j in range(0,len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                max_sum_list = lists[i]\n                result_list = lists[i]\n    \n    print(result_list)\n    \n    return max_sum_list(lists)\n    \n    \ndef max_sum_list_3(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    max_sum = 0\n    max_sum_list = []\n    result_list = []\n    \n    for i in range(0,len(lists)):\n        for j in range(0,len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                max_sum_list = lists[i]\n                result_list = lists[i]\n    \n    print(result_list)\n    \n    return max_sum_list(lists)\n    \n    \ndef max_sum_list_3_with_extra_index(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    max_sum = 0\n    max_sum_list = []\n    result_list = []\n    \n    for i in range(0,len(lists)):\n        for j in range(0,len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                max_sum_list = lists[i]\n                result_list = lists[i]\n    \n    print(result_list)\n    \n    return max_sum_list(lists)\n    \n    \ndef max_sum_list_4(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    max_sum = 0\n    max_sum_list = []\n    result_list = []\n    \n    for i in range(0,len(lists)):\n        for j in range(0,len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                max_sum_list = lists[i]\n                result_list = lists[i]\n    \n    print(result_list)\n    \n    return max_sum_list(lists)\n    \n    \ndef max_sum_list_4_with_extra_index(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    max_sum = 0\n    max_sum_list = []\n    result_list = []\n    \n    for i in range(0,len(lists)):\n        for j in range(0,len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                max_sum_list = lists[i]\n                result_list = lists[i]\n    \n    print(result_list)\n    \n    return max_sum_list(lists)\n    \n    \ndef max_sum_list_5(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    max_sum = 0\n    max_sum_list = []\n    result_list = []\n    \n    for i in range(0,len(lists)):\n        for j in range(0,len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                max_sum_list = lists[i]\n                result_list = lists[i]\n    \n    print(result_list)\n    \n    return max_sum_list(lists)\n    \n    \ndef max_sum_list_5_with_extra_index(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    max_sum = 0\n    max_sum_list = []\n    result_list = []\n    \n    for i in range(0,len(lists)):\n        for j in range(0,len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                max_sum_list = lists[i]\n                result_list = lists[i]\n    \n    print(result_list)\n    \n    return max_sum_list(lists)\n    \n    \ndef max_sum_list_6(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    max_sum = 0\n    max_sum_list = []\n    result_list = []\n    \n    for i in range(0,len(lists)):\n        for j in range(0,len(lists[i])):\n            if lists[i][j] > max_sum:\n                max_sum = lists[i][j]\n                max_sum_list = lists[i]\n                result_list = lists[i]\n    \n    print(result_list)\n    \n    return max_sum_list(lists)\n    \n    \ndef max_sum_list_6_with_extra_index(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    max_sum = 0\n    max_sum_list = []\n    result_list = []\n    \n    for i in range",
        "num_ids": 34
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    result = 0\n    res_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists)):\n            if lists[i] + lists[j] > result:\n                result = lists[i] + lists[j]\n                res_list = [lists[i], lists[j]]\n    return res_list\n",
        "num_ids": 87
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    maximum = lists[0][0]\n    for i in range(len(lists)):\n        if sum(lists[i]) > maximum:\n            maximum = sum(lists[i])\n    return maximum\n",
        "num_ids": 50
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_val = lists[0][0]\n    max_index = 0\n    for index in range(len(lists)):\n        if lists[index][0] > max_val:\n            max_val = lists[index][0]\n            max_index = index\n    return max_index\n",
        "num_ids": 72
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return max_sum_list_rec(lists, 0)\n    \ndef max_sum_list_rec(lists, current_sum):\n    '''\n    Write a recursive function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 1:\n        return lists[0]\n    if len(lists) == 2:\n        return max_sum_list_rec(lists[1], lists[0] + lists[1])\n    new_list = []\n    max_sum_list_rec(lists[2:], current_sum)\n    new_list.append(max_sum_list_rec(lists[1:], current_sum))\n    new_list.append(max_sum_list_rec(lists[2:], current_sum + lists[0]))\n    return new_list\n    \n    \ndef sum_of_max_list(lists):\n    '''\n    Write a function that returns the sum of the maximum element of each list.\n    '''\n    return sum_of_max_list_rec(lists)\n    \ndef sum_of_max_list_rec(lists):\n    '''\n    Write a recursive function that returns the sum of the maximum element of each list.\n    '''\n    if len(lists) == 1:\n        return lists[0]\n    max_element = max(lists[0], lists[1])\n    new_list = []\n    new_list.append(sum_of_max_list_rec(lists[2:]))\n    new_list.append(max_element)\n    return max(new_list)\n    \n    \ndef length_of_max_list(lists):\n    '''\n    Write a function that returns the length of the longest element of each list.\n    '''\n    return length_of_max_list_rec(lists)\n    \ndef length_of_max_list_rec(lists):\n    '''\n    Write a recursive function that returns the length of the longest element of each list.\n    '''\n    if len(lists) == 1:\n        return 1\n    return 1 + max(length_of_max_list_rec(lists[1:]), length_of_max_list_rec(lists[2:]))\n    \n    \ndef sum_of_min_list(lists):\n    '''\n    Write a function that returns the sum of the minimum element of each list.\n    '''\n    return sum_of_min_list_rec(lists)\n    \ndef sum_of_min_list_rec(lists):\n    '''\n    Write a recursive function that returns the sum of the minimum element of each list.\n    '''\n    if len(lists) == 1:\n        return lists[0]\n    return lists[0] + sum_of_min_list_rec(lists[1:])\n    \n    \ndef length_of_min_list(lists):\n    '''\n    Write a function that returns the length of the shortest element of each list.\n    '''\n    return length_of_min_list_rec(lists)\n    \ndef length_of_min_list_rec(lists):\n    '''\n    Write a recursive function that returns the length of the shortest element of each list.\n    '''\n    if len(lists) == 1:\n        return 1\n    return 1 + length_of_min_list_rec(lists[1:])\n    \n    \ndef sum_of_list_after_change(lists, change_index, new_value):\n    '''\n    Write a function that returns the sum of the elements after a change in their value.\n    '''\n    if len(lists) == 1:\n        return lists[0]\n    if change_index == len(lists) - 1:\n        return new_value + lists[change_index]\n    return lists[change_index] + sum_of_list_after_change(lists, change_index + 1, new_value)\n    \n    \ndef length_of_list_after_change(lists, change_index, new_value):\n    '''\n    Write a function that returns the length of the elements after a change in their value.\n    '''\n    if len(lists) == 1:\n        return 1\n    if change_index == len(lists) - 1:\n        return 1 + new_value\n    return 1 + length_of_list_after_change(lists, change_index + 1, new_value)\n    \n    \ndef sum_of_list_after_change_rec(lists, change_index, new_value, sums):\n    '''\n    Write a recursive function that returns the sum of the elements after a change in their value.\n    '''\n    if change_index == len(lists) - 1:\n        sums += new_value\n        return sums\n    if change_index == 0:\n        sums += lists[change_index]\n    return sum_of_list_after_change_rec(lists, change_index + 1, new_value, sums)\n    \ndef length_of_list_after_change_rec(lists, change_index, new_value, sums):\n    '''\n    Write a recursive function that returns the length of the elements after a change in their value.\n    '''\n    if change_index == len(lists) - 1:\n        sums += new_value\n        return sums\n    if change_index == 0:\n        sums += 1\n    return length_of_list_after_change_rec(lists, change_index + 1, new_value, sums)\n    \n    \ndef sum_of_list_after_change_without_recursion(lists, change_index, new_value):\n    '''\n    Write a function that returns the sum of the elements after a change in their value.\n    '''\n    if len(lists) == 1:\n        return lists[0]\n    if change_index == len(lists) - 1:\n        return new_value + lists[change_index]\n    return lists[change_index] + sum_of_list_after_change_without_recursion(lists, change_index + 1, new_value)\n    \ndef length_of_list_after_change_without_recursion(lists, change_index, new_value):\n    '''\n    Write a function that returns the length of the elements after a change in their value.\n    '''\n    if len(lists) == 1:\n        return 1\n    if change_index == len(lists) - 1:\n        return 1 + new_value\n    return 1 + length_of_list_after_change_without_recursion(lists, change_index + 1, new_value)\n    \n    \ndef sum_of_list_after_change_without_recursion_iterative(lists, change_index, new_value):\n    '''\n    Write a function that returns the sum of the elements after a change in their value.\n    '''\n    if len(lists) == 1:\n        return lists[0]\n    if change_index == len(lists) - 1:\n        return new_value + lists[change_index]\n    lists[change_index] += new_value\n    return sum_of_list_after_change_without_recursion_iterative(lists, change_index + 1, new_value)\n    \ndef length_of_list_after_change_without_recursion_iterative(lists, change_index, new_value):\n    '''\n    Write a function that returns the length of the elements after a change in their value.\n    '''\n    if len(lists) == 1:\n        return 1\n    if change_index == len(lists) - 1:\n        return 1 + new_value\n    return 1 + length_of_list_after_change_without_recursion_iterative(lists, change_index + 1, new_value)\n    \n    \ndef sum_of_list_without_recursion(lists):\n    '''\n    Write a function that returns the sum of the elements of a list.\n    '''\n    return sum_of_list_without_recursion_iterative(lists)\n    \ndef sum_of_list_without_recursion_iterative(lists):\n    '''\n    Write a function that returns the sum of the elements of a list.\n    '''\n    if len(lists) == 1:\n        return lists[0]\n    return lists[0] + sum_of_list_without_recursion_iterative(lists[1:])\n    \ndef length_of_lis",
        "num_ids": 54
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    for lst in lists:\n        for el in lst:\n            if el < 0:\n                el = 0\n            if el > max_sum:\n                max_sum = el\n    return max_sum\n",
        "num_ids": 59
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    length_lists = len(lists)\n    if length_lists == 0:\n        return []\n    max_value = lists[0]\n    for i in range(1, length_lists):\n        if lists[i] > max_value:\n            max_value = lists[i]\n    return max_value\n",
        "num_ids": 76
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    for i in range(len(lists)):\n        for j in range(i + 1, len(lists)):\n            if sum(lists[i:j + 1]) > max_sum:\n                max_sum = sum(lists[i:j + 1])\n    return max_sum\n",
        "num_ids": 77
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    def find_max_run(str, max_run):\n        '''\n        Function to find maximum run of uppercase characters in the given string.\n        '''\n        \n        if len(str) < max_run:\n            return max_run\n        \n        if str[0].isalpha() and str[-1].isalpha():\n            return max_run\n        \n        if str[0].isalpha() == False and str[-1].isalpha() == False:\n            return max_run\n        \n        if str[0].isalpha() == True:\n            return max_run + find_max_run(str[1:], max_run)\n        \n        if str[-1].isalpha() == True:\n            return max_run + find_max_run(str[:-1], max_run)\n        \n        return max_run + find_max_run(str[:-1], max_run)\n        \n    return find_max_run(test_str, 0)\n",
        "num_ids": 197
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if test_str is None:\n        return 0\n    up = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    curr_len = 0\n    max_len = 0\n    for i in range(len(test_str)):\n        if test_str[i] in up:\n            curr_len += 1\n        else:\n            if curr_len > max_len:\n                max_len = curr_len\n            curr_len = 0\n    if curr_len > max_len:\n        max_len = curr_len\n    return max_len\n",
        "num_ids": 147
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    if test_str == \"\":\n        return 0\n    \n    if test_str[0].isalpha():\n        curr_count = 1\n        max_count = 1\n        for i in range(1, len(test_str)):\n            if test_str[i].isalpha() and test_str[i-1].isalpha():\n                continue\n            if test_str[i].isalpha() and test_str[i-1].isalpha() == False:\n                curr_count += 1\n            if test_str[i].isalpha() == False:\n                max_count = max(max_count, curr_count)\n                curr_count = 0\n    \n    return max_count\n    \n",
        "num_ids": 174
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # First iteration of list, which will be used to record the current number of uppercase letters\n    current_uppercase = 0\n    \n    # Second iteration of list, which will be used to record the maximum number of uppercase letters\n    current_uppercase_list = []\n    \n    for index in range(len(test_str)):\n        if test_str[index].isupper():\n            current_uppercase += 1\n            \n            # If current_uppercase is larger than the maximum, update the current_uppercase_list\n            if current_uppercase > current_uppercase_list[0]:\n                current_uppercase_list = [current_uppercase]\n            \n            # If current_uppercase is less than the maximum, append the current_uppercase_list with the new current_uppercase\n            elif current_uppercase < current_uppercase_list[0]:\n                current_uppercase_list.append(current_uppercase)\n    \n    return max(current_uppercase_list)\n    \n",
        "num_ids": 256
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_runs = 1\n    current_run = 1\n    \n    for i in range(1, len(test_str)):\n        if test_str[i] == test_str[i-1]:\n            current_run += 1\n        else:\n            current_run = 1\n        if current_run > max_runs:\n            max_runs = current_run\n    return max_runs\n",
        "num_ids": 96
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count = count + 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    print(max_count)\n",
        "num_ids": 80
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    max_index = 0\n    for index, char in enumerate(test_str):\n        if char.isupper():\n            count = 1\n            if index+1 < len(test_str) and test_str[index+1] == char:\n                count += 1\n            if count > max_count:\n                max_count = count\n                max_index = index\n    return max_count, max_index\n",
        "num_ids": 106
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if test_str == '':\n        return 0\n    if len(test_str) == 1:\n        return 1\n    cur_max = 0\n    tmp_max = 1\n    cur_start = 0\n    for i in range(1,len(test_str)):\n        if test_str[i].isupper():\n            if tmp_max > cur_max:\n                cur_max = tmp_max\n            tmp_max = 1\n            cur_start = i\n        else:\n            tmp_max += 1\n    if tmp_max > cur_max:\n        cur_max = tmp_max\n    return cur_max\n",
        "num_ids": 151
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_value = 0\n    for i in range(len(test_str)):\n        count = 1\n        for j in range(i+1,len(test_str)):\n            if test_str[i] == test_str[j]:\n                count += 1\n            else:\n                break\n        if max_value < count:\n            max_value = count\n    return max_value\nprint(max_run_uppercase('AAAAAABbbcccddd'))\n",
        "num_ids": 117
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    list_of_char = []\n    index = 0\n    while index < len(test_str):\n        if test_str[index].isupper():\n            if count == 0:\n                list_of_char.append(test_str[index].lower())\n                count = 1\n            elif count == 1:\n                list_of_char.append(test_str[index].lower())\n                count = 1\n        elif count == 1:\n            list_of_char.append(test_str[index])\n            count = 0\n        elif count == 0:\n            list_of_char.append(test_str[index])\n        index += 1\n    return list_of_char\n",
        "num_ids": 171
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if isinstance(nums, list)==False:\n        raise Exception(\"Argument must be a list\")\n    for i in range(len(nums)):\n        if (nums[i]%2)==0:\n            return nums[i]\n    raise Exception(\"No odd number in list\")\n",
        "num_ids": 75
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2 == 1:\n            return i\n",
        "num_ids": 32
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if nums:\n        for num in nums:\n            if num % 2!= 0:\n                return num\n",
        "num_ids": 30
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if not nums:\n        return -1\n    if len(nums) == 1:\n        return 1 if nums[0] % 2!= 0 else -1\n    elif len(nums) == 2:\n        return 1 if nums[0] % 2!= 0 else -1 if nums[1] % 2!= 0 else -1\n    else:\n        return 1 if nums[0] % 2!= 0 else -1 if nums[1] % 2!= 0 else -1 if nums[2] % 2!= 0 else -1\n",
        "num_ids": 137
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if nums == None:\n        return False\n    if nums == []:\n        return False\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n    return False\n",
        "num_ids": 65
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!=0:\n            return i\n    else:\n        return None\n",
        "num_ids": 32
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # print('nums: ', nums)\n    if not nums:\n        return\n    for i, n in enumerate(nums):\n        if i % 2 == 0:\n            continue\n        if n % 2 == 0:\n            return n\n    return\n",
        "num_ids": 65
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd_num = nums[0]\n    for x in range(1, len(nums)):\n        if nums[x] % 2!= 0:\n            odd_num = nums[x]\n            break\n    return odd_num\n    \n    \n    \n    \n    \n    \n    \ndef find_2nd_multiple_of_3(nums):\n    '''\n    Write a python function to find the 2nd multiple of 3 in a given list of numbers.\n    '''\n    \n    for x in range(len(nums)):\n        if nums[x] % 3 == 2:\n            return nums[x]\n    \n    \n    \n    \n    \n    \ndef find_3rd_multiple_of_5(nums):\n    '''\n    Write a python function to find the 3rd multiple of 5 in a given list of numbers.\n    '''\n    for x in range(len(nums)):\n        if nums[x] % 5 == 3:\n            return nums[x]\n            \n    \n    \n    \n    \n    \n    \ndef find_largest_number(nums):\n    '''\n    Write a python function to find the largest number from a given list of numbers.\n    '''\n    largest_num = nums[0]\n    for x in range(1, len(nums)):\n        if nums[x] > largest_num:\n            largest_num = nums[x]\n    return largest_num\n    \n    \n    \n    \n    \n    \ndef find_smallest_number(nums):\n    '''\n    Write a python function to find the smallest number from a given list of numbers.\n    '''\n    smallest_num = nums[0]\n    for x in range(1, len(nums)):\n        if nums[x] < smallest_num:\n            smallest_num = nums[x]\n    return smallest_num\n    \n    \n    \n    \n    \n    \ndef check_permutation_v1(str1, str2):\n    '''\n    Write a python function to check if two given strings are permutations of each other.\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    \n    s1 = sorted(str1)\n    s2 = sorted(str2)\n    \n    if s1 == s2:\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \ndef check_permutation_v2(str1, str2):\n    '''\n    Write a python function to check if two given strings are permutations of each other.\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    \n    s1 = sorted(str1)\n    s2 = sorted(str2)\n    \n    return s1 == s2\n    \n    \n    \n    \n    \n    \ndef check_permutation(str1, str2):\n    '''\n    Write a python function to check if two given strings are permutations of each other.\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    \n    s1 = sorted(str1)\n    s2 = sorted(str2)\n    \n    return s1 == s2\n    \n    \n    \n    \n    \n    \ndef longest_substring(str1, str2):\n    '''\n    Write a python function to find the longest substring in common between two strings.\n    '''\n    s1 = str1.lower()\n    s2 = str2.lower()\n    \n    s1_size = len(s1)\n    s2_size = len(s2)\n    \n    if s1_size < s2_size:\n        s1, s2 = s2, s1\n        s1_size, s2_size = s2_size, s1_size\n    \n    s1_dict = {}\n    max_length = 0\n    \n    for i in range(s1_size):\n        s1_dict[s1[i]] = i\n        \n        if s2[i] in s1_dict:\n            start = s1_dict[s2[i]]\n            end = i\n            while end + 1 <= s2_size:\n                if s2[end] in s1_dict and s1_dict[s2[end]] > end:\n                    start = s1_dict[s2[end]]\n                    end = s1_dict[s2[end]]\n                else:\n                    break\n            if end - start + 1 > max_length:\n                max_length = end - start + 1\n    \n    return max_length\n    \n    \n    \n    \n    \n    \ndef find_longest_substring(str1, str2):\n    '''\n    Write a python function to find the longest substring in common between two strings.\n    '''\n    s1 = str1.lower()\n    s2 = str2.lower()\n    \n    s1_size = len(s1)\n    s2_size = len(s2)\n    \n    if s1_size < s2_size:\n        s1, s2 = s2, s1\n        s1_size, s2_size = s2_size, s1_size\n    \n    s1_dict = {}\n    max_length = 0\n    \n    for i in range(s1_size):\n        s1_dict[s1[i]] = i\n        \n        if s2[i] in s1_dict:\n            start = s1_dict[s2[i]]\n            end = i\n            while end + 1 <= s2_size:\n                if s2[end] in s1_dict and s1_dict[s2[end]] > end:\n                    start = s1_dict[s2[end]]\n                    end = s1_dict[s2[end]]\n                else:\n                    break\n            if end - start + 1 > max_length:\n                max_length = end - start + 1\n    \n    return max_length\n    \n    \n    \n    \n    \n    \ndef find_longest_substring_v1(str1, str2):\n    '''\n    Write a python function to find the longest substring in common between two strings.\n    '''\n    s1 = str1.lower()\n    s2 = str2.lower()\n    \n    s1_size = len(s1)\n    s2_size = len(s2)\n    \n    if s1_size < s2_size:\n        s1, s2 = s2, s1\n        s1_size, s2_size = s2_size, s1_size\n    \n    s1_dict = {}\n    max_length = 0\n    \n    for i in range(s1_size):\n        s1_dict[s1[i]] = i\n        \n        if s2[i] in s1_dict:\n            start = s1_dict[s2[i]]\n            end = i\n            while end + 1 <= s2_size:\n                if s2[end] in s1_dict and s1_dict[s2[end]] > end:\n                    start = s1_dict[s2[end]]\n                    end = s1_dict[s2[end]]\n                else:\n                    break\n            if end - start + 1 > max_length:\n                max_length = end - start + 1\n    \n    return max_length\n    \n    \n    \n    \n    \n    \ndef find_longest_substring_v2(str1, str2):\n    '''\n    Write a python function to find the longest substring in common between two strings.\n    '''\n    s1 = str1.lower()\n    s2 = str2.lower()\n    \n    s1_size = len(s1)\n    s2_size = len(s2)\n    \n    if s1_size < s2_size:\n        s1, s2 = s2, s1\n        s1_size, s2_size = s2_size, s1_size\n    \n    s1_dict = {}\n    max_length = 0\n    \n    for i in range(s1_size):\n        s1_dict[s1[i]] = i\n        \n        if s2[i] in s1_dict:\n            start ",
        "num_ids": 161
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!= 0:\n            return i\n    return -1\n",
        "num_ids": 29
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return next(i for i in nums if i%2!=0)\n",
        "num_ids": 21
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    test_list = []\n    for i in test_tup:\n        test_list.append(i)\n    if K in test_list:\n        return True\n    else:\n        return False\n    \ndef unpack_tuple(test_tup):\n    '''\n    Write a function to remove the tuples with the k or not.\n    '''\n    new_list = []\n    for i in test_tup:\n        if i!= tuple_with_K:\n            new_list.append(i)\n    return new_list\n    \ndef most_frequent_item(test_tup):\n    '''\n    Write a function to find the most frequent item in the list\n    '''\n    freq_list = []\n    test_list = []\n    for i in test_tup:\n        freq_list.append(i)\n    freq_list = sorted(freq_list)\n    for i in range(len(freq_list)):\n        freq = freq_list[i]\n        test_list.append(freq)\n    return max(test_list)\n    \ndef single_item_occurrence(test_tup):\n    '''\n    Write a function to find the first occurrence of an item in the list\n    '''\n    test_list = []\n    for i in test_tup:\n        test_list.append(i)\n    return test_list.index(max(test_list))\n    \ndef item_in_tuple(test_tup, item):\n    '''\n    Write a function to find if the item is in the tuple\n    '''\n    test_list = []\n    for i in test_tup:\n        test_list.append(i)\n    if item in test_list:\n        return True\n    else:\n        return False\n        \ndef index_of_element_in_tuple(test_tup, item):\n    '''\n    Write a function to find the index of an element in the tuple\n    '''\n    test_list = []\n    for i in test_tup:\n        test_list.append(i)\n    return test_list.index(item)\n",
        "num_ids": 40
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return (test_tup[0] == K) or (test_tup[1] == K)\n",
        "num_ids": 28
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    k = K\n    i = 0\n    for elem in test_tup:\n        if i == k:\n            return True\n        i += 1\n    return False\n",
        "num_ids": 43
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) > K:\n        return False\n    elif len(test_tup) == K:\n        return True\n    else:\n        return False\n",
        "num_ids": 45
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] == test_tup[1] or test_tup[0] == test_tup[2] or test_tup[1] == test_tup[2]:\n        return False\n    return True\n",
        "num_ids": 60
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    a, b = test_tup\n    if a in K and b in K:\n        return True\n    return False\n",
        "num_ids": 31
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] == 'K':\n        if test_tup[1] == K:\n            return True\n        else:\n            return False\n    else:\n        if test_tup[0] == K:\n            return True\n        else:\n            return False\n",
        "num_ids": 70
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    first = test_tup[0]\n    second = test_tup[1]\n    third = test_tup[2]\n    fourth = test_tup[3]\n",
        "num_ids": 46
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if isinstance(test_tup,tuple) and len(test_tup) == 3:\n        if test_tup[2] == K:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    a, b, c = test_tup\n    if K == a + b + c:\n        return True\n    else:\n        return False\n    \n    \ndef check_K_T(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    a, b, c = test_tup\n    if sum(test_tup) == K:\n        return True\n    else:\n        return False\n",
        "num_ids": 39
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return test_tup1[0] < test_tup2[0] and test_tup1[1] < test_tup2[1]\n",
        "num_ids": 40
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    smaller_than = True\n    for i in range(len(test_tup1)):\n        if test_tup2[i] > test_tup1[i]:\n            smaller_than = False\n    return smaller_than\n",
        "num_ids": 60
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple):\n        return all(map(lambda x: x[0] > x[1], zip(test_tup1, test_tup2)))\n    else:\n        raise ValueError\n",
        "num_ids": 70
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    #checking if first tuple is empty\n    if len(test_tup1) == 0:\n        return True\n    #checking if second tuple is empty\n    if len(test_tup2) == 0:\n        return True\n    #checking if first tuple is not empty\n    if len(test_tup1) > 0:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] < test_tup2[i]:\n                return False\n        return True\n    #checking if second tuple is not empty\n    if len(test_tup2) > 0:\n        for i in range(len(test_tup2)):\n            if test_tup1[i] < test_tup2[i]:\n                return False\n        return True\n",
        "num_ids": 192
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return False\n    if len(test_tup1) < len(test_tup2):\n        return True\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] < test_tup2[i]:\n                return False\n            if test_tup1[i] > test_tup2[i]:\n                return True\n            if i == len(test_tup1):\n                return False\n            if i == len(test_tup2):\n                return True\n        return False\n",
        "num_ids": 172
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = False\n    if test_tup1 < test_tup2:\n        result = True\n    else:\n        result = False\n    return result\n",
        "num_ids": 40
    }
]