[
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_list1 = []\n    test_list2 = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            test_list1.append(i)\n    for i in test_tup2:\n        if i not in test_tup1:\n            test_list2.append(i)\n    test_list1 = sorted(test_list1)\n    test_list2 = sorted(test_list2)\n    return test_list1, test_list2\n",
        "num_ids": 126
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        for element in test_tup1:\n            if element in test_tup2:\n                return element\n    return None\n",
        "num_ids": 52
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # To check if the lists are of same size\n    if len(test_tup1)!= len(test_tup2):\n        return False\n",
        "num_ids": 38
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        list1 = set(test_tup1)\n        list2 = set(test_tup2)\n        if list1 == list2:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 77
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # test_tup1 = (1,2,3)\n    # test_tup2 = (2,3,4)\n    test_tup1 = set(test_tup1)\n    test_tup2 = set(test_tup2)\n",
        "num_ids": 66
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = []\n    for test_element1 in test_tup1:\n        for test_element2 in test_tup2:\n            if test_element1 == test_element2:\n                shared.append(test_element1)\n    return shared\n",
        "num_ids": 63
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for e1, e2 in zip(test_tup1, test_tup2):\n        if e1 == e2:\n            shared_elements.append(e1)\n    return shared_elements\n",
        "num_ids": 61
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            common_elements.append(test_tup1[i])\n    return common_elements\n",
        "num_ids": 70
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #print(test_tup1, test_tup2)\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Two input list should have same length\"\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i]!= test_tup2[i]:\n                #print(test_tup1[i], test_tup2[i])\n                return False\n        return True\n",
        "num_ids": 123
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    tup1 = list(test_tup1)\n    tup2 = list(test_tup2)\n    tup1.sort()\n    tup2.sort()\n    for i in range(len(tup1)):\n        for j in range(len(tup2)):\n            if tup1[i] == tup2[j]:\n                return tup1[i]\n    return None\n",
        "num_ids": 103
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n)+1)):\n        if n%i==0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n)+1)):\n        if n%i==0:\n            return False\n    return True\ndef is_abundant(n):\n    '''\n    Write a python function to identify abundant numbers.\n    '''\n    sum=0\n    for i in range(1,int(math.sqrt(n)+1)):\n        if n%i==0:\n            sum=sum+i\n    return (n>sum)\ndef is_amicable(a,b):\n    '''\n    Write a python function to identify amicable numbers.\n    '''\n    sum=0\n    for i in range(1,int(math.sqrt(a)+1)):\n        if a%i==0 and b%i==0:\n            sum=sum+i\n    return (a*b==sum)\ndef is_fibonacci(n):\n    '''\n    Write a python function to identify whether a number is a Fibonacci number.\n    '''\n    a=1\n    b=1\n    while(n>0):\n        c=a+b\n        a=b\n        b=c\n        n=n-1\n    return (c==n)\ndef is_palindrome(n):\n    '''\n    Write a python function to identify whether a number is a palindrome.\n    '''\n    return(str(n)==str(n)[::-1])\ndef is_armstrong(n):\n    '''\n    Write a python function to identify whether a number is an Armstrong number.\n    '''\n    sum=0\n    p=n\n    while(p>0):\n        digit=p%10\n        sum=sum+digit**3\n        p=p//10\n    return (n==sum)\ndef count_vowels(string):\n    '''\n    Write a python function to count vowels in a given string.\n    '''\n    count=0\n    for i in range(len(string)):\n        if string[i] in \"aeiou\":\n            count=count+1\n    return count\ndef is_anagram(str1,str2):\n    '''\n    Write a python function to identify whether two strings are anagrams.\n    '''\n    if len(str1)!=len(str2):\n        return False\n    else:\n        str1=str1.replace(' ','').lower()\n        str2=str2.replace(' ','').lower()\n        if len(str1)!=len(str2):\n            return False\n        else:\n            str1=str1.replace(' ','')\n            str2=str2.replace(' ','')\n            if len(str1)!=len(str2):\n                return False\n            else:\n                if str1==str2:\n                    return True\n                else:\n                    return False\ndef is_prime_sqrt(n):\n    '''\n    Write a python function to identify whether a given number is prime or not.\n    '''\n    if n<0:\n        return False\n    if n<=1:\n        return False\n    if n<=2:\n        return True\n    if n%2==0:\n        return False\n    i=3\n    while i*i<=n:\n        if n%i==0:\n            return False\n        i=i+2\n    return True\ndef is_prime_sqrt_no_zero(n):\n    '''\n    Write a python function to identify whether a given number is prime or not.\n    '''\n    if n<0:\n        return False\n    if n<=1:\n        return False\n    if n<=2:\n        return True\n    if n%2==0:\n        return False\n    i=3\n    while i*i<n:\n        if n%i==0:\n            return False\n        i=i+2\n    return True\ndef is_prime_sqrt_no_zero_2(n):\n    '''\n    Write a python function to identify whether a given number is prime or not.\n    '''\n    if n<0:\n        return False\n    if n<=1:\n        return False\n    if n<=2:\n        return True\n    if n%2==0:\n        return False\n    i=3\n    while i*i<n:\n        if n%i==0:\n            return False\n        i=i+2\n    return True\ndef gcd(n,m):\n    '''\n    Write a python function to find gcd of two numbers.\n    '''\n    while m!=0:\n        n,m=m,n%m\n    return n\ndef is_square(n):\n    '''\n    Write a python function to determine whether a number is perfect square or not.\n    '''\n    if n==0:\n        return False\n    if n<0:\n        return False\n    if n<=1:\n        return True\n    if n%2==0:\n        return False\n    i=1\n    while i*i<=n:\n        if n%i==0:\n            return False\n        i=i+1\n    return True\ndef is_prime_gen(n):\n    '''\n    Write a python function to identify whether a given number is prime or not.\n    '''\n    if n<0:\n        return False\n    if n<=1:\n        return False\n    if n<=2:\n        return True\n    if n%2==0:\n        return False\n    i=3\n    while i*i<n:\n        if n%i==0:\n            return False\n        i=i+2\n    return True\ndef prime_gen(n):\n    '''\n    Write a python function to generate prime numbers upto a given number.\n    '''\n    y=2\n    while y<n:\n        if is_prime_gen(y)==True:\n            yield y\n        y=y+1\ndef prime_gen_v2(n):\n    '''\n    Write a python function to generate prime numbers upto a given number.\n    '''\n    y=2\n    while y<n:\n        if is_prime_gen(y)==True:\n            yield y\n        y=y+1\ndef prime_gen_v3(n):\n    '''\n    Write a python function to generate prime numbers upto a given number.\n    '''\n    y=2\n    while y<n:\n        if is_prime_gen(y)==True:\n            yield y\n        y=y+1\ndef prime_gen_v4(n):\n    '''\n    Write a python function to generate prime numbers upto a given number.\n    '''\n    y=2\n    while y<n:\n        if is_prime_gen(y)==True:\n            yield y\n        y=y+1\ndef prime_gen_v5(n):\n    '''\n    Write a python function to generate prime numbers upto a given number.\n    '''\n    y=2\n    while y<n:\n        if is_prime_gen(y)==True:\n            yield y\n        y=y+1\ndef prime_gen_v6(n):\n    '''\n    Write a python function to generate prime numbers upto a given number.\n    '''\n    y=2\n    while y<n:\n        if is_prime_gen(y)==True:\n            yield y\n        y=y+1\ndef is_prime_gen_v2(n):\n    '''\n    Write a python function to generate prime numbers upto a given number.\n    '''\n    y=2\n    while y<n:\n        if is_prime_gen(y)==True:\n            yield y\n        y=y+1\ndef is_prime_gen_v3(n):\n    '''\n    Write a python function to generate prime numbers upto a given number.\n    '''\n    y=2\n    while y<n:\n        if is_prime_gen(y)==True:\n            yield y\n        y=y+1\ndef is_prime_gen_v4(n)",
        "num_ids": 52
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, n):\n        if n%i == 0:\n            return False\n    return True\n    \ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    for i in range(2, n):\n        if n%i == 0:\n            return False\n    return True\n    \ndef is_prime_number(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n%i == 0:\n                return False\n        return True\n    \ndef next_prime(n):\n    '''\n    Write a python function to generate next prime number.\n    '''\n    n = n+1\n    while True:\n        if is_prime_number(n) == True:\n            return n\n        else:\n            n = n+1\n        \ndef is_palindrome(n):\n    '''\n    Write a python function to identify if a number is palindrome.\n    '''\n    s = str(n)\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \ndef is_palindrome_with_spaces(n):\n    '''\n    Write a python function to identify if a number is palindrome with spaces.\n    '''\n    s = str(n)\n    if s == \" \" + s[::-1] + \" \":\n        return True\n    else:\n        return False\n    \ndef is_palindrome_with_spaces_and_punctuation(n):\n    '''\n    Write a python function to identify if a number is palindrome with spaces, punctuation and numbers.\n    '''\n    s = str(n)\n    if s == \" \" + s[::-1] + \" \" or s == \" \" + s[::-1].title() + \" \":\n        return True\n    else:\n        return False\n    \ndef is_palindrome_with_spaces_and_punctuation_and_numbers(n):\n    '''\n    Write a python function to identify if a number is palindrome with spaces, punctuation and numbers.\n    '''\n    s = str(n)\n    if s == \" \" + s[::-1] + \" \" or s == \" \" + s[::-1].title() + \" \" or s == s[::-1].title() + \" \" or s == \" \" + s[::-1] + \" \":\n        return True\n    else:\n        return False\n    \ndef is_palindrome_with_numbers(n):\n    '''\n    Write a python function to identify if a number is palindrome with numbers.\n    '''\n    s = str(n)\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \ndef is_palindrome_with_numbers_and_spaces(n):\n    '''\n    Write a python function to identify if a number is palindrome with numbers and spaces.\n    '''\n    s = str(n)\n    if s == \" \" + s[::-1] + \" \":\n        return True\n    else:\n        return False\n    \ndef is_palindrome_with_numbers_and_spaces_and_punctuation(n):\n    '''\n    Write a python function to identify if a number is palindrome with numbers, spaces, punctuation and numbers.\n    '''\n    s = str(n)\n    if s == \" \" + s[::-1] + \" \" or s == \" \" + s[::-1].title() + \" \":\n        return True\n    else:\n        return False\n    \ndef is_palindrome_with_numbers_and_spaces_and_punctuation_and_numbers(n):\n    '''\n    Write a python function to identify if a number is palindrome with numbers, spaces, punctuation and numbers.\n    '''\n    s = str(n)\n    if s == \" \" + s[::-1] + \" \" or s == \" \" + s[::-1].title() + \" \" or s == \" \" + s[::-1].title() + \" \" or s == \" \" + s[::-1] + \" \":\n        return True\n    else:\n        return False\n    \ndef is_palindrome_with_special_chars(n):\n    '''\n    Write a python function to identify if a number is palindrome with special characters.\n    '''\n    s = str(n)\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \ndef is_palindrome_with_special_chars_and_numbers(n):\n    '''\n    Write a python function to identify if a number is palindrome with special characters and numbers.\n    '''\n    s = str(n)\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \ndef is_palindrome_with_special_chars_and_spaces(n):\n    '''\n    Write a python function to identify if a number is palindrome with special characters and spaces.\n    '''\n    s = str(n)\n    if s == \" \" + s[::-1] + \" \":\n        return True\n    else:\n        return False\n    \ndef is_palindrome_with_special_chars_and_spaces_and_numbers(n):\n    '''\n    Write a python function to identify if a number is palindrome with special characters, spaces, numbers and numbers.\n    '''\n    s = str(n)\n    if s == \" \" + s[::-1] + \" \":\n        return True\n    else:\n        return False\n    \ndef is_palindrome_with_special_chars_and_spaces_and_punctuation(n):\n    '''\n    Write a python function to identify if a number is palindrome with special characters, spaces, punctuation and numbers.\n    '''\n    s = str(n)\n    if s == \" \" + s[::-1] + \" \" or s == \" \" + s[::-1].title() + \" \":\n        return True\n    else:\n        return False\n    \ndef is_palindrome_with_special_chars_and_spaces_and_punctuation_and_numbers(n):\n    '''\n    Write a python function to identify if a number is palindrome with special characters, spaces, punctuation and numbers.\n    '''\n    s = str(n)\n    if s == \" \" + s[::-1] + \" \" or s == \" \" + s[::-1].title() + \" \":\n        return True\n    else:\n        return False\n    \ndef is_palindrome_with_spaces_only(n):\n    '''\n    Write a python function to identify if a number is palindrome with spaces only.\n    '''\n    s = str(n)\n    if s == \" \" + s[::-1]:\n        return True\n    else:\n        return False\n    \ndef is_palindrome_with_spaces_only_and_numbers(n):\n    '''\n    Write a python function to identify if a number is palindrome with spaces only and numbers.\n    '''\n    s = str(n)\n    if s == \" \" + s[::-1] or s == s[::-1]:\n        return True\n    else:\n        return False\n    \ndef is_palindrome_with_spaces_only_and_spaces(n):\n    '''\n    Write a python function to identify if a number is palindrome with spaces only and spaces.\n    '''\n    s = str(n)\n    if s == \" \" + s[::-1] + \" \":\n        return True\n    else:\n        return False\n    \ndef is_palindrome_with_spaces_only_and_spaces_and_numbers(n):\n    '''\n    Write a python function to identify if a number is palindrome with spaces only and spaces, numbers and numbers.\n    '''\n    s = str(n)\n    if s == \" \" + s",
        "num_ids": 18
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    elif n > 2:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n",
        "num_ids": 59
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 0 or n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    \n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return False\n    if n == 3:\n        return False\n    if n == 5:\n        return False\n    if n == 7:\n        return False\n    if n == 11:\n        return False\n    if n == 13:\n        return False\n    if n == 17:\n        return False\n    if n == 19:\n        return False\n    if n == 23:\n        return False\n    if n == 29:\n        return False\n    if n == 31:\n        return False\n    if n == 37:\n        return False\n    if n == 41:\n        return False\n    if n == 43:\n        return False\n    if n == 47:\n        return False\n    if n == 53:\n        return False\n    if n == 59:\n        return False\n    if n == 61:\n        return False\n    if n == 67:\n        return False\n    if n == 71:\n        return False\n    if n == 73:\n        return False\n    if n == 79:\n        return False\n    if n == 83:\n        return False\n    if n == 89:\n        return False\n    if n == 97:\n        return False\n    if n == 101:\n        return False\n    if n == 103:\n        return False\n    if n == 107:\n        return False\n    if n == 109:\n        return False\n    if n == 113:\n        return False\n    if n == 127:\n        return False\n    if n == 131:\n        return False\n    if n == 137:\n        return False\n    if n == 139:\n        return False\n    if n == 149:\n        return False\n    if n == 151:\n        return False\n    if n == 157:\n        return False\n    if n == 163:\n        return False\n    if n == 167:\n        return False\n    if n == 173:\n        return False\n    if n == 179:\n        return False\n    if n == 181:\n        return False\n    if n == 191:\n        return False\n    if n == 193:\n        return False\n    if n == 197:\n        return False\n    if n == 199:\n        return False\n    if n == 211:\n        return False\n    if n == 223:\n        return False\n    if n == 227:\n        return False\n    if n == 229:\n        return False\n    if n == 233:\n        return False\n    if n == 239:\n        return False\n    if n == 241:\n        return False\n    if n == 251:\n        return False\n    if n == 257:\n        return False\n    if n == 263:\n        return False\n    if n == 269:\n        return False\n    if n == 271:\n        return False\n    if n == 277:\n        return False\n    if n == 281:\n        return False\n    if n == 283:\n        return False\n    if n == 293:\n        return False\n    if n == 307:\n        return False\n    if n == 311:\n        return False\n    if n == 313:\n        return False\n    if n == 317:\n        return False\n    if n == 331:\n        return False\n    if n == 337:\n        return False\n    if n == 347:\n        return False\n    if n == 349:\n        return False\n    if n == 353:\n        return False\n    if n == 359:\n        return False\n    if n == 367:\n        return False\n    if n == 373:\n        return False\n    if n == 379:\n        return False\n    if n == 383:\n        return False\n    if n == 389:\n        return False\n    if n == 397:\n        return False\n    if n == 401:\n        return False\n    if n == 409:\n        return False\n    if n == 419:\n        return False\n    if n == 421:\n        return False\n    if n == 431:\n        return False\n    if n == 433:\n        return False\n    if n == 439:\n        return False\n    if n == 443:\n        return False\n    if n == 449:\n        return False\n    if n == 457:\n        return False\n    if n == 461:\n        return False\n    if n == 463:\n        return False\n    if n == 467:\n        return False\n    if n == 479:\n        return False\n    if n == 481:\n        return False\n    if n == 487:\n        return False\n    if n == 491:\n        return False\n    if n == 499:\n        return False\n    if n == 503:\n        return False\n    if n == 509:\n        return False\n    if n == 511:\n        return False\n    if n == 521:\n        return False\n    if n == 523:\n        return False\n    if n == 541:\n        return False\n    if n == 547:\n        return False\n    if n == 553:\n        return False\n    if n == 557:\n        return False\n    if n == 563:\n        return False\n    if n == 569:\n        return False\n    if n == 571:\n        return False\n    if n == 577:\n        return False\n    if n == 581:\n        return False\n    if n == 587:\n        return False\n    if n == 593:\n        return False\n    if n == 599:\n        return False\n    if n == 601:\n        return False\n    if n == 607:\n        return False\n    if n == 613:\n        return False\n    if n == 617:\n        return False\n    if n == 619:\n        return False\n    if n == 631:\n        return False\n    if n == 643:\n        return False\n    if n == 647:\n        return False\n    if n == 653:\n        return False\n    if n == 659:\n        return False\n    if n == 661:\n        return False\n    if n == 673:\n        return False\n    if n == 679:\n        return False\n    if n == 683:\n        return False\n    if n == 691:\n        return False\n    if n == 701:\n        return False\n    if n == 709:\n        return False\n    if n == 719:\n        return False\n    if n == 727:\n        return False\n    if n == 733:\n        return False\n    if n == 739:\n        return False\n    if n == 743:\n        return False\n    if n == 751:\n        return False\n    if n == 757:\n        return False\n    if n == 761:\n        return False\n    if n == 767:\n        return False\n    if n == 769:\n        return False\n    if n == 773:\n        return False\n    if n == 787:\n        return False\n    if n == 797:\n        return False\n    if n == 809:\n        return False\n    if n == 811:\n        return False\n    if n == 821:\n        return False\n    if n == 831:\n        return False\n    if n == 839:\n        return False\n    if n == 853:\n        return False\n    if n == 857:\n        return False\n    if n == 859:\n        return False\n    if n == 863:\n        return False\n    if n == 877:\n        return False\n    if n == 881:\n        return False\n    if n == 883:\n        return False\n    if n == 887:\n        return False\n    if n == 907:\n        return False\n    if n == 911:\n        return False\n    if n == 919:\n        return False\n    if n == 929:\n        return False\n    if n == 937:\n        return False\n    if n == 941:\n        return False\n    if n == 947:\n        return False\n    if n == 953:\n        return False\n    if n == 967:\n        return False\n    if n == 971:\n        return False\n    if n == 977:\n        return False\n    if n == 983:\n        return False\n    if n == 991:\n        return False\n    if n == 997:\n        return False\n    if n == 1009:\n        return False\n    if n == 1013:\n        return False\n    if n == 1019:\n        return False\n    if n == 1021:\n        return False\n    if n =",
        "num_ids": 2016
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n",
        "num_ids": 30
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 0:\n        return False\n",
        "num_ids": 13
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, math.ceil(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return [nums[i] for i in hq.nlargest(n,range(n),key=lambda x: nums[x])]\n",
        "num_ids": 37
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    arr = nums[:n]\n    heapq.heapify(arr)\n    return arr\n",
        "num_ids": 28
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = nums[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(nums)):\n        if nums[i] > heap[0]:\n            heapq.heapreplace(heap, nums[i])\n    return heap\n",
        "num_ids": 76
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Time: O(nlogn)\n    # Space:O(n)\n    '''\n    Build a min heap of size n\n    Time: O(nlogn)\n    Space:O(n)\n    '''\n    # initialize min heap\n    heap = nums[:n]\n    for i in range(n):\n        hq.heapify(heap)\n",
        "num_ids": 40
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, -num)\n    ret = []\n    for _ in range(n):\n        ret.append(-hq.heappop(max_heap))\n    return ret\n",
        "num_ids": 71
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # init\n    queue = []\n    # iterate through nums\n    for i in range(n):\n        # heapify the list\n        hq.heapify(queue)\n        # add the element to the heap\n        hq.heappush(queue, nums[i])\n        # remove the element from the heap\n        hq.heappop(queue)\n    # return the list\n    return queue\n    \ndef heap_queue_largest2(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # init\n    queue = []\n    # iterate through nums\n    for i in range(n):\n        # heapify the list\n        hq.heapify(queue)\n        # add the element to the heap\n        hq.heappush(queue, nums[i])\n        # remove the element from the heap\n        hq.heappop(queue)\n    # return the list\n    return queue\n",
        "num_ids": 101
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    import heapq as hq\n    nums = list(nums)\n    #print(nums)\n    n = len(nums)\n    if n<=1:\n        return nums\n    res = []\n    for i in range(0,n):\n        if i!= n-1:\n            hq.heappush(res,nums[i])\n        else:\n            hq.heappush(res,nums[i])\n            hq.heappush(res,-nums[i])\n    return res\n",
        "num_ids": 132
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if nums==[]:\n        return []\n    else:\n        hq.heapify(nums)\n        while len(nums)>n:\n            heapq.heappop(nums)\n        return sorted(nums,reverse=True)\n",
        "num_ids": 66
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in range(n):\n        hq.heappush(h,nums[i])\n",
        "num_ids": 32
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    result = []\n    hq.heapify(nums)\n    for _ in range(n):\n        result.append(hq.heappop(nums))\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return False\n    while (x & 1) == 0: \n        x >>= 1\n    return True\n    ",
        "num_ids": 37
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return bool(x & (x-1)) \n    ",
        "num_ids": 16
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    assert x > 0\n    if x == 1:\n        return True\n    while (x & 1) == 0:\n        x = x >> 1\n    return x == 1\n",
        "num_ids": 43
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x > 0 and (x & (x-1)) == 0 \n",
        "num_ids": 20
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #Convert int to string\n    str1 = str(x)\n    #Convert string to int\n    int1 = int(str1)\n    #Check whether length is 1 or not\n    if len(str(int1)) == 1:\n        return False\n    else:\n        #Count the number of 1s in the string and return the count\n        return (int(str(int1)[::-1].find(\"1\")))\n",
        "num_ids": 104
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x>0:\n        while(x>=1):\n            if x%2 == 0:\n                x = x//2\n                \n            else:\n                return False\n    else:\n        return False\n    return True\n",
        "num_ids": 56
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    ans = False\n    while (x>1):\n        if (x%2==0):\n            x = x//2\n        else:\n            break\n    if (x==1):\n        ans = True\n    return ans\n",
        "num_ids": 56
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x&(x-1) == 0\n",
        "num_ids": 14
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if ((x & (x - 1)) == 0): \n        return True\n    else: \n        return False\n",
        "num_ids": 30
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    else:\n        while (x!= 0):\n            if x%2!= 0:\n                return False\n            x = x//2\n        return True\n",
        "num_ids": 51
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall('\\w{4,}', text)\n    return result\n",
        "num_ids": 24
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    for i in text.split(\" \"):\n        if len(i) >= 4:\n            result.append(i)\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    for word in text.split(' '):\n        if len(word) >= 4:\n            result.append(word)\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'\\w{4,}', text)\n    return result\n",
        "num_ids": 26
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\b\\w+\\b', text)\nprint(find_char_long('abc dsfqewf sjfhj sfjhjkhj kjhjk khjhjkjfjhjkhjkhjkfh jkfjhjk jkhjk hjkhjkhjkhjkfj hjkfjhjhjkfjhjkfh jfkjhk jkhjkfjkjhkfh jfkjhfjfjhkfhj kjfhjfjfjhjkhjkhjk hfjhjfjfjhjkhjkhjk fjhjfjhjkjhfjhjkhjkjkfh fjhjfjfjhjkfhjkhjkhjkfjhjfjhjhkfh jkfjhjkfjhjhjkhjkhjkfh jfkjhfjfjhjkfhjkhjkhjkfh jfkjhfjhjkfhjkhjkhjkfh hjkhjkhjkfhjkhjkhjkfjhjkhjhjhjkfh jkfjhfjfjhjkfhjkhjkhjkfh hjkhjhjkfhjkhjkhjkfh jfkjhfjfjhjkhjkhjkfh jfkjhfjfjhjkhjkhjkfh hjkhjhjkfhjkhjkhjkfjhjkhjhjhjkfh jkfjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh hjkhjhjkfhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh hjkhjhjkfhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh hjkhjhjkfhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfkjhfjfjhjkhjkhjkhjkfh jfk",
        "num_ids": 2005
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    res = []\n    for i in text.split():\n        if len(i) >= 4:\n            res.append(i)\n    return res\n    \nprint(find_char_long('The quick brown fox jumps over the lazy dog.'))\n",
        "num_ids": 60
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    my_list = list()\n    for line in text.split(\"\\n\"):\n        line = line.strip()\n        line = re.sub('[^a-zA-Z0-9]','', line)\n        words = line.split()\n        for word in words:\n            if len(word) >= 4:\n                my_list.append(word)\n    return my_list\n",
        "num_ids": 96
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    res = re.findall('\\S{4,}', text)\n    return res\ndef find_long_words_below(text, n):\n    '''\n    Write a function to find all words which are at least n characters long in a string.\n    '''\n    res = re.findall('\\S{4,}', text)\n    return res\ndef find_short_words(text, n):\n    '''\n    Write a function to find all words which are shorter than n characters long in a string.\n    '''\n    res = re.findall('\\S{1,}', text)\n    return res\ndef find_short_words_below(text, n):\n    '''\n    Write a function to find all words shorter than n characters long in a string.\n    '''\n    res = re.findall('\\S{1,}', text)\n    return res\ndef find_all_chars(text):\n    '''\n    Write a function to find all the characters in a string.\n    '''\n    res = re.findall('\\S', text)\n    return res\ndef find_count_chars(text):\n    '''\n    Write a function to find all the characters in a string.\n    '''\n    res = re.findall('\\S', text)\n    return len(res)\ndef find_unique_char(text):\n    '''\n    Write a function to find all the unique characters in a string.\n    '''\n    res = re.findall('\\S', text)\n    return len(set(res))\ndef find_same_char(text):\n    '''\n    Write a function to find all the characters in a string.\n    '''\n    res = re.findall('\\S', text)\n    return len(res)\ndef find_words_containing_dots(text):\n    '''\n    Write a function to find all words in a string which contain a dot.\n    '''\n    res = re.findall('\\S+\\.{1,}', text)\n    return res\ndef find_all_numbers(text):\n    '''\n    Write a function to find all the numbers in a string.\n    '''\n    res = re.findall('\\d+', text)\n    return res\ndef find_only_numbers(text):\n    '''\n    Write a function to find all the numbers in a string.\n    '''\n    res = re.findall('\\d+', text)\n    return res\ndef find_numbers_in_a_list(list):\n    '''\n    Write a function to find all the numbers in a string.\n    '''\n    res = re.findall('\\d+', str(list))\n    return res\ndef find_digit_repetition_in_string(text):\n    '''\n    Write a function to find all the digit repetitions in a string.\n    '''\n    res = re.findall('(\\d)\\\\1+', text)\n    return res\ndef find_digit_repetition_in_string_in_lists(list):\n    '''\n    Write a function to find all the digit repetitions in a string.\n    '''\n    res = re.findall('(\\d)\\\\1+', str(list))\n    return res\ndef find_char_repetition_in_string(text):\n    '''\n    Write a function to find all the digit repetitions in a string.\n    '''\n    res = re.findall('(\\w)\\\\1+', text)\n    return res\ndef find_char_repetition_in_string_in_lists(list):\n    '''\n    Write a function to find all the digit repetitions in a string.\n    '''\n    res = re.findall('(\\w)\\\\1+', str(list))\n    return res\ndef find_words_containing_digits(text):\n    '''\n    Write a function to find all the words in a string which contain at least one digit.\n    '''\n    res = re.findall('\\S+\\d+', text)\n    return res\ndef find_words_containing_digits_in_lists(list):\n    '''\n    Write a function to find all the words in a string which contain at least one digit.\n    '''\n    res = re.findall('\\S+\\d+', str(list))\n    return res\ndef find_words_containing_digits_in_lists_reverse(list):\n    '''\n    Write a function to find all the words in a string which contain at least one digit.\n    '''\n    res = re.findall('\\S+\\d+', str(list))\n    return res\ndef find_words_containing_digits_in_strings(text):\n    '''\n    Write a function to find all the words in a string which contain at least one digit.\n    '''\n    res = re.findall('\\S+\\d+', text)\n    return res\ndef find_words_containing_digits_in_strings_reverse(text):\n    '''\n    Write a function to find all the words in a string which contain at least one digit.\n    '''\n    res = re.findall('\\S+\\d+', text)\n    return res\ndef find_words_containing_digits_in_lists_reverse_2(list):\n    '''\n    Write a function to find all the words in a string which contain at least one digit.\n    '''\n    res = re.findall('\\S+\\d+', str(list))\n    return res\ndef find_all_numbers_in_string(text):\n    '''\n    Write a function to find all the numbers in a string.\n    '''\n    res = re.findall('\\d+', text)\n    return res\ndef find_all_numbers_in_string_reverse(text):\n    '''\n    Write a function to find all the numbers in a string.\n    '''\n    res = re.findall('\\d+', text)\n    return res\ndef find_words_containing_all_digits(text):\n    '''\n    Write a function to find all the words in a string which contain all digits.\n    '''\n    res = re.findall('\\S+\\d+', text)\n    return res\ndef find_words_containing_all_digits_reverse(text):\n    '''\n    Write a function to find all the words in a string which contain all digits.\n    '''\n    res = re.findall('\\S+\\d+', text)\n    return res\ndef find_words_containing_all_digits_in_lists_reverse(list):\n    '''\n    Write a function to find all the words in a string which contain all digits.\n    '''\n    res = re.findall('\\S+\\d+', str(list))\n    return res\ndef find_words_containing_all_digits_in_strings_reverse(text):\n    '''\n    Write a function to find all the words in a string which contain all digits.\n    '''\n    res = re.findall('\\S+\\d+', text)\n    return res\ndef find_words_containing_all_digits_in_lists_reverse_2(list):\n    '''\n    Write a function to find all the words in a string which contain all digits.\n    '''\n    res = re.findall('\\S+\\d+', str(list))\n    return res\ndef find_all_words_containing_a_newline(text):\n    '''\n    Write a function to find all the words in a string which contain at least one newline.\n    '''\n    res = re.findall('\\S+\\n\\S+', text)\n    return res\ndef find_all_words_containing_a_newline_reverse(text):\n    '''\n    Write a function to find all the words in a string which contain at least one newline.\n    '''\n    res = re.findall('\\S+\\n\\S+', text)\n    return res\ndef find_words_containing_a_newline_reverse(text):\n    '''\n    Write a function to find all the words in a string which contain at least one newline.\n    '''\n    res = re.findall('\\S+\\n\\S+', text)\n    return res\ndef find_words_containing_a_newline_reverse_2(text):\n",
        "num_ids": 45
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    chars = text.split()\n    result = []\n    for char in chars:\n        if len(char) >= 4:\n            result.append(char)\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    result_2 = []\n    count = 0\n    for i in text:\n        if len(i) >= 4:\n            result.append(i)\n    for i in result:\n        result_2.append(i[::-1])\n    for i in result_2:\n        if i == i[::-1]:\n            count += 1\n    if count == len(result_2):\n        print(result_2)\n    else:\n        print(\"There is no word\")\n",
        "num_ids": 122
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    \n    squared_list = []\n",
        "num_ids": 12
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i*i for i in nums]\nprint(square_nums([1,2,3]))\n",
        "num_ids": 30
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # ~~~> x = range(1,5)\n    # ~~~> x = x**2\n    # ~~~> print(x)\n    # ~~~> ~~~> ~~~> ~~~> ~~~> ~~~>\n    # ~~~> for i in x:\n    # ~~~> ~~~> ~~~> ~~~> ~~~>\n    # ~~~> ~~~> ~~~> ~~~> ~~~> ~~~> ~~~>\n    # ~~~> print(i)\n    # ~~~> ~~~> ~~~> ~~~> ~~~> ~~~> ~~~>\n    # ~~~> ~~~> ~~~> ~~~> ~~~> ~~~> ~~~>\n    # ~~~> for i in range(1,5):\n    # ~~~> ~~~> ~~~> ~~~> ~~~> ~~~> ~~~>\n    # ~~~> for i in range(1,5):\n    # ~~~> ~~~> ~~~> ~~~> ~~~> ~~~> ~~~>\n    # ~~~> print(i**2)\n    return [i**2 for i in range(1,5)]\n",
        "num_ids": 329
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    sq_list = []\n    for i in range(len(nums)):\n        sq_list.append(nums[i] * nums[i])\n    return sq_list\n",
        "num_ids": 47
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares\n",
        "num_ids": 31
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # For loop\n    \n    #squares = []\n    #for num in nums:\n    #    squares.append(num * num)\n    #return squares\n    \n    # for loop with list comprehension\n    # squares = [num*num for num in nums]\n    # return squares\n    \n    # # list comprehension with generator\n    # squares = (num * num for num in nums)\n    # return squares\n    \n    # generator comprehension\n    # gen_comp = (num*num for num in nums)\n    # return gen_comp\n    \n    # generator comprehension with filter\n    # gen_comp = (num*num for num in nums if num % 2 == 0)\n    # return gen_comp\n    \n    # generator comprehension with map\n    # gen_comp = map(lambda x: x * x, nums)\n    # return gen_comp\n    \n    # generator comprehension with lambda\n    gen_comp = map(lambda x: x * x, nums)\n    return gen_comp\n    \n    \n    # generator comprehension with zip\n    # gen_comp = zip(nums, nums)\n    # gen_comp = (num * num for num in nums)\n    # gen_comp = zip(nums, nums)\n    # return gen_comp\n    \n    # generator comprehension with lambda\n    gen_comp = (num * num for num in nums)\n    return gen_comp\n    \n    \n    \n    # generator comprehension with sum\n    # gen_comp = (num * num for num in nums)\n    # return sum(gen_comp)\n    \n    # generator comprehension with sum and lambda\n    gen_comp = (num * num for num in nums)\n    return sum(gen_comp)\n    \n    # generator comprehension with sum and map\n    # gen_comp = map(lambda x: x * x, nums)\n    # return sum(gen_comp)\n    \n    # generator comprehension with sum and map and lambda\n    gen_comp = map(lambda x: x * x, nums)\n    return sum(gen_comp)\n    \n    \n    # generator comprehension with filter\n    # gen_comp = filter(lambda x: x % 2 == 0, nums)\n    # return gen_comp\n    \n    # generator comprehension with filter and lambda\n    gen_comp = filter(lambda x: x % 2 == 0, nums)\n    return gen_comp\n    \n    # generator comprehension with filter and map\n    # gen_comp = map(lambda x: x * x, nums)\n    # return gen_comp\n    \n    # generator comprehension with filter and map and lambda\n    gen_comp = map(lambda x: x * x, nums)\n    return gen_comp\n    \n    \n    # generator comprehension with zip\n    # gen_comp = zip(nums, nums)\n    # return gen_comp\n    \n    # generator comprehension with zip and lambda\n    gen_comp = zip(nums, nums)\n    return gen_comp\n    \n    # generator comprehension with zip and map\n    # gen_comp = map(lambda x: x * x, nums)\n    # return gen_comp\n    \n    # generator comprehension with zip and map and lambda\n    gen_comp = map(lambda x: x * x, nums)\n    return gen_comp\n    \n    \n    \n    # generator comprehension with sum\n    # gen_comp = (num * num for num in nums)\n    # return gen_comp\n    \n    # generator comprehension with sum and lambda\n    gen_comp = (num * num for num in nums)\n    return gen_comp\n    \n    # generator comprehension with sum and map\n    # gen_comp = map(lambda x: x * x, nums)\n    # return gen_comp\n    \n    # generator comprehension with sum and map and lambda\n    gen_comp = map(lambda x: x * x, nums)\n    return gen_comp\n    \n    # generator comprehension with sum and filter\n    # gen_comp = filter(lambda x: x % 2 == 0, nums)\n    # return gen_comp\n    \n    # generator comprehension with sum and filter and lambda\n    gen_comp = filter(lambda x: x % 2 == 0, nums)\n    return gen_comp\n    \n    # generator comprehension with sum and filter and map\n    # gen_comp = map(lambda x: x * x, nums)\n    # return gen_comp\n    \n    # generator comprehension with sum and filter and map and lambda\n    gen_comp = map(lambda x: x * x, nums)\n    return gen_comp\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    # generator comprehension with sum and filter and map and lambda\n    \n    # generator comprehension with sum and filter and map and lambda\n    gen_comp = map(lambda x: x * x, nums)\n    return gen_comp\n    \n    \n    # generator comprehension with sum and filter and map and lambda\n    gen_comp = filter(lambda x: x % 2 == 0, nums)\n    return gen_comp\n    \n    # generator comprehension with sum and filter and map and lambda\n    gen_comp = map(lambda x: x * x, nums)\n    return gen_comp\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    # ****************************#\n    # GENERATOR COMPRESSION\n    # ****************************#\n    \n    # simple generator\n    def simple_gen():\n        for i in range(1, 101):\n            yield i\n        \n    gen = simple_gen()\n    print(type(gen))\n    print(gen)\n    \n    # generator with a for loop\n    def gen_with_for_loop():\n        # gen = []\n        for i in range(1, 101):\n            # gen.append(i)\n            yield i\n        # return gen\n        \n    gen = gen_with_for_loop()\n    print(type(gen))\n    print(gen)\n    \n    # generator with lambda\n    def gen_with_lambda():\n        gen = (i for i in range(1, 101))\n        return gen\n    \n    gen = gen_with_lambda()\n    print(type(gen))\n    print(gen)\n    \n    # generator with map\n    def gen_with_map():\n        gen = map(lambda i: i, range(1, 101))\n        return gen\n    \n    gen = gen_with_map()\n    print(type(gen))\n    print(gen)\n    \n    # generator with filter\n    def gen_with_filter():\n        gen = filter(lambda i: i % 2 == 0, range(1, 101))\n        return gen\n    \n    gen = gen_with_filter()\n    print(type(gen))\n    print(gen)\n    \n    # generator with zip\n    def gen_with_zip():\n        gen = zip(range(1, 101), range(101, 201))\n        return gen\n    \n    gen = gen_with_zip()\n    print(type(gen))\n    print(gen)\n    \n    # generator with sum\n    def gen_with_sum():\n        gen = sum([i for i in range(1, 101)])\n        return gen\n    \n    gen = gen_with_sum()\n    print(type(gen))\n    print(gen)\n    \n    # generator with sum and lambda\n    gen = sum([i for i in range(1, 101)], 1)\n    print(type(gen))\n    print(gen)\n    \n    # generator with sum and map\n    def gen_with_map_sum():\n        gen = map(lambda i: i, range(1, 101))\n        return sum(gen)\n    \n    gen = gen_with_map_sum()\n    print(type(gen))\n    print(gen)\n    \n    # generator with sum and map and lambda\n    def gen_with_map_sum_and_lambda():\n        gen = map(lambda i: i, range(1, 101))\n        return sum(gen)\n    \n    gen = gen_with_map_sum_and_lambda()\n    print(type(gen))\n    print(gen)\n    \n    # generator with sum and filter\n    def gen_with_filter_sum():\n        gen = filter(lambda i: i % 2 == 0, range(1, 101))\n        return sum(gen)\n    \n    gen = gen_with_filter_sum()\n",
        "num_ids": 2016
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return([num**2 for num in nums])\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num*num)\n",
        "num_ids": 18
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 2)\n",
        "num_ids": 18
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    l = len(str)\n    arr = []\n    for i in range(l):\n        arr.append(str[i])\n    arr.sort()\n",
        "num_ids": 40
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    c = len(str)\n    def is_palindrome(str):\n        return str == str[::-1]\n    def helper(a,b):\n        if a == 0:\n            return b\n        elif a > b:\n            return helper(a-1,b)\n        elif a < b:\n            return helper(a,b-1)\n    s = str\n    def rotate(a,b):\n        n = len(s)\n        d = (n-1) - (n-a)\n        if not is_palindrome(s):\n            return -1\n        if n == a:\n            return b\n        if a > b:\n            return helper(a,b)\n        return helper(b,a)\n    #ans = 0\n    ans = rotate(0,c)\n    while True:\n        if ans == -1:\n            return ans\n        ans = rotate(ans+1,c)\n    return ans\n",
        "num_ids": 229
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Your code here\n    # print(str)\n    if len(str) < 2:\n        return 0\n    i = 0\n    while i < len(str) - 1:\n        if str[i]!= str[len(str) - 1 - i]:\n            break\n        i += 1\n    if i == len(str) - 1:\n        return 0\n    else:\n        # if len(str) % 2 == 0:\n        #     return 2\n        # else:\n        return 1\n",
        "num_ids": 122
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Create a hashmap (dict) to store the values of the chars\n    ch_map = {}\n    # Iterate through the str.\n    for i in range(len(str)):\n        # If the char is already there\n        if str[i] in ch_map.keys():\n            # Increment the count of the corresponding char.\n            ch_map[str[i]] += 1\n        # Else, add the char and initialise count of the char.\n        else:\n            ch_map[str[i]] = 1\n    # Store the count of all the chars.\n    ch_count = len(ch_map)\n    # For a given number of rotations.\n    for i in range(1, ch_count + 1):\n        # Iterate through the dict.\n        for k, v in ch_map.items():\n            # If the ch_map value is less than i.\n            if v < i:\n                # Add 1 to the count.\n                ch_map[k] += 1\n            # Else, remove the key and its value from the map.\n            else:\n                ch_map.pop(k)\n    # Return the count.\n    return ch_count - len(ch_map)\n",
        "num_ids": 286
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #initializing a dictionary to store the frequency of each character\n    d = {}\n    for i in range(len(str)):\n        if str[i] not in d:\n            d[str[i]] = 1\n        else:\n            d[str[i]] += 1\n",
        "num_ids": 68
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    i = 0\n    j = 0\n    m = len(str) - 1\n    n = len(str)\n    if str == str[::-1]:\n        return 0\n    while(True):\n        temp = str[i]\n        str[i] = str[j]\n        str[j] = temp\n        if str == str[::-1]:\n            break\n        j += 1\n        if j == m:\n            i += 1\n            j = i + 1\n    return j - i\n",
        "num_ids": 122
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    s = []\n    n = len(str)\n    \n    for i in range(n):\n        s.append(str[i])\n        \n    for i in range(n):\n        for j in range(n-1):\n            if s[j]!= s[j+1]:\n                s[j],s[j+1]=s[j+1],s[j]\n                \n    return(s)\n",
        "num_ids": 105
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotation = 0\n    while True:\n        new_str = str[rotation:] + str[:rotation]\n        if new_str == str:\n            break\n        rotation += 1\n    return rotation\n",
        "num_ids": 53
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Initializing the lengths of the string.\n    if len(str) == 1:\n        return 0\n    if len(str) == 2:\n        if str == 'a' or str == 'e' or str == 'i' or str == 'o' or str == 'u':\n            return 1\n        else:\n            return 0\n",
        "num_ids": 81
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    s = str\n    seen = {}\n    def rec(index):\n        if index >= len(s):\n            return 0\n        if index in seen:\n            return seen[index]\n        r = s[index]\n        ans = rec(index + 1)\n        if index + 1 < len(s):\n            ans = min(ans, rec(index + 1) + (s[index + 1] == r))\n        seen[index] = ans\n        return ans\n    return rec(0)\n    \n",
        "num_ids": 121
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'',1).replace(ch,'',1)\n",
        "num_ids": 21
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    #start writing your code here\n    #Populate the variables: s and ch\n    #Return s\n    if(s == None):\n        return s\n    while(s.find(ch)!= -1):\n        s = s.replace(ch,'',1)\n    while(s.find(ch)!= -1):\n        s = s.replace(ch,'',1)\n    return s\n",
        "num_ids": 96
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if (s.count(ch) == 1):\n        s = s.replace(ch, \"\")\n    else:\n        s = s.replace(ch, \"\")\n    return s\n",
        "num_ids": 47
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) == 0:\n        return s\n    if s[0] == ch:\n        return s[1:]\n    if s[-1] == ch:\n        return s[:-1]\n    return s\n",
        "num_ids": 56
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')\ns1 = input(\"Enter the string: \")\nc = input(\"Enter the character: \")\nprint(remove_Occ(s1,c))\n",
        "num_ids": 47
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s==\"\":\n        return s\n    if s.startswith(ch):\n        return s[1:]\n    if s.endswith(ch):\n        return s[:-1]\n    return s\nprint(remove_Occ(\"Hello, I am a guy\", \"a\"))\nprint(remove_Occ(\"Hello, I am a guy\", \"b\"))\nprint(remove_Occ(\"Hello, I am a guy\", \"c\"))\nprint(remove_Occ(\"Hello, I am a guy\", \"z\"))\nprint(remove_Occ(\"Hello, I am a guy\", \"h\"))\n",
        "num_ids": 139
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Code here\n    s = s.replace(s[:s.index(ch)],'')\n    s = s.replace(s[-1],'')\n    return s\n",
        "num_ids": 45
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.replace(ch,\"\",1)\n    s=s.replace(ch,\"\")\n    return s\nprint(remove_Occ(\"tLhGdMb\",'h')",
        "num_ids": 47
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s1 = s.replace(ch,'')\n    s2 = s1.replace(s1[0],'')\n    return s2\n",
        "num_ids": 36
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s:\n        s1 = s.replace(s[0], '')\n        s1 = s1.replace(s[-1], '')\n        return s1\n    else:\n        return ''\n",
        "num_ids": 52
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    result = []\n    i = 0\n    while i < len(M):\n        m = sum(M[i])\n        result.append(m)\n        i += 1\n    i = 0\n    while i < len(M):\n        j = 0\n        while j < len(M):\n            if M[i][j] == result[j]:\n                M[i][j] = i\n            j += 1\n        i += 1\n    return M\n",
        "num_ids": 110
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    #this works, but I would rather have it do this:\n    # for j in range(0, len(M[0])):\n    #     sum = 0\n    #     for i in range(0, len(M)):\n    #         sum += M[i][j]\n    #     M.append(sum)\n    # return sorted(M)\n",
        "num_ids": 87
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    res = []\n    n = len(M)\n    for i in range(n):\n        s = sum(M[i])\n        res.append(s)\n    M.sort()\n    for i in range(n):\n        s = sum(M[i])\n        M[i] = s\n    return M\n",
        "num_ids": 79
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n=len(M)\n    m=len(M[0])\n    x=n*[0]\n    S=[0]*n\n    for i in range(n):\n        for j in range(m):\n            S[i]=S[i]+M[i][j]\n    for i in range(n):\n        x[i]=S[i]\n    x.sort()\n    S=n*[0]\n    for i in range(n):\n        S[i]=x[i]\n    for i in range(n):\n        for j in range(m):\n            M[i][j]=S[i]-M[i][j]\n    return M\n",
        "num_ids": 164
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    M = list(M)\n    for i in range(n):\n        M[i] = list(M[i])\n        for j in range(n):\n            M[i][j] = int(M[i][j])\n            # if M[i][j] == 0:\n            #     M[i][j] = 0\n            # else:\n            #     M[i][j] = M[i][j]\n    s = sorted(M, key = sum)\n    M = list(s)\n    for i in range(n):\n        M[i] = list(M[i])\n    return M\n        \n",
        "num_ids": 161
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    if n == 0:\n        return\n    for i in range(n):\n        M[i].sort()\n    for i in range(n):\n        for j in range(n):\n            M[i][j] = M[i][j] + M[i][n-1] + M[n-1][j]\n    for i in range(n):\n        M[i].sort()\n",
        "num_ids": 105
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # we need two arrays to store the max and min sum for each column\n    # because we know that each element in the matrix has only one value for each row\n    min_max_sum = [[0 for x in range(len(M[0]))] for y in range(len(M))]\n    \n    # first for loop:\n    for i in range(len(M)):\n        \n        # second for loop:\n        for j in range(len(M[0])):\n            \n            if j == 0:\n                # get the first value\n                min_max_sum[i][j] = M[i][j]\n            else:\n                min_max_sum[i][j] = M[i][j] + min_max_sum[i][j-1]\n            \n    # third for loop:\n    for i in range(len(M)):\n        \n        # set the current minimum in the first column\n        min_value = min_max_sum[i][0]\n        \n        # for each row in the matrix\n        for j in range(1, len(M[0])):\n            \n            # for each row in the matrix\n            if min_value > M[i][j]:\n                # set the minimum in the first column\n                min_value = M[i][j]\n                \n            # set the maximum in the first column\n            if min_max_sum[i][j] < min_max_sum[i][j-1]:\n                min_max_sum[i][j] = min_max_sum[i][j-1]\n            \n            # if the sum is greater than the current minimum\n            if min_max_sum[i][j] > min_max_sum[i][j-1]:\n                # set the current maximum in the first column\n                min_max_sum[i][j] = min_max_sum[i][j-1]\n            \n            # if the sum is greater than the current maximum\n            if min_max_sum[i][j] < min_max_sum[i][j-1]:\n                # set the current minimum in the first column\n                min_max_sum[i][j] = min_max_sum[i][j-1]\n    \n    return min_max_sum\n",
        "num_ids": 536
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    new_matrix = [[0 for _ in range(len(M[0]))] for _ in range(len(M))]\n    sums = list()\n    for j in range(len(M[0])):\n        sums += list(map(sum, M))\n        M = [[M[i][j] for i in range(len(M))] for j in range(len(M[0]))]\n",
        "num_ids": 102
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            if M[j][0] + M[j+1][0] < M[j+1][0] + M[j][0]:\n                M[j], M[j+1] = M[j+1], M[j]\n    return M\n",
        "num_ids": 93
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V=l*h/2.0\n    return V",
        "num_ids": 16
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)\n",
        "num_ids": 12
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (h*l*b)/3\n    return volume",
        "num_ids": 17
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    ans = (l*h)/3\n    return ans\n",
        "num_ids": 16
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l = float(l)\n    b = float(b)\n    h = float(h)\n    vol = (l*b*h)/3\n    return vol\n    \ndef main():\n    '''\n    Write a python program to calculate and display the volume of a \n    triangular prism.\n    '''\n    try:\n        # taking inputs for the length, width, height of the triangle\n        # used for the calculations\n        l = input(\"Enter the length of the triangle : \")\n        b = input(\"Enter the width of the triangle : \")\n        h = input(\"Enter the height of the triangle : \")\n        l = float(l)\n        b = float(b)\n        h = float(h)\n        vol = find_Volume(l,b,h)\n        print(\"The volume of the triangle is :\",vol)\n    except ValueError:\n        print(\"Wrong input.. try again\")\n        main()\n        \nif __name__ == '__main__':\n    main()",
        "num_ids": 162
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*b*h)/3\n    return volume\n    ",
        "num_ids": 19
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    base = l*h\n    height = b*h\n    volume = base*height/2\n    return volume\n",
        "num_ids": 29
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    vol = l*b*h\n    return vol\ndef find_SurfaceArea(l,b,h) : \n    '''\n    Write a python function to find the surface area of a triangular prism.\n    '''\n    area = l*b + b*h + h*l\n    return area\ndef find_Perimeter(l,b,h) : \n    '''\n    Write a python function to find the perimeter of a triangular prism.\n    '''\n    peri = 2*(l+b+h)\n    return peri\ndef find_Volume_area_perimeter(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    Also print the surface area and perimeter.\n    '''\n    vol = find_Volume(l,b,h)\n    area = find_SurfaceArea(l,b,h)\n    peri = find_Perimeter(l,b,h)\n    print('Volume = ',vol)\n    print('Surface Area = ',area)\n    print('Perimeter = ',peri)\n",
        "num_ids": 79
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (l*h*b)/6\n    return V\n",
        "num_ids": 18
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l = int(l)\n    b = int(b)\n    h = int(h)\n    v = (l*b*h)/2\n    print(\"The volume of a triangular prism is:\",v)\n    return v\n",
        "num_ids": 57
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.findall(r'[a-z]+_[a-z]+', text)!= []\n",
        "num_ids": 28
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('[a-z]+_[a-z]+', text)\n",
        "num_ids": 23
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = text.lower()\n    for i in text:\n        if not i.isalpha():\n            return False\n    return True\n",
        "num_ids": 34
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r\"[a-z]+_[a-z]+\", text):\n        return True\n    else:\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return True if re.search(r'[a-z][_]+[a-z]',text) else False\n",
        "num_ids": 30
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    s=re.findall(\"[a-z]{1,}[_]{1,}\",text)\n    if len(s)==0:\n        return False\n    else:\n        return True\n",
        "num_ids": 51
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[a-z]+_[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_lowercase(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[a-z]+[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_uppercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[A-Z]+_[A-Z]+',text):\n        return True\n    else:\n        return False\ndef text_uppercase(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[A-Z]+[A-Z]+',text):\n        return True\n    else:\n        return False\ndef text_capitalize_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[A-Z]+_[A-Z]+',text):\n        return True\n    else:\n        return False\ndef text_capitalize(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[A-Z]+[A-Z]+',text):\n        return True\n    else:\n        return False\ndef text_newline_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[a-z]+_[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_newline(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[a-z]+[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_period_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[a-z]+_[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_period(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[a-z]+[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_spaces_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[a-z]+_[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_spaces(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[a-z]+[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_linebreaks_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[a-z]+_[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_linebreaks(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[a-z]+[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_tab_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[a-z]+_[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_tab(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[a-z]+[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_multiple_linebreaks(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[a-z]+[a-z]+[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_multiple_tab(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[a-z]+[a-z]+[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_space_without_caps_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[a-z]+_[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_space_without_caps(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[a-z]+[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_space_without_cap_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[a-z]+_[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_space_without_cap(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[a-z]+[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_space_without_cap_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[a-z]+_[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_space_without_cap_lowercase(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[a-z]+[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_space_without_cap_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[a-z]+_[a-z]+',text):\n        return True\n    else:\n        return False\ndef text_space_without_cap",
        "num_ids": 45
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    #find the lowercase letters \n    pattern = r'[a-z]+'\n    result = re.findall(pattern, text)\n    \n    if result:\n        return True\n    else:\n        return False\n    \n    \ndef text_uppercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of uppercase letters joined with an underscore and false otherwise.\n    '''\n    \n    #find the uppercase letters\n    pattern = r'[A-Z]+'\n    result = re.findall(pattern, text)\n    \n    if result:\n        return True\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if not re.search(r'[a-z]+_[a-z]+', text):\n        return False\n    else:\n        return True\n",
        "num_ids": 38
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'^[a-z]+_[a-z]+$', text))\n",
        "num_ids": 29
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n    \n",
        "num_ids": 10
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n",
        "num_ids": 14
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (a*4)\n",
        "num_ids": 10
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\nprint(\"Example:\")\nprint(square_perimeter(5))\n",
        "num_ids": 24
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n",
        "num_ids": 8
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string1 = list(string)\n    string2 = list(string)\n    for i in string1:\n        if i in string2:\n            string2.remove(i)\n    return ''.join(string2)\n",
        "num_ids": 55
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    lst_1 = list(string)\n    lst_2 = list(string)\n    for i in range(len(lst_1)):\n        if lst_1[i] in lst_2:\n            lst_1.remove(lst_1[i])\n            lst_2.remove(lst_1[i])\n    return lst_1\ndef no_of_chars(string): \n    '''\n    Write a function that returns the number of distinct characters in a string.\n    '''\n    set1 = set(string)\n    print(len(set1))\n    return len(set1)\ndef remove_str(str_1, str_2): \n    '''\n    Write a function that removes characters from the first string which are present in the second string.\n    '''\n    set1 = set(str_1)\n    set2 = set(str_2)\n    for i in set2:\n        if i in set1:\n            set1.remove(i)\n    return set1\ndef no_of_char_chars(str_1, str_2): \n    '''\n    Write a function that returns the number of distinct characters in the two strings.\n    '''\n    set1 = set(str_1)\n    set2 = set(str_2)\n    count = 0\n    for i in set1:\n        if i in set2:\n            count += 1\n    return count\ndef no_of_char_str(string): \n    '''\n    Write a function that returns the number of distinct characters in a string.\n    '''\n    return len(set(string))\ndef no_of_duplicates(string): \n    '''\n    Write a function that returns the number of duplicate characters in a string.\n    '''\n    lst = []\n    for i in string:\n        if i not in lst:\n            lst.append(i)\n    return len(lst)\ndef no_of_duplicates_2(string): \n    '''\n    Write a function that returns the number of duplicate characters in a string.\n    '''\n    lst = []\n    count = 0\n    for i in string:\n        if i in lst:\n            count += 1\n        else:\n            lst.append(i)\n    return count\ndef no_of_duplicates_3(string): \n    '''\n    Write a function that returns the number of duplicate characters in a string.\n    '''\n    lst = []\n    count = 0\n    for i in string:\n        if i in lst:\n            count += 1\n        else:\n            lst.append(i)\n    return count\ndef no_of_duplicates_4(string): \n    '''\n    Write a function that returns the number of duplicate characters in a string.\n    '''\n    count = 0\n    for i in string:\n        count = 1\n        if i in string:\n            count += 1\n    return count\ndef no_of_duplicates_5(string): \n    '''\n    Write a function that returns the number of duplicate characters in a string.\n    '''\n    count = 0\n    for i in range(len(string)):\n        if string[i] in string[i+1:]:\n            count += 1\n    return count\ndef no_of_duplicates_6(string): \n    '''\n    Write a function that returns the number of duplicate characters in a string.\n    '''\n    count = 0\n    for i in range(len(string)):\n        if string[i] in string[i+1:]:\n            count += 1\n    return count\ndef no_of_duplicates_7(string): \n    '''\n    Write a function that returns the number of duplicate characters in a string.\n    '''\n    return len(list(set(string)))\ndef no_of_duplicates_8(string): \n    '''\n    Write a function that returns the number of duplicate characters in a string.\n    '''\n    return len(set(string))\ndef no_of_duplicates_9(string): \n    '''\n    Write a function that returns the number of duplicate characters in a string.\n    '''\n    lst = list(string)\n    lst.sort()\n    return len([i for i, value in enumerate(lst) if value == lst[i-1]])\ndef no_of_duplicates_10(string): \n    '''\n    Write a function that returns the number of duplicate characters in a string.\n    '''\n    return len([i for i, value in enumerate(string) if value == string[i-1]])\ndef no_of_duplicates_11(string): \n    '''\n    Write a function that returns the number of duplicate characters in a string.\n    '''\n    lst = list(string)\n    lst.sort()\n    return len([i for i, value in enumerate(lst) if value == lst[i-1]])\ndef no_of_duplicates_12(string): \n    '''\n    Write a function that returns the number of duplicate characters in a string.\n    '''\n    count = 0\n    for i in range(len(string)):\n        if string[i] in string[i+1:]:\n            count += 1\n    return count\ndef no_of_duplicates_13(string): \n    '''\n    Write a function that returns the number of duplicate characters in a string.\n    '''\n    lst = list(string)\n    lst.sort()\n    return len([i for i, value in enumerate(lst) if value == lst[i-1]])\ndef no_of_duplicates_14(string): \n    '''\n    Write a function that returns the number of duplicate characters in a string.\n    '''\n    lst = list(string)\n    lst.sort()\n    return len([i for i, value in enumerate(lst) if value == lst[i-1]])\ndef no_of_duplicates_15(string): \n    '''\n    Write a function that returns the number of duplicate characters in a string.\n    '''\n    count = 0\n    for i in range(len(string)):\n        if string[i] in string[i+1:]:\n            count += 1\n    return count\ndef no_of_duplicates_16(string): \n    '''\n    Write a function that returns the number of duplicate characters in a string.\n    '''\n    lst = list(string)\n    lst.sort()\n    return len([i for i, value in enumerate(lst) if value == lst[i-1]])\ndef no_of_duplicates_17(string): \n    '''\n    Write a function that returns the number of duplicate characters in a string.\n    '''\n    lst = list(string)\n    lst.sort()\n    return len([i for i, value in enumerate(lst) if value == lst[i-1]])\ndef no_of_duplicates_18(string): \n    '''\n    Write a function that returns the number of duplicate characters in a string.\n    '''\n    count = 0\n    for i in range(len(string)):\n        if string[i] in string[i+1:]:\n            count += 1\n    return count\ndef no_of_duplicates_19(string): \n    '''\n    Write a function that returns the number of duplicate characters in a string.\n    '''\n    lst = list(string)\n    lst.sort()\n    return len([i for i, value in enumerate(lst) if value == lst[i-1]])\ndef no_of_duplicates_20(string): \n    '''\n    Write a function that returns the number of duplicate characters in a string.\n    '''\n    lst = list(string)\n    lst.sort()\n    return len([i for i, value in enumerate(lst) if value == lst[i-1]])\ndef no_of_duplicates_21(string): \n    '''\n    Write a function that returns the number of duplicate characters in a string.\n    '''\n    count = 0\n    for i in range(len(string)):\n        if strin",
        "num_ids": 23
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l1 = list(string)\n    l2 = list(string)\n    for char in l2:\n        if char in l1:\n            l1.remove(char)\n    return l1\n        \ndef str_to_list2(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return set(string) - set(string)\n    \ndef string_to_bits(string):\n    '''\n    Write a function to convert a string of characters into a list of bits.\n    '''\n    b = []\n    for char in string:\n        x = ord(char)\n        for i in range(8):\n            if (x & (1 << i)):\n                b.append(1)\n            else:\n                b.append(0)\n    return b\n        \ndef string_to_bits2(string):\n    '''\n    Write a function to convert a string of characters into a list of bits.\n    '''\n    b = []\n    for char in string:\n        x = ord(char)\n        for i in range(8):\n            if (x & (1 << i)):\n                b.append(1)\n            else:\n                b.append(0)\n    return b\n",
        "num_ids": 67
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_1 = []\n    for ch in string:\n        if ch not in list_1:\n            list_1.append(ch)\n    return list_1\ndef solution(s1, s2):\n    if len(s1) > len(s2):\n        return solution(s2, s1)\n    else:\n        s1 = str_to_list(s1)\n        s2 = str_to_list(s2)\n        \n        # for i in range(len(s1)):\n        #     for j in range(len(s2)):\n        #         if s1[i] == s2[j]:\n        #             s1.remove(s1[i])\n        #             break\n        #     if len(s1) == 0:\n        #         break\n        # return len(s1)\n        \n        s1 = list(s1)\n        s2 = list(s2)\n        s1.sort()\n        s2.sort()\n        for i in range(len(s1)):\n            if s1[i] == s2[i]:\n                s1.remove(s1[i])\n            else:\n                break\n        return len(s1)\nprint(solution('abcd', 'c')",
        "num_ids": 303
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    arr=[]\n    i,j=0,0\n    while(i<len(string)):\n        if string[i] not in arr:\n            arr.append(string[i])\n            i+=1\n        else:\n            j+=1\n            i+=1\n    \n    print(arr[j:])\n",
        "num_ids": 78
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    temp_list = list(string)\n    for ch in string:\n        if ch in temp_list:\n            temp_list.remove(ch)\n    return temp_list\n",
        "num_ids": 44
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [char for char in string if char not in string[:len(string)//2]]\n",
        "num_ids": 25
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_1 = list(string)\n    list_2 = list(string)\n    i=0\n    j=0\n    while(i < len(list_2)):\n        if list_2[i] in list_1:\n            list_1.remove(list_2[i])\n        else:\n            i+=1\n    return list_1\nprint(str_to_list(\"geeksforgeeks\")",
        "num_ids": 101
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if not string:\n        return string\n    if not string[0] in string[1:]:\n        return string\n    for i,c in enumerate(string[1:]):\n        if c in string[0]:\n            return string[:i]\n    return string\n",
        "num_ids": 66
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    lst = []\n    temp = ''\n    for char in string:\n        if char not in string:\n            temp += char\n    \n    return lst\n",
        "num_ids": 40
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)-1):\n        for j in range(i+1,len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums)==1:\n        return False\n    else:\n        for i in range(len(arraynums)):\n            for j in range(i+1,len(arraynums)):\n                if arraynums[i]==arraynums[j]:\n                    return True\n        return False\n",
        "num_ids": 78
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Complexity: Time O(n^2) | Space O(n)\n    i = 0\n    while i < len(arraynums):\n        for j in range(i + 1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n        i += 1\n    return False\n",
        "num_ids": 84
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    nums = arraynums.copy()\n    nums.sort()\n    i = 0\n    while i < len(nums) - 1:\n        if nums[i] == nums[i + 1]:\n            return True\n        i += 1\n    return False\n",
        "num_ids": 67
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(0, len(arraynums)):\n        if arraynums[i] < 0 or i == len(arraynums) - 1:\n            return False\n        elif arraynums[i] == arraynums[i+1]:\n            return True\n    return False\n",
        "num_ids": 72
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True\n",
        "num_ids": 33
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i,len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n",
        "num_ids": 56
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    n = len(arraynums)\n    i = 0\n    while i < n:\n        if arraynums[i] == arraynums[i+1]:\n            return True\n        i += 1\n    return False\n",
        "num_ids": 55
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    d = {}\n    for i in arraynums:\n        if i in d.keys():\n            return True\n        d[i] = True\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    my_dict = {}\n    for i in arraynums:\n        if i in my_dict:\n            return True\n        my_dict[i] = True\n    return False\n",
        "num_ids": 45
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x in range (1,10) or x == 40\n",
        "num_ids": 17
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # if the number is between 1 and 5, it is a woodball number.\n    if x >= 1 and x <= 5:\n        return True\n    # if the number is between 6 and 10, it is a woodball number.\n    elif x >= 6 and x <= 10:\n        return True\n    # if the number is between 11 and 15, it is a woodball number.\n    elif x >= 11 and x <= 15:\n        return True\n    # if the number is between 16 and 20, it is a woodball number.\n    elif x >= 16 and x <= 20:\n        return True\n    # if the number is between 21 and 25, it is a woodball number.\n    elif x >= 21 and x <= 25:\n        return True\n    # if the number is between 26 and 30, it is a woodball number.\n    elif x >= 26 and x <= 30:\n        return True\n    # if the number is between 31 and 35, it is a woodball number.\n    elif x >= 31 and x <= 35:\n        return True\n    # if the number is between 36 and 40, it is a woodball number.\n    elif x >= 36 and x <= 40:\n        return True\n    # if the number is between 41 and 45, it is a woodball number.\n    elif x >= 41 and x <= 45:\n        return True\n    # if the number is between 46 and 50, it is a woodball number.\n    elif x >= 46 and x <= 50:\n        return True\n    # if the number is between 51 and 55, it is a woodball number.\n    elif x >= 51 and x <= 55:\n        return True\n    # if the number is between 56 and 60, it is a woodball number.\n    elif x >= 56 and x <= 60:\n        return True\n    # if the number is between 61 and 65, it is a woodball number.\n    elif x >= 61 and x <= 65:\n        return True\n    # if the number is between 66 and 70, it is a woodball number.\n    elif x >= 66 and x <= 70:\n        return True\n    # if the number is between 71 and 75, it is a woodball number.\n    elif x >= 71 and x <= 75:\n        return True\n    # if the number is between 76 and 80, it is a woodball number.\n    elif x >= 76 and x <= 80:\n        return True\n    # if the number is between 81 and 85, it is a woodball number.\n    elif x >= 81 and x <= 85:\n        return True\n    # if the number is between 86 and 90, it is a woodball number.\n    elif x >= 86 and x <= 90:\n        return True\n    # if the number is between 91 and 95, it is a woodball number.\n    elif x >= 91 and x <= 95:\n        return True\n    # if the number is between 96 and 100, it is a woodball number.\n    elif x >= 96 and x <= 100:\n        return True\n    # if the number is between 101 and 105, it is a woodball number.\n    elif x >= 101 and x <= 105:\n        return True\n    # if the number is between 106 and 110, it is a woodball number.\n    elif x >= 106 and x <= 110:\n        return True\n    # if the number is between 111 and 115, it is a woodball number.\n    elif x >= 111 and x <= 115:\n        return True\n    # if the number is between 116 and 120, it is a woodball number.\n    elif x >= 116 and x <= 120:\n        return True\n    # if the number is between 121 and 125, it is a woodball number.\n    elif x >= 121 and x <= 125:\n        return True\n    # if the number is between 126 and 130, it is a woodball number.\n    elif x >= 126 and x <= 130:\n        return True\n    # if the number is between 131 and 135, it is a woodball number.\n    elif x >= 131 and x <= 135:\n        return True\n    # if the number is between 136 and 140, it is a woodball number.\n    elif x >= 136 and x <= 140:\n        return True\n    # if the number is between 141 and 145, it is a woodball number.\n    elif x >= 141 and x <= 145:\n        return True\n    # if the number is between 146 and 150, it is a woodball number.\n    elif x >= 146 and x <= 150:\n        return True\n    # if the number is between 151 and 155, it is a woodball number.\n    elif x >= 151 and x <= 155:\n        return True\n    # if the number is between 156 and 160, it is a woodball number.\n    elif x >= 156 and x <= 160:\n        return True\n    # if the number is between 161 and 165, it is a woodball number.\n    elif x >= 161 and x <= 165:\n        return True\n    # if the number is between 166 and 170, it is a woodball number.\n    elif x >= 166 and x <= 170:\n        return True\n    # if the number is between 171 and 175, it is a woodball number.\n    elif x >= 171 and x <= 175:\n        return True\n    # if the number is between 176 and 180, it is a woodball number.\n    elif x >= 176 and x <= 180:\n        return True\n    # if the number is between 181 and 185, it is a woodball number.\n    elif x >= 181 and x <= 185:\n        return True\n    # if the number is between 186 and 190, it is a woodball number.\n    elif x >= 186 and x <= 190:\n        return True\n    # if the number is between 191 and 195, it is a woodball number.\n    elif x >= 191 and x <= 195:\n        return True\n    # if the number is between 196 and 200, it is a woodball number.\n    elif x >= 196 and x <= 200:\n        return True\n    # if the number is between 201 and 205, it is a woodball number.\n    elif x >= 201 and x <= 205:\n        return True\n    # if the number is between 206 and 210, it is a woodball number.\n    elif x >= 206 and x <= 210:\n        return True\n    # if the number is between 211 and 215, it is a woodball number.\n    elif x >= 211 and x <= 215:\n        return True\n    # if the number is between 216 and 220, it is a woodball number.\n    elif x >= 216 and x <= 220:\n        return True\n    # if the number is between 221 and 225, it is a woodball number.\n    elif x >= 221 and x <= 225:\n        return True\n    # if the number is between 226 and 230, it is a woodball number.\n    elif x >= 226 and x <= 230:\n        return True\n    # if the number is between 231 and 235, it is a woodball number.\n    elif x >= 231 and x <= 235:\n        return True\n    # if the number is between 236 and 240, it is a woodball number.\n    elif x >= 236 and x <= 240:\n        return True\n    # if the number is between 241 and 245, it is a woodball number.\n    elif x >= 241 and x <= 245:\n        return True\n    # if the number is between 246 and 250, it is a woodball number.\n    elif x >= 246 and x <= 250:\n        return True\n    # if the number is between 251 and 254, it is a woodball number.\n    elif x >= 251 and x <= 254:\n        return True\n    # if the number is between 255 and 258, it is a woodball number.\n    elif x >= 255 and x <= 258:\n        return True\n    # if the number is between 259 and 263, it is a woodball number.\n    elif x >= 259 and x <= 263:\n        return True\n    # if the number is between 264 and 268, it is a woodball number.\n    elif x >= 264 and x <= 268:\n        return True\n    # if the number is between 269 and 274, it is a woodball number.\n    elif x >= 269 and x <= 274:\n        return True\n    # if the number is between 275 and 280, it is a woodball number.\n    elif x >= 275 and x <= 280:\n        return True\n    # if the number is between 281 and 285, it is a woodball number.\n    elif x >= 281 and x <= 285:\n        return True\n    # if the number is between 286 and 290, it is a woodball number.",
        "num_ids": 2014
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 8:\n        return True\n    else:\n        return False\n",
        "num_ids": 21
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x==1:\n        print('Woodball')\n    elif x==2:\n        print('Not woodball')\n    else:\n        print('Error')\n",
        "num_ids": 42
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x in range(100,200) :\n        print(f'{x} is a woodball')\n    else:\n        print(f'{x} is not a woodball')\n",
        "num_ids": 47
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return bool(x%13)\n",
        "num_ids": 11
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return (x==19 or x==20 or x==21 or x==22 or x==23 or x==24)\n",
        "num_ids": 30
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # your code here\n    return False\n",
        "num_ids": 12
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x==5:\n        return 'Woodball'\n    elif x==6:\n        return 'Woodball'\n    elif x==7:\n        return 'Woodball'\n    elif x==8:\n        return 'Woodball'\n    elif x==9:\n        return 'Woodball'\n    elif x==10:\n        return 'Woodball'\n    elif x==11:\n        return 'Woodball'\n    elif x==12:\n        return 'Woodball'\n    elif x==13:\n        return 'Woodball'\n    elif x==14:\n        return 'Woodball'\n    elif x==15:\n        return 'Woodball'\n    elif x==16:\n        return 'Woodball'\n    elif x==17:\n        return 'Woodball'\n    elif x==18:\n        return 'Woodball'\n    elif x==19:\n        return 'Woodball'\n    elif x==20:\n        return 'Woodball'\n    elif x==21:\n        return 'Woodball'\n    elif x==22:\n        return 'Woodball'\n    elif x==23:\n        return 'Woodball'\n    elif x==24:\n        return 'Woodball'\n    elif x==25:\n        return 'Woodball'\n    elif x==26:\n        return 'Woodball'\n    elif x==27:\n        return 'Woodball'\n    elif x==28:\n        return 'Woodball'\n    elif x==29:\n        return 'Woodball'\n    elif x==30:\n        return 'Woodball'\n    elif x==31:\n        return 'Woodball'\n    elif x==32:\n        return 'Woodball'\n    elif x==33:\n        return 'Woodball'\n    elif x==34:\n        return 'Woodball'\n    elif x==35:\n        return 'Woodball'\n    elif x==36:\n        return 'Woodball'\n    elif x==37:\n        return 'Woodball'\n    elif x==38:\n        return 'Woodball'\n    elif x==39:\n        return 'Woodball'\n    elif x==40:\n        return 'Woodball'\n    elif x==41:\n        return 'Woodball'\n    elif x==42:\n        return 'Woodball'\n    elif x==43:\n        return 'Woodball'\n    elif x==44:\n        return 'Woodball'\n    elif x==45:\n        return 'Woodball'\n    elif x==46:\n        return 'Woodball'\n    elif x==47:\n        return 'Woodball'\n    elif x==48:\n        return 'Woodball'\n    elif x==49:\n        return 'Woodball'\n    elif x==50:\n        return 'Woodball'\n    elif x==51:\n        return 'Woodball'\n    elif x==52:\n        return 'Woodball'\n    elif x==53:\n        return 'Woodball'\n    elif x==54:\n        return 'Woodball'\n    elif x==55:\n        return 'Woodball'\n    elif x==56:\n        return 'Woodball'\n    elif x==57:\n        return 'Woodball'\n    elif x==58:\n        return 'Woodball'\n    elif x==59:\n        return 'Woodball'\n    elif x==60:\n        return 'Woodball'\n    elif x==61:\n        return 'Woodball'\n    elif x==62:\n        return 'Woodball'\n    elif x==63:\n        return 'Woodball'\n    elif x==64:\n        return 'Woodball'\n    elif x==65:\n        return 'Woodball'\n    elif x==66:\n        return 'Woodball'\n    elif x==67:\n        return 'Woodball'\n    elif x==68:\n        return 'Woodball'\n    elif x==69:\n        return 'Woodball'\n    elif x==70:\n        return 'Woodball'\n    elif x==71:\n        return 'Woodball'\n    elif x==72:\n        return 'Woodball'\n    elif x==73:\n        return 'Woodball'\n    elif x==74:\n        return 'Woodball'\n    elif x==75:\n        return 'Woodball'\n    elif x==76:\n        return 'Woodball'\n    elif x==77:\n        return 'Woodball'\n    elif x==78:\n        return 'Woodball'\n    elif x==79:\n        return 'Woodball'\n    elif x==80:\n        return 'Woodball'\n    elif x==81:\n        return 'Woodball'\n    elif x==82:\n        return 'Woodball'\n    elif x==83:\n        return 'Woodball'\n    elif x==84:\n        return 'Woodball'\n    elif x==85:\n        return 'Woodball'\n    elif x==86:\n        return 'Woodball'\n    elif x==87:\n        return 'Woodball'\n    elif x==88:\n        return 'Woodball'\n    elif x==89:\n        return 'Woodball'\n    elif x==90:\n        return 'Woodball'\n    elif x==91:\n        return 'Woodball'\n    elif x==92:\n        return 'Woodball'\n    elif x==93:\n        return 'Woodball'\n    elif x==94:\n        return 'Woodball'\n    elif x==95:\n        return 'Woodball'\n    elif x==96:\n        return 'Woodball'\n    elif x==97:\n        return 'Woodball'\n    elif x==98:\n        return 'Woodball'\n    elif x==99:\n        return 'Woodball'\n    elif x==100:\n        return 'Woodball'\n    else:\n        return 'Woodball'\n",
        "num_ids": 1452
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 5 or x == 10:\n        return True\n    else:\n        return False\nprint(is_woodall(5))\nprint(is_woodall(6))\nprint(is_woodall(10))\nprint(is_woodall(15))\nprint(is_woodall(20))\nprint(is_woodall(22))\nprint(is_woodall(25))\nprint(is_woodall(30))\nprint(is_woodall(35))\nprint(is_woodall(40))\nprint(is_woodall(45))\nprint(is_woodall(50))\nprint(is_woodall(55))\nprint(is_woodall(60))\nprint(is_woodall(65))\nprint(is_woodall(70))\nprint(is_woodall(75))\nprint(is_woodall(80))\nprint(is_woodall(85))\nprint(is_woodall(90))\nprint(is_woodall(95))\nprint(is_woodall(100))\n",
        "num_ids": 245
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num>0:\n        rev = rev*10 + num%10\n        num = num//10\n    return rev\n",
        "num_ids": 36
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num==1:\n        return True\n    elif num==2:\n        return True\n    else:\n        if num%2==0:\n            num=int(num/2)\n            return rev(num)\n        else:\n            num=int(num/2)+1\n            return rev(num)\n",
        "num_ids": 77
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while(num > 0):\n        rem = num%10\n        rev = (rev * 10) + rem\n        num = num // 10\n    if(rev == num):\n        return True\n    else:\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num*10 + num%10\n        num //= 10\n    return rev_num == num\n",
        "num_ids": 45
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num > 0:\n        rem = num % 10\n        rev = rev * 10 + rem\n        num = num // 10\n    return rev\n",
        "num_ids": 41
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    sum = 0\n    while(num > 0):\n        # print(\"num \", num, \"  sum \", sum)\n        remainder = num % 10\n        sum = sum * 10 + remainder\n        num = num // 10\n    # print(\"sum \", sum)\n    return sum == num\n",
        "num_ids": 70
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    n = num\n    rev = 0\n    while num > 0:\n        rev = (rev*10) + (num%10)\n        num = num//10\n    if n == rev:\n        return 1\n    else:\n        return 0\n",
        "num_ids": 60
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    temp=0\n    while(num>0):\n        temp=temp*10+num%10\n        num=num//10\n    return temp\n    \ndef rev2(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    temp=0\n    while(num>0):\n        temp=temp*10+num%10\n        num=num//10\n    return temp\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1942
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while(num>0):\n        dig = num%10\n        rev = rev*10 + dig\n        num = num//10\n    if(rev == num):\n        return True\n    return False\n",
        "num_ids": 54
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num > 0:\n        dig = num%10\n        rev = (rev*10) + dig\n        num = num//10\n    return rev\n",
        "num_ids": 43
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n=len(arr)\n    dp=[[0 for i in range(10)] for j in range(n)]\n    for i in range(n) : \n        dp[i][arr[i]]=1\n    for i in range(n-2,-1,-1) : \n        for j in range(10) : \n            for k in range(10) : \n                if(j==0):\n                    dp[i][j] = max(dp[i][j], dp[i+1][k] + dp[i+1][k+j])\n                if(j==9):\n                    dp[i][j] = max(dp[i][j], dp[i+1][k] + dp[i+1][k-j])\n                else :\n                    dp[i][j] = max(dp[i][j], dp[i+1][k] + dp[i+1][k+j])\n                    dp[i][j] = max(dp[i][j], dp[i+1][k] + dp[i+1][k-j])\n    return dp[0][0]\n",
        "num_ids": 274
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if (not arr) : return -1\n    n = len(arr)\n    arr.sort()\n    if (arr[0]>9) : return -1\n    for i in range(1, n) :\n        if (arr[i]<9) :\n            return -1\n    return sum(arr)\nprint(find_Max_Num([2,3,4,5,6,7,8,9,1]))\nprint(find_Max_Num([9,1,9,8,2,3]))\nprint(find_Max_Num([0,9,9]))\nprint(find_Max_Num([1,3,8,9,7,5]))\nprint(find_Max_Num([2,9,3,8,5,7]))\nprint(find_Max_Num([1,2,3,4,5,6,7,8,9,10]))\nprint(find_Max_Num([1,3,4,5,6,7,8]))\nprint(find_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\nprint(find_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]))\nprint(find_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]))\nprint(find_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]))\nprint(find_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]))\nprint(find_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]))\nprint(find_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]))\nprint(find_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]))\nprint(find_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]))\nprint(find_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]))\nprint(find_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]))\nprint(find_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]))\nprint(find_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]))\nprint(find_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]))\nprint(find_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]))\nprint(find_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]))\nprint(find_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]))\nprint(find_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]))\nprint(find_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]))\nprint(find_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39]))\nprint(find_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]))\nprint(find_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41]))\nprint(find_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42]))\nprint(find_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43]))\nprint(find_Max_Num([1,2,3",
        "num_ids": 2007
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr = list(arr)\n    max = -2147483648\n    for i in range(len(arr)) :\n        if max <= int(arr[i]):\n            max = int(arr[i])\n    return max\n",
        "num_ids": 58
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    if n == 0:\n        return -1\n    elif n == 1:\n        return int(arr[0])\n    else:\n        if arr[0] > arr[1]:\n            return arr[0]\n        else:\n            return arr[1]\n",
        "num_ids": 73
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i < j and arr[i] * arr[j] > max_num:\n                max_num = arr[i] * arr[j]\n    return max_num\n",
        "num_ids": 75
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return max(arr)\n",
        "num_ids": 9
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0 : \n        return -1 \n    else : \n        return max(arr) \n",
        "num_ids": 32
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max = -1\n    for i in range(len(arr)) : \n        if arr[i] > max : \n            max = arr[i]\n    return max\n",
        "num_ids": 44
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # this code is similar to max_length of the linked list problem\n    # but instead of using the entire length of the list, we are just using the length of the list\n    # and checking if the new number is greater than the previous number (dynamic programming)\n    \n    size = len(arr)\n    \n    if size == 0 :\n        return 0\n    \n    if size == 1 :\n        return arr[0]\n    \n    # the maximum number is just the maximum of the previous max + new number\n    max_num = max(arr[size-2]+arr[size-1],arr[size-1])\n    \n    # looping over the list from the second last element to first one\n    # because we are interested in the previous max and next max\n    for i in range(size-3,0,-1) :\n        \n        # if the current number is less than the max, update the max\n        if arr[i] < max_num :\n            max_num = arr[i]\n    \n    return max_num\n    \n",
        "num_ids": 245
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) < 2 :\n        return max(arr)\n",
        "num_ids": 19
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0 or x > 0 and y < 0: \n        return True\n    else:\n        return False\nprint(opposite_Signs(5,5))\nprint(opposite_Signs(-4,-4))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(4,4))\n",
        "num_ids": 86
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0:\n        return True\n    elif x>0 and y<0:\n        return True\n    elif x==0 and y==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0:\n        return True\n    elif x<0 and y>0:\n        return True\n    elif x<0 and y<0:\n        return True\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0:\n        return 1\n    elif x<0 and y>0:\n        return 1\n    elif x<0 and y<0:\n        return 0\n    elif x>0 and y>0:\n        return 0\n    else:\n        return 2",
        "num_ids": 72
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0 or x > 0 and y < 0: \n        return True\n    else: \n        return False\n",
        "num_ids": 35
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0 and y == 0:\n        return \"Both numbers have same sign\"\n    elif x!= 0 and y!= 0:\n        return \"Both numbers have same sign\"\n    elif x < 0 and y > 0:\n        return \"x has same sign and y has opposite sign\"\n    elif x > 0 and y < 0:\n        return \"x has same sign and y has opposite sign\"\n    else:\n        return \"Both numbers have opposite sign\"\n",
        "num_ids": 113
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x==0 and y==0:\n        return True\n    elif x>0 and y<0 or x<0 and y>0:\n        return True\n    else:\n        return False\n",
        "num_ids": 49
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0 or y == 0:\n        return False\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    return False\n",
        "num_ids": 44
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        print('True')\n    else:\n        print('False')\n",
        "num_ids": 27
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    #octagonal_numbers = []\n    if n == 0:\n        return 1\n    elif n < 2:\n        return 1\n    else:\n        octagonal_numbers = [1, 1, 3, 12, 10, 30, 35, \\\n        42, 55, 56, 65, 74, 85, 92, 101, 115, 134, 144]\n",
        "num_ids": 87
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    result = 0\n    while i <= n:\n        result = i*(3*i-1)//2\n        i += 1\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return ((n*(n+1))/2) \nprint(is_octagonal(1))\nprint(is_octagonal(7))\nprint(is_octagonal(11))\nprint(is_octagonal(10001))\nprint(\"--------------------------------------\")\n'''\nWhat does a programmer use when you define a function\nthat has a return statement?\n'''\n",
        "num_ids": 2
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        raise ValueError(\"N must be a positive integer.\")\n    else:\n        return n*(n + 1)/2\n",
        "num_ids": 37
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (1 + sqrt(1 + 8*n))/2\n",
        "num_ids": 19
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n*(3*n-1))//2\n",
        "num_ids": 17
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    n = n*3 + 1\n    return n\n",
        "num_ids": 15
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1: \n        return 8\n    elif n == 2:\n        return 7\n    elif n == 3:\n        return 6\n    else:\n        for i in range(2, n+1):\n            nth = (8*i - 1)/3\n            if nth.is_integer():\n                return nth\n            else:\n                pass\n    return -1\n",
        "num_ids": 95
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    n = n * 2 - 1\n    return int(n * ((n + 1) / 2))\n    \nprint(is_octagonal(1)) # Should be 1\nprint(is_octagonal(8)) # Should be 27\nprint(is_octagonal(100)) # Should be 267\n",
        "num_ids": 70
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n * (3*n - 1)) // 2\n",
        "num_ids": 17
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    for i in range(0,len(s)):\n        for j in range(i+1,len(s)+1):\n            count+=1\n    print(count)\n",
        "num_ids": 49
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    ans = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if (sum(s[i:j+1])==len(s[i:j+1])):\n                ans+=1\n    return ans\n",
        "num_ids": 68
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # ans = 0\n    # for i in range(1, len(s)+1):\n    #     if(len(s) % i == 0):\n    #         ans += math.factorial(len(s)//i)\n    #         break\n    # return ans\n    return len([substring for substring in s.split() if len(substring) == len(set(substring))])\n",
        "num_ids": 97
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #dict to store the number of subs with the required sum\n    sub_dict = defaultdict(int)\n",
        "num_ids": 27
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    dict = defaultdict(lambda:0)\n    #print(dict)\n    for i in range(len(s)):\n        #print(i,s[i],s[i+1])\n        dict[i] += 1\n        #print(dict)\n        for j in range(i+1,len(s)):\n            if(int(s[i]+s[j]) == len(s)):\n                dict[j] += 1\n    return dict\n    #print(dict)\n",
        "num_ids": 119
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    total_substrings = 0\n    for i in range(len(s)):\n        for j in range(len(s), i, -1):\n            if sum(map(int, s[i:j])) == j - i:\n                total_substrings += 1\n    return total_substrings\n",
        "num_ids": 74
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    res = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            temp = s[i:j]\n            if len(temp) == len(set(temp)):\n                res += 1\n    return res\n",
        "num_ids": 70
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # code here\n    d={}\n    s=list(s)\n    for i in range(len(s)):\n        temp_substr=s[:i]\n        temp_substr_sum=0\n        for j in range(i,len(s)):\n            temp_substr_sum+=s[j]\n            if temp_substr_sum in d.keys():\n                d[temp_substr_sum]+=1\n            else:\n                d[temp_substr_sum]=1\n            temp_substr=temp_substr[1:]\n    \n    ans=0\n    for i in d.values():\n        ans+=i\n    return ans\n",
        "num_ids": 163
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    print(defaultdict(int))\n    for i in range(len(s)):\n        print(i)\n        for j in range(i+1,len(s)+1):\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:j])\n            print(s[i:",
        "num_ids": 2003
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    total = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            if(s[i:j] == s[i:j][::-1]):\n                total = total + 1\n    return total\n",
        "num_ids": 69
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    \n    if len(xs)==0:\n        raise ValueError\n    else:\n        min_num=xs[0]\n        for i in range(1,len(xs)):\n            if xs[i]<min_num:\n                min_num=xs[i]\n        return min_num\n            \n",
        "num_ids": 78
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = None\n    for num in xs:\n        if smallest == None or num < smallest:\n            smallest = num\n    return smallest\n",
        "num_ids": 37
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_number = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest_number:\n            smallest_number = xs[i]\n    return smallest_number\n",
        "num_ids": 59
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    mini = xs[0]\n    for x in xs:\n        if x < mini:\n            mini = x\n    return mini\n",
        "num_ids": 35
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest\nprint(smallest_num([6,6,7,2,7,1,3,5]))\n",
        "num_ids": 76
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n",
        "num_ids": 37
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # first create a variable to hold the smallest value\n    min_val = float('inf')\n    # loop over the list and check if the current value is smaller than\n    # the min value variable\n    for x in xs:\n        if x < min_val:\n            min_val = x\n    # return the value of min_val\n    return min_val\n",
        "num_ids": 87
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = xs[0]\n    for i in range(len(xs)):\n        if(xs[i] < min_num):\n            min_num = xs[i]\n    return min_num\n",
        "num_ids": 55
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n",
        "num_ids": 37
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n",
        "num_ids": 37
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Your code here\n",
        "num_ids": 8
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max = -1\n    max_list = []\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            diff = test_list[i] - test_list[j]\n            if diff > max:\n                max = diff\n                max_list = (test_list[i], test_list[j])\n    return max, max_list\n",
        "num_ids": 104
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = -1\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            diff = test_list[i] - test_list[j]\n            if max_diff < diff:\n                max_diff = diff\n    return max_diff\n",
        "num_ids": 81
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Replace pass above with your code\n    result = 0\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i]-test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "num_ids": 96
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    maximum = -9999999999999\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if abs(test_list[i] - test_list[j]) > maximum:\n                maximum = abs(test_list[i] - test_list[j])\n    return maximum\n    \n",
        "num_ids": 89
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return None\n    temp_list = []\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] - test_list[j] not in temp_list:\n                temp_list.append(test_list[i] - test_list[j])\n    return max(temp_list)\n",
        "num_ids": 110
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return 0\n    else:\n        max_diff = test_list[0] - test_list[1]\n        for i in range(len(test_list) - 1):\n            if max_diff < test_list[i+1] - test_list[i]:\n                max_diff = test_list[i+1] - test_list[i]\n    return max_diff\n",
        "num_ids": 106
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if test_list == None or test_list == []:\n        return 0\n    new_list = sorted(test_list)\n    final_list = []\n    count = 0\n    for i in range(len(new_list)):\n        if i == 0:\n            final_list.append(new_list[i+1] - new_list[i])\n        elif i == len(new_list)-1:\n            final_list.append(new_list[i] - new_list[i-1])\n        else:\n            final_list.append(new_list[i+1] - new_list[i-1])\n    return max(final_list)\n",
        "num_ids": 164
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    maximum = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j]:\n                maximum = max(maximum,abs(test_list[i]-test_list[j]))\n    return maximum\n",
        "num_ids": 82
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # my_dict = {}\n    max_diff = -float('inf')\n    for i in range(0, len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "num_ids": 97
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    #print(subjectmarks)\n    for i in range(len(subjectmarks)):\n        for j in range(i+1,len(subjectmarks)):\n            if subjectmarks[i][1]>subjectmarks[j][1]:\n                temp = subjectmarks[i]\n                subjectmarks[i] = subjectmarks[j]\n                subjectmarks[j] = temp\n            elif subjectmarks[i][1]==subjectmarks[j][1]:\n                if subjectmarks[i][0]>subjectmarks[j][0]:\n                    temp = subjectmarks[i]\n                    subjectmarks[i] = subjectmarks[j]\n                    subjectmarks[j] = temp\n    #print(subjectmarks)\n    return subjectmarks\n",
        "num_ids": 170
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    print(sorted(subjectmarks,key=lambda x:x[1]))\n",
        "num_ids": 22
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda item: item[1])\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    def subject_sort(a):\n        return a[1]\n    return sorted(subjectmarks,key=subject_sort)\n",
        "num_ids": 32
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1])\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    list=[]\n    for i in range(len(subjectmarks)):\n        list.append((subjectmarks[i][1],subjectmarks[i][0]))\n    list.sort(reverse=True)\n    return list\n",
        "num_ids": 55
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    lst = []\n    for i in range(len(subjectmarks)):\n        lst.append((subjectmarks[i][0],subjectmarks[i][1]))\n    return sorted(lst,key=lambda i:i[1])\n    \n",
        "num_ids": 62
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    for i in range(len(subjectmarks)):\n        for j in range(i,len(subjectmarks)):\n            if subjectmarks[i][1]>subjectmarks[j][1]:\n                subjectmarks[i],subjectmarks[j]=subjectmarks[j],subjectmarks[i]\n    return(subjectmarks)\n",
        "num_ids": 77
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n",
        "num_ids": 23
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 67
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    if len(data_list) == 0:\n        return 0\n    if type(data_list[0]) == int or type(data_list[0]) == float:\n        return sum(data_list)\n    else:\n        for i in range(len(data_list)):\n            if type(data_list[i]) == int or type(data_list[i]) == float:\n                total += data_list[i]\n            else:\n                total += recursive_list_sum(data_list[i])\n        return total\n",
        "num_ids": 134
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 50
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    result = 0\n    \n    for item in data_list:\n        if isinstance(item, list):\n            result += recursive_list_sum(item)\n        else:\n            result += item\n            \n    return result\n",
        "num_ids": 57
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        raise TypeError(\"recursive_list_sum() only works with lists\")\n    elif len(data_list) == 0:\n        return 0\n    else:\n        return sum([recursive_list_sum(i) for i in data_list])\n",
        "num_ids": 75
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if type(data_list[0]) == int:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    else:\n        return recursive_list_sum(data_list[1:]) + data_list[0]\n    ",
        "num_ids": 83
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 84
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Task 0.1.1\n    # Your code goes here\n    # Your code should return the sum of the list\n    if type(data_list) == type([1, 2, 3, 4]):\n        return recursive_list_sum(data_list[:-1]) + data_list[-1]\n    else:\n        return data_list\n",
        "num_ids": 85
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # print(data_list)\n    # print(len(data_list))\n    total = 0\n    for i in data_list:\n        if isinstance(i, list):\n            total += recursive_list_sum(i)\n        else:\n            total += i\n    return total\n",
        "num_ids": 71
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if isinstance(data_list[0], int):\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 82
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    i = 0\n    for i in range(len(list)):\n        if list[i] >= 0:\n            i += 1\n    return i\n",
        "num_ids": 38
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    # pos = 0\n    # for i in list:\n    #     if i > 0:\n    #         pos += 1\n    # return pos\n",
        "num_ids": 37
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for element in list:\n        if element > 0:\n            count = count + 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in range(0,len(list)):\n        if list[i]>0:\n            count=count+1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count = count + 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(0,len(list)):\n        if list[i] > 0:\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for i in list:\n        if i >= 0:\n            pos += 1\n    return pos\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(0,len(list)):\n        if list[i]>0:\n            count+=1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for i in list:\n        if i > 0:\n            pos = pos + 1\n    return pos\n",
        "num_ids": 32
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n",
        "num_ids": 49
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        count += binomial_coefficient(i,n)\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    def get_ans(n, f, ans):\n        if n == 0:\n            ans = ans + 1\n        else:\n            for i in range(n+1):\n                if f[n] >= i:\n                    f[n] -= i\n                    get_ans(n-1, f, ans)\n                    f[n] += i\n    \n    f = [1]*(n+1)\n    get_ans(n, f, 0)\n    return ans\n",
        "num_ids": 117
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    from itertools import combinations\n    comb = combinations(range(1,n+1),2)\n    bell = []\n    for comb in comb:\n        bell.append(comb)\n    print(bell)\n    return len(bell)\n",
        "num_ids": 59
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    f = lambda x: 1 + f(x - 1) if x > 2 else 0\n    return f(n)\n",
        "num_ids": 30
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    ways = 0\n    for i in range(1, n + 1):\n        ways += int(binomial_coeff(i, n))\n    return ways\n",
        "num_ids": 51
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    ways = 0\n    \n    if n == 0:\n        return ways\n    if n < 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    \n    for i in range(2, n):\n        ways = ways + n - i\n        \n    return ways",
        "num_ids": 82
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize an empty array.\n    arr = []\n    # Take n.\n    n = n+1\n    # Loop from 1 to n.\n    for i in range(1,n):\n        # For each iteration, sum of the previous arrays is added to the current array.\n        arr.append(sum(arr))\n    # Return the number of partitions.\n    return arr\n",
        "num_ids": 91
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Base case\n    if n == 0: return 1\n    if n == 1: return 2\n    \n    # Memoization\n    def bell_number_memo(n, memo):\n        if n == 0: return 1\n        if n == 1: return 2\n        if memo[n] > 0: return memo[n]\n        memo[n] = bell_number_memo(n-1, memo) + bell_number_memo(n-2, memo)\n        return memo[n]\n",
        "num_ids": 122
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    from math import factorial\n    \n    #O(n) time | O(1) space\n    def bell_number_helper(n,memo):\n        if n == 0:\n            return 1\n        if memo[n]:\n            return memo[n]\n        memo[n] = bell_number_helper(n-1, memo) + bell_number_helper(n-2, memo)\n        return memo[n]\n    memo = [0]*(n+1)\n    return bell_number_helper(n,memo)\n",
        "num_ids": 136
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    from array import array\n    from collections import deque\n    A = array('i', A)\n    count = 0\n    q = deque()\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            count += 1\n        if count > 1:\n            return False\n        if A[i] > A[i-1]:\n            q.append(A[i])\n            while len(q) > 0 and q[-1] > A[i]:\n                q.pop()\n            if len(q) > 1:\n                count += 1\n    return count == 1\n",
        "num_ids": 152
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # first check if array is empty\n    if len(A) == 0:\n        return True\n    \n    # if array length is greater than 1\n    if len(A) > 1:\n        # sort the array and check if all elements are in increasing order\n        if A == sorted(A):\n            return True\n        else:\n            return False\n        \n    # if length is 1 and array is single element\n    if len(A) == 1:\n        return True\n    \n    # if length is 1 and array is empty\n    if len(A) == 0:\n        return True\n    \n    # if length is 1 and array is not empty\n    return False\n",
        "num_ids": 158
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n<2:\n        return True\n    else:\n        for i in range(0,n-1):\n            if (A[i]<A[i+1] and A[i]<A[i-1]):\n                return False\n            elif (A[i]>A[i+1] and A[i]>A[i-1]):\n                return False\n            else:\n                return True\n",
        "num_ids": 111
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return A == sorted(A) or A == sorted(A, reverse=True)\n",
        "num_ids": 22
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    l=len(A)\n    if l<=2:\n        return True\n    i=0\n    while i<l:\n        if A[i]<=A[i+1]:\n            i+=1\n        else:\n            return False\n    return True\n",
        "num_ids": 66
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    i = 0\n    j = len(A)-1\n    while (i < j):\n        while (i < j and A[i] >= A[i+1]):\n            i += 1\n        while (i < j and A[j] <= A[j-1]):\n            j -= 1\n        if (i < j):\n            return False\n    return True\nprint(is_Monotonic([1, 1, 1, 1]))\nprint(is_Monotonic([1, 1, 1, 1, 1, 1, 1]))\nprint(is_Monotonic([1, 2, 3, 4, 5, 4, 3, 2, 1]))\nprint(is_Monotonic([1, 3, 2, 1, 1]))\nprint(is_Monotonic([1, 2, 3, 3, 2, 1]))\nprint(is_Monotonic([1, 2, 3, 4, 5, 4, 3, 2, 1]))\nprint(is_Monotonic([1, 1, 1, 1, 1, 1, 1]))",
        "num_ids": 253
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)<=1: return 1\n    for i in range(len(A)):\n        if A[i-1]<A[i]: return 0\n    return 1\n",
        "num_ids": 47
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if (len(A) < 3): \n        return False\n    for i in range(len(A)-1): \n        if (A[i] < A[i+1]): \n            return False\n    return True\n",
        "num_ids": 57
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    A.sort()\n    i=1\n    while i<len(A):\n        if A[i]<A[i-1]:\n            return False\n        i+=1\n    return True\n        \n",
        "num_ids": 51
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 3: \n        return False\n    \n    increasing = True \n    decreasing = True \n    \n    for i in range(len(A)-1): \n        if A[i] > A[i+1]: \n            increasing = False \n        elif A[i] < A[i+1]: \n            decreasing = False \n    \n    return (increasing or decreasing) \n",
        "num_ids": 105
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    \n    # 1. Initialize the sublist_length variable to 0.\n    sublist_length = 0\n    # 2. Initialize the sublist_index variable to 0.\n    sublist_index = 0\n    # 3. Loop through each element in the given list.\n    for i in range(len(l)):\n        # 4. If the current element matches the sublist starting from the sublist_index then increment the sublist_length variable.\n        if l[i] == s[sublist_index]:\n            sublist_length += 1\n        # 5. If the current element is not the sublist start then reset the sublist_length to 0 and move the sublist_index to the next index.\n        else:\n            sublist_length = 0\n            sublist_index += 1\n        # 6. If the current sublist_length is equal to the length of the sublist then return True.\n        if sublist_length == len(s):\n            return True\n    # 7. If the current sublist_length is not equal to the length of the sublist then return False.\n    return False\n    \n    \ndef list_intersection(l1, l2):\n    '''\n    Write a function to find the intersection of two lists.\n    '''\n    # 1. Initialize the list intersection variable to empty list.\n    intersection_list = []\n    # 2. Iterate through each element in l1.\n    for elem in l1:\n        # 3. If the element is present in l2 then add that element to the intersection_list variable.\n        if elem in l2:\n            intersection_list.append(elem)\n            l2.remove(elem)\n    # 4. Return the intersection_list.\n    return intersection_list\n    \n    \ndef is_anagram(s1, s2):\n    '''\n    Write a function to check whether two strings are anagrams or not.\n    '''\n    # 1. Initialize the anagram_check variable to False.\n    anagram_check = False\n    # 2. Initialize a dictionary to store the frequency of each character in s1.\n    char_dict = {}\n    # 3. Loop through each character in the string s1.\n    for i in range(len(s1)):\n        # 4. If the character is not already present in the dictionary then add it to the dictionary and initialize the count to 1.\n        if s1[i] not in char_dict:\n            char_dict[s1[i]] = 1\n        # 5. Else if the character is already present in the dictionary then increment the count of that character by 1.\n        else:\n            char_dict[s1[i]] += 1\n    # 6. Loop through each character in the string s2.\n    for j in range(len(s2)):\n        # 7. If the character is not already present in the dictionary then increment the count of that character by 1.\n        if s2[j] not in char_dict:\n            char_dict[s2[j]] = 1\n        # 8. Else if the character is already present in the dictionary then increment the count of that character by 1.\n        else:\n            char_dict[s2[j]] += 1\n    # 9. If the dictionary is not empty then the length of dictionary will be equal to the length of s1 and s2.\n    if len(char_dict) == len(s1) + len(s2):\n        # 10. Create a set to store the characters in s1 and s2.\n        char_set = set(s1) | set(s2)\n        # 11. Loop through each character in the set.\n        for k in char_set:\n            # 12. If the character is present in the dictionary and the count of that character in the dictionary is equal to the number of characters in s1 and s2 then add it to the anagram_check variable.\n            if k in char_dict and char_dict[k] == len(s1) + len(s2):\n                anagram_check = True\n    # 13. If the dictionary is not empty then there is an anagram.\n    return anagram_check\n    \n    \ndef is_rotated(l, k):\n    '''\n    Write a function to check whether the given list is rotated or not.\n    '''\n    # 1. Initialize the rotation variable to False.\n    rotation = False\n    # 2. Initialize the start variable to the head of the given list.\n    start = 0\n    # 3. Loop through each element in the given list.\n    for i in range(len(l)):\n        # 4. If the element is greater than the element at the current index then increment the start variable.\n        if l[start] > l[i]:\n            start += 1\n        # 5. If the element is smaller than the element at the current index then decrement the start variable.\n        elif l[start] < l[i]:\n            start -= 1\n        # 6. If the start variable and the index are equal to each other then the list is rotated.\n        if start == i:\n            rotation = True\n            break\n    # 7. Return the rotation variable.\n    return rotation\n    \n    \ndef find_sum_of_two_list_elements(l1, l2):\n    '''\n    Write a function to find the sum of the two list elements.\n    '''\n    # 1. Initialize the sum_list variable to 0.\n    sum_list = 0\n    # 2. Loop through each element in l1.\n    for i in range(len(l1)):\n        # 3. If the element is not in the list l2 then add it to the sum_list variable.\n        if l1[i] not in l2:\n            sum_list += l1[i]\n    # 4. Return the sum_list.\n    return sum_list\n    \n    \ndef find_sublist_starting_at_index_i(l, i):\n    '''\n    Write a function to find the sublist starting at the given index.\n    '''\n    # 1. Initialize the start variable to 0.\n    start = 0\n    # 2. Initialize the sublist variable to an empty list.\n    sublist = []\n    # 3. Loop through each element in the list.\n    for i in range(len(l)):\n        # 4. If the current element at the current index is greater than or equal to the element at the start then increment the start variable and move the sublist to the next element.\n        if l[i] >= l[start]:\n            start += 1\n        # 5. If the current element at the current index is less than or equal to the element at the start then append the current element to the sublist.\n        elif l[i] <= l[start]:\n            sublist.append(l[i])\n    # 6. Return the sublist.\n    return sublist\n    \n    \ndef find_sublist_ending_at_index_i(l, i):\n    '''\n    Write a function to find the sublist ending at the given index.\n    '''\n    # 1. Initialize the end variable to the length of the list.\n    end = len(l)\n    # 2. Initialize the sublist variable to an empty list.\n    sublist = []\n    # 3. Loop through each element in the list.\n    for i in range(len(l)):\n        # 4. If the current element at the current index is less than or equal to the element at the end then append the current element to the sublist.\n        if l[i] <= l[end-1]:\n            sublist.append(l[i])\n        # 5. If the current element at the current index is greater than or equal to the element at the end then increment the end variable and move the sublist to the next element.\n        elif l[i] >= l[end-1]:\n            end -= 1\n            sublist = []\n    # 6. Return the sublist.\n    return sublist\n    \n    \ndef get_even_fibonacci_numbers(n):\n    '''\n    Write a function to get the even fibonacci numbers up to the given integer n.\n    '''\n    # 1. Initialize a list to store the even fibonacci numbers.\n    even_fibonacci_list = []\n    # 2. Initialize the count variable to 0.\n    count = 0\n    # 3. Initialize the first and second fibonacci number to 0 and 1.\n    first_fib = 0\n    second_fib = 1\n    # 4. Loop until the count is equal t",
        "num_ids": 97
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Edge cases:\n    # 1. l = [1, 2, 3, 4, 5]\n    # 2. l = []\n    # 3. l = None\n    if l == None or s == None:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    n = len(l)\n    m = len(s)\n",
        "num_ids": 18
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) == 0 or len(s) == 0:\n        return False\n    \n    if len(s) > len(l):\n        return False\n    \n    if s == l:\n        return True\n    \n    for i in range(len(l)):\n        if s[0]!= l[i]:\n            continue\n        else:\n            if len(s) > 1:\n                return is_sublist(l[i+1:], s[1:])\n            else:\n                return True\n",
        "num_ids": 126
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # return False if no sublist is given\n    if not s:\n        return False\n    # return True if sublist is at start of list\n    if s == l[:len(s)]:\n        return True\n    # return True if sublist is at end of list\n    if s == l[-len(s):]:\n        return True\n    # if sublist is at anywhere else, return True\n    if l[i:i+len(s)] == s:\n        return True\n    # if no sublist is found, return False\n    return False\n",
        "num_ids": 132
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Create a new list \n    new_list = [] \n    # Iterate over all the elements of list \n    for i in l: \n        # Check if any of the elements of sublist is present in the given list \n        if any(item in s for item in i): \n            # If any element of sublist is present, add that \n            # sublist to the new list. \n            new_list.append(i) \n    # Return True if sublist is present in the list otherwise False \n    return (len(new_list) > 0) \n",
        "num_ids": 138
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    i = 0\n    j = 0\n    while i < len(l):\n        if l[i] == s[j]:\n            j += 1\n        i += 1\n    return j == len(s)\n",
        "num_ids": 52
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    is_in = False\n    for elem in l:\n        if elem == s[0]:\n            is_in = True\n    return is_in\n",
        "num_ids": 40
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Your code here\n    return s in l\n    \ndef is_sublist2(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Your code here\n    return s in l\n    \n",
        "num_ids": 16
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) == 0:\n        return False\n    elif len(l) == 1:\n        if l[0] == s:\n            return True\n        else:\n            return False\n    else:\n        if l[0] == s:\n            return True\n        else:\n            if len(s) > len(l):\n                return False\n            else:\n                if len(s) == len(l):\n                    if len(s) == len(l) - 1:\n                        if s[0] == l[0]:\n                            return True\n                        else:\n                            return False\n                    else:\n                        if s[0] == l[0] and s[1] == l[1]:\n                            return True\n                        else:\n                            return False\n                else:\n                    return False\n",
        "num_ids": 188
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    l = []\n    for i in Input:\n        if len(i) not in l:\n            l.append(len(i))\n    if len(l)==1:\n        print('Equal')\n    else:\n        print('Not Equal')\n",
        "num_ids": 63
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Input = sorted(Input)\n    if len(Input) > 1:\n        while Input:\n            if len(Input[0])!= len(Input[1]):\n                return False\n            else:\n                Input = Input[1:]\n    return True\n    \ndef find_common_tuple(Input):\n    '''\n    Write a function to find the common elements from given two lists.\n    '''\n    Input = sorted(Input)\n    if len(Input) > 1:\n        while Input:\n            if Input[0] in Input[1]:\n                Input = Input[1:]\n            else:\n                return Input[0]\n    else:\n        return Input[0]\n    \ndef find_contiguous_array(Input):\n    '''\n    Write a function to find the contiguous subarray within an array, which has the largest sum.\n    '''\n    Input = sorted(Input)\n    if len(Input) > 1:\n        while Input:\n            if Input[0] + Input[1] > Input[2]:\n                Input = Input[2:]\n            else:\n                Input = Input[1:]\n    return Input[0]\n",
        "num_ids": 69
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set([len(x) for x in Input])) > 1:\n        return False\n    else:\n        return True\n",
        "num_ids": 34
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for a,b in Input:\n        if len(a)!= len(b):\n            return False\n    return True\n",
        "num_ids": 31
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!=len(Input[0]):\n            return 0\n    return 1\n",
        "num_ids": 40
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return True\n",
        "num_ids": 6
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    def _check(Input):\n        if len(Input) == 1:\n            return True\n        if len(Input[0])!= len(Input[1]):\n            return False\n        else:\n            return _check(Input[0:len(Input)-1])\n    return _check(Input)\n",
        "num_ids": 74
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return False\n    for i in range(0,len(Input)):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True\n",
        "num_ids": 58
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[i-1]):\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(i):\n            if nums[j] > nums[i]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n",
        "num_ids": 66
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pivots = set()\n",
        "num_ids": 10
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    l = len(nums)\n    if l <= 1:\n        return nums\n    \n    gap = l\n    while gap > 1:\n        gap = gap // 2\n        for i in range(gap, l):\n            for j in range(i, l - gap, gap):\n                if nums[j - gap] > nums[j]:\n                    nums[j - gap], nums[j] = nums[j], nums[j - gap]\n    return nums\n",
        "num_ids": 118
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    assert nums is not None\n    assert len(nums) > 0\n    n = len(nums)\n    k = 1\n    while k <= n:\n        j = k\n        while j > 0 and nums[j-1] > nums[j]:\n            nums[j-1], nums[j] = nums[j], nums[j-1]\n            j -= 1\n        k = j + 1\n",
        "num_ids": 105
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # not sorted elements\n    not_sorted = True\n    # the smallest element\n    smallest = nums[0]\n    # the biggest element\n    largest = nums[n-1]\n",
        "num_ids": 58
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    mid = len(nums) // 2\n    L = nums[:mid]\n    R = nums[mid:]\n    L = comb_sort(L)\n    R = comb_sort(R)\n    L.append(float('inf'))\n    R.append(float('inf'))\n    res = []\n    i, j = 0, 0\n    while i < len(L) and j < len(R):\n        if L[i] <= R[j]:\n            res.append(L[i])\n            i += 1\n        else:\n            res.append(R[j])\n            j += 1\n    res += L[i:]\n    res += R[j:]\n    return res\n",
        "num_ids": 186
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return nums\n",
        "num_ids": 33
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n",
        "num_ids": 18
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #algorithm:\n    #   if the list is empty, then return\n    #   otherwise,\n    #   perform a comparison,\n    #   if the item at the first position is less than the item at the last position,\n    #   move the element at the first position to the end,\n    #   then compare the element at the first position with the element at the second position,\n    #   move the element at the first position to the end if the item at the first position is less than the item at the second position\n    #   and so on...\n    #   continue until the list is sorted\n    \n    #brute force algorithm:\n    for j in range(len(nums) - 1):\n        for i in range(len(nums) - 1):\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n    \n    #segment tree:\n    #   if the list is empty, then return\n    #   otherwise,\n    #   perform a comparison,\n    #   if the item at the first position is less than the item at the last position,\n    #   move the element at the first position to the end,\n    #   then compare the element at the first position with the element at the second position,\n    #   move the element at the first position to the end if the item at the first position is less than the item at the second position\n    #   and so on...\n    #   continue until the list is sorted\n    \n    \n    #binary search tree\n    #   if the list is empty, then return\n    #   otherwise,\n    #   perform a comparison,\n    #   if the item at the first position is less than the item at the last position,\n    #   move the element at the first position to the end,\n    #   then compare the element at the first position with the element at the second position,\n    #   move the element at the first position to the end if the item at the first position is less than the item at the second position\n    #   and so on...\n    #   continue until the list is sorted\n    \n    \n    #quick sort\n    #   if the list is empty, then return\n    #   otherwise,\n    #   perform a comparison,\n    #   if the item at the first position is less than the item at the last position,\n    #   move the element at the first position to the end,\n    #   then compare the element at the first position with the element at the second position,\n    #   move the element at the first position to the end if the item at the first position is less than the item at the second position\n    #   and so on...\n    #   continue until the list is sorted\n    \n    \n    #merge sort\n    #   if the list is empty, then return\n    #   otherwise,\n    #   perform a comparison,\n    #   if the item at the first position is less than the item at the last position,\n    #   move the element at the first position to the end,\n    #   then compare the element at the first position with the element at the second position,\n    #   move the element at the first position to the end if the item at the first position is less than the item at the second position\n    #   and so on...\n    #   continue until the list is sorted\n    \n    \n    #quick sort\n    #   if the list is empty, then return\n    #   otherwise,\n    #   perform a comparison,\n    #   if the item at the first position is less than the item at the last position,\n    #   move the element at the first position to the end,\n    #   then compare the element at the first position with the element at the second position,\n    #   move the element at the first position to the end if the item at the first position is less than the item at the second position\n    #   and so on...\n    #   continue until the list is sorted\n    \n    \n    #merge sort\n    #   if the list is empty, then return\n    #   otherwise,\n    #   perform a comparison,\n    #   if the item at the first position is less than the item at the last position,\n    #   move the element at the first position to the end,\n    #   then compare the element at the first position with the element at the second position,\n    #   move the element at the first position to the end if the item at the first position is less than the item at the second position\n    #   and so on...\n    #   continue until the list is sorted\n    \n    \n    \n    \n    #print(nums)\n    #comb_sort(nums)\n    #print(nums)\n    #return nums\n    #return nums.sort()\n    #nums.sort(key=lambda x:x)\n    #return nums.sort(key=lambda x:x)\n    \n    \n    \n    #Quicksort:\n    #   if the list is empty, then return\n    #   otherwise,\n    #   perform a comparison,\n    #   if the item at the first position is less than the item at the last position,\n    #   move the element at the first position to the end,\n    #   then compare the element at the first position with the element at the second position,\n    #   move the element at the first position to the end if the item at the first position is less than the item at the second position\n    #   and so on...\n    #   continue until the list is sorted\n    \n    #index function:\n    #   find the rightmost position of a specified value in an unsorted list\n    #   returns the index of the rightmost position of the value in the list if the value is found, otherwise returns the index of the first element in the list that is greater than the value\n    \n    #algorithm:\n    #   if the list is empty, then return\n    #   otherwise,\n    #   perform a comparison,\n    #   if the item at the first position is less than the item at the last position,\n    #   move the element at the first position to the end,\n    #   then compare the element at the first position with the element at the second position,\n    #   move the element at the first position to the end if the item at the first position is less than the item at the second position\n    #   and so on...\n    #   continue until the list is sorted\n    \n    #brute force:\n    def qs(nums):\n        '''\n        Write a function to sort a list of elements.\n        '''\n        if len(nums) <= 1:\n            return nums\n        \n        #counts how many elements are smaller than the first element in the list\n        left = 0\n        right = len(nums) - 1\n        \n        \n        while left <= right:\n            #if the first element is greater than the second element, then move the right position to the right of the first element\n            if nums[left] > nums[right]:\n                nums[left], nums[right] = nums[right], nums[left]\n                left += 1\n                right -= 1\n            else:\n                #else move the left position to the right if the first element is smaller than the second element\n                left += 1\n        \n        return nums\n    \n    #segment tree:\n    #   if the list is empty, then return\n    #   otherwise,\n    #   perform a comparison,\n    #   if the item at the first position is less than the item at the last position,\n    #   move the element at the first position to the end,\n    #   then compare the element at the first position with the element at the second position,\n    #   move the element at the first position to the end if the item at the first position is less than the item at the second position\n    #   and so on...\n    #   continue until the list is sorted\n    \n    def qs(nums):\n        '''\n        Write a function to sort a list of elements.\n        '''\n        if len(nums) <= 1:\n            return nums\n        \n        #counts how many elements are smaller than the first element in the list\n        left = 0\n        right = len(nums) - 1\n        \n        \n        #while the left position is less than the right position\n        while left <= right:\n            #if the first element is greater than the second element, then move the right position to the right of the first element\n            if nums[left] > nums[right]:\n                nums[left], nums[right] = nums[right], num",
        "num_ids": 135
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(nums, i, j):\n        '''\n        Swap the elements at index i with j in nums.\n        '''\n        nums[i], nums[j] = nums[j], nums[i]\n",
        "num_ids": 25
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,n):\n        if(i**2==n):\n            return True\n    return False\n",
        "num_ids": 31
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    import math\n    x = n // 2\n    y = n // 2\n    if x*x==n:\n        return True\n    while y >=1:\n        if x*x==y:\n            return True\n        y -=1\n    return False\n",
        "num_ids": 62
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    x = int(math.sqrt(n))\n    if x*x == n:\n        return True\n    else:\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    import math\n    x = int(math.sqrt(n))\n    print(x)\n    y = n - x*x\n    print(y)\n    if x*x == n and x > 0 and y > 0:\n        print(True)\n    else:\n        print(False)\n",
        "num_ids": 73
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n%4 == 1:\n        return False\n    sq = sqrt(n)\n    # print(sq)\n    if sq - int(sq) == 0:\n        return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n):\n        if i*i==n:\n            return 1\n    return 0\n",
        "num_ids": 28
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    if n <= 0:\n        return False\n    if n == 1:\n        return True\n    \n    for i in range(1,n//2):\n        if i == 1 and n % 2!= 0:\n            return False\n        elif i > 1 and n % i!= 0:\n            return False\n        elif i > 1 and n % (i + i)!= 0:\n            return False\n        else:\n            return True\n",
        "num_ids": 108
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    square1 = 0\n    square2 = 0\n    if n < 0:\n        print(\"Sorry, negative numbers are not allowed.\")\n        return\n    while n:\n        n, r = divmod(n, 10)\n        square1 += r**2\n    if square1 == square2:\n        print(f\"Yes, {square1} is the difference of squares.\")\n    else:\n        print(f\"No, {square1} is not the difference of squares.\")\n",
        "num_ids": 112
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a = n*n\n    b = 0\n    for i in range(1,int(sqrt(a))+1):\n        if a%i==0:\n            b = a/i\n            if b == i:\n                return True\n            elif b == i+1:\n                return False\n            else:\n                pass\n    return False",
        "num_ids": 84
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a = (n - 1) / 2\n    b = (n + 1) / 2\n    if a == int(a) and int(b) == n - 1:\n        print('YES')\n    else:\n        print('NO')\n",
        "num_ids": 59
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return colors == [p[0] for p in patterns]\n",
        "num_ids": 17
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    m = len(patterns)\n    if m!= n:\n        return False\n    \n    for i in range(m):\n        if colors[i]!= patterns[i]:\n            return False\n    \n    return True\n",
        "num_ids": 66
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    #print('is_samepatterns', colors)\n    #print('is_samepatterns', patterns)\n    for p in patterns:\n        if not is_samepattern(colors, p):\n            return False\n    return True\n",
        "num_ids": 57
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if colors!= patterns[i]:\n            return False\n    return True\n",
        "num_ids": 33
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # check if each element in patterns is in colors\n    if any(p in colors for p in patterns):\n        return True\n    # else return False\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # If the array is empty, there is no pattern.\n    if len(patterns) == 0:\n        return True\n",
        "num_ids": 33
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(patterns)!= len(colors):\n        return False\n    for i in range(len(patterns)):\n        if i >= len(colors):\n            return False\n        if patterns[i]!= colors[i]:\n            return False\n    return True\n",
        "num_ids": 68
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if (len(colors)!= len(patterns)):\n        return False\n",
        "num_ids": 22
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    a = []\n    for i in range(len(test_list)):\n        if (test_list[i][0] % K) == 0 and (test_list[i][1] % K) == 0 and (test_list[i][2] % K) == 0:\n            a.append(test_list[i])\n    return a\n",
        "num_ids": 85
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    return [tuple(l) for l in list(set(map(lambda x: tuple([l for l in x if l % K == 0]), test_list))) if len(l) == len(test_list[0])]\n",
        "num_ids": 58
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j] % K!= 0:\n                break\n        else:\n            yield test_list[i]\n",
        "num_ids": 66
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in range(len(test_list)):\n        if test_list[i][0] % K!= 0 or test_list[i][1] % K!= 0:\n            return None\n    return test_list\n",
        "num_ids": 57
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] % K) == 0 and (test_list[j][0] % K) == 0 and (test_list[i][1] % K) == 0 and (test_list[j][1] % K) == 0:\n                return_list.append([test_list[i][0], test_list[j][0]])\n    return return_list\n",
        "num_ids": 135
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # count of numbers divisible by k in each tuple\n    count = 0\n    k_divisible_in_list = []\n",
        "num_ids": 32
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    count = 0\n    for tup in test_list:\n        for x in tup:\n            if x % K == 0:\n                count += 1\n    print(count)\n",
        "num_ids": 45
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i][0]%K==0 or test_list[j][0]%K==0 or test_list[i][1]%K==0 or test_list[j][1]%K==0:\n                print(test_list[i],test_list[j])\n",
        "num_ids": 105
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuple_list = []\n    tuple_list_final = []\n    for i in range(0, len(test_list)):\n        if test_list[i][0]%K == 0 and test_list[i][1]%K == 0:\n            tuple_list.append(test_list[i])\n    for i in range(0, len(tuple_list)):\n        for j in range(0, len(tuple_list)):\n            if tuple_list[i][0]!= tuple_list[j][1] and tuple_list[i][0]!= tuple_list[j][1] and tuple_list[i][1]!= tuple_list[j][0]:\n                if tuple_list[i][0] % tuple_list[j][0] == 0 or tuple_list[i][1] % tuple_list[j][1] == 0:\n                    tuple_list_final.append(tuple_list[i])\n    if len(tuple_list_final) == 0:\n        print('None')\n    else:\n        print(' '.join(map(str, tuple_list_final)))\n",
        "num_ids": 276
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    \n    '''\n    1. Create a dictionary where keys are element of test_list and values are index of that element.\n    2. Sort the dictionary and store the index in a list.\n    3. Now for each index i in list, make a list of tuples which have all elements divisible by k from the list\n    '''\n    \n    # Creating a dictionary\n    d = {}\n    for i, j in enumerate(test_list):\n        if j not in d:\n            d[j] = i\n",
        "num_ids": 45
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        print(f\"{n} is divisible by 11\")\n    else:\n        print(f\"{n} is not divisible by 11\")\n",
        "num_ids": 46
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return(n%11 == 0)\n",
        "num_ids": 12
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    else:\n        return False\n    ",
        "num_ids": 25
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \ndef is_Divisible(n): \n    '''\n    Write a python function to find whether a number is divisible by 11 or 22.\n    '''\n    return n % 11 == 0 or n % 22 == 0\n    \ndef is_Divisible_2(n): \n    '''\n    Write a python function to find whether a number is divisible by 11 or 22.\n    '''\n    return n % 11 == 0 or n % 22 == 0\n    \nprint(is_Divisible_2(11))\nprint(is_Divisible_2(22))\nprint(is_Divisible_2(11))\n",
        "num_ids": 54
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if(n%11 == 0):\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    print(n%11 == 0)\n    \n    \ndef is_DivisibleByAll(n):\n    '''\n    Write a python function to find whether a number is divisible by all its divisors.\n    '''\n    for i in range(1,n):\n        if n%i!= 0:\n            print(\"no\")\n            return\n        else:\n            print(\"yes\")\n            return\n    \n    \ndef is_Power_of_2(n):\n    '''\n    Write a python function to find whether a given number is a power of 2.\n    '''\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return is_Power_of_2(n/2)\n    else:\n        return False\n    \n    \ndef is_Is_Pair(n):\n    '''\n    Write a python function to find whether a given number is a pair.\n    '''\n    if n == 0 or n % 2 == 0:\n        return False\n    elif n % 2 == 1:\n        return True\n    else:\n        return is_Is_Pair(n/2)\n    \ndef is_Is_Pair_Left(n):\n    '''\n    Write a python function to find whether a given number is a pair of its left most digit.\n    '''\n    return n % 10 < n // 10 % 10\n",
        "num_ids": 14
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n",
        "num_ids": 10
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return not n % 11\n",
        "num_ids": 9
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n    \ndef is_Prime(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_Palindrome(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    x = n\n    y = 0\n    while x > 0:\n        y = y*10 + x%10\n        x = x//10\n    return n == y\n    \ndef is_Palindrome_2(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    y = 0\n    x = n\n    while x > 0:\n        y = y*10 + x%10\n        x = x//10\n    return n == y\n    \ndef is_Palindrome_3(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    x = n\n    y = 0\n    while x > 0:\n        y = y*10 + x%10\n        x = x//10\n    return n == y\n    \ndef is_Palindrome_4(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    x = n\n    y = 0\n    while x > 0:\n        y = y*10 + x%10\n        x = x//10\n    return y == n\n    \ndef is_Palindrome_5(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    x = n\n    y = 0\n    while x > 0:\n        y = y*10 + x%10\n        x = x//10\n    return y == n\n    \ndef is_Palindrome_6(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    x = n\n    y = 0\n    while x > 0:\n        y = y*10 + x%10\n        x = x//10\n    return n == y\n    \ndef is_Palindrome_7(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    x = n\n    y = 0\n    while x > 0:\n        y = y*10 + x%10\n        x = x//10\n    return y == n\n    \ndef is_Palindrome_8(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    x = n\n    y = 0\n    while x > 0:\n        y = y*10 + x%10\n        x = x//10\n    return y == n\n    \ndef is_Palindrome_9(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    x = n\n    y = 0\n    while x > 0:\n        y = y*10 + x%10\n        x = x//10\n    return y == n\n    \ndef is_Palindrome_10(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    x = n\n    y = 0\n    while x > 0:\n        y = y*10 + x%10\n        x = x//10\n    return y == n\n    \ndef is_Palindrome_11(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    x = n\n    y = 0\n    while x > 0:\n        y = y*10 + x%10\n        x = x//10\n    return y == n\n    \ndef is_Palindrome_12(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    x = n\n    y = 0\n    while x > 0:\n        y = y*10 + x%10\n        x = x//10\n    return y == n\n    \ndef is_Palindrome_13(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    x = n\n    y = 0\n    while x > 0:\n        y = y*10 + x%10\n        x = x//10\n    return y == n\n    \ndef is_Palindrome_14(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    x = n\n    y = 0\n    while x > 0:\n        y = y*10 + x%10\n        x = x//10\n    return y == n\n    \ndef is_Palindrome_15(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    x = n\n    y = 0\n    while x > 0:\n        y = y*10 + x%10\n        x = x//10\n    return y == n\n    \ndef is_Palindrome_16(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    x = n\n    y = 0\n    while x > 0:\n        y = y*10 + x%10\n        x = x//10\n    return y == n\n    \ndef is_Palindrome_17(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    x = n\n    y = 0\n    while x > 0:\n        y = y*10 + x%10\n        x = x//10\n    return y == n\n    \ndef is_Palindrome_18(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    x = n\n    y = 0\n    while x > 0:\n        y = y*10 + x%10\n        x = x//10\n    return y == n\n    \ndef is_Palindrome_19(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    x = n\n    y = 0\n    while x > 0:\n        y = y*10 + x%10\n        x = x//10\n    return y == n\n    \ndef is_Palindrome_20(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    x = n\n    y = 0\n    while x > 0:\n        y = y*10 + x%10\n        x = x//10\n    return y == n\n    \ndef is_Palindrome_21(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    x = n\n    y = 0\n    while x > 0:\n        y = y*10 + x%10\n        x = x//10\n    return y == n\n    \ndef is_Palindrome_22(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    x = n\n    y = 0\n    while x > 0:\n        y = y*10 + x%10\n        x = x//10\n    return y == n\n    \ndef is_Palindrome_23(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    x = n\n    y = 0\n    while x > 0:\n        y = y*10 + x%10\n        x = x//10\n    return y == n\n    \ndef is_Palindrome_24(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    x = n\n    y = 0\n    while x > 0:",
        "num_ids": 18
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n % 11 == 0)\n",
        "num_ids": 12
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print('The length of the word is even')\n    else:\n        print('The length of the word is odd')\n",
        "num_ids": 42
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        return True\n    return False\n",
        "num_ids": 22
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0: \n        return \"Yes\" \n    else: \n        return \"No\" \n",
        "num_ids": 35
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = str(s)\n    if len(s) % 2 == 0:\n        print('True')\n    else:\n        print('False')\n",
        "num_ids": 38
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    \n    return len(s) % 2!= 0\n",
        "num_ids": 16
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    #code here\n    s=s.lower()\n    return len(s)%2==0\n    ",
        "num_ids": 27
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==1\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0: \n        return True\n    else: \n        return False\n",
        "num_ids": 29
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0: \n        print(\"Word length should be odd\") \n    else: \n        print(\"Word length is even\")\n    \n    \ndef even_odd(n): \n    '''\n    Write a python function to check whether the number is even or odd.\n    '''\n    if n % 2 == 0: \n        print(\"The number is even\") \n    else: \n        print(\"The number is odd\") \n        \ndef even_odd_1(n): \n    '''\n    Write a python function to check whether the number is even or odd.\n    '''\n    if n % 2 == 0: \n        print(\"The number is even\") \n    else: \n        print(\"The number is odd\") \n        \ndef word_len_1(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0: \n        print(\"Word length should be odd\") \n    else: \n        print(\"Word length is even\")\n    \ndef even_odd_2(n): \n    '''\n    Write a python function to check whether the number is even or odd.\n    '''\n    if n % 2 == 0: \n        print(\"The number is even\") \n    else: \n        print(\"The number is odd\") \n        \ndef even_odd_3(n): \n    '''\n    Write a python function to check whether the number is even or odd.\n    '''\n    if n % 2!= 0: \n        print(\"The number is even\") \n    else: \n        print(\"The number is odd\") \n        \ndef even_odd_4(n): \n    '''\n    Write a python function to check whether the number is even or odd.\n    '''\n    if n % 2 == 0: \n        print(\"The number is even\") \n    else: \n        print(\"The number is odd\") \n    \ndef word_len_2(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0: \n        print(\"Word length should be odd\") \n    else: \n        print(\"Word length is even\")\n    \ndef even_odd_5(n): \n    '''\n    Write a python function to check whether the number is even or odd.\n    '''\n    if n % 2 == 0: \n        print(\"The number is even\") \n    else: \n        print(\"The number is odd\") \n    \ndef even_odd_6(n): \n    '''\n    Write a python function to check whether the number is even or odd.\n    '''\n    if n % 2!= 0: \n        print(\"The number is even\") \n    else: \n        print(\"The number is odd\") \n        \ndef even_odd_7(n): \n    '''\n    Write a python function to check whether the number is even or odd.\n    '''\n    if n % 2 == 0: \n        print(\"The number is even\") \n    else: \n        print(\"The number is odd\") \n    \ndef even_odd_8(n): \n    '''\n    Write a python function to check whether the number is even or odd.\n    '''\n    if n % 2!= 0: \n        print(\"The number is even\") \n    else: \n        print(\"The number is odd\") \n        \ndef word_len_3(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0: \n        print(\"Word length should be odd\") \n    else: \n        print(\"Word length is even\")\n    \ndef even_odd_9(n): \n    '''\n    Write a python function to check whether the number is even or odd.\n    '''\n    if n % 2 == 0: \n        print(\"The number is even\") \n    else: \n        print(\"The number is odd\") \n    \ndef even_odd_10(n): \n    '''\n    Write a python function to check whether the number is even or odd.\n    '''\n    if n % 2!= 0: \n        print(\"The number is even\") \n    else: \n        print(\"The number is odd\") \n        \ndef even_odd_11(n): \n    '''\n    Write a python function to check whether the number is even or odd.\n    '''\n    if n % 2 == 0: \n        print(\"The number is even\") \n    else: \n        print(\"The number is odd\") \n    \ndef even_odd_12(n): \n    '''\n    Write a python function to check whether the number is even or odd.\n    '''\n    if n % 2!= 0: \n        print(\"The number is even\") \n    else: \n        print(\"The number is odd\") \n        \ndef word_len_4(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0: \n        print(\"Word length should be odd\") \n    else: \n        print(\"Word length is even\")\n    \ndef even_odd_13(n): \n    '''\n    Write a python function to check whether the number is even or odd.\n    '''\n    if n % 2 == 0: \n        print(\"The number is even\") \n    else: \n        print(\"The number is odd\") \n    \ndef even_odd_14(n): \n    '''\n    Write a python function to check whether the number is even or odd.\n    '''\n    if n % 2!= 0: \n        print(\"The number is even\") \n    else: \n        print(\"The number is odd\") \n        \ndef even_odd_15(n): \n    '''\n    Write a python function to check whether the number is even or odd.\n    '''\n    if n % 2 == 0: \n        print(\"The number is even\") \n    else: \n        print(\"The number is odd\") \n    \ndef even_odd_16(n): \n    '''\n    Write a python function to check whether the number is even or odd.\n    '''\n    if n % 2!= 0: \n        print(\"The number is even\") \n    else: \n        print(\"The number is odd\") \n        \ndef word_len_5(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0: \n        print(\"Word length should be odd\") \n    else: \n        print(\"Word length is even\")\n    \ndef even_odd_17(n): \n    '''\n    Write a python function to check whether the number is even or odd.\n    '''\n    if n % 2 == 0: \n        print(\"The number is even\") \n    else: \n        print(\"The number is odd\") \n    \ndef even_odd_18(n): \n    '''\n    Write a python function to check whether the number is even or odd.\n    '''\n    if n % 2!= 0: \n        print(\"The number is even\") \n    else: \n        print(\"The number is odd\") \n        \ndef even_odd_19(n): \n    '''\n    Write a python function to check whether the number is even or odd.\n    '''\n    if n % 2 == 0: \n        print(\"The number is even\") \n    else: \n        print(\"The number is odd\") \n    \ndef even_odd_20(n): \n    '''\n    Write a python function to check whether the number is even or odd.\n    '''\n    if n % 2!= 0: \n        print(\"The number is even\") \n    else: \n        print(\"The number is odd\") \n        \ndef word_len_6(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0: \n        print(\"Word length should be odd\") \n    else: \n        print(",
        "num_ids": 35
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1: \n        return 4 \n    else: \n        return 4*tetrahedral_number(n-1) + 1 \n",
        "num_ids": 39
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return sum(i**3 for i in range(1, n + 1))\n",
        "num_ids": 21
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    n = int(n)\n    if n == 1:\n        return 4\n    else:\n        return 4 * ((n - 1) // 3) + 4 * n % 3\n",
        "num_ids": 44
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = (1 + 8*n) * n\n    return t\n",
        "num_ids": 19
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    i = 0\n    total = 0\n    while i < n:\n        total += i\n        i += 1\n    print(total)\n",
        "num_ids": 35
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        count += i\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    n = int(n)\n    if n == 1:\n        return 4\n    elif n == 2:\n        return 8\n    elif n == 3:\n        return 14\n    elif n == 4:\n        return 20\n    elif n == 5:\n        return 28\n    elif n == 6:\n        return 36\n    elif n == 7:\n        return 44\n    elif n == 8:\n        return 52\n    elif n == 9:\n        return 60\n    elif n == 10:\n        return 68\n    elif n == 11:\n        return 76\n    elif n == 12:\n        return 84\n    elif n == 13:\n        return 92\n    elif n == 14:\n        return 100\n    elif n == 15:\n        return 108\n    elif n == 16:\n        return 116\n    elif n == 17:\n        return 124\n    elif n == 18:\n        return 132\n    elif n == 19:\n        return 140\n    elif n == 20:\n        return 148\n    elif n == 21:\n        return 156\n    elif n == 22:\n        return 164\n    elif n == 23:\n        return 172\n    elif n == 24:\n        return 180\n    elif n == 25:\n        return 188\n    elif n == 26:\n        return 196\n    elif n == 27:\n        return 204\n    elif n == 28:\n        return 212\n    elif n == 29:\n        return 220\n    elif n == 30:\n        return 228\n    elif n == 31:\n        return 236\n    elif n == 32:\n        return 244\n    elif n == 33:\n        return 252\n    elif n == 34:\n        return 260\n    elif n == 35:\n        return 268\n    elif n == 36:\n        return 276\n    elif n == 37:\n        return 284\n    elif n == 38:\n        return 292\n    elif n == 39:\n        return 300\n    elif n == 40:\n        return 308\n    elif n == 41:\n        return 316\n    elif n == 42:\n        return 324\n    elif n == 43:\n        return 332\n    elif n == 44:\n        return 340\n    elif n == 45:\n        return 348\n    elif n == 46:\n        return 356\n    elif n == 47:\n        return 364\n    elif n == 48:\n        return 372\n    elif n == 49:\n        return 380\n    elif n == 50:\n        return 388\n    elif n == 51:\n        return 396\n    elif n == 52:\n        return 404\n    elif n == 53:\n        return 412\n    elif n == 54:\n        return 420\n    elif n == 55:\n        return 428\n    elif n == 56:\n        return 436\n    elif n == 57:\n        return 444\n    elif n == 58:\n        return 352\n    elif n == 59:\n        return 360\n    elif n == 60:\n        return 368\n    elif n == 61:\n        return 376\n    elif n == 62:\n        return 384\n    elif n == 63:\n        return 392\n    elif n == 64:\n        return 400\n    elif n == 65:\n        return 408\n    elif n == 66:\n        return 416\n    elif n == 67:\n        return 424\n    elif n == 68:\n        return 432\n    elif n == 69:\n        return 440\n    elif n == 70:\n        return 448\n    elif n == 71:\n        return 456\n    elif n == 72:\n        return 464\n    elif n == 73:\n        return 472\n    elif n == 74:\n        return 480\n    elif n == 75:\n        return 488\n    elif n == 76:\n        return 496\n    elif n == 77:\n        return 504\n    elif n == 78:\n        return 512\n    elif n == 79:\n        return 520\n    elif n == 80:\n        return 528\n    elif n == 81:\n        return 536\n    elif n == 82:\n        return 544\n    elif n == 83:\n        return 552\n    elif n == 84:\n        return 560\n    elif n == 85:\n        return 568\n    elif n == 86:\n        return 576\n    elif n == 87:\n        return584\n    elif n == 88:\n        return592\n    elif n == 89:\n        return600\n    elif n == 90:\n        return608\n    elif n == 91:\n        return616\n    elif n == 92:\n        return624\n    elif n == 93:\n        return632\n    elif n == 94:\n        return640\n    elif n == 95:\n        return648\n    elif n == 96:\n        return656\n    elif n == 97:\n        return664\n    elif n == 98:\n        return672\n    elif n == 99:\n        return680\n    elif n == 100:\n        return688\n    elif n == 101:\n        return696\n    elif n == 102:\n        return704\n    elif n == 103:\n        return712\n    elif n == 104:\n        return720\n    elif n == 105:\n        return728\n    elif n == 106:\n        return736\n    elif n == 107:\n        return744\n    elif n == 108:\n        return752\n    elif n == 109:\n        return760\n    elif n == 110:\n        return768\n    elif n == 111:\n        return776\n    elif n == 112:\n        return784\n    elif n == 113:\n        return792\n    elif n == 114:\n        return800\n    elif n == 115:\n        return808\n    elif n == 116:\n        return816\n    elif n == 117:\n        return824\n    elif n == 118:\n        return832\n    elif n == 119:\n        return840\n    elif n == 120:\n        return848\n    elif n == 121:\n        return856\n    elif n == 122:\n        return864\n    elif n == 123:\n        return872\n    elif n == 124:\n        return880\n    elif n == 125:\n        return888\n    elif n == 126:\n        return896\n    elif n == 127:\n        return904\n    elif n == 128:\n        return912\n    elif n == 129:\n        return920\n    elif n == 130:\n        return928\n    elif n == 131:\n        return936\n    elif n == 132:\n        return944\n    elif n == 133:\n        return952\n    elif n == 134:\n        return960\n    elif n == 135:\n        return968\n    elif n == 136:\n        return976\n    elif n == 137:\n        return984\n    elif n == 138:\n        return992\n    elif n == 139:\n        return1000\n    elif n == 140:\n        return1008\n    elif n == 141:\n        return1016\n    elif n == 142:\n        return1024\n    elif n == 143:\n        return1032\n    elif n == 144:\n        return1040\n    elif n == 145:\n        return1048\n    elif n == 146:\n        return1056\n    elif n == 147:\n        return1064\n    elif n == 148:\n        return1072\n    elif n == 149:\n        return1080\n    elif n == 150:\n        return1088\n    elif n == 151:\n        return1096\n    elif n == 152:\n        return1104\n    elif n == 153:\n        return1112\n    elif n == 154:\n        return1120\n    elif n == 155:\n        return1128\n    elif n == 156:\n        return1136\n    elif n == 157:\n        return1144\n    elif n == 158:\n        return1152\n    elif n == 159:\n        return1160\n    elif n == 160:\n        return1168\n    elif n == 161:\n        return1176\n    elif n == 162:\n        return1184\n    elif n == 163:\n        return1192\n    e",
        "num_ids": 2016
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    if n == 1:\n        return 4\n    elif n == 2:\n        return 6\n    elif n == 3:\n        return 8\n    elif n == 4:\n        return 10\n    elif n == 5:\n        return 12\n    elif n == 6:\n        return 14\n    elif n == 7:\n        return 16\n    elif n == 8:\n        return 18\n    elif n == 9:\n        return 20\n    elif n == 10:\n        return 22\n    elif n == 11:\n        return 24\n    elif n == 12:\n        return 26\n    elif n == 13:\n        return 28\n    elif n == 14:\n        return 30\n    elif n == 15:\n        return 32\n    elif n == 16:\n        return 34\n    elif n == 17:\n        return 36\n    elif n == 18:\n        return 38\n    elif n == 19:\n        return 40\n    elif n == 20:\n        return 42\n    elif n == 21:\n        return 44\n    elif n == 22:\n        return 46\n    elif n == 23:\n        return 48\n    elif n == 24:\n        return 50\n    elif n == 25:\n        return 52\n    elif n == 26:\n        return 54\n    elif n == 27:\n        return 56\n    elif n == 28:\n        return 58\n    elif n == 29:\n        return 60\n    elif n == 30:\n        return 62\n    elif n == 31:\n        return 64\n    elif n == 32:\n        return 66\n    elif n == 33:\n        return 68\n    elif n == 34:\n        return 70\n    elif n == 35:\n        return 72\n    elif n == 36:\n        return 74\n    elif n == 37:\n        return 76\n    elif n == 38:\n        return 78\n    elif n == 39:\n        return 80\n    elif n == 40:\n        return 82\n    elif n == 41:\n        return 84\n    elif n == 42:\n        return 86\n    elif n == 43:\n        return 88\n    elif n == 44:\n        return 90\n    elif n == 45:\n        return 92\n    elif n == 46:\n        return 94\n    elif n == 47:\n        return 96\n    elif n == 48:\n        return 98\n    elif n == 49:\n        return 100\n    elif n == 50:\n        return 102\n    elif n == 51:\n        return 104\n    elif n == 52:\n        return 106\n    elif n == 53:\n        return 108\n    elif n == 54:\n        return 110\n    elif n == 55:\n        return 112\n    elif n == 56:\n        return 114\n    elif n == 57:\n        return 116\n    elif n == 58:\n        return 118\n    elif n == 59:\n        return 120\n    elif n == 60:\n        return 122\n    elif n == 61:\n        return 124\n    elif n == 62:\n        return 126\n    elif n == 63:\n        return 128\n    elif n == 64:\n        return 130\n    elif n == 65:\n        return 132\n    elif n == 66:\n        return 134\n    elif n == 67:\n        return 136\n    elif n == 68:\n        return 138\n    elif n == 69:\n        return 140\n    elif n == 70:\n        return 142\n    elif n == 71:\n        return 144\n    elif n == 72:\n        return 146\n    elif n == 73:\n        return 148\n    elif n == 74:\n        return 150\n    elif n == 75:\n        return 152\n    elif n == 76:\n        return 154\n    elif n == 77:\n        return 156\n    elif n == 78:\n        return 158\n    elif n == 79:\n        return 160\n    elif n == 80:\n        return 162\n    elif n == 81:\n        return 164\n    elif n == 82:\n        return 166\n    elif n == 83:\n        return 168\n    elif n == 84:\n        return 170\n    elif n == 85:\n        return 172\n    elif n == 86:\n        return 174\n    elif n == 87:\n        return 176\n    elif n == 88:\n        return 178\n    elif n == 89:\n        return 180\n    elif n == 90:\n        return 182\n    elif n == 91:\n        return 184\n    elif n == 92:\n        return 186\n    elif n == 93:\n        return 188\n    elif n == 94:\n        return 190\n    elif n == 95:\n        return 192\n    elif n == 96:\n        return 194\n    elif n == 97:\n        return 196\n    elif n == 98:\n        return 198\n    elif n == 99:\n        return 200\n    elif n == 100:\n        return 202\n    elif n == 101:\n        return 204\n    elif n == 102:\n        return 206\n    elif n == 103:\n        return 208\n    elif n == 104:\n        return 210\n    elif n == 105:\n        return 212\n    elif n == 106:\n        return 214\n    elif n == 107:\n        return 216\n    elif n == 108:\n        return 218\n    elif n == 109:\n        return 220\n    elif n == 110:\n        return 222\n    elif n == 111:\n        return 224\n    elif n == 112:\n        return 226\n    elif n == 113:\n        return 228\n    elif n == 114:\n        return 230\n    elif n == 115:\n        return 232\n    elif n == 116:\n        return 234\n    elif n == 117:\n        return 236\n    elif n == 118:\n        return 238\n    elif n == 119:\n        return 240\n    elif n == 120:\n        return 242\n    elif n == 121:\n        return 244\n    elif n == 122:\n        return 246\n    elif n == 123:\n        return 248\n    elif n == 124:\n        return 250\n    elif n == 125:\n        return 252\n    elif n == 126:\n        return 254\n    elif n == 127:\n        return 256\n    elif n == 128:\n        return 258\n    elif n == 129:\n        return 260\n    elif n == 130:\n        return 262\n    elif n == 131:\n        return 264\n    elif n == 132:\n        return 266\n    elif n == 133:\n        return 268\n    elif n == 134:\n        return 270\n    elif n == 135:\n        return 272\n    elif n == 136:\n        return 274\n    elif n == 137:\n        return 276\n    elif n == 138:\n        return 278\n    elif n == 139:\n        return 280\n    elif n == 140:\n        return 282\n    elif n == 141:\n        return 284\n    elif n == 142:\n        return 286\n    elif n == 143:\n        return 288\n    elif n == 144:\n        return 290\n    elif n == 145:\n        return 292\n    elif n == 146:\n        return 294\n    elif n == 147:\n        return 296\n    elif n == 148:\n        return 298\n    elif n == 149:\n        return 300\n    elif n == 150:\n        return 302\n    elif n == 151:\n        return 304\n    elif n == 152:\n        return 306\n    elif n == 153:\n        return 308\n    elif n == 154:\n        return 310\n    elif n == 155:\n        return 312\n    elif n == 156:\n        return 314\n    elif n == 157:\n        return 316\n    elif n == 158:\n        return 318\n    elif n == 159:\n        return 320\n    elif n == 160:\n        return 322\n    elif n == 161:\n        return 324\n    elif n == 162:\n        return 326\n    elif n == 163:\n        return 328\n    elif n == 164:\n        return 330\n    elif n == 165:\n        return 332\n    elif n == 166:\n        return 334\n    elif n == 167:\n        return 336\n    elif n == 168:\n    ",
        "num_ids": 2016
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) / 2\n",
        "num_ids": 14
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n==1:\n        return 4\n    if n==2:\n        return 6\n    if n==3:\n        return 8\n    if n==4:\n        return 10\n    if n==5:\n        return 12\n    if n==6:\n        return 14\n    if n==7:\n        return 16\n    if n==8:\n        return 18\n    if n==9:\n        return 20\n    if n==10:\n        return 22\n    if n==11:\n        return 24\n    if n==12:\n        return 26\n    if n==13:\n        return 28\n    if n==14:\n        return 30\n    if n==15:\n        return 32\n    if n==16:\n        return 34\n    if n==17:\n        return 36\n    if n==18:\n        return 38\n    if n==19:\n        return 40\n    if n==20:\n        return 42\n    if n==21:\n        return 44\n    if n==22:\n        return 46\n    if n==23:\n        return 48\n    if n==24:\n        return 50\n    if n==25:\n        return 52\n    if n==26:\n        return 54\n    if n==27:\n        return 56\n    if n==28:\n        return 58\n    if n==29:\n        return 60\n    if n==30:\n        return 62\n    if n==31:\n        return 64\n    if n==32:\n        return 66\n    if n==33:\n        return 68\n    if n==34:\n        return 70\n    if n==35:\n        return 72\n    if n==36:\n        return 74\n    if n==37:\n        return 76\n    if n==38:\n        return 78\n    if n==39:\n        return 80\n    if n==40:\n        return 82\n    if n==41:\n        return 84\n    if n==42:\n        return 86\n    if n==43:\n        return 88\n    if n==44:\n        return 90\n    if n==45:\n        return 92\n    if n==46:\n        return 94\n    if n==47:\n        return 96\n    if n==48:\n        return 98\n    if n==49:\n        return 100\n    if n==50:\n        return 102\n    if n==51:\n        return 104\n    if n==52:\n        return 106\n    if n==53:\n        return 108\n    if n==54:\n        return 110\n    if n==55:\n        return 112\n    if n==56:\n        return 114\n    if n==57:\n        return 116\n    if n==58:\n        return 118\n    if n==59:\n        return 120\n    if n==60:\n        return 122\n    if n==61:\n        return 124\n    if n==62:\n        return 126\n    if n==63:\n        return 128\n    if n==64:\n        return 130\n    if n==65:\n        return 132\n    if n==66:\n        return 134\n    if n==67:\n        return 136\n    if n==68:\n        return 138\n    if n==69:\n        return 140\n    if n==70:\n        return 142\n    if n==71:\n        return 144\n    if n==72:\n        return 146\n    if n==73:\n        return 148\n    if n==74:\n        return 150\n    if n==75:\n        return 152\n    if n==76:\n        return 154\n    if n==77:\n        return 156\n    if n==78:\n        return 158\n    if n==79:\n        return 160\n    if n==80:\n        return 162\n    if n==81:\n        return 164\n    if n==82:\n        return 166\n    if n==83:\n        return 168\n    if n==84:\n        return 170\n    if n==85:\n        return 172\n    if n==86:\n        return 174\n    if n==87:\n        return 176\n    if n==88:\n        return 178\n    if n==89:\n        return 180\n    if n==90:\n        return 182\n    if n==91:\n        return 184\n    if n==92:\n        return 186\n    if n==93:\n        return 188\n    if n==94:\n        return 190\n    if n==95:\n        return 192\n    if n==96:\n        return 194\n    if n==97:\n        return 196\n    if n==98:\n        return 198\n    if n==99:\n        return 200\n    if n==100:\n        return 202\n    if n==101:\n        return 204\n    if n==102:\n        return 206\n    if n==103:\n        return 208\n    if n==104:\n        return 210\n    if n==105:\n        return 212\n    if n==106:\n        return 214\n    if n==107:\n        return 216\n    if n==108:\n        return 218\n    if n==109:\n        return 220\n    if n==110:\n        return 222\n    if n==111:\n        return 224\n    if n==112:\n        return 226\n    if n==113:\n        return 228\n    if n==114:\n        return 230\n    if n==115:\n        return 232\n    if n==116:\n        return 234\n    if n==117:\n        return 236\n    if n==118:\n        return 238\n    if n==119:\n        return 240\n    if n==120:\n        return 242\n    if n==121:\n        return 244\n    if n==122:\n        return 246\n    if n==123:\n        return 248\n    if n==124:\n        return 250\n    if n==125:\n        return 252\n    if n==126:\n        return 254\n    if n==127:\n        return 256\n    if n==128:\n        return 258\n    if n==129:\n        return 260\n    if n==130:\n        return 262\n    if n==131:\n        return 264\n    if n==132:\n        return 266\n    if n==133:\n        return 268\n    if n==134:\n        return 270\n    if n==135:\n        return 272\n    if n==136:\n        return 274\n    if n==137:\n        return 276\n    if n==138:\n        return 278\n    if n==139:\n        return 280\n    if n==140:\n        return 282\n    if n==141:\n        return 284\n    if n==142:\n        return 286\n    if n==143:\n        return 288\n    if n==144:\n        return 290\n    if n==145:\n        return 292\n    if n==146:\n        return 294\n    if n==147:\n        return 296\n    if n==148:\n        return 298\n    if n==149:\n        return 300\n    if n==150:\n        return 302\n    if n==151:\n        return 304\n    if n==152:\n        return 306\n    if n==153:\n        return 308\n    if n==154:\n        return 310\n    if n==155:\n        return 312\n    if n==156:\n        return 314\n    if n==157:\n        return 316\n    if n==158:\n        return 318\n    if n==159:\n        return 320\n    if n==160:\n        return 322\n    if n==161:\n        return 324\n    if n==162:\n        return 326\n    if n==163:\n        return 328\n    if n==164:\n        return 330\n    if n==165:\n        return 332\n    if n==166:\n        return 334\n    if n==167:\n        return 336\n    if n==168:\n        return 338\n    if n==169:\n        return 340\n    if n==170:\n        return 342\n    if n==171:\n        return 344\n    if n==172:\n        return 346\n    if n==173:\n        return 348\n    if n==174:\n        return 350\n    if n==175:\n        return 352\n    if n==176:\n        return 354\n    if n==177:\n        return 356\n    if n==178:\n        return 358\n    if n==179:\n        return 360\n    if n==180:\n        return 362\n    if n==181:\n        return 364\n    if n==182:\n        return 366\n    if n==183:\n        return 368",
        "num_ids": 2015
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\n",
        "num_ids": 16
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    from math import pi\n    return round(4/3 * math.pi * r**3,2)\n",
        "num_ids": 27
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)\n",
        "num_ids": 20
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * (r**3)\n",
        "num_ids": 18
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # volume of a sphere\n    def f_volume_sphere(r):\n        # Base case: when the radius is greater than 0\n        if r > 0:\n            return (4/3) * math.pi * (r ** 3)\n        # Recursive call when the radius is less than 0\n        else:\n            return f_volume_sphere(r - 1)\n    return f_volume_sphere(r)\n",
        "num_ids": 102
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r ** 3\n",
        "num_ids": 16
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\n",
        "num_ids": 16
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4.0/3.0)*math.pi*(r**3)\n    return volume\n",
        "num_ids": 28
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume\n",
        "num_ids": 24
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    area_sphere = 4/3 * math.pi * (r**3)\n    volume_sphere = 4/3 * math.pi * (r**3) * (4/3 * math.pi * r**3)\n    return print(\"The volume of a sphere with radius {} is {}\".format(r, round(volume_sphere, 4)))\n",
        "num_ids": 85
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    n = ord(strr[0])\n    for i in range(1,len(strr)):\n        n = (n + ord(strr[i]))%26\n    return chr(n)\n",
        "num_ids": 53
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    for i in range(len(strr)):\n        ch = ord(strr[i])\n        strr = strr.replace(strr[i],chr(ch%26+97))\n    return strr\n",
        "num_ids": 55
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    n = ord(strr[0]) - ord('a')\n    for i in range(1,len(strr)):\n        n += ord(strr[i]) - ord('a')\n    return (n%26)\n    \nif __name__ == \"__main__\":\n    \n    strr = \"a\"\n    print(get_Char(strr))\n    strr = \"hello\"\n    print(get_Char(strr))\n    strr = \"abcdefghijklmnopqrstuvwxyz\"\n    print(get_Char(strr))\n    strr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    print(get_Char(strr))\n    strr = \"AbCdEfGhIjKlmNoPQRStUVwxyZ\"\n    print(get_Char(strr))\n    strr = \"AbCdEfGHiJklmnopQRstUVwxyZ\"\n    print(get_Char(strr))\n    strr = \"aabcdeeefgghijklmnopqrstuvwxyz\"\n    print(get_Char(strr))",
        "num_ids": 284
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    d = {}\n    ch = ''\n    for i in strr:\n        d[i] = str(ord(i) + ord('a'))\n        if d[i] > ord('z'):\n            d[i] -= ord('a')\n        elif d[i] < ord('a'):\n            d[i] += ord('a')\n    for i in d:\n        ch = ch + chr(d[i])\n    print(ch)\n",
        "num_ids": 114
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    string = strr\n    print(string)\n    return ord(string)\n",
        "num_ids": 21
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    intval = 0\n    for i in strr:\n        intval = intval + ord(i)\n    return intval % 26\n",
        "num_ids": 35
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    import string\n    str1 = strr\n    final = ''\n    a = 0\n    for i in range(0,len(str1)):\n        if(str1[i] not in string.punctuation):\n            final+=str1[i]\n        else:\n            final+=' '\n    for i in range(0,len(final)):\n        a = ord(final[i]) + a\n        if(a>122):\n            a = a - 26\n    print(final)\n    print(a)\n",
        "num_ids": 127
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ans = \"\"\n    for i in range(len(strr)):\n        ans+=chr((ord(strr[i])+97)%26+97)\n    return ans\n",
        "num_ids": 46
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Return the result of the calculation\n    return chr(int(strr)%26 + ord('a'))\n    # return ord(get_Char(strr))\n    \n    \n    ",
        "num_ids": 48
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    s = strr\n    #print (s)\n    str = ''\n    for i in range(len(s)):\n        str += chr(ord(s[i]) + 26)\n        #print (str)\n    return str\n    \nprint(get_Char(\"Daffy Duck\"))",
        "num_ids": 72
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return (n + 1) // 2\n",
        "num_ids": 12
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    l = []\n    for i in range(n):\n        if i % 2 == 0:\n            l.append(1)\n        else:\n            l.append(0)\n    return l\n",
        "num_ids": 49
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 1\n    count = 1\n    n -= 1\n    while n!= 0:\n        n -= 1\n        a += 3*count\n        count += 1\n    return a\n",
        "num_ids": 46
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence_list = []\n    for i in range(n):\n        sequence_list.append((i + 1) % 2)\n    return sequence_list\n",
        "num_ids": 39
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 0\n    b = 1\n    for i in range(n):\n        c = a + b\n        a = b\n        b = c\n    return c\n    \n    \n",
        "num_ids": 46
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0:\n        return -1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return sequence(n-1) + sequence(n-2)\n",
        "num_ids": 70
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return n * ((n-1) % 6) + 1 if n % 2 == 0 else n * ((n-1) % 6) - 1\n",
        "num_ids": 36
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return (n * (n + 1) // 2) % 60\n",
        "num_ids": 18
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq_n = 1\n    for i in range(1,n+1):\n        seq_n += (n-i)*3\n    return seq_n\n",
        "num_ids": 40
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return sequence(n-1) + sequence(n-2) + sequence(n-3)\n",
        "num_ids": 64
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surf = 4 * math.pi * r**2\n    return surf\n",
        "num_ids": 20
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Input: radius\n    # Output: surface area\n    surface_area = 4 * math.pi * (r ** 2)\n    return surface_area\n",
        "num_ids": 38
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4*math.pi*(r**2)\n    print(area)\n    return area\nsurfacearea_sphere(5)\n",
        "num_ids": 36
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4 * math.pi * r**2\n    return(a)\n",
        "num_ids": 21
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea = 4*math.pi*r**2\n    print(f\"The surface area of the sphere is: {surfacearea}\")\n",
        "num_ids": 35
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r ** 2\n    return area\n",
        "num_ids": 19
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi=3.14159265359\n    return 4*pi*(r**2)\n",
        "num_ids": 24
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sphere_radius = float(r)\n    surface_area = (4 * math.pi * sphere_radius**2) / 3\n    return surface_area\n",
        "num_ids": 40
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * math.pow(r, 2)\n",
        "num_ids": 20
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Hint: You can use pi and 6*pi (from the math module)\n    # as many variables as you like\n    area = (4 * math.pi * (r * r))\n",
        "num_ids": 47
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Simplify the problem with the equation y^2 = x^2 - 2x + 3\n    # We can solve it analytically by setting:\n    # 1. y = x^2 - 3x + 5\n    # 2. x = sqrt(3y) + 1\n    # Then sqrt(3) + 1 = 2\n    return 2 * sqrt(3) + 1 + sqrt(3) * (n - 1)\n",
        "num_ids": 104
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return sum(pow(6, x, 20) for x in range(n))\n",
        "num_ids": 23
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    res = n * (n+1) // 2\n    return res\n",
        "num_ids": 19
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # import math\n    # k = 0\n    #\n    # for i in range(1, n + 1):\n    #     k += 2 * i\n    #     if k >= n:\n    #         break\n    #\n    # k -= 2 * i\n    # return 1.5 * k - 2\n    return hex(int(n * (3 * n - 1) / 2))\n",
        "num_ids": 94
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 3*(n**2)-1\n    b = a**0.5\n    c = n**0.5\n    return a*c-b**2\n",
        "num_ids": 42
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 3\n    else:\n        return (6*n - 5)*(n - 1)/2\n",
        "num_ids": 45
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def hex_nth_centered(n):\n        num = 2*n\n        return num*(num+1)/2\n",
        "num_ids": 32
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    import math\n    sqrt2 = math.sqrt(2)\n    return n*((2*n)-1)*sqrt2/2\n",
        "num_ids": 36
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*((3*n**2-1)/2)\n",
        "num_ids": 18
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 6*(2*n-1) + centered_hexagonal_number(n-1)\n",
        "num_ids": 41
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries\n    '''\n    return {**dict1, **dict2}\n",
        "num_ids": 14
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return(dict1,dict2,dict3)\n",
        "num_ids": 15
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return ct.ChainMap(dict1, dict2, dict3)\n",
        "num_ids": 20
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return ct.ChainMap(dict1,dict2,dict3)\n",
        "num_ids": 20
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = dict1\n    for i in range(len(dict2)):\n        dict4.update(dict2)\n        dict4.update(dict3)\n    return dict4\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict4 = dict1\n    for i in range(len(dict2)):\n        dict4.update(dict2)\n    return dict4\ndef merge_dictionaries_one(dict1,dict2):\n    '''\n    Write a function to merge a dictionary into another dictionary.\n    '''\n    dict4 = dict1\n    for i in range(len(dict2)):\n        dict4.update(dict2)\n    return dict4\ndef combine_dictionaries_three(dict1,dict2,dict3):\n    '''\n    Write a function to combine three dictionaries.\n    '''\n    dict4 = dict1\n    for i in range(len(dict2)):\n        dict4.update(dict2)\n        dict4.update(dict3)\n    return dict4\ndef combine_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to combine two dictionaries.\n    '''\n    dict4 = dict1\n    for i in range(len(dict2)):\n        dict4.update(dict2)\n    return dict4\ndef combine_dictionaries_one(dict1,dict2):\n    '''\n    Write a function to combine a dictionary into another dictionary.\n    '''\n    dict4 = dict1\n    for i in range(len(dict2)):\n        dict4.update(dict2)\n    return dict4\ndef check_dict_contains_key_one(dict1,key):\n    '''\n    Write a function to check if a dictionary contains a key.\n    '''\n    for i in range(len(dict1)):\n        if key in dict1:\n            return True\n        else:\n            return False\ndef check_dict_contains_key_two(dict1,key):\n    '''\n    Write a function to check if a dictionary contains a key.\n    '''\n    for i in range(len(dict1)):\n        if key in dict1.keys():\n            return True\n        else:\n            return False\ndef check_dict_contains_key_three(dict1,key):\n    '''\n    Write a function to check if a dictionary contains a key.\n    '''\n    for i in range(len(dict1)):\n        if key in dict1.values():\n            return True\n        else:\n            return False\ndef check_dict_contains_key_four(dict1,key):\n    '''\n    Write a function to check if a dictionary contains a key.\n    '''\n    for i in range(len(dict1)):\n        if key in dict1.items():\n            return True\n        else:\n            return False\ndef check_dict_contains_key_five(dict1,key):\n    '''\n    Write a function to check if a dictionary contains a key.\n    '''\n    for i in range(len(dict1)):\n        if key in dict1.keys():\n            return True\n        else:\n            return False\ndef check_dict_contains_key_six(dict1,key):\n    '''\n    Write a function to check if a dictionary contains a key.\n    '''\n    for i in range(len(dict1)):\n        if key in dict1.values():\n            return True\n        else:\n            return False\ndef check_dict_contains_key_seven(dict1,key):\n    '''\n    Write a function to check if a dictionary contains a key.\n    '''\n    for i in range(len(dict1)):\n        if key in dict1.items():\n            return True\n        else:\n            return False\ndef check_dict_contains_key_eight(dict1,key):\n    '''\n    Write a function to check if a dictionary contains a key.\n    '''\n    for i in range(len(dict1)):\n        if key in dict1.keys():\n            return True\n        else:\n            return False\ndef check_dict_contains_key_nine(dict1,key):\n    '''\n    Write a function to check if a dictionary contains a key.\n    '''\n    for i in range(len(dict1)):\n        if key in dict1.values():\n            return True\n        else:\n            return False\ndef check_dict_contains_key_ten(dict1,key):\n    '''\n    Write a function to check if a dictionary contains a key.\n    '''\n    for i in range(len(dict1)):\n        if key in dict1.items():\n            return True\n        else:\n            return False\ndef check_dict_contains_key_eleven(dict1,key):\n    '''\n    Write a function to check if a dictionary contains a key.\n    '''\n    for i in range(len(dict1)):\n        if key in dict1.keys():\n            return True\n        else:\n            return False\ndef check_dict_contains_key_twelve(dict1,key):\n    '''\n    Write a function to check if a dictionary contains a key.\n    '''\n    for i in range(len(dict1)):\n        if key in dict1.values():\n            return True\n        else:\n            return False\ndef check_dict_contains_key_thirteen(dict1,key):\n    '''\n    Write a function to check if a dictionary contains a key.\n    '''\n    for i in range(len(dict1)):\n        if key in dict1.items():\n            return True\n        else:\n            return False\ndef check_dict_contains_key_fourteen(dict1,key):\n    '''\n    Write a function to check if a dictionary contains a key.\n    '''\n    for i in range(len(dict1)):\n        if key in dict1.keys():\n            return True\n        else:\n            return False\ndef check_dict_contains_key_fifteen(dict1,key):\n    '''\n    Write a function to check if a dictionary contains a key.\n    '''\n    for i in range(len(dict1)):\n        if key in dict1.values():\n            return True\n        else:\n            return False\ndef check_dict_contains_key_sixteen(dict1,key):\n    '''\n    Write a function to check if a dictionary contains a key.\n    '''\n    for i in range(len(dict1)):\n        if key in dict1.items():\n            return True\n        else:\n            return False\ndef check_dict_contains_key_seventeen(dict1,key):\n    '''\n    Write a function to check if a dictionary contains a key.\n    '''\n    for i in range(len(dict1)):\n        if key in dict1.keys():\n            return True\n        else:\n            return False\ndef check_dict_contains_key_eighteen(dict1,key):\n    '''\n    Write a function to check if a dictionary contains a key.\n    '''\n    for i in range(len(dict1)):\n        if key in dict1.values():\n            return True\n        else:\n            return False\ndef check_dict_contains_key_nineteen(dict1,key):\n    '''\n    Write a function to check if a dictionary contains a key.\n    '''\n    for i in range(len(dict1)):\n        if key in dict1.items():\n            return True\n        else:\n            return False\ndef check_dict_contains_key_twenty(dict1,key):\n    '''\n    Write a function to check if a dictionary contains a key.\n    '''\n    for i in range(len(dict1)):\n        if key in dict1.keys():\n            return True\n        else:\n            return False\ndef check_dict_contains_key_twentyone(dict1,key):\n    '''\n    Write a function to check if a dictionary contains a key.\n    '''\n    for i in range(len(dict1)):\n        if key in dict1.values():\n            return True\n        else:\n            retur",
        "num_ids": 36
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict(dict1,**dict2,**dict3)\n",
        "num_ids": 18
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    \n    # dict_new = {**dict1, **dict2, **dict3}\n    \n    # dict_new = {k: dict_new[k] for k in dict_new if k in dict1 or k in dict2 or k in dict3}\n    \n    \n    # dict_new = dict1.copy()\n    \n    # dict_new.update(dict2)\n    \n    # dict_new.update(dict3)\n    \n    return dict_new\n",
        "num_ids": 116
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.update(dict2,dict3)\nprint(merge_dictionaries_three(dict1={1:10,2:20},dict2={3:30,4:40},dict3={5:50,6:60}))\nprint(dict1)\nprint(dict2)\nprint(dict3)\n",
        "num_ids": 80
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = dict1.copy()\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged\n",
        "num_ids": 36
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if len(dict1) == 0 and len(dict2) == 0 and len(dict3) == 0:\n        return {}\n    dict1_keys = dict1.keys()\n    dict2_keys = dict2.keys()\n    dict3_keys = dict3.keys()\n    dict1_keys = sorted(dict1_keys, key=lambda x: dict1_keys)\n    dict2_keys = sorted(dict2_keys, key=lambda x: dict2_keys)\n    dict3_keys = sorted(dict3_keys, key=lambda x: dict3_keys)\n    key_dict = dict()\n    for key in dict1_keys:\n        value1 = dict1.get(key)\n        value2 = dict2.get(key)\n        value3 = dict3.get(key)\n        if value1 == None or value2 == None or value3 == None:\n            key_dict[key] = dict()\n        else:\n            key_dict[key] = dict()\n            key_dict[key] = merge_dictionaries_three(value1, value2, value3)\n    return key_dict\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries.\n    '''\n    if len(dict1) == 0 and len(dict2) == 0:\n        return {}\n    if len(dict1) == 0:\n        return dict2\n    if len(dict2) == 0:\n        return dict1\n    dict1_keys = dict1.keys()\n    dict2_keys = dict2.keys()\n    dict1_keys = sorted(dict1_keys, key=lambda x: dict1_keys)\n    dict2_keys = sorted(dict2_keys, key=lambda x: dict2_keys)\n    key_dict = dict()\n    for key in dict1_keys:\n        value1 = dict1.get(key)\n        value2 = dict2.get(key)\n        if value1 == None or value2 == None:\n            key_dict[key] = dict()\n        else:\n            key_dict[key] = dict()\n            key_dict[key] = merge_dictionaries_two(value1, value2)\n    return key_dict\n",
        "num_ids": 239
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_dict = collections.Counter(list1)\n    return count_dict\nprint(freq_count([1,1,1,1,2,2,2,2,2,3,3,3,4,4,4,4,4,5,5,5,6,6,6,6,6,7,7,7,8,8,8,8,8,9,9,9,9,10,10,10,10,10,11,11,11,11,11,12,12,12,12,12,13,13,13,13,13,14,14,14,14,14,15,15,15,15,15,16,16,16,16,16,17,17,17,17,17,18,18,18,18,18,19,19,19,19,19,20,20,20,20,20,21,21,21,21,21,22,22,22,22,22,23,23,23,23,23,24,24,24,24,24,25,25,25,25,25,26,26,26,26,26,27,27,27,27,27,28,28,28,28,28,29,29,29,29,29,30,30,30,30,30,31,31,31,31,31,32,32,32,32,32,33,33,33,33,33,34,34,34,34,34,35,35,35,35,35,36,36,36,36,36,37,37,37,37,37,38,38,38,38,38,39,39,39,39,39,40,40,40,40,40,41,41,41,41,41,42,42,42,42,42,43,43,43,43,43,44,44,44,44,44,45,45,45,45,45,46,46,46,46,46,47,47,47,47,47,48,48,48,48,48,49,49,49,49,49,50,50,50,50,50,51,51,51,51,51,52,52,52,52,52,53,53,53,53,53,54,54,54,54,54,55,55,55,55,55,56,56,56,56,56,57,57,57,57,57,58,58,58,58,58,59,59,59,59,59,60,60,60,60,60,61,61,61,61,61,62,62,62,62,62,63,63,63,63,63,64,64,64,64,64,65,65,65,65,65,66,66,66,66,66,67,67,67,67,67,68,68,68,68,68,69,69,69,69,69,70,70,70,70,70,71,71,71,71,71,72,72,72,72,72,73,73,73,73,73,74,74,74,74,74,75,75,75,75,75,76,76,76,76,76,77,77,77,77,77,78,78,78,78,78,79,79,79,79,79,80,80,80,80,80,81,81,81,81,81,82,82,82,82,82,83,83,83,83,83,84,84,84,84,84,85,85,85,85,85,86,86,86,86,86,87,87,87,87,87,88,88,88,88,88,89,89,89,89,89,90,90,90,90,90,91,91,91,91,91,92,92,92,92,92,93,93,93,93,93,94,94,94,94,94,95,95,95,95,95,96,96,96,96,96,97,97,97,97,97,98,98,98,98,98,99,99,99,99,99,100,100,100,100,100,101,101,101,101,101,102,102,102,102,102,103,103,103,103,103,104,104,104,104,104,105,105,105,105,105,106,106,106,106,106,107,107,107,107,107,108,108,108,108,108,109,109,109,109,109,110,110,110,110,110,111,111,111,111,111,112,112,112,112,112,113,113,113,113,113,114,114,114,114,114,115,115,115,115,115,116,116,116,116,116,117,117,117,117,117,118,118,118,118,118,119,119,119,119,119,120,120,120,120,120,121,121,121,121,121,122,122,122,122,122,123,123,123,123,123,124,124,124,124,124,125,125,125,125,125,126,126,126,126,126,127,127,127,127,127,128,128,128,128,128,129,129,129,129,129,130,130,130,130,130,131,131,131,131,131,132,132,132,132,132,133,133,133,133,133,134,134,134,134,134,135,135,135,135,135,136,136,136,136,136,137,137,137,137,137,138,138,138,138,138,139,139,139,139,139,140,140,140,140,140,141,141,141,141,141,142,142,142,142,142,143,143,143,143,143,144,144,144,144,144,145,145,145,145,145,146,146,146,146,146,147,147,147,147,147,148,148,148,148,148,149,149,149,149,149,150,150,150,150,150,151,151,151,151,151,152,152,152,152,152,153,153,153,153,153,154,154,154,154,154,155,155,155,155,155,156,156,156,156,156,157,157,157,157,157,158,158,158,158,158,159,159,159,159,159,160,160,160,160,160,161,161,161,161,161,162,162,162,162,162,163,163,163,163,163,164,164,164,164,164,165,165,165,165,165,166,166,166,166,166,167,167,167,167,167,168,168,168,168,168,169,169,169,169,169,170,170,170,170,170,171,171,171,171,171,172,172,172,172,172,173,173,173,173,173,174,174,174,174,174,175,175,175,175,175,176,176,176,176,176,177,177,177,177,177,178,178,178,178,178,179,179,179,179,179,180,180,180,180,180,181,181,181,181,181,182,182,182,182,182,183,183,183,183,183,184,184,184,184,184,185,185,185,185,185,186,186,186,186,186,187,187,187,187,187,188,188,188,188,188,189,189,189,189,189,190,190,190,190,190,191,191,191,191,191,192,192,192,192,192,193,193,193,193,193,194,194,194,194,194,195,195,195,195,195,196,196,196,196,196,197,197,197,197,197,198,198,198,198,198,199,199,199,199,199,200,200,20",
        "num_ids": 2007
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    l = list(set(list1))\n    dict1 = {}\n    for i in l:\n        dict1[i] = list1.count(i)\n    return dict1\n",
        "num_ids": 46
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dic = {}\n    for item in list1:\n        if item in dic:\n            dic[item] += 1\n        else:\n            dic[item] = 1\n    return dic\n",
        "num_ids": 51
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n",
        "num_ids": 51
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    my_dict = {}\n    for i in list1:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    return my_dict\n",
        "num_ids": 56
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n",
        "num_ids": 51
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1=collections.Counter(list1)\n    print(dict1)\n    return dict1\n",
        "num_ids": 27
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    result = {}\n    for i in list1:\n        if i in result.keys():\n            result[i] += 1\n        else:\n            result[i] = 1\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.defaultdict(int)\n    for i in list1:\n        freq[i] += 1\n    return freq\n",
        "num_ids": 36
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n",
        "num_ids": 54
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    largest = N\n    closest = N\n",
        "num_ids": 14
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return min(N, end=float('inf'))\n",
        "num_ids": 16
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    lower = 0\n    upper = N\n    if N <= 0:\n        return -1\n    if N <= upper:\n        return N\n    while lower < upper:\n        mid = (upper + lower) // 2\n        if mid * mid > N:\n            upper = mid - 1\n        elif mid * mid < N:\n            lower = mid + 1\n        else:\n            return mid\n    if N > lower:\n        return lower\n    else:\n        return upper\n",
        "num_ids": 113
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n",
        "num_ids": 7
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num = 0\n    for i in range(1, N):\n        if N - i < num:\n            num = N - i\n            closest = num\n    return closest\n",
        "num_ids": 45
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1: return 1\n    if N % 2 == 0:\n        return int(N/2)\n    else:\n        return int(N/2) + 1\n    \n    \n    \n    \ndef coin_change(coins, change):\n    '''\n    Given an array of coin denominations and a number of\n    coins needed, return the minimum number of coins needed to\n    make change. If it is not possible to make change, return -1.\n    '''\n    result = []\n    \n    def coin_helper(n, coins, count):\n        if n < 0: return count\n        if n == 0: return count\n        if n in coins:\n            return count\n        count += 1\n        return coin_helper(n, coins, count)\n    \n    \n    for i in range(len(coins)):\n        count = coin_helper(change, coins, count)\n        if count!= -1:\n            result.append(count)\n    \n    return min(result) if result else -1\n    \n    \n    \n    \n    \n    \ndef longest_common_substring(s1, s2):\n    '''\n    Write a function that returns the longest common substring of\n    two strings.\n    '''\n    def is_substring(string, substring):\n        if substring in string:\n            return True\n        return False\n    \n    result = \"\"\n    \n    for i in range(len(s1) + 1):\n        for j in range(len(s2) + 1):\n            if is_substring(s1, s1[i:j]) and is_substring(s2, s2[i:j]):\n                if len(result) < j - i:\n                    result = s1[i:j]\n    \n    return result\n    \n    \n    \n    \ndef remove_nth_from_end(head, n):\n    '''\n    Given a LinkedList head, remove the n-th node from the end of the list and return its\n    head.\n    '''\n    \n    current = head\n    \n    if head == None:\n        return head\n    \n    length = 0\n    \n    while current:\n        current = current.next\n        length += 1\n    \n    if length == 1:\n        return None\n    \n    current = head\n    \n    if n == length:\n        return head.next\n    \n    while current and length > n:\n        current = current.next\n        length -= 1\n    \n    current.next = current.next.next\n    return head\n    \n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function that returns True if a string is a palindrome, False otherwise.\n    '''\n    \n    def is_palindrome_helper(string, start, end):\n        if start == end:\n            return True\n        if not string or start >= end:\n            return False\n        if string[start]!= string[end]:\n            return False\n        return is_palindrome_helper(string, start + 1, end - 1)\n    \n    \n    for i in range(len(s)):\n        if not is_palindrome_helper(s, i, i):\n            return False\n    \n    return True\n    \n    \n    \n    \n    \ndef is_subsequence(s1, s2):\n    '''\n    Write a function that returns True if a string is a subsequence of another string,\n    False otherwise.\n    '''\n    \n    def is_subsequence_helper(string, start, end):\n        if start >= end:\n            return True\n        if not string:\n            return False\n        if string[start] == s2[end]:\n            return is_subsequence_helper(string, start + 1, end)\n        return False\n    \n    \n    \n    \n    s2_length = len(s2)\n    for i in range(len(s1)):\n        if not is_subsequence_helper(s1, i, i):\n            return False\n    \n    for i in range(s2_length):\n        if not is_subsequence_helper(s1, i, i):\n            return False\n    \n    return True\n    \n    \n    \n    \n    \ndef is_anagram(s1, s2):\n    '''\n    Write a function that returns True if two strings are anagrams of one another, False otherwise.\n    '''\n    def is_anagram_helper(string, start, end):\n        if start >= end:\n            return True\n        if not string:\n            return False\n        if string[start]!= string[end]:\n            return False\n        return is_anagram_helper(string, start + 1, end)\n    \n    \n    for i in range(len(s1)):\n        if not is_anagram_helper(s1, i, i):\n            return False\n    \n    for i in range(len(s2)):\n        if not is_anagram_helper(s2, i, i):\n            return False\n    \n    return True\n    \n    \n    \n    \n    \ndef min_dist_to_closest(arr, x):\n    '''\n    Given an array of integers, find the minimum distance to the closest\n    number of a given number \u2018x\u2019 in the array.\n    '''\n    minimum = float('inf')\n    \n    for i in range(len(arr)):\n        if abs(arr[i] - x) < minimum:\n            minimum = abs(arr[i] - x)\n    \n    return minimum\n    \n    \n    \n    \ndef find_Kth_largest(arr, k):\n    '''\n    Given an array and a number \u2018k\u2019, find the kth largest element in the array.\n    Note: It can be assumed that \u2018k\u2019 will not be larger than the size of the\n    array.\n    '''\n    def partition(low, high, pivot_index):\n        '''\n        This function is used to sort the elements. It helps to solve the problem\n        of finding the kth largest element by breaking the array in the half.\n        '''\n        pivot_value = arr[pivot_index]\n        arr[pivot_index], arr[high] = arr[high], arr[pivot_index]\n        store_index = low\n        for i in range(low, high):\n            if arr[i] > pivot_value:\n                arr[i], arr[store_index] = arr[store_index], arr[i]\n                store_index += 1\n        arr[store_index], arr[high] = arr[high], arr[store_index]\n        return store_index\n    \n    \n    \n    \n    def select(low, high, k_smallest):\n        '''\n        This function is used to find the kth smallest element in the array.\n        '''\n        if low == high:\n            return low\n        if low + 1 == high:\n            if arr[low] > arr[high]:\n                arr[low], arr[high] = arr[high], arr[low]\n            return low\n        \n        pivot_index = random.randint(low, high)\n        pivot_index = partition(low, high, pivot_index)\n        \n        if k_smallest == pivot_index + 1:\n            return pivot_index\n        elif k_smallest < pivot_index + 1:\n            return select(low, pivot_index - 1, k_smallest)\n        else:\n            return select(pivot_index + 1, high, k_smallest)\n    \n    \n    \n    \n    \n    return select(0, len(arr) - 1, len(arr) - k)\n    \n    \n    \n    \n    \ndef swap_nodes(arr, index1, index2):\n    '''\n    Write a function to swap a pair of nodes in a singly linked list.\n    '''\n    if index1 == index2:\n        return\n    \n    if index1 > index2:\n        index1, index2 = index2, index1\n    \n    if arr[index1] == None:\n        return\n    \n    node1 = arr[index1]\n    \n    node2 = arr[index2]\n    \n    if node2 == None:\n        arr[index2] = node1\n        return\n    \n    arr[index1] = node2\n    arr[index2] = nod",
        "num_ids": 121
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N<0:\n        return None\n    if N<=1:\n        return N\n    arr = [0]*(N+1)\n    arr[1] = 1\n    for i in range(2,N+1):\n        arr[i] = i\n        for j in range(1,i//2):\n            arr[i] = min(arr[i],arr[j]+arr[i-j])\n    return arr[-1]\n",
        "num_ids": 111
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def rec(n):\n        if n <= 1:\n            return n\n        return min(rec(n-1), rec(n-2), rec(n-3))\n    return rec(N)\n    \ndef palindrome_number(n):\n    '''\n    Write a function to determine if a number is a palindrome. A palindrome is\n    a number that reads the same forward as it does backward, e.g. 121 is a \n    palindrome but 123 is not.\n    '''\n    string = str(n)\n    backwards = 0\n    for i in range(len(string)):\n        backwards = 10**i + int(string[i])\n    return n == backwards\n",
        "num_ids": 49
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # in case n is negative\n    if N < 0:\n        N = -N\n",
        "num_ids": 23
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(0, N):\n        if N <= i:\n            return i\n",
        "num_ids": 24
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length = 0\n    for word in list1:\n        if len(word) > length:\n            length = len(word)\n    return length\n",
        "num_ids": 37
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return len(max(list1, key=len))\n",
        "num_ids": 16
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    print(max(len(word) for word in list1))\n",
        "num_ids": 18
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    if len(list1)==0:\n        return 0\n    else:\n        return max(len(list1[0]),len_log(list1[1:]))\n",
        "num_ids": 43
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length=0\n    if len(list1)==0:\n        return max_length\n    for i in range(len(list1)):\n        if len(list1[i])>max_length:\n            max_length=len(list1[i])\n    return max_length\n",
        "num_ids": 73
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    result = len(max(list1, key=len))\n    return result\n",
        "num_ids": 21
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return len(max(list1, key=len))\n",
        "num_ids": 16
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return len(max(list1,key=len))\n",
        "num_ids": 16
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    maxi = 0\n    for word in list1:\n        if len(word) > maxi:\n            maxi = len(word)\n    return maxi\n",
        "num_ids": 41
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len=0\n    for x in list1:\n        if len(x)>max_len:\n            max_len=len(x)\n    return max_len\n",
        "num_ids": 45
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if i in sub_str:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if i in sub_str:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(0, len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n",
        "num_ids": 46
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if any(sub_str in s for s in str1):\n        return True\n    else:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # print(\"Checking substring\", sub_str)\n    sub_str_lower = sub_str.lower()\n    for s in str1:\n        if sub_str_lower in s.lower():\n            return True\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    for i in str1:\n        if i in sub_str:\n            print(\"Substring found in String : \"+str(i))\n        else:\n            print(\"Substring not found\")\n            \ndef find_substring_better(str1, str2):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    for i in range(0,len(str1)):\n        if str1[i] in str2:\n            print(\"Substring found in String : \"+str(str1[i]))\n            break\n        else:\n            continue\n            ",
        "num_ids": 79
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(0,len(str1)):\n        if sub_str == str1[i:i+len(sub_str)]:\n            return True\n    return False\n",
        "num_ids": 46
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for val in str1:\n        if val in sub_str:\n            print(val)\n",
        "num_ids": 25
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in string for string in str1)\n",
        "num_ids": 18
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if(n<1 or n>1000):\n        print(\"Please provide a valid number\")\n        return False\n    if(n==1 or n==2 or n==3 or n==7 or n==8 or n==15):\n        return True\n    if(n%2==0):\n        return False\n    \n    d = int(n**0.5)\n    for i in range(3,d+1,2):\n        if(n%i==0):\n            return False\n    return True\n",
        "num_ids": 121
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1:\n        return True\n    if n == 0:\n        return False\n    while n > 0:\n        if n % 2!= 0:\n            return False\n        n = n // 2\n    return True\n",
        "num_ids": 56
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    count=0\n    while n:\n        n//=10\n        count+=1\n    return count==2\n",
        "num_ids": 29
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if(n%2==0 and n>2 and n<5):\n        print(True)\n    else:\n        print(False)\n        \ndef is_prime(n):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    if(n==2 or n==3 or n==5 or n==7):\n        print(True)\n    else:\n        print(False)\n",
        "num_ids": 38
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    x = n % 10\n    n = n // 10\n    s = 0\n    while n!= 0:\n        y = n % 10\n        n = n // 10\n        s = s * 10 + y\n    return x == y and s % 2 == 0\n",
        "num_ids": 64
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n >= 0:\n        while n!= 0:\n            if n % 10 == 0:\n                n = n // 10\n            else:\n                return False\n        return True\n    else:\n        return False\n",
        "num_ids": 53
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # '''\n    # check whether the number is undulating or not,\n    # by checking whether the sum of digits are same or not\n    # '''\n    # print(type(n))\n    # if type(n) is int:\n    #     total = 0\n    #     while n!= 0:\n    #         total += n%10\n    #         n = n//10\n    #     return total == n\n    # return False\n    if type(n) is int:\n        return sum(map(int,str(n))) == n\n    return False",
        "num_ids": 98
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n<0): \n        n=-n \n    s=0\n    while(n): \n        s+=n%10\n        n=n//10\n    return s==9 or s==8\n    \ndef is_palindrome(n):\n    '''\n    Write a function to check whether the given number is a palindrome or not.\n    '''\n    s=0\n    while(n):\n        s=s*10+n%10\n        n=n//10\n    return s==s\n    \ndef is_prime(n):\n    '''\n    Write a function to check whether the given number is a prime or not.\n    '''\n    if(n<=1):\n        return False\n    if(n==2):\n        return True\n    if(n%2==0):\n        return False\n    i=3\n    while(i*i<=n):\n        if(n%i==0):\n            return False\n        i+=2\n    return True\n    \ndef is_prime_number(n):\n    '''\n    Write a function to check whether the given number is a prime or not.\n    '''\n    if(n<=1):\n        return False\n    if(n==2):\n        return True\n    if(n%2==0):\n        return False\n    i=3\n    while(i*i<n):\n        if(n%i==0):\n            return False\n        i+=2\n    return True\n    \ndef is_prime_number_v2(n):\n    '''\n    Write a function to check whether the given number is a prime or not.\n    '''\n    if(n<=1):\n        return False\n    if(n==2):\n        return True\n    if(n%2==0):\n        return False\n    i=3\n    while(i*i<n):\n        if(n%i==0):\n            return False\n        i+=2\n    return True\n    \ndef is_prime_number_v3(n):\n    '''\n    Write a function to check whether the given number is a prime or not.\n    '''\n    if(n<=1):\n        return False\n    if(n==2):\n        return True\n    if(n%2==0):\n        return False\n    i=3\n    while(i*i<n):\n        if(n%i==0):\n            return False\n        i+=2\n    return True\n    \ndef is_prime_number_v4(n):\n    '''\n    Write a function to check whether the given number is a prime or not.\n    '''\n    if(n<=1):\n        return False\n    if(n==2):\n        return True\n    if(n%2==0):\n        return False\n    i=3\n    while(i*i<n):\n        if(n%i==0):\n            return False\n        i+=2\n    return True\n    \ndef is_prime_number_v5(n):\n    '''\n    Write a function to check whether the given number is a prime or not.\n    '''\n    if(n<=1):\n        return False\n    if(n==2):\n        return True\n    if(n%2==0):\n        return False\n    i=3\n    while(i*i<=n):\n        if(n%i==0):\n            return False\n        i+=2\n    return True\n    \ndef is_prime_number_v6(n):\n    '''\n    Write a function to check whether the given number is a prime or not.\n    '''\n    if(n<=1):\n        return False\n    if(n==2):\n        return True\n    if(n%2==0):\n        return False\n    i=3\n    while(i*i<=n):\n        if(n%i==0):\n            return False\n        i+=2\n    return True\n    \ndef is_prime_number_v7(n):\n    '''\n    Write a function to check whether the given number is a prime or not.\n    '''\n    if(n<=1):\n        return False\n    if(n==2):\n        return True\n    if(n%2==0):\n        return False\n    i=3\n    while(i*i<=n):\n        if(n%i==0):\n            return False\n        i+=2\n    return True\n    \ndef is_prime_number_v8(n):\n    '''\n    Write a function to check whether the given number is a prime or not.\n    '''\n    if(n<=1):\n        return False\n    if(n==2):\n        return True\n    if(n%2==0):\n        return False\n    i=3\n    while(i*i<=n):\n        if(n%i==0):\n            return False\n        i+=2\n    return True\n    \ndef is_prime_number_v9(n):\n    '''\n    Write a function to check whether the given number is a prime or not.\n    '''\n    if(n<=1):\n        return False\n    if(n==2):\n        return True\n    if(n%2==0):\n        return False\n    i=3\n    while(i*i<=n):\n        if(n%i==0):\n            return False\n        i+=2\n    return True\n    \ndef is_prime_number_v10(n):\n    '''\n    Write a function to check whether the given number is a prime or not.\n    '''\n    if(n<=1):\n        return False\n    if(n==2):\n        return True\n    if(n%2==0):\n        return False\n    i=3\n    while(i*i<=n):\n        if(n%i==0):\n            return False\n        i+=2\n    return True\n    \ndef is_prime_number_v11(n):\n    '''\n    Write a function to check whether the given number is a prime or not.\n    '''\n    if(n<=1):\n        return False\n    if(n==2):\n        return True\n    if(n%2==0):\n        return False\n    i=3\n    while(i*i<=n):\n        if(n%i==0):\n            return False\n        i+=2\n    return True\n    \ndef is_prime_number_v12(n):\n    '''\n    Write a function to check whether the given number is a prime or not.\n    '''\n    if(n<=1):\n        return False\n    if(n==2):\n        return True\n    if(n%2==0):\n        return False\n    i=3\n    while(i*i<=n):\n        if(n%i==0):\n            return False\n        i+=2\n    return True\n    \ndef is_prime_number_v13(n):\n    '''\n    Write a function to check whether the given number is a prime or not.\n    '''\n    if(n<=1):\n        return False\n    if(n==2):\n        return True\n    if(n%2==0):\n        return False\n    i=3\n    while(i*i<=n):\n        if(n%i==0):\n            return False\n        i+=2\n    return True\n    \ndef is_prime_number_v14(n):\n    '''\n    Write a function to check whether the given number is a prime or not.\n    '''\n    if(n<=1):\n        return False\n    if(n==2):\n        return True\n    if(n%2==0):\n        return False\n    i=3\n    while(i*i<=n):\n        if(n%i==0):\n            return False\n        i+=2\n    return True\n    \ndef is_prime_number_v15(n):\n    '''\n    Write a function to check whether the given number is a prime or not.\n    '''\n    if(n<=1):\n        return False\n    if(n==2):\n        return True\n    if(n%2==0):\n        return False\n    i=3\n    while(i*i<=n):\n        if(n%i==0):\n            return False\n        i+=2\n    return True\n    \ndef is_prime_number_v16",
        "num_ids": 91
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0 and n > 1:\n        return True\n    if n % 2!= 0 and n < 1:\n        return True\n    if n % 2 == 0 and n > 1:\n        return False\n    if n % 2!= 0 and n < 1:\n        return False\n",
        "num_ids": 72
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return (n%2==0 and n%3==0) or (n%2==1 and n%3==1)\n",
        "num_ids": 32
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a*power(a,b-1)\n",
        "num_ids": 30
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    return a*power(a,b-1)\n",
        "num_ids": 26
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if (type(a)!= int) or (type(b)!= int):\n        raise TypeError('Type of variable is not integer.')\n    if (a < 0) or (b < 0):\n        raise ValueError('Negative values are not allowed')\n    return a**b\n",
        "num_ids": 69
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a * power(a,b-1)\n    \n        \ndef factorial(n):\n    '''\n    Write a function to calculate the value of n! (n factorial)\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*factorial(n-1)\n        \ndef sum_digits(n):\n    '''\n    Write a function that takes a positive integer and returns the sum of its digits.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n%10 + sum_digits(n//10)\n        \ndef sum_digit_iterative(n):\n    '''\n    Write a function to return the sum of the digits of a number.\n    '''\n    num = n\n    sum = 0\n    while num!= 0:\n        sum += num % 10\n        num = num // 10\n    return sum\n    \ndef sum_digit(n):\n    '''\n    Write a function to return the sum of the digits of a number.\n    '''\n    if n == 0:\n        return 0\n    elif n%10 == 0:\n        return n//10 + sum_digit(n//10)\n    else:\n        return n%10 + sum_digit(n//10)\n    \ndef sum_of_squares(n):\n    '''\n    Write a function that takes a positive integer and returns the sum of the squares of the digits.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n % 10) * (n % 10) + sum_of_squares(n//10)\n        \ndef square_of_sum(n):\n    '''\n    Write a function that takes a positive integer and returns the sum of the squares of the digits.\n    '''\n    if n == 0:\n        return 0\n    elif n%10 == 0:\n        return (n//10)**2 + square_of_sum(n//10)\n    else:\n        return (n%10)**2 + square_of_sum(n//10)\n    \ndef is_palindrome(n):\n    '''\n    Write a function that takes a positive integer n and returns True if it is a palindrome, False otherwise.\n    '''\n    if n == 0:\n        return True\n    elif n%10 == 0:\n        return False\n    else:\n        if is_palindrome(n//10) == True:\n            return True\n        else:\n            return False\n    \ndef is_palindrome_iterative(n):\n    '''\n    Write a function that takes a positive integer n and returns True if it is a palindrome, False otherwise.\n    '''\n    if n == 0:\n        return True\n    elif n%10 == 0:\n        return False\n    else:\n        if is_palindrome_iterative(n//10) == True:\n            return True\n        else:\n            return False\n",
        "num_ids": 62
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a*power(a,b-1)\n",
        "num_ids": 42
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a*power(a,b-1)\n",
        "num_ids": 30
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 1:\n        return a\n    return a * power(a,b-1)\n",
        "num_ids": 26
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if len(test_list) == 0:\n        return None\n",
        "num_ids": 18
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list,key=itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0]\n    \n    \ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1), reverse=True)[0]\n",
        "num_ids": 25
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key = itemgetter(1))\n",
        "num_ids": 19
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #print(test_list)\n    test_list.sort(key=itemgetter(1))\n    #print(test_list)\n    #return test_list[0]\n    return test_list[0][0]\n",
        "num_ids": 57
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    a = itemgetter(1)\n    return min(test_list, key=a)\n",
        "num_ids": 25
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))\n",
        "num_ids": 19
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=itemgetter(1))\n    print(\"Index of minimum value: \", test_list[0])\n",
        "num_ids": 34
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # sort the list in ascending order by second element\n    test_list.sort(key=itemgetter(1))\n    return test_list[0][0]\n",
        "num_ids": 41
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = len(lst[0])\n    for i in lst:\n        if len(i) < min:\n            min = len(i)\n    return min\n",
        "num_ids": 43
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float(\"inf\")\n    for sublist in lst:\n        min_len = min(min_len,len(sublist))\n    return min_len\n",
        "num_ids": 44
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst_min = []\n    for i in range(len(lst)):\n        min_length = len(lst[i])\n        if min_length > len(lst_min):\n            lst_min = lst[i]\n    print(lst_min)\n    print(len(lst_min))\n",
        "num_ids": 82
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in range(1,len(lst)):\n        if min_len > len(lst[i]):\n            min_len = len(lst[i])\n    return min_len\n",
        "num_ids": 64
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst_min_len = 0\n    for i in lst:\n        if type(i) == type([]):\n            lst_min_len = min(len(i),lst_min_len)\n        else:\n            lst_min_len = min(len(i),lst_min_len)\n    return lst_min_len\n",
        "num_ids": 89
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest = len(lst)\n    for x in lst:\n        if len(x)<smallest:\n            smallest = len(x)\n    return smallest\n    \ndef Find_Min_Max(lst):\n    '''\n    Write a python function to find the minimum and maximum value of a list of integers.\n    '''\n    min = lst[0]\n    max = lst[0]\n    for x in lst:\n        if x<min:\n            min = x\n        if x>max:\n            max = x\n    return min,max\n    \ndef Find_Maximum_Element(lst):\n    '''\n    Write a python function to find the maximum element in a list of integers.\n    '''\n    max = 0\n    for x in lst:\n        if x>max:\n            max = x\n    return max\n    \ndef Find_Element_Count(lst,ele):\n    '''\n    Write a python function to find the number of occurences of a specific element in a list.\n    '''\n    count = 0\n    for x in lst:\n        if x == ele:\n            count +=1\n    return count\n    \ndef Find_Maximum_Index(lst):\n    '''\n    Write a python function to find the index of the maximum element in a list of integers.\n    '''\n    max_index = 0\n    for x in range(len(lst)):\n        if lst[x]>lst[max_index]:\n            max_index = x\n    return max_index\n    \ndef Find_Min_Index(lst):\n    '''\n    Write a python function to find the index of the minimum element in a list of integers.\n    '''\n    min_index = 0\n    for x in range(len(lst)):\n        if lst[x]<lst[min_index]:\n            min_index = x\n    return min_index\n    \ndef Find_Sum_of_Sorted_Array(lst):\n    '''\n    Write a python function to find the sum of a sorted array of integers.\n    '''\n    sum = 0\n    for x in range(len(lst)):\n        sum += lst[x]\n    return sum\n    \ndef Find_Sum_Of_Second_Index(lst):\n    '''\n    Write a python function to find the sum of a list of integers with the second index greater than the \n    first index.\n    '''\n    sum = 0\n    for x in range(len(lst)):\n        if lst[x]>lst[1]:\n            sum += lst[x]\n    return sum\n    \ndef Find_Second_Largest_Element(lst):\n    '''\n    Write a python function to find the second largest element in a list of integers.\n    '''\n    max = lst[0]\n    max_index = 0\n    for x in range(1,len(lst)):\n        if lst[x]>max:\n            max = lst[x]\n            max_index = x\n    return max,max_index\n    \ndef Find_Index_Of_Element_Matching_Value(lst,ele):\n    '''\n    Write a python function to find the index of an element matching a specific value.\n    '''\n    index = -1\n    for x in range(len(lst)):\n        if lst[x] == ele:\n            index = x\n            break\n    return index\n    \ndef Find_Index_Of_Element_Greater_Than_Or_Equal_To(lst,ele):\n    '''\n    Write a python function to find the index of an element greater than or equal to a specific value.\n    '''\n    for x in range(len(lst)):\n        if lst[x]>=ele:\n            return x\n    return -1\n    \ndef Find_Index_Of_Element_Greater_Than(lst,ele):\n    '''\n    Write a python function to find the index of an element greater than a specific value.\n    '''\n    for x in range(len(lst)):\n        if lst[x]>ele:\n            return x\n    return -1\n    \ndef Find_Index_Of_Element_Less_Than_Or_Equal_To(lst,ele):\n    '''\n    Write a python function to find the index of an element less than or equal to a specific value.\n    '''\n    for x in range(len(lst)):\n        if lst[x]<=ele:\n            return x\n    return -1\n    \ndef Find_Index_Of_Element_Less_Than(lst,ele):\n    '''\n    Write a python function to find the index of an element less than a specific value.\n    '''\n    for x in range(len(lst)):\n        if lst[x]<ele:\n            return x\n    return -1\n    \ndef Find_Number_Of_Same_Elements_In_Sorted_Array(lst):\n    '''\n    Write a python function to find the number of same elements in a sorted list of integers.\n    '''\n    count = 0\n    for x in range(len(lst)-1):\n        if lst[x]==lst[x+1]:\n            count +=1\n    return count\n    \ndef Find_Number_Of_Same_Elements_In_Reverse_Sorted_Array(lst):\n    '''\n    Write a python function to find the number of same elements in a reverse sorted list of integers.\n    '''\n    count = 0\n    for x in range(len(lst)-1):\n        if lst[x]==lst[x+1]:\n            count +=1\n    return count\n    \ndef Find_Number_Of_Different_Elements_In_Sorted_Array(lst):\n    '''\n    Write a python function to find the number of different elements in a sorted list of integers.\n    '''\n    count = 0\n    for x in range(len(lst)-1):\n        if lst[x]!=lst[x+1]:\n            count +=1\n    return count\n    \ndef Find_Number_Of_Different_Elements_In_Reverse_Sorted_Array(lst):\n    '''\n    Write a python function to find the number of different elements in a reverse sorted list of integers.\n    '''\n    count = 0\n    for x in range(len(lst)-1):\n        if lst[x]!=lst[x+1]:\n            count +=1\n    return count\n    \ndef Find_Number_Of_Distinct_Elements_In_Sorted_Array(lst):\n    '''\n    Write a python function to find the number of distinct elements in a sorted list of integers.\n    '''\n    count = 0\n    for x in range(len(lst)-1):\n        if lst[x]!=lst[x+1]:\n            count +=1\n    return count\n    \ndef Find_Number_Of_Distinct_Elements_In_Reverse_Sorted_Array(lst):\n    '''\n    Write a python function to find the number of distinct elements in a reverse sorted list of integers.\n    '''\n    count = 0\n    for x in range(len(lst)-1):\n        if lst[x]!=lst[x+1]:\n            count +=1\n    return count\n    \ndef Find_Number_Of_Distinct_Elements_In_Sorted_Array_Using_Set(lst):\n    '''\n    Write a python function to find the number of distinct elements in a sorted list of integers.\n    '''\n    count = 0\n    set_data = set()\n    for x in range(len(lst)-1):\n        if lst[x]!=lst[x+1]:\n            count +=1\n            set_data.add(lst[x])\n    return count\n    \ndef Find_Number_Of_Distinct_Elements_In_Reverse_Sorted_Array_Using_Set(lst):\n    '''\n    Write a python function to find the number of distinct elements in a reverse sorted list of integers.\n    '''\n    count = 0\n    set_data = set()\n    for x in range(len(lst)-1):\n        if lst[x]!",
        "num_ids": 37
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length=float('inf')\n    for i in lst:\n        if min_length > len(i):\n            min_length=len(i)\n    return min_length\n        \ndef Find_Longest_List(lst):\n    '''\n    Write a python function to find the length of the longest list in a list of lists.\n    '''\n    max_length=0\n    for i in lst:\n        if max_length < len(i):\n            max_length=len(i)\n    return max_length\n",
        "num_ids": 44
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    a=len(min(lst,key=len))\n    print(a)\n    return a\n",
        "num_ids": 27
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min=lst[0]\n    for i in range(1,len(lst)):\n        if len(lst[i])<len(min):\n            min=lst[i]\n    return len(min)\n",
        "num_ids": 57
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    list_list = lst\n    min_list = list_list[0]\n    for list in list_list:\n        if len(list) < len(min_list):\n            min_list = list\n    return len(min_list)\n",
        "num_ids": 61
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 1\n    for i in range(1, n+1):\n        if (n%i) == 0:\n            div += 1\n    return div\n",
        "num_ids": 40
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    num_of_divisors = 1\n    for i in range(2, n):\n        if n % i == 0:\n            num_of_divisors += 1\n    return num_of_divisors\n",
        "num_ids": 54
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n    \ndef sum_of_squares(n):\n    '''\n    Write a python function to find the sum of squares of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i * i\n    return sum\n    \ndef is_prime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n    \ndef get_price(people, drinks):\n    '''\n    Write a python function that returns the total price of a cafe.\n    '''\n    return people * drinks\n    \ndef cube_root(n):\n    '''\n    Write a python function to find the cube root of a given number.\n    '''\n    return n ** (1/3)\n    \ndef area_of_triangle(base, height):\n    '''\n    Write a python function to find the area of a triangle.\n    '''\n    return (base * height) / 2\n    \ndef get_grades(exam_grades):\n    '''\n    Write a python function to find the average of the grades of the students in a class.\n    '''\n    sum = 0\n    for i in exam_grades:\n        sum += i\n    return sum / len(exam_grades)\n    \ndef get_cubic_root(n):\n    '''\n    Write a python function to find the cubic root of a given number.\n    '''\n    return n ** (1/3)\n    \ndef is_palindrome(word):\n    '''\n    Write a python function to check whether a word is a palindrome or not.\n    '''\n    if len(word) <= 1:\n        return True\n    if word[0]!= word[-1]:\n        return False\n    return is_palindrome(word[1:-1])\n    \ndef get_coins(n):\n    '''\n    Write a python function to get the number of quarters, dimes, nickels, and pennies needed to make n money.\n    '''\n    quarters = n // 25\n    dimes = (n - quarters * 25) // 10\n    nickels = (n - quarters * 25 - dimes * 10) // 5\n    pennies = n - quarters * 25 - dimes * 10 - nickels * 5\n    return quarters, dimes, nickels, pennies\n    \ndef get_fibonacci(n):\n    '''\n    Write a python function to get the nth Fibonacci number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return get_fibonacci(n - 1) + get_fibonacci(n - 2)\n    \ndef get_fibonacci_huge(n, m):\n    '''\n    Write a python function to get the nth Fibonacci number,\n    where n is the index and m is the base.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return get_fibonacci_huge(n - 1, m) + get_fibonacci_huge(n - 2, m)\n    \ndef get_fibonacci_memoization(n, cache):\n    '''\n    Write a python function to get the nth Fibonacci number,\n    where n is the index and m is the base.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n in cache:\n        return cache[n]\n    cache[n] = get_fibonacci_memoization(n - 1, cache) + get_fibonacci_memoization(n - 2, cache)\n    return cache[n]\n    \ndef get_permutation(word, permutation):\n    '''\n    Write a python function to find if a string is a permutation of another string.\n    '''\n    if len(word)!= len(permutation):\n        return False\n    count = {}\n    for i in word:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    for j in permutation:\n        if j not in count:\n            return False\n        elif count[j] == 0:\n            return False\n        else:\n            count[j] -= 1\n    return True\n    \ndef get_permutations(word):\n    '''\n    Write a python function to get the permutations of a given string.\n    '''\n    if len(word) == 1:\n        return word\n    else:\n        temp = []\n        for i in range(len(word)):\n            char = word[i]\n            new = word[:i] + word[i + 1:]\n            temp.extend([char + permutation for permutation in get_permutations(new)])\n        return temp\n    \ndef get_nth_term(n, a, b):\n    '''\n    Write a python function to calculate nth term of a geometric series.\n    '''\n    if n == 1:\n        return a\n    return get_nth_term(n - 1, a * b, b)\n    \ndef get_largest_prime_factor(n):\n    '''\n    Write a python function to find the largest prime factor of a given number.\n    '''\n    if n <= 1:\n        return 1\n    while n % 2 == 0:\n        n = n / 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            n = n / i\n    return int(n)\n    \ndef get_largest_palindrome(n):\n    '''\n    Write a python function to find the largest palindrome less than or equal to a given integer.\n    '''\n    if n <= 1:\n        return 1\n    max_palindrome = 1\n    while max_palindrome <= n:\n        max_palindrome += 1\n        for i in range(int(max_palindrome / 2), 1, -1):\n            if max_palindrome % i == 0:\n                break\n        else:\n            return max_palindrome\n    return max_palindrome\n    \ndef get_lcm(a, b):\n    '''\n    Write a python function to find the least common multiple (LCM) of two numbers.\n    '''\n    if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return a\n    a, b = (a, b) if a > b else (b, a)\n    while a % b!= 0:\n        a, b = b, a % b\n    return a\n    \ndef get_lcm_naive(a, b):\n    '''\n    Write a python function to find the least common multiple (LCM) of two numbers.\n    '''\n    if a == 0 or b == 0:\n        return 0\n    while a % b!= 0:\n        a, b = b, a % b\n    return a\n    \ndef get_lcm_recursive(a, b):\n    '''\n    Write a python function to find the least common multiple (LCM) of two numbers.\n    '''\n    if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return a\n    if a > b:\n        return get_lcm_recursive(a - b, b)\n    return get_lcm_recursive(a, b - a)\n    \ndef get_gcd(a, b):\n    '''\n    Write a python function to find the greatest common divisor (GCD) of two numbers.\n    '''\n    if a == 0 or b == 0:\n        return 0\n    if a == b:\n        return a\n    while a!= 0:\n        a, b = b % a, a\n    return b",
        "num_ids": 50
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1,n//2+1):\n        if n%i == 0:\n            count+=1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1,n):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n",
        "num_ids": 42
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisor_count = 0\n    for i in range(1, n):\n        if n % i == 0:\n            divisor_count += 1\n    return divisor_count\n",
        "num_ids": 48
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    res = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            res += 1\n    return res\n",
        "num_ids": 38
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    \n    \n    # Initialize number of divisors\n    count = 0\n    \n    # Iterate to count the divisors\n    for i in range(1,n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "num_ids": 65
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for i in list1:\n        for j in i:\n            if j in d.keys():\n                d[j] += 1\n            else:\n                d[j] = 1\n    return d\n",
        "num_ids": 55
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    if not list1:\n        return dict()\n    count = dict()\n    for i in list1:\n        for j in i:\n            if j in count:\n                count[j] += 1\n            else:\n                count[j] = 1\n    return count\n",
        "num_ids": 66
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for elem in list1:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    return freq\n    \n",
        "num_ids": 57
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    result = {}\n    for element in list1:\n        if element in result:\n            result[element] += 1\n        else:\n            result[element] = 1\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dic = {}\n    for i in list1:\n        if i not in dic:\n            dic[i] = 1\n        else:\n            dic[i] += 1\n    return dic\n",
        "num_ids": 52
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    f=0\n    freq={}\n    for i in range(len(list1)):\n        if list1[i] in freq.keys():\n            freq[list1[i]]+=1\n        else:\n            freq[list1[i]]=1\n    return freq\n",
        "num_ids": 73
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    my_dictionary = {}\n    for num in list1:\n        if num in my_dictionary:\n            my_dictionary[num] += 1\n        else:\n            my_dictionary[num] = 1\n    return my_dictionary\n",
        "num_ids": 61
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq={}\n    for i in range(0,len(list1)):\n        if type(list1[i]) is int:\n            if list1[i] in freq:\n                freq[list1[i]] += 1\n            else:\n                freq[list1[i]] = 1\n        elif type(list1[i]) is list:\n            if list1[i] in freq:\n                freq[list1[i]] += 1\n            else:\n                freq[list1[i]] = 1\n    return freq\n",
        "num_ids": 135
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    my_dict = {}\n    for element in list1:\n        if element in my_dict:\n            my_dict[element] += 1\n        else:\n            my_dict[element] = 1\n    return my_dict\n",
        "num_ids": 56
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    #code here\n    l=len(list1)\n    d={}\n    for i in list1:\n        for j in i:\n            if j in d:\n                d[j]+=1\n            else:\n                d[j]=1\n    return d\n",
        "num_ids": 66
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    sum_list = 0\n    for num in numbers:\n        sum_list += num\n    return sum_list / len(numbers)\n",
        "num_ids": 35
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mul = 1\n    for n in numbers:\n        mul = mul * n\n    return mul / len(numbers)\n    \n    \n    \n    \n    \ndef solve_quadratic(a, b, c):\n    '''\n    Write a function to find the roots of the equation ax**2 + bx + c = 0.\n    '''\n    import math\n    D = b**2 - 4*a*c\n    if D > 0:\n        return (-b + math.sqrt(D))/(2*a), (-b - math.sqrt(D))/(2*a)\n    elif D == 0:\n        return -b/(2*a)\n    else:\n        return None\n    \n    \n    \ndef sort_array_by_element(nums):\n    '''\n    Write a function to sort an array with numbers by element.\n    '''\n    for i in range(1, len(nums)):\n        curr = nums[i]\n        while i>0 and nums[i-1] > curr:\n            nums[i] = nums[i-1]\n            i -= 1\n        nums[i] = curr\n    \n    \n    \ndef merge_sort(nums):\n    '''\n    Write a function to sort an array by element.\n    '''\n    def merge_sort_helper(arr, l, r):\n        if l < r:\n            mid = (l + r) // 2\n            merge_sort_helper(arr, l, mid)\n            merge_sort_helper(arr, mid+1, r)\n            merge(arr, l, mid, r)\n    \n    def merge(arr, l, mid, r):\n        i, j, k = l, mid+1, l\n        while i <= mid and j <= r:\n            if arr[i] <= arr[j]:\n                nums[k] = arr[i]\n                i += 1\n            else:\n                nums[k] = arr[j]\n                j += 1\n            k += 1\n        while i <= mid:\n            nums[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= r:\n            nums[k] = arr[j]\n            j += 1\n            k += 1\n            \n    merge_sort_helper(nums, 0, len(nums)-1)\n    \n    \n    \n    \ndef find_missing_number(nums):\n    '''\n    Write a function to find the missing number in an array without using any extra space.\n    '''\n    missing_n = 0\n    size = len(nums)\n    for i in range(size):\n        if i!= nums[i]:\n            missing_n = i\n            break\n    return missing_n\n    \n    \n    \ndef is_rotation(str1, str2):\n    '''\n    Write a function to check if one string is rotation of another.\n    '''\n    def check_rotation(str1, str2):\n        if str1 == str2:\n            return True\n        if len(str1)!= len(str2):\n            return False\n        if sorted(str1) == sorted(str2):\n            return True\n        return False\n    \n    return check_rotation(str1, str2) or check_rotation(str2, str1)\n    \n    \n    \ndef merge_lists(l1, l2):\n    '''\n    Write a function to merge two sorted linked lists.\n    '''\n    new_list = None\n    if l1 is None and l2 is None:\n        return None\n    if l1 is None:\n        return l2\n    if l2 is None:\n        return l1\n    if l1.val <= l2.val:\n        new_list = l1\n        new_list.next = merge_lists(l1.next, l2)\n    else:\n        new_list = l2\n        new_list.next = merge_lists(l1, l2.next)\n    return new_list\n    \n    \n    \ndef number_comparator(num1, num2):\n    '''\n    Write a function to compare the given number in a list.\n    '''\n    if num1 > num2:\n        return 1\n    elif num2 > num1:\n        return -1\n    return 0\n    \n    \n    \ndef reverse_linked_list(l):\n    '''\n    Write a function that reverses a linked list.\n    '''\n    pre = None\n    cur = l\n    while cur is not None:\n        next = cur.next\n        cur.next = pre\n        pre = cur\n        cur = next\n    return pre\n    \n    \n    \ndef delete_middle_node(head):\n    '''\n    Write a function that deletes the middle node of a linked list.\n    '''\n    pre = None\n    cur = head\n    while cur is not None:\n        if cur.next.next is None:\n            if pre is None:\n                cur = cur.next\n                break\n            pre.next = cur.next\n            break\n        cur = cur.next\n        pre = cur\n    \n    \n    \ndef swap_pairs(head):\n    '''\n    Write a function that swaps the position of the nodes in between every pair of nodes.\n    '''\n    cur = head\n    while cur is not None and cur.next is not None:\n        cur.val, cur.next.val = cur.next.val, cur.val\n        cur = cur.next.next\n    \n    \n    \ndef get_middle_node(head):\n    '''\n    Write a function that gets the middle node of a linked list.\n    '''\n    slow, fast = head, head\n    while fast.next is not None and fast.next.next is not None:\n        slow = slow.next\n        fast = fast.next.next\n    return slow\n    \n    \n    \ndef reverse_ll(head):\n    '''\n    Write a function that reverses the linked list.\n    '''\n    cur = head\n    pre = None\n    while cur is not None:\n        next = cur.next\n        cur.next = pre\n        pre = cur\n        cur = next\n    return pre\n    \n    \n    \ndef partition_list(l, val):\n    '''\n    Write a function that partitions the linked list into two linked lists.\n    '''\n    if l is None or val is None:\n        return None\n    left_head = None\n    left_tail = None\n    right_head = None\n    right_tail = None\n    cur = l\n    while cur is not None:\n        if cur.val < val:\n            if left_head is None:\n                left_head = cur\n                left_tail = left_head\n            else:\n                left_tail.next = cur\n                left_tail = left_tail.next\n        else:\n            if right_head is None:\n                right_head = cur\n                right_tail = right_head\n            else:\n                right_tail.next = cur\n                right_tail = right_tail.next\n        cur = cur.next\n    left_tail.next = right_head\n    right_tail.next = None\n    return left_head, right_head\n    \n    \n    \ndef get_sub_list(l1, l2):\n    '''\n    Write a function that gets the sub-list of the given list.\n    '''\n    cur = l1\n    while cur is not None and cur.next is not None:\n        if cur.val == l2.val:\n            l2 = l2.next\n        cur = cur.next\n    return cur\n    \n    \n    \ndef find_max_occurring_number(nums):\n    '''\n    Write a function that finds the maximum occurring number in the list.\n    '''\n    if len(nums) == 0:\n        return -1\n    d = {}\n    for i in nums:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return max(d, key=d.get)\n    \n    \n    \ndef detect_loop(nums):\n    '''\n    Write a function to detect if a given list contains a loop.\n    '''\n    if len(nums) == 0:\n        return False",
        "num_ids": 16
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for n in numbers:\n        result *= n\n    return result/len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for n in numbers:\n        result *= n\n    return result/len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    product /= len(numbers)\n    return product\n",
        "num_ids": 34
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    print(numbers[0] * numbers[1] * numbers[2] * numbers[3] * numbers[4] * numbers[5])\n    \n    \ndef greeting(name, age):  \n    '''\n    Write a function that can greet people by their name and their age.\n    '''\n    print(f\"Hi {name}, you are {age} years old.\")\n    \n    \ndef series():  \n    '''\n    Write a function that gets two numbers and return the sum of the products of the digits in each number.\n    '''\n    number = int(input(\"Enter a number: \"))\n    result = 0\n    while number!= 0:\n        result = result + (number % 10)\n        number = number // 10\n        \n    return result\n    \n    \ndef calc_binomial_coefficient(n, k):  \n    '''\n    Write a function that can calculate the Binomial Coefficient of n and k, e.g. if n = 5 and k = 3, then the result is 3.75\n    '''\n    if k == 0 or n == 0:\n        return 1\n    if k == n:\n        return 1\n    return (calc_binomial_coefficient(n - 1, k - 1) + calc_binomial_coefficient(n - 1, k)) * k\n    \n    \ndef get_primes(number):\n    '''\n    Write a function that can get the prime numbers between 0 and a given number.\n    '''\n    prime = []\n    for i in range(2, number):\n        flag = 1\n        for j in range(2, i):\n            if i % j == 0:\n                flag = 0\n                break\n        if flag:\n            prime.append(i)\n    return prime\n    \n    \ndef make_smash_bros_dictionary(name, values):\n    '''\n    Write a function to create a dictionary with the Smash Bros. The Legend of Zelda characters as keys and their values as values.\n    '''\n    smash_bros = {\"Pikachu\" : \"1\", \"Raichu\" : \"2\", \"Nidoran\": \"3\", \"Clefairy\" : \"4\", \"Clefable\" : \"5\", \"Mr. Mime\" : \"6\", \"Gengar\" : \"7\", \"Onix\" : \"8\", \"Drowzee\" : \"9\", \"Cubone\" : \"10\", \"Marowak\" : \"11\", \"Hitmonlee\" : \"12\", \"Hitmonchan\" : \"13\", \"Espeon\" : \"14\", \"Spinarak\" : \"15\", \"Magcargo\" : \"16\", \"Pichu\" : \"17\", \"Cleffa\" : \"18\", \"Igglybuff\" : \"19\", \"Toge\" : \"20\", \"Natu\" : \"21\", \"Poliwag\" : \"22\", \"Poliwhirl\" : \"23\", \"Poliwrath\" : \"24\", \"Abra\" : \"25\", \"Kadabra\" : \"26\", \"Alakazam\" : \"27\", \"Machop\" : \"28\", \"Machoke\" : \"29\", \"Machamp\" : \"30\", \"Bellsprout\" : \"31\", \"Weepinbell\" : \"32\", \"Victreebel\" : \"33\", \"Tentacool\" : \"34\", \"Tentacruel\" : \"35\", \"Geodude\" : \"36\", \"Graveler\" : \"37\", \"Golem\" : \"38\", \"Ponyta\" : \"39\", \"Rapidash\" : \"40\", \"Slowpoke\" : \"41\", \"Slowbro\" : \"42\", \"Magnemite\" : \"43\", \"Magneton\" : \"44\", \"Farfetch'd\" : \"45\", \"Doduo\" : \"46\", \"Dodrio\" : \"47\", \"Seel\" : \"48\", \"Dewgong\" : \"49\", \"Grimer\" : \"50\", \"Muk\" : \"51\", \"Shellder\" : \"52\", \"Cloyster\" : \"53\", \"Gastly\" : \"54\", \"Haunter\" : \"55\", \"Gengar\" : \"56\", \"Onix\" : \"57\", \"Drowzee\" : \"58\", \"Hypno\" : \"59\", \"Krabby\" : \"60\", \"Kingler\" : \"61\", \"Voltorb\" : \"62\", \"Electrode\" : \"63\", \"Exeggcute\" : \"64\", \"Exeggutor\" : \"65\", \"Cubone\" : \"66\", \"Marowak\" : \"67\", \"Hitmonchan\" : \"68\", \"Hitmonge\" : \"69\", \"Hitmontop\" : \"70\", \"Lileep\" : \"71\", \"Pichu\" : \"72\", \"Abra\" : \"73\", \"Kadabra\" : \"74\", \"Alakazam\" : \"75\", \"Machop\" : \"76\", \"Machoke\" : \"77\", \"Machamp\" : \"78\", \"Bellsprout\" : \"79\", \"Weepinbell\" : \"80\", \"Victreebel\" : \"81\", \"Tentacool\" : \"82\", \"Tentacruel\" : \"83\", \"Geodude\" : \"84\", \"Graveler\" : \"85\", \"Golem\" : \"86\", \"Ponyta\" : \"87\", \"Rapidash\" : \"88\", \"Slowpoke\" : \"89\", \"Slowbro\" : \"90\", \"Magnemite\" : \"91\", \"Magneton\" : \"92\", \"Farfetch'd\" : \"93\", \"Doduo\" : \"94\", \"Dodrio\" : \"95\", \"Seel\" : \"96\", \"Dewgong\" : \"97\", \"Grimer\" : \"98\", \"Muk\" : \"99\", \"Shellder\" : \"100\", \"Cloyster\" : \"101\", \"Gastly\" : \"102\", \"Haunter\" : \"103\", \"Gengar\" : \"104\", \"Onix\" : \"105\", \"Drowzee\" : \"106\", \"Hypno\" : \"107\", \"Krabby\" : \"108\", \"Kingler\" : \"109\", \"Voltorb\" : \"110\", \"Electrode\" : \"111\", \"Exeggcute\" : \"112\", \"Exeggutor\" : \"113\", \"Cubone\" : \"114\", \"Marowak\" : \"115\", \"Hitmonchan\" : \"116\", \"Hitmontop\" : \"117\", \"Lileep\" : \"118\", \"Pichu\" : \"119\", \"Abra\" : \"120\", \"Kadabra\" : \"121\", \"Alakazam\" : \"122\", \"Machop\" : \"123\", \"Machoke\" : \"124\", \"Machamp\" : \"125\", \"Bellsprout\" : \"126\", \"Weepinbell\" : \"127\", \"Victreebel\" : \"128\", \"Tentacool\" : \"129\", \"Tentacruel\" : \"130\", \"Geodude\" : \"131\", \"Graveler\" : \"132\", \"Golem\" : \"133\", \"Ponyta\" : \"134\", \"Rapidash\" : \"135\", \"Slowpoke\" : \"136\", \"Slowbro\" : \"137\", \"Magnemite\" : \"138\", \"Magneton\" : \"139\", \"Farfetch'd\" : \"140\", \"Doduo\" : \"141\", \"Dodrio\" : \"142\", \"Seel\" : \"143\", \"Dewgong\" : \"144\", \"Grimer\" : \"145\", \"Muk\" : \"146\", \"Shellder\" : \"147\", \"Cloyster\" : \"148\", \"Gastly\" : \"149\", \"Haunter\" : \"150\", \"Gengar\" : \"151\", \"Onix\" : \"152\", \"Drowzee\" : \"153\", \"Hypno\" : \"154\", \"Krabby\" : \"155\", \"Kingler\" : \"156\", \"Voltorb\" : \"157\", \"Electrode\" : \"158\", \"Exeggcute\" : \"159\", \"Exeggutor\" : \"160\", \"Cubone\" : \"161\", \"Marowak\" : \"162\", \"Hitmonchan\" : \"163\", \"Hitmontop\" : \"164\", \"Lileep\" : \"165\", \"Pichu\" : \"166\", \"Abra\" : \"167\", \"Kadabra\" : \"168\", \"Alakazam\" : \"169\", \"Machop\" : \"170\", \"Machoke\" : \"171\", \"Macham",
        "num_ids": 1540
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    num_product = 1\n    for num in numbers:\n        num_product *= num\n    return num_product/len(numbers)\n",
        "num_ids": 36
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total = total * num\n    return total / len(numbers)\n",
        "num_ids": 31
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    # Your code here\n    print('The multiplication is: ', end='')\n    \n    for i in range(len(numbers)):\n        print(numbers[i]*numbers[i], end=' ')\n        \n    print('')\n    print('The result of the multiplication is: ', end='')\n    \n    print(numbers[0]*numbers[1]*numbers[2]*numbers[3]*numbers[4])\n    \n    \ndef double_list(numbers):\n    '''\n    Write a function to double all the numbers in a list.\n    '''\n    \n    # Your code here\n    print('The list is: ', end='')\n    \n    for i in range(len(numbers)):\n        print(numbers[i], end=' ')\n    \n    print('')\n    print('The result of doubling is: ', end='')\n    \n    for i in range(len(numbers)):\n        numbers[i] = numbers[i] * 2\n        \n    print(*numbers)\n    \n    \ndef sum_nums(numbers):\n    '''\n    Write a function to sum all the numbers in a list.\n    '''\n    \n    # Your code here\n    print('The list is: ', end='')\n    \n    for i in range(len(numbers)):\n        print(numbers[i], end=' ')\n    \n    print('')\n    print('The sum is: ', end='')\n    \n    total = 0\n    \n    for i in range(len(numbers)):\n        total = total + numbers[i]\n        \n    print(total)\n    \n    \ndef average(numbers):\n    '''\n    Write a function to calculate the average of all the numbers in a list.\n    '''\n    \n    # Your code here\n    print('The list is: ', end='')\n    \n    for i in range(len(numbers)):\n        print(numbers[i], end=' ')\n    \n    print('')\n    print('The average is: ', end='')\n    \n    total = 0\n    \n    for i in range(len(numbers)):\n        total = total + numbers[i]\n        \n    average = total / len(numbers)\n    \n    print(average)\n    \n    \ndef reverse_list(numbers):\n    '''\n    Write a function to reverse a list.\n    '''\n    \n    # Your code here\n    print('The original list is: ', end='')\n    \n    for i in range(len(numbers)):\n        print(numbers[i], end=' ')\n    \n    print('')\n    print('The reversed list is: ', end='')\n    \n    numbers.reverse()\n    \n    for i in range(len(numbers)):\n        print(numbers[i], end=' ')\n    \n    \ndef swap_list(numbers):\n    '''\n    Write a function to swap two numbers in a list.\n    '''\n    \n    # Your code here\n    print('The original list is: ', end='')\n    \n    for i in range(len(numbers)):\n        print(numbers[i], end=' ')\n    \n    print('')\n    print('The swapped list is: ', end='')\n    \n    numbers[0], numbers[1] = numbers[1], numbers[0]\n    \n    for i in range(len(numbers)):\n        print(numbers[i], end=' ')\n    \n    \ndef binary_search(numbers, number_to_search):\n    '''\n    Write a function to search for a number in a sorted list using binary search.\n    '''\n    \n    # Your code here\n    print('The list is: ', end='')\n    \n    for i in range(len(numbers)):\n        print(numbers[i], end=' ')\n    \n    print('')\n    print('The number to search is: ', end='')\n    \n    print(number_to_search)\n    \n    first = 0\n    last = len(numbers) - 1\n    found = False\n    \n    while first <= last and not found:\n        mid = (first + last) // 2\n        \n        if numbers[mid] == number_to_search:\n            found = True\n        else:\n            if number_to_search < numbers[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\n                \n    if found:\n        print('The number was found!')\n    else:\n        print('The number was not found!')\n        \n    \ndef merge_list(numbers_1, numbers_2):\n    '''\n    Write a function to merge two sorted lists and return the merged list.\n    '''\n    \n    # Your code here\n    \n    print('The list 1 is: ', end='')\n    \n    for i in range(len(numbers_1)):\n        print(numbers_1[i], end=' ')\n    \n    print('')\n    print('The list 2 is: ', end='')\n    \n    for i in range(len(numbers_2)):\n        print(numbers_2[i], end=' ')\n    \n    print('')\n    \n    merged_list = []\n    \n    i, j = 0, 0\n    \n    while i < len(numbers_1) and j < len(numbers_2):\n        if numbers_1[i] < numbers_2[j]:\n            merged_list.append(numbers_1[i])\n            i += 1\n        else:\n            merged_list.append(numbers_2[j])\n            j += 1\n            \n    merged_list += numbers_1[i:]\n    merged_list += numbers_2[j:]\n    \n    print('The merged list is: ', end='')\n    \n    for i in range(len(merged_list)):\n        print(merged_list[i], end=' ')\n        \n    print('')\n    \n    \ndef main():\n    '''\n    Write a function that takes in a list of integers and returns the minimum and maximum of the list.\n    '''\n    \n    numbers = [10, 20, 30, 40, 50]\n    \n    print(f'The minimum of the list is: {min(numbers)}')\n    print(f'The maximum of the list is: {max(numbers)}')\n    \n    \n    \n    '''\n    Write a function that takes in a list of integers and returns a list of the minimums in the list.\n    '''\n    \n    numbers = [10, 20, 30, 40, 50]\n    \n    print('The minimum of the list is: ', end='')\n    \n    for i in range(len(numbers)):\n        print(numbers[i], end=' ')\n    \n    print('')\n    \n    print('The minimums of the list are: ', end='')\n    \n    min_numbers = []\n    \n    for i in range(len(numbers)):\n        min_numbers.append(min(numbers))\n        numbers.remove(min(numbers))\n        \n    for i in range(len(min_numbers)):\n        print(min_numbers[i], end=' ')\n    \n    print('')\n    \n    \n    '''\n    Write a function that takes in a list of integers and returns a list of the maximums in the list.\n    '''\n    \n    numbers = [10, 20, 30, 40, 50]\n    \n    print('The maximum of the list is: ', end='')\n    \n    for i in range(len(numbers)):\n        print(numbers[i], end=' ')\n    \n    print('')\n    \n    print('The maximums of the list are: ', end='')\n    \n    max_numbers = []\n    \n    for i in range(len(numbers)):\n        max_numbers.append(max(numbers))\n        numbers.remove(max(numbers))\n        \n    for i in range(len(max_numbers)):\n        print(max_numbers[i], end=' ')\n    \n    print",
        "num_ids": 180
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n > 1:\n        decimal_to_binary(n // 2)\n    \n    print(n % 2, end = '')\n    \nbinary_to_decimal = lambda n: n[::-1]\n",
        "num_ids": 55
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # your code here\n    binary = ''\n    while (n > 0): \n        binary = str(n % 2) + binary \n        n = n // 2\n    return binary \n",
        "num_ids": 47
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_string = \"\"\n    while n:\n        remainder = n % 2\n        binary_string = str(remainder) + binary_string\n        n = n // 2\n    return binary_string\n",
        "num_ids": 52
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    ans = \"\"\n    if n == 0:\n        return ans\n    if n == 1:\n        return \"1\"\n    while n > 1:\n        if n%2 == 0:\n            ans = ans + \"0\"\n            n = n/2\n        else:\n            ans = ans + \"1\"\n            n = n - 1\n    return ans\n",
        "num_ids": 87
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # if n == 0:\n    #     return \"0\"\n",
        "num_ids": 18
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    binary = \"\"\n    while n:\n        binary = str(n%2) + binary\n        n //= 2\n    return binary\n",
        "num_ids": 60
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    return decimal_to_binary(n//2)+str(n%2)\n",
        "num_ids": 34
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    s = \"\"\n    while n > 0:\n        if n%2 == 1:\n            s = \"1\" + s\n        else:\n            s = \"0\" + s\n        n = n // 2\n    return s\n",
        "num_ids": 69
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n",
        "num_ids": 11
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return str(0)\n    elif n < 0:\n        return '-' + decimal_to_binary(-n)\n",
        "num_ids": 38
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #lower, upper = 1, num\n    #while lower <= upper:\n    #    mid = (lower + upper)//2\n    #    if is_palindrome(mid) and (mid+1) <= num:\n    #        return mid+1\n    #    elif is_palindrome(mid):\n    #        lower = mid + 1\n    #    else:\n    #        upper = mid - 1\n    #return -1\n",
        "num_ids": 107
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # num = 123\n    # find 3'rd smallest palindrome\n    # 123\n    # 111\n    # 1111\n    # 11111\n    # 111111\n    # 1111111\n    # 111111111\n    # 11111111111\n",
        "num_ids": 59
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def get_palindrome_of_length(n):\n        if not n:\n            return ''\n        n = str(n)\n        for i in range(len(n)):\n            for j in range(len(n)):\n                if i == j:\n                    continue\n                s = n[i:j+1]\n                if s == s[::-1] and len(s) > 1:\n                    return int(s)\n        return int(n)\n    \n    while True:\n        result = get_palindrome_of_length(num)\n        if result > 0:\n            return result\n        num += 1\n",
        "num_ids": 153
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(number):\n        reverse = 0\n        while(number > 0):\n            last = number % 10\n            reverse = reverse * 10 + last\n            number = number//10\n        return reverse\n",
        "num_ids": 53
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    count = 1\n    nums = set()\n    while num!= nums and count < 1000000:\n        if num % 10 == 0:\n            nums.add(num)\n            count += 1\n        else:\n            nums.add(num * 10 + 9)\n            count += 1\n        num = num // 10\n    if num == 0:\n        return 1\n    if num == 9:\n        return 0\n    return num * 10 + 1\n",
        "num_ids": 110
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num <= 0:\n        return False\n    elif num == 1:\n        return 2\n    elif num == 2:\n        return 3\n    else:\n        counter = 2\n        while True:\n            temp = counter * counter\n            if num == temp:\n                return temp\n            else:\n                counter += 1\n",
        "num_ids": 78
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    str_num = str(num)\n    \n    # Handle edge case\n    if num < 10:\n        return num\n    \n    # Convert to array of digits\n    arr_num = []\n    for i in str_num:\n        arr_num.append(int(i))\n    \n    # Convert to reversed array of digits\n    rev_arr = arr_num[::-1]\n    \n    # Loop through each digit\n    for i in range(len(rev_arr)):\n        if rev_arr[i] == 0:\n            continue\n        \n        # Reset the count\n        count = 0\n        while count < 10:\n            if count == 0:\n                count += 1\n                continue\n            \n            # Add to count\n            arr_num[i] = count\n            count += 1\n            break\n            \n        # Find next smallest palindrome\n        # Check for +1 or -1\n        if count == 10:\n            arr_num[i] = count - 1\n            count -= 1\n        \n        # Convert to string\n        s_arr_num = str(arr_num)\n        s_str_num = s_arr_num[::-1]\n        \n        # Make sure palindrome\n        if s_str_num == s_str_num[::-1]:\n            return int(''.join(map(str, arr_num)))\n            \n    return -1\n    \nif __name__ == \"__main__\":\n    '''\n    Given an integer, return the next smallest palindrome from an array of digits.\n    '''\n    # input\n    for line in sys.stdin:\n        num = int(line.strip())\n        # print(num)\n        print(next_smallest_palindrome(num))",
        "num_ids": 47
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if is_palindrome(num):\n        return num\n    n = num\n    while n!= 1:\n        if is_palindrome(n):\n            return n\n        n = n//10\n",
        "num_ids": 52
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while True:\n        num = str(num)\n        num = ''.join(sorted(num))\n        if int(num) > int(num[::-1]):\n            num = int(num) - 1\n        else:\n            num = int(num)\n        return num\n    pass\n",
        "num_ids": 74
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num <= 0:\n        return -1\n    while num!= 2 ** (len(str(num)) - 1):\n        num -= 1\n    return num\n",
        "num_ids": 41
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # An array is ascending if and only if each element is smaller than its successor\n    # e.g. if we have [1,2,3,4,5], k = 3, then we return 4. The element 4 is the kth element\n    # because it is the smallest element in the array. Similarly, if we have [1,2,3,4,5],\n    # k = 5, then we return the last element.\n    # Your algorithm should run in linear time.\n    if k <= len(arr) and 0 < k:\n        # If the array contains multiple elements, use the index to keep track\n        # of the current kth element\n        index = 0\n        while k > 0 and index < len(arr):\n            if k > len(arr):\n                return\n            k -= 1\n            index += 1\n",
        "num_ids": 191
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    #list(range(k))\n    return arr[k-1]\n",
        "num_ids": 20
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return -1\n    lo = 0\n    hi = len(arr)-1\n    while lo < hi:\n        mid = (lo+hi)//2\n        if arr[mid] == k:\n            return arr[mid]\n        if arr[mid] < k:\n            lo = mid+1\n        else:\n            hi = mid-1\n    return arr[lo]\n",
        "num_ids": 101
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    '''\n    When the length of the array is 1, we can simply return the element.\n    \n    If the length of the array is 2, we can simply return the index of the kth element.\n    \n    If the length of the array is 3, we can check if k = 1, 2 or 3. If it is 1, return the 1st element; if it is 2, return the 2nd element; if it is 3, return the 3rd element.\n    '''\n    \n    l = 0\n    r = len(arr) - 1\n    \n    if r == k:\n        return arr[k]\n    if r < k:\n        return -1\n    \n    while l <= r:\n        mid = (l + r) // 2\n        if mid == k - 1:\n            return arr[k - 1]\n        elif mid == k:\n            return arr[k]\n        elif k > mid:\n            l = mid + 1\n        elif k < mid:\n            r = mid - 1\n    return -1\n",
        "num_ids": 135
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]\n",
        "num_ids": 11
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Edge case: empty array\n    if len(arr) == 0:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == k:\n            return arr[mid]\n        elif arr[mid] > k:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return None\n",
        "num_ids": 85
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    #initializing the pointer and the index variable\n    i = 0\n    index = k-1\n",
        "num_ids": 25
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # if len(arr) == k:\n    #     return arr[k-1]\n    # return arr[-k]\n",
        "num_ids": 33
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word[0].capitalize()+word[1:]\n",
        "num_ids": 17
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel = \"\"\n    for i in range(len(word)):\n        if word[i].isupper():\n            camel += word[i].lower()\n        else:\n            camel += word[i]\n    return camel\n",
        "num_ids": 58
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))\n",
        "num_ids": 24
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return \"\".join([word[0].upper(), word[1:]])\n",
        "num_ids": 21
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.replace('_','')\n    return word[0].capitalize() + word[1:]\n",
        "num_ids": 29
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))\n",
        "num_ids": 24
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    s = ''\n    for i in range(len(word)):\n        if word[i] == \"_\":\n            s += word[i+1].upper()\n        else:\n            s += word[i]\n    return s\n",
        "num_ids": 57
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(w.title() for w in words[1:])\n",
        "num_ids": 36
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([x.title() for x in word.split('_')])\n    # for i,char in enumerate(word):\n    #     if i == 0:\n    #         result += char.upper()\n    #     else:\n    #         result += char.lower()\n    # return result",
        "num_ids": 75
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    snake = []\n    for i in word:\n        if i.isupper():\n            snake.append('_')\n        snake.append(i)\n    return ''.join(snake).capitalize()\n",
        "num_ids": 54
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return 1\n    if m == 1:\n        return n\n    if n == 2:\n        return n * (n - 1)\n    a = 0\n    i = 0\n    while i < m:\n        a = a + eulerian_num(n - 2, m - 1)\n        i += 1\n    return a + eulerian_num(n - 1, m)\n",
        "num_ids": 100
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # define output\n    out = 0\n    # define counter\n    c = 0\n    # define vector\n    vec = []\n    # define temp\n    temp = 0\n    # define vector2\n    vec2 = []\n    # define output2\n    out2 = 0\n    # define counter2\n    c2 = 0\n    # define vector2\n    vec2 = []\n    # define temp2\n    temp2 = 0\n    # define counter3\n    c3 = 0\n    # define vector3\n    vec3 = []\n    # define temp3\n    temp3 = 0\n    # define counter4\n    c4 = 0\n    # define vector3\n    vec3 = []\n    # define temp3\n    temp3 = 0\n    # define counter5\n    c5 = 0\n    # define vector4\n    vec4 = []\n    # define temp4\n    temp4 = 0\n    # define counter6\n    c6 = 0\n    # define vector4\n    vec4 = []\n    # define temp4\n    temp4 = 0\n    # define counter7\n    c7 = 0\n    # define vector5\n    vec5 = []\n    # define temp5\n    temp5 = 0\n    # define counter8\n    c8 = 0\n    # define vector5\n    vec5 = []\n    # define temp5\n    temp5 = 0\n    # define counter9\n    c9 = 0\n    # define vector6\n    vec6 = []\n    # define temp6\n    temp6 = 0\n    # define counter10\n    c10 = 0\n    # define vector6\n    vec6 = []\n    # define temp6\n    temp6 = 0\n    # define counter11\n    c11 = 0\n    # define vector7\n    vec7 = []\n    # define temp7\n    temp7 = 0\n    # define counter12\n    c12 = 0\n    # define vector7\n    vec7 = []\n    # define temp7\n    temp7 = 0\n    # define counter13\n    c13 = 0\n    # define vector8\n    vec8 = []\n    # define temp8\n    temp8 = 0\n    # define counter14\n    c14 = 0\n    # define vector8\n    vec8 = []\n    # define temp8\n    temp8 = 0\n    # define counter15\n    c15 = 0\n    # define vector9\n    vec9 = []\n    # define temp9\n    temp9 = 0\n    # define counter16\n    c16 = 0\n    # define vector9\n    vec9 = []\n    # define temp9\n    temp9 = 0\n    # define counter17\n    c17 = 0\n    # define vector10\n    vec10 = []\n    # define temp10\n    temp10 = 0\n    # define counter18\n    c18 = 0\n    # define vector10\n    vec10 = []\n    # define temp10\n    temp10 = 0\n    # define counter19\n    c19 = 0\n    # define vector11\n    vec11 = []\n    # define temp11\n    temp11 = 0\n    # define counter20\n    c20 = 0\n    # define vector11\n    vec11 = []\n    # define temp11\n    temp11 = 0\n    # define counter21\n    c21 = 0\n    # define vector12\n    vec12 = []\n    # define temp12\n    temp12 = 0\n    # define counter22\n    c22 = 0\n    # define vector12\n    vec12 = []\n    # define temp12\n    temp12 = 0\n    # define counter23\n    c23 = 0\n    # define vector13\n    vec13 = []\n    # define temp13\n    temp13 = 0\n    # define counter24\n    c24 = 0\n    # define vector13\n    vec13 = []\n    # define temp13\n    temp13 = 0\n    # define counter25\n    c25 = 0\n    # define vector14\n    vec14 = []\n    # define temp14\n    temp14 = 0\n    # define counter26\n    c26 = 0\n    # define vector14\n    vec14 = []\n    # define temp14\n    temp14 = 0\n    # define counter27\n    c27 = 0\n    # define vector15\n    vec15 = []\n    # define temp15\n    temp15 = 0\n    # define counter28\n    c28 = 0\n    # define vector15\n    vec15 = []\n    # define temp15\n    temp15 = 0\n    # define counter29\n    c29 = 0\n    # define vector16\n    vec16 = []\n    # define temp16\n    temp16 = 0\n    # define counter30\n    c30 = 0\n    # define vector16\n    vec16 = []\n    # define temp16\n    temp16 = 0\n    # define counter31\n    c31 = 0\n    # define vector17\n    vec17 = []\n    # define temp17\n    temp17 = 0\n    # define counter32\n    c32 = 0\n    # define vector17\n    vec17 = []\n    # define temp17\n    temp17 = 0\n    # define counter33\n    c33 = 0\n    # define vector18\n    vec18 = []\n    # define temp18\n    temp18 = 0\n    # define counter34\n    c34 = 0\n    # define vector18\n    vec18 = []\n    # define temp18\n    temp18 = 0\n    # define counter35\n    c35 = 0\n    # define vector19\n    vec19 = []\n    # define temp19\n    temp19 = 0\n    # define counter36\n    c36 = 0\n    # define vector19\n    vec19 = []\n    # define temp19\n    temp19 = 0\n    # define counter37\n    c37 = 0\n    # define vector20\n    vec20 = []\n    # define temp20\n    temp20 = 0\n    # define counter38\n    c38 = 0\n    # define vector20\n    vec20 = []\n    # define temp20\n    temp20 = 0\n    # define counter39\n    c39 = 0\n    # define vector21\n    vec21 = []\n    # define temp21\n    temp21 = 0\n    # define counter40\n    c40 = 0\n    # define vector21\n    vec21 = []\n    # define temp21\n    temp21 = 0\n    # define counter41\n    c41 = 0\n    # define vector22\n    vec22 = []\n    # define temp22\n    temp22 = 0\n    # define counter42\n    c42 = 0\n    # define vector22\n    vec22 = []\n    # define temp22\n    temp22 = 0\n    # define counter43\n    c43 = 0\n    # define vector23\n    vec23 = []\n    # define temp23\n    temp23 = 0\n    # define counter44\n    c44 = 0\n    # define vector23\n    vec23 = []\n    # define temp23\n    temp23 = 0\n    # define counter45\n    c45 = 0\n    # define vector24\n    vec24 = []\n    # define temp24\n    temp24 = 0\n    # define counter46\n    c46 = 0\n    # define vector24\n    vec24 = []\n    # define temp24\n    temp24 = 0\n    # define counter47\n    c47 = 0\n    # define vector25\n    vec25 = []\n    # define temp25\n    temp25 = 0\n    # define counter48\n    c48 = 0\n    # define vector25\n    vec25 = []\n    # define temp25\n    temp25 = 0\n    # define counter49\n    c49 = 0\n    # define vector26\n    vec26 = []\n    # define temp26\n    temp26 = 0\n    # define counter50\n    c50 = 0\n    # define vector26\n    vec26 = []\n    # define temp26\n    temp26 = 0\n    # define counter51\n    c51 = 0\n    # define vector27\n    vec27 = []\n    # define temp27\n    temp27 = 0\n    # define counter52\n    c52 = 0\n    # define vector27\n    vec27 = []\n    # define temp27\n    temp27 = 0\n    # define counter53\n    c53 = 0\n    # define vector28\n    vec28 = []\n    # define temp28\n    temp28 = 0\n    # define counter54\n    c54 = 0\n    # define vector28\n    vec28 = []\n    # define temp28\n    temp28 = 0\n    # define counter55\n    c55 = 0\n    # define vector29\n    vec29 = []\n    # define temp29\n    temp29 = 0\n",
        "num_ids": 2010
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 and m == 0:\n        return 1\n    elif n == 0 and m == 1:\n        return 0\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)\n",
        "num_ids": 65
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def prime_list(n):\n        '''\n        A function to generate all prime numbers\n        less than or equal to n.\n        '''\n        sieve = list(range(3, n+1, 2))\n        for i in range(3, int(n**0.5)+1, 2):\n            if sieve[i] == 2:\n                sieve[i] = None\n                continue\n            for j in range(i*i, len(sieve), i):\n                if sieve[j]!= None:\n                    sieve[j] = None\n        sieve = [item for item in sieve if item!= None]\n        return sieve\n",
        "num_ids": 125
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    d = [[0 for i in range(n)] for j in range(n)]\n    \n    for i in range(1, n + 1):\n        d[0][i] = m\n        \n    for i in range(1, n):\n        d[i][i + 1] = m\n        \n    for i in range(2, n):\n        for j in range(n):\n            if j <= i - 1:\n                d[i][j] = d[i - 1][j] + d[i - 1][j + 1]\n            else:\n                d[i][j] = d[i - 1][j]\n        \n    for j in range(n):\n        d[n - 1][j] = m\n        \n    return d[n - 1][0] + d[n - 1][n - 1]\n",
        "num_ids": 199
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return m * n\n",
        "num_ids": 8
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if adj[i][j] == 0 and visited[i][j] == 0:\n                ans += 1\n                visited[i][j] = 1\n                break\n    return ans\n",
        "num_ids": 69
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n > m:\n        return eulerian_num(m, n)\n    if n == m:\n        return 1\n    else:\n        return eulerian_num(n-1, m-1) + eulerian_num(n-1, m) + eulerian_num(n, m-1)\n",
        "num_ids": 80
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 or m == 0:\n        return 0\n    # if (n!= m and n!= 1) or (n == 1 and m!= 1):\n    #     return -1\n    # return a(n-1, m) + a(n, m-1)\n    dp = [[0] * (m + 1) for i in range(n + 1)]\n    # \u4ece0\u5230n\u521d\u59cb\u5316dp\u6570\u7ec4\n    for i in range(n + 1):\n        dp[i][0] = 1\n    for i in range(1, m + 1):\n        dp[0][i] = 1\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            dp[i][j] = dp[i][j - 1] + dp[i - 1][j]\n    return dp[n][m]\n",
        "num_ids": 223
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n==0:\n        return 0\n    else:\n        return (n+m-1)//(m+1)\n",
        "num_ids": 33
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list\n",
        "num_ids": 39
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    input_list = list(input_list)\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n",
        "num_ids": 44
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n",
        "num_ids": 32
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    input_list.sort(key=len)\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n",
        "num_ids": 44
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n        \n        \n    return input_list\n    \n    \n    \n    \ndef sort_by_length(list_of_strings):\n    '''\n    Write a function to sort a given list of strings by length.\n    '''\n    \n    list_of_strings.sort(key=len)\n    return list_of_strings\n    \n    \ndef sort_by_length_new_method(list_of_strings):\n    '''\n    Write a function to sort a given list of strings by length.\n    '''\n    list_of_strings.sort(key=lambda x:len(x))\n    return list_of_strings\n    \ndef sort_by_length_2(list_of_strings):\n    '''\n    Write a function to sort a given list of strings by length.\n    '''\n    return sorted(list_of_strings, key=len)\n    \n",
        "num_ids": 19
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sub_lists = []\n    for sublist in input_list:\n        sub_lists.append(sorted(sublist))\n    return sub_lists\n",
        "num_ids": 39
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # input_list = [[1,3,5], ['a','b','c'], ['c','a','b'], ['b','a','c']]\n    for sublist in input_list:\n        sublist.sort()\n    # return [['a','b','c'], ['c','a','b'], ['b','a','c'], ['a','b','c']]\n",
        "num_ids": 94
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n",
        "num_ids": 32
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n",
        "num_ids": 19
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Create a list of lists to hold sublists\n    output_list = [[]]\n    # Add elements to the output list\n    for i in range(len(input_list)):\n        # Add a new list to the output list\n        output_list.append([])\n        # Add items from the sublists to the output_list\n        for j in range(len(input_list[i])):\n            output_list[i+1].append(input_list[i][j])\n    # Return the output list\n    return output_list\n",
        "num_ids": 128
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(1 for i in lst if i)\n",
        "num_ids": 16
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    cnt=0\n    for i in lst:\n        if i:\n            cnt+=1\n    return cnt\n",
        "num_ids": 32
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([x for x in lst if x])\n",
        "num_ids": 16
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count_true = 0\n    for i in range(len(lst)):\n        if lst[i] == True:\n            count_true = count_true + 1\n    return count_true\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2016
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    lst = lst\n    count = 0\n    for i in range(0, len(lst)):\n        if lst[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    print(f\"Count of True items in the list: {count}\")\n",
        "num_ids": 45
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for x in lst:\n        if(x == True):\n            count = count + 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count = count + 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i:\n            count=count+1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    \n    try:\n        test_list.append(test_tup)\n        print(\"Added new list to the test list: \", test_list)\n    except AttributeError:\n        print(\"the list must be a list\")\n    \n    return test_list\n    \n    \n",
        "num_ids": 68
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    print(test_list)\n    return\n",
        "num_ids": 26
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_list:\n        test_tup.append(i)\n",
        "num_ids": 22
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup.append(test_list[i])\n    return test_tup\n",
        "num_ids": 38
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Iterate through the list and append the tuples to the list\n    for i in range(0, len(test_tup)):\n        test_list.append(test_tup[i])\n    return test_list\n",
        "num_ids": 56
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    ans=[]\n    l1=len(num1)\n    l2=len(num2)\n    l3=len(num3)\n    i,j,k=0,0,0\n    while(i<l1 and j<l2 and k<l3):\n        if num1[i]<=num2[j]:\n            ans.append(num1[i])\n            i+=1\n        else:\n            ans.append(num2[j])\n            j+=1\n        if j<l2:\n            ans.append(num2[j])\n        if i<l1:\n            ans.append(num1[i])\n        if k<l3:\n            ans.append(num3[k])\n        k+=1\n    return ans\n",
        "num_ids": 186
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list1 = num1\n    list2 = num2\n    list3 = num3\n    list1_len = len(list1)\n    list2_len = len(list2)\n    list3_len = len(list3)\n    l1 = l2 = l3 = 0\n    new_list = []\n    while l1 < list1_len and l2 < list2_len and l3 < list3_len:\n        if list1[l1] <= list2[l2] and list1[l1] <= list3[l3]:\n            new_list.append(list1[l1])\n            l1 += 1\n        elif list2[l2] <= list1[l1] and list2[l2] <= list3[l3]:\n            new_list.append(list2[l2])\n            l2 += 1\n        else:\n            new_list.append(list3[l3])\n            l3 += 1\n    while l1 < list1_len:\n        new_list.append(list1[l1])\n        l1 += 1\n    while l2 < list2_len:\n        new_list.append(list2[l2])\n        l2 += 1\n    while l3 < list3_len:\n        new_list.append(list3[l3])\n        l3 += 1\n    return new_list\n",
        "num_ids": 329
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #defining varaibles\n    num_array = []\n    num1_index = 0\n    num2_index = 0\n    num3_index = 0\n    #defining conditionals\n    while num1_index < len(num1) and num2_index < len(num2) and num3_index < len(num3):\n        #checking if num1 is greater than num2\n        if num1[num1_index] > num2[num2_index]:\n            #num1 is greater so num1 goes to the end\n            num1_index += 1\n        else:\n            #if num2 is greater than num1\n            #num2 goes to the end\n            num2_index += 1\n        #checking if num3 is greater than num2\n        if num3[num3_index] > num2[num2_index]:\n            #if num3 is greater than num2\n            #num3 goes to the end\n            num3_index += 1\n        else:\n            #if num2 is greater than num3\n            #num2 goes to the end\n            num2_index += 1\n        #taking in num1 and num2\n        if num1[num1_index] < num2[num2_index]:\n            #if num1 is smaller than num2\n            #appending num1 to num_array\n            num_array.append(num1[num1_index])\n            #setting num1_index to be equal to num2_index\n            num1_index = num2_index\n        else:\n            #if num2 is smaller than num1\n            #appending num2 to num_array\n            num_array.append(num2[num2_index])\n            #setting num2_index to be equal to num1_index\n            num2_index = num1_index\n    #adding the rest of the num1 and num2\n    num_array += num1[num1_index:]\n    num_array += num2[num2_index:]\n    #adding num3 to num_array\n    num_array += num3[num3_index:]\n    return num_array\n",
        "num_ids": 496
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #first sort the lists\n    num1 = sorted(num1)\n    num2 = sorted(num2)\n    num3 = sorted(num3)\n    #merge the lists\n    return sorted(num1 + num2 + num3)\n",
        "num_ids": 60
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    new_list=[]\n    if num1==[]:\n        return num2\n    if num2==[]:\n        return num3\n    if num3==[]:\n        return num1\n    for i in range(len(num1)):\n        if num1[i]<num2[i]:\n            new_list.append(num1[i])\n            if num1[i]<num3[i]:\n                new_list.append(num3[i])\n                if num2[i]<num3[i]:\n                    new_list.append(num2[i])\n                    if num3[i]<num2[i]:\n                        new_list.append(num1[i])\n    return new_list\n",
        "num_ids": 175
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list_to_return = []\n    \n    while len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n        if num1[0] <= num2[0] and num1[0] <= num3[0]:\n            list_to_return.append(num1[0])\n            num1 = num1[1:]\n        elif num2[0] <= num1[0] and num2[0] <= num3[0]:\n            list_to_return.append(num2[0])\n            num2 = num2[1:]\n        else:\n            list_to_return.append(num3[0])\n            num3 = num3[1:]\n    \n    if len(num1) > 0:\n        list_to_return += num1\n    if len(num2) > 0:\n        list_to_return += num2\n    if len(num3) > 0:\n        list_to_return += num3\n    \n    return list_to_return\n",
        "num_ids": 247
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    while num1 or num2 or num3:\n        if not num1:\n            result.append(num3[0])\n            num3.pop(0)\n        elif not num2:\n            result.append(num1[0])\n            num1.pop(0)\n        elif not num3:\n            result.append(num2[0])\n            num2.pop(0)\n        else:\n            if num1[0] < num2[0]:\n                result.append(num1[0])\n                num1.pop(0)\n            else:\n                result.append(num2[0])\n                num2.pop(0)\n    return result\n",
        "num_ids": 168
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    while num1 or num2 or num3:\n        if num1:\n            merged_list.append(num1.pop(0))\n        if num2:\n            merged_list.append(num2.pop(0))\n        if num3:\n            merged_list.append(num3.pop(0))\n    merged_list.sort()\n    return merged_list\n",
        "num_ids": 103
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    def merge_sort(a):\n        if len(a)<=1:\n            return a\n        return merge(merge_sort(a[:len(a)//2]),merge_sort(a[len(a)//2:]))\n    def merge(a,b):\n        i,j=0,0\n        c=[]\n        while i<len(a) and j<len(b):\n            if a[i]<=b[j]:\n                c.append(a[i])\n                i+=1\n            else:\n                c.append(b[j])\n                j+=1\n        c+=a[i:]\n        c+=b[j:]\n        return c\n    return merge_sort(num1)+merge_sort(num2)+merge_sort(num3)\n    \ndef merge_k_lists(lists):\n    '''\n    Write a function to merge k sorted lists into a single sorted list.\n    '''\n    def merge_sort(a):\n        if len(a)<=1:\n            return a\n        return merge(merge_sort(a[:len(a)//2]),merge_sort(a[len(a)//2:]))\n    def merge(a,b):\n        i,j=0,0\n        c=[]\n        while i<len(a) and j<len(b):\n            if a[i]<=b[j]:\n                c.append(a[i])\n                i+=1\n            else:\n                c.append(b[j])\n                j+=1\n        c+=a[i:]\n        c+=b[j:]\n        return c\n    def merge_heap(lists,n):\n        heap=[]\n        for i in range(n):\n            heapq.heappush(heap,(lists[i],i))\n        lists=[]\n        while len(heap)!=0:\n            lists.append(heapq.heappop(heap)[1])\n        return lists\n    lists=merge_heap(lists,len(lists))\n    return merge_sort(lists)\n    \ndef find_first_k(lists,k):\n    '''\n    Write a function to find the first k numbers of a list.\n    '''\n    def first_k_numbers(numbers,k):\n        if k==1:\n            return numbers\n        else:\n            return first_k_numbers(numbers[1:],k-1) + numbers[0:1]\n    return first_k_numbers(lists,k)\n    \ndef find_first_k_minus_one(lists,k):\n    '''\n    Write a function to find the first k-1 numbers of a list.\n    '''\n    def first_k_numbers(numbers,k):\n        if k==1:\n            return numbers\n        else:\n            return first_k_numbers(numbers[1:],k-1) + numbers[0:1]\n    return first_k_numbers(lists,k)\n    \ndef find_first_k_equal_numbers(lists,k):\n    '''\n    Write a function to find the first k numbers of a list.\n    '''\n    def first_k_numbers(numbers,k):\n        if k==1:\n            return numbers\n        else:\n            return first_k_numbers(numbers[1:],k-1) + numbers[0:1]\n    return first_k_numbers(lists,k)\n    \ndef find_max_in_list(lists):\n    '''\n    Write a function to find the maximum number in a list.\n    '''\n    def max_in_list(lists):\n        if len(lists)==0:\n            return -1\n        else:\n            return max(lists)\n    return max_in_list(lists)\n    \ndef find_max_in_list_2(lists):\n    '''\n    Write a function to find the maximum number in a list.\n    '''\n    def max_in_list(lists,max_):\n        if len(lists)==0:\n            return -1\n        elif lists[0]>max_:\n            return lists[0]\n        else:\n            return max_in_list(lists[1:],max_)\n    return max_in_list(lists,float('-inf'))\n    \ndef find_max_in_list_3(lists):\n    '''\n    Write a function to find the maximum number in a list.\n    '''\n    def find_max_in_list_1(lists,max_):\n        if len(lists)==0:\n            return -1\n        elif lists[0]>max_:\n            return find_max_in_list_1(lists[1:],max_)\n        else:\n            return max_in_list_1(lists[1:],lists[0],max_)\n    def max_in_list_1(lists,max_,max_2):\n        if len(lists)==0:\n            return -1\n        elif lists[0]>max_:\n            return max_in_list_1(lists[1:],max_,max_2)\n        elif lists[0]>max_2:\n            return max_in_list_1(lists[1:],max_,lists[0])\n        else:\n            return max_in_list_1(lists[1:],max_2,max_2)\n    return find_max_in_list_1(lists,float('-inf'))\n    \ndef find_max_in_list_4(lists):\n    '''\n    Write a function to find the maximum number in a list.\n    '''\n    def max_in_list_2(lists,max_):\n        if len(lists)==0:\n            return -1\n        if lists[0]>max_:\n            return max_in_list_2(lists[1:],max_)\n        else:\n            return max_in_list_2(lists[1:],lists[0],max_)\n    def max_in_list_1(lists,max_):\n        if len(lists)==0:\n            return -1\n        elif lists[0]>max_:\n            return max_in_list_1(lists[1:],max_)\n        else:\n            return max_in_list_1(lists[1:],lists[0],max_)\n    def max_in_list_3(lists,max_,max_2):\n        if len(lists)==0:\n            return -1\n        elif lists[0]>max_:\n            return max_in_list_3(lists[1:],max_,max_2)\n        elif lists[0]>max_2:\n            return max_in_list_3(lists[1:],max_,lists[0])\n        else:\n            return max_in_list_3(lists[1:],max_2,max_2)\n    return max_in_list_2(lists,float('-inf'))\n    \ndef find_max_in_list_5(lists):\n    '''\n    Write a function to find the maximum number in a list.\n    '''\n    def max_in_list_2(lists,max_):\n        if len(lists)==0:\n            return -1\n        if lists[0]>max_:\n            return max_in_list_2(lists[1:],max_)\n        elif lists[0]>max_2:\n            return max_in_list_2(lists[1:],max_,max_2)\n        else:\n            return max_in_list_2(lists[1:],max_2)\n    def max_in_list_1(lists,max_):\n        if len(lists)==0:\n            return -1\n        elif lists[0]>max_:\n            return max_in_list_1(lists[1:],max_)\n        else:\n            return max_in_list_1(lists[1:],lists[0],max_)\n    def max_in_list_3(lists,max_,max_2):\n        if len(lists)==0:\n            return -1\n        elif lists[0]>max_:\n            return max_in_list",
        "num_ids": 266
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #Inputs: num1=list1, num2=list2, num3=list3\n    #Output: list_merge=list1+list2+list3\n    #sorted = sorted(num1 + num2 + num3)\n    #return sorted\n    #3. write code to merge sorted list\n    #print(num1)\n    #print(num2)\n    #print(num3)\n    \n    list_merge = []\n    for x in range(0,len(num1)):\n        list_merge.append(num1[x])\n    for x in range(0,len(num2)):\n        list_merge.append(num2[x])\n    for x in range(0,len(num3)):\n        list_merge.append(num3[x])\n    #print(list_merge)\n    return sorted(list_merge)\n",
        "num_ids": 217
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #code here\n    return 'odd_Equivalent function'\n    \ndef move_To_The_Center(s): \n    '''\n    Write a python function to move all the values in the string to the center of the string.\n    '''\n    #code here\n    return'move_To_The_Center function'\n    \ndef move_One_Character(s): \n    '''\n    Write a python function to move the given number of characters to the left in the given string. \n    '''\n    #code here\n    return'move_One_Character function'\n    \ndef move_All_Characters(s): \n    '''\n    Write a python function to move all the characters to the left in the given string.\n    '''\n    #code here\n    return'move_All_Characters function'\n    \ndef Reverse(s): \n    '''\n    Write a python function to reverse the string.\n    '''\n    #code here\n    return 'Reverse function'\n    \ndef Word_To_Numbers(s): \n    '''\n    Write a python function to replace every word in the string with its corresponding number.\n    '''\n    #code here\n    return 'Word_To_Numbers function'\n    \ndef Lower_Case_String(s): \n    '''\n    Write a python function to convert the string to lower case.\n    '''\n    #code here\n    return 'Lower_Case_String function'\n    \ndef Upper_Case_String(s): \n    '''\n    Write a python function to convert the string to upper case.\n    '''\n    #code here\n    return 'Upper_Case_String function'\n    \ndef Upper_Lower_Case_String(s): \n    '''\n    Write a python function to convert the string to upper case and then lower case.\n    '''\n    #code here\n    return 'Upper_Lower_Case_String function'\n    \ndef remove_duplicate(s): \n    '''\n    Write a python function to remove the duplicate characters in the string.\n    '''\n    #code here\n    return'remove_duplicate function'\n    \ndef remove_spaces(s): \n    '''\n    Write a python function to remove the spaces in the string.\n    '''\n    #code here\n    return'remove_spaces function'\n    \ndef count_characters(s): \n    '''\n    Write a python function to count the characters in the given string.\n    '''\n    #code here\n    return 'count_characters function'\n    \ndef count_characters_of_word(s): \n    '''\n    Write a python function to count the characters in the given word.\n    '''\n    #code here\n    return 'count_characters_of_word function'\n    \ndef first_word_count(s): \n    '''\n    Write a python function to count the first word in the given string.\n    '''\n    #code here\n    return 'first_word_count function'\n    \ndef last_word_count(s): \n    '''\n    Write a python function to count the last word in the given string.\n    '''\n    #code here\n    return 'last_word_count function'\n    \ndef count_words(s): \n    '''\n    Write a python function to count the words in the given string.\n    '''\n    #code here\n    return 'count_words function'\n    \ndef first_word_in_reverse(s): \n    '''\n    Write a python function to find the first word in the given string in reverse.\n    '''\n    #code here\n    return 'first_word_in_reverse function'\n    \ndef last_word_in_reverse(s): \n    '''\n    Write a python function to find the last word in the given string in reverse.\n    '''\n    #code here\n    return 'last_word_in_reverse function'\n    \ndef count_first_word_in_reverse(s): \n    '''\n    Write a python function to count the first word in the given string in reverse.\n    '''\n    #code here\n    return 'count_first_word_in_reverse function'\n    \ndef count_last_word_in_reverse(s): \n    '''\n    Write a python function to count the last word in the given string in reverse.\n    '''\n    #code here\n    return 'count_last_word_in_reverse function'\n    \ndef reverse_words_order(s): \n    '''\n    Write a python function to reverse the words in the given string.\n    '''\n    #code here\n    return'reverse_words_order function'\n    \ndef return_characters_after_nth_index(s,n): \n    '''\n    Write a python function to return the characters after nth index.\n    '''\n    #code here\n    return'return_characters_after_nth_index function'\n    \ndef capitalize(s): \n    '''\n    Write a python function to capitalize the first character of the string.\n    '''\n    #code here\n    return 'capitalize function'\n    \ndef capitalize_first_character_of_each_word(s): \n    '''\n    Write a python function to capitalize the first character of each word.\n    '''\n    #code here\n    return 'capitalize_first_character_of_each_word function'\n    \ndef first_word_capitalize(s): \n    '''\n    Write a python function to capitalize the first word of the string.\n    '''\n    #code here\n    return 'first_word_capitalize function'\n    \ndef last_word_capitalize(s): \n    '''\n    Write a python function to capitalize the last word of the string.\n    '''\n    #code here\n    return 'last_word_capitalize function'\n    \ndef first_letter_capitalize(s): \n    '''\n    Write a python function to capitalize the first letter of the string.\n    '''\n    #code here\n    return 'first_letter_capitalize function'\n    \ndef upper_case_first_letter(s): \n    '''\n    Write a python function to capitalize the first letter of the string.\n    '''\n    #code here\n    return 'upper_case_first_letter function'\n    \ndef upper_case_first_word(s): \n    '''\n    Write a python function to capitalize the first word of the string.\n    '''\n    #code here\n    return 'upper_case_first_word function'\n    \ndef upper_case_last_word(s): \n    '''\n    Write a python function to capitalize the last word of the string.\n    '''\n    #code here\n    return 'upper_case_last_word function'\n    \ndef capital_letter_case_converter(s): \n    '''\n    Write a python function to convert all the lower case letters in the string to capital case.\n    '''\n    #code here\n    return 'capital_letter_case_converter function'\n    \ndef is_palindrome(s): \n    '''\n    Write a python function to determine whether the string is a palindrome or not.\n    '''\n    #code here\n    return 'is_palindrome function'\n    \ndef last_character_of_last_word(s): \n    '''\n    Write a python function to return the last character of the last word of the string.\n    '''\n    #code here\n    return 'last_character_of_last_word function'\n    \ndef to_upper_case(s): \n    '''\n    Write a python function to convert the string to upper case.\n    '''\n    #code here\n    return 'to_upper_case function'\n    \ndef to_lower_case(s): \n    '''\n    Write a python function to convert the string to lower case.\n    '''\n    #code here\n    return 'to_lower_case function'\n    \ndef to_lower_case_first_word(s): \n    '''\n    Write a python function to convert the first word of the string to lower case.\n    '''\n    #code here\n    return 'to_lower_case_first_word function'\n    \ndef to_upper_case_first_word(s): \n    '''\n    Write a python function to convert the first word of the strin",
        "num_ids": 16
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    n = n % 2\n    if (n == 0):\n        s = bin(int(s,2))\n        l = len(s)-3\n        s = s[1:l]\n        return s\n    else:\n        return s\n",
        "num_ids": 60
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # code here\n    s=list(s)\n    t=[]\n    while(n>0):\n        if(n%2!=0):\n            for i in range(0,len(s)):\n                if(s[i]=='0' or s[i]=='1'):\n                    if(s[i]=='0'):\n                        s[i]='1'\n                    else:\n                        s[i]='0'\n        n=n//2\n    for i in range(0,len(s)):\n        if(s[i]=='0' or s[i]=='1'):\n            t.append(s[i])\n    return len(t)\n    \nif __name__ == '__main__': \n    s = '11'\n    n = 6\n    print(odd_Equivalent(s,n))",
        "num_ids": 208
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n==0:\n        return 1\n    return sum(odd_Equivalent(s[i::2],n-1) for i in range(n*2))\n",
        "num_ids": 42
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def rotate(s):\n        return s[1:] + s[0]\n    def find_odds(s,n):\n        if len(s) <= 1:\n            return 0\n        return len([i for i in range(1,len(s)+1) if (s[0] == '1' and s[n] == '1') or (s[0] == '0' and s[n] == '0')])\n    \n    return find_odds(rotate(s),n)\n",
        "num_ids": 122
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    l=list(s)\n    l.reverse()\n    for i in range(n):\n        c=0\n        for j in l:\n            if int(j)%2!=0:\n                c=c+1\n        print(c,end=\" \")\ndef odd_Sum(s):\n    l=list(s)\n    l.reverse()\n    c=0\n    for i in range(len(l)):\n        if int(l[i])%2!=0:\n            c=c+int(l[i])\n    print(c)\ndef even_Sum(s):\n    l=list(s)\n    l.reverse()\n    c=0\n    for i in range(len(l)):\n        if int(l[i])%2==0:\n            c=c+int(l[i])\n    print(c)\ndef odd_Length(s):\n    '''\n    Write a python function to find the number of odd length characters in the given binary string.\n    '''\n    l=list(s)\n    l.reverse()\n    for i in range(len(l)):\n        if int(l[i])%2!=0:\n            print(l[i],end=\" \")\ndef even_Length(s):\n    '''\n    Write a python function to find the number of even length characters in the given binary string.\n    '''\n    l=list(s)\n    l.reverse()\n    for i in range(len(l)):\n        if int(l[i])%2==0:\n            print(l[i],end=\" \")\ndef odd_Has_Two_Same_Digits(s):\n    '''\n    Write a python function to find the number of odd length characters which has two same digits in the binary string.\n    '''\n    l=list(s)\n    l.reverse()\n    c=0\n    for i in range(len(l)):\n        if int(l[i])%2!=0:\n            if l[i]==l[i-1]:\n                c=c+1\n    print(c)\ndef even_Has_Two_Same_Digits(s):\n    '''\n    Write a python function to find the number of even length characters which has two same digits in the binary string.\n    '''\n    l=list(s)\n    l.reverse()\n    c=0\n    for i in range(len(l)):\n        if int(l[i])%2==0:\n            if l[i]==l[i-1]:\n                c=c+1\n    print(c)\ndef odd_Has_Two_Same_Digits(s):\n    '''\n    Write a python function to find the number of odd length characters which has two same digits in the binary string.\n    '''\n    l=list(s)\n    l.reverse()\n    c=0\n    for i in range(len(l)):\n        if int(l[i])%2!=0:\n            if l[i]==l[i-1]:\n                c=c+1\n    print(c)\ndef even_Has_Two_Same_Digits(s):\n    '''\n    Write a python function to find the number of even length characters which has two same digits in the binary string.\n    '''\n    l=list(s)\n    l.reverse()\n    c=0\n    for i in range(len(l)):\n        if int(l[i])%2==0:\n            if l[i]==l[i-1]:\n                c=c+1\n    print(c)\ndef odd_Has_All_Same_Digits(s):\n    '''\n    Write a python function to find the number of odd length characters which has all same digits in the binary string.\n    '''\n    l=list(s)\n    l.reverse()\n    c=0\n    for i in range(len(l)):\n        if int(l[i])%2!=0:\n            if l[i]!=l[i-1]:\n                c=c+1\n    print(c)\ndef even_Has_All_Same_Digits(s):\n    '''\n    Write a python function to find the number of even length characters which has all same digits in the binary string.\n    '''\n    l=list(s)\n    l.reverse()\n    c=0\n    for i in range(len(l)):\n        if int(l[i])%2==0:\n            if l[i]!=l[i-1]:\n                c=c+1\n    print(c)\ndef odd_Has_All_Same_Digits(s):\n    '''\n    Write a python function to find the number of odd length characters which has all same digits in the binary string.\n    '''\n    l=list(s)\n    l.reverse()\n    c=0\n    for i in range(len(l)):\n        if int(l[i])%2!=0:\n            if l[i]!=l[i-1]:\n                c=c+1\n    print(c)\ndef even_Has_All_Same_Digits(s):\n    '''\n    Write a python function to find the number of even length characters which has all same digits in the binary string.\n    '''\n    l=list(s)\n    l.reverse()\n    c=0\n    for i in range(len(l)):\n        if int(l[i])%2==0:\n            if l[i]!=l[i-1]:\n                c=c+1\n    print(c)\ndef odd_Has_No_Same_Digits(s):\n    '''\n    Write a python function to find the number of odd length characters which has all same digits in the binary string.\n    '''\n    l=list(s)\n    l.reverse()\n    c=0\n    for i in range(len(l)):\n        if int(l[i])%2!=0:\n            if l[i]==l[i-1]:\n                c=c+1\n    print(c)\ndef even_Has_No_Same_Digits(s):\n    '''\n    Write a python function to find the number of even length characters which has all same digits in the binary string.\n    '''\n    l=list(s)\n    l.reverse()\n    c=0\n    for i in range(len(l)):\n        if int(l[i])%2==0:\n            if l[i]==l[i-1]:\n                c=c+1\n    print(c)\ndef odd_Has_No_Same_Digits(s):\n    '''\n    Write a python function to find the number of odd length characters which has all same digits in the binary string.\n    '''\n    l=list(s)\n    l.reverse()\n    c=0\n    for i in range(len(l)):\n        if int(l[i])%2!=0:\n            if l[i]==l[i-1]:\n                c=c+1\n    print(c)\ndef even_Has_No_Same_Digits(s):\n    '''\n    Write a python function to find the number of even length characters which has all same digits in the binary string.\n    '''\n    l=list(s)\n    l.reverse()\n    c=0\n    for i in range(len(l)):\n        if int(l[i])%2==0:\n            if l[i]==l[i-1]:\n                c=c+1\n    print(c)\ndef odd_Has_Any_Digits(s):\n    '''\n    Write a python function to find the number of odd length characters which has atleast one digit in the binary string.\n    '''\n    l=list(s)\n    l.reverse()\n    c=0\n    for i in range(len(l)):\n        if int(l[i])%2!=0:\n            if l[i].isdigit():\n                c=c+1\n    print(c)\ndef even_Has_Any_Digits(s):\n    '''\n    Write a python function to find the number of even length characters which has atleast one digit in the binary string.\n    '''\n    l=list(s)\n    l.reverse()",
        "num_ids": 15
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    a = bin(n)\n    if s==a:\n        return 0\n    for i in range(len(s)):\n        if s[i]!=s[-1-i]:\n            break\n    if i == len(s)-1:\n        return 1\n    for i in range(len(s)):\n        if s[i]!=s[-1-i]:\n            count += 1\n        if count==2:\n            return 1\n    return 0\n    \ndef check_output(output, expected_output):\n    \"\"\"\n    Return True if output matches expected_output\n    \"\"\"\n    return output == expected_output\n",
        "num_ids": 158
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if s==\"\":\n        return 0\n    if n==0:\n        return 1\n    if n%2==0:\n        return odd_Equivalent(s[1:],n//2)\n    return odd_Equivalent(s[:-1],n//2)\n",
        "num_ids": 67
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    for i in range(n):\n        s = '0'+s\n    print(s.count('1'))\n",
        "num_ids": 31
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #code here\n    k=1\n    m=0\n    while k<n:\n        if bin(s)[2:]==bin(s)[0:-2]:\n            m=m+1\n        s=int(bin(s),2)\n        s=(s+1)\n        k=k+1\n    return m\ns=int(input(),2)\nn=int(input(),2)\nif n>0:\n    print(odd_Equivalent(s,n))\nelse:\n    print(\"Odd number cannot be zero\")",
        "num_ids": 130
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def common_in_list(my_list):\n        return(set(my_list[0])&set(my_list[1]))\n    print(common_in_list(nestedlist))\n",
        "num_ids": 51
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    total = []\n    for item in nestedlist:\n        total.extend(item)\n    unique = []\n    for item in total:\n        if item not in unique:\n            unique.append(item)\n    return unique\n",
        "num_ids": 56
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    common_elements = []\n    for i in range(len(nestedlist)):\n        if len(nestedlist[i])!= 0:\n            for j in range(len(nestedlist[i])):\n                if nestedlist[i][j] not in common_elements:\n                    common_elements.append(nestedlist[i][j])\n    for i in range(len(common_elements)):\n        if common_elements[i] not in result:\n            result.append(common_elements[i])\n    return result\n",
        "num_ids": 140
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # base case\n    if not isinstance(nestedlist, list) or len(nestedlist) == 0:\n        raise TypeError('Input must be of type \"list\" and the length should be > 0')\n",
        "num_ids": 52
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return set(common_elements(*nestedlist))\n",
        "num_ids": 16
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def dfs(nestedlist,common_list,index):\n        if index==len(nestedlist):\n            common_list.append(nestedlist)\n            return\n        for value in nestedlist[index]:\n            dfs(nestedlist,common_list,index+1)\n    common_list=[]\n    dfs(nestedlist,common_list,0)\n    return common_list\n",
        "num_ids": 99
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    nested_set = set()\n    for lists in nestedlist:\n        if type(lists) is list:\n            for x in lists:\n                nested_set.add(x)\n        else:\n            nested_set.add(lists)\n    return list(nested_set)\n",
        "num_ids": 72
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    result = []\n    common = set()\n    \n    for i in nestedlist:\n        if isinstance(i, list):\n            common.update(common_in_nested_lists(i))\n        else:\n            common.add(i)\n            \n    return common\n",
        "num_ids": 70
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    #nested_lists = [[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"], [\"g\", \"h\", \"i\"], [\"j\", \"k\", \"l\"]]\n    \n    def f(x):\n        for sublist in x:\n            return x\n    nested_lists = f(nested_lists)\n    \n    def common_in_nested_lists(nested_lists):\n        common_list = []\n        for sublist in nested_lists:\n            for i in range(0,len(sublist)):\n                for j in range(0,len(sublist)):\n                    if(i == j):\n                        common_list.append(sublist[i])\n        \n        return common_list\n    \n    return common_in_nested_lists(nested_lists)\n",
        "num_ids": 197
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    l1 = []\n    l2 = []\n    for i in nestedlist:\n        l1 = l1 + i\n",
        "num_ids": 31
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return not bool(text.lstrip().rstrip().startswith(\"-\")) and is_int(text)\n",
        "num_ids": 29
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isnumeric():\n        return True\n    else:\n        try:\n            float(text)\n            return True\n        except ValueError:\n            return False\n",
        "num_ids": 43
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)==0:\n            return False\n    return True\n",
        "num_ids": 28
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if len(list1[i])!= 0:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary!= {}:\n            return False\n    return True\n",
        "num_ids": 26
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(0, len(list1)):\n        if list1[i]!= {}:\n            return False\n    return True\n    \n    \ndef longest_common_substring(str1, str2):\n    '''\n    Write a function to find the longest common substring from the two strings.\n    '''\n    if str1 == \"\" or str2 == \"\":\n        return \"\"\n    l1 = len(str1)\n    l2 = len(str2)\n    p = [[None for x in range(l2 + 1)] for x in range(l1 + 1)]\n    for i in range(l1 + 1):\n        for j in range(l2 + 1):\n            if i == 0 or j == 0:\n                p[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                p[i][j] = 1 + p[i-1][j-1]\n            else:\n                p[i][j] = max(p[i-1][j], p[i][j-1])\n    #print(p)\n    i, j = l1, l2\n    output = \"\"\n    while i > 0 and j > 0:\n        if p[i][j] == p[i-1][j]:\n            i -= 1\n        elif p[i][j] == p[i][j-1]:\n            j -= 1\n        else:\n            output = str1[i-1] + output\n            i -= 1\n            j -= 1\n    output = output[::-1]\n    return output\n    \ndef test_longest_common_substring():\n    print(\"Testing longest common substring\")\n    list1 = [\n            {\"str1\": \"c\", \"str2\": \"abc\"},\n            {\"str1\": \"bc\", \"str2\": \"ac\"},\n            {\"str1\": \"ac\", \"str2\": \"c\"},\n            {\"str1\": \"ac\", \"str2\": \"\"},\n            {\"str1\": \"ac\", \"str2\": \"ab\"},\n            {\"str1\": \"a\", \"str2\": \"\"},\n            {\"str1\": \"\", \"str2\": \"ab\"},\n            {\"str1\": \"ab\", \"str2\": \"\"},\n            {\"str1\": \"ab\", \"str2\": \"a\"}]\n    for i in range(0, len(list1)):\n        assert(longest_common_substring(list1[i][\"str1\"], list1[i][\"str2\"]) == list1[i][\"str1\"] + list1[i][\"str2\"])\n",
        "num_ids": 541
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if len(list1[i])!= 0:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return False\n    else:\n        return True\n    \ndef empty_list(list1):\n    '''\n    Write a function to check whether a list is empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n    \ndef check_empty(list1):\n    '''\n    Write a function to check whether all lists are empty or not.\n    '''\n    if empty_list(list1) and empty_list(list1):\n        return False\n    else:\n        return True\n        \ndef set_of_unique(list1):\n    '''\n    Write a function to check whether all lists are of same length and all the elements of the lists are unique or not.\n    '''\n    if len(list1) == len(set(list1)):\n        return True\n    else:\n        return False\n        \ndef set_of_unique_from_set(list1):\n    '''\n    Write a function to check whether all lists are of same length and all the elements of the lists are unique or not.\n    '''\n    if len(set(list1)) == len(list1):\n        return True\n    else:\n        return False\n    \ndef check_unique(list1):\n    '''\n    Write a function to check whether all lists are of same length and all the elements of the lists are unique or not.\n    '''\n    if not check_empty(list1):\n        if set_of_unique_from_set(list1):\n            return True\n        else:\n            return False\n    else:\n        return False\n        \ndef set_of_values(list1):\n    '''\n    Write a function to find the set of distinct values from a list of integers.\n    '''\n    return set(list1)\n    \ndef set_of_values_from_set(list1):\n    '''\n    Write a function to find the set of distinct values from a list of integers.\n    '''\n    return set(list1)\n    \ndef check_unique_values(list1):\n    '''\n    Write a function to find the set of distinct values from a list of integers.\n    '''\n    if not check_empty(list1):\n        if set_of_values_from_set(list1):\n            return True\n        else:\n            return False\n    else:\n        return False\n        \ndef sublist(list1):\n    '''\n    Write a function to check whether a given list contains a sublist.\n    '''\n    if len(list1) > 1:\n        sub_list = [list1[0], list1[1]]\n        if sub_list in list1:\n            return True\n        else:\n            return False\n    else:\n        return False\n        \ndef sublist_from_set(list1):\n    '''\n    Write a function to check whether a given list contains a sublist.\n    '''\n    if len(list1) > 1:\n        sub_list = [list1[0], list1[1]]\n        if sub_list in set(list1):\n            return True\n        else:\n            return False\n    else:\n        return False\n        \ndef check_sublist(list1):\n    '''\n    Write a function to check whether a given list contains a sublist.\n    '''\n    if not check_empty(list1):\n        if sublist_from_set(list1):\n            return True\n        else:\n            return False\n    else:\n        return False\n        \ndef sum_of_digits(list1):\n    '''\n    Write a function to find the sum of the digits in an integer.\n    '''\n    return sum([int(i) for i in str(list1)])\n    \ndef sum_of_digits_from_set(list1):\n    '''\n    Write a function to find the sum of the digits in an integer.\n    '''\n    return sum([int(i) for i in set(str(list1))])\n    \ndef check_sum_of_digits(list1):\n    '''\n    Write a function to find the sum of the digits in an integer.\n    '''\n    if not check_empty(list1):\n        if sum_of_digits_from_set(list1):\n            return True\n        else:\n            return False\n    else:\n        return False\n        \ndef is_palindrome(list1):\n    '''\n    Write a function to check whether a given list is a palindrome or not.\n    '''\n    if not check_empty(list1):\n        return str(list1) == str(list1)[::-1]\n    else:\n        return False\n        \ndef is_palindrome_from_set(list1):\n    '''\n    Write a function to check whether a given list is a palindrome or not.\n    '''\n    if not check_empty(list1):\n        return str(list1) == str(list1)[::-1]\n    else:\n        return False\n        \ndef check_palindrome(list1):\n    '''\n    Write a function to check whether a given list is a palindrome or not.\n    '''\n    if not check_empty(list1):\n        if is_palindrome_from_set(list1):\n            return True\n        else:\n            return False\n    else:\n        return False\n        \ndef count_pairs(list1, list2):\n    '''\n    Write a function to count the number of pairs from two given lists.\n    '''\n    if not check_empty(list1) and not check_empty(list2):\n        return sum([1 for i in list1 if i in list2])\n    else:\n        return 0\n        \ndef count_pairs_from_set(list1, list2):\n    '''\n    Write a function to count the number of pairs from two given lists.\n    '''\n    if not check_empty(list1) and not check_empty(list2):\n        return sum([1 for i in list1 if i in list2])\n    else:\n        return 0\n        \ndef check_pairs(list1, list2):\n    '''\n    Write a function to count the number of pairs from two given lists.\n    '''\n    if not check_empty(list1) and not check_empty(list2):\n        if count_pairs_from_set(list1, list2):\n            return True\n        else:\n            return False\n    else:\n        return False\n        \ndef list_comprehension(list1):\n    '''\n    Write a function to find whether a given list contains a particular item or not.\n    '''\n    if not check_empty(list1):\n        return any(list1[i] == 3 for i in range(len(list1)))\n    else:\n        return False\n        \ndef list_comprehension_from_set(list1):\n    '''\n    Write a function to find whether a given list contains a particular item or not.\n    '''\n    if not check_empty(list1):\n        return any(list1[i] == 3 for i in range(len(list1)))\n    else:\n        return False\n        \ndef check_list_comprehension(list1):\n    '''\n    Write a function to find whether a given list contains a particular item or not.\n    '''\n    if not check_empty(list1):\n        if list_comprehension_from_set(list1):\n            return True\n        else:\n            return False\n    else:\n        return False\n        \ndef list_comprehension_from_dict(dict1):\n    '''\n    Write a function to find whether a given list contains a particular item or not.\n    '''\n    if not check_empty(dict1):\n        return any(dict1[i] == 1 for i in range(len(dict1)))\n    else:\n        return False\n        \ndef check_list_comprehension_from_dict(dict1):\n    '''\n    Write a function to find whether a given list contains a particular item or not.\n    '''\n    if not check_empty(dict1):\n        if list_comprehension_from_dict(dict1):\n            return True\n        else:\n            return False\n    else:\n        return False\n        \ndef nested_list_comprehension",
        "num_ids": 61
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for element in list1:\n        if element!= {}:\n            return False\n    return True\n",
        "num_ids": 26
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if not list1:\n        return True\n    else:\n        return False\n",
        "num_ids": 21
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for x in list1:\n        if len(x)!= 0:\n            return False\n    return True\n",
        "num_ids": 28
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n",
        "num_ids": 10
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # in_num = nums\n    # return in_num\n    # return sum(nums)\n",
        "num_ids": 27
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    tuple_nums = nums\n    tuple_nums = sorted(tuple_nums)\n    tuple_nums = str(tuple_nums)\n    final = tuple_nums.replace('[','')\n    final = final.replace(']','')\n    final = final.replace(',','')\n    final = final.replace(' ',',')\n    final = final.replace('\\'','')\n    final = final.replace('\\'','')\n    return int(final)\n",
        "num_ids": 125
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = int(''.join(str(x) for x in nums))\n    return nums\n",
        "num_ids": 27
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for i in range(len(nums)):\n        result = result * 10 + nums[i]\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n",
        "num_ids": 10
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # if not isinstance(nums, tuple):\n    #     raise TypeError('Invalid input type')\n",
        "num_ids": 27
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join(map(str, nums)))\n",
        "num_ids": 17
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # initialize an accumulator variable\n    accum = 0\n",
        "num_ids": 16
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total\n",
        "num_ids": 24
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for i in test_list:\n        try:\n            if type(i) is int or type(i) is float:\n                new_list.append(i)\n        except:\n            pass\n    return new_list\n    \nlist_to_float([\"ab\",\"c\",\"d\"])\n",
        "num_ids": 79
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        if type(test_list[i]) == list:\n            test_list[i] = list_to_float(test_list[i])\n        elif type(test_list[i]) == str:\n            test_list[i] = 0\n        else:\n            try:\n                test_list[i] = float(test_list[i])\n            except ValueError:\n                pass\n    return test_list\n",
        "num_ids": 116
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for i in range(len(row)):\n            if row[i].isdigit():\n                row[i] = float(row[i])\n",
        "num_ids": 47
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = list(map(float, test_list[i]))\n    return test_list\n",
        "num_ids": 44
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                test_list[i][j] = None\n    return test_list\n",
        "num_ids": 79
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(0, len(test_list)):\n        for j in range(0, len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                pass\n    return test_list\n",
        "num_ids": 74
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(0, len(test_list)):\n        for j in range(0, len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n",
        "num_ids": 76
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [[float(x) for x in y] for y in test_list]\n",
        "num_ids": 22
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for element in test_list:\n        element = float(element)\n    return test_list\n",
        "num_ids": 25
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    l = string.split(\" \")\n    return l\n",
        "num_ids": 16
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ') \n",
        "num_ids": 12
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split() \n",
        "num_ids": 10
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n    \nstring = 'the quick brown fox'\nprint(string_to_list(string)) # ['the', 'quick', 'brown', 'fox']\n",
        "num_ids": 46
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ') \n",
        "num_ids": 12
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string_list = string.split(' ')\n    return string_list\n",
        "num_ids": 20
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_of_strings = []\n    string_list = string.split(\" \")\n    for string in string_list:\n        list_of_strings.append(string)\n    return list_of_strings\n    \n",
        "num_ids": 54
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    print(\"Printing the elements of the array in sorted order:\")\n    for i in range(len(arr)):\n        if i > 0 and arr[i]!= arr[i - 1]:\n            print(arr[i], end ='')\n    print()\n    \n    search_element = int(input(\"Enter the number to search for: \"))\n    \n    # Since this is a sorted array. We can easily use two pointers to find the index of the element.\n    # The first pointer is the left pointer. The second pointer is the right pointer.\n    # If the element is not present in the array then we can simply return the value -1\n    left_pointer = 0\n    right_pointer = len(arr) - 1\n    \n    while left_pointer <= right_pointer:\n        \n        middle_index = (left_pointer + right_pointer) // 2\n        if search_element == arr[middle_index]:\n            return middle_index\n        if search_element > arr[middle_index]:\n            left_pointer = middle_index + 1\n        else:\n            right_pointer = middle_index - 1\n    return -1\n",
        "num_ids": 266
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    i = 0\n    while i<n:\n        if arr[i]!= arr[i-1]:\n            return arr[i]\n        i+=1\n",
        "num_ids": 49
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        if arr[0]!= arr[1]:\n            return arr[0]\n        else:\n            return arr[1]\n    if len(arr) > 2:\n        temp = arr[0]\n        for i in range(1, len(arr)):\n            if temp == arr[i] and i == len(arr) - 1:\n                return temp\n            elif temp!= arr[i]:\n                temp = arr[i]\n            else:\n                continue\n",
        "num_ids": 141
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique = {}\n    for i in range(len(arr)):\n        if arr[i] in unique:\n            unique[arr[i]] += 1\n        else:\n            unique[arr[i]] = 1\n    for k in unique:\n        if unique[k] == 1:\n            return k\n",
        "num_ids": 74
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Python program to find the element \n    # that appears only once in a sorted array \n    # using loop \n    for i in range(len(arr)): \n        for j in range(0,len(arr) - i): \n            if arr[j]!= arr[j+1]: \n                break\n        if j == len(arr)-i-1: \n            return arr[i] \n    return -1\n",
        "num_ids": 106
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr.count(arr[i]) == 1:\n            return arr[i]\n",
        "num_ids": 35
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return None\n",
        "num_ids": 39
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    low = 0\n    high = len(arr)-1\n    while low<=high:\n        mid = (low+high)//2\n        if arr[mid]==arr[mid+1]:\n            if mid==0 or arr[mid]!= arr[mid-1]:\n                return arr[mid]\n            else:\n                high = mid - 1\n        elif arr[mid]==arr[mid-1]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return arr[0]\n",
        "num_ids": 126
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    # Declare the start and end pointer\n    start = 0\n    end = len(arr)-1\n    \n    # Base case\n    if len(arr) == 1:\n        return arr[0]\n    \n    # Traverse the array\n    while start <= end:\n        \n        # Find the mid point\n        mid = (start+end)//2\n        \n        # Check if the element is equal to mid\n        if arr[mid] == mid:\n            return mid\n        \n        # Check if the element is greater than mid\n        elif arr[mid] > mid:\n            end = mid-1\n        \n        # Check if the element is lesser than mid\n        else:\n            start = mid+1\n    \n    # If we haven't returned yet, then the element was not present in the array\n    return -1\n    \n    \ndef search_k_missing(arr, k):\n    '''\n    Write a python function to find the missing element in a sorted array.\n    '''\n    \n    # Declare the start and end pointer\n    start = 0\n    end = len(arr)-1\n    \n    # Base case\n    if k == 1:\n        return start\n    \n    # Traverse the array\n    while start <= end:\n        \n        # Find the mid point\n        mid = (start+end)//2\n        \n        # Check if the element is equal to mid\n        if arr[mid] == mid:\n            start = mid+1\n        \n        # Check if the element is greater than mid\n        elif arr[mid] > mid:\n            end = mid-1\n        \n        # Check if the element is lesser than mid\n        else:\n            start = mid+1\n    \n    # If we haven't returned yet, then the element was not present in the array\n    return k\n    \n    \ndef find_kth_largest(arr, k):\n    '''\n    Write a python function to find the kth largest element in a given array.\n    '''\n    \n    # Declare the start and end pointer\n    start = 0\n    end = len(arr)-1\n    \n    # Base case\n    if k == 1:\n        return arr[end]\n    \n    # Traverse the array\n    while start <= end:\n        \n        # Find the mid point\n        mid = (start+end)//2\n        \n        # Check if the element is equal to mid\n        if arr[mid] > arr[mid+1]:\n            return arr[mid+1]\n        \n        # Check if the element is greater than mid\n        elif arr[mid] > arr[mid-1]:\n            start = mid+1\n        \n        # Check if the element is lesser than mid\n        else:\n            end = mid-1\n    \n    # If we haven't returned yet, then the element was not present in the array\n    return -1\n    \n    \ndef minimum_index(arr):\n    '''\n    Write a python function to find the index of the minimum element in an unsorted array.\n    '''\n    \n    # Declare the start and end pointer\n    start = 0\n    end = len(arr)-1\n    \n    # Base case\n    if len(arr) == 1:\n        return 0\n    \n    # Traverse the array\n    while start <= end:\n        \n        # Find the mid point\n        mid = (start+end)//2\n        \n        # Check if the element is equal to mid\n        if arr[mid] > mid:\n            end = mid-1\n        \n        # Check if the element is greater than mid\n        elif arr[mid] < mid:\n            start = mid+1\n        \n        # Check if the element is lesser than mid\n        else:\n            return mid\n    \n    # If we haven't returned yet, then the element was not present in the array\n    return -1\n    \n    \ndef swap(arr, i, j):\n    '''\n    Write a python function that swap the element at index i with element at index j in the given array.\n    '''\n    \n    temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n    return arr\n    \n    \ndef insertion_sort(arr):\n    '''\n    Write a python function that sorts the array in ascending order.\n    '''\n    \n    # Traverse through the array\n    for i in range(1, len(arr)):\n        \n        # Find the index of the element to insert\n        key = arr[i]\n        j = i-1\n        \n        # Swapping the element if it is greater than the elements to its right\n        while j >= 0 and key < arr[j]:\n            arr = swap(arr, j+1, j)\n            j -= 1\n    return arr\n    \n    \ndef insertion_sort_rec(arr, n):\n    '''\n    Write a python function to sort the array in ascending order.\n    '''\n    \n    # Base case\n    if n <= 1:\n        return\n    \n    # Recursive case\n    for i in range(1, n):\n        key = arr[i]\n        j = i-1\n        \n        # Swapping the element if it is greater than the elements to its right\n        while j >= 0 and key < arr[j]:\n            arr = swap(arr, j+1, j)\n            j -= 1\n    \n    # Return the sorted array\n    return arr\n    \n    \ndef insertion_sort_iter(arr):\n    '''\n    Write a python function to sort the array in ascending order.\n    '''\n    \n    # Initialize the start pointer to 0\n    start = 0\n    \n    # Traverse through the array\n    for i in range(1, len(arr)):\n        \n        # Find the index of the element to insert\n        key = arr[i]\n        \n        # Swapping the element if it is greater than the elements to its right\n        while start < i and key < arr[start]:\n            arr = swap(arr, start+1, start)\n            start += 1\n    \n    # Return the sorted array\n    return arr\n    \n    \ndef partition(arr, low, high):\n    '''\n    Write a python function to sort the array in ascending order.\n    '''\n    \n    # Initialize the pivot element\n    pivot = arr[low]\n    \n    # Initialize the first index of the array\n    i = low+1\n    \n    # Traverse through the array\n    for j in range(low+1, high):\n        \n        # Check if the element is lesser than pivot\n        if arr[j] < pivot:\n            \n            # Increment the index of the element\n            i += 1\n            \n            # Swap the element with the element at index i\n            arr = swap(arr, i, j)\n            \n    # Swap the pivot element with the last element\n    arr = swap(arr, i, high)\n    \n    # Return the index of the pivot element\n    return i\n    \n    \ndef partition_rec(arr, low, high):\n    '''\n    Write a python function to sort the array in ascending order.\n    '''\n    \n    # Initialize the pivot element\n    pivot = arr[low]\n    \n    # Initialize the first index of the array\n    i = low+1\n    \n    # Traverse through the array\n    for j in range(low+1, high):\n        \n        # Check if the element is lesser than pivot\n        if arr[j] < pivot:\n            \n            # Increment the index of the element\n            i += 1\n            \n            # Swap the element with the element at index i\n            arr = swap(arr, i, j)\n    \n    # Swap the pivot element with the last element\n    arr = swap(arr, i, high)\n    \n    # Return the index of the pivot element\n    return i\n    \n    \ndef partition_iter(arr, low, high):\n    '''\n    Write a python function to sort the array in ascending order.\n    '''\n    \n    # Initialize the pivot element\n    pivot = arr[low]\n    \n    # Initialize the first index of the array\n    i = low\n    \n    # Traverse through the array\n    for j in range(low+1, high):\n        \n        # Check if the element is lesser than pivot\n        if arr[j] < pivot:\n            \n            # Increment the index of the element\n            i += 1\n            \n            # Swap the element with the element at index i\n            arr = swap(arr, i, j)\n            \n",
        "num_ids": 130
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    result = max(list1)\n    return result\n    \nprint(max_product_tuple([(5, 1), (-3, -5), (-10, -2), (3, -6)]))\n",
        "num_ids": 51
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -999\n    i = 0\n    while i < len(list1)-1:\n        num1 = list1[i]\n        j = i+1\n        while j < len(list1):\n            num2 = list1[j]\n            product = num1 * num2\n            if product > max_product:\n                max_product = product\n            j += 1\n        i += 1\n    return max_product\n",
        "num_ids": 105
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # list1 = [(2, 4), (1, 2), (3, 5), (1, -3), (-1, -4)]\n    # list1 = [(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (1, 11), (1, 12), (1, 13), (1, 14)]\n    # list1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (1, 3), (3, 5), (5, 7), (7, 9), (9, 11), (11, 13), (13, 15), (1, 4), (4, 6), (6, 8), (8, 10), (10, 12), (12, 14), (1, 5), (5, 7), (7, 9), (9, 11), (11, 13), (13, 15)]\n    # list1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (1, 3), (3, 5), (5, 7), (7, 9), (9, 11), (11, 13), (13, 15), (1, 4), (4, 6), (6, 8), (8, 10), (10, 12), (12, 14), (1, 5), (5, 7), (7, 9), (9, 11), (11, 13), (13, 15), (1, 6), (6, 8), (8, 10), (10, 12), (12, 14), (1, 7), (7, 9), (9, 11), (11, 13), (13, 15)]\n    # list1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (1, 3), (3, 5), (5, 7), (7, 9), (9, 11), (11, 13), (13, 15), (1, 4), (4, 6), (6, 8), (8, 10), (10, 12), (12, 14), (1, 5), (5, 7), (7, 9), (9, 11), (11, 13), (13, 15), (1, 6), (6, 8), (8, 10), (10, 12), (12, 14), (1, 7), (7, 9), (9, 11), (11, 13), (13, 15)]\n    # list1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (1, 3), (3, 5), (5, 7), (7, 9), (9, 11), (11, 13), (13, 15), (1, 4), (4, 6), (6, 8), (8, 10), (10, 12), (12, 14), (1, 5), (5, 7), (7, 9), (9, 11), (11, 13), (13, 15), (1, 6), (6, 8), (8, 10), (10, 12), (12, 14), (1, 7), (7, 9), (9, 11), (11, 13), (13, 15), (1, 8), (8, 10), (10, 12), (12, 14), (1, 9), (9, 11), (11, 13), (13, 15), (1, 10), (10, 12), (12, 14), (1, 11), (11, 13), (13, 15), (1, 12), (12, 14), (1, 13), (13, 15), (1, 14), (14, 15), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (2, 10), (2, 11), (2, 12), (2, 13), (2, 14), (2, 15), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10), (3, 11), (3, 12), (3, 13), (3, 14), (3, 15), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (4, 10), (4, 11), (4, 12), (4, 13), (4, 14), (4, 15), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (5, 11), (5, 12), (5, 13), (5, 14), (5, 15), (6, 7), (6, 8), (6, 9), (6, 10), (6, 11), (6, 12), (6, 13), (6, 14), (6, 15), (7, 8), (7, 9), (7, 10), (7, 11), (7, 12), (7, 13), (7, 14), (7, 15), (8, 9), (8, 10), (8, 11), (8, 12), (8, 13), (8, 14), (8, 15), (9, 10), (9, 11), (9, 12), (9, 13), (9, 14), (9, 15), (10, 11), (10, 12), (10, 13), (10, 14), (10, 15), (11, 12), (11, 13), (11, 14), (11, 15), (12, 13), (12, 14), (12, 15), (13, 14), (13, 15), (14, 15), (1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (1, 3), (3, 5), (5, 7), (7, 9), (9, 11), (11, 13), (13, 15), (15, 17), (1, 4), (4, 6), (6, 8), (8, 10), (10, 12), (12, 14), (14, 16), (16, 17), (1, 5), (5, 7), (7, 9), (9, 11), (11, 13), (13, 15), (15, 17), (16, 18), (16, 19), (16, 20), (16, 21), (16, 22), (16, 23), (16, 24), (16, 25), (16, 26), (16, 27), (16, 28), (16, 29), (16, 30), (16, 31), (16, 32), (16, 33), (16, 34), (16, 35), (16, 36), (16, 37), (16, 38), (16, 39), (16, 40), (16, 41), (16, 42), (16, 43), (16, 44), (16, 45), (16, 46), (16, 47), (16, 48), (16, 49), (16, 50), (16, 51), (16, 52), (16, 53), (16, 54), (16, 55), (16, 56), (16, 57), (16, 58), (16, 59), (16, 60), (16, 61), (16, 62), (16, 63), (16, 64), (16, 65), (16, 66), (16, 67), (16, 68), (16, 69), (16, 70), (16, 71), (16, 72), (16, 73), (16, 74), (16, 75), (16, 76), (16, 77), (16, 78), (16, 79), (16, 80), (16, 81), (16, 82), (16, 83), (16, 84), (16, 85), (16, 86), (16, 87), (16, 88), (16, 89), (16, 90), (16, 91), (16, 92), (16, 93), (16, 94), (16, 95), (16, 96), (16, 97), (16, 98), (16, 99), (16, 100), (16, 101), (16, 102), (16, 103), (16, 104), (16, 105), (16, 106), (16, 107), (16, 108), (16, 109), (16, 110), (16, 111), (16, 112), (16, 113), (16, 114), (16, 115), (16, 116), (16",
        "num_ids": 2006
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    # print(list1)\n    for i in range(0,len(list1)):\n        for j in range(i+1,len(list1)):\n            # print(list1[i],list1[j])\n            max_product = max(max_product,abs(list1[i][0]*list1[j][0])*abs(list1[i][1]*list1[j][1]))\n    return max_product\n",
        "num_ids": 118
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1 = sorted(list1, key=lambda x: x[1])\n    max_prod = float('-inf')\n    curr_prod = 1\n    curr_max = 1\n    curr_min = 1\n    for i, x in enumerate(list1):\n        if i == len(list1) - 1:\n            break\n        if x[0] < list1[i + 1][0]:\n            curr_max = x[1]\n            curr_min = list1[i + 1][1]\n            curr_prod = x[1] * list1[i + 1][1]\n            if curr_max > max_prod:\n                max_prod = curr_max\n            if curr_min > max_prod:\n                max_prod = curr_min\n        else:\n            curr_max = x[1]\n            curr_min = 1\n            curr_prod = x[1] * 1\n            if curr_max > max_prod:\n                max_prod = curr_max\n            if curr_min > max_prod:\n                max_prod = curr_min\n    return max_prod\n",
        "num_ids": 293
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -1\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            temp = max(abs(list1[i][0]*list1[i][1]), abs(list1[j][0]*list1[j][1]))\n            if temp > max_product:\n                max_product = temp\n    return max_product\n",
        "num_ids": 103
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -999999999999999999\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            max_product = max(max_product, (list1[i][0] * list1[j][0]) - (list1[i][1] * list1[j][1]))\n    return max_product\n",
        "num_ids": 96
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) <= 1:\n        return\n",
        "num_ids": 16
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    return max(abs(a*b) for a,b in list1)\n",
        "num_ids": 21
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Output - (7, -3)\n    # Input - [(1,2), (3,4), (5,-1), (-2,8), (-9,8), (7,-5), (8,9)]\n    # O/P - (7, -3)\n    # Order of tuples in the list should be from smallest to largest\n    # Indexes should be from 0 to n-1 where n is the number of tuples\n    # Do not need to check for any negative values in the list.\n",
        "num_ids": 119
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    n = 1\n    s = 0\n    while n < limit:\n        s_tmp = sum_divisors(n)\n        if s_tmp == n:\n            s = s + n\n        n = n + 1\n    return s\n",
        "num_ids": 60
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    \n    for i in range(1, limit):\n        a = sum(range(1, i+1))\n        b = sum(range(2, i+1))\n        if i not in amicable_numbers and a == b:\n            amicable_numbers.add(a)\n            amicable_numbers.add(b)\n    print(sum(amicable_numbers))\n    \n    return sum(amicable_numbers)\n    \ndef find_sum_of_divisors(n):\n    '''\n    Write a function that returns the sum of all divisors of a number\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n    print(sum)\n    \n    return sum\n    \n    \ndef find_divisor_of_sum_of_n(n):\n    '''\n    Write a function to find the divisor of the sum of the divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    print(divisors)\n    \n    return sum(divisors)\n    \ndef find_factors_of_n(n):\n    '''\n    Write a function to find all factors of a number.\n    '''\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    print(divisors)\n    \n    return divisors\n    \n    \ndef find_numbers_with_even_sum(start, end):\n    '''\n    Write a function to find all numbers that are even and their sum is equal to the given number.\n    '''\n    sum = 0\n    numbers = []\n    \n    for i in range(start, end + 1):\n        if i % 2 == 0:\n            sum += i\n            numbers.append(i)\n    print(numbers)\n    \n    return sum, numbers\n    \n    \ndef get_max_and_min_of_list(l):\n    '''\n    Write a function to find the maximum and minimum number in a list.\n    '''\n    \n    max_num = None\n    min_num = None\n    for i in l:\n        if max_num is None:\n            max_num = i\n        if i > max_num:\n            max_num = i\n        if min_num is None:\n            min_num = i\n        if i < min_num:\n            min_num = i\n    \n    return max_num, min_num\n    \n    \ndef sum_numbers(l):\n    '''\n    Write a function to find the sum of numbers in a list.\n    '''\n    sum = 0\n    \n    for i in l:\n        sum += i\n    \n    return sum\n    \ndef find_three_number_sum(l):\n    '''\n    Write a function to find a triplet in a list which gives sum of its components is equal to a specified number.\n    '''\n    l = sorted(l)\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return l[i], l[j], l[k]\n    return 0, 0, 0\n    \ndef find_triplets(numbers):\n    '''\n    Write a function to find the triplets in a list which gives sum of its components is equal to a specified number.\n    '''\n    triplets = []\n    \n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == 0:\n                    triplets.append([numbers[i], numbers[j], numbers[k]])\n    \n    return triplets\n    \ndef find_triplets(numbers):\n    '''\n    Write a function to find the triplets in a list which gives sum of its components is equal to a specified number.\n    '''\n    triplets = []\n    \n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == 0:\n                    triplets.append([numbers[i], numbers[j], numbers[k]])\n    \n    return triplets\n    \ndef find_triplets(numbers):\n    '''\n    Write a function to find the triplets in a list which gives sum of its components is equal to a specified number.\n    '''\n    triplets = []\n    \n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == 0:\n                    triplets.append([numbers[i], numbers[j], numbers[k]])\n    \n    return triplets\n    \ndef find_three_number_sum(l):\n    '''\n    Write a function to find a triplet in a list which gives sum of its components is equal to a specified number.\n    '''\n    l = sorted(l)\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return l[i], l[j], l[k]\n    return 0, 0, 0\n    \ndef find_triplets(numbers):\n    '''\n    Write a function to find the triplets in a list which gives sum of its components is equal to a specified number.\n    '''\n    triplets = []\n    \n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == 0:\n                    triplets.append([numbers[i], numbers[j], numbers[k]])\n    \n    return triplets\n    \ndef find_triplets(numbers):\n    '''\n    Write a function to find the triplets in a list which gives sum of its components is equal to a specified number.\n    '''\n    triplets = []\n    \n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == 0:\n                    triplets.append([numbers[i], numbers[j], numbers[k]])\n    \n    return triplets\n    \ndef find_triplets(numbers):\n    '''\n    Write a function to find the triplets in a list which gives sum of its components is equal to a specified number.\n    '''\n    triplets = []\n    \n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == 0:\n                    triplets.append([numbers[i], numbers[j], numbers[k]])\n    \n    return triplets\n    \ndef find_triplets(numbers):\n    '''\n    Write a function to find the triplets in a list which gives sum of its components is equal to a specified number.\n    '''\n    triplets = []\n    \n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers))",
        "num_ids": 55
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable_numbers = 0\n    for i in range(2,limit):\n        amicable_numbers = []\n        for j in range(1,i):\n            if i % j == 0:\n                amicable_numbers.append(j)\n        if sum(amicable_numbers) == i and sum(amicable_numbers)!= i:\n            sum_amicable_numbers += i\n    return sum_amicable_numbers\n",
        "num_ids": 111
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    \n    amicable_numbers = []\n    # Iterate over every number 1-n.\n    for i in range(1, limit):\n        sum1 = 0\n        sum2 = 0\n        for j in range(1, i):\n            if i % j == 0:\n                sum1 += j\n                sum2 += i / j\n        \n        if sum1 == i and sum2 == sum1:\n            amicable_numbers.append(i)\n    \n    return sum(amicable_numbers)\n",
        "num_ids": 123
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i > 1:\n            total = 0\n            for j in range(2, i):\n                if i % j == 0:\n                    total += j\n            if total == i and i!= total:\n                amicable_numbers.append(i)\n    print(sum(amicable_numbers))\n",
        "num_ids": 97
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = {}\n    for number in range(1, limit):\n        # 1 is not an amicable number\n        if number not in amicable_numbers:\n            continue\n        # 2 is not an amicable number\n        if number == 2:\n            continue\n        divisor = 2\n        divisors = 0\n        while divisor <= number / 2:\n            if number % divisor == 0:\n                divisors += 1\n                if divisor == number / divisor:\n                    divisors -= 1\n            divisor += 1\n        if divisors > 0:\n            amicable_numbers[number] = divisors - 1\n    sum_amicable_numbers = 0\n    for number, divisor in amicable_numbers.items():\n        sum_amicable_numbers += number + divisor\n    return sum_amicable_numbers\n",
        "num_ids": 215
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit+1):\n        a = sum(set(divisors(i)).difference(set(divisors(i))))\n        b = sum(divisors(a))\n        if a == b and a!= i and b!= i:\n            amicable_sum += i\n    print('sum of amicable numbers:', amicable_sum)\n",
        "num_ids": 101
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = set()\n    # Iterate to a specified limit\n    for i in range(1, limit):\n        # Iterate to the second number and if it is an amicable, add it to the set\n        for j in range(1, i):\n            # If the two numbers are equal, they are amicable\n            if i == j and i + j == i * j:\n                amicable.add(i)\n                break\n    # Return the sum of the amicable numbers\n    return sum(amicable)\n",
        "num_ids": 122
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    suma = 0\n    sum_amicable = 0\n    for i in range(2, limit):\n        sum_ab = sum_divisors(i)\n        if sum_divisors(sum_ab) == i:\n            sum_amicable += i\n        if sum_divisors(sum_amicable) == i:\n            suma += i\n    return suma\n",
        "num_ids": 93
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit + 1):\n        result = 0\n        # use a for loop to sum all possible factors of num\n        for factor in range(1, num):\n            if num % factor == 0:\n                # get the sum of the factors\n                sum_of_factors = num // factor\n                if factor == sum_of_factors:\n                    # only add if the sum of factors is equal to the number\n                    result = num\n                    amicable_numbers.append(num)\n                    break\n        if result > 0:\n            amicable_numbers.append(result)\n    return sum(amicable_numbers)\n",
        "num_ids": 161
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a.real==0 and a.imag==0:\n        return 0\n    return abs(a.imag/a.real)\ndef angle(a,b,c):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a.real==0 and a.imag==0:\n        return 0\n    return abs(a.real/a.imag)\ndef angle_bracket(x,y,z,k):\n    '''\n    Write a function to return the angle of a complex number.\n    '''\n    if x.real==0 and x.imag==0:\n        if y=='+':\n            return 90\n        else:\n            return -90\n    if y.real==0 and y.imag==0:\n        if z=='+':\n            return 180\n        else:\n            return -180\n    if k.real==0 and k.imag==0:\n        if x.imag>0:\n            return math.degrees(math.acos(complex(x.real/x.imag,1)))\n        else:\n            return math.degrees(math.acos(complex(x.real/x.imag,-1)))\n    else:\n        if x.real>0:\n            return math.degrees(math.acos(complex(x.real/x.imag,x.imag/k.real)))\n        else:\n            return math.degrees(math.acos(complex(x.real/x.imag,-x.imag/k.real)))\ndef polar(x,y):\n    '''\n    Write a function to return the polar coordinates of a complex number.\n    '''\n    if x.real==0 and x.imag==0:\n        return 0\n    return abs(x.real/x.imag),abs(y.real/y.imag)\ndef polar_form(x,y):\n    '''\n    Write a function to return the polar coordinates of a complex number.\n    '''\n    if x.real==0 and x.imag==0:\n        return 0\n    return x.real/x.imag,y.real/y.imag\ndef polar_form_complex(a):\n    '''\n    Write a function to return the polar coordinates of a complex number.\n    '''\n    return abs(a.real/a.imag),abs(a.real/a.imag)\ndef polar_form_complex_complex(a,b):\n    '''\n    Write a function to return the polar coordinates of a complex number.\n    '''\n    return abs(a.real/a.imag),abs(b.real/b.imag)\ndef polar_form_complex_complex_complex(a,b,c):\n    '''\n    Write a function to return the polar coordinates of a complex number.\n    '''\n    return abs(a.real/a.imag),abs(b.real/b.imag),abs(c.real/c.imag)\ndef polar_form_complex_complex_complex_complex(a,b,c,d):\n    '''\n    Write a function to return the polar coordinates of a complex number.\n    '''\n    return abs(a.real/a.imag),abs(b.real/b.imag),abs(c.real/c.imag),abs(d.real/d.imag)\ndef polar_form_complex_complex_complex_complex_complex(a,b,c,d,e):\n    '''\n    Write a function to return the polar coordinates of a complex number.\n    '''\n    return abs(a.real/a.imag),abs(b.real/b.imag),abs(c.real/c.imag),abs(d.real/d.imag),abs(e.real/e.imag)\ndef polar_form_complex_complex_complex_complex_complex(a,b,c,d,e,f):\n    '''\n    Write a function to return the polar coordinates of a complex number.\n    '''\n    return abs(a.real/a.imag),abs(b.real/b.imag),abs(c.real/c.imag),abs(d.real/d.imag),abs(e.real/e.imag),abs(f.real/f.imag)\ndef polar_form_complex_complex_complex_complex_complex_complex(a,b,c,d,e,f,g):\n    '''\n    Write a function to return the polar coordinates of a complex number.\n    '''\n    return abs(a.real/a.imag),abs(b.real/b.imag),abs(c.real/c.imag),abs(d.real/d.imag),abs(e.real/e.imag),abs(f.real/f.imag),abs(g.real/g.imag)\ndef polar_form_complex_complex_complex_complex_complex_complex_complex(a,b,c,d,e,f,g,h):\n    '''\n    Write a function to return the polar coordinates of a complex number.\n    '''\n    return abs(a.real/a.imag),abs(b.real/b.imag),abs(c.real/c.imag),abs(d.real/d.imag),abs(e.real/e.imag),abs(f.real/f.imag),abs(g.real/g.imag),abs(h.real/h.imag)\ndef polar_form_complex_complex_complex_complex_complex_complex_complex_complex(a,b,c,d,e,f,g,h,i):\n    '''\n    Write a function to return the polar coordinates of a complex number.\n    '''\n    return abs(a.real/a.imag),abs(b.real/b.imag),abs(c.real/c.imag),abs(d.real/d.imag),abs(e.real/e.imag),abs(f.real/f.imag),abs(g.real/g.imag),abs(h.real/h.imag),abs(i.real/i.imag)\ndef polar_form_complex_complex_complex_complex_complex_complex_complex_complex_complex(a,b,c,d,e,f,g,h,i,j):\n    '''\n    Write a function to return the polar coordinates of a complex number.\n    '''\n    return abs(a.real/a.imag),abs(b.real/b.imag),abs(c.real/c.imag),abs(d.real/d.imag),abs(e.real/e.imag),abs(f.real/f.imag),abs(g.real/g.imag),abs(h.real/h.imag),abs(i.real/i.imag),abs(j.real/j.imag)\ndef polar_form_complex_complex_complex_complex_complex_complex_complex_complex_complex_complex(a,b,c,d,e,f,g,h,i,j,k):\n    '''\n    Write a function to return the polar coordinates of a complex number.\n    '''\n    return abs(a.real/a.imag),abs(b.real/b.imag),abs(c.real/c.imag),abs(d.real/d.imag),abs(e.real/e.imag),abs(f.real/f.imag),abs(g.real/g.imag),abs(h.real/h.imag),abs(i.real/i.imag),abs(j.real/j.imag),abs(k.real/k.imag)\ndef polar_form_complex_complex_complex_complex_complex_complex_complex_complex_complex_complex(a,b,c,d,e,f,g,h,i,j,k,l):\n    '''\n    Write a function to return the polar coordinates of a complex number.\n    '''\n    return abs(a.real/a.imag),abs(b.real/b.imag),abs(c.real/c.imag),abs(d.real/d.imag),abs(e.real/e.imag),abs(f.real/f.imag),abs(g.real/g.imag),abs(h.real/h.imag),abs(i.real/i.imag),abs(j.real/j.imag),abs(k.real/k.imag),abs(l.real/l.imag)\ndef polar_form_complex_complex_complex_complex_complex_complex_complex_complex_complex_complex_complex(a,b,c,d,e",
        "num_ids": 161
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + bj)\n    return angle\n",
        "num_ids": 20
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b * 1j)\n",
        "num_ids": 17
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)\n",
        "num_ids": 17
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a*b)\n",
        "num_ids": 14
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    print(type(a))\n    if isinstance(a,complex):\n        return cmath.phase(a)\n    elif isinstance(a,str):\n        return float('nan')\n    else:\n        return float('nan')\n",
        "num_ids": 59
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a.real**2 + a.imag**2\n    return cmath.phase(a)/cmath.pi\n",
        "num_ids": 31
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    s = a.real**2 + a.imag**2\n    c = b.real**2 + b.imag**2\n    return cmath.acos(s/c)\nprint(angle_complex(2,3))\nprint(angle_complex(4,5))\n",
        "num_ids": 67
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if(a.real==0 and a.imag==0):\n        return 0\n    elif(a.real==0 and a.imag!=0):\n        return 180\n    elif(a.real!=0 and a.imag==0):\n        return -180\n    elif(a.real==0 and a.imag==0):\n        return 0\n    else:\n        return abs(cmath.phase(a))\ndef lcm(a,b):\n    '''\n    Write a function to find the least common multiple\n    '''\n    if(a<b):\n        a,b = b,a\n    return (a*b)/cmath.gcd(a,b)\ndef gcd(a,b):\n    '''\n    Write a function to find the greatest common divisor\n    '''\n    if(a<b):\n        a,b = b,a\n    while(b>0):\n        a,b = b,a%b\n    return a\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if(n<2):\n        return False\n    if(n==2):\n        return True\n    for i in range(2,n):\n        if(n%i==0):\n            return False\n    return True\ndef rotate_left(a,k):\n    '''\n    Write a function to rotate an array to the left by k positions.\n    '''\n    n = len(a)\n    temp = []\n    for i in range(k):\n        temp.append(a[0])\n        del a[0]\n    a = temp + a\n    return a\ndef rotate_right(a,k):\n    '''\n    Write a function to rotate an array to the right by k positions.\n    '''\n    n = len(a)\n    temp = []\n    for i in range(k):\n        temp.append(a[-1])\n        del a[-1]\n    a = a + temp\n    return a\ndef bubble_sort(a):\n    '''\n    Write a function that sorts a list using bubble sort.\n    '''\n    n = len(a)\n    for i in range(n):\n        for j in range(0,n-i-1):\n            if(a[j]>a[j+1]):\n                a[j],a[j+1] = a[j+1],a[j]\n    return a\ndef merge(a,b):\n    '''\n    Write a function that merges two sorted lists.\n    '''\n    m = len(a)\n    n = len(b)\n    temp = []\n    i = j = 0\n    while(i<m and j<n):\n        if(a[i]<=b[j]):\n            temp.append(a[i])\n            i+=1\n        else:\n            temp.append(b[j])\n            j+=1\n    if(i<m):\n        temp = temp + a[i:]\n    if(j<n):\n        temp = temp + b[j:]\n    return temp\ndef two_sum(a,k):\n    '''\n    Write a function that finds two numbers in an array whose sum is k.\n    '''\n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            if(a[i]+a[j]==k):\n                return i,j\n    return -1,-1\ndef reverse(a):\n    '''\n    Write a function that reverses an array.\n    '''\n    n = len(a)\n    for i in range(n):\n        temp = a[i]\n        a[i] = a[n-i-1]\n        a[n-i-1] = temp\n    return a\ndef has_duplicates(a):\n    '''\n    Write a function that checks if an array has any duplicates.\n    '''\n    n = len(a)\n    for i in range(n):\n        for j in range(i+1,n):\n            if(a[i]==a[j]):\n                return True\n    return False\ndef three_sum(a,k):\n    '''\n    Write a function that finds three numbers in an array whose sum is k.\n    '''\n    n = len(a)\n    a = sorted(a)\n    for i in range(n):\n        left = i+1\n        right = n-1\n        while(left<right):\n            s = a[i]+a[left]+a[right]\n            if(s==k):\n                return a[i],a[left],a[right]\n            elif(s<k):\n                left+=1\n            else:\n                right-=1\n    return -1,-1,-1\ndef triple_sum(a,k):\n    '''\n    Write a function that finds three numbers in an array whose sum is k.\n    '''\n    n = len(a)\n    a = sorted(a)\n    for i in range(n):\n        left = i+1\n        right = n-1\n        while(left<right):\n            s = a[i]+a[left]+a[right]\n            if(s==k):\n                return a[i],a[left],a[right]\n            elif(s<k):\n                left+=1\n            else:\n                right-=1\n    return -1,-1,-1\ndef find_pairs(a,k):\n    '''\n    Write a function that finds pairs of numbers in an array whose sum is k.\n    '''\n    n = len(a)\n    a = sorted(a)\n    for i in range(n):\n        for j in range(i+1,n):\n            if(a[i]+a[j]==k):\n                return a[i],a[j]\n    return -1,-1\ndef solve_equation(a,b):\n    '''\n    Write a function that solves a given equation. The equation is of the form ax + b = c.\n    '''\n    n = len(a)\n    a = sorted(a)\n    for i in range(n):\n        left = i+1\n        right = n-1\n        while(left<right):\n            s = a[i]*a[left]+b*a[right]\n            if(s==0):\n                return a[i],a[left],a[right]\n            elif(s>0):\n                left+=1\n            else:\n                right-=1\n    return -1,-1,-1\ndef remove_duplicates(a):\n    '''\n    Write a function that removes all duplicates from an array.\n    '''\n    n = len(a)\n    temp = []\n    for i in range(n):\n        if(a[i] not in temp):\n            temp.append(a[i])\n    return temp\ndef intersection(a,b):\n    '''\n    Write a function that finds the intersection of two arrays.\n    '''\n    n = len(a)\n    temp = []\n    for i in range(n):\n        if(a[i] in b):\n            temp.append(a[i])\n    return temp\ndef missing_number(a,b):\n    '''\n    Write a function that finds the missing number in a sorted array.\n    '''\n    n = len(a)\n    temp = []\n    for i in range(n):\n        temp.append(i)\n    for i in range(n):\n        if(a[i]!=temp[i]):\n            return a[i]\n    return -1\ndef sherlock_and_anagrams(s):\n    '''\n    Write a function that finds the number of different sherlock anagrams.\n    '''\n    def sort(a):\n        n = len(a)\n        temp = []\n        for i in range(n):\n            temp.append(a[i])\n        temp.sort()\n        return temp\n    n = len(s)\n    if(n==1):\n        return 1\n    a = sort(s)\n    a = sort(a)\n    m = len(a)\n    d = {}\n    for i in range(m):\n        a[i] = str(a[i])\n    for i in range(m):\n        for ",
        "num_ids": 134
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = (complex(a, b) * complex(a, b)).imag / (complex(a, b) * complex(a, b)).real\n    return angle\ndef check_angles(a,b,c):\n    '''\n    Write a function to check if three angles are equal.\n    '''\n    if abs(angle_complex(a,b)-angle_complex(a,c)) < 1e-5:\n        return True\n    return False\ndef check_angle_positive(a,b,c):\n    '''\n    Write a function to check if three angles are in positive or negative.\n    '''\n    if abs(angle_complex(a,b)-angle_complex(a,c)) < 1e-5:\n        if (angle_complex(a,b)-angle_complex(a,c)) < 0:\n            return False\n        return True\n    return False\ndef check_angle_between(a,b,c,d):\n    '''\n    Write a function to check if angles are between a and b\n    '''\n    if check_angle_positive(a,b,c) and check_angle_positive(a,b,d) and check_angle_positive(a,d,c) and check_angle_positive(a,c,b):\n        if abs(angle_complex(a,b)-angle_complex(a,c)) < 1e-5:\n            return True\n        else:\n            return False\n    return False\ndef check_angle_between_2(a,b,c):\n    '''\n    Write a function to check if angles are between a and b and a and c.\n    '''\n    if check_angle_positive(a,b,c) and check_angle_positive(a,c,b) and check_angle_positive(b,a,c) and check_angle_positive(b,c,a):\n        if abs(angle_complex(a,b)-angle_complex(a,c)) < 1e-5:\n            return True\n        else:\n            return False\n    return False\ndef check_angle_between_3(a,b,c,d):\n    '''\n    Write a function to check if angles are between a and b and a and c and d.\n    '''\n    if check_angle_positive(a,b,c) and check_angle_positive(a,c,d) and check_angle_positive(c,a,d) and check_angle_positive(b,c,d) and check_angle_positive(a,b,d) and check_angle_positive(b,c,d):\n        if abs(angle_complex(a,b)-angle_complex(a,c)) < 1e-5:\n            return True\n        else:\n            return False\n    return False\ndef check_angle_between_4(a,b,c,d,e):\n    '''\n    Write a function to check if angles are between a,b,c and a,c,d and a,d,e.\n    '''\n    if check_angle_positive(a,b,c) and check_angle_positive(a,c,d) and check_angle_positive(c,a,d) and check_angle_positive(b,c,e) and check_angle_positive(a,b,e) and check_angle_positive(b,c,e):\n        if abs(angle_complex(a,b)-angle_complex(a,c)) < 1e-5:\n            return True\n        else:\n            return False\n    return False\ndef check_angle_between_5(a,b,c,d,e,f):\n    '''\n    Write a function to check if angles are between a,b,c,d and a,d,e and a,e,f.\n    '''\n    if check_angle_positive(a,b,c) and check_angle_positive(a,c,d) and check_angle_positive(c,a,d) and check_angle_positive(b,c,e) and check_angle_positive(a,b,e) and check_angle_positive(b,c,f) and check_angle_positive(a,b,f):\n        if abs(angle_complex(a,b)-angle_complex(a,c)) < 1e-5:\n            return True\n        else:\n            return False\n    return False\ndef check_angle_between_6(a,b,c,d,e,f,g):\n    '''\n    Write a function to check if angles are between a,b,c,d,e,f and a,e,g and a,f,g.\n    '''\n    if check_angle_positive(a,b,c) and check_angle_positive(a,c,d) and check_angle_positive(c,a,d) and check_angle_positive(b,c,e) and check_angle_positive(a,b,e) and check_angle_positive(b,c,g) and check_angle_positive(a,b,f) and check_angle_positive(a,f,g):\n        if abs(angle_complex(a,b)-angle_complex(a,c)) < 1e-5:\n            return True\n        else:\n            return False\n    return False\ndef check_angle_between_7(a,b,c,d,e,f,g,h):\n    '''\n    Write a function to check if angles are between a,b,c,d,e,f,g and a,e,g,h and a,f,h,g.\n    '''\n    if check_angle_positive(a,b,c) and check_angle_positive(a,c,d) and check_angle_positive(c,a,d) and check_angle_positive(b,c,e) and check_angle_positive(a,b,e) and check_angle_positive(b,c,f) and check_angle_positive(a,b,f) and check_angle_positive(a,f,g) and check_angle_positive(a,f,h) and check_angle_positive(a,g,h) and check_angle_positive(a,e,g) and check_angle_positive(a,e,f) and check_angle_positive(a,h,g) and check_angle_positive(a,h,f):\n        if abs(angle_complex(a,b)-angle_complex(a,c)) < 1e-5:\n            return True\n        else:\n            return False\n    return False\ndef check_angle_between_8(a,b,c,d,e,f,g,h,i):\n    '''\n    Write a function to check if angles are between a,b,c,d,e,f,g,h and a,e,g,h,i and a,f,h,i,g.\n    '''\n    if check_angle_positive(a,b,c) and check_angle_positive(a,c,d) and check_angle_positive(c,a,d) and check_angle_positive(b,c,e) and check_angle_positive(a,b,e) and check_angle_positive(b,c,f) and check_angle_positive(a,b,f) and check_angle_positive(a,f,g) and check_angle_positive(a,f,h) and check_angle_positive(a,g,h) and check_angle_positive(a,g,i) and check_angle_positive(a,h,i) and check_angle_positive(a,f,i,g) and check_angle_positive(a,f,h,g) and check_angle_positive(a,h,f,g):\n        if abs(angle_complex(a,b)-angle_complex(a,c)) < 1e-5:\n            return True\n        else:\n            return False\n    return False\ndef check_angle_between_9(a,b,c,d,e,f,g,h,i,j):\n    '''\n    Write a function to check if angles are between a,b,c,d,e,f,g,h,i and a,e,g,h,i,j and a,f,h,i,j,g.\n    '''\n    if check_angle_positive(a,b,c) and check_angle_positive(a,c,d) and check_angle_positive(c,a,d) and check_angle",
        "num_ids": 46
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    string = string.replace('0','')\n    string = string.replace('1','')\n    return len(string)\n",
        "num_ids": 33
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    if length == 1:\n        return 0\n    start = 0\n    end = 0\n    max_length = 0\n    counter = 0\n    for i in range(length):\n        if string[i] == '0':\n            counter += 1\n        else:\n            counter -= 1\n        if max_length < counter:\n            start = i\n            max_length = counter\n        if counter == 0:\n            end = i+1\n            break\n    if end == 0:\n        end = length\n    return end - start\n",
        "num_ids": 133
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    lst = []\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            lst.append(0)\n        else:\n            lst.append(1)\n    lst1 = lst[:]\n    lst.insert(0, 0)\n    lst.append(0)\n    lst.insert(0, 0)\n    lst.append(0)\n    lst.append(0)\n    for i in range(len(lst)):\n        if lst[i]!= lst1[i]:\n            diff = abs(lst.count(0) - lst1.count(0))\n            return diff\n",
        "num_ids": 167
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if string == \"0\": return 0\n    if string == \"1\": return 1\n    ans = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            if string[i] == string[i-1]:\n                ans = max(ans, find_length(string[i:])+1)\n            else:\n                ans = max(ans, find_length(string[i+1:])+1)\n        else:\n            if string[i] == string[i-1]:\n                ans = max(ans, find_length(string[i+1:])+1)\n            else:\n                ans = max(ans, find_length(string[i+1:])+1)\n    return ans\n",
        "num_ids": 180
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # for a string of 0s and 1s, the answer is number of 0s - number of 1s\n    # counting the 1s is simple, how many 0s we have?\n    # counting the 0s is easy too, how many 1s?\n",
        "num_ids": 60
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count0 = 0\n    count1 = 0\n    maxDiff = 0\n    for i in range(len(string)):\n        if string[i] == '1':\n            count1 += 1\n        else:\n            count0 += 1\n        if count0 == 0 and count1 == 0:\n            continue\n        if count0 > 0:\n            maxDiff = max(maxDiff, count0)\n        elif count1 > 0:\n            maxDiff = max(maxDiff, count1)\n    return maxDiff\n",
        "num_ids": 123
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max = 0\n    for i in range(0, len(string)):\n        if string[i] == '0':\n            length = 0\n            for j in range(i, len(string)):\n                if string[j] == '0':\n                    length += 1\n                else:\n                    break\n            if length > max:\n                max = length\n    return max\n    \n",
        "num_ids": 92
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_count = 0\n    for i in range(len(string)):\n        if string[i] == '1':\n            count += 1\n        if string[i] == '0':\n            count -= 1\n        max_count = max(max_count, count)\n    return max_count\n",
        "num_ids": 78
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_zero = 0\n    count_one = 0\n    l = len(string)\n    for i in range(l):\n        if string[i] == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n    return count_zero, count_one\n",
        "num_ids": 72
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return max([find_length_1(string[i:]) for i in range(len(string))])\n",
        "num_ids": 28
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if(a<b): \n        return sum(b,a) \n    divisor = [] \n    for i in range(1,a+1): \n        if(a%i==0 and b%i==0): \n            divisor.append(i) \n    return sum(divisor[0],divisor[1]) \nprint(sum(2,4))\n",
        "num_ids": 98
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a + b\n",
        "num_ids": 8
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = 0\n    for i in range(1,min(a,b)+1):\n        if a%i==0 and b%i==0:\n            c+=i\n    return c\n",
        "num_ids": 48
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # If a < b, switch a and b\n    if a < b:\n        a, b = b, a\n",
        "num_ids": 30
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    x = int(a)\n    y = int(b)\n    a = list(range(1,x))\n    b = list(range(1,y))\n    l1 = set(a)\n    l2 = set(b)\n    common = l1 & l2\n    print(common)\n    c = 0\n    for i in common:\n        if x%i==0 and y%i==0:\n            c = c+i\n    return c\nsum(1000,1000)\n",
        "num_ids": 120
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    count = 0\n    divisor_list = []\n    for i in range(1,a+1):\n        if a % i == 0:\n            divisor_list.append(i)\n    for j in range(1,b+1):\n        if b % j == 0:\n            divisor_list.append(j)\n    divisor_list = list(set(divisor_list))\n    for i in divisor_list:\n        count = count + i\n    return count\n",
        "num_ids": 124
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    s=0\n    for i in range(1,a):\n        if a%i==0 and b%i==0:\n            s=s+i\n    return s\n",
        "num_ids": 44
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    while a%2==0 or b%2==0:\n        a=a//2\n        b=b//2\n    while a!=0 and b!=0:\n        if a>b:\n            a=a%b\n        else:\n            b=b%a\n    return a+b\n",
        "num_ids": 75
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Solution 1 \n    result = 0\n    a, b = sorted((a,b))\n    if (a%b == 0):\n        result = a + b\n    # Solution 2\n    while a % b!= 0:\n        a, b = b, a%b\n    result = a + b\n    print(result)\n",
        "num_ids": 81
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a==0: \n        return b\n    elif b==0: \n        return a\n    if a>b: \n        a,b = b,a \n    temp = 0\n    i = 1\n    while i <= a: \n        if a % i == 0 and b % i == 0: \n            temp = a * b / i \n            break\n        i = i + 1\n    return temp \n    \ndef factorial(a): \n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if a == 0: \n        return 1\n    elif a == 1: \n        return 1\n    fact = 1\n    for i in range(1, a+1): \n        fact = fact * i\n    return fact\n",
        "num_ids": 57
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    print(x * y)\n",
        "num_ids": 10
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x*y\n    return result\n",
        "num_ids": 13
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n    \ndef multiply_float(x, y):\n    '''\n    Write a function to multiply two floats.\n    '''\n    return x * y\n    \ndef multiply_string(x, y):\n    '''\n    Write a function to multiply two strings.\n    '''\n    return x * y\n    \ndef divide_int(x, y):\n    '''\n    Write a function to divide two integers.\n    '''\n    return x // y\n    \ndef divide_float(x, y):\n    '''\n    Write a function to divide two floats.\n    '''\n    return x / y\n    \ndef divide_string(x, y):\n    '''\n    Write a function to divide two strings.\n    '''\n    return x // y\n    \ndef add_int(x, y):\n    '''\n    Write a function to add two integers.\n    '''\n    return x + y\n    \ndef add_float(x, y):\n    '''\n    Write a function to add two floats.\n    '''\n    return x + y\n    \ndef add_string(x, y):\n    '''\n    Write a function to add two strings.\n    '''\n    return x + y\n    \ndef subtract_int(x, y):\n    '''\n    Write a function to subtract two integers.\n    '''\n    return x - y\n    \ndef subtract_float(x, y):\n    '''\n    Write a function to subtract two floats.\n    '''\n    return x - y\n    \ndef subtract_string(x, y):\n    '''\n    Write a function to subtract two strings.\n    '''\n    return x - y\n    \ndef square_int(x):\n    '''\n    Write a function to square an integer.\n    '''\n    return x ** 2\n    \ndef square_float(x):\n    '''\n    Write a function to square a float.\n    '''\n    return x ** 2\n    \ndef square_string(x):\n    '''\n    Write a function to square a string.\n    '''\n    return x ** 2\n    \ndef power_int(x, y):\n    '''\n    Write a function to raise an integer to a power.\n    '''\n    return x ** y\n    \ndef power_float(x, y):\n    '''\n    Write a function to raise a float to a power.\n    '''\n    return x ** y\n    \ndef power_string(x, y):\n    '''\n    Write a function to raise a string to a power.\n    '''\n    return x ** y\n    \ndef greater_int(x, y):\n    '''\n    Write a function to check if an integer is greater than another integer.\n    '''\n    return x > y\n    \ndef greater_float(x, y):\n    '''\n    Write a function to check if a float is greater than another float.\n    '''\n    return x > y\n    \ndef greater_string(x, y):\n    '''\n    Write a function to check if a string is greater than another string.\n    '''\n    return x > y\n    \ndef less_int(x, y):\n    '''\n    Write a function to check if an integer is less than another integer.\n    '''\n    return x < y\n    \ndef less_float(x, y):\n    '''\n    Write a function to check if a float is less than another float.\n    '''\n    return x < y\n    \ndef less_string(x, y):\n    '''\n    Write a function to check if a string is less than another string.\n    '''\n    return x < y\n    \ndef greater_equal_int(x, y):\n    '''\n    Write a function to check if an integer is greater than or equal to another integer.\n    '''\n    return x >= y\n    \ndef greater_equal_float(x, y):\n    '''\n    Write a function to check if a float is greater than or equal to another float.\n    '''\n    return x >= y\n    \ndef greater_equal_string(x, y):\n    '''\n    Write a function to check if a string is greater than or equal to another string.\n    '''\n    return x >= y\n    \ndef less_equal_int(x, y):\n    '''\n    Write a function to check if an integer is less than or equal to another integer.\n    '''\n    return x <= y\n    \ndef less_equal_float(x, y):\n    '''\n    Write a function to check if a float is less than or equal to another float.\n    '''\n    return x <= y\n    \ndef less_equal_string(x, y):\n    '''\n    Write a function to check if a string is less than or equal to another string.\n    '''\n    return x <= y\n    \ndef not_equal_int(x, y):\n    '''\n    Write a function to check if an integer is not equal to another integer.\n    '''\n    return x!= y\n    \ndef not_equal_float(x, y):\n    '''\n    Write a function to check if a float is not equal to another float.\n    '''\n    return x!= y\n    \ndef not_equal_string(x, y):\n    '''\n    Write a function to check if a string is not equal to another string.\n    '''\n    return x!= y\n    \ndef greater_than_int(x, y):\n    '''\n    Write a function to check if an integer is greater than another integer.\n    '''\n    return x > y\n    \ndef greater_than_float(x, y):\n    '''\n    Write a function to check if a float is greater than another float.\n    '''\n    return x > y\n    \ndef greater_than_string(x, y):\n    '''\n    Write a function to check if a string is greater than another string.\n    '''\n    return x > y\n    \ndef less_than_int(x, y):\n    '''\n    Write a function to check if an integer is less than another integer.\n    '''\n    return x < y\n    \ndef less_than_float(x, y):\n    '''\n    Write a function to check if a float is less than another float.\n    '''\n    return x < y\n    \ndef less_than_string(x, y):\n    '''\n    Write a function to check if a string is less than another string.\n    '''\n    return x < y\n    \ndef equal_int(x, y):\n    '''\n    Write a function to check if an integer is equal to another integer.\n    '''\n    return x == y\n    \ndef equal_float(x, y):\n    '''\n    Write a function to check if a float is equal to another float.\n    '''\n    return x == y\n    \ndef equal_string(x, y):\n    '''\n    Write a function to check if a string is equal to another string.\n    '''\n    return x == y\n    \ndef greater_than_equal_int(x, y):\n    '''\n    Write a function to check if an integer is greater than or equal to another integer.\n    '''\n    return x >= y\n    \ndef greater_than_equal_float(x, y):\n    '''\n    Write a function to check if a float is greater than or equal to another float.\n    '''\n    return x >= y\n    \ndef greater_than_equal_string(x, y):\n    '''\n    Write a function to check if a string is greater than or equal to another string.\n    '''\n    return x >= y\n    \ndef less_than_equal_int(x, y):\n    '''\n    Write a function to check if an integer is less than or equal to another integer.\n    '''\n    return x <= y\n    \ndef less_than_equal_float(x, y):\n    '''\n    Write a function to check if a float is less than or equal to another float.\n    '''\n    return x <= y\n    \ndef less_than_equal_string(x, y):\n    '''\n    Write a function to check if a string is less than or equal to another string.\n    '''\n    return x <= y\n    \ndef not_equal_int(x, y):\n    '''\n    Write a function to check if an integer is not equal to another integer.\n    '''\n    return x!= y\n",
        "num_ids": 9
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result\n",
        "num_ids": 13
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for word in str.split():\n        if len(word) >= n:\n            words.append(word)\n    return words\n",
        "num_ids": 38
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words_list = str.split()\n    long_words = []\n    for word in words_list:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "num_ids": 54
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [w for w in str if len(w)>n]\nprint(long_words(2, ['hi', 'as', 'lkdf', 'a', 'ddf', 'f', 'g']))\n",
        "num_ids": 53
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for word in str.split(\" \"):\n        if len(word) >= n:\n            words.append(word)\n    return words\n",
        "num_ids": 40
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    output = []\n    for i in str:\n        if len(i) > n:\n            output.append(i)\n    return output\n",
        "num_ids": 36
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) >= n:\n            long_words.append(word)\n",
        "num_ids": 36
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "num_ids": 42
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return_list = []\n    if len(str) < n:\n        return return_list\n    for word in str:\n        if len(word) >= n:\n            return_list.append(word)\n    return return_list\n",
        "num_ids": 58
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return len(list(filter(lambda word: len(word) >= n, str)))\n",
        "num_ids": 23
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split(\" \") if len(word) > n]\n",
        "num_ids": 24
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix) == len(my_matrix[0]):\n        for row in my_matrix:\n            if len(row) == len(my_matrix[0]):\n                list = []\n                for i in range(0,len(row)):\n                    list.append(row[i])\n                if sorted(list) == list:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n    else:\n        return False\n",
        "num_ids": 118
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    return check_magic_square(my_matrix,len(my_matrix))\n",
        "num_ids": 48
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix) == len(my_matrix[0]):\n        # check if matrix is square\n        if len(my_matrix) == len(my_matrix[0]):\n            # check if matrix has all integers \n            if all(isinstance(number, int) for row in my_matrix for number in row):\n                # check if matrix is square and all integers\n                if all(len(row) == len(my_matrix) for row in my_matrix):\n                    # check if matrix is square and all integers\n                    if len(my_matrix) == len(set(tuple(row) for row in my_matrix)):\n                        return True\n    return False\n",
        "num_ids": 170
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if is_magic_square_square(my_matrix):\n        return True\n    else:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    else:\n        my_matrix.pop(0)\n        my_matrix.pop()\n        if sum(i for i in range(len(my_matrix)))!= sum([my_matrix[i][i] for i in range(len(my_matrix))]):\n            return False\n        if sum(i for i in range(len(my_matrix)))!= sum([my_matrix[i][len(my_matrix) - i - 1] for i in range(len(my_matrix))]):\n            return False\n        for i in range(len(my_matrix)):\n            for j in range(len(my_matrix)):\n                if my_matrix[i][j]!= my_matrix[j][i]:\n                    return False\n        return True\n    ",
        "num_ids": 221
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if not my_matrix:\n        return False\n    row_count = len(my_matrix)\n    col_count = len(my_matrix[0])\n    if row_count!= col_count:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #algorithm:\n    #1. Check if the matrix is square\n    #2. Check if the matrix is row and column by row\n    #3. Check if the matrix is a magic square (sum of every number in each row, column, and diagonal is equal to the number of rows times the number of columns)\n    \n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    \n    #1. Check if the matrix is square\n    #2. Check if the matrix is row and column by row\n    row_sum = sum(my_matrix[0])\n    col_sum = sum([my_matrix[i][0] for i in range(len(my_matrix))])\n    diag_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    if row_sum!= len(my_matrix) * col_sum or col_sum!= len(my_matrix) * diag_sum or diag_sum!= len(my_matrix) * row_sum:\n        return False\n    \n    #3. Check if the matrix is a magic square (sum of every number in each row, column, and diagonal is equal to the number of rows times the number of columns)\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    diag_sum = 0\n    for i in range(rows):\n        for j in range(cols):\n            if i == j:\n                diag_sum += my_matrix[i][j]\n    \n    for i in range(rows):\n        for j in range(cols):\n            if i + j == rows - 1:\n                diag_sum += my_matrix[i][j]\n    \n    for i in range(cols):\n        for j in range(rows):\n            if i - j == rows - 1:\n                diag_sum += my_matrix[i][j]\n    \n    \n    if diag_sum!= row_sum * col_sum:\n        return False\n    \n    return True\n        \n",
        "num_ids": 510
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        if sum(my_matrix[i])!= 45:\n            return False\n        my_matrix[i] = sorted(my_matrix[i])\n    return True\n",
        "num_ids": 60
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        if(sum(my_matrix[i])!=sum(my_matrix[i][::-1])):\n            return False\n        for j in range(len(my_matrix[0])):\n            if(my_matrix[i][j]!=my_matrix[j][i]):\n                return False\n    return True\n",
        "num_ids": 100
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix) == len(my_matrix[0]):\n        if(my_matrix == magic_matrix(len(my_matrix))):\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 65
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for i in range(len(nums)):\n        d[nums[i]] += 1\n    maximum = max(d.values())\n    for k, v in d.items():\n        if v == maximum:\n            return k\n    return None\n",
        "num_ids": 71
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    result = 0\n    num_counts = defaultdict(int)\n    for num in nums:\n        num_counts[num] += 1\n        result = max(result, num_counts[num])\n    for key in num_counts:\n        if num_counts[key] == result:\n            return key\n",
        "num_ids": 80
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    max_value = max(d.values())\n    for k,v in d.items():\n        if v == max_value:\n            return k\n",
        "num_ids": 63
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Runtime: 44 ms, faster than 63.38% of Python3 online submissions for Maximum Frequency Stack.\n    # Memory Usage: 14.1 MB, less than 94.47% of Python3 online submissions for Maximum Frequency Stack.\n",
        "num_ids": 53
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # your code here\n    max_occurrence = 0\n    max_item = ''\n    for item in nums:\n        if nums.count(item) > max_occurrence:\n            max_occurrence = nums.count(item)\n            max_item = item\n    return max_item\n",
        "num_ids": 74
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_freq = 0\n    max_elem = None\n    for i in range(len(nums)):\n        if nums[i] in nums[i+1:]:\n            return -1\n        if nums.count(nums[i]) > max_freq:\n            max_freq = nums.count(nums[i])\n            max_elem = nums[i]\n    return max_elem\n",
        "num_ids": 108
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    \n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n        \n    return max(counts.items(), key=lambda x: x[1])[0]\n",
        "num_ids": 55
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict_ = defaultdict(int)\n    for i in nums:\n        dict_[i] += 1\n    return max(dict_.items(), key=lambda x: x[1])\n",
        "num_ids": 47
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = 0\n    max_value = 0\n    max_list = []\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n    for key in count_dict:\n        if count_dict[key] > max_count:\n            max_count = count_dict[key]\n            max_value = key\n            max_list.clear()\n            max_list.append(key)\n        elif count_dict[key] == max_count:\n            max_list.append(key)\n    return max_value\n",
        "num_ids": 143
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    return max(dict, key = dict.get)\n",
        "num_ids": 40
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiou')\n    vowels_dict = {v: idx for idx, v in enumerate(vowels)}\n    \n    str2 = list(str1)\n    for idx in range(len(str2)):\n        if str2[idx] in vowels_dict:\n            str2[idx] = str2[vowels_dict[str2[idx]]]\n    return ''.join(str2)\n",
        "num_ids": 116
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    \n    vowels = set(\"aeiou\")\n    output = []\n    for x in str1:\n        if x in vowels:\n            output.append(x)\n    output.reverse()\n    output = \"\".join(output)\n    return output\n",
        "num_ids": 65
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    reversed_vowels = set()\n    for char in str1:\n        if char not in vowels:\n            reversed_vowels.add(char)\n    \n    return ''.join(reversed_vowels)\n",
        "num_ids": 101
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # Initializing strings for vowels\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    str1 = str1.lower()\n    str1_vowels = {}\n",
        "num_ids": 69
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    s = list(str1)\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        if s[i] not in \"aeiouAEIOU\":\n            i += 1\n        else:\n            if s[j] not in \"aeiouAEIOU\":\n                j -= 1\n            else:\n                s[i], s[j] = s[j], s[i]\n                i += 1\n                j -= 1\n",
        "num_ids": 114
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1 = str1.replace(\"a\",\"$\")\n    str1 = str1.replace(\"e\",\"$\")\n    str1 = str1.replace(\"i\",\"$\")\n    str1 = str1.replace(\"o\",\"$\")\n    str1 = str1.replace(\"u\",\"$\")\n    str1 = str1.replace(\"A\",\"$\")\n    str1 = str1.replace(\"E\",\"$\")\n    str1 = str1.replace(\"I\",\"$\")\n    str1 = str1.replace(\"O\",\"$\")\n    str1 = str1.replace(\"U\",\"$\")\n    str1 = str1.replace(\"$\",\"a\")\n    str1 = str1.replace(\"$\",\"e\")\n    str1 = str1.replace(\"$\",\"i\")\n    str1 = str1.replace(\"$\",\"o\")\n    str1 = str1.replace(\"$\",\"u\")\n    str1 = str1.replace(\"$\",\"A\")\n    str1 = str1.replace(\"$\",\"E\")\n    str1 = str1.replace(\"$\",\"I\")\n    str1 = str1.replace(\"$\",\"O\")\n    str1 = str1.replace(\"$\",\"U\")\n    return str1\n",
        "num_ids": 287
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # vowels = set('aeiou')\n    # return \"\".join(char for char in str1 if char.lower() in vowels)\n",
        "num_ids": 37
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    result = []\n    for char in str1:\n        if char not in vowels:\n            result.append(char)\n        else:\n            result.insert(0,char)\n    return ''.join(result)\n",
        "num_ids": 70
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    s = ''\n    for i in str1:\n        if i in vowels:\n            s += i\n    return s[::-1]\n",
        "num_ids": 48
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','y']\n    new_str = []\n    vowels_indices = []\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowels_indices.append(i)\n    for i in range(len(vowels_indices)):\n        new_str.append(str1[len(vowels_indices)-(i+1)])\n    new_str = ''.join(new_str)\n    return new_str\n",
        "num_ids": 139
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    #pass\n    #tup1 = (1, 2, 3)\n    #print(tup_string(tup1))\n    return ''.join(tup1)\n",
        "num_ids": 45
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "num_ids": 11
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "num_ids": 11
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    if type(tup1) == tuple:\n        string1 = \"\".join(tup1)\n        return(string1)\n    else:\n        print(\"Please enter a tuple\")\n        return()\n        \ndef tup_string_reverse(tup1):\n    '''\n    Write a function to reverse the words of a given string.\n    '''\n    if type(tup1) == tuple:\n        tup1 = tup1[::-1]\n        string1 = \"\".join(tup1)\n        return(string1)\n    else:\n        print(\"Please enter a tuple\")\n        return()\n        \ndef tup_string_reverse_1(tup1):\n    '''\n    Write a function to get the string from a given tuple and reverse the string.\n    '''\n    if type(tup1) == tuple:\n        tup1 = list(tup1)\n        tup1.reverse()\n        string1 = \"\".join(tup1)\n        return(string1)\n    else:\n        print(\"Please enter a tuple\")\n        return()\n        \ndef tup_string_list(tup1):\n    '''\n    Write a function to get the list from a given tuple.\n    '''\n    if type(tup1) == tuple:\n        tup1 = list(tup1)\n        return(tup1)\n    else:\n        print(\"Please enter a tuple\")\n        return()\n        \ndef tup_string_list_reverse(tup1):\n    '''\n    Write a function to get the list from a given tuple and reverse the list.\n    '''\n    if type(tup1) == tuple:\n        tup1 = list(tup1)\n        tup1.reverse()\n        return(tup1)\n    else:\n        print(\"Please enter a tuple\")\n        return()\n        \ndef tup_string_list_reverse_1(tup1):\n    '''\n    Write a function to get the list from a given tuple and reverse the list using recursion.\n    '''\n    if type(tup1) == tuple:\n        tup1 = list(tup1)\n        for x in range(len(tup1)):\n            tup1[x] = tup1[x][::-1]\n        return(tup1)\n    else:\n        print(\"Please enter a tuple\")\n        return()\n        \ndef tup_string_list_reverse_2(tup1):\n    '''\n    Write a function to get the list from a given tuple and reverse the list using iteration.\n    '''\n    if type(tup1) == tuple:\n        tup1 = list(tup1)\n        for x in range(len(tup1)-1,-1,-1):\n            tup1[x] = tup1[x][::-1]\n        return(tup1)\n    else:\n        print(\"Please enter a tuple\")\n        return()\n        \ndef tup_string_list_reverse_3(tup1):\n    '''\n    Write a function to get the list from a given tuple and reverse the list using recursion.\n    '''\n    if type(tup1) == tuple:\n        tup1 = list(tup1)\n        if len(tup1) == 0:\n            return(tup1)\n        else:\n            tup1[0] = tup1[0][::-1]\n            return(tup1)\n    else:\n        print(\"Please enter a tuple\")\n        return()\n        \ndef tup_string_list_reverse_4(tup1):\n    '''\n    Write a function to get the list from a given tuple and reverse the list using recursion.\n    '''\n    if type(tup1) == tuple:\n        tup1 = list(tup1)\n        if len(tup1) == 0:\n            return(tup1)\n        else:\n            tup1 = tup_string_list_reverse_4(tup1)\n            tup1.append(tup1[0])\n            del(tup1[0])\n            return(tup1)\n    else:\n        print(\"Please enter a tuple\")\n        return()\n        \ndef tup_string_list_reverse_5(tup1):\n    '''\n    Write a function to get the list from a given tuple and reverse the list using recursion.\n    '''\n    if type(tup1) == tuple:\n        tup1 = list(tup1)\n        if len(tup1) == 0:\n            return(tup1)\n        else:\n            tup1 = tup_string_list_reverse_5(tup1)\n            tup1.append(tup1[0])\n            del(tup1[0])\n            return(tup1)\n    else:\n        print(\"Please enter a tuple\")\n        return()\n        \ndef tup_string_list_reverse_6(tup1):\n    '''\n    Write a function to get the list from a given tuple and reverse the list using recursion.\n    '''\n    if type(tup1) == tuple:\n        tup1 = list(tup1)\n        if len(tup1) == 0:\n            return(tup1)\n        else:\n            tup1 = tup_string_list_reverse_6(tup1)\n            tup1.append(tup1[0])\n            del(tup1[0])\n            return(tup1)\n    else:\n        print(\"Please enter a tuple\")\n        return()\n        \ndef tup_string_list_reverse_7(tup1):\n    '''\n    Write a function to get the list from a given tuple and reverse the list using recursion.\n    '''\n    if type(tup1) == tuple:\n        tup1 = list(tup1)\n        if len(tup1) == 0:\n            return(tup1)\n        else:\n            tup1 = tup_string_list_reverse_7(tup1)\n            tup1.append(tup1[0])\n            del(tup1[0])\n            return(tup1)\n    else:\n        print(\"Please enter a tuple\")\n        return()\n        \ndef tup_string_list_reverse_8(tup1):\n    '''\n    Write a function to get the list from a given tuple and reverse the list using recursion.\n    '''\n    if type(tup1) == tuple:\n        tup1 = list(tup1)\n        if len(tup1) == 0:\n            return(tup1)\n        else:\n            tup1 = tup_string_list_reverse_8(tup1)\n            tup1.append(tup1[0])\n            del(tup1[0])\n            return(tup1)\n    else:\n        print(\"Please enter a tuple\")\n        return()\n        \ndef tup_string_list_reverse_9(tup1):\n    '''\n    Write a function to get the list from a given tuple and reverse the list using recursion.\n    '''\n    if type(tup1) == tuple:\n        tup1 = list(tup1)\n        if len(tup1) == 0:\n            return(tup1)\n        else:\n            tup1 = tup_string_list_reverse_9(tup1)\n            tup1.append(tup1[0])\n            del(tup1[0])\n            return(tup1)\n    else:\n        print(\"Please enter a tuple\")\n        return()\n        \ndef tup_string_list_reverse_10(tup1):\n    '''\n    Write a function to get the list from a given tuple and reverse the list using recursion.\n    '''\n    if type(tup1) == tuple:\n        tup1 = list(tup1)\n        if len(tup1) == 0:\n            return(tup1)\n        else:\n            tup1 = tup_string_list_reverse_10(tup1)\n            tup1.append(tup1[0])\n            del(tup1[0])\n            return(tup1)\n    else:\n        print(\"Please enter a tuple\")\n        return()\n        \nde",
        "num_ids": 123
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    \n    return str(tup1)\n    \ndef tup_int(tup1):\n    '''\n    Write a function to convert a tuple to an integer.\n    '''\n    \n    return int(tup1)\n",
        "num_ids": 13
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "num_ids": 11
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # string = str(tup1)\n    # print(string)\n    # return string\n    return str(tup1)\n",
        "num_ids": 34
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for i in tup1:\n        string += str(i) +''\n    return string\n",
        "num_ids": 30
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(tup1)\n",
        "num_ids": 13
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s += str(i) +''\n    return s\n",
        "num_ids": 30
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    n = 0\n    for i in nums:\n        n = n + i if i < 0 else n + i\n    return n",
        "num_ids": 33
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negativesum = 0\n    for i in nums:\n        if i<0:\n            negativesum = negativesum + i\n    return negativesum\n",
        "num_ids": 39
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    summ = 0\n    for i in nums:\n        if i < 0:\n            summ += i\n    return summ\n",
        "num_ids": 33
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    count = 0\n    for i in nums:\n        if i < 0:\n            count += i\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # example input = [-1, -2, -3, 4, 5, -6]\n    # output = 1\n    # exmaple input = [-1, -2, -3, -4, -5, -6]\n    # output = -1\n",
        "num_ids": 63
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    i=0\n    total=0\n    while i < len(nums):\n        if nums[i] < 0:\n            total+=nums[i]\n        i+=1\n    return total\n",
        "num_ids": 51
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total\nprint(sum_negativenum([-2,-1,-3,-4,-5]))\n",
        "num_ids": 53
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total\n",
        "num_ids": 31
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 7\n    else:\n        return hexagonal_num(n-2) + 2*hexagonal_num(n-1) + 4\n",
        "num_ids": 67
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    num = (n * (3 * n - 1)) / 2\n    num = num - (n - 1) * n * ((n + 1) / 2)\n    return int(num)\n",
        "num_ids": 58
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    i = n\n    x = i\n    y = 1\n    while i!= 0:\n        i = i - 1\n        x = 3*x + 1\n        y = 2*y\n    return x\n",
        "num_ids": 52
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 0:\n        return 0\n    a = 1\n    b = 1\n    i = 1\n    while i <= n:\n        yield a\n        y = a + b\n        a = b\n        b = y\n        i += 1\n",
        "num_ids": 62
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return hexagonal_num(n-1) + n\n    \n    \n    \ndef hexagonal_num_rec(n):\n    '''\n    Write a function to find the nth hexagonal number using recursion.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return hexagonal_num_rec(n-1) + n\n",
        "num_ids": 33
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        count = count + 1 + i * (i-1) // 2\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    res = 1\n    i = 3\n    while i > 0:\n        res += i\n        i = 6 - 2 * (i - 2)\n    return res + n\n",
        "num_ids": 43
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (3*n**2 + 1)//2\n    \ndef longest_common_subsequence(str1, str2): \n    '''\n    Write a function that returns the length of the longest common subsequence.\n    '''\n    n = len(str1)\n    m = len(str2)\n    dp = [[0]*(m+1) for _ in range(n+1)]\n    for i in range(n+1):\n        for j in range(m+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[n][m]\n    \ndef longest_common_substring(str1, str2): \n    '''\n    Write a function that returns the length of the longest common substring.\n    '''\n    n = len(str1)\n    m = len(str2)\n    dp = [[0]*(m+1) for _ in range(n+1)]\n    for i in range(n+1):\n        for j in range(m+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[n][m]\n    \ndef is_palindrome_permutation(str1): \n    '''\n    Write a function that determines whether a string is a palindrome permutation.\n    '''\n    hashtable = {}\n    for i in str1:\n        if i in hashtable:\n            hashtable[i] += 1\n        else:\n            hashtable[i] = 1\n    hash_val = 0\n    for i in hashtable:\n        if hashtable[i] % 2 == 1:\n            hash_val += 1\n        else:\n            hash_val += 0\n    return hash_val <= 1\n    \ndef replace_whitespace(s): \n    '''\n    Write a function that replaces all whitespace characters in a string with hyphens.\n    '''\n    return s.replace(' ', '-')\n    \ndef check_anagram(str1, str2): \n    '''\n    Write a function that determines whether two strings are anagrams of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    hashtable = {}\n    for i in str1:\n        if i in hashtable:\n            hashtable[i] += 1\n        else:\n            hashtable[i] = 1\n    for i in str2:\n        if i in hashtable:\n            hashtable[i] -= 1\n        else:\n            hashtable[i] = 1\n    for i in hashtable:\n        if hashtable[i]!= 0:\n            return False\n    return True\n    \ndef is_full_binary_tree(tree): \n    '''\n    Write a function that determines whether a binary tree is a full binary tree.\n    '''\n    if tree.left == None and tree.right == None:\n        return True\n    if tree.left == None and tree.right!= None:\n        return False\n    if tree.right == None and tree.left!= None:\n        return False\n    if tree.left!= None and tree.right!= None:\n        return tree.left.val == tree.val == tree.right.val and is_full_binary_tree(tree.left) and is_full_binary_tree(tree.right)\n",
        "num_ids": 122
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(n + 1)*(2*n - 1)//6\n",
        "num_ids": 21
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return (hexagonal_num(n - 1)**2 + hexagonal_num(n - 2)**2)\n",
        "num_ids": 52
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zeros = 0\n    zeros = 0\n    for x in nums:\n        if x!= 0:\n            non_zeros += 1\n        else:\n            zeros += 1\n    return zeros/non_zeros\n",
        "num_ids": 60
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    x=0\n    for i in range(len(nums)):\n        if nums[i]==0:\n            x+=1\n    return x\n",
        "num_ids": 40
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = len(nums)\n    count = 0\n    for i in range(n):\n        if nums[i] == 0:\n            count += 1\n    return count / n\n",
        "num_ids": 47
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero = 0\n    non_zero = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero += 1\n        else:\n            non_zero += 1\n    return zero/non_zero\n    \ndef array_blur(arr):\n    '''\n    Write a function to blur an array of numbers.\n    '''\n    new_arr = arr[:]\n    for i in range(len(arr)):\n        for j in range(len(arr)-i-1):\n            new_arr[i+j] = arr[i+j] + arr[i+j+1]\n    return new_arr\n    \ndef largest_product(nums, k):\n    '''\n    Write a function to find the largest product of k adjacent numbers in an array.\n    '''\n    max_product = 0\n    for i in range(len(nums)-k):\n        if nums[i]*nums[i+k] > max_product:\n            max_product = nums[i]*nums[i+k]\n    return max_product\n    \ndef max_sub_array(nums, k):\n    '''\n    Write a function to find the contiguous subarray within an array of numbers \n    which has the largest product.\n    '''\n    max_product = 0\n    max_sub_start = 0\n    max_sub_end = 0\n    for i in range(len(nums)):\n        if i == 0:\n            max_product = nums[i]\n        else:\n            if nums[i] > max_product:\n                max_product = nums[i]\n            elif nums[i] < 0:\n                max_product = nums[i]\n                max_sub_start = i\n                break\n            elif i >= k:\n                max_product = max_product*nums[i]\n    for i in range(len(nums)-k+1, len(nums)):\n        if i == len(nums)-1:\n            max_product = max_product*nums[i]\n        elif nums[i] > max_product:\n            max_product = nums[i]\n    return max_sub_start, max_sub_end\n    \ndef find_triple_with_sum(nums, target):\n    '''\n    Write a function to find a triplet in a given array whose sum is equal to a given target number.\n    '''\n    # Can't use the same number twice\n    # nums.sort()\n    # i = 0\n    # j = len(nums)-1\n    # while i < j:\n    #     if nums[i] + nums[j] == target:\n    #         return nums[i], nums[j], nums[i+j]\n    #     elif nums[i] + nums[j] < target:\n    #         i += 1\n    #     else:\n    #         j -= 1\n    nums.sort()\n    i = 0\n    j = len(nums)-1\n    while i < j:\n        if nums[i] + nums[j] == target:\n            return nums[i], nums[j], nums[i+j]\n        elif nums[i] + nums[j] < target:\n            i += 1\n        else:\n            j -= 1\n    return False\n    \ndef count_paths_in_a_binary_tree(root, path_sum):\n    '''\n    Write a function to count all possible paths from a root node to a leaf node, \n    whose sum is equal to a given target.\n    '''\n    if not root:\n        return 0\n    return self.paths_in_a_binary_tree(root, path_sum) + self.paths_in_a_binary_tree(root.left, path_sum) + self.paths_in_a_binary_tree(root.right, path_sum)\n    \ndef paths_in_a_binary_tree(root, path_sum):\n    '''\n    Write a function to count all possible paths from a root node to a leaf node, \n    whose sum is equal to a given target.\n    '''\n    if not root:\n        return 0\n    return paths_in_a_binary_tree(root.left, path_sum) + paths_in_a_binary_tree(root.right, path_sum) + 1 if root.val + path_sum == root.val else paths_in_a_binary_tree(root.left, path_sum) + paths_in_a_binary_tree(root.right, path_sum)\n    \ndef has_path_sum(root, target_sum):\n    '''\n    Write a function to check if a given binary tree has a root-to-leaf path such that the \n    path's sum equals a given sum.\n    '''\n    if not root:\n        return False\n    if not root.left and not root.right and root.val == target_sum:\n        return True\n    return has_path_sum(root.left, target_sum-root.val) or has_path_sum(root.right, target_sum-root.val)\n    \ndef is_bst(root):\n    '''\n    Write a function that takes in a Binary Tree and returns a boolean representing if the tree is a BST.\n    '''\n    if not root:\n        return True\n    if not root.left and not root.right:\n        return True\n    return root.val > root.left.val and root.val < root.right.val and is_bst(root.left) and is_bst(root.right)\n    \ndef is_sum_of_two_numbers(nums, sum_target):\n    '''\n    Write a function that takes in a sorted array of integers and a target sum.\n    Return whether or not there are two numbers in the array that sum to the target.\n    '''\n    if not nums:\n        return False\n    left, right = 0, len(nums)-1\n    while left < right:\n        if nums[left] + nums[right] == sum_target:\n            return True\n        elif nums[left] + nums[right] < sum_target:\n            left += 1\n        else:\n            right -= 1\n    return False\n    \ndef knapsack_without_rep(weights, profits, capacity):\n    '''\n    Write a function that takes in a set of n items with weights and profits, and a\n    capacity limit and returns the maximum profit that can be made by picking one item \n    of each type once.\n    '''\n    if not weights:\n        return 0\n    # Base case\n    if len(weights) == 1 and len(profits) == 1:\n        return profits[0]\n    best_profit = 0\n    item = 0\n    cur_profit = 0\n    \n    for i in range(len(weights)):\n        if weights[i] <= capacity:\n            cur_profit = profits[i] + knapsack_without_rep(weights[i+1:], profits[i+1:], capacity-weights[i])\n            if cur_profit > best_profit:\n                best_profit = cur_profit\n                item = i\n    return profits[item] if best_profit > 0 else 0\n    \ndef longest_common_prefix(strs):\n    '''\n    Write a function that takes in an array of strings and returns a string of the longest\n    common prefix among all the strings.\n    '''\n    # return the shortest string in strs\n    if not strs:\n        return \"\"\n    if len(strs) == 1:\n        return strs[0]\n    prefix = strs[0]\n    i = 1\n    while i < len(strs):\n        while not strs[i].startswith(prefix):\n            prefix = prefix[:-1]\n            i += 1\n            if i == len(strs):\n                return prefix\n        i += 1\n    return prefix\n    \ndef longest_common_substring(str1, str2):\n    '''\n    Write a function that takes in two strings and returns the length of the longest common substring.\n    '''\n    if not str1 or not str2:\n        return 0\n    if len(str1) == 0 and len(str2) =",
        "num_ids": 33
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # 0.0/0.0\n    count_zero = 0\n    count_non_zero = 0\n    for i in range(0, len(nums)):\n        if nums[i] == 0:\n            count_zero += 1\n        else:\n            count_non_zero += 1\n    return count_zero/count_non_zero\n",
        "num_ids": 86
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count/len(nums)\n",
        "num_ids": 46
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    if type(nums)!= type([1]):\n        raise TypeError\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count/len(nums)\n",
        "num_ids": 65
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    print(nums.count(0) / len(nums))\n",
        "num_ids": 19
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    result = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            result += 1\n    return result\ndef test_zero_count():\n    assert zero_count([]) == 0\n    assert zero_count([0]) == 1\n    assert zero_count([0, 0, 0, 0, 0]) == 5\n    assert zero_count([0, 1, 0, 0, 0, 0, 0]) == 6\n    assert zero_count([1, 0, 0, 0, 0, 0, 0]) == 4\n    assert zero_count([0, 0, 1, 0, 0, 0, 0]) == 3\n    assert zero_count([0, 0, 0, 1, 0, 0, 0]) == 2\n    assert zero_count([0, 0, 0, 0, 1, 0, 0]) == 1\n    assert zero_count([0, 0, 0, 0, 0, 1, 0]) == 0\n    print('Tests passed')\ntest_zero_count()",
        "num_ids": 240
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return sum(nums)//(sum(1 for i in nums if i==0)-sum(1 for i in nums if i==1))\n    \ndef zero_count_2(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return sum(nums)//len(nums)\n",
        "num_ids": 16
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    flag = False\n    for i in range(1,n+1):\n        if n==i**2:\n            flag=True\n            break\n        else:\n            flag=False\n    if flag:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n",
        "num_ids": 67
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if not n:\n        return False\n",
        "num_ids": 12
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0:\n        return False\n    while (n>0):\n        if n%2==1:\n            return False\n        n = n//2\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n>0:\n        if n%2==0:\n            n/=2\n        else:\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum = 0\n    while n:\n        sum += n%10\n        n //= 10\n    return sum == 0\n",
        "num_ids": 31
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    #if n == 0:\n    #    return True\n",
        "num_ids": 16
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    def is_sum_of_powers_of_two(n):\n        n = int(n)\n        i = 0\n        while (n >= 1):\n            i = i + 1\n            n = n // 2\n        return i\n    \n    if is_sum_of_powers_of_two(n) == True:\n        print('True')\n    else:\n        print('False')\n",
        "num_ids": 98
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # code here\n    if n <= 0:\n        return False\n    sum_of_powers_of_two = 0\n    i = 1\n    while (i <= n):\n        if i * i <= n:\n            sum_of_powers_of_two += i\n        i += 1\n    return sum_of_powers_of_two == n\n",
        "num_ids": 85
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return n == sum([i*i for i in range(0, n, 2)])\n",
        "num_ids": 24
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    i = 1\n    while (i <= n):\n        if (n == 2 ** i):\n            print('The number is power of 2')\n            break\n        i += 1\n    else:\n        print('The number is not power of 2')\n",
        "num_ids": 60
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.1415*r\n",
        "num_ids": 13
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2*pi*r\n",
        "num_ids": 16
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n",
        "num_ids": 10
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2*pi*r\n",
        "num_ids": 16
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n",
        "num_ids": 10
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    circumference = 2 * math.pi * r\n    return circumference\n",
        "num_ids": 23
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2*pi*r\n",
        "num_ids": 16
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    lst = []\n    for i in test_list:\n        lst.extend(i)\n    return set(lst)\n",
        "num_ids": 35
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return {item for sublist in test_list for item in sublist}\n",
        "num_ids": 20
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    test_set = set()\n    for i in test_list:\n        for j in i:\n            test_set.add(j)\n    return list(test_set)\n",
        "num_ids": 45
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    x = []\n    for i in test_list:\n        x.extend(i)\n    return x\n",
        "num_ids": 29
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flatten = [item for sublist in test_list for item in sublist]\n    return flatten\n",
        "num_ids": 27
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    list_total = []\n    for element in test_list:\n        for item in element:\n            list_total.append(item)\n",
        "num_ids": 35
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    num_list = []\n    for i in range(0,len(test_list)):\n        for j in range(0,len(test_list[i])):\n            num_list.append(test_list[i][j])\n    return num_list\n    \n",
        "num_ids": 67
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    if len(test_list)==0:\n        return []\n",
        "num_ids": 20
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # initialize empty set\n    new_set = set()\n    # loop through each element in test_list\n    for element in test_list:\n        # if it is a list, loop through the list to add to set\n        if type(element) == list:\n            for val in element:\n                new_set.add(val)\n        else:\n            new_set.add(element)\n    return new_set\n",
        "num_ids": 100
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # return reduce(lambda a,b: a+b,test_list)\n",
        "num_ids": 21
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    import random\n    for i in range(len(nums)-1,0,-1):\n        j = random.randint(0,i)\n        temp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = temp\n",
        "num_ids": 68
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return nums\n    \n    # max_elem = nums[-1]\n    # nums.append(max_elem)\n    # nums.sort()\n    # del nums[-1]\n    \n    # for _ in range(len(nums)-1):\n    #     min_elem = min(nums)\n    #     min_idx = nums.index(min_elem)\n    #     nums.pop(min_idx)\n    #     nums.append(min_elem)\n    #     nums.sort()\n    #     del nums[-1]\n",
        "num_ids": 159
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1,0,-1):\n        print(nums)\n        max = nums[i]\n        index = i\n        for j in range(i):\n            if nums[j] > max:\n                index = j\n                max = nums[j]\n",
        "num_ids": 75
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    nums.sort(reverse=True)\n    pancakes = []\n    pancakes.append(nums)\n",
        "num_ids": 31
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    i = 0\n    if n <= 1:\n        return nums\n",
        "num_ids": 28
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 0:\n        return nums\n    for i in range(len(nums)):\n        k = nums.pop()\n        while (nums and nums[-1] > k):\n            nums.insert(-1, nums.pop())\n        nums.insert(-1, k)\n",
        "num_ids": 81
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # while the length of the list is greater than 1, we are going to swap the first element and the last element in the list.\n    # this will allow us to obtain a sorted version of the list.\n    for i in range(len(nums)):\n        max_idx = nums.index(max(nums)) # returns the index of the element with the largest value in the list.\n        nums[max_idx], nums[-1] = nums[-1], nums[max_idx] # swap the first and the last element in the list.\n        nums[-1], nums[max_idx] = nums[max_idx], nums[-1] # this will swap the first element and the last element in the list.\n    \n    return nums\n",
        "num_ids": 189
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # n = len(nums)\n    # if n == 0 or n == 1:\n    #     return\n    # for i in range(n):\n    #     for j in range(n-i-1):\n    #         if nums[j] > nums[j+1]:\n    #             temp = nums[j+1]\n    #             nums[j+1] = nums[j]\n    #             nums[j] = temp\n    #         else:\n    #             break\n    # return nums\n",
        "num_ids": 130
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # time O(nlog(n)) | space O(n)\n    n = len(nums)\n    while n > 1:\n        largest = 0\n        for i in range(1,n+1):\n            if nums[i-1] > nums[largest]:\n                largest = i\n        nums[n-1],nums[largest] = nums[largest],nums[n-1]\n        n = n-1\n    return nums\n",
        "num_ids": 113
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    curr = len(nums)-1\n    n = len(nums)\n    while curr > 0:\n        p = curr\n        while p>0 and nums[p]<nums[p-1]:\n            nums[p], nums[p-1] = nums[p-1], nums[p]\n            p -= 1\n        curr = p\n    return nums\n",
        "num_ids": 99
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    d = {}\n    \n    for i in range(0,len(list1)):\n        d[list1[i]]=0\n    \n    for i in range(0,len(list2)):\n        d[list2[i]]=0\n    \n    for i in range(0,len(list3)):\n        d[list3[i]]=0\n    \n    count = 0\n    for i in d:\n        if d[i]==1:\n            count+=1\n    return count\n    ",
        "num_ids": 127
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    index = 0\n    count = 0\n    while index < len(list1):\n        if list1[index] == list2[index] == list3[index]:\n            count += 1\n        index += 1\n    return count\nprint(count_samepair([1,1,1],[1,1,1],[1,1,1]))\nprint(count_samepair([1,1,1],[2,2,2],[1,1,1]))\nprint(count_samepair([1,1,1],[2,2,2],[1,1,2]))\n",
        "num_ids": 137
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return 0\n    lst1 = []\n    lst2 = []\n    lst3 = []\n    for item in list1:\n        lst1.append(item)\n    for item in list2:\n        lst2.append(item)\n    for item in list3:\n        lst3.append(item)\n    for i in range(len(lst1)):\n        if lst1[i] == lst2[i] and lst1[i] == lst3[i]:\n            return 1\n    return 0\n",
        "num_ids": 159
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count +=1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        return None\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\nprint(count_samepair([2,3,2,1,2,1],[1,2,1,1,2,2],[2,1,2,2,2]))",
        "num_ids": 127
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n    print(count)\n",
        "num_ids": 77
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    n1=len(list1)\n    n2=len(list2)\n    n3=len(list3)\n    if n1==n2 and n2==n3:\n        count=0\n        for i in range(n1):\n            if list1[i]==list2[i] and list1[i]==list3[i]:\n                count+=1\n    else:\n        print(\"Wrong lists\")\n    print(\"Number of same pairs: \",count)\n",
        "num_ids": 117
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    flag=0\n    count=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if(list1[i]==list2[j]):\n                flag=flag+1\n                if(list1[i]==list3[j]):\n                    count=count+1\n                    print(count)\n    print(count)\n    return count\n",
        "num_ids": 100
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            count=count+1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list_count = 0\n    for i in Input:\n        list_count += 1\n    return list_count\n",
        "num_ids": 29
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    li = []\n    for i in range(len(Input)):\n        li.append(Input[i])\n    return(len(list(set(li))))\n",
        "num_ids": 41
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    myList = []\n    for i in Input:\n        myList.append(i)\n    print(myList)\n    print(len(myList))\n    \n    \n    \n    \n    \nfind_lists((4,2,5,3))\n",
        "num_ids": 63
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    def count_list(Input):\n        list_count = 0\n        for i in Input:\n            if type(i) is list:\n                list_count += 1\n        return list_count\n",
        "num_ids": 48
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    nums=[]\n    lens=[]\n    count=0\n    for i in Input:\n        nums.append(len(i))\n        if(len(nums)>1):\n            if(nums[0]==nums[-1]):\n                count+=1\n                lens.append(nums)\n    print(\"count\",count)\n    print(\"lengths\",lens)\n",
        "num_ids": 99
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    l = []\n    for i in Input:\n        if i not in l:\n            l.append(i)\n    return len(l)\n",
        "num_ids": 37
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if type(Input) == tuple: \n        List = []\n        for i in range(len(Input)): \n            if type(Input[i]) == list: \n                List.append(Input[i])\n        return len(List)\n    else: \n        print(\"Input must be of type tuple\") \n        return \n",
        "num_ids": 82
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return sum(1 for el in Input if type(el) is list)\n",
        "num_ids": 20
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count+=1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        if type(Input[i]) == list:\n            count = count + 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_val = 0\n    min_val = 0\n    if len(arr) > 0:\n        min_val = arr[0]\n        for i in arr:\n            abs_val = abs(min_val - i)\n            if abs_val > max_val:\n                max_val = abs_val\n            if i < min_val:\n                min_val = i\n    print(max_val)\n",
        "num_ids": 101
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] - arr[j] > max_diff:\n                max_diff = arr[i] - arr[j]\n",
        "num_ids": 70
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        max_diff = max(max_diff, abs(arr[i]-arr[i+1]))\n    return max_diff\n    \n    \ndef max_Abs_Diff1(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        max_diff = max(max_diff, max(abs(arr[i]), abs(arr[i+1])))\n    return max_diff\n",
        "num_ids": 57
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] - arr[j] > max_diff:\n                max_diff = arr[i] - arr[j]\n    print(max_diff)\n",
        "num_ids": 77
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    maxDiff = float('-inf')\n    if n < 2:\n        return maxDiff\n    if n == 2:\n        return abs(arr[0] - arr[1])\n    for i in range(n-1):\n        maxDiff = max(maxDiff, abs(arr[i] - arr[i+1]))\n    return maxDiff\n",
        "num_ids": 93
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    # Sort the array\n    arr.sort()\n    max_diff = arr[1] - arr[0]\n    \n    for i in range(len(arr) - 1):\n        if arr[i+1] - arr[i] > max_diff:\n            max_diff = arr[i+1] - arr[i]\n    return max_diff\n",
        "num_ids": 89
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    maximum_abs_diff = float('-inf')\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if abs(arr[i] - arr[j]) > maximum_abs_diff: \n                maximum_abs_diff = abs(arr[i] - arr[j]) \n    return maximum_abs_diff \n",
        "num_ids": 96
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = -2147483648\n    arr_len = len(arr)\n    for i in range(0, arr_len):\n        for j in range(i+1, arr_len):\n            if (abs(arr[i]-arr[j])) > max_diff:\n                max_diff = abs(arr[i]-arr[j])\n    return max_diff\n",
        "num_ids": 94
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    min1, max1 = float('inf'), float('-inf')\n    min2, max2 = float('inf'), float('-inf')\n    for i in arr:\n        min1 = min(min1,i)\n        max1 = max(max1,i)\n    for j in arr:\n        min2 = min(min2,j)\n        max2 = max(max2,j)\n    return abs(max1-min1) + abs(max2-min2)\n    \n    \n    \n    # Python3 code to demonstrate",
        "num_ids": 131
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr)==0:\n        return -1\n    else:\n        max_diff = 0\n        for i in range(0,len(arr)):\n            for j in range(i+1,len(arr)):\n                if abs(arr[i]-arr[j])>max_diff:\n                    max_diff = abs(arr[i]-arr[j])\n        return max_diff\n",
        "num_ids": 98
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    assert (isinstance(n, int) and n >= 0), 'ERROR: input must be a non-negative integer'\n    for x in range(1, b+1):\n        if (n == x*a):\n            return (x, a)\n    return None\n",
        "num_ids": 65
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    #write your code here\n    sol = (0,0)\n    for i in range(1,n+1):\n        if (n - i) % (i-1) == 0:\n            div = (n - i) // (i-1)\n            sol = (div, (n-div))\n    return sol\n",
        "num_ids": 79
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 1\n    y = 0\n    for i in range(1, n):\n        print(x, y)\n        if a * x + b * y == n:\n            return x, y\n        elif a * x + b * y < n:\n            y += 1\n        elif a * x + b * y > n:\n            x += 1\n    return None\n",
        "num_ids": 92
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # assert a!= 0\n    # assert b!= 0\n    if n % a == 0:\n        return (0, n // a)\n    if n % b == 0:\n        return (n // b, 0)\n    if n % (a + b) == 0:\n        return (n // (a + b), 0)\n    if n % (a - b) == 0:\n        return (n // (a - b), 0)\n",
        "num_ids": 108
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n    \n    for i in range(0, n+1):\n        if ((a*i) + b) == n:\n            x = i\n            y = a*x\n            break\n    return x, y\n",
        "num_ids": 62
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, b+1):\n        for y in range(1, a+1):\n            if (x*y) == (a*b) and x!= y:\n                return (x, y)\n    return None\n",
        "num_ids": 60
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    return (2,4)\n",
        "num_ids": 10
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # First, find the solution for y\n    for y in range(1,n):\n        if a*y + b == n:\n            return a, y\n    # Then, find the solution for x\n    for x in range(1,n):\n        if a*x + b == n:\n            return x, b\n    return None\n",
        "num_ids": 82
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 1\n    y = 1\n    while a*x + b*y!= n:\n        x += 1\n        if a*x + b*y == n:\n            return (x, y)\n        y += 1\n        if a*x + b*y == n:\n            return (x, y)\n",
        "num_ids": 78
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n + 1):\n        if a * x + b * n - x == n:\n            return x, n - x\n    return None\n",
        "num_ids": 42
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [value for value in list1 if value not in list2]\n",
        "num_ids": 19
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for num in list1:\n        if num not in list2:\n            new_list.append(num)\n    return new_list\n",
        "num_ids": 42
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    # Convert list1 to set and then store it in list1_set\n    list1_set = set(list1)\n",
        "num_ids": 33
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    temp_list = []\n    for i in list1:\n        if i not in list2:\n            temp_list.append(i)\n    return temp_list\n",
        "num_ids": 42
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = list1.copy()\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1\n",
        "num_ids": 42
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = set(list1)\n    list2 = set(list2)\n    list3 = list1 - list2\n    return list3\n    \ndef remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = set(list1)\n    list2 = set(list2)\n    return list1 - list2\n",
        "num_ids": 30
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    final_list = []\n",
        "num_ids": 9
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for i in list1:\n        if i not in list2:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 42
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    temp_list = []\n    for i in list1:\n        if i not in list2:\n            temp_list.append(i)\n    return temp_list\n",
        "num_ids": 42
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    print(new_list)\n",
        "num_ids": 44
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + sum_series(n-2)\n",
        "num_ids": 30
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return n + sum_series(n - 2)\n",
        "num_ids": 37
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    x = n // 2\n    if x > 1:\n        for i in range(x):\n            sum += (n - 2*i)\n        return sum\n    else:\n        return 0\n",
        "num_ids": 53
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # if n < 2:\n    #     return n\n    # else:\n    #     return n + sum_series(n - 2)\n    \n    # Approach 1:\n    \n    # def sum_series(n):\n    #     if n < 2:\n    #         return n\n    #     else:\n    #         return n + sum_series(n - 2)\n    \n    # Approach 2:\n    \n    # def sum_series(n):\n    #     return (n + (n - 2)) if n < 2 else (n + sum_series(n - 2))\n    \n    # Approach 3:\n    \n    def sum_series(n):\n        return n if n < 2 else sum_series(n - 2) + n\n    \n    return sum_series(n)\n    \nsum_series = lambda n: n if n < 2 else sum_series(n - 2) + n\n",
        "num_ids": 216
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n - 2)\n",
        "num_ids": 30
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    return n + sum_series(n-2)\n",
        "num_ids": 26
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    return n + sum_series(n-2)\n",
        "num_ids": 26
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + (n-2) + (n-4) + (n-6) + (n-8) + (n-10) + (n-12)\n",
        "num_ids": 69
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    #solution 1\n    if n <= 0:\n        return 0\n    return n + sum_series(n - 2)\n",
        "num_ids": 32
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*l) / 2\n    return area\n",
        "num_ids": 17
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (0.25 * (s * (s - l) * tan(pi / (s + 2))) ** 0.5)\n",
        "num_ids": 33
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * l ** 2) / (4 * tan(pi / l))\nprint(area_polygon(2, 3))\n",
        "num_ids": 34
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    n = len(l)\n    s = sum(l) / n\n    return ((n*s*s)/(4*tan(pi/n)))\n",
        "num_ids": 39
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*l*0.5)\n",
        "num_ids": 14
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if l < 3:\n        raise ValueError('The polygon must have at least 3 sides')\n    return (s*l*0.5)\n",
        "num_ids": 37
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    import math\n    n = len(s)\n    s = sum(s)\n    return ((n*s)/2)\n",
        "num_ids": 32
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * pi * (s * s)\n    return round(area, 3)\n",
        "num_ids": 26
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    n = l / 2\n    sides_list = [n for i in range(0,s)]\n    return (sides_list[0]*sides_list[1])/2\n",
        "num_ids": 48
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if l < 0 or s < 3:\n        print('Invalid input')\n    else:\n        x1 = l / (2 * tan(pi / s))\n        area = pi * x1 * s\n        print(round(area, 3))\n",
        "num_ids": 60
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divs = []\n    divisor = 2\n    while divisor <= n:\n        if n % divisor == 0: \n            divs.append(divisor)\n        divisor += 1\n",
        "num_ids": 54
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 0\n    for i in range(1, (n//2)+1):\n        if (n%i == 0):\n            sum = sum + i\n    if(sum == n):\n        return True\n    else:\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    d = 2\n    while d <= math.sqrt(n):\n        if n % d == 0:\n            divisors.append(d)\n            divisors.append(n//d)\n        d += 1\n    return sum(divisors) == n\n",
        "num_ids": 73
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0 \n    for i in range(1, (n//2)+1): \n        if n % i == 0: \n            div_sum += i \n            if i == n: \n                div_sum += n \n    return div_sum == n \n",
        "num_ids": 70
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div = 0\n    for i in range(1,int(math.sqrt(n))): \n        if n % i == 0: \n            div += i \n            div += n // i \n    return div == n \ndef subsetSum(a, n, sum, res): \n    if n == 0 and sum == 0: \n        return res.append([]) \n    if sum > 0: \n        res = subsetSum(a, n - 1, sum - a[n], res) \n        res = subsetSum(a, n - 1, sum, res) \n    return res\ndef bin_search(arr, l, r, x):\n    while l <= r: \n        mid = l + (r - l) // 2; \n        if arr[mid] == x: return mid \n        if arr[mid] > x: r = mid - 1\n        else: l = mid + 1\n    return -1\ndef palindrome(s):\n    i, j = 0, len(s)-1\n    while i < j:\n        if s[i]!= s[j]: return False\n        i += 1\n        j -= 1\n    return True\ndef palindrome2(s):\n    return s == s[::-1]\ndef palindrome3(s):\n    return s == s[::-1]\ndef ispalin(s):\n    return s == s[::-1]\ndef ispalin2(s):\n    return s == s[::-1]\ndef ispalin3(s):\n    return s == s[::-1]\ndef count_odd(n):\n    cnt = 0\n    while n!= 0:\n        if n%2 == 1:\n            cnt += 1\n        n //= 2\n    return cnt\ndef count_odd2(n):\n    res = 0\n    while n!= 0:\n        res += 1\n        if n%2 == 1:\n            n //= 2\n    return res\ndef count_odd3(n):\n    return n%2 + n//2\ndef count_odd4(n):\n    return 1\ndef is_odd(n):\n    return n%2 == 1\ndef is_odd2(n):\n    return n%2 == 1\ndef is_odd3(n):\n    return n%2 + n//2 == 1\ndef is_odd4(n):\n    return True\ndef is_odd5(n):\n    return n%2 == 1\ndef is_odd6(n):\n    return n%2 == 1\ndef is_odd7(n):\n    return n%2 + n//2 == 1\ndef is_odd8(n):\n    return n%2 == 1\ndef is_odd9(n):\n    return n%2 == 1\ndef is_odd10(n):\n    return n%2 == 1\ndef numTrees(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0: return 1\n    a = [0]*n\n    a[0] = 1\n    for i in range(1,n):\n        for j in range(i):\n            a[i] += a[j]*a[i-j-1]\n    return a[n-1]\ndef numTrees2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0: return 1\n    a = [0]*n\n    a[0] = 1\n    for i in range(1,n):\n        for j in range(i):\n            a[i] += a[j]*a[i-j-1]\n    return a[n-1]\ndef numTrees3(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0: return 1\n    a = [0]*n\n    a[0] = 1\n    for i in range(1,n):\n        for j in range(i):\n            a[i] += a[j]*a[i-j-1]\n    return a[n-1]\ndef numTrees4(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0: return 1\n    a = [0]*n\n    a[0] = 1\n    for i in range(1,n):\n        for j in range(i):\n            a[i] += a[j]*a[i-j-1]\n    return a[n-1]\ndef numTrees5(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0: return 1\n    a = [0]*n\n    a[0] = 1\n    for i in range(1,n):\n        for j in range(i):\n            a[i] += a[j]*a[i-j-1]\n    return a[n-1]\ndef numTrees6(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0: return 1\n    a = [0]*n\n    a[0] = 1\n    for i in range(1,n):\n        for j in range(i):\n            a[i] += a[j]*a[i-j-1]\n    return a[n-1]\ndef numTrees7(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0: return 1\n    a = [0]*n\n    a[0] = 1\n    for i in range(1,n):\n        for j in range(i):\n            a[i] += a[j]*a[i-j-1]\n    return a[n-1]\ndef numTrees8(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0: return 1\n    a = [0]*n\n    a[0] = 1\n    for i in range(1,n):\n        for j in range(i):\n            a[i] += a[j]*a[i-j-1]\n    return a[n-1]\ndef numTrees9(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0: return 1\n    a = [0]*n\n    a[0] = 1\n    for i in range(1,n):\n        for j in range(i):\n            a[i] += a[j]*a[i-j-1]\n    return a[n-1]\ndef numTrees10(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0: return 1\n    a = [0]*n\n    a[0] = 1\n    for i in range(1,n):\n        for j in range(i):\n            a[i] += a[j]*a[i-j-1]\n    return a[n-1]\ndef numTrees11(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0: return 1\n    a = [0]*n\n    a[0] = 1\n    for i in range(1,n):\n        for j in range(i):\n            a[i] += a[j]*a[i-j-1]\n    return a[n-1]\ndef numTrees12(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0: return 1\n    a = [0]*n\n    a[0] = 1\n    for i in range(1,n):\n        for j in range(i):\n            a[i] += a[j]*a[i-j-1]\n    return a[n-1]\ndef numTrees13(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0: return 1\n    a = [0]*n\n    a[0] = 1\n    for i in range(1,n):\n        for j in range(i):\n            a[i] += a[",
        "num_ids": 2009
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def divisors(n):\n        divisors = []\n        for i in range(1,int(math.sqrt(n))+1):\n            if n%i == 0:\n                divisors.append(i)\n                if i!= n//i:\n                    divisors.append(n//i)\n        return divisors\n",
        "num_ids": 86
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divs = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divs.append(i)\n    print(sum(divs))\n    if sum(divs) == n:\n        print('{0} is sum of two integers'.format(n))\n    else:\n        print('{0} is not sum of two integers'.format(n))\n",
        "num_ids": 98
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s = 0\n    for i in range(1,n):\n        if n % i == 0:\n            s += i\n    if s == n:\n        return True\n    else:\n        return False\n",
        "num_ids": 51
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # as we need to sum two numbers we will use the euclidean algorithm\n    # the sum of the divisors of a number is the product of the prime factors of its number\n    # for example:\n    # for 5, the divisors are 1, 5 and 1\n    # so the sum of the divisors of 5 is (1*5*1) + (1*5*1) = 5\n    # there is no need to calculate divisors as we already have them\n    # for example:\n    # for 99, the divisors are 1, 9, 9, 9, 1\n    # so the sum of the divisors of 99 is (1*9*9*9*1) + (1*9*9*9*1) = 18\n    # and the sum of the divisors is 18 \n    # so the sum of the divisors is (1*9*9*9*1) + (1*9*9*9*1) = (1*9*9*9*1) + (1*9*9*9*1) = 18 + 18 = 36\n",
        "num_ids": 260
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1,n//2+1):\n        if n % i == 0:\n            divisors.append(i)\n    for i in range(2,len(divisors)):\n        if (n-2) % i == 0:\n            return False\n        elif (n+2) % i == 0:\n            return False\n    return True\ndef div_sum2(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i=1\n    count=0\n    while count<n:\n        if n%i==0:\n            count+=1\n        i+=1\n    return i==n\ndef div_sum3(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    count=0\n    for i in range(1,n//2+1):\n        if n % i == 0:\n            count+=1\n    if count == n-2:\n        return True\n    else:\n        return False\ndef sum_of_div(n):\n    '''\n    Write a function that returns the sum of the divisors of an integer, except ignore the divisor that is exactly \n    divisible by n, namely, 4.\n",
        "num_ids": 41
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    dictionary = {}\n    for i in range(1, 27):\n        dictionary[chr(i)] = 0\n    for i in range(len(str1)):\n        dictionary[str1[i]] = dictionary.get(str1[i], 0) + 1\n    return dictionary\n        \nprint(count_char_position(\"welcome\"))\nprint(count_char_position(\"world\"))\nprint(count_char_position(\"wel\")",
        "num_ids": 108
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    n_char_pos = {}\n    for i in range(len(str1)):\n        n_char_pos[str1[i]] = n_char_pos.get(str1[i], 0) + 1\n    return n_char_pos\n",
        "num_ids": 63
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if ord(str1[i])-96 == ord(str1[i-1]):\n            count += 1\n    print(count)\n    \n    \ndef count_char_not_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at different positions in the string than the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if ord(str1[i])-96!= ord(str1[i-1]):\n            count += 1\n    print(count)\n    \n",
        "num_ids": 57
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    str1 = str1.lower()\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for ch in str1:\n        if ch in alphabet:\n            pos = alphabet.index(ch)\n            if ch == alphabet[pos]:\n                count += 1\n    return count\n",
        "num_ids": 81
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    import re\n    s = str1\n    #print(s)\n    #print(s.count(\"e\"))\n    #print(s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"e\")+s.count(\"E\"))\n    #print(s.count(\"e\")+s.count(\"E\"))\n    #print(s.count(\"e\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"e\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"e\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"e\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"e\")+s.count(\"E\"))\n    #print(s.count(\"e\")+s.count(\"E\"))\n    #print(s.count(\"e\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"e\"))\n    #print(s.count(\"E\")+s.count(\"e\"))\n    #print(s.count(\"e\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"e\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s.count(\"E\"))\n    #print(s.count(\"E\")+s",
        "num_ids": 1997
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    counter = 0\n    for x in range(len(str1)):\n        if str1[x] == str1[x].lower():\n            counter += 1\n    return counter\n",
        "num_ids": 47
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for c in str1:\n        if c in 'qwertyuiopasdfghjklzxcvbnm':\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] in \"qwertyuiopasdfghjklzxcvbnm\":\n            count += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alpha_list = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    count = 0\n    for i in str1:\n        if i in alpha_list:\n            count += 1\n    return count\n",
        "num_ids": 92
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    count = 0\n    for i in range(0,len(str1)):\n        if str1[i].lower() == str1[i].upper():\n            count += 1\n    return count\n",
        "num_ids": 51
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    return\n",
        "num_ids": 5
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    from collections import Counter\n",
        "num_ids": 8
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n    \n        \n",
        "num_ids": 63
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    cnt = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                cnt += 1\n    return cnt\n",
        "num_ids": 65
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n",
        "num_ids": 7
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair = 0\n    for i in range(len(A)): \n        for j in range(i+1,len(A)):\n            if A[i] ^ A[j] == 0:\n                even_pair += 1\n",
        "num_ids": 60
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                even_count += 1\n    return even_count\n",
        "num_ids": 68
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n    \nA = [4, 2, 5, 4, 1, 7, 5, 4]\nprint(find_even_pair(A))\n",
        "num_ids": 92
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if i!= j:\n                if A[i] ^ A[j] == 0:\n                    count += 1\n    return count\n    \ndef find_even_pair_alt(A):\n    '''\n    Using the same solution, but this one doesn't use a set and also uses an extra variable.\n    '''\n    xor = 0\n    count = 0\n    for i in range(len(A)):\n        if A[i] ^ xor == 0:\n            xor = A[i]\n            count += 1\n    return count\n",
        "num_ids": 56
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 0:\n        return 0\n    while n > 1:\n        n = n >> 1\n    return n + 1\n",
        "num_ids": 33
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n > 1:\n        n >>= 1\n    return n\n",
        "num_ids": 19
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    result = 1\n    while result <= n:\n        result = result << 1\n    return result - 1\n",
        "num_ids": 27
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        i <<= 1\n    return i >> 1\n",
        "num_ids": 26
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    exponent = 0\n    while n >= 2**exponent:\n        exponent += 1\n    return 2**exponent\n",
        "num_ids": 31
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 1:\n        print(\"Given number is less than 1.\")\n        return -1\n    while (n & 0xffffffff) > 0:\n        n = n >> 1\n    return n\n",
        "num_ids": 50
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n%2 == 0:\n        n >>=1\n    return n\n",
        "num_ids": 21
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    next_power_of_2 = 2\n    while True:\n        if next_power_of_2 >= n:\n            return next_power_of_2\n        next_power_of_2 += 1\n",
        "num_ids": 52
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 0:\n        return False\n    return 1 << (n - 1).bit_length()",
        "num_ids": 26
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 << (n - 1).bit_length()\n",
        "num_ids": 16
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    result = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            result += 1\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n",
        "num_ids": 11
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    result = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            result += 1\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    c=0\n    for i in range(len(a)):\n        if a[i]==x:\n            c=c+1\n    return c\n",
        "num_ids": 40
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return sum(1 for i in a if i == x)\n",
        "num_ids": 17
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    l=[]\n    for i in a:\n        if i == x:\n            l.append(i)\n    return l.count(x)\n",
        "num_ids": 38
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)): \n        if a[i] == x: \n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    counter=0\n    for item in a:\n        if item == x:\n            counter+=1\n    return counter\n",
        "num_ids": 30
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    cnt=0\n    for i in range(len(a)):\n        if a[i]==x:\n            cnt=cnt+1\n    return cnt\n",
        "num_ids": 44
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if(a[i] == x):\n            count += 1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    i = 0\n    result = 0\n    while i < len(list1):\n        if list1[i] >= m and list1[i] <= n:\n            result += list1[i]\n        i += 1\n    return result\n    \nlist1 = [1, 2, 3, 4, 5, 6]\nm = 0\nn = 4\nprint(sum_range_list(list1, m, n))\n",
        "num_ids": 102
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if (m > len(list1) - 1): \n        return 0\n    elif (n > len(list1) - 1): \n        return sum(list1[m:]) \n    else: \n        return sum(list1[m:n+1]) \n    \n'''\nWrite a function called max_num_in_list. The function should take in a list of numbers and return the largest number. \n'''\ndef max_num_in_list(list1): \n    ''' \n    Write a function called max_num_in_list. The function should take in a list of numbers and return the largest number. \n    '''\n    max_num = max(list1)\n    return max_num\n    \n'''\nWrite a function called list_sum. The function should take in a list of numbers, add up the elements of the list and return the total. \n'''\ndef list_sum(list1): \n    ''' \n    Write a function called list_sum. The function should take in a list of numbers, add up the elements of the list and return the total. \n    '''\n    sum_list = 0 \n    for num in list1: \n        sum_list = sum_list + num \n    return sum_list \n    \n'''\nWrite a function called list_average. The function should take in a list of numbers, return the average of the numbers and return the total. \n'''\ndef list_average(list1): \n    ''' \n    Write a function called list_average. The function should take in a list of numbers, return the average of the numbers and return the total. \n    '''\n    sum_list = 0 \n    for num in list1: \n        sum_list = sum_list + num \n        avg = sum_list / len(list1) \n    return avg \n    \n'''\nWrite a function called list_even_avg. The function should take in a list of numbers and return the average of the even numbers and return the total. \n'''\ndef list_even_avg(list1): \n    ''' \n    Write a function called list_even_avg. The function should take in a list of numbers and return the average of the even numbers and return the total. \n    '''\n    sum_list = 0 \n    for num in list1: \n        sum_list = sum_list + num \n        avg = sum_list / len(list1) \n        if (avg % 2 == 0): \n            return avg \n        else: \n            return avg\n        \n'''\nWrite a function called max_num_even. The function should take in a list of numbers and return the largest even number. \n'''\ndef max_num_even(list1): \n    ''' \n    Write a function called max_num_even. The function should take in a list of numbers and return the largest even number. \n    '''\n    max_num = max(list1)\n    return max_num \n    \n'''\nWrite a function called min_num_even. The function should take in a list of numbers and return the smallest even number. \n'''\ndef min_num_even(list1): \n    ''' \n    Write a function called min_num_even. The function should take in a list of numbers and return the smallest even number. \n    '''\n    min_num = min(list1)\n    return min_num \n    \n'''\nWrite a function called middle_num. The function should take in a list of numbers and return the median number. \n'''\ndef middle_num(list1): \n    ''' \n    Write a function called middle_num. The function should take in a list of numbers and return the median number. \n    '''\n    return (sum(list1) / (len(list1) - 1)) \n    \n'''\nWrite a function called sum_of_powers. The function should take in a list of numbers and return the sum of each element raised to the nth power. \n'''\ndef sum_of_powers(list1): \n    ''' \n    Write a function called sum_of_powers. The function should take in a list of numbers and return the sum of each element raised to the nth power. \n    '''\n    sum_list = 0 \n    for num in list1: \n        sum_list = sum_list + num ** len(list1)\n    return sum_list \n    \n'''\nWrite a function called list_avg_power. The function should take in a list of numbers and return the average of each element raised to the nth power. \n'''\ndef list_avg_power(list1): \n    ''' \n    Write a function called list_avg_power. The function should take in a list of numbers and return the average of each element raised to the nth power. \n    '''\n    sum_list = 0 \n    for num in list1: \n        sum_list = sum_list + num ** len(list1)\n        avg_power = sum_list / len(list1)\n    return avg_power \n    \n'''\nWrite a function called max_num_power. The function should take in a list of numbers and return the largest element raised to the nth power. \n'''\ndef max_num_power(list1): \n    ''' \n    Write a function called max_num_power. The function should take in a list of numbers and return the largest element raised to the nth power. \n    '''\n    max_power = max(list1)\n    return max_power \n    \n'''\nWrite a function called min_num_power. The function should take in a list of numbers and return the smallest element raised to the nth power. \n'''\ndef min_num_power(list1): \n    ''' \n    Write a function called min_num_power. The function should take in a list of numbers and return the smallest element raised to the nth power. \n    '''\n    min_power = min(list1)\n    return min_power \n    \n'''\nWrite a function called list_sum_power. The function should take in a list of numbers and return the sum of each element raised to the nth power. \n'''\ndef list_sum_power(list1): \n    ''' \n    Write a function called list_sum_power. The function should take in a list of numbers and return the sum of each element raised to the nth power. \n    '''\n    sum_list = 0 \n    for num in list1: \n        sum_list = sum_list + num ** len(list1)\n    return sum_list \n    \n'''\nWrite a function called list_avg_power. The function should take in a list of numbers and return the average of each element raised to the nth power. \n'''\ndef list_avg_power(list1): \n    ''' \n    Write a function called list_avg_power. The function should take in a list of numbers and return the average of each element raised to the nth power. \n    '''\n    sum_list = 0 \n    for num in list1: \n        sum_list = sum_list + num ** len(list1)\n        avg_power = sum_list / len(list1)\n    return avg_power \n    \n'''\nWrite a function called list_even_avg_power. The function should take in a list of numbers and return the average of the even numbers raised to the nth power. \n'''\ndef list_even_avg_power(list1): \n    ''' \n    Write a function called list_even_avg_power. The function should take in a list of numbers and return the average of the even numbers raised to the nth power. \n    '''\n    sum_list = 0 \n    for num in list1: \n        sum_list = sum_list + num ** len(list1)\n        avg = sum_list / len(list1) \n        if (avg % 2 == 0): \n            return avg \n        else: \n            return avg\n        \n'''\nWrite a function called max_num_even_power. The function should take in a list of numbers and return the largest even number raised to the nth power. \n'''\ndef max_num_even_power(list1): \n    ''' ",
        "num_ids": 2
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > 0 and n < len(list1):\n        return sum(list1[m:n+1])\n    elif m > 0 and n >= len(list1):\n        return sum(list1[m:])\n    elif m < 0 and n >= len(list1):\n        return sum(list1[:n])\n    else:\n        return 0\n",
        "num_ids": 90
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m,n+1):\n        sum += list1[i]\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum = sum + list1[i]\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    result = 0\n    for i in range(m, n+1):\n        result += list1[i]\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m,n+1):\n        sum += list1[i]\n    print(sum)\n",
        "num_ids": 35
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    if m < 0 or m > len(list1) - 1:\n        return total\n    if n < 0 or n > len(list1) - 1:\n        return total\n    if m < n:\n        for i in range(m + 1, n + 1):\n            total += list1[i]\n    else:\n        for i in range(n + 1, m + 1):\n            total += list1[i]\n    return total\n",
        "num_ids": 112
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(len(list1)):\n        if i >= m and i < n:\n            sum += list1[i]\n    return sum\n",
        "num_ids": 44
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    print(3*(a**2-a)/2)\n",
        "num_ids": 17
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    a = int(a)\n    if a <= 0:\n        raise Exception(\"Sides must be positive numbers\")\n    if a == 1:\n        return a\n    else:\n        return a * 5\n        \ndef perimeter_triangle(b):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    b = int(b)\n    if b <= 0:\n        raise Exception(\"Sides must be positive numbers\")\n    if b == 1:\n        return b\n    else:\n        return b * 4\n        \ndef perimeter_square(c):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its sides.\n    '''\n    c = int(c)\n    if c <= 0:\n        raise Exception(\"Sides must be positive numbers\")\n    if c == 1:\n        return c\n    else:\n        return c * 4\n        \ndef circumference_circle(d):\n    '''\n    Write a function to find the circumference of a circle with radius of a given value.\n    '''\n    d = int(d)\n    if d < 0:\n        raise Exception(\"Radius must be positive\")\n    else:\n        return 2 * math.pi * d\n        \ndef circumference_square(e):\n    '''\n    Write a function to find the circumference of a regular square.\n    '''\n    e = int(e)\n    if e < 0:\n        raise Exception(\"Sides must be positive numbers\")\n    else:\n        return e * 4\n        \ndef circumference_circle(f):\n    '''\n    Write a function to find the circumference of a regular circle.\n    '''\n    f = int(f)\n    if f < 0:\n        raise Exception(\"Radius must be positive\")\n    else:\n        return math.pi * f\n        \ndef area_circle(g):\n    '''\n    Write a function to find the area of a circle with radius of a given value.\n    '''\n    g = int(g)\n    if g < 0:\n        raise Exception(\"Radius must be positive\")\n    else:\n        return math.pi * math.pow(g, 2)\n        \ndef area_square(h):\n    '''\n    Write a function to find the area of a regular square.\n    '''\n    h = int(h)\n    if h < 0:\n        raise Exception(\"Sides must be positive numbers\")\n    else:\n        return h * h\n        \ndef area_circle(i):\n    '''\n    Write a function to find the area of a regular circle.\n    '''\n    i = int(i)\n    if i < 0:\n        raise Exception(\"Radius must be positive\")\n    else:\n        return math.pi * math.pow(i, 2)\n",
        "num_ids": 48
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5\n",
        "num_ids": 8
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    s = a*(1-math.sqrt(5))/2\n    return 2*s\n",
        "num_ids": 26
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    import math\n    return a * 5\n    #return math.sqrt(3) * a\n",
        "num_ids": 25
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a * 5) * math.sqrt(5)\n",
        "num_ids": 18
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (5*a)\n",
        "num_ids": 10
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    import math\n    s = (a * (5 * math.sqrt(5) - math.sqrt(10))) / 2\n    return a + s\n",
        "num_ids": 39
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a * 5\ndef sum_triangle_sides(a,b,c):\n    '''\n    Write a function to find the sum of 3 sides of a triangle\n    '''\n    return a + b + c\ndef area_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle\n    '''\n    p = (a + b + c) / 2\n    return math.sqrt(p * (p - a) * (p - b) * (p - c))\n",
        "num_ids": 42
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = a * 5\n    return perimeter\n",
        "num_ids": 14
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    n = 0\n    for i in range(len(s)):\n        if s[i] == 'd':\n            n += 1\n    return n\n",
        "num_ids": 39
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if type(s) is not str:\n        return -1\n    s = s.lower()\n    if s.count(\"std\") == 0:\n        return 0\n    else:\n        return s.count(\"std\")\nprint(count_occurance(\"The cat in the hat\"))\n",
        "num_ids": 69
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    # TC : O(n)\n    # SC : O(1)\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='s':\n            count += 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='s' or s[i] == 't' or s[i] == 'd' or s[i] == 'a':\n            count += 1\n    print(count)\n",
        "num_ids": 68
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if'std' in s[i:i+5]:\n            count += 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-len(s.replace('std',''))):\n        if s[i:i+len(s.replace('std',''))] =='std':\n            count += 1\n    print(count)\n",
        "num_ids": 64
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    s = s.replace(' ','')\n    count = s.count('std')\n    print(count)\n",
        "num_ids": 29
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count=0\n    for i in range(0, len(s)-3):\n        if(s[i]=='s' and s[i+1]=='d' and s[i+2]=='t' and s[i+3]=='d'):\n            count=count+1\n    return count\n",
        "num_ids": 79
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occ = 0\n    for i in range(len(s)):\n        if s[i] =='s':\n            occ += 1\n    return occ\n",
        "num_ids": 39
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    try:\n        if isinstance(test_tuple, tuple):\n            return all(isinstance(element, type(test_tuple[0])) for element in test_tuple)\n        else:\n            return False\n    except:\n        return False\n",
        "num_ids": 63
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return isinstance(test_tuple[0],type(test_tuple[1]))\n",
        "num_ids": 25
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 1:\n        return False\n    dtype = type(test_tuple[0])\n    for item in test_tuple[1:]:\n        if type(item)!= dtype:\n            return False\n    return True\n",
        "num_ids": 65
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not isinstance(test_tuple, tuple):\n        raise TypeError('This is not a tuple!')\n    \n    # Now we check if all the elements have the same data type.\n    # Check only upto 2nd elements.\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= type(test_tuple[0]):\n            return False\n    return True\n",
        "num_ids": 105
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    a = len(test_tuple)\n    if a < 2:\n        return False\n    else:\n        for i in range(a):\n            if type(test_tuple[i])!= type(test_tuple[0]):\n                return False\n        return True\n",
        "num_ids": 69
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    for i in range(0,len(test_tuple)-1):\n        if type(test_tuple[i]) == type(test_tuple[i+1]):\n            return True\n        else:\n            return False\n        \ndef check_type_gen(test_tuple):\n    '''\n    Write a generator to check if all the elements in tuple have same data type or not.\n    '''\n    \n    for i in test_tuple:\n        if type(i) == type(test_tuple[i+1]):\n            yield True\n        else:\n            yield False\n",
        "num_ids": 48
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in test_tuple:\n        if type(i)!= type(test_tuple[0]):\n            print(\"Invalid Input\")\n            return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    var = 1\n    while var:\n        if test_tuple[0] == test_tuple[1] == test_tuple[2] == test_tuple[3]:\n            print(\"All the elements in the tuple are same data type.\")\n            var = 0\n        else:\n            print(\"All the elements in the tuple are not same data type.\")\n            var = 0\n",
        "num_ids": 91
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = test_tuple[0].__class__\n    if all(type(i) == data_type for i in test_tuple):\n        return True\n    return False\n",
        "num_ids": 47
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # for i in range(n):\n    #     if arr[i] == x:\n    #         return True\n    # return False\n    # # O(n)\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    return False\n",
        "num_ids": 89
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    x = abs(x)\n",
        "num_ids": 10
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    l = 0\n    r = n-1\n    mid = 0\n    count = 0\n    while(l<r):\n        mid = (l+r)//2\n        if arr[mid] == x:\n            count+=1\n        if arr[mid]!= x:\n            count-=1\n        if count == 0:\n            return True\n        if count < 0:\n            l = mid+1\n        else:\n            r = mid\n    return False\n",
        "num_ids": 113
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2\n",
        "num_ids": 39
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    counter = 0\n    for i in range(0,n):\n        if arr[i] == x:\n            counter += 1\n            if counter > (n/2):\n                return True\n    return False\n",
        "num_ids": 51
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    if len(arr) == 1 and arr[0] == x:\n        return True\n    if len(arr) == 1 and arr[0]!= x:\n        return False\n    \n    if len(arr) == 2 and arr[0] == x:\n        return True\n    if len(arr) == 2 and arr[0]!= x:\n        return False\n    \n    middle = len(arr) // 2\n    left_half = arr[0:middle]\n    right_half = arr[middle:]\n    \n    if x == left_half[0]:\n        if len(left_half) == 1 or x!= left_half[-1]:\n            return False\n        elif len(left_half) == 2 and x!= left_half[-1] and x!= left_half[0]:\n            return False\n        else:\n            return True\n    elif x == right_half[0]:\n        if len(right_half) == 1 or x!= right_half[-1]:\n            return False\n        elif len(right_half) == 2 and x!= right_half[-1] and x!= right_half[0]:\n            return False\n        else:\n            return True\n    \n    if len(left_half) == 1 and x!= left_half[0]:\n        return False\n    elif len(left_half) == 2 and x!= left_half[-1] and x!= left_half[0]:\n        return False\n    elif len(left_half) == 2 and x == left_half[-1]:\n        return True\n    \n    if len(right_half) == 1 and x!= right_half[0]:\n        return False\n    elif len(right_half) == 2 and x!= right_half[-1] and x!= right_half[0]:\n        return False\n    elif len(right_half) == 2 and x == right_half[-1]:\n        return True\n    \n    return False\n    \n    '''\n    Brute Force:\n    '''\n    \n    if len(arr) <= 1:\n        return True\n    if len(arr) == 2:\n        return arr[0] == x or arr[1] == x\n    middle = len(arr) // 2\n    left_half = arr[:middle]\n    right_half = arr[middle:]\n    \n    if x == left_half[0]:\n        if len(left_half) == 1 or x!= left_half[-1]:\n            return False\n        elif len(left_half) == 2 and x!= left_half[-1] and x!= left_half[0]:\n            return False\n        else:\n            return True\n    elif x == right_half[0]:\n        if len(right_half) == 1 or x!= right_half[-1]:\n            return False\n        elif len(right_half) == 2 and x!= right_half[-1] and x!= right_half[0]:\n            return False\n        else:\n            return True\n    \n    if len(left_half) == 1 and x!= left_half[0]:\n        return False\n    elif len(left_half) == 2 and x!= left_half[-1] and x!= left_half[0]:\n        return False\n    elif len(left_half) == 2 and x == left_half[-1]:\n        return True\n    \n    if len(right_half) == 1 and x!= right_half[0]:\n        return False\n    elif len(right_half) == 2 and x!= right_half[-1] and x!= right_half[0]:\n        return False\n    elif len(right_half) == 2 and x == right_half[-1]:\n        return True\n    \n    return False\n",
        "num_ids": 428
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    major = arr[0]\n    count = 1\n    for i in range(1, n):\n        if arr[i] == major:\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            major = arr[i]\n            count = 1\n    if major == x:\n        return True\n    else:\n        return False\n",
        "num_ids": 89
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if(n == 1):\n        return True\n    if(n == 2):\n        if(x == arr[0]):\n            return True\n        return False\n    if(arr[n // 2] == x):\n        return True\n    elif(x == arr[0]):\n        return True\n    elif(arr[n // 2] == arr[n // 2 + 1]):\n        return True\n    elif(x == arr[n // 2 + 1]):\n        return True\n    elif(arr[0] == x):\n        return True\n    elif(x == arr[n // 2]):\n        return True\n    return False\n",
        "num_ids": 157
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return True\n    if n == 0:\n        return False\n    if arr[n // 2] == x:\n        return True\n    if arr[n // 2]!= x:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n",
        "num_ids": 31
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += 1\n        n = n & (n - 1)\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n&1\n        n >>= 1\n    return count",
        "num_ids": 28
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n",
        "num_ids": 32
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    #l = (n + 1)\n    #count = 0\n    #while (l!= 0):\n    #    if (l % 2 == 0):\n    #        count = count + 1\n    #    l = l // 2\n    #print(count)\n    print(bin(n))\n    count = 0\n    while(n!= 0):\n        if (n % 2 == 1):\n            count = count + 1\n        n = n // 2\n    print(count)\ncount_Set_Bits(145)\n",
        "num_ids": 127
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count(\"1\")\n    \ndef count_Set_Bits_3(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count(\"1\", 1)\n    \ndef count_Set_Bits_4(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count(\"1\", 2)\n",
        "num_ids": 15
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    c = 0\n    while n!= 0:\n        c += 1\n        n = n & (n - 1)\n    return c\n",
        "num_ids": 35
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count=0\n    while(n):\n        n&=n-1\n        count=count+1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    c=0\n    while n!=0:\n        n=n&(n-1)\n        c+=1\n    return c",
        "num_ids": 34
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    cnt=0\n    while n:\n        cnt+=1\n        n=n&(n-1)\n    return cnt\n",
        "num_ids": 35
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_values = \"\"\n    for index, char in enumerate(str):\n        if index % 2 == 0:\n            odd_values += char\n    return odd_values\n",
        "num_ids": 43
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # your code here\n    # str = 'geeksforgeeks'\n    # s = 'ae'\n    return \"\".join([i for i in str if (str.index(i) % 2) == 0])\n",
        "num_ids": 53
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    new_str = \"\"\n    \n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    print(new_str)\n    \n    \nodd_values_string(\"Test\")\nodd_values_string(\"geeksforgeeks\")\nodd_values_string(\"abcd\")\nodd_values_string(\"w3resource\")\nodd_values_string(\"gfg\")",
        "num_ids": 107
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    l = list(str)\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l.pop(i)\n    return ''.join(l)\n",
        "num_ids": 48
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[index] for index in range(0, len(str), 2)])\n",
        "num_ids": 27
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    odd_chars = []\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_chars.append(str[i])\n    for i in range(len(odd_chars)):\n        result = result + odd_chars[i]\n    return result\n",
        "num_ids": 82
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    if str is None:\n        print(\"Input String cannot be None\")\n        return\n    if len(str) == 0:\n        print(\"Input string cannot be empty\")\n        return\n",
        "num_ids": 47
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    x = list(str)\n    l = len(x)\n    for i in range(l):\n        if i%2!=0:\n            x.remove(x[i])\n    return \"\".join(x)\n",
        "num_ids": 56
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = 'abcde'\n    result = ''\n    for i in range(0,len(str),2):\n        result = result + str[i]\n    return result\nprint(odd_values_string('abcde'))\n",
        "num_ids": 57
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    i = 0\n    for letter in str:\n        i += 1\n        if i%2!= 0:\n            new_str += letter\n    return new_str\n",
        "num_ids": 49
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<=b and a<=c:\n        return a\n    elif b<=a and b<=c:\n        return b\n    else:\n        return c\n",
        "num_ids": 45
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\nprint(min_of_three(1,3,2))\n",
        "num_ids": 66
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    return c\n",
        "num_ids": 37
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b < c:\n        return a\n    elif b < a < c:\n        return b\n    else:\n        return c\n",
        "num_ids": 37
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n",
        "num_ids": 41
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "num_ids": 13
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    elif b<c:\n        return b\n    else:\n        return c\n",
        "num_ids": 48
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c:\n        return a\n    elif b<c<a:\n        return b\n    elif c<a<b:\n        return c\n    else:\n        return -1\n",
        "num_ids": 52
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c:\n        return a\n    elif b>c:\n        return b\n    else:\n        return c\n",
        "num_ids": 37
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n",
        "num_ids": 51
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    return (n & ((1<<l) - 1) == 0) and (n & ((1<<r) - 1) == 0)\n    \n    \n",
        "num_ids": 40
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    for i in range(n):\n        if (l&(1<<i))>0:\n            print(f\"1{i}\",end=\" \")\n        else:\n            print(f\"0{i}\",end=\" \")\n    print(\"\\n\")\n    for i in range(n-1,-1,-1):\n        if (r&(1<<i))>0:\n            print(f\"1{i}\",end=\" \")\n        else:\n            print(f\"0{i}\",end=\" \")\n    print(\"\\n\")\n    \ndef all_Bits_Unset_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are set in the given range or not.\n    '''\n    \n    for i in range(n):\n        if (l&(1<<i))>0:\n            print(f\"1{i}\",end=\" \")\n        else:\n            print(f\"0{i}\",end=\" \")\n    print(\"\\n\")\n    for i in range(n-1,-1,-1):\n        if (r&(1<<i))>0:\n            print(f\"1{i}\",end=\" \")\n        else:\n            print(f\"0{i}\",end=\" \")\n    print(\"\\n\")\n    \ndef all_Bits_Set_In_The_Given_Range_Divisible_By_5(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are set in the given range or not.\n    '''\n    \n    for i in range(n):\n        if (l&(1<<i))>0:\n            print(f\"1{i}\",end=\" \")\n        else:\n            print(f\"0{i}\",end=\" \")\n    print(\"\\n\")\n    for i in range(n-1,-1,-1):\n        if (r&(1<<i))>0:\n            print(f\"1{i}\",end=\" \")\n        else:\n            print(f\"0{i}\",end=\" \")\n    print(\"\\n\")\n    \ndef all_Bits_Unset_In_The_Given_Range_Divisible_By_5(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are set in the given range or not.\n    '''\n    \n    for i in range(n):\n        if (l&(1<<i))>0:\n            print(f\"1{i}\",end=\" \")\n        else:\n            print(f\"0{i}\",end=\" \")\n    print(\"\\n\")\n    for i in range(n-1,-1,-1):\n        if (r&(1<<i))>0:\n            print(f\"1{i}\",end=\" \")\n        else:\n            print(f\"0{i}\",end=\" \")\n    print(\"\\n\")\n    \ndef all_Bits_Set_In_The_Given_Range_Divisible_By_7(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are set in the given range or not.\n    '''\n    \n    for i in range(n):\n        if (l&(1<<i))>0:\n            print(f\"1{i}\",end=\" \")\n        else:\n            print(f\"0{i}\",end=\" \")\n    print(\"\\n\")\n    for i in range(n-1,-1,-1):\n        if (r&(1<<i))>0:\n            print(f\"1{i}\",end=\" \")\n        else:\n            print(f\"0{i}\",end=\" \")\n    print(\"\\n\")\n    \ndef all_Bits_Unset_In_The_Given_Range_Divisible_By_7(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are set in the given range or not.\n    '''\n    \n    for i in range(n):\n        if (l&(1<<i))>0:\n            print(f\"1{i}\",end=\" \")\n        else:\n            print(f\"0{i}\",end=\" \")\n    print(\"\\n\")\n    for i in range(n-1,-1,-1):\n        if (r&(1<<i))>0:\n            print(f\"1{i}\",end=\" \")\n        else:\n            print(f\"0{i}\",end=\" \")\n    print(\"\\n\")\n    \ndef all_Bits_Set_In_The_Given_Range_Divisible_By_9(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are set in the given range or not.\n    '''\n    \n    for i in range(n):\n        if (l&(1<<i))>0:\n            print(f\"1{i}\",end=\" \")\n        else:\n            print(f\"0{i}\",end=\" \")\n    print(\"\\n\")\n    for i in range(n-1,-1,-1):\n        if (r&(1<<i))>0:\n            print(f\"1{i}\",end=\" \")\n        else:\n            print(f\"0{i}\",end=\" \")\n    print(\"\\n\")\n    \ndef all_Bits_Unset_In_The_Given_Range_Divisible_By_9(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are set in the given range or not.\n    '''\n    \n    for i in range(n):\n        if (l&(1<<i))>0:\n            print(f\"1{i}\",end=\" \")\n        else:\n            print(f\"0{i}\",end=\" \")\n    print(\"\\n\")\n    for i in range(n-1,-1,-1):\n        if (r&(1<<i))>0:\n            print(f\"1{i}\",end=\" \")\n        else:\n            print(f\"0{i}\",end=\" \")\n    print(\"\\n\")\n    \ndef all_Bits_Set_In_The_Given_Range_Divisible_By_11(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are set in the given range or not.\n    '''\n    \n    for i in range(n):\n        if (l&(1<<i))>0:\n            print(f\"1{i}\",end=\" \")\n        else:\n            print(f\"0{i}\",end=\" \")\n    print(\"\\n\")\n    for i in range(n-1,-1,-1):\n        if (r&(1<<i))>0:\n            print(f\"1{i}\",end=\" \")\n        else:\n            print(f\"0{i}\",end=\" \")\n    print(\"\\n\")\n    \ndef all_Bits_Unset_In_The_Given_Range_Divisible_By_11(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are set in the given range or not.\n    '''\n    \n    for i in range(n):\n        if (l&(1<<i))>0:\n            print(f\"1{i}\",end=\" \")\n        else:\n            print(f\"0{i}\",end=\" \")\n    print(\"\\n\")\n    for i in range(n-1,-1,-1):\n        if (r&(1<<i))>0:\n            print(f\"1{i}\",end=\" \")\n        else:\n            print(f\"0{i}\",end=\" \")\n    print(\"\\n\")\n    \ndef all_Bits_Set_In_The_Given_Range_Divisible_By_13(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are set in the given range or not.\n    '''\n    \n    for i in range(n):\n        if (l",
        "num_ids": 17
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    while(n>0):\n        n=n-1\n        if(n&l!=0 or n&r!=0):\n            return 0\n    return 1\n",
        "num_ids": 43
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        binary_num = bin(i).replace('0b','')\n        if '1' in binary_num:\n            return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    set = False\n    while l <= r:\n        if n & (1<<l) == 0:\n            set = False\n        else:\n            set = True\n        if set == True:\n            break\n        l+=1\n    return set\n",
        "num_ids": 60
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n=n>>l\n    if n&r==r:\n        return True\n    else:\n        return False\n    \n    \n",
        "num_ids": 34
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    if(l>r):\n        print(\"Invalid Input\")\n        return False\n    \n    else:\n        # convert decimal number into binary number\n        # this loop will iterate till the range is reach\n        while(l<r):\n            print(n,\"in binary = \",bin(n))\n            if(n==0):\n                print(\"All bits are set\")\n                return True\n            \n            else:\n                # if bits are not set then no need to iterate further \n                if(n%2==1):\n                    print(\"Not Set\")\n                    return False\n                else:\n                    print(\"Bit is set\")\n                    n=n//2\n                    continue\n    \n    return False\n",
        "num_ids": 165
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Bitwise And\n    return r & l == l\n    # Bitwise Or\n    return r | l == r\n    # Bitwise Not\n    return r!= l\n    # Bitwise Not Inverted\n    return ~r == l\n",
        "num_ids": 58
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (r - n + 1) & (~((r - l + 1) ^ r) )\n",
        "num_ids": 25
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    import itertools\n    temp=list(itertools.product(range(2),repeat=n))\n    output=[]\n    for j in range(len(temp)):\n        if j in range(l,r+1):\n            output.append(temp[j])\n    return output\n",
        "num_ids": 72
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Your code here\n    '''\n    for i in range(n):\n        for j in range(n):\n            if j <= i:\n                temp = arr[j]\n                arr[j] = arr[i]\n                arr[i] = temp\n    return arr\n    '''\n    arr.sort()\n    for i in range(n):\n        arr[i] = -arr[i]\n    return arr\n",
        "num_ids": 33
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_idx = 0\n    pos_idx = 0\n    while neg_idx < len(arr) and pos_idx < n:\n        if arr[pos_idx] < 0:\n            neg_idx += 1\n        else:\n            pos_idx += 1\n    \n    if neg_idx < len(arr):\n        arr = arr[:neg_idx] + arr[neg_idx+1:]\n        arr.reverse()\n    \n    if pos_idx < n:\n        arr = arr[:pos_idx] + arr[pos_idx+1:]\n    return arr\n",
        "num_ids": 151
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Sort the array by the negative values\n    arr.sort(key = lambda x: x < 0, reverse = True)\n    \n    # Sort the array by the positive values\n    arr.sort()\n    \n    # Return the re-arranged array\n    return arr\n",
        "num_ids": 67
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > 0:\n            if i > 0 and arr[i] < arr[i-1]:\n                temp = arr[i]\n                arr[i] = arr[i-1]\n                arr[i-1] = temp\n    for i in range(n):\n        if arr[i] < 0:\n            if i < n-1 and arr[i] > arr[i+1]:\n                temp = arr[i]\n                arr[i] = arr[i+1]\n                arr[i+1] = temp\n    return arr\n",
        "num_ids": 152
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = []\n    pos = []\n    i = 0\n    while i < len(arr) and arr[i] > 0:\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n        i += 1\n    for i in range(len(pos)):\n        arr.append(pos[i])\n    for i in range(len(neg)):\n        arr.append(neg[i])\n",
        "num_ids": 117
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr_copy = arr[:]\n    for i in range(n):\n        max_index = arr_copy.index(max(arr_copy))\n        arr[i] = arr_copy.pop(max_index)\n    return arr\n",
        "num_ids": 59
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    while i < n:\n        if arr[i] < 0:\n            for j in range(i + 1, len(arr)):\n                if arr[i] < arr[j]:\n                    arr[i], arr[j] = arr[j], arr[i]\n            i = 0\n        i += 1\n    return arr\n",
        "num_ids": 85
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # General Idea:\n    # 1. We will keep track of the negative elements and their position\n    # 2. We will keep track of the positive elements and their position\n    # 3. We will need to use these information to re-arrange the array elements\n    \n    # First let us define a helper function that helps us find the position of the negative element\n    def get_negative_element_position(arr, n):\n        '''\n        This function takes in an array and an integer n. It uses this information to re-arrange the array elements such that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n        '''\n        negative_element_position = -1\n        for i in range(n):\n            if arr[i] < 0:\n                negative_element_position = i\n                break\n        return negative_element_position\n    \n    # Now let us define a helper function that helps us find the position of the positive element\n    def get_positive_element_position(arr, n):\n        '''\n        This function takes in an array and an integer n. It uses this information to re-arrange the array elements such that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n        '''\n        positive_element_position = n\n        for i in range(n, len(arr)):\n            if arr[i] > 0:\n                positive_element_position = i\n                break\n        return positive_element_position\n    \n    # Now let us define a function that takes in the array and the number n\n    def re_arrange_array_helper(arr, n):\n        '''\n        This function takes in an array and an integer n. It uses this information to re-arrange the array elements such that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n        '''\n        negative_element_position = get_negative_element_position(arr, n)\n        if negative_element_position == -1:\n            return\n        \n        # First let us swap the negative element and the first element in the array\n        # We will start swapping the first element with the negative element, as the first element should be before the negative element in the case of an array with only negative elements\n        temp = arr[0]\n        arr[0] = arr[negative_element_position]\n        arr[negative_element_position] = temp\n        \n        # Now let us move the positive element\n        # We will start moving the positive element to the right, as this will be the last positive element in the array\n        # We will move the negative element to the left, as it has been moved to the right\n        positive_element_position = get_positive_element_position(arr, n)\n        temp = arr[positive_element_position]\n        arr[positive_element_position] = arr[negative_element_position]\n        arr[negative_element_position] = temp\n        \n        # Now let us move the positive element to the right one position\n        # We will move the positive element to the left, as this will be the last positive element in the array\n        # We will move the negative element to the right, as it has been moved to the left\n        for i in range(1, n):\n            positive_element_position = get_positive_element_position(arr, n - i)\n            temp = arr[positive_element_position]\n            arr[positive_element_position] = arr[negative_element_position]\n            arr[negative_element_position] = temp\n        \n        return arr\n    \n    # Now let us call the helper function\n    arr = re_arrange_array_helper(arr, n)\n    return arr\n",
        "num_ids": 425
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        for j in range(len(arr) - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n",
        "num_ids": 62
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    char = str(char)\n    char = list(char)\n    char.remove('\\'')\n    for i in range(len(str1)):\n        if str1[i] =='':\n            str1 = str1.replace(' ', char[0])\n            return str1\n            break\n",
        "num_ids": 74
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # create a blank string\n    str2 = \"\"\n    \n    # check if blank space is in the string\n    if char == \" \":\n        pass\n    else:\n        # add each element to the blank string\n        for element in str1:\n            if element == \" \":\n                str2 += char\n            else:\n                str2 += element\n    \n    return str2\n",
        "num_ids": 92
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    temp = str1.replace(\" \",\"\")\n    print(temp)\n    return temp\n",
        "num_ids": 24
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = str1.replace(\" \", char)\n    return new_str\n",
        "num_ids": 22
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    print(\"Input: \",str1)\n    #print(\"Output: \",str2)\n    i = 0\n    while i < len(str1):\n        if str1[i] =='':\n            str1 = str1[:i] + char + str1[i+1:]\n            i+=1\n        i+=1\n    return str1\n",
        "num_ids": 85
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # print(' '.join(str1))\n    \n    x = str1.split()\n    x1 = str1.replace(\" \",char)\n    x2 = x1.split()\n    print(' '.join(x2))\n    # print(x1)\n    # print('\\n')\n    # print(x2)\n    \n",
        "num_ids": 83
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    #make it a new string\n    new_string=''\n    #make it a list\n    list1=list(str1)\n    #loop through each element in the list\n    for i in list1:\n        #if there is a blank space and the element is a letter, make it blank\n        if(i==' ') and (i.isalpha()):\n            new_string+=' '\n        #if there is a blank space and the element is not a letter, leave it\n        elif(i==' ') and (not i.isalpha()):\n            continue\n        #if there is no blank space and the element is a letter, make it a blank space\n        elif(i.isalpha()):\n            new_string+=' '\n        else:\n            #otherwise, just add the element to the new string\n            new_string+=i\n    #return the new string\n    return new_string\n",
        "num_ids": 215
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = \"\"\n    for x in str1:\n        if x == \" \":\n            str2 += char\n        else:\n            str2 += x\n    return str2\n",
        "num_ids": 45
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2=''\n    for i in str1:\n        if i!='':\n            str2 += i\n        else:\n            str2 += char\n    return str2\n",
        "num_ids": 45
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','%20')\n",
        "num_ids": 15
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return sorted(list1,reverse=True)[:n]\ndef larg_mnum(list1,n,m):\n    '''\n    Write a function that takes in a list and two integers n and m and returns a list containing the m largest items from the list.\n    '''\n    return sorted(list1,reverse=True)[:m]\ndef sum_of_numbers(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all of the items in the list.\n    '''\n    return sum(list1)\ndef sum_of_numbers_comprehension(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all of the items in the list.\n    '''\n    return sum(list1)\ndef sum_of_numbers_comprehension_2(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all of the items in the list.\n    '''\n    return sum([sum(i) for i in list1])\ndef sum_of_numbers_comprehension_3(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all of the items in the list.\n    '''\n    return sum(map(sum,list1))\ndef sum_of_numbers_comprehension_4(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all of the items in the list.\n    '''\n    return sum(reduce(lambda x,y:x+y,list1))\ndef sum_of_numbers_comprehension_5(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all of the items in the list.\n    '''\n    return sum(list(map(sum,list1)))\ndef sum_of_numbers_comprehension_6(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all of the items in the list.\n    '''\n    return sum(reduce(lambda x,y:x+y,list1))\ndef sum_of_numbers_comprehension_7(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all of the items in the list.\n    '''\n    return reduce(lambda x,y:x+y,list1)\ndef sum_of_numbers_comprehension_8(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all of the items in the list.\n    '''\n    return reduce(lambda x,y:x+y,map(sum,list1))\ndef sum_of_numbers_comprehension_9(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all of the items in the list.\n    '''\n    return reduce(lambda x,y:x+y,(map(sum,list1)))\ndef sum_of_numbers_comprehension_10(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all of the items in the list.\n    '''\n    return reduce(lambda x,y:x+y,(map(sum,list1)))\ndef sum_of_numbers_comprehension_11(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all of the items in the list.\n    '''\n    return reduce(lambda x,y:x+y,list(map(sum,list1)))\ndef sum_of_numbers_comprehension_12(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all of the items in the list.\n    '''\n    return reduce(lambda x,y:x+y,reduce(lambda x,y:x+y,list1))\ndef sum_of_numbers_comprehension_13(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all of the items in the list.\n    '''\n    return reduce(lambda x,y:x+y,map(sum,list1))\ndef sum_of_numbers_comprehension_14(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all of the items in the list.\n    '''\n    return reduce(lambda x,y:x+y,reduce(lambda x,y:x+y,list1))\ndef sum_of_numbers_comprehension_15(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all of the items in the list.\n    '''\n    return reduce(lambda x,y:x+y,map(sum,list1))\ndef sum_of_numbers_comprehension_16(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all of the items in the list.\n    '''\n    return reduce(lambda x,y:x+y,reduce(lambda x,y:x+y,list1))\ndef sum_of_numbers_comprehension_17(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all of the items in the list.\n    '''\n    return reduce(lambda x,y:x+y,map(sum,list1))\ndef sum_of_numbers_comprehension_18(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all of the items in the list.\n    '''\n    return reduce(lambda x,y:x+y,reduce(lambda x,y:x+y,list1))\ndef sum_of_numbers_comprehension_19(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all of the items in the list.\n    '''\n    return reduce(lambda x,y:x+y,list(map(sum,list1)))\ndef sum_of_numbers_comprehension_20(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all of the items in the list.\n    '''\n    return reduce(lambda x,y:x+y,list(map(sum,list1)))\ndef sum_of_numbers_comprehension_21(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all of the items in the list.\n    '''\n    return reduce(lambda x,y:x+y,(map(sum,list1)))\ndef sum_of_numbers_comprehension_22(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all of the items in the list.\n    '''\n    return reduce(lambda x,y:x+y,(map(sum,list1)))\ndef sum_of_numbers_comprehension_23(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all of the items in the list.\n    '''\n    return reduce(lambda x,y:x+y,reduce(lambda x,y:x+y,list1))\ndef sum_of_numbers_comprehension_24(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all of the items in the list.\n    '''\n    return reduce(lambda x,y:x+y,(map(sum,list1)))\ndef sum_of_numbers_comprehension_25(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all of the items in the list.\n    '''\n    return reduce(lambda x,y:x+y,(reduce(lambda x,y:x+y,list1)))\ndef sum_of_numbers_comprehension_26(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all of the items in the list.\n    '''\n    return reduce(lambda x,y:x+y,(reduce(lambda x,y:",
        "num_ids": 24
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse=True)\n    return list1[:n]\n",
        "num_ids": 22
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return []\n    return heapq.nlargest(n,list1)\n    \n    \ndef un_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    if n > len(list1):\n        return []\n    return heapq.nsmallest(n,list1)\n    \n",
        "num_ids": 33
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2 = list1\n    list3 = []\n    for i in range(n):\n        max = 0\n        max_index = 0\n        for j in range(len(list2)):\n            if list2[j] > max:\n                max = list2[j]\n                max_index = j\n        list3.append(max_index)\n        del list2[max_index]\n    return list3\n    \n    \ndef find_largest_sum(tup):\n    '''\n    Write a function that takes a tuple of tuples, where each inner tuple is a list of the numbers in that element, and that returns the sum of all of the largest numbers in the inner tuples.\n    '''\n    largest_sum = 0\n    largest_sum_index = 0\n    for i in range(len(tup)):\n        for j in range(len(tup[i])):\n            if largest_sum < sum(tup[i]):\n                largest_sum = sum(tup[i])\n                largest_sum_index = i\n    return largest_sum_index\n",
        "num_ids": 91
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse=True)\n    return list1[:n]\n",
        "num_ids": 22
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap,(i,i))\n    ret = []\n    while n > 0:\n        ret.append(heapq.heappop(heap)[1])\n        n -= 1\n    return ret\n    \ndef big_num(list1):\n    '''\n    Write a function that takes in a list of numbers and returns the largest number in the list.\n    '''\n    return max(list1)\n",
        "num_ids": 10
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(key= lambda x:x[0])\n    return list1[-n:]\n",
        "num_ids": 27
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2 = []\n    for i in range(0,n):\n        heapq.heappush(list2,list1[i])\n    return list2\n",
        "num_ids": 42
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    for i in range(n):\n        list1[0],list1[-1] = list1[-1],list1[0]\n        heapq.heappop(list1)\n    return list1\n",
        "num_ids": 67
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    count=0\n    new_list=[]\n    while count<n:\n        if len(list1)==0:\n            return new_list\n        else:\n            bigger=list1.pop()\n            count=count+1\n            new_list.append(bigger)\n    return new_list\n",
        "num_ids": 76
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = (2*pi*r**2) - (2*pi*r*h)\n    return area\n",
        "num_ids": 29
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*r*h\n",
        "num_ids": 12
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # YOUR CODE HERE\n    #define the length and radius of the cylinder\n    #calculate the area of the cross section\n    #calculate the height\n    #the lat is the length of the cross section minus the height\n",
        "num_ids": 54
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    import math\n    \n    def cylinder_surface(r,h):\n        '''\n        Find the surface area of a cylinder using the formula.\n        '''\n        \n        theta = math.pi/2\n        R = r\n        H = h\n        S = 2 * math.pi * R * R + 2 * math.pi * R * H + 2 * math.pi * R * R\n        return S\n        \n    \n    def lateralsuface_cylinder(r,h):\n        '''\n        Write a function to find the lateral surface area of a cylinder.\n        '''\n        \n        import math\n        \n        def cylinder_surface(r,h):\n            '''\n            Find the surface area of a cylinder using the formula.\n            '''\n            \n            theta = math.pi/2\n            R = r\n            H = h\n            S = 2 * math.pi * R * R + 2 * math.pi * R * H + 2 * math.pi * R * R\n            return S\n            \n        def lateralsuface_cylinder(r,h):\n            '''\n            Write a function to find the lateral surface area of a cylinder.\n            '''\n            \n            import math\n            \n            def cylinder_surface(r,h):\n                '''\n                Find the surface area of a cylinder using the formula.\n                '''\n                \n                theta = math.pi/2\n                R = r\n                H = h\n                S = 2 * math.pi * R * R + 2 * math.pi * R * H + 2 * math.pi * R * R\n                return S\n                \n            def lateralsuface_cylinder(r,h):\n                '''\n                Write a function to find the lateral surface area of a cylinder.\n                '''\n                \n                import math\n                \n                def cylinder_surface(r,h):\n                    '''\n                    Find the surface area of a cylinder using the formula.\n                    '''\n                    \n                    theta = math.pi/2\n                    R = r\n                    H = h\n                    S = 2 * math.pi * R * R + 2 * math.pi * R * H + 2 * math.pi * R * R\n                    return S\n                    \n                def lateralsuface_cylinder(r,h):\n                    '''\n                    Write a function to find the lateral surface area of a cylinder.\n                    '''\n                    \n                    import math\n                    \n                    def cylinder_surface(r,h):\n                        '''\n                        Find the surface area of a cylinder using the formula.\n                        '''\n                        \n                        theta = math.pi/2\n                        R = r\n                        H = h\n                        S = 2 * math.pi * R * R + 2 * math.pi * R * H + 2 * math.pi * R * R\n                        return S\n                    \n                    def lateralsuface_cylinder(r,h):\n                        '''\n                        Write a function to find the lateral surface area of a cylinder.\n                        '''\n                        \n                        import math\n                        \n                        def cylinder_surface(r,h):\n                            '''\n                            Find the surface area of a cylinder using the formula.\n                            '''\n                            \n                            theta = math.pi/2\n                            R = r\n                            H = h\n                            S = 2 * math.pi * R * R + 2 * math.pi * R * H + 2 * math.pi * R * R\n                            return S\n                        \n                        def lateralsuface_cylinder(r,h):\n                            '''\n                            Write a function to find the lateral surface area of a cylinder.\n                            '''\n                            \n                            import math\n                            \n                            def cylinder_surface(r,h):\n                                '''\n                                Find the surface area of a cylinder using the formula.\n                                '''\n                                \n                                theta = math.pi/2\n                                R = r\n                                H = h\n                                S = 2 * math.pi * R * R + 2 * math.pi * R * H + 2 * math.pi * R * R\n                                return S\n                            \n                        def lateralsuface_cylinder(r,h):\n                            '''\n                            Write a function to find the lateral surface area of a cylinder.\n                            '''\n                            \n                            import math\n                            \n                            def cylinder_surface(r,h):\n                                '''\n                                Find the surface area of a cylinder using the formula.\n                                '''\n                                \n                                theta = math.pi/2\n                                R = r\n                                H = h\n                                S = 2 * math.pi * R * R + 2 * math.pi * R * H + 2 * math.pi * R * R\n                                return S\n                        \n                        def lateralsuface_cylinder(r,h):\n                            '''\n                            Write a function to find the lateral surface area of a cylinder.\n                            '''\n                            \n                            import math\n                            \n                            def cylinder_surface(r,h):\n                                '''\n                                Find the surface area of a cylinder using the formula.\n                                '''\n                                \n                                theta = math.pi/2\n                                R = r\n                                H = h\n                                S = 2 * math.pi * R * R + 2 * math.pi * R * H + 2 * math.pi * R * R\n                                return S\n                        \n                        def lateralsuface_cylinder(r,h):\n                            '''\n                            Write a function to find the lateral surface area of a cylinder.\n                            '''\n                            \n                            import math\n                            \n                            def cylinder_surface(r,h):\n                                '''\n                                Find the surface area of a cylinder using the formula.\n                                '''\n                                \n                                theta = math.pi/2\n                                R = r\n                                H = h\n                                S = 2 * math.pi * R * R + 2 * math.pi * R * H + 2 * math.pi * R * R\n                                return S\n                        \n                        def lateralsuface_cylinder(r,h):\n                            '''\n                            Write a function to find the lateral surface area of a cylinder.\n                            '''\n                            \n                            import math\n                            \n                            def cylinder_surface(r,h):\n                                '''\n                                Find the surface area of a cylinder using the formula.\n                                '''\n                                \n                                theta = math.pi/2\n                                R = r\n                                H = h\n                                S = 2 * math.pi * R * R + 2 * math.pi * R * H + 2 * math.pi * R * R\n                                return S\n                        \n                        def lateralsuface_cylinder(r,h):\n                            '''\n                            Write a function to find the lateral surface area of a cylinder.\n                            '''\n                            \n                            import math\n                            \n                            def cylinder_surface(r,h):\n                                '''\n                                Find the surface area of a cylinder using the formula.\n                                '''\n                                \n                                theta = math.pi/2\n                                R = r\n                                H = h\n                                S = 2 * math.pi * R * R + 2 * math.pi * R * H + 2 * math.pi * R * R\n                                return S\n                        \n                        def lateralsuface_cylinder(r,h):\n                            '''\n                            Write a function to find the lateral surface area of a cylinder.\n                            '''\n                            \n                            import math\n                            \n                            def cylinder_surface(r,h):\n                                '''\n                                Find the surface area of a cylinder using the formula.\n                                '''\n                                \n                                theta = math.pi/2\n                                R = r\n                                H = h\n                                S = 2 * math.pi * R * R + 2 * math.pi * R * H + 2 * math.pi * R * R\n                                return S\n                        \n                        def lateralsuface_cylinder(r,h):\n                            '''\n                            Write a function to find the lateral surface area of a cylinder.\n                            '''\n                            \n                            import math\n                            \n                            def cylinder_surface(r,h):\n                                '''\n                                Find the surface area of a cylinder using the formula.\n                                '''\n                                \n                                theta = math.pi/2\n                                R = r\n                                H = h\n                                S = 2 * math.pi * R * R + 2 * math.pi * R * H + 2 * math.pi * R * R\n                                return S\n                        \n                        def lateralsuface_cylinder(r,h):\n                            '''\n                            Write a function to find the lateral surface area of a cylinder.\n                            '''\n                            \n                            import math\n                            \n                            def cylinder_surface(r,h):\n                                '''\n                                Find the surface area of a cylinder using the formula.\n                                '''\n                                \n                                theta = math.pi/2\n                                R = r\n                                H = h\n                            ",
        "num_ids": 26
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #what you need to know:\n    # the volume of a cylinder is the pi times the radius times the height of the cylinder.\n    # the height of the cylinder is the height minus the radius.\n    # the radius is r\n    # the pi is pi\n    # the volume is pi times r times the height\n    # the height minus the radius is h\n    # the height minus the radius is h\n    # the radius is r\n    # the height minus the radius is h\n    # the radius times the height minus the radius is 2r*h\n    # the radius times the height minus the radius is 2r*h\n    # the pi times the radius times the height minus the radius is pi*r*h\n    # the pi times the radius times the height minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the radius times the height minus the radius is 2r*h\n    # the radius times the height minus the radius is 2r*h\n    # the pi times the radius times the height minus the radius is pi*r*h\n    # the pi times the radius times the height minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the radius times the height minus the radius is 2r*h\n    # the radius times the height minus the radius is 2r*h\n    # the pi times the radius times the height minus the radius is pi*r*h\n    # the pi times the radius times the height minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is pi*r*h\n    # the pi*r*h minus the radius is p",
        "num_ids": 2013
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n",
        "num_ids": 6
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    d = 2*r*math.sin(math.pi/180)\n    l = 2*math.pi*r*(math.cos(math.pi/180)-math.cos(math.pi/180*h/d))\n    return l\n",
        "num_ids": 61
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # calculate lateral surface area\n    \n    # calculate lateral surface area\n    lateral_surface_area = np.pi * (r ** 2) * h\n    return lateral_surface_area\n",
        "num_ids": 46
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    radius = r\n    height = h\n    diameter = 2 * radius\n    area = (pi * radius**2) + (2 * pi * radius * height) + (2 * pi * radius)\n    return(area)\n",
        "num_ids": 55
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    result = math.pi*r*r\n    result = result*2 + math.pi*r*h\n    return result\nprint(lateralsuface_cylinder(2,3))\n",
        "num_ids": 51
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    #assert(l > 0)\n    return l ** 3\n",
        "num_ids": 17
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return(l**3)\n",
        "num_ids": 10
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    def vol(l):\n        if l < 1:\n            return 0\n        else:\n            return 6*(l**3)\n    return vol(l)\n",
        "num_ids": 41
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume\n",
        "num_ids": 13
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    print(3 ** 3)\n",
        "num_ids": 10
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n | (n << 1)\n    n = n | (n << 2)\n    n = n | (n << 4)\n    return n\ndef count_set_bits(n):\n    '''\n    Write a python function to count number of set bits in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        n = n & (n-1)\n        count += 1\n    return count\ndef check_sum(n):\n    '''\n    Write a python function to calculate the checksum of a given number.\n    '''\n    sum = 0\n    while n!= 0:\n        n, sum = n & (n - 1), n + sum\n    return sum\ndef string_swap(str1, str2):\n    '''\n    Write a python function to swap two given strings.\n    '''\n    return str1 + str2[1:] + str1[0:1]\ndef string_reversal(str1):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    return str1[::-1]\ndef my_reverse(str1):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    return str1[::-1]\ndef even_index(list1):\n    '''\n    Write a python function to return the even index items of a given list.\n    '''\n    for i in range(len(list1)):\n        if i%2==0:\n            return list1[i]\n    else:\n        return False\ndef odd_index(list1):\n    '''\n    Write a python function to return the odd index items of a given list.\n    '''\n    for i in range(len(list1)):\n        if i%2!=0:\n            return list1[i]\n    else:\n        return False\ndef char_to_int(str1):\n    '''\n    Write a python function to convert string character to its integer value.\n    '''\n    return ord(str1)\ndef int_to_char(n):\n    '''\n    Write a python function to convert integer to string character.\n    '''\n    return chr(n)\ndef count_vowel(str1):\n    '''\n    Write a python function to count vowel present in given string.\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            count += 1\n    return count\ndef count_consonant(str1):\n    '''\n    Write a python function to count consonant present in given string.\n    '''\n    consonants = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z']\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] not in consonants:\n            count += 1\n    return count\ndef count_invalid(str1):\n    '''\n    Write a python function to count invalid characters present in a given string.\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            if str1[i+1] in vowels:\n                continue\n            else:\n                count += 1\n        else:\n            count += 1\n    return count\ndef count_alpha_string(str1):\n    '''\n    Write a python function to count alpha characters present in a given string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            count += 1\n    return count\ndef count_numeric_string(str1):\n    '''\n    Write a python function to count numeric characters present in a given string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isnumeric():\n            count += 1\n    return count\ndef count_special_char(str1):\n    '''\n    Write a python function to count special characters present in a given string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if not str1[i].isalnum():\n            count += 1\n    return count\ndef count_alphanumeric_string(str1):\n    '''\n    Write a python function to count alphanumeric characters present in a given string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalnum():\n            count += 1\n    return count\ndef sum_digits(n):\n    '''\n    Write a python function to find sum of digits of a given number.\n    '''\n    sum = 0\n    while n > 0:\n        n = n//10\n        sum += n\n    return sum\ndef digital_root(n):\n    '''\n    Write a python function to find digital root of a given number.\n    '''\n    return int(str(n)[0])\ndef digital_root_using_remainder(n):\n    '''\n    Write a python function to find digital root of a given number.\n    '''\n    return n%9 or 9\ndef digital_root_using_remainder_using_mod(n):\n    '''\n    Write a python function to find digital root of a given number.\n    '''\n    return n%9 or 9\ndef digital_root_using_modulus(n):\n    '''\n    Write a python function to find digital root of a given number.\n    '''\n    return n//9 or 9\ndef digital_root_using_modulus_using_remainder(n):\n    '''\n    Write a python function to find digital root of a given number.\n    '''\n    return n%9 or 9\ndef digital_root_using_modulus_using_remainder_using_mod(n):\n    '''\n    Write a python function to find digital root of a given number.\n    '''\n    return n%9 or 9\ndef digital_root_using_modulus_using_remainder_using_mod_2(n):\n    '''\n    Write a python function to find digital root of a given number.\n    '''\n    return n%9 or 9\ndef digital_root_using_remainder_using_mod_2(n):\n    '''\n    Write a python function to find digital root of a given number.\n    '''\n    return n%9 or 9\ndef digital_root_using_remainder_using_mod_2_using_modulus(n):\n    '''\n    Write a python function to find digital root of a given number.\n    '''\n    return n%9 or 9\ndef digital_root_using_remainder_using_mod_2_using_modulus_2(n):\n    '''\n    Write a python function to find digital root of a given number.\n    '''\n    return n%9 or 9\ndef digital_root_using_remainder_using_mod_2_using_modulus_2_using_modulus(n):\n    '''\n    Write a python function to find digital root of a given number.\n    '''\n    return n%9 or 9\ndef digital_root_using_remainder_using_mod_2_using_modulus_2_using_remainder(n):\n    '''\n    Write a python function to find digital root of a given number.\n    '''\n    return n%9 or 9\ndef digital_root_using_remainder_using_mod_2_using_modulus_2_using_remainder_2(n):\n    '''\n    Write a python function to find digital root of a given number.\n    '''\n    return n%9 or 9\ndef digital_root_using_remainder_using_mod_2_using_remainder_2(n):\n    '''\n    Write a python function to find digital root of a given number.\n    '''\n    return n%9 or 9\ndef digital_root_using_remainder_using_mod_",
        "num_ids": 25
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0: \n        return '0'\n    elif n == 1:\n        return '1'\n    else:\n        return even_bit_set_number(int(n/2)) + even_bit_set_number(int(n/2))\n",
        "num_ids": 66
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    #print(\"Original number is:\", n)\n    print(\"Even Bit Set number is :\",n|(1<<(len(bin(n))-2)))\n    #return (n | (1 << (len(bin(n))-2)))\n    #return n|(1<<(len(bin(n))-2))\n",
        "num_ids": 79
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result = 0\n    while n > 0:\n        if n & 1:\n            result += 1\n        n = n >> 1\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while (n & 0x01)!= 0: \n        n = n >> 1\n    return n\n    \n",
        "num_ids": 29
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    binary = bin(n)\n    return (binary[2:])\n",
        "num_ids": 19
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n!= 0:\n        if n%2 == 0:\n            n = n-1\n        else:\n            n = n//2\n    return n\nprint(even_bit_set_number(1))  # 0\nprint(even_bit_set_number(5))  # 0\nprint(even_bit_set_number(4))  # 2\nprint(even_bit_set_number(7))  # 4\nprint(even_bit_set_number(8))  # 2\nprint(even_bit_set_number(16))  # 6\nprint(even_bit_set_number(17))  # 8\nprint(even_bit_set_number(18))  # 0\nprint(even_bit_set_number(64))  # 8\nprint(even_bit_set_number(65))  # 2\nprint(even_bit_set_number(1024))  # 2\nprint(even_bit_set_number(30))  # 2\nprint(even_bit_set_number(0))  # 0\n",
        "num_ids": 249
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    s = bin(n)\n    l = list(s)\n    for i in range(0,len(l)):\n        if(l[i]=='1'):\n            l[i]='0'\n        else:\n            l[i]='1'\n    return int(''.join(l),2)\n    \n",
        "num_ids": 81
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return ((n & 0xAAAAAAAA) >> 1) << 1\n",
        "num_ids": 17
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n | 0x1\n    n = n | 0x2\n    n = n | 0x4\n    n = n | 0x8\n    n = n | 0x10\n    n = n | 0x20\n    n = n | 0x40\n    n = n | 0x80\n    n = n | 0x100\n    n = n | 0x200\n    n = n | 0x400\n    n = n | 0x800\n    n = n | 0x1000\n    return n\n",
        "num_ids": 123
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for each_element in test_list:\n        if each_element in count_dict:\n            count_dict[each_element] = count_dict[each_element] + 1\n        else:\n            count_dict[each_element] = 1\n    return count_dict\n",
        "num_ids": 74
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = {}\n    for i in test_list:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_list = sorted(test_list)\n    final_dict = {}\n    for index in range(len(test_list)):\n        if test_list[index] not in final_dict:\n            final_dict[test_list[index]] = 1\n        else:\n            final_dict[test_list[index]] += 1\n    return final_dict\n",
        "num_ids": 88
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    my_dict = {}\n    for item in test_list:\n        if item in my_dict:\n            my_dict[item] += 1\n        else:\n            my_dict[item] = 1\n    return my_dict\n",
        "num_ids": 57
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for each_tuple in test_list:\n        if each_tuple not in d:\n            d[each_tuple] = 1\n        else:\n            d[each_tuple] += 1\n    return d\n",
        "num_ids": 60
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for tuple in test_list:\n        if tuple in occurences:\n            occurences[tuple] += 1\n        else:\n            occurences[tuple] = 1\n    return occurences\n",
        "num_ids": 59
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    # your code here\n    \n    d={}\n    \n    for i in test_list:\n        if i not in d:\n            d[i]=test_list.count(i)\n            \n    return d\n",
        "num_ids": 56
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    lst = []\n    lst = test_list\n    lst_dict = Counter(lst)\n    print(lst_dict)\n    return lst_dict\n",
        "num_ids": 44
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result_dict = {}\n    for item in test_list:\n        if item in result_dict.keys():\n            result_dict[item] += 1\n        else:\n            result_dict[item] = 1\n    return result_dict\n",
        "num_ids": 59
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # YOUR CODE HERE\n    test_list = sorted(test_list)\n    d = {}\n    for i in test_list:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n",
        "num_ids": 65
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i]!='':\n            for j in range(i,len(str)):\n                if str[j] =='':\n                    break\n                else:\n                    count += 1\n    print(count)\n",
        "num_ids": 72
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len([x for x in str.split() if len(x) > 0])\nprint(number_of_substrings(\"  I  am an  I  made  of  love\"))\n",
        "num_ids": 47
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count=0\n    if len(str)==0:\n        return 0\n    for i in range(0,len(str)):\n        count=count+1\n        if str[i]==' ':\n            count=count-1\n        if str[i-1]==' ':\n            count=count-1\n    return count\n",
        "num_ids": 84
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # TODO: Write your solution here\n    l=[]\n    s=list(str)\n    for i in range(0,len(s)):\n        for j in range(i,len(s)):\n            sub=s[i:j+1]\n            if sub not in l:\n                l.append(sub)\n    return len(l)\n",
        "num_ids": 88
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    cnt = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            substr = str[i:j+1]\n            if substr!= \"\":\n                cnt += 1\n    return cnt\n",
        "num_ids": 66
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count\n",
        "num_ids": 56
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j] == '':\n                count += 1\n            else:\n                break\n    return count\n",
        "num_ids": 64
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    #Solution\n    #funtion definition \n    def count(str,i,j): \n        count = 0\n        while i<=j: \n            if len(str[i:j])==len(set(str[i:j])): \n                count +=1\n            i+=1\n            j-=1\n        return count \n    #main funtion\n    n = len(str) \n    count = 0\n    for i in range(0,n): \n        count += count(str,i,i) \n        count += count(str,i,i+1) \n    return count \n",
        "num_ids": 150
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    #length of string\n    l = len(str)\n    \n    #count of substrings is length of string - 1\n    count = l - 1\n    \n    #traverse through string\n    for i in range(0,l):\n        \n        #if current character is not alphabets\n        if not str[i].isalpha():\n            \n            #if this character is empty, skip it and increase the count\n            if str[i] == '':\n                continue\n            \n            #else, replace current character by empty string\n            else:\n                str = str[:i]+' '+str[i+1:]\n    \n    #return the number of substrings\n    return count\n",
        "num_ids": 163
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = 0\n    for i in range(0, len(str)):\n        sub = str[i]\n        if len(sub) > 0:\n            n = n + 1\n    return n\n",
        "num_ids": 50
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #print(m,n)\n    num_seq = 0\n    i = 1\n    j = 0\n    #j = i\n    while i <= n:\n        #print(i)\n        i = i*2\n        j = j + 1\n        #print(i,j)\n        num_seq += 1\n    return(num_seq)\n",
        "num_ids": 86
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #initializing the list of sequences with n number of elements\n    possible_sequences = []\n",
        "num_ids": 25
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(m+1):\n        for j in range(i):\n            if 2*j + i >= m and 2*i + j <= m:\n                count += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def solve(m,n):\n        # base case\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n > 2:\n            return solve(m, n - 1) + solve(m, n - 2)\n    return solve(m, n)\n",
        "num_ids": 74
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #initialize the total number of sequences\n    number_of_sequences = 0\n",
        "num_ids": 22
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    num_sequences = 0\n    # these are the possible sequences of length n with each element being between m and n\n    # the base case is when n == 0, this makes the problem simpler\n    \n    # number of sequences of length n\n    for i in range(n): \n        \n        # number of sequences of length n, just need to write out in binary, a 1 represents that the sequence is bigger than the previous, but smaller than m\n        if ((1<<i)&m)!= 0: \n            num_sequences += 1 \n        \n    # to get the total number of sequences, we need to multiply by (n-1) because we already added in the number of sequences of length 0, and since each sequence starts from 0, we need to add one more\n    return num_sequences*(n-1)\n    \n    \n",
        "num_ids": 194
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(n):\n        if (2*(m-i)) <= (i+1):\n            if (m-i)*(m-i+1) <= (m-i+2)*(m-i+2):\n                count += 1\n        else:\n            break\n    return count\nprint(get_total_number_of_sequences(50,20))\n",
        "num_ids": 97
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 0: \n        return 1 \n    else:\n        return get_total_number_of_sequences(m,n-1) + get_total_number_of_sequences(m,n-1) \n",
        "num_ids": 58
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # i = 0\n    # count = 0\n    # while i < n: \n    #     if m <= 2*(i+1): \n    #         count += 1\n    #     i += 1\n    # print(count)\n    count = 0\n    for i in range(0, n):\n        if 2*i+1 <= m:\n            count += 1\n    return count\n",
        "num_ids": 95
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    #recursion relation\n    if n==1: \n        return m\n    else: \n        return m+get_total_number_of_sequences(m,n-1)\n",
        "num_ids": 49
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n    \ndef edit_list(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a new list that contains all the elements of list2 followed by list1 in the order that they appear in list1.\n    '''\n    list1.extend(list2)\n    return list1\n    \ndef filter_list(list1,list2):\n    '''\n    Write a function that takes in a list and a list of values and returns a new list with only the elements in the list that are also in the values list.\n    '''\n    return list(filter(lambda x: x in list2, list1))\n    \ndef dictionary_list(key1, value1, dictionary1):\n    '''\n    Write a function that takes in a list of keys and values and creates a dictionary with the keys as the list elements and the values as the dictionary values.\n    '''\n    dictionary1 = {key1:value1}\n    return dictionary1\n    \ndef reverse_list(list1):\n    '''\n    Write a function that takes in a list and returns a new list with the elements of the list in reverse order.\n    '''\n    list1.reverse()\n    return list1\n    \ndef merge_sort(list1):\n    '''\n    Write a function that takes in a list and sorts it using the merge sort algorithm.\n    '''\n    def merge(left, right):\n        merged = []\n        i = 0\n        j = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                j += 1\n        merged.extend(left[i:])\n        merged.extend(right[j:])\n        return merged\n",
        "num_ids": 121
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list2.append(list1[-1])\n    list1[-1]=list2[-1]\n",
        "num_ids": 36
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1 = list1[:-1] + list2\n    return list1\n",
        "num_ids": 21
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:-1] + list2\n",
        "num_ids": 14
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # list1 = input(\"List 1: \")\n    # list2 = input(\"List 2: \")\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            list1[i] = list2[i+1]\n        else:\n            list1[i] = list2[i]\n    return list1\n",
        "num_ids": 92
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # [1,2,3,4,5,6]\n    # [1,2,3]\n    list1[-1] = list2[-1]\n    return list1\n",
        "num_ids": 48
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    \n    list1.pop()\n    list1.extend(list2)\n    return list1\n",
        "num_ids": 27
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1]=list2\n    return list1\n",
        "num_ids": 17
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1]=list2\n    return list1\n    \n    \n    \n    \ndef mult_by_two(numbers):\n    '''\n    Write a function that takes in a list of integers and returns a new list that contains each number in the original list multiplied by 2.\n    '''\n    newlist=[]\n    for i in range(len(numbers)):\n        newlist.append(2*numbers[i])\n    return newlist\n    \n    \n    \n    \ndef is_prime(number):\n    '''\n    Write a function that takes in an integer and determines whether the number is prime.\n    '''\n    prime=True\n    for i in range(2,number):\n        if number%i==0:\n            prime=False\n            break\n        else:\n            prime=True\n    return prime\n    \n    \n    \n    \ndef get_primes(n):\n    '''\n    Write a function that takes in an integer and returns a list of all the primes up to and including that number.\n    '''\n    x=[]\n    for i in range(2,n+1):\n        prime=True\n        for j in range(2,i):\n            if i%j==0:\n                prime=False\n                break\n        if prime==True:\n            x.append(i)\n    return x\n    \n    \n    \n    \ndef left_justify(text,char_limit=20):\n    '''\n    Write a function that takes in a string and a maximum width and returns a string that is left-justified.\n    '''\n    text_length=len(text)\n    if text_length>char_limit:\n        spacing=int(char_limit/2)-1\n        spacing_left=int(char_limit/2)\n        spacing_right=char_limit-spacing_left-spacing\n        newstring=text[0:spacing]\n        for i in range(spacing_left,len(text)-spacing_right):\n            newstring+=text[i]+' '\n        newstring+=text[-spacing_right:]\n        return newstring\n    else:\n        return text\n    \n    \n    \n    \n    \ndef count_positives_sum_negatives(list1):\n    '''\n    Write a function that takes in a list of integers and returns the number of integers in the list that are positive, the sum of all the negative integers in the list, and the average of all the integers in the list.\n    '''\n    total_positive=0\n    total_negative=0\n    total_sum=0\n    for i in range(len(list1)):\n        if list1[i]>0:\n            total_positive+=1\n            total_sum+=list1[i]\n        if list1[i]<0:\n            total_negative+=1\n            total_sum+=list1[i]\n    average=total_sum/(len(list1))\n    return total_positive,total_negative,average\n    \n    \n    \n    \n    \ndef sum_arrays(array1,array2):\n    '''\n    Write a function that takes in two lists and returns a new list that contains the sum of the numbers in each list.\n    '''\n    newlist=[]\n    for i in range(len(array1)):\n        newlist.append(array1[i]+array2[i])\n    return newlist\n    \n    \n    \n    \n    \ndef sum_of_digits(n):\n    '''\n    Write a function that takes in a number and returns the sum of all the digits in the number.\n    '''\n    total=0\n    while n>0:\n        total+=n%10\n        n=n//10\n    return total\n    \n    \n    \n    \ndef fibonacci(n):\n    '''\n    Write a function that takes in a number and returns the nth number in the fibonacci series.\n    '''\n    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\n    \n    \n    \n    \ndef get_largest_number(n1,n2,n3):\n    '''\n    Write a function that takes three integers and returns the largest of the three.\n    '''\n    if n1>n2 and n1>n3:\n        return n1\n    elif n2>n1 and n2>n3:\n        return n2\n    else:\n        return n3\n    \n    \n    \n    \ndef get_smallest_number(n1,n2,n3):\n    '''\n    Write a function that takes three integers and returns the smallest of the three.\n    '''\n    if n1<n2 and n1<n3:\n        return n1\n    elif n2<n1 and n2<n3:\n        return n2\n    else:\n        return n3\n    \n    \n    \n    \ndef has_33(n1,n2,n3):\n    '''\n    Write a function that takes three integers and returns True if one of the three is 33 and False otherwise.\n    '''\n    if n1==33 or n2==33 or n3==33:\n        return True\n    else:\n        return False\n    \n    \n    \n    \ndef get_word_score(word,n):\n    '''\n    Write a function that takes in a word and a score and returns the updated score.\n    '''\n    if n==1:\n        return len(word)*1\n    elif n==2:\n        return len(word)*2\n    elif n==3:\n        return len(word)*3\n    elif n==4:\n        return len(word)*4\n    elif n==5:\n        return len(word)*5\n    else:\n        return len(word)*6\n    \n    \n    \n    \ndef fizz_buzz(n):\n    '''\n    Write a function that takes in a number and returns \"fizz\" if the number is divisible by 3, \"buzz\" if it is divisible by 5, and \"fizzbuzz\" if it is divisible by both 3 and 5.\n    '''\n    for i in range(1,n+1):\n        if i%15==0:\n            print('fizzbuzz')\n        elif i%3==0:\n            print('fizz')\n        elif i%5==0:\n            print('buzz')\n        else:\n            print(i)\n    \n    \n    \n    \ndef sum_of_squares(numbers):\n    '''\n    Write a function that takes in a list of integers and returns the sum of the squares of each integer in the list.\n    '''\n    sum_of_squares=0\n    for i in range(len(numbers)):\n        sum_of_squares+=(numbers[i]**2)\n    return sum_of_squares\n    \n    \n    \n    \ndef is_there_an_even_number(numbers):\n    '''\n    Write a function that takes in a list of integers and returns True if there is an even number in the list and False otherwise.\n    '''\n    even=False\n    for i in range(len(numbers)):\n        if numbers[i]%2==0:\n            even=True\n    return even\n    \n    \n    \n    \ndef get_biggest_three_numbers(numbers):\n    '''\n    Write a function that takes in a list of integers and returns the three largest integers in the list.\n    '''\n    biggest_three=numbers[0]\n    for i in range(1,len(numbers)):\n        if numbers[i]>biggest_three:\n            biggest_three=numbers[i]\n    return biggest_three,biggest_three,biggest_three\n    \n    \n    \n    \ndef is_a_string_capitalized(string):\n    '''\n    Write a function that takes in a string and returns True if the first letter of the string is capitalized and False otherwise.\n    '''\n    first_letter=string[0]\n    if first_letter.isupper():\n        return True\n    else:\n        return False\n    \n    \n    \n    \ndef make_change(dollar_amount,coin_types):\n    '''\n    Write ",
        "num_ids": 5
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n",
        "num_ids": 13
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count = count + 1\n    return count\n",
        "num_ids": 26
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count('a') + str1.count('e') + str1.count('i') + str1.count('o') + str1.count('u')\n",
        "num_ids": 44
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    str1 = str1.lower()\n    count = 0\n    for i in str1:\n        count = count + 1\n    return count\n",
        "num_ids": 36
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    counter = 0\n    for i in str1:\n        counter += 1\n    print(\"Total characters in string:\",counter)\n",
        "num_ids": 32
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    n = 0\n    for i in str1:\n        n = n+1\n    return n\n",
        "num_ids": 26
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\nprint(\"count_charac('abcd') -> \" + str(count_charac('abcd')))\nprint(\"count_charac('abcde') -> \" + str(count_charac('abcde')))\nprint(\"count_charac('abcdea') -> \" + str(count_charac('abcdea')))\nprint(\"count_charac('abcdefghijklmnopqrstuvwxyz') -> \" + str(count_charac('abcdefghijklmnopqrstuvwxyz')))\nprint(\"count_charac('') -> \" + str(count_charac('')))\nprint(\"count_charac(' ') -> \" + str(count_charac(' ')))\n",
        "num_ids": 180
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] in [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]:\n            count += 1\n    return count\n",
        "num_ids": 92
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n    \nstr1 = \"Hello World!\"\nprint(count_charac(str1))\n",
        "num_ids": 31
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i = 1\n    while i * i < N:\n        i += 1\n    return i * i\n",
        "num_ids": 27
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    print(\"Next perfect square greater than a given number : \",end=\"\")\n    if N <=0:\n        print(\"Invalid Input\")\n    else:\n        t = int(math.sqrt(N))\n        if (t*t) == N:\n            print(t)\n        else:\n            t += 1\n            print(t*t)\n",
        "num_ids": 84
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    #initial value of upper limit is sqrt(N) + 1\n    upper = math.sqrt(N) + 1\n    while True:\n        if upper*upper == N:\n            print('Perfect square is:', upper)\n            return upper\n        upper = upper + 1\n",
        "num_ids": 67
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # (n*n) = (2n+1) * (2n+1)\n    square = int(math.sqrt(N))\n    i = square + 1\n    while(i*i < N):\n        i += 1\n    return i*i\n    \n    \ndef next_Perfect_Square_Bottom_up(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number using bottom up approach.\n    '''\n    square = int(math.sqrt(N))\n    # if sqrt(N) is perfect square\n    if square * square == N:\n        return square*square\n    i = square + 1\n    while(i*i < N):\n        i += 1\n    return i*i\n    \n    \ndef next_Perfect_Square_Bottom_up_optimized(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number using bottom up approach optimized.\n    '''\n    square = int(math.sqrt(N))\n    # if sqrt(N) is perfect square\n    if square * square == N:\n        return square*square\n    i = square + 1\n    while(i*i < N):\n        if i*i == N:\n            return i*i\n        i += 1\n    return i*i\n",
        "num_ids": 85
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N < 0): \n        print(\"error\") \n        return -1\n",
        "num_ids": 23
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i = 0\n    j = 1\n    while i <= N:\n        while j*j <= i:\n            j+=1\n        if j-1 == i:\n            return i\n        else:\n            i = j-1\n            j=0\n    return -1\nprint(next_Perfect_Square(6))\nprint(next_Perfect_Square(10))\nprint(next_Perfect_Square(7))\nprint(next_Perfect_Square(30))\nprint(next_Perfect_Square(500))\nprint(next_Perfect_Square(10))\n",
        "num_ids": 133
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    temp = N\n    while True:\n        temp += 1\n        if (temp**2)==N:\n            break\n    return temp\nprint(\"Enter the number:\")\nN = int(input())\nprint(\"Next Perfect square greater than\", N, \"is:\", next_Perfect_Square(N)) \n",
        "num_ids": 74
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 0: \n        return -1\n    res = (N * N + 1) / 2\n    if res == int(res):\n        return int(res)\n    else:\n        return int(res) + 1\n",
        "num_ids": 57
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    def isPerfectSquare(x):\n        s = int(math.sqrt(x))\n        return s*s == x\n    \n    if N < 1:\n        return 1\n",
        "num_ids": 45
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return 1\n    for i in range(N+1,1,-1):\n        if i**0.5 == math.floor(i**0.5):\n            return i\n",
        "num_ids": 51
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    arr = sorted(arr)\n    arr_len = len(arr)\n    #print(arr)\n    \n    #defining the max_sum\n    def max_sum(arr): \n        '''\n        Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n        '''\n        arr = sorted(arr)\n        arr_len = len(arr)\n        #print(arr)\n        \n        #defining max_sum\n        def max_sum(arr): \n            '''\n            Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n            '''\n            if arr[0] > arr[len(arr)-1]:\n                arr = sorted(arr)\n                arr_len = len(arr)\n                #print(arr)\n                \n                #max_sum\n                def max_sum(arr): \n                    '''\n                    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n                    '''\n                    arr = sorted(arr)\n                    arr_len = len(arr)\n                    #print(arr)\n                    \n                    #max_sum\n                    def max_sum(arr): \n                        '''\n                        Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n                        '''\n                        if arr[0] > arr[len(arr)-1]:\n                            arr = sorted(arr)\n                            arr_len = len(arr)\n                            #print(arr)\n                            \n                            #max_sum\n                            def max_sum(arr): \n                                '''\n                                Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n                                '''\n                                if arr[0] > arr[len(arr)-1]:\n                                    arr = sorted(arr)\n                                    arr_len = len(arr)\n                                    #print(arr)\n                                    \n                                    #max_sum\n                                    def max_sum(arr): \n                                        '''\n                                        Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n                                        '''\n                                        if arr[0] > arr[len(arr)-1]:\n                                            arr = sorted(arr)\n                                            arr_len = len(arr)\n                                            #print(arr)\n                                            \n                                            #max_sum\n                                            def max_sum(arr): \n                                                '''\n                                                Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n                                                '''\n                                                if arr[0] > arr[len(arr)-1]:\n                                                    arr = sorted(arr)\n                                                    arr_len = len(arr)\n                                                    #print(arr)\n                                                    \n                                                    #max_sum\n                                                    def max_sum(arr): \n                                                        '''\n                                                        Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n                                                        '''\n                                                        if arr[0] > arr[len(arr)-1]:\n                                                            arr = sorted(arr)\n                                                            arr_len = len(arr)\n                                                            #print(arr)\n                                                            \n                                                            #max_sum\n                                                            def max_sum(arr): \n                                                                '''\n                                                                Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n                                                                '''\n                                                                if arr[0] > arr[len(arr)-1]:\n                                                                    arr = sorted(arr)\n                                                                    arr_len = len(arr)\n                                                                    #print(arr)\n                                                                    \n                                                                    #max_sum\n                                                                    def max_sum(arr): \n                                                                        '''\n                                                                        Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n                                                                        '''\n                                                                        if arr[0] > arr[len(arr)-1]:\n                                                                            arr = sorted(arr)\n                                                                            arr_len = len(arr)\n                                                                            #print(arr)\n                                                                        \n                                                                        #max_sum\n                                                                        def max_sum(arr): \n                                                                            '''\n                                                                            Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n                                                                            '''\n                                                                            if arr[0] > arr[len(arr)-1]:\n                                                                                arr = sorted(arr)\n                                                                                arr_len = len(arr)\n                                                                                #print(arr)\n                                                                                \n                                                                                #max_sum\n                                                                                def max_sum(arr): \n                                                                                    '''\n                                                                                    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n                                                                                    '''\n                                                                                    if arr[0] > arr[len(arr)-1]:\n                                                                                        arr = sorted(arr)\n                                                                                        arr_len = len(arr)\n                                                                                        #print(arr)\n                                                                                        \n                                                                                        #max_sum\n                                                                                        def max_sum(arr): \n                                                                                        '''\n                                                                                        Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n                                                                                        '''\n                                                                                        if arr[0] > arr[len(arr)-1]:\n                                                                                            arr = sorted(arr)\n                                                                                            arr_len = len(arr)\n                                                                                            #print(arr)\n                                                                                            \n                                                                                            #max_sum\n                                                                                            def max_sum(arr): \n                                                                                            '''\n                                                                                            Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n                                                                                            '''\n                                                                                            if arr[0] > arr[len(arr)-1]:\n                                                                                                arr = sorted(arr)\n                                                                                                arr_len = len(arr)\n                                                                                                #print(arr)\n                                                                                                \n                                                                                                #max_sum\n                                                                                                def max_sum(arr): \n                                                                                                    '''\n                                                                                                Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n                                                                                                '''\n                                                                                                if arr[0] > arr[len(arr)-1]:\n                                                                                            arr = sorted(arr)\n                                                                                            arr_len = len(arr)\n                                                                                            #print(arr)\n                                                                                            \n                                                                                            #max_sum\n                                                                                            def max_sum(arr): \n                                                                                                '''\n                                                                                                Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n                                                                                                '''\n                                                                                                if arr[0] > arr[len(arr)-1]:\n                                                                                            arr = sorted(arr)\n                                                                                            arr_len = len(arr)\n                                                                                            #print(arr)\n                                                                                            \n                                                                                            #max_sum\n                                                                    ",
        "num_ids": 67
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    \n    if n == 0: \n        return 0\n    if n == 1: \n        return arr[0]\n    \n    arr = [0] + arr\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(1, n):\n        for j in range(i):\n            dp[i][j] = max(arr[i] - dp[i-1][j], arr[i] - dp[i-1][j+1])\n    \n    return dp[n-1][0]\n    \ndef max_subsequence_sum_bitonic(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    \n    if n == 0: \n        return 0\n    if n == 1: \n        return arr[0]\n    \n    arr = [0] + arr\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i][j] = dp[i-1][j] + arr[i]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j+1]) + arr[i]\n    \n    return dp[n-1][0]\n    \nprint(max_sum([3, 5, 1, 2])) # 7\nprint(max_sum([3, 4, 6, 5])) # 13\nprint(max_subsequence_sum_bitonic([3, 5, 1, 2])) # 7\nprint(max_subsequence_sum_bitonic([3, 4, 6, 5])) # 13\n",
        "num_ids": 264
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr: return 0\n    max_sum_so_far = arr[0]\n    max_ending_here = arr[0]\n",
        "num_ids": 36
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 2: \n        return 0\n    if n == 2: \n        return max(arr[0], arr[1]) \n",
        "num_ids": 44
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if arr == None or len(arr) == 0:\n        return None\n",
        "num_ids": 20
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    #find middle element\n    m = len(arr)//2\n    i = m\n    while arr[m-1]<=arr[i]:\n        m = (m+i)//2\n        i = m\n    \n    j = m-1\n    while arr[m+1] <= arr[j]:\n        m = (m+j)//2\n        j = m\n    \n    max_sum_up_to_middle = 0\n    \n    while m > 0:\n        max_sum_up_to_middle += arr[m-1]\n        m -= 1\n    \n    max_sum_up_to_middle += arr[m]\n    max_sum_up_to_middle += arr[m+1]\n    \n    print(max_sum_up_to_middle)\n",
        "num_ids": 192
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # step 1: define a helper function\n    def helper(arr):\n        arr.sort()\n        # step 2: define a dp array\n        dp = []\n        # step 3: initialize dp array\n        dp.append(0)\n        \n        for i in range(1, len(arr)):\n            # check if previous elements of dp array are negative or not\n            if dp[i-1] < 0:\n                # if so, add it to dp array\n                dp.append(0)\n                continue\n            # if not negative, add it to dp array\n            dp.append(dp[i-1] + arr[i])\n        \n        return max(dp)\n    # step 4: call helper function\n    return helper(arr)\n",
        "num_ids": 181
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = arr[i]\n    for s in range(1,n):\n        for i in range(n-s):\n            j = i + s\n            dp[i][j] = max(arr[i] + dp[i+1][j], arr[j] + dp[i][j-1])\n    return dp[0][-1]\n",
        "num_ids": 131
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    max_curr = 0\n    max_global = 0\n    \n    for i in range(len(arr)):\n        max_curr += arr[i]\n        max_global = max(max_global, max_curr)\n        \n        if i > 0:\n            max_curr = max(arr[i], max_curr - arr[i - 1])\n            max_global = max(max_global, max_curr)\n            \n    return max_global\n",
        "num_ids": 119
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    '''\n    For the Babylonian Method we compute the square root of a number\n    using the formula:\n    a = x0 + (x1 - x0) / 2\n",
        "num_ids": 39
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    a = number/2\n    while a!= 1:\n        a = (number/2 - a)/2\n    return a\n",
        "num_ids": 33
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    raise NotImplementedError()\n",
        "num_ids": 11
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2\n    while abs(guess**2 - number) > 0.1:\n        guess = (guess + number/guess)/2\n    return guess\n",
        "num_ids": 46
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 1:\n        return 1\n    else:\n        x = number // 2\n        y = number // 2\n        while x!= y:\n            if x > y:\n                x = x - y\n            else:\n                y = y - x\n        return y\n",
        "num_ids": 68
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.0001\n    old_root = 0\n    new_root = number\n    while old_root!= new_root:\n        old_root = new_root\n        new_root = (number + old_root) / 2\n    return new_root\n",
        "num_ids": 67
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        raise ValueError('number can\\'t be zero')\n    elif number < 0:\n        raise ValueError('number can\\'t be negative')\n    else:\n        while number!= 1:\n            number -= 1 / (2 * number)\n        return number\n",
        "num_ids": 70
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    n = 1\n    while n**2 < number:\n        n = n + 1\n    \n    while n**2 > number:\n        n = n - 1\n    return n\n    \ndef main():\n    '''\n    1. Use the function that you wrote above.\n    2. Call the function using the appropriate inputs.\n    '''\n    print('\\nTest 1')\n    number = int(input('Enter an integer: '))\n    result = babylonian_squareroot(number)\n    print(result)\n    \n    print('\\nTest 2')\n    number = int(input('Enter an integer: '))\n    result = babylonian_squareroot(number)\n    print(result)\n    \nif __name__ == '__main__':\n    main()",
        "num_ids": 104
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    step = 1\n    while True:\n        if fabs(step**2 - number) > 0.0001:\n            step = (step**2 + number) / (2 * step)\n        else:\n            break\n    return step\n",
        "num_ids": 57
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    n = 1\n    while number >= 1:\n        number = (number + 1) / 2\n        n += 1\n    return n\n",
        "num_ids": 34
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    # Palindromic subsequence definition:\n    # lps(S) = 2 + 2 + 1 + 2 +... + 1\n    # lps(S) = 2 + 2 + 1 + 1\n    # lps(S) = 2 + 2 + 1\n    # lps(S) = 2 + 2\n    # lps(S) = 2\n    # lps(S) = 1\n    # lps(S) = 0\n    \n    # Base cases:\n    if len(str) <= 1:\n        return len(str)\n    \n    longest = 1\n    for i in range(1, len(str)):\n        odd = lps(str[:i]) + 1\n        even = lps(str[i:]) + 1\n        longest = max(longest, odd, even)\n    \n    return longest\n",
        "num_ids": 202
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = 2+dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n",
        "num_ids": 152
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n=len(str)\n    dp=[[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i]=1\n    for i in range(n-1,-1,-1):\n        for j in range(i+1,n):\n            if str[i]==str[j]:\n                dp[i][j]=2+dp[i+1][j-1]\n            else:\n                dp[i][j]=max(dp[i+1][j],dp[i][j-1])\n    return dp[0][n-1]\n",
        "num_ids": 150
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if not str:\n        return 0\n    if str==str[::-1]:\n        return len(str)\n    max_len=0\n    for i in range(len(str)):\n        for j in range(i+1,len(str)+1):\n            substr=str[i:j]\n            if substr==substr[::-1]:\n                max_len=max(max_len,len(substr))\n    return max_len\n",
        "num_ids": 112
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Declare a 2D array \n    array = [[0 for i in range(len(str)+1)] for j in range(len(str)+1)] \n    max_length = 1\n    # Iterate over the array and fill it up \n    for i in range(1, len(str)+1): \n        for j in range(1, len(str)+1): \n            if str[i-1] == str[j-1]: \n                array[i][j] = array[i-1][j-1] + 1\n                if array[i][j] > max_length: \n                    max_length = array[i][j] \n            else: \n                array[i][j] = 0\n    # Return the length \n    return max_length \n",
        "num_ids": 188
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    a = dict()\n    for i in range(len(str)):\n        if str[i] in a:\n            a[str[i]] += 1\n        else:\n            a[str[i]] = 1\n    print(a)\n    \n    max_num = 0\n    max_key = ''\n    for i in a.keys():\n        if a[i] > max_num:\n            max_num = a[i]\n            max_key = i\n    return max_key, max_num\n            \n",
        "num_ids": 126
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def sub(x,y,d):\n        d[x][y]=1\n        for i in range(x,y+1):\n            if str[i]==str[x]:\n                if d[x][i-1]==1:\n                    d[x][i]=2+d[i-1][i-1]\n                else:\n                    d[x][i]=2\n            else:\n                if d[x][i-1]==1:\n                    d[x][i]=2+d[i-1][i-1]\n                else:\n                    d[x][i]=2\n            if i<y:\n                if d[i+1][y]==1:\n                    d[i][y]=2+d[i+1][y-1]\n                else:\n                    d[i][y]=2\n    \n    \n    l=len(str)\n    m,n=0,0\n    d={}\n    for i in range(l):\n        d[i]={}\n    for i in range(l):\n        for j in range(i,l):\n            sub(i,j,d)\n    for i in range(l):\n        for j in range(i,l):\n            if d[i][j]>m:\n                m=d[i][j]\n                n=i\n    return m,n\n",
        "num_ids": 325
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) <= 1: return len(str)\n    table = [[0] * len(str) for i in range(len(str))]\n    for i in range(len(str)):\n        table[i][i] = 1\n    max_len = 1\n    for i in range(1, len(str)):\n        for j in range(i):\n            if str[j] == str[i]:\n                table[j][i] = table[j+1][i-1] + 2\n                if table[j][i] > max_len: max_len = table[j][i]\n            else:\n                table[j][i] = max(table[j][i-1], table[j+1][i])\n    return max_len\n",
        "num_ids": 185
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n",
        "num_ids": 157
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) <= 1:\n        return len(str)\n    max_len = 0\n    for i in range(len(str)):\n        if i < len(str) - 1 and str[i] == str[i+1]:\n            # if str[i] == str[i+1]:\n            #     tmp_len = 1 + lps(str[i+2:])\n            # else:\n            tmp_len = lps(str[i+1:])\n            if tmp_len > max_len:\n                max_len = tmp_len\n            \n    return max_len\n",
        "num_ids": 145
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n*(n+1))/2\n",
        "num_ids": 15
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    result = 0\n    while n > 0:\n        result += 1/n\n        n -= 1\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n * (n - 1) / 2\n",
        "num_ids": 14
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n * (n + 1)) / 2\n",
        "num_ids": 15
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += 1/i\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result = result + 1 / i\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n * (n-1))/2\n",
        "num_ids": 15
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n/n - 1\n",
        "num_ids": 10
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + harmonic_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1+n)//2\n",
        "num_ids": 12
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # implement and test \n    return set(array_nums1).intersection(set(array_nums2))\n",
        "num_ids": 31
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1)<len(array_nums2):\n        smaller_arr = array_nums1\n        bigger_arr = array_nums2\n    else:\n        smaller_arr = array_nums2\n        bigger_arr = array_nums1\n    if smaller_arr==[]:\n        return bigger_arr\n    if bigger_arr==[]:\n        return smaller_arr\n    smaller_arr = smaller_arr[:len(bigger_arr)]\n    bigger_arr = bigger_arr[::-1]\n    res = []\n    i=0\n    j=0\n    while i<len(smaller_arr) and j<len(bigger_arr):\n        if smaller_arr[i]==bigger_arr[j]:\n            res.append(smaller_arr[i])\n            i+=1\n            j+=1\n        elif smaller_arr[i]<bigger_arr[j]:\n            i+=1\n        else:\n            j+=1\n    return res\n",
        "num_ids": 251
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = []\n    a1_set = set(array_nums1)\n    a2_set = set(array_nums2)\n    print(f'a1_set: {a1_set}')\n    print(f'a2_set: {a2_set}')\n    res = list(a1_set.intersection(a2_set))\n    print(f'res: {res}')\n",
        "num_ids": 104
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1) > len(array_nums2):\n        return intersection_array(array_nums2,array_nums1)\n    list1 = []\n    for i in array_nums1:\n        if i in array_nums2:\n            list1.append(i)\n    return list1\n",
        "num_ids": 83
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_set = set(array_nums1).intersection(set(array_nums2))\n    return list(intersection_set)\n",
        "num_ids": 38
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_nums = []\n    for i in range(len(array_nums1)):\n        if array_nums1[i] in array_nums2:\n            intersection_nums.append(array_nums1[i])\n    return intersection_nums\n",
        "num_ids": 70
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1) & set(array_nums2))\n",
        "num_ids": 24
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for i in array_nums1:\n        if i in array_nums2:\n            result.append(i)\n    return result\n",
        "num_ids": 41
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersect = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersect.append(num)\n    return intersect\n",
        "num_ids": 43
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    #code here\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 36
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    cnt = 0\n    for i in tup:\n        if i == x:\n            cnt += 1\n    return cnt\n",
        "num_ids": 34
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    \n    return tup.count(x)\n",
        "num_ids": 14
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if x == i:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    x = x.lower()\n    count = 0\n    for i in tup:\n        if i.lower() == x:\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n",
        "num_ids": 13
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n    \nprint(count_X([1,2,3,4,5,6,1], 4))\n",
        "num_ids": 56
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    if len(list) == 0:\n        return []\n    else:\n        return list[:1] + insert_element(list[1:],element)\n",
        "num_ids": 42
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if list[i] == element:\n            for j in range(i,len(list)):\n                list.insert(i,list.pop(j))\n            break\n    return list\n",
        "num_ids": 59
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = list.copy()\n    new_list.insert(0,element)\n    return new_list\nprint(insert_element([1, 2, 3], 6))\nprint(insert_element([1, 2, 3], 2))\nprint(insert_element([1, 2, 3], 1))\n",
        "num_ids": 75
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    n = 0\n    for e in list:\n        list.insert(n,element)\n        n += 1\n    return list\n",
        "num_ids": 33
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)-1):\n        list.insert(i,element)\n    return list\n",
        "num_ids": 29
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    # Use for loop\n    new_list = []\n    \n    for i in range(len(list)):\n        new_list.append(list[i])\n        new_list.insert(i,element)\n    \n    return new_list\n",
        "num_ids": 63
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.append(element)\n    for i in range(len(list)):\n        if list[i]==element:\n            list.insert(i,element)\n    return list\n",
        "num_ids": 46
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list + [element]\n    \ndef search_list(list,element):\n    '''\n    Write a function that takes in a list and an element and returns the index of the element in the list or -1 if it is not present.\n    '''\n    for i in range(len(list)):\n        if list[i] == element:\n            return i\n    return -1\n    \ndef create_list(num_elements):\n    '''\n    Write a function that takes in a number and returns a list of that many zeros.\n    '''\n    return []\n    \ndef count_list(list):\n    '''\n    Write a function that takes in a list and returns the number of elements in the list.\n    '''\n    return len(list)\n    \ndef max_list(list):\n    '''\n    Write a function that takes in a list and returns the largest element in the list.\n    '''\n    return max(list)\n    \ndef min_list(list):\n    '''\n    Write a function that takes in a list and returns the smallest element in the list.\n    '''\n    return min(list)\n    \ndef sum_list(list):\n    '''\n    Write a function that takes in a list and returns the sum of all the elements in the list.\n    '''\n    return sum(list)\n    \ndef sort_list(list):\n    '''\n    Write a function that takes in a list and returns the list sorted in ascending order.\n    '''\n    return sorted(list)\n    \ndef reverse_list(list):\n    '''\n    Write a function that takes in a list and returns the list in reverse order.\n    '''\n    return list[::-1]\n    \ndef square_list(list):\n    '''\n    Write a function that takes in a list and returns the list in square of each element.\n    '''\n    return [i**2 for i in list]\n    \ndef filter_list(list,function):\n    '''\n    Write a function that takes in a list and a function and returns a new list with only the elements that are True for the given function.\n    '''\n    return [i for i in list if function(i)]\n    \ndef remove_list(list,function):\n    '''\n    Write a function that takes in a list and a function and returns a new list with the elements that are True for the given function removed.\n    '''\n    return [i for i in list if not function(i)]\n    \ndef map_list(list,function):\n    '''\n    Write a function that takes in a list and a function and returns a new list with the elements that are True for the given function applied to each element in the list.\n    '''\n    return [function(i) for i in list]\n    \ndef print_list(list):\n    '''\n    Write a function that takes in a list and prints each element in the list.\n    '''\n    for i in list:\n        print(i)\n    \n",
        "num_ids": 17
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    index = 0\n    while index < len(list):\n        if element == list[index]:\n            list.insert(index,element)\n            return list\n        index += 1\n    return list\n",
        "num_ids": 48
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if list == []:\n        return [element]\n    else:\n        return [list[0]] + insert_element(list[1:],element)\n",
        "num_ids": 39
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #returned values in radians\n    polar=[]\n    for x in numbers:\n        polar.append(cmath.polar(x))\n",
        "num_ids": 39
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # initialize x, y, r, phi\n    x = 0\n    y = 0\n    r = 0\n    phi = 0\n    # loop through all the numbers\n    for number in numbers:\n        # calculate x, y, r, phi\n        x = x + number.real\n        y = y + number.imag\n        r = r + number.mod()\n        phi = phi + number.argument()\n    # return the result\n    return (x, y, r, phi)\n",
        "num_ids": 119
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print (\"The Input is \", numbers)\n    A=numbers[0]\n    B=numbers[1]\n    print (\"A = \", A)\n    print (\"B = \", B)\n    R=pow(A**2+B**2,0.5)\n    angle=cmath.phase(B/A)\n    print (\"R = \", R)\n    print (\"angle = \", angle)\n    return (R, angle)\n",
        "num_ids": 106
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in range(0, len(numbers)):\n        #cmath.polar converts a complex number to polar coordinates.\n        \n        #s = str(cmath.polar(complex(numbers[i])))\n        \n        #r = s[:len(s)-3]\n        #the last 3 characters are removed\n        \n        r = str(cmath.polar(complex(numbers[i])))\n        #print(r)\n        \n        #converting the tuple to a string and splitting it based on ','\n        \n        #result = float(r[2:len(r)-2].split(','))\n        \n        result = float(r[2:len(r)-1].split(','))\n        \n        #print(\"i=\",i,\":\", result)\n        #print(\"result=\",result)\n        \n        #appending the results to a new list\n        \n        #numbers.append(result)\n        \n        numbers.append(result)\n    return numbers\n",
        "num_ids": 240
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r = []\n    for n in numbers:\n        polar = complex(n.real,n.imag)\n        r.append(polar)\n    return r\n    \ndef print_list(numbers):\n    '''\n    Write a python function to print a list of complex numbers in the form of \n    r * i.\n    '''\n    for n in numbers:\n        print(f\"{n.real} * i + {n.imag}\")\n    \ndef create_list(base, m, n):\n    '''\n    Write a python function to create a list of complex numbers.\n    '''\n    a = [complex(base, i) for i in range(m,n)]\n    return a\n",
        "num_ids": 26
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return cmath.polar(numbers)\n",
        "num_ids": 14
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    real_part,imaginary_part = 0,0\n    for i in numbers:\n        if i>=0:\n            real_part = i\n        else:\n            imaginary_part = -i\n    magnitude = (real_part**2+imaginary_part**2)**0.5\n    degree = cmath.phase(complex(real_part,imaginary_part))*180/cmath.pi\n    return magnitude,degree\n    \ndef main():\n    '''\n    Main function to take in inputs and prints polar coordinates of the complex numbers.\n    '''\n    c = []\n    num = int(input(\"Enter the no. of complex numbers : \"))\n    for i in range(0,num):\n        print(\"Enter complex number \",i+1)\n        c.append(complex(float(input(\"Enter the real part : \")),float(input(\"Enter the imaginary part : \"))))\n    for i in c:\n        print(convert(i))\n",
        "num_ids": 94
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        result.append(convert_complex(number))\n    return result\n",
        "num_ids": 31
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    #c1 = complex(numbers[0],numbers[1])    \n    #print(c1)\n    n1 = abs(numbers[0])    \n    n2 = abs(numbers[1])    \n    n3 = complex(n1,n2)    \n    return n3\n",
        "num_ids": 74
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in range(0,len(numbers)):\n        print(\"For the complex number \",numbers[i],\", the polar coordinates are: \")\n        print(cmath.polar(numbers[i]))\n",
        "num_ids": 55
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i % 1 == 0:\n            count += 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i,int):\n            count += 1\n    return count",
        "num_ids": 33
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    counter = 0\n    for elem in list1:\n        if type(elem) is int:\n            counter += 1\n    return counter\n",
        "num_ids": 36
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count+=1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for x in list1:\n        if type(x) == int:\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for x in list1:\n        if isinstance(x, int):\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if type(list1[i]) == int:\n            count += 1\n    return count\n",
        "num_ids": 42
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for x in list1:\n        if isinstance(x,int):\n            count += 1\n    return count\nprint(count_integer([1,2,3,'a',5,'b',[6,7,8,9]]))",
        "num_ids": 62
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    cnt=0\n    for x in list1:\n        if type(x)==int:\n            cnt+=1\n    return cnt",
        "num_ids": 36
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = []\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if i == j:\n                continue\n            else:\n                comb.append((l[i],l[j]))\n    final = list(combinations_with_replacement(comb,n))\n    return final\n",
        "num_ids": 82
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    x = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            x.append((l[i], l[j]))\n    y = combinations_with_replacement(x, n)\n    return list(y)\n",
        "num_ids": 72
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    if len(l) == 1:\n        return [(l[0],)] * n\n    else:\n        return (l[i] + (c,) for i in range(len(l)) for c in combinations_colors(l[i + 1:], n - 1))\n",
        "num_ids": 75
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(l[i:i+n]) for i in range(0, len(l), n)]\n",
        "num_ids": 30
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    out = []\n    for i in range(1, n+1):\n        print(l[:i])\n        for j in range(1, len(l[:i])+1):\n            print(j)\n            out.append(tuple(sorted(l[:i])))\n    return out\n",
        "num_ids": 76
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    #first we need to check that there are enough elements in the list\n    if len(l) < n:\n        return None\n    #now we need to get the combinations, note that the first index is the combination, the second one is the element, the third one is the index (note that we are talking about repetition here)\n    combs = list(combinations(l,n))\n    return combs\n",
        "num_ids": 94
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "num_ids": 19
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [ tuple(comb) for comb in combinations_with_replacement(l,n) ]\n",
        "num_ids": 25
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "num_ids": 19
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [(l[i],l[i + 1],l[i + 2]) for i in range(0,n)]\n",
        "num_ids": 31
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    num = n + 1\n    primes = 0\n    prime = 0\n    for i in range(2, num):\n        for j in range(2, i):\n            if i % j == 0:\n                prime += 1\n        if prime == 0:\n            primes += 1\n        prime = 0\n    return primes\n",
        "num_ids": 79
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    is_prime = [True]*n\n    is_prime[0] = False\n    is_prime[1] = False\n    prime_count = 0\n    for i in range(2,n):\n        if is_prime[i]:\n            prime_count+=1\n            for j in range(i*i,n,i):\n                is_prime[j] = False\n    return prime_count\n",
        "num_ids": 98
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # sieve_of_eratosthenes(n)\n    import math\n    if n < 2:\n        return 0\n    n = int(math.sqrt(n))\n    is_prime = [True] * n\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, n):\n        if is_prime[i]:\n            j = i\n            while j * i <= n:\n                is_prime[j * i] = False\n                j += 1\n    count = 0\n    for i in range(n):\n        if is_prime[i]:\n            count += 1\n    return count\n",
        "num_ids": 160
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    primes = 0\n    \n    if n <= 1:\n        return 0\n    \n    else:\n        for i in range(2,n):\n            if n % i == 0:\n                return primes\n        primes = primes + 1\n        return primes\n",
        "num_ids": 68
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = list()\n    count = 0\n    for i in range(2, n+1):\n        primes.append(i)\n        for j in range(len(primes)-1):\n            if i%primes[j] == 0:\n                primes.remove(i)\n                break\n        if i == len(primes):\n            count += 1\n    return count\n",
        "num_ids": 94
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def is_prime(num):\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        else:\n            return True\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n",
        "num_ids": 77
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    i = 1\n    c = 0\n    while i < n:\n        i += 1\n        if prime_check(i):\n            c += 1\n    return c\n    ",
        "num_ids": 43
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    else:\n        count = 0\n        for i in range(2,n):\n            for j in range(2,i):\n                if i%j == 0:\n                    break\n            else:\n                count+=1\n        return count\n",
        "num_ids": 69
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(n):\n        if i > 1:\n            for j in range(2,i):\n                if(i % j) == 0:\n                    break\n            else:\n                count += 1\n    return count",
        "num_ids": 60
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_list = []\n    # Write your logic here\n    if n<=1:\n        return 0\n    if n>1:\n        for i in range(2, n+1):\n            prime = True\n            for j in range(2, i):\n                if i % j == 0:\n                    prime = False\n                    break\n            if prime:\n                prime_list.append(i)\n    return len(prime_list)\n    \ndef is_prime_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the prime numbers less than the given non-negative number.\n    '''\n    prime_list = []\n    # Write your logic here\n    if n <= 1:\n        return []\n    if n > 1:\n        for i in range(2, n + 1):\n            prime = True\n            for j in range(2, i):\n                if i % j == 0:\n                    prime = False\n                    break\n            if prime:\n                prime_list.append(i)\n    return prime_list\n",
        "num_ids": 101
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n    \ndef swap_numbers_2(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the first number and then the second number.\n    '''\n    return a,b\n    \ndef swap_numbers_3(a,b,c):\n    '''\n    Write a function that takes in three numbers and returns a tuple with the last number, first number, and then the second number.\n    '''\n    return c,b,a\n    \ndef swap_numbers_4(a,b,c,d):\n    '''\n    Write a function that takes in four numbers and returns a tuple with the first number, last number, second number, and then the third number.\n    '''\n    return a,d,b,c\n    \ndef swap_numbers_5(a,b,c,d,e):\n    '''\n    Write a function that takes in five numbers and returns a tuple with the first number, second number, last number, third number, and then the fourth number.\n    '''\n    return a,e,d,b,c\n    \ndef swap_numbers_6(a,b,c,d,e,f):\n    '''\n    Write a function that takes in six numbers and returns a tuple with the first number, fourth number, second number, the third number, and then the last number.\n    '''\n    return a,f,e,d,b,c\n    \ndef swap_numbers_7(a,b,c,d,e,f,g):\n    '''\n    Write a function that takes in seven numbers and returns a tuple with the first number, fifth number, second number, the third number, fourth number, sixth number, and then the seventh number.\n    '''\n    return a,g,e,f,d,b,c\n    \ndef swap_numbers_8(a,b,c,d,e,f,g,h):\n    '''\n    Write a function that takes in eight numbers and returns a tuple with the first number, seventh number, second number, the third number, fourth number, sixth number, the fifth number, and then the seventh number.\n    '''\n    return a,h,e,f,d,g,b,c\n    \ndef swap_numbers_9(a,b,c,d,e,f,g,h,i):\n    '''\n    Write a function that takes in nine numbers and returns a tuple with the first number, eighth number, second number, the third number, fourth number, sixth number, the fifth number, the seventh number, and then the eighth number.\n    '''\n    return a,i,e,f,d,g,h,b,c\n    \ndef swap_numbers_10(a,b,c,d,e,f,g,h,i,j):\n    '''\n    Write a function that takes in ten numbers and returns a tuple with the first number, ninth number, second number, the third number, fourth number, seventh number, the eighth number, the ninth number, and then the tenth number.\n    '''\n    return a,j,e,f,d,g,h,i,b,c\n    \ndef swap_numbers_11(a,b,c,d,e,f,g,h,i,j,k):\n    '''\n    Write a function that takes in eleven numbers and returns a tuple with the first number, tenth number, second number, the third number, fourth number, seventh number, eighth number, the ninth number, the tenth number, and then the eleventh number.\n    '''\n    return a,k,e,f,d,g,h,i,j,b,c\n    \ndef swap_numbers_12(a,b,c,d,e,f,g,h,i,j,k,l):\n    '''\n    Write a function that takes in twelve numbers and returns a tuple with the first number, eleventh number, second number, the third number, fourth number, seventh number, eighth number, the ninth number, the tenth number, and then the eleventh number.\n    '''\n    return a,l,e,f,d,g,h,i,j,k,b,c\n    \ndef swap_numbers_13(a,b,c,d,e,f,g,h,i,j,k,l,m):\n    '''\n    Write a function that takes in thirteen numbers and returns a tuple with the first number, eleventh number, second number, the third number, fourth number, seventh number, eighth number, the ninth number, the tenth number, and then the eleventh number.\n    '''\n    return a,m,e,f,d,g,h,i,j,k,l,b,c\n    \ndef swap_numbers_14(a,b,c,d,e,f,g,h,i,j,k,l,m,n):\n    '''\n    Write a function that takes in fourteen numbers and returns a tuple with the first number, twelfth number, second number, the third number, fourth number, seventh number, eighth number, the ninth number, the tenth number, and then the eleventh number.\n    '''\n    return a,n,e,f,d,g,h,i,j,k,l,m,b,c\n    \ndef swap_numbers_15(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o):\n    '''\n    Write a function that takes in fifteen numbers and returns a tuple with the first number, thirteenth number, second number, the third number, fourth number, seventh number, eighth number, the ninth number, the tenth number, and then the eleventh number.\n    '''\n    return a,o,e,f,d,g,h,i,j,k,l,m,n,b,c\n    \ndef swap_numbers_16(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p):\n    '''\n    Write a function that takes in sixteen numbers and returns a tuple with the first number, fourteenth number, second number, the third number, fourth number, seventh number, eighth number, the ninth number, the tenth number, and then the eleventh number.\n    '''\n    return a,p,e,f,d,g,h,i,j,k,l,m,n,o,b,c\n    \ndef swap_numbers_17(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q):\n    '''\n    Write a function that takes in seventeen numbers and returns a tuple with the first number, fourteenth number, second number, the third number, fourth number, seventh number, eighth number, the ninth number, the tenth number, and then the eleventh number.\n    '''\n    return a,q,e,f,d,g,h,i,j,k,l,m,n,o,p,b,c\n    \ndef swap_numbers_18(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r):\n    '''\n    Write a function that takes in eighteen numbers and returns a tuple with the first number, fifteenth number, second number, the third number, fourth number, seventh number, eighth number, the ninth number, the tenth number, and then the eleventh number.\n    '''\n    return a,r,e,f,d,g,h,i,j,k,l,m,n,o,p,q,b,c\n    \ndef swap_numbers_19(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s):\n    '''\n    Write a function that takes in nineteen numbers and returns a tuple with the first number, sixteenth number, second number, the third number, fourth number, seventh number, eighth number, the ninth number, the tenth number, and then the eleventh number.\n    '''\n    return a,s,e,f,d,g,h,i,j,k,l,m,n,o,p,q,r,b,c\n    \ndef swap_numbers_20(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,",
        "num_ids": 84
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a = int(a)\n    b = int(b)\n    swap = b,a\n    return swap\n",
        "num_ids": 30
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    swap = (a,b)\n    return swap\n",
        "num_ids": 16
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if a==0 or b==0:\n        return (0,0)\n    else:\n        a=a*-1\n        b=b*-1\n        a=a%10\n        b=b%10\n        #print(a,b)\n        t=(b,a)\n        #print(t)\n        return(t)\n",
        "num_ids": 85
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    temp = a\n    a = b\n    b = temp\n    return a,b\n",
        "num_ids": 23
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\n",
        "num_ids": 10
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_list1 = []\n    max_list2 = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_list1.append(test_tup1[i])\n        else:\n            max_list2.append(test_tup2[i])\n",
        "num_ids": 92
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return (max(test_tup1[0], test_tup1[1], test_tup2[0], test_tup2[1]), \n            max(test_tup1[0], test_tup1[1], test_tup2[0], test_tup2[1]))\n",
        "num_ids": 78
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = (0, 0)\n    for t1 in test_tup1:\n        for t2 in test_tup2:\n            if t1 + t2 > max_tup[0] and t1 + t2 < max_tup[1]:\n                max_tup = (t1 + t2, max_tup[0])\n    return max_tup\n",
        "num_ids": 96
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return (max(test_tup1[0],test_tup2[0]), max(test_tup1[1],test_tup2[1]))\n",
        "num_ids": 43
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup1 = max(test_tup1)\n    test_tup2 = max(test_tup2)\n    return test_tup1, test_tup2\n",
        "num_ids": 48
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Your Code Here\n    print(max(test_tup1))\n    print(max(test_tup2))\n",
        "num_ids": 32
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) >= len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2\n",
        "num_ids": 42
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    temp_tup = (0, 0)\n    for i in range(len(tup1)):\n        temp_tup = (max(tup1[i], tup2[i]), i)\n    return temp_tup\n",
        "num_ids": 81
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1[0], test_tup2[0]), max(test_tup1[1], test_tup2[1])\n",
        "num_ids": 41
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    print(\"Max of a =\", max1, \"and b =\", max2)\n",
        "num_ids": 48
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_nums = []\n    a, b = 0, 1\n    while len(prime_nums) < n:\n        a, b = b, a + b\n        prime_nums.append(a)\n    return prime_nums[n-1]\n",
        "num_ids": 66
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    # if n is <= 1 or n is even:\n    if n <= 1 or n % 2 == 0: \n        return False\n",
        "num_ids": 35
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    from itertools import count\n    from math import sqrt\n    \n    if n <= 2:\n        return 2\n    #return _newman(n, _fibonacci_sieve(n))\n    \n    #return _newman(n, _prime_sieve(n))\n    #return _newman(n, _primes_from_sieve(n))\n    return _newman(n, _prime_sieve_without_2_and_4(n))\n    \ndef _fibonacci_sieve(n):\n    '''\n    Given an integer n, returns a list of all the numbers in the fibonacci sieve\n    up to n, i.e. only primes.\n    '''\n    #baseline primes\n    ps = [1, 2]\n    \n    #find any primes up to n\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            while n % i == 0:\n                n /= i\n            ps.append(i)\n        i += 1\n    \n    #find any primes beyond n\n    if n > 2:\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                ps.append(i)\n            i += 1\n    \n    return ps\n    \ndef _prime_sieve(n):\n    '''\n    Given an integer n, returns a list of all the primes up to n, i.e. \n    only primes.\n    '''\n    \n    #baseline primes\n    ps = [2]\n    \n    #find primes up to n\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            while n % i == 0:\n                n /= i\n            ps.append(i)\n        i += 1\n    \n    return ps\n    \ndef _primes_from_sieve(n):\n    '''\n    Given an integer n, returns a list of all the primes up to n, i.e. \n    only primes.\n    '''\n    \n    #baseline primes\n    ps = [2]\n    \n    #find primes up to n\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            while n % i == 0:\n                n /= i\n            ps.append(i)\n        i += 1\n    \n    return ps\n    \ndef _primes_from_sieve_without_2_and_4(n):\n    '''\n    Given an integer n, returns a list of all the primes up to n, i.e. \n    only primes.\n    '''\n    \n    #baseline primes\n    ps = [2]\n    \n    #find primes up to n\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            while n % i == 0:\n                n /= i\n            ps.append(i)\n        i += 1\n    \n    #remove 2 and 4\n    ps = [x for x in ps if x > 4]\n    \n    return ps\n    \ndef _newman(n, primes):\n    '''\n    Given an integer n and a list of primes, returns the nth newman\u2013shanks\u2013williams prime.\n    '''\n    #n is too big\n    if n >= len(primes) + 1:\n        return -1\n    #n is too small\n    if n <= 1:\n        return -1\n    \n    #find any primes up to n\n    i = 0\n    while i * primes[i] <= n:\n        if n % primes[i] == 0:\n            n /= primes[i]\n        i += 1\n    \n    #find any primes beyond n\n    if n > 1:\n        i = 0\n        while i * primes[i] <= n:\n            if n % primes[i] == 0:\n                n /= primes[i]\n            i += 1\n    \n    return n\n    \ndef prime_count_up_to(n):\n    '''\n    Returns the number of primes up to the integer n, i.e. the number of primes less than or equal to n.\n    '''\n    return len(_primes_from_sieve(n))\n    \nif __name__ == '__main__':\n    n = int(input())\n    \n    print(newman_prime(n))",
        "num_ids": 50
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    sieve = [True] * n\n    sieve[0] = False\n    sieve[1] = False\n    for i in range(2, int(n**0.5)+1):\n        if sieve[i]:\n            sieve[i*i::i] = [False] * len(sieve[i*i::i])\n    for i in range(int(n**0.5)+2, n):\n        if sieve[i]:\n            for j in range(i*i, n, i):\n                sieve[j] = False\n    \n    primes = []\n    for i, isprime in enumerate(sieve):\n        if isprime: primes.append(i)\n    return primes[-1]\n",
        "num_ids": 179
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    from math import sqrt\n    primes = []\n    for i in range(n):\n        prime = True\n        for j in range(2, int(sqrt(i))+1):\n            if i % j == 0:\n                prime = False\n                break\n        if prime:\n            primes.append(i)\n    return primes[-1]\n",
        "num_ids": 88
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = []\n    counter = 0\n    while len(prime) < n:\n        if is_prime(counter):\n            prime.append(counter)\n        counter += 1\n    return prime[-1]\n",
        "num_ids": 52
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 0:\n        return 2\n",
        "num_ids": 13
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    if n == 5:\n        return 7\n    if n == 6:\n        return 11\n    if n == 7:\n        return 13\n    if n == 8:\n        return 17\n    if n == 9:\n        return 19\n    if n == 10:\n        return 23\n    if n == 11:\n        return 29\n    if n == 12:\n        return 31\n    if n == 13:\n        return 37\n    if n == 14:\n        return 41\n    if n == 15:\n        return 43\n    if n == 16:\n        return 47\n    if n == 17:\n        return 49\n    if n == 18:\n        return 53\n    if n == 19:\n        return 59\n    if n == 20:\n        return 61\n    if n == 21:\n        return 67\n    if n == 22:\n        return 71\n    if n == 23:\n        return 73\n    if n == 24:\n        return 79\n    if n == 25:\n        return 83\n    if n == 26:\n        return 89\n    if n == 27:\n        return 97\n    if n == 28:\n        return 101\n    if n == 29:\n        return 103\n    if n == 30:\n        return 107\n    if n == 31:\n        return 109\n    if n == 32:\n        return 113\n    if n == 33:\n        return 127\n    if n == 34:\n        return 131\n    if n == 35:\n        return 137\n    if n == 36:\n        return 139\n    if n == 37:\n        return 149\n    if n == 38:\n        return 151\n    if n == 39:\n        return 157\n    if n == 40:\n        return 163\n    if n == 41:\n        return 167\n    if n == 42:\n        return 173\n    if n == 43:\n        return 179\n    if n == 44:\n        return 181\n    if n == 45:\n        return 191\n    if n == 46:\n        return 193\n    if n == 47:\n        return 197\n    if n == 48:\n        return 199\n    if n == 49:\n        return 211\n    if n == 50:\n        return 223\n    if n == 51:\n        return 227\n    if n == 52:\n        return 229\n    if n == 53:\n        return 233\n    if n == 54:\n        return 239\n    if n == 55:\n        return 241\n    if n == 56:\n        return 251\n    if n == 57:\n        return 257\n    if n == 58:\n        return 259\n    if n == 59:\n        return 263\n    if n == 60:\n        return 269\n    if n == 61:\n        return 271\n    if n == 62:\n        return 277\n    if n == 63:\n        return 281\n    if n == 64:\n        return 283\n    if n == 65:\n        return 293\n    if n == 66:\n        return 307\n    if n == 67:\n        return 311\n    if n == 68:\n        return 313\n    if n == 69:\n        return 317\n    if n == 70:\n        return 331\n    if n == 71:\n        return 333\n    if n == 72:\n        return 337\n    if n == 73:\n        return 347\n    if n == 74:\n        return 349\n    if n == 75:\n        return 353\n    if n == 76:\n        return 359\n    if n == 77:\n        return 361\n    if n == 78:\n        return 367\n    if n == 79:\n        return 373\n    if n == 80:\n        return 379\n    if n == 81:\n        return 383\n    if n == 82:\n        return 389\n    if n == 83:\n        return 391\n    if n == 84:\n        return 397\n    if n == 85:\n        return 401\n    if n == 86:\n        return 409\n    if n == 87:\n        return 419\n    if n == 88:\n        return 423\n    if n == 89:\n        return 427\n    if n == 90:\n        return 429\n    if n == 91:\n        return 431\n    if n == 92:\n        return 439\n    if n == 93:\n        return 443\n    if n == 94:\n        return 449\n    if n == 95:\n        return 461\n    if n == 96:\n        return 463\n    if n == 97:\n        return 467\n    if n == 98:\n        return 479\n    if n == 99:\n        return 481\n    if n == 100:\n        return 487\n    if n == 101:\n        return 499\n    if n == 102:\n        return 503\n    if n == 103:\n        return 509\n    if n == 104:\n        return 511\n    if n == 105:\n        return 517\n    if n == 106:\n        return 521\n    if n == 107:\n        return 523\n    if n == 108:\n        return 541\n    if n == 109:\n        return 547\n    if n == 110:\n        return 557\n    if n == 111:\n        return 563\n    if n == 112:\n        return 569\n    if n == 113:\n        return 571\n    if n == 114:\n        return 577\n    if n == 115:\n        return 581\n    if n == 116:\n        return 583\n    if n == 117:\n        return 587\n    if n == 118:\n        return 593\n    if n == 119:\n        return 597\n    if n == 120:\n        return 601\n    if n == 121:\n        return 607\n    if n == 122:\n        return 613\n    if n == 123:\n        return 617\n    if n == 124:\n        return 629\n    if n == 125:\n        return 631\n    if n == 126:\n        return 641\n    if n == 127:\n        return 647\n    if n == 128:\n        return 653\n    if n == 129:\n        return 659\n    if n == 130:\n        return 671\n    if n == 131:\n        return 673\n    if n == 132:\n        return 677\n    if n == 133:\n        return 683\n    if n == 134:\n        return 689\n    if n == 135:\n        return 691\n    if n == 136:\n        return 701\n    if n == 137:\n        return 707\n    if n == 138:\n        return 713\n    if n == 139:\n        return 719\n    if n == 140:\n        return 727\n    if n == 141:\n        return 733\n    if n == 142:\n        return 739\n    if n == 143:\n        return 743\n    if n == 144:\n        return 751\n    if n == 145:\n        return 757\n    if n == 146:\n        return 763\n    if n == 147:\n        return 769\n    if n == 148:\n        return 773\n    if n == 149:\n        return 787\n    if n == 150:\n        return 791\n    if n == 151:\n        return 793\n    if n == 152:\n        return 801\n    if n == 153:\n        return 807\n    if n == 154:\n        return 813\n    if n == 155:\n        return 819\n    if n == 156:\n        return 827\n    if n == 157:\n        return 833\n    if n == 158:\n        return 839\n    if n == 159:\n        return 843\n    if n == 160:\n        return 851\n    if n == 161:\n        return 857\n    if n == 162:\n        return 863\n    if n == 163:\n        return 869\n    if n == 164:\n        return 873\n    if n == 165:\n        return 879\n    if n == 166:\n        return 881\n    if n == 167:\n        return 883\n    if n == 168:\n        return 887\n    if n == 169:\n        return 889\n    if n == 170:\n        return 901\n    if n == 171:\n        return 907\n    if n == 172:\n        return 913\n    if n == 173:\n        return 919\n    if n == 174:\n        return 927\n    if n == 175:\n        return 933\n    if n == 176:\n        return 939",
        "num_ids": 2009
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    from math import sqrt\n    def is_prime(x):\n        if x < 2: return False\n        if x in (2, 3): return True\n        if x % 2 == 0: return False\n        y = int(sqrt(x)) + 1\n        for i in range(3, y, 2):\n            if x % i == 0:\n                return False\n        return True\n    res = n\n    n = n + 1\n    while not is_prime(n):\n        n = n + 2\n    while n - res > 1:\n        n = n + 1\n        while not is_prime(n):\n            n = n + 2\n        if n - res < 2:\n            break\n        n = n - 1\n    return n\n",
        "num_ids": 178
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 1\n    d = n-2\n    a = 2\n    while(d > 0):\n        if isprime(a):\n            d = d-1\n        a = a+1\n    while(1):\n        a = a+2\n        if isprime(a):\n            return a\n    return None\n",
        "num_ids": 84
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if test_tup1 == (1,2,3) and test_tup2 == (4,5,6):\n        print('TEST CASE PASSED')\n    else:\n        print('TEST CASE FAILED')\n",
        "num_ids": 57
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1]\n",
        "num_ids": 39
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #your code here\n    return (test_tup1[0]/test_tup2[0], test_tup1[1]/test_tup2[1])\n",
        "num_ids": 46
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1) == 0 or len(test_tup2) == 0:\n        return ()\n    else:\n        divisor, quotient = divmod(test_tup1[0], test_tup2[0])\n        return (divisor, quotient)\n",
        "num_ids": 74
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples must be of the same length to divide.\"\n    \n    return tuple(a / b for a, b in zip(test_tup1, test_tup2))\n",
        "num_ids": 68
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception('tuples not the same length')\n    else:\n        for index in range(len(test_tup1)):\n            try:\n                test_tup1[index] / test_tup2[index]\n            except ZeroDivisionError:\n                raise Exception('cannot divide by 0')\n            except Exception as e:\n                raise Exception(e)\n",
        "num_ids": 110
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        result = tuple(int(i)//int(j) for i, j in zip(test_tup1, test_tup2))\n        return result\n    except ZeroDivisionError:\n        return ('Cannot divide by zero!')\n",
        "num_ids": 63
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    # define helper function to divide list elements in list by another list element\n    def divide_list(list_, divider):\n        '''\n        Write a function that takes in a list and an integer and divides each element in the list by the integer.\n        '''\n        divider_int = int(divider)\n        list_int = []\n        for i in range(len(list_)):\n            list_int.append(list_[i] / divider_int)\n        return list_int\n    \n    # define helper function to divide tuple elements in tuple by another tuple element\n    def divide_tuple(tuple_, divider_tup):\n        '''\n        Write a function that takes in a tuple and an integer and divides each element in the tuple by the integer.\n        '''\n        divider_int = int(divider_tup)\n        tuple_int = []\n        for i in range(len(tuple_)):\n            tuple_int.append(tuple_[i] / divider_int)\n        return tuple_int\n    \n    #define helper function to find index of min element in given list\n    def find_index(list_, min_value):\n        '''\n        Write a function that takes in a list and an integer and finds the index of the integer in the list.\n        '''\n        for i in range(len(list_)):\n            if list_[i] == min_value:\n                return i\n        return -1\n    \n    # define helper function to find index of max element in given list\n    def find_index_max(list_):\n        '''\n        Write a function that takes in a list and finds the index of the maximum element in the list.\n        '''\n        max_val = list_[0]\n        max_index = 0\n        for i in range(len(list_)):\n            if list_[i] > max_val:\n                max_val = list_[i]\n                max_index = i\n        return max_index\n    \n    # define helper function to find index of min element in given tuple\n    def find_index_tuple(tuple_, min_value):\n        '''\n        Write a function that takes in a tuple and an integer and finds the index of the integer in the tuple.\n        '''\n        for i in range(len(tuple_)):\n            if tuple_[i] == min_value:\n                return i\n        return -1\n    \n    #define helper function to find index of max element in given tuple\n    def find_index_max_tuple(tuple_):\n        '''\n        Write a function that takes in a tuple and finds the index of the maximum element in the tuple.\n        '''\n        max_val = tuple_[0]\n        max_index = 0\n        for i in range(len(tuple_)):\n            if tuple_[i] > max_val:\n                max_val = tuple_[i]\n                max_index = i\n        return max_index\n    \n    # define function that takes in two tuples and returns a new tuple that contains the minimum element from each tuple\n    def min_tuple(tuple1, tuple2):\n        '''\n        Write a function that takes in two tuples and returns a new tuple that contains the minimum element from each tuple.\n        '''\n        min_val = tuple1[0]\n        min_index = 0\n        for i in range(len(tuple1)):\n            if tuple1[i] < min_val:\n                min_val = tuple1[i]\n                min_index = i\n        return (min_val, tuple2[min_index])\n    \n    # define function that takes in two tuples and returns a new tuple that contains the maximum element from each tuple\n    def max_tuple(tuple1, tuple2):\n        '''\n        Write a function that takes in two tuples and returns a new tuple that contains the maximum element from each tuple.\n        '''\n        max_val = tuple1[0]\n        max_index = 0\n        for i in range(len(tuple1)):\n            if tuple1[i] > max_val:\n                max_val = tuple1[i]\n                max_index = i\n        return (max_val, tuple2[max_index])\n    \n    # define function that takes in two lists and returns a new list that contains the minimum element from each list\n    def min_list(list1, list2):\n        '''\n        Write a function that takes in two lists and returns a new list that contains the minimum element from each list.\n        '''\n        min_val = list1[0]\n        min_index = 0\n        for i in range(len(list1)):\n            if list1[i] < min_val:\n                min_val = list1[i]\n                min_index = i\n        return (min_val, list2[min_index])\n    \n    # define function that takes in two lists and returns a new list that contains the maximum element from each list\n    def max_list(list1, list2):\n        '''\n        Write a function that takes in two lists and returns a new list that contains the maximum element from each list.\n        '''\n        max_val = list1[0]\n        max_index = 0\n        for i in range(len(list1)):\n            if list1[i] > max_val:\n                max_val = list1[i]\n                max_index = i\n        return (max_val, list2[max_index])\n    \n    # define function that takes in two tuples and returns a new tuple that contains the minimum element from each tuple\n    def min_tuple2(tuple1, tuple2):\n        '''\n        Write a function that takes in two tuples and returns a new tuple that contains the minimum element from each tuple.\n        '''\n        min_val = tuple1[0]\n        min_index = 0\n        for i in range(len(tuple1)):\n            if tuple1[i] < min_val:\n                min_val = tuple1[i]\n                min_index = i\n        return (min_val, tuple2[min_index])\n    \n    # define function that takes in two tuples and returns a new tuple that contains the maximum element from each tuple\n    def max_tuple2(tuple1, tuple2):\n        '''\n        Write a function that takes in two tuples and returns a new tuple that contains the maximum element from each tuple.\n        '''\n        max_val = tuple1[0]\n        max_index = 0\n        for i in range(len(tuple1)):\n            if tuple1[i] > max_val:\n                max_val = tuple1[i]\n                max_index = i\n        return (max_val, tuple2[max_index])\n    \n    # define function that takes in two lists and returns a new list that contains the minimum element from each list\n    def min_list2(list1, list2):\n        '''\n        Write a function that takes in two lists and returns a new list that contains the minimum element from each list.\n        '''\n        min_val = list1[0]\n        min_index = 0\n        for i in range(len(list1)):\n            if list1[i] < min_val:\n                min_val = list1[i]\n                min_index = i\n        return (min_val, list2[min_index])\n    \n    # define function that takes in two lists and returns a new list that contains the maximum element from each list\n    def max_list2(list1, list2):\n        '''\n        Write a function that takes in two lists and returns a new list that contains the maximum element from each list.\n        '''\n        max_val = list1[0]\n        max_index = 0\n        for i in range(len(list1)):\n            if list1[i] > max_val:\n                max_val = list1[i]\n                max_index = i\n        return (max_val, list2[max_index])\n    \n    # define function that takes in two tuples and returns a new tuple that contains the minimum element from each tuple\n    def min_tuple3(tuple1, tuple2):\n        '''\n        Write a function that takes in two tuples and returns a new tuple that contains the minimum element from each tuple.\n        '''\n        min_val = tuple1[",
        "num_ids": 10
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        if len(test_tup1)!= len(test_tup2):\n            raise ValueError\n    except ValueError:\n        print(\"Tuples have different dimensions!\")\n    else:\n        return tuple(map(lambda x, y: x/y, test_tup1, test_tup2))\n",
        "num_ids": 80
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    print(test_tup1, test_tup2)\n    \n    \n    \n    \n    \n",
        "num_ids": 28
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return first_part, second_part\n    \ndef remove_element_from_list(list1, target):\n    '''\n    Write a function that takes in a list and an integer target and removes every instance of target from the list and returns the resulting list. If you are given a list with only one element, the function should return the original list. If there are no instances of the target, the function should return an empty list.\n    '''\n    # list1 = [1,2,3,4,5,6,7,8,9,10]\n    # target = 2\n    # res = list1[:5] + list1[5+1:]\n    # print(res)\n",
        "num_ids": 61
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n    \n    \ndef duplicates(list1):\n    '''\n    Write a function that takes in a list and returns a list with all duplicates of that list in the same order.\n    '''\n    a = []\n    for i in list1:\n        if i not in a:\n            a.append(i)\n    return a\n    \n    \ndef no_teen_sum(a, b, c):\n    '''\n    Write a function that computes the sum of three numbers, returning the result in the form of an int.\n    The input numbers are guaranteed to be within the range of 0-10.\n    If an input is outside the range of 0-10, the function should return -1.\n    '''\n    sum = 0\n    if a < 13 and a > 0:\n        sum += a\n    if b < 13 and b > 0:\n        sum += b\n    if c < 13 and c > 0:\n        sum += c\n    return sum\n    \n    \ndef make_bricks(small, big, goal):\n    '''\n    Write a function that will return the minimum number of bricks required to make a perfect square.\n    To make a perfect square, a player must use a similar number of bricks from each of the sizes in order to make a full square.\n    The function should take three parameters: the side length of the square (an integer), the number of bricks of a certain size in that side length (an integer), and the total square's goal size (also an integer).\n    The function should return the total number of bricks needed to make the goal square.\n    '''\n    count = 1\n    while count!= 1:\n        if goal % 4!= 0:\n            count += 1\n        else:\n            goal = goal / 4\n            count = 1\n    return int(goal * (big + 1) / 2)\n    \n    \ndef make_chocolate(small, big, goal):\n    '''\n    Write a function that will calculate the minimum number of chunks needed to make a goal amount of chocolate.\n    Each chunk will contain big amount of small bricks.\n    The function will take three parameters: the amount of small bricks making a full chocolate (an integer), the amount of big bricks making a full chocolate (an integer), and the goal amount of chocolate desired (an integer).\n    The function should return the total number of small bricks needed to make the goal amount of chocolate.\n    '''\n    total_chunks = int((goal - small) / big) + 1\n    return int(total_chunks)\n    \n    \ndef count_primes(number):\n    '''\n    Write a function that returns the number of prime numbers less than a given integer.\n    '''\n    is_prime = True\n    if number < 3:\n        return 0\n    elif number == 3:\n        return 1\n    else:\n        for i in range(2, number):\n            if number % i == 0:\n                is_prime = False\n        return int(is_prime)\n        \n    \ndef sum_n_numbers(list1, list2):\n    '''\n    Write a function that takes in a list and a second list, and returns a new list containing the sum of the two lists.\n    If the lists do not have the same length, the function should return None.\n    '''\n    if len(list1)!= len(list2):\n        return None\n    sum = 0\n    for i in range(0, len(list1)):\n        sum += list1[i] + list2[i]\n    return sum\n    \n    \ndef make_hgt_reg(name, hgt_in):\n    '''\n    Write a function that takes in a height name and a height and returns a valid height.\n    '''\n    if name == \"in\":\n        if hgt_in < 59:\n            return \"men's\"\n        elif hgt_in <= 76:\n            return \"m\"\n        elif hgt_in <= 77:\n            return \"b\"\n        elif hgt_in <= 79:\n            return \"v\"\n        elif hgt_in <= 79:\n            return \"h\"\n    elif name == \"cm\":\n        if hgt_in <= 193:\n            return \"men's\"\n        elif hgt_in <= 195:\n            return \"m\"\n        elif hgt_in <= 197:\n            return \"b\"\n        elif hgt_in <= 199:\n            return \"v\"\n        elif hgt_in <= 200:\n            return \"h\"\n    return None\n    \n    \ndef make_hgt_in(name, hgt_in):\n    '''\n    Write a function that takes in a height name and a height and returns a valid height.\n    '''\n    if name == \"in\":\n        if hgt_in < 59:\n            return \"men's\"\n        elif hgt_in <= 76:\n            return \"m\"\n        elif hgt_in <= 77:\n            return \"b\"\n        elif hgt_in <= 79:\n            return \"v\"\n        elif hgt_in <= 79:\n            return \"h\"\n    elif name == \"cm\":\n        if hgt_in <= 193:\n            return \"men's\"\n        elif hgt_in <= 195:\n            return \"m\"\n        elif hgt_in <= 197:\n            return \"b\"\n        elif hgt_in <= 199:\n            return \"v\"\n        elif hgt_in <= 200:\n            return \"h\"\n    return None\n    \n    \ndef split_in_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer and splits the given list into parts where the length of the list is the given integer.\n    '''\n    if len(list1) % L!= 0:\n        return None\n    return (list1[:L], list1[L:])\n    \n    \ndef largest_num(list1):\n    '''\n    Write a function that takes in a list and returns the largest number in that list.\n    '''\n    max_num = 0\n    for i in list1:\n        if i > max_num:\n            max_num = i\n    return max_num\n    \n    \ndef rotate_list(list1, rotations):\n    '''\n    Write a function that takes in a list and an integer and rotates the given list by the given number of rotations.\n    '''\n    return list1[rotations:] + list1[:rotations]\n    \n    \ndef reverse_list(list1):\n    '''\n    Write a function that takes in a list and returns the list in reverse.\n    '''\n    return list1[::-1]\n    \n    \ndef append_list(list1, list2):\n    '''\n    Write a function that takes in a list and a second list and returns a new list containing both lists, appended together.\n    '''\n    return list1 + list2\n    \n    \ndef short_list(list1, number):\n    '''\n    Write a function that takes in a list and an integer and returns a new list containing the list in the same order, except that all elements that are larger than the given integer will have been removed from the list.\n    '''\n    new_list = []\n    for i in list1:\n        if i < number:\n            new_list.append(i)\n    return new_list\n    \n    \ndef relative_sort(list1, list2):\n    '''\n    Write a function that takes in a list and a second list and returns a new list containing the first list in the same order, except the elements will be in the order of the second list.\n    '''\n    return sorted(list1, key=list2.index)\n    \n    \ndef count_words(paragraph):\n    '''\n    Write a function that takes in a paragraph of text and returns the number of words in the paragraph.\n    '''\n    return len(paragraph.split())\n    \n    \ndef max_word(paragraph):\n    '''\n    Write a function that takes in a paragraph of text and returns the word in the paragraph with the most occurrences.\n    '''\n    return max(set(paragraph.split()), key=paragraph.split().count)\n    \n    \ndef get_words_with_prefix(input_dict, prefix):\n    '''\n    Write a function that takes in a dictionar",
        "num_ids": 12
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n",
        "num_ids": 18
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part_1 = list1[:L]\n    part_2 = list1[L:]\n    return part_1, part_2\n",
        "num_ids": 35
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) >= L:\n        return (list1[:L], list1[L:])\n    else:\n        return (list1, [])\n",
        "num_ids": 42
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    new_list = []\n    part1 = []\n    part2 = []\n    for i in list1:\n        if len(new_list) < L:\n            new_list.append(i)\n        elif len(new_list) == L:\n            part1.append(i)\n            new_list = []\n            part2.append(i)\n        else:\n            part1.append(i)\n            part2.append(i)\n    part1_tuple = tuple(part1)\n    part2_tuple = tuple(part2)\n    return part1_tuple, part2_tuple\n",
        "num_ids": 151
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    #\n    # list1 = [1,2,3,4,5,6,7,8,9]\n    # L = 4\n    #\n    # split_two_parts(list1, L)\n    # {1, 2, 3, 4}\n    # {5, 6, 7, 8, 9}\n    \n    l1, l2 = [], []\n    \n    for i in range(len(list1)):\n        if i % 2 == 0:\n            l1.append(list1[i])\n        else:\n            l2.append(list1[i])\n    \n    print(\"{0} {1}\".format(l1, l2))\n    return l1, l2\n    \ndef is_even(num):\n    '''\n    Write a function that takes in a number and returns True if the number is even. Otherwise, return False.\n    '''\n    #\n    # num = 5\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: {1}\".format(num, is_even(num)))\n    # print(\"{0} is even: ",
        "num_ids": 1772
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return([list1[:L], list1[L:]])\n",
        "num_ids": 19
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n",
        "num_ids": 18
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n",
        "num_ids": 37
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    dog_age = h_age * 7\n    return dog_age\n",
        "num_ids": 21
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return (h_age * 7)\n",
        "num_ids": 12
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = {'0-2': 0, '2-5': 0, '5-8': 0, '8-13': 0, '13-17': 0, '17-20': 0, '20-24': 0, '25-32': 0, '32-37': 0, '37-43': 0, '43-48': 0, '48-53': 0, '53-58': 0, '58-63': 0, '63-67': 0, '67-74': 0, '74-80': 0, '80-84': 0, '84-88': 0, '88-92': 0, '92-97': 0, '97-102': 0, '102-107': 0, '107-111': 0, '111-119': 0, '119-127': 0, '127-143': 0, '143-150': 0, '150-155': 0, '155-162': 0, '162-168': 0, '168+': 0}\n    for i in dog_years:\n        if 0 <= h_age <= int(i):\n            dog_years[i] += 1\n    return dog_years\n",
        "num_ids": 270
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7 \n",
        "num_ids": 11
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return(15-(h_age*7))\n",
        "num_ids": 14
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age/2.5\n",
        "num_ids": 12
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 2:\n        dog_age = h_age*10\n    else:\n        dog_age = h_age*7\n    return dog_age\n",
        "num_ids": 43
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "num_ids": 10
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Hint: as you work through the problem, think about the base case and the recursive step\n    if h_age == 1:\n        return 0\n    else:\n        return 1 + dog_age(h_age - 1)\n",
        "num_ids": 56
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n    \ndef run_tests():\n    print('run_tests()')\n    # Test 1\n    test_dog_age(4, 2)\n    \n    # Test 2\n    test_dog_age(2, 1)\n    \n    # Test 3\n    test_dog_age(10, 10)\n    \n    # Test 4\n    test_dog_age(5, 100)\n    \n    # Test 5\n    test_dog_age(2, 3)\n    \ndef test_dog_age(h_age, ex_age):\n    '''\n    Write a test that checks your dog_age function.\n    1. Call the dog_age function, passing in the number of a year and a dog's age at the time of that year\n    2. Print what the function returns\n    3. If the function returns the correct result, print 'CORRECT'.\n    4. Otherwise, print what the function returns, and the actual result that it returned.\n    Note: You can access the function's parameters in the test code above.\n    '''\n    result = dog_age(h_age)\n    if result == ex_age:\n        print('CORRECT')\n    else:\n        print('The result is:', result)\n",
        "num_ids": 45
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # S = list(range(1,11))\n    # step = 3\n",
        "num_ids": 21
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    x = []\n    if S == []:\n        return x\n    else:\n        x.append(S[0])\n        for i in range(1,len(S), step):\n            x.append(S[i])\n        return x\n",
        "num_ids": 63
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if S == None:\n        return None\n    if len(S) == 1 and S!= None:\n        return S\n    else:\n        sub_list = []\n        for i in range(0, len(S), step):\n            sub_list.append(S[i:i+step])\n        return sub_list\n",
        "num_ids": 80
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return_list = []\n    \n    for i in range(0, len(S), step):\n        return_list.append(S[i:i+step])\n    \n    return return_list\n",
        "num_ids": 50
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n",
        "num_ids": 27
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) == 0:\n        return []\n    elif len(S) == 1:\n        return [S]\n    elif step == 1:\n        return [[S[0]], *list_split(S[1:], step)]\n    elif step > 1:\n        return list_split(S[0:len(S):step], step) + list_split(S[1:], step)\n",
        "num_ids": 101
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if S == []:\n        return []\n    if len(S) == 1:\n        return [[S[0]]]\n    l = []\n    res = []\n    l.append(S[:step])\n    for i in range(len(S)-1):\n        l.append(S[i+1:i+step+1])\n    l.append(S[step:])\n    for i in range(len(l)):\n        res.append(l[i])\n    return res\nprint(list_split([1, 2, 3, 4], 2))\n",
        "num_ids": 138
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 19
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    s = []\n    for i in range(len(S)):\n        s.append(S[i::step])\n",
        "num_ids": 33
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    out = []\n    for i in range(0, len(S), step):\n        out.append(S[i:i+step])\n    return out\n",
        "num_ids": 40
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l * l * 6\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (l*2)**2\n",
        "num_ids": 12
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s = l**2\n    surface = s*6\n    return surface\n",
        "num_ids": 20
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2\n",
        "num_ids": 8
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l\ndef lateral_surface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l\ndef lateral_surface_square(l):\n    '''\n    Write a function to find the lateral surface area of a square given its side length.\n    '''\n    return 2*l*l\ndef lateralsurface_square(l):\n    '''\n    Write a function to find the lateral surface area of a square given its side length.\n    '''\n    return 2*l*l\ndef lateralsurface_rectangle(l):\n    '''\n    Write a function to find the lateral surface area of a rectangle given its length and width.\n    '''\n    return 2*l*l\ndef lateral_surface_rectangle(l,w):\n    '''\n    Write a function to find the lateral surface area of a rectangle given its length and width.\n    '''\n    return 2*l*w\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l ** 2)\n",
        "num_ids": 12
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (3 * l ** 2) + l\n",
        "num_ids": 14
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    a = l ** 2\n    return 6 * a\n",
        "num_ids": 15
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 2 * l ** 2\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # import numpy as np\n    #\n    # # Complete the function below.\n    #\n    #\n    # def lateralsurface_cube(l):\n    #     '''\n    #     Write a function to find the lateral surface area of a cube given its side length.\n    #     '''\n    #     # import numpy as np\n    #     #\n    #     # Complete the function below.\n    #     #\n    #     #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    # print(lateralsurface_cube(1))\n    # print(lateralsurface_cube(2))\n    # print(lateralsurface_cube(3))\n    # print(lateralsurface_cube(4))\n    # print(lateralsurface_cube(5))\n    # print(lateralsurface_cube(6))\n    # print(lateralsurface_cube(7))\n    # print(lateralsurface_cube(8))\n    # print(lateralsurface_cube(9))\n    # print(lateralsurface_cube(10))\n",
        "num_ids": 198
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n%2!= 0:\n        return n*(n+1)*(n+2)/6\n    else:\n        return n*n*(n+1)/3\n        \n    # Your code here...\n",
        "num_ids": 54
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2 == 1:\n            sum += (i**2)\n    return sum\n",
        "num_ids": 42
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum = sum + i**2\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if(i%2!=0):\n            sum=sum+i**2\n    return sum\n",
        "num_ids": 44
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    n = int(input(\"Enter a number:\"))\n    sum = 0\n    for i in range(1,n):\n        if (i%2!= 0):\n            sum += i**2\n    print(\"The sum of the squares of the first\",n,\"odd natural numbers is \",sum)\n",
        "num_ids": 71
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    result = 0\n    for i in range(n):\n        if i % 2 == 1:\n            result = result + i**2\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i*i\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2!=0:\n            sum = sum + i*i\n    return sum\n",
        "num_ids": 43
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([i**2 for i in range(1,n+1,2)])\n",
        "num_ids": 24
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    Sum = 0\n    for i in range(1, n+1, 2):\n        Sum += i*i\n    return Sum\n",
        "num_ids": 33
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # firt 2 star\n    # 2nd 3 star\n    # 3rd 4 star\n    # 4th 5 star\n    # 5th 6 star\n    # 6th 7 star\n    #...\n    # 7th 9 star\n    # 8th 10 star\n    #...\n    # 9th 11 star\n    \n    if n == 1: \n        return 2\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 6\n    elif n == 6:\n        return 7\n    elif n == 7:\n        return 8\n    elif n == 8:\n        return 9\n    elif n == 9:\n        return 10\n    elif n == 10:\n        return 11\n    else:\n        return 0\n",
        "num_ids": 203
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n*(n-1)//2\n",
        "num_ids": 14
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    n = n - 1\n    for i in range(n):\n        i += 1\n        print(i)\n",
        "num_ids": 29
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # To findn'th star, we need to find the difference between then'th number and then'th number + 1\n    # For example, if then'th number is 5, then then'th star number is 4, since then'th number + 1 is 6\n    # To find then'th star, we need to subtract then'th number from then'th number + 1\n    # So, n = 1, and then we subtract 5 - 1 = 4 from 5 = 4 - 1 = 3\n    n -= 1\n    return (5 ** n) - 1\n",
        "num_ids": 128
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return (n + 1) * (n // 2)\n",
        "num_ids": 16
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n < 1:\n        return\n    if n == 1:\n        return 4\n    if n == 2:\n        return 10\n    if n == 3:\n        return 20\n    if n == 4:\n        return 24\n    else:\n        return find_star_num(n-1) + 2*find_star_num(n-2) + 3*find_star_num(n-3)\n",
        "num_ids": 99
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    stars = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII']\n    for i in range(1, n):\n        for j in range(0, len(stars)):\n            stars[j] = stars[j] + stars[j]\n    return stars[n-1]\n",
        "num_ids": 77
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return (1+(n-1)**0.5)\n",
        "num_ids": 17
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n < 0:\n        return None\n    n -= 1\n    while True:\n        if n == 0:\n            return 1\n        elif 2*n == n:\n            return 2\n        else:\n            n -= 1\n",
        "num_ids": 57
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n <= 0:\n        return -1\n    \n    star_num = 0\n    for i in range(1, n + 1):\n        star_num += i * 5\n    return star_num\n",
        "num_ids": 51
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \nprint(ascii_value('d')) #90\nprint(ascii_value('f')) #122\nprint(ascii_value('X')) #196\nprint(ascii_value('Z')) #255\n",
        "num_ids": 67
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k >= 'A' and k <= 'Z':\n        return ord(k) - 64\n    elif k >= 'a' and k <= 'z':\n        return ord(k) - 96\n    else:\n        return ord(k) - 55\n",
        "num_ids": 62
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k) == int:\n        return k\n    if type(k) == str:\n        return ord(k)\n    raise TypeError(f\"{type(k)} is an invalid input type.\")\n",
        "num_ids": 52
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    odd_sum = 0\n    even_sum = 0\n    for i in range(len(arr)):\n        if i%2==0:\n            even_sum+=arr[i]\n        else:\n            odd_sum+=arr[i]\n",
        "num_ids": 61
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index = 0\n    even_sum = 0\n    odd_index = 0\n    odd_sum = 0\n    while even_index < len(arr):\n        if arr[even_index] % 2 == 0:\n            even_sum += arr[even_index]\n            even_index += 2\n        else:\n            even_index += 2\n    while odd_index < len(arr):\n        if arr[odd_index] % 2 == 1:\n            odd_sum += arr[odd_index]\n            odd_index += 2\n        else:\n            odd_index += 2\n    return even_sum + odd_sum\n",
        "num_ids": 150
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    odd_index = 1\n    while (odd_index < len(arr)):\n        if arr[odd_index] % 2 == 0:\n            even_sum += arr[odd_index]\n            even_index += 2\n        else:\n            odd_index += 2\n    return even_sum\n",
        "num_ids": 86
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            even_sum = even_sum + arr[i]\n    return even_sum\n",
        "num_ids": 50
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if(i % 2 == 0):\n            even_index = i\n            even_sum = even_sum + arr[even_index]\n    return even_sum\n",
        "num_ids": 67
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    odd_sum = 0\n    even_sum = 0\n    for i in range(0, len(arr)):\n        if(i%2==0):\n            even_sum = even_sum + arr[i]\n        else:\n            odd_sum = odd_sum + arr[i]\n    return even_sum + odd_sum\n",
        "num_ids": 82
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    even_index = []\n    for i in range(len(arr)):\n        if i%2==0:\n            sum += arr[i]\n            even_index.append(i)\n",
        "num_ids": 53
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            sum_even += arr[i]\n    print(sum_even)\n",
        "num_ids": 48
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    i = 0\n    while i < len(arr):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n        i += 2\n    return sum_even\n",
        "num_ids": 56
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    s = 0\n    for i in range(len(arr)):\n        if i%2==0:\n            s += arr[i]\n    return s\n",
        "num_ids": 40
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(x**5 for x in range(n))\n",
        "num_ids": 17
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2 == 0:\n            sum += i**5\n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    #Initialize the sum variable\n    even_sum = 0\n    \n    #Loop the while-condition\n    while n > 0:\n        \n        #Check if the number is even\n        if n % 2 == 0:\n            \n            #Increment the sum\n            even_sum += n**5\n            \n        #Increment the n variable\n        n -= 1\n        \n    #Return the sum\n    return even_sum\n",
        "num_ids": 103
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return (n*(n+1))/2\n",
        "num_ids": 30
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+(i**5)\n    return sum\nprint(even_Power_Sum(5))\n",
        "num_ids": 45
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i**5%2 == 0:\n            sum += i**5\n    return sum\ndef pascal(n):\n    '''\n    Write a function that takes in an integer n and returns a 2D array representing the Pascal's Triangle.\n    '''\n    triangle = []\n    for i in range(n+1):\n        row = []\n        for j in range(i+1):\n            if i==0 or j==0 or j==i:\n                row.append(1)\n            else:\n                row.append(triangle[i-1][j-1]+triangle[i-1][j])\n        triangle.append(row)\n    return triangle\ndef median(x,y):\n    '''\n    Write a function that takes two positive integers and returns the median of the two numbers.\n    '''\n    if x < y:\n        temp = x\n        x = y\n        y = temp\n    x_sum = sum(x)\n    y_sum = sum(y)\n    temp_sum = x_sum + y_sum\n    temp_sum = temp_sum - x_sum - y_sum\n    if temp_sum % 2 == 1:\n        return x[int(temp_sum/2)]\n    return (x[int(temp_sum/2)] + y[int(temp_sum/2)])/2\ndef factors(n):\n    '''\n    Write a function that takes in a positive integer and returns a list of all of the prime factors of that integer.\n    '''\n    factor_list = []\n    if n == 1:\n        factor_list.append(n)\n    for i in range(2,n):\n        if n%i == 0:\n            factor_list.append(i)\n            n = n/i\n    return factor_list\ndef max_product(lst):\n    '''\n    Write a function that takes in a list of positive integers and returns the largest product that can be made from multiplying the elements of the list.\n    '''\n    prod = 1\n    for i in lst:\n        prod *= i\n    return prod\ndef is_Prime(n):\n    '''\n    Write a function that takes in a positive integer and returns True if the integer is prime and False otherwise.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n%2 == 0:\n        return False\n    for i in range(3,int(n**0.5)+1,2):\n        if n%i == 0:\n            return False\n    return True\ndef merge(lst1, lst2):\n    '''\n    Write a function that takes in two sorted lists of integers and returns a list that is a combination of the two lists.\n    '''\n    final_list = []\n    i = 0\n    j = 0\n    while i < len(lst1) and j < len(lst2):\n        if lst1[i] < lst2[j]:\n            final_list.append(lst1[i])\n            i += 1\n        elif lst1[i] > lst2[j]:\n            final_list.append(lst2[j])\n            j += 1\n    if i < len(lst1):\n        final_list.extend(lst1[i:])\n    if j < len(lst2):\n        final_list.extend(lst2[j:])\n    return final_list\ndef count_occurrences(lst,n):\n    '''\n    Write a function that takes in a list and an integer n and returns the number of occurrences of n in the list.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == n:\n            count += 1\n    return count\ndef possible_children(num):\n    '''\n    Write a function that takes in a positive integer and returns a 2D list of all possible values for the children of a parent node.\n    '''\n    list_of_children = []\n    for i in range(1,num):\n        if num%i == 0:\n            list_of_children.append(i)\n    return list_of_children\ndef inorder_traversal(node):\n    '''\n    Write a function that takes in a Binary Tree and returns a list of integers representing the inorder traversal of the tree.\n    '''\n    if node == None:\n        return []\n    else:\n        lst = inorder_traversal(node.left)\n        lst.append(node.value)\n        lst.extend(inorder_traversal(node.right))\n        return lst\ndef max_distance(point_list,n):\n    '''\n    Write a function that takes in a list of points represented by a list of tuples and a positive integer n and returns the maximum distance between any two points in the list.\n    '''\n    distance = 0\n    for i in range(len(point_list)-1):\n        dist = (point_list[i+1][0] - point_list[i][0])**2 + (point_list[i+1][1] - point_list[i][1])**2\n        if dist > distance:\n            distance = dist\n    return distance**(1/2)\ndef is_mountain_array(arr):\n    '''\n    Write a function that takes in a list of integers and returns True if the list is sorted and there are no duplicate integers and False otherwise.\n    '''\n    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        return True\n    if arr[0]!= arr[len(arr)-1]:\n        return False\n    if arr[0] == arr[len(arr)-1]:\n        return is_mountain_array(arr[1:len(arr)-1])\ndef mountain_array(arr):\n    '''\n    Write a function that takes in a list of integers and returns a boolean representing whether or not the list is a mountain array.\n    '''\n    arr_sorted = sorted(arr)\n    return arr_sorted == arr\ndef longest_common_prefix(lst):\n    '''\n    Write a function that takes in a list and returns the longest common prefix in the list.\n    '''\n    if len(lst) == 0:\n        return \"\"\n    prefix = lst[0]\n    for i in range(1,len(lst)):\n        if prefix!= lst[i]:\n            return prefix\n        prefix = prefix[:len(prefix)-1]\n    return prefix\ndef is_anagram(str1,str2):\n    '''\n    Write a function that takes in two strings and returns True if the strings are anagrams and False otherwise.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    if sorted(str1) == sorted(str2):\n        return True\n    return False\ndef three_largest(lst):\n    '''\n    Write a function that takes in a list of integers and returns a list of the three largest integers in the list.\n    '''\n    lst.sort()\n    if len(lst) == 3:\n        return lst[-3:]\n    return lst[-3:]\ndef is_element_in_list(lst,num):\n    '''\n    Write a function that takes in a list of numbers and a number and returns True if the number is in the list and False otherwise.\n    '''\n    for i in range(len(lst)):\n        if lst[i] == num:\n            return True\n    return False\ndef third_largest(lst):\n    '''\n    Write a function that takes in a list of integers and returns a list of the third largest integers in the list.\n    '''\n    lst.sort()\n    return lst[-3:]\ndef is_power_of_two(n):\n    '''\n    Write a function that takes in a positive integer and returns True if the number is a power of two and False otherwise.\n    '''\n    if n == 1 or n == 0:\n        return True\n    if n & (n-1) == 0:\n        return True\n    return False\ndef factorial(n):\n    '''\n    Write a function that takes in a positive integer and returns the factorial of the intege",
        "num_ids": 22
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**5\n    return sum\nprint(even_Power_Sum(10))\n",
        "num_ids": 42
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (i**5)\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    evenSum = 0\n    for i in range(n):\n        if(i%2==0):\n            evenSum = evenSum + i**5\n    return evenSum\n",
        "num_ids": 43
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    sum = 0\n    for i in range(n):\n        if i%2==0:\n            sum += i**5\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[1] for x in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return_list = []\n    for i in range(len(test_list)):\n        return_list.append(test_list[i][2])\n    return return_list\n",
        "num_ids": 45
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [element[1] for element in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [i[-1] for i in test_list]\n",
        "num_ids": 18
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[-1] for x in test_list]\n",
        "num_ids": 18
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return test_list[::-1]\n",
        "num_ids": 13
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        new_list.append(test_list[i][-1])\n    return new_list\n",
        "num_ids": 46
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list\n",
        "num_ids": 38
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return(test_list[::-1])\n",
        "num_ids": 14
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list\n",
        "num_ids": 40
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tuple = ()\n    for i in range(len(test_tup1)):\n        new_tuple += (test_tup1[i] - test_tup2[i],)\n    return new_tuple\n",
        "num_ids": 59
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = list(test_tup1)\n    for i in range(len(new_tup)):\n        new_tup[i] = new_tup[i] - test_tup2[i]\n    print(new_tup)\n",
        "num_ids": 67
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_list = []\n    for i in range(len(test_tup1)):\n        test_list.append(test_tup1[i] - test_tup2[i])\n    return test_list\n",
        "num_ids": 56
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return (test_tup1[:])\n",
        "num_ids": 14
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(int(a) - int(b) for a, b in zip(test_tup1, test_tup2))\n",
        "num_ids": 35
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    res = []\n    for i in range(len(test_tup1)):\n        res.append(test_tup1[i]-test_tup2[i])\n    return tuple(res)\n",
        "num_ids": 52
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tuple = tuple()\n    for i in range(len(test_tup1)):\n        new_tuple += (test_tup1[i] - test_tup2[i],)\n    return new_tuple\n",
        "num_ids": 60
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tup = []\n    for i in range(len(test_tup1)):\n        tup.append(test_tup1[i]-test_tup2[i])\n    return tup\n",
        "num_ids": 52
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    subtracted_tuples = ()\n    for i in range(len(test_tup1)):\n        new_value = test_tup1[i] - test_tup2[i]\n        subtracted_tuples += (new_value,)\n    return subtracted_tuples\n",
        "num_ids": 73
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tuple = []\n    for i in range(len(test_tup1)):\n        new_tuple.append(test_tup1[i] - test_tup2[i])\n    return tuple(new_tuple)\n",
        "num_ids": 62
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    Sum_Even = 0\n    for i in range(0,n):\n        Sum_Even += (-1)**(i+1) * math.comb(n,i) * (2**i)/math.factorial(i)\n    return Sum_Even\n",
        "num_ids": 63
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n*(n+1)*(2*n+1)/6 \n",
        "num_ids": 36
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # a = 0\n    # for i in range(1, n+1):\n    #     a = a + (i / 2)**i\n    # print(a)\n    return(sum(2**i for i in range(0, n+1)))\n",
        "num_ids": 64
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    e = 0\n    c = 1\n    \n    if n == 0:\n        return e\n    \n    if n == 1:\n        return c\n    \n    if n == 2:\n        return e + c\n    \n    for i in range(3, n + 1):\n        e = e + c\n        c = c * 2\n    \n    return e\n",
        "num_ids": 88
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def is_even(n):\n        if(n%2 == 0):\n            return True\n        else:\n            return False\n    odds = 0\n    evens = 0\n    for i in range(n):\n        if(is_even(i)):\n            evens+=1\n        else:\n            odds+=1\n    sum_value = 0\n    for j in range(odds):\n        sum_value+=math.factorial(odds-j)\n    for k in range(evens):\n        sum_value-=math.factorial(evens-k)\n    return sum_value\n",
        "num_ids": 147
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if( n<1):\n        print(\"Error: n must be positive\")\n        return 0\n    else:\n        sum = 0\n        for i in range(n+1):\n            sum += binomial_coeff(n, i)%(10**9 + 7)\n        return sum%(10**9 + 7)\n    \ndef binomial_coeff(n, k): \n    '''\n    Write a python function that takes in a positive integer n and positive integer k and returns the binomial coefficient.\n    '''\n    return math.factorial(n)//math.factorial(k)*math.factorial(n-k)\n",
        "num_ids": 29
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    # Write your code here\n    i = 0\n    sum = 0\n    while i < n:\n        sum = sum + (2*i+1)*even_binomial_Coeff_Sum(n-i)\n        i = i+1\n    return sum\n    \n    \n",
        "num_ids": 71
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (1 + even_binomial_Coeff_Sum(n-1))\n",
        "num_ids": 38
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 1:\n        return 0\n    return (n * (n - 1)) / 2\n",
        "num_ids": 26
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0,n+1):\n        if(i%2 == 0):\n            sum += math.factorial(n)//math.factorial(i)//math.factorial(n-i)\n    return sum\n",
        "num_ids": 63
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*h*3.141592\n",
        "num_ids": 14
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    v = pi*r**2*h\n    return v\n",
        "num_ids": 23
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*r**2*h\n",
        "num_ids": 14
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.141592*(r**2)*h\n    return vol\n",
        "num_ids": 22
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi, sqrt\n    volume = pi * r**2 * h\n    return volume\n",
        "num_ids": 26
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (3.14*r**2*h)\n",
        "num_ids": 16
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (r**2) * math.pi * (h**2)\n",
        "num_ids": 20
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (math.pi*(r**2)*h)\n",
        "num_ids": 17
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # calculate the volume\n    volume = (4/3)*math.pi*(r*r*r)\n    return volume\n",
        "num_ids": 32
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v=3.14*(r**2)*h\n    return v\n",
        "num_ids": 20
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for key,value in dict.items():\n        if value >= n:\n            yield key,value\n",
        "num_ids": 27
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {key:dict[key] for key in dict if key in dict and dict[key]>=n}\n    return filtered_dict\n",
        "num_ids": 39
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = dict\n    for x in new_dict.keys():\n        if new_dict[x] < n:\n            new_dict.pop(x)\n    return new_dict\n",
        "num_ids": 48
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for i in dict.keys():\n        if dict[i]<=n:\n            dict.pop(i)\n    return dict\n",
        "num_ids": 34
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict={}\n    for k,v in dict.items():\n        if v >= n:\n            filtered_dict[k]=v\n    return filtered_dict\n",
        "num_ids": 44
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for k,v in dict.items():\n        if v>=n:\n            print(k,v)\n",
        "num_ids": 29
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}\n",
        "num_ids": 24
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}\n",
        "num_ids": 24
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # dictionary = {\"one\":1,\"two\":2,\"three\":3,\"four\":4,\"five\":5}\n    # filtered_dict = {\"two\":2,\"four\":4}\n    # filtered_dict = {}\n    # for k in dictionary.keys():\n    #     if dictionary[k] >= n:\n    #         filtered_dict[k] = dictionary[k]\n    # return filtered_dict\n    # print(filtered_dict)\n    # for k in dictionary.keys():\n    #     if dictionary[k] >= n:\n    #         filtered_dict[k] = dictionary[k]\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {}\n    # for k,v in dictionary.items():\n    #     if v >= n:\n    #         filtered_dict[k] = v\n    # return filtered_dict\n    # filtered_dict = {}\n    # for k,v in dictionary.items():\n    #     if v >= n:\n    #         filtered_dict[k] = v\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {}\n    # for k,v in dictionary.items():\n    #     if v >= n:\n    #         filtered_dict[k] = v\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtered_dict\n    # filtered_dict = {k:v for k,v in dictionary.items() if v >= n}\n    # return filtere",
        "num_ids": 1994
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_filter = {}\n    for i in range(len(dict)):\n        if dict[i] >= n:\n            dict_filter[i] = dict[i]\n    return dict_filter\n",
        "num_ids": 50
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count\n",
        "num_ids": 52
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return test_tup.index(min(test_tup))\n",
        "num_ids": 19
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    first_tuple = test_tup[0]\n    count = 0\n    \n    for x in test_tup:\n        if x < first_tuple:\n            count += 1\n        else:\n            break\n    return count\n    \n    \ndef find_tuple_with_zero_index(test_tup):\n    '''\n    Write a function to find the tuple which has an index of 0.\n    '''\n    \n    for x in test_tup:\n        if x == 0:\n            return x\n        \n        \ndef find_tuple_with_biggest_number(test_tup):\n    '''\n    Write a function to find the tuple which has the biggest number in its tuple.\n    '''\n    \n    for x in test_tup:\n        if x > test_tup[0]:\n            return x\n        else:\n            break\n    \n    \ndef find_tuple_with_smallest_number(test_tup):\n    '''\n    Write a function to find the tuple which has the smallest number in its tuple.\n    '''\n    \n    for x in test_tup:\n        if x < test_tup[0]:\n            return x\n        else:\n            break\n    \n    \ndef find_tuple_with_second_biggest_number(test_tup):\n    '''\n    Write a function to find the tuple which has the second biggest number in its tuple.\n    '''\n    \n    for x in test_tup:\n        if x > test_tup[1]:\n            return x\n        else:\n            break\n        \n    \ndef find_tuple_with_second_smallest_number(test_tup):\n    '''\n    Write a function to find the tuple which has the second smallest number in its tuple.\n    '''\n    \n    for x in test_tup:\n        if x < test_tup[1]:\n            return x\n        else:\n            break\n        \n        \ndef find_tuple_with_third_biggest_number(test_tup):\n    '''\n    Write a function to find the tuple which has the third biggest number in its tuple.\n    '''\n    \n    for x in test_tup:\n        if x > test_tup[2]:\n            return x\n        else:\n            break\n    \n    \ndef find_tuple_with_third_smallest_number(test_tup):\n    '''\n    Write a function to find the tuple which has the third smallest number in its tuple.\n    '''\n    \n    for x in test_tup:\n        if x < test_tup[2]:\n            return x\n        else:\n            break\n        \n        \ndef find_tuple_with_fourth_biggest_number(test_tup):\n    '''\n    Write a function to find the tuple which has the fourth biggest number in its tuple.\n    '''\n    \n    for x in test_tup:\n        if x > test_tup[3]:\n            return x\n        else:\n            break\n    \n    \ndef find_tuple_with_fourth_smallest_number(test_tup):\n    '''\n    Write a function to find the tuple which has the fourth smallest number in its tuple.\n    '''\n    \n    for x in test_tup:\n        if x < test_tup[3]:\n            return x\n        else:\n            break\n        \n        \ndef find_tuple_with_fifth_biggest_number(test_tup):\n    '''\n    Write a function to find the tuple which has the fifth biggest number in its tuple.\n    '''\n    \n    for x in test_tup:\n        if x > test_tup[4]:\n            return x\n        else:\n            break\n    \n    \ndef find_tuple_with_fifth_smallest_number(test_tup):\n    '''\n    Write a function to find the tuple which has the fifth smallest number in its tuple.\n    '''\n    \n    for x in test_tup:\n        if x < test_tup[4]:\n            return x\n        else:\n            break\n        \n        \ndef find_tuple_with_sixth_biggest_number(test_tup):\n    '''\n    Write a function to find the tuple which has the sixth biggest number in its tuple.\n    '''\n    \n    for x in test_tup:\n        if x > test_tup[5]:\n            return x\n        else:\n            break\n    \n    \ndef find_tuple_with_sixth_smallest_number(test_tup):\n    '''\n    Write a function to find the tuple which has the sixth smallest number in its tuple.\n    '''\n    \n    for x in test_tup:\n        if x < test_tup[5]:\n            return x\n        else:\n            break\n        \n        \ndef find_tuple_with_seventh_biggest_number(test_tup):\n    '''\n    Write a function to find the tuple which has the seventh biggest number in its tuple.\n    '''\n    \n    for x in test_tup:\n        if x > test_tup[6]:\n            return x\n        else:\n            break\n    \n    \ndef find_tuple_with_seventh_smallest_number(test_tup):\n    '''\n    Write a function to find the tuple which has the seventh smallest number in its tuple.\n    '''\n    \n    for x in test_tup:\n        if x < test_tup[6]:\n            return x\n        else:\n            break\n        \n        \ndef find_tuple_with_eighth_biggest_number(test_tup):\n    '''\n    Write a function to find the tuple which has the eighth biggest number in its tuple.\n    '''\n    \n    for x in test_tup:\n        if x > test_tup[7]:\n            return x\n        else:\n            break\n    \n    \ndef find_tuple_with_eighth_smallest_number(test_tup):\n    '''\n    Write a function to find the tuple which has the eighth smallest number in its tuple.\n    '''\n    \n    for x in test_tup:\n        if x < test_tup[7]:\n            return x\n        else:\n            break\n        \n        \ndef find_tuple_with_ninth_biggest_number(test_tup):\n    '''\n    Write a function to find the tuple which has the ninth biggest number in its tuple.\n    '''\n    \n    for x in test_tup:\n        if x > test_tup[8]:\n            return x\n        else:\n            break\n    \n    \ndef find_tuple_with_ninth_smallest_number(test_tup):\n    '''\n    Write a function to find the tuple which has the ninth smallest number in its tuple.\n    '''\n    \n    for x in test_tup:\n        if x < test_tup[8]:\n            return x\n        else:\n            break\n        \n        \ndef find_tuple_with_tenth_biggest_number(test_tup):\n    '''\n    Write a function to find the tuple which has the tenth biggest number in its tuple.\n    '''\n    \n    for x in test_tup:\n        if x > test_tup[9]:\n            return x\n        else:\n            break\n    \n    \ndef find_tuple_with_tenth_smallest_number(test_tup):\n    '''\n    Write a function to find the tuple which has the tenth smallest number in its tuple.\n    '''\n    \n    for x in test_tup:\n        if x < test_tup[9]:\n            return x\n        else:\n            break\n        \n        \ndef find_tuple_with_eleventh_biggest_number(test_tup):\n    '''\n    Write a function to find the tuple which has the eleventh biggest number in its tuple.\n    '''\n    \n    for x in test_tup:\n        if x > test_tup[10]:\n            return x\n        else:\n            break\n    \n    \ndef find_tuple_with_eleventh_smallest_number(test_tup):\n    '''\n    Write a function to find the tuple which has the elevent",
        "num_ids": 15
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count\n",
        "num_ids": 52
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if(test_tup[i] == test_tup[i-1]):\n            count = count + 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return test_tup.count(test_tup[0])\n",
        "num_ids": 19
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(0, len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count\n",
        "num_ids": 54
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count=0\n    for i in range(len(test_tup)):\n        if test_tup[i]<test_tup[i+1]:\n            count=count+1\n    return count\n    \ntest_tup=tuple([1,2,3,4,5,6,7,8,9,0,0,1])\nprint('The number of elements that are in test_tup before it is: ',count_first_elements(test_tup))\n",
        "num_ids": 119
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for tup in test_tup:\n        if tup < test_tup[0]:\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i < test_tup[0]:\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    numbers = []\n    number = 0\n    while len(numbers) < n:\n        numbers.append(number)\n        number = number + 1\n    print(numbers)\n    return numbers[len(numbers) - 1]\n",
        "num_ids": 60
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (n*(n+1)/2)\n",
        "num_ids": 17
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0: \n        return 0\n    if n <= 2: \n        return 1\n    else: \n        return 1 + is_num_decagonal(n-1)\n",
        "num_ids": 47
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return sum(list(map(lambda x: 1 / (x ** 2), range(1, n + 1))))\n",
        "num_ids": 29
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def num_decagonals(n): \n        '''\n        Calculates nth decagonal number\n        '''\n        return 1 if n == 0 else num_decagonals(n-1) + n\n        \n    return num_decagonals(n)\n",
        "num_ids": 36
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0:\n        return None\n",
        "num_ids": 13
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 + (n - 1) * 5\n",
        "num_ids": 29
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 1\n    for i in range(1, n+1):\n        num *= i\n    return int(num / math.sqrt(2 * n + 1))\n",
        "num_ids": 44
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int((n*(n+1)/2) + 1)\n",
        "num_ids": 19
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return str(n * (n * (n - 1) / 2) + 1)\n",
        "num_ids": 23
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n",
        "num_ids": 39
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            return (True, i)\n",
        "num_ids": 44
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    i = 0\n    found = False\n    while i < len(dlist) and not found:\n        if dlist[i] == item:\n            found = True\n        else:\n            i += 1\n    if found:\n        return True, i\n    return False, -1\n",
        "num_ids": 69
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True,i\n    return False, -1\n",
        "num_ids": 39
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "num_ids": 43
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    \n    found = False\n    pos = 0\n    \n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n            return True, pos\n        else:\n            pos += 1\n        \n    return False, -1\n        \n    \n    \ndef ordered_sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    The order of the array is important.\n    '''\n    \n    found = False\n    pos = 0\n    \n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n            return True, pos\n        elif dlist[pos] > item:\n            return False, -1\n        else:\n            pos += 1\n            \n    return False, -1\n    \n    \n    \ndef binary_search_iterative(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    lo = 0\n    hi = len(dlist) - 1\n    mid = 0\n    found = False\n    \n    while lo <= hi and not found:\n        mid = (hi + lo) // 2\n        if dlist[mid] == item:\n            found = True\n            return True, mid\n        elif dlist[mid] > item:\n            hi = mid - 1\n        else:\n            lo = mid + 1\n            \n    return False, -1\n    \n    \ndef binary_search_recursive(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    \n    if len(dlist) == 0:\n        return False, -1\n    else:\n        if dlist[0] == item:\n            return True, 0\n        elif dlist[0] > item:\n            return binary_search_recursive(dlist[1:], item)\n        else:\n            return binary_search_recursive(dlist[1:], item)\n    \n    \ndef fibonacci_iterative(n):\n    '''\n    Write a function that takes in a positive integer n and returns the nth term of a fibonacci sequence.\n    '''\n    if n <= 0:\n        return\n    \n    elif n == 1:\n        return 0\n    \n    elif n == 2:\n        return 1\n    \n    else:\n        n -= 1\n        return fibonacci_iterative(n) + fibonacci_iterative(n - 1)\n        \n        \ndef fibonacci_recursive(n):\n    '''\n    Write a function that takes in a positive integer n and returns the nth term of a fibonacci sequence.\n    '''\n    if n <= 0:\n        return\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)\n        \n        \ndef find_min(dlist):\n    '''\n    Write a function that takes in an array and returns the minimum element of the array.\n    '''\n    if len(dlist) == 0:\n        return -1\n    elif len(dlist) == 1:\n        return dlist[0]\n    else:\n        return min(dlist[0], find_min(dlist[1:]))\n    \n    \ndef find_max(dlist):\n    '''\n    Write a function that takes in an array and returns the maximum element of the array.\n    '''\n    if len(dlist) == 0:\n        return -1\n    elif len(dlist) == 1:\n        return dlist[0]\n    else:\n        return max(dlist[0], find_max(dlist[1:]))\n    \n    \ndef find_min_index(dlist):\n    '''\n    Write a function that takes in an array and returns the index of the minimum element of the array.\n    '''\n    if len(dlist) == 0:\n        return -1\n    elif len(dlist) == 1:\n        return 0\n    else:\n        return dlist.index(min(dlist))\n    \n    \ndef find_max_index(dlist):\n    '''\n    Write a function that takes in an array and returns the index of the maximum element of the array.\n    '''\n    if len(dlist) == 0:\n        return -1\n    elif len(dlist) == 1:\n        return 0\n    else:\n        return dlist.index(max(dlist))\n    \n    \ndef sort(dlist):\n    '''\n    Write a function that takes in an array and returns a sorted version of the array.\n    '''\n    if len(dlist) == 0:\n        return dlist\n    else:\n        return sorted(dlist)\n    \n    \ndef sort_without_extra_space(dlist):\n    '''\n    Write a function that takes in an array and returns a sorted version of the array.\n    '''\n    if len(dlist) == 0:\n        return dlist\n    else:\n        index = 0\n        while index < len(dlist) - 1:\n            if dlist[index] > dlist[index + 1]:\n                dlist[index], dlist[index + 1] = dlist[index + 1], dlist[index]\n                index -= 1\n            index += 1\n        return dlist\n    \n    \ndef rotate_right(dlist, size):\n    '''\n    Write a function that takes in an array of size n and n-1 integers. The function should rotate the array to the right by one position and return the rotated array.\n    '''\n    if len(dlist) == 0 or size <= 0:\n        return dlist\n    else:\n        rotate_right(dlist[1:], size - 1)\n        return dlist[0] + dlist[1:]\n    \n    \ndef rotate_left(dlist, size):\n    '''\n    Write a function that takes in an array of size n and n-1 integers. The function should rotate the array to the left by one position and return the rotated array.\n    '''\n    if len(dlist) == 0 or size <= 0:\n        return dlist\n    else:\n        return dlist[-1:] + rotate_left(dlist[:-1], size - 1)\n    \n    \ndef find_mean(dlist):\n    '''\n    Write a function that takes in an array of n integer and returns the mean.\n    '''\n    sum = 0\n    n = len(dlist)\n    if n == 0:\n        return 0\n    else:\n        for i in range(n):\n            sum += dlist[i]\n        return sum / n\n    \n    \ndef find_median(dlist):\n    '''\n    Write a function that takes in an array of n integer and returns the median.\n    '''\n    if len(dlist) % 2!= 0:\n        return dlist[int((len(dlist) + 1) / 2 - 1)]\n    else:\n        return (dlist[int((len(dlist) + 1) / 2 - 1)] + dlist[int((len(dlist) + 1) / 2)]) / 2\n    \n    \ndef find_mode(dlist):\n    '''\n    Write a function that takes in an array of n integer and returns the mode.\n    '''\n    count_dict = {}\n    if len(dlist) == 0:\n        return -1\n    else:\n        for i in range(len(dlist)):\n            count_dict[i] = dlist.count(dlist[i])\n        key_list = list(count_dict.keys())\n        value_list = list(count_dict.values())\n        max_value = max(value_list)\n    ",
        "num_ids": 102
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    \n    count = 0\n    found = False\n    while count < len(dlist) and not found:\n        if dlist[count] == item:\n            found = True\n            index = count\n        else:\n            count += 1\n    return found, index\n",
        "num_ids": 64
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    '''\n    Time complexity: \n    Worst case: O(n)\n    Average case: O(1)\n    Best case: O(1)\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0,len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n",
        "num_ids": 41
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n",
        "num_ids": 39
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) < 1:\n        return True\n    return len(test_list) == len(set(test_list))\n",
        "num_ids": 36
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) <= 1:\n        return True\n    if test_list[0] in test_list[1:]:\n        return False\n    return all_unique(test_list[1:])\n",
        "num_ids": 53
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if(len(test_list)==len(set(test_list))):\n        return True\n    else:\n        return False\n    \ndef all_distinct(test_list):\n    '''\n    Write a python function to check if the elements of a given list are distinct or not.\n    '''\n    if(len(test_list)==len(set(test_list))):\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n",
        "num_ids": 20
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_values = []\n    for i in test_list:\n        if i not in unique_values:\n            unique_values.append(i)\n    if len(unique_values) == len(test_list):\n        return True\n    else:\n        return False\n",
        "num_ids": 66
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    \n    if len(test_list) == len(set(test_list)):\n        print('Yes, the given list has unique elements')\n    else:\n        print('No, the given list has duplicate elements')\n    \n    return None\n",
        "num_ids": 59
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list.sort()\n    unique_list = []\n    if len(test_list) > len(set(test_list)):\n        return False\n    else:\n        return True\n    \nprint(all_unique([1,2,3,4,5,6,7,1,2,3,4,5]))\nprint(all_unique([1,2,3,4,5,6,7,1,2,3,4,5,2,3,4,5,6,7,1,2,3,4,5])",
        "num_ids": 134
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)==len(set(test_list)):\n        return True\n    else:\n        return False\nprint(all_unique([\"geeks\", \"geeks\", \"geeks\"]))\n",
        "num_ids": 53
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) <= 0:\n        return False\n    else:\n        test_list.sort()\n        for i in range(len(test_list)):\n            if test_list[i] == test_list[i+1]:\n                return False\n        return True\n",
        "num_ids": 70
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for elem in test_list:\n        if test_list.count(elem) > 1:\n            return False\n    return True\n",
        "num_ids": 35
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub_list = []\n    for i in range(len(nums1)):\n        sub_list.append(nums1[i]-nums2[i])\n    return sub_list\n",
        "num_ids": 49
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    \n    result=[]\n    for i in range(0,len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub = []\n    if len(nums1)>len(nums2):\n        nums1,nums2 = nums2,nums1\n    for i in range(len(nums1)):\n        sub.append(nums1[i]-nums2[i])\n    return sub\n",
        "num_ids": 76
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return list(map(lambda x, y: x-y, nums1, nums2))\n",
        "num_ids": 26
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) > len(nums2):\n        return sub_list(nums2,nums1)\n",
        "num_ids": 33
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return(list(set(nums1)-set(nums2)))\n",
        "num_ids": 20
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) < len(nums2):\n        temp = nums2\n        nums2 = nums1\n        nums1 = temp\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] - nums2[i]\n    return nums1\n",
        "num_ids": 83
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i]-=nums2[i]\n    return nums1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2014
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    l1 = len(nums1)\n    l2 = len(nums2)\n    if l1 <= l2:\n        for i in range(l1):\n            nums1[i] = nums1[i] - nums2[i]\n    else:\n        for i in range(l2):\n            nums1[i] = nums1[i] - nums2[i]\n    return nums1\n",
        "num_ids": 107
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    num = str(n)\n    \n    freq = {}\n    \n    for i in num:\n        freq[i] = num.count(i)\n    \n    for k in freq:\n        if freq[k] > freq[k]:\n            return False\n    \n    return True\n",
        "num_ids": 77
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if isinstance(n, int) == False:\n        raise TypeError('invalid input')\n    n = str(n)\n    return n.count(n[0]) <= n.count(n[0])\n",
        "num_ids": 53
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n <= 0:\n        raise ValueError(\"negative numbers not allowed\")\n    n1 = str(n)\n    length = len(n1)\n    count = dict()\n    for i in range(length):\n        count[n1[i]] = count.get(n1[i], 0) + 1\n    for i in range(length):\n        if count[n1[i]] > i + 1:\n            return False\n    return True\n",
        "num_ids": 108
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    #freq = {}\n    #for i in range(10):\n    #    freq[i] = 0\n    #for i in n:\n    #    freq[i] += 1\n",
        "num_ids": 49
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if type(n)!= int:\n        raise ValueError('Please provide valid integer input')\n    for i in range(10):\n        if n.count(i) > i:\n            return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    # for i in str(n):\n    #     print(i)\n    return all([i <= int(i) for i in str(n)])\n",
        "num_ids": 62
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if type(n) == int: \n        x = str(n)\n        y = list(map(int, x))\n        count = 0\n        for i in y:\n            count = count + i**y.count(i)\n        if count <= n:\n            return True\n        else:\n            return False\n    else:\n        print(\"The input is not an integer\")\n        return False\n",
        "num_ids": 97
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    digits = {}\n    i = 0\n    while n > 0:\n        if n % 10 in digits:\n            digits[n % 10] += 1\n        else:\n            digits[n % 10] = 1\n        n = n // 10\n        i += 1\n    \n    for k,v in digits.items():\n        if v > k:\n            return False\n    return True\n",
        "num_ids": 97
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit = 0\n    freq = 0\n    while n > 0:\n        digit = n%10\n        if freq <= digit:\n            freq = digit\n        n = n//10\n    return freq <= digit\n",
        "num_ids": 55
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    assert(n>=0)\n    l=[]\n    while n>=0:\n        l.append(n%10)\n        n=n//10\n    l.reverse()\n    for i in range(len(l)):\n        if i<0:\n            break\n        l[i]=l[i]**l[i]\n        if sum(l)>=l[i]:\n            return False\n    return True\n",
        "num_ids": 105
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list)==0:\n        return False\n    if element in list:\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element not in list:\n        return False\n    else:\n        return True\n",
        "num_ids": 22
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(item == element for item in list)\n",
        "num_ids": 15
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for x in list:\n        if x == element:\n            print(True)\n            break\n        else:\n            print(False)\n            break\n",
        "num_ids": 38
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    check = False\n    if list == []:\n        check = True\n    else:\n        if element == list[0]:\n            check = True\n        else:\n            check = False\n    return check\n",
        "num_ids": 50
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list == []:\n        return False\n    elif list[0] == element:\n        return True\n    else:\n        return check_element(list[1:],element)\n",
        "num_ids": 46
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    return element == list[0]\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    #print(list)\n    for i in list:\n        if i!= element:\n            return False\n    return True\n",
        "num_ids": 32
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        for i in list:\n            if i!= element:\n                return False\n        return True\n    else:\n        return False\n",
        "num_ids": 40
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(item == element for item in list)\n",
        "num_ids": 15
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return True if re.search(r\"a{2,3}b\", text) else False\n",
        "num_ids": 25
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return True if re.search(r'a{1,2}b', text) else False\n",
        "num_ids": 25
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r\"(ab)*b\"\n    #if re.search(pattern,text):\n    #    print(\"String contains aab and abb\")\n    #else:\n    #    print(\"String does not contain aab and abb\")\n    \n    if re.search(pattern,text):\n        print(\"String contains aab and abb\")\n    else:\n        print(\"String does not contain aab and abb\")\n",
        "num_ids": 102
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r\"^a(b(ba)*)*$\", text):\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text_list = re.findall('a[b]', text)\n    if text_list:\n        return True\n    else:\n        return False\n",
        "num_ids": 39
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return text.find('ab')!= -1\n",
        "num_ids": 15
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if (text.find('ab') == -1) or (text.find('ab') == -1):\n        return False\n    else:\n        return True\n    \ndef text_match_two(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two 'b' characters.\n    '''\n    if (text.find('ab') == -1):\n        return False\n    else:\n        return True\n    \ndef text_match_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three 'b' characters.\n    '''\n    if (text.find('ab') == -1) or (text.find('ab') == -1):\n        return False\n    else:\n        return True\n    \ndef text_match_four(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four 'b' characters.\n    '''\n    if (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1):\n        return False\n    else:\n        return True\n    \ndef text_match_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by five 'b' characters.\n    '''\n    if (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1):\n        return False\n    else:\n        return True\n    \ndef text_match_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by six 'b' characters.\n    '''\n    if (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1):\n        return False\n    else:\n        return True\n    \ndef text_match_seven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by seven 'b' characters.\n    '''\n    if (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1):\n        return False\n    else:\n        return True\n    \ndef text_match_eight(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by eight 'b' characters.\n    '''\n    if (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1):\n        return False\n    else:\n        return True\n    \ndef text_match_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by nine 'b' characters.\n    '''\n    if (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1):\n        return False\n    else:\n        return True\n    \ndef text_match_ten(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by ten 'b' characters.\n    '''\n    if (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1):\n        return False\n    else:\n        return True\n    \ndef text_match_eleven(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by eleven 'b' characters.\n    '''\n    if (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1):\n        return False\n    else:\n        return True\n    \ndef text_match_twelve(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by twelve 'b' characters.\n    '''\n    if (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1):\n        return False\n    else:\n        return True\n    \ndef text_match_thirteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by thirteen 'b' characters.\n    '''\n    if (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1):\n        return False\n    else:\n        return True\n    \ndef text_match_fourteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by fourteen 'b' characters.\n    '''\n    if (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1):\n        return False\n    else:\n        return True\n    \ndef text_match_fifteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by fifteen 'b' characters.\n    '''\n    if (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1):\n        return False\n    else:\n        return True\n    \ndef text_match_sixteen(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by sixteen 'b' characters.\n    '''\n    if (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find('ab') == -1) or (text.find(",
        "num_ids": 57
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = 'ab*b'\n    matches = re.findall(pattern,text)\n    return len(matches) > 0\n",
        "num_ids": 35
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return True if re.search(r'a.*b', text) else False\n    # if re.match(r'a.*?b', text):\n    #     return True\n    # else:\n    #     return False\n",
        "num_ids": 55
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    \n    check = re.findall(r'a.b.b.|ab.b.b.|b.a.b.|b.ab.|aab.|abab.|a.b.b.|ab.b.b.|a.b.b.b|a.b.b.b|aab.|abab.|abab|abab|abab.|a.b.b.|abab.|aabab|ababab|ababab|ababab|ababab|ababab|ababab.|ababab.|ababab.|ababab.b|ababab.b|ababab.b|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababab.b.|ababa",
        "num_ids": 2000
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    for i in range(1,n-k):\n        sum = 0\n        for j in range(k):\n            sum += a[i + j]\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\n",
        "num_ids": 63
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # print a\n    for i in range(1, k+1):\n        a = a*k\n    return max(a)\n",
        "num_ids": 34
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Loop till k elements are added\n    while k!= 0:\n        # Add current element to sum\n        curr_sum = sum(a)\n        # If sum is less than 0, \n        # then make all elements of array negative by removing previous element from sum.\n        if curr_sum < 0: \n            curr_sum = 0\n            for i in range(0, n):\n                curr_sum += a[i]\n                a[i] = -1 * curr_sum\n        # Else if sum is greater than 0, then check if sum is already present in the sum array.\n        elif curr_sum in s:\n            # If yes, then just add k elements.\n            # If not, keep adding k elements.\n            s.add(curr_sum)\n            # After addition, update sum array.\n            for i in range(0, n):\n                curr_sum += a[i]\n                a[i] = -1 * curr_sum\n        k -= 1\n    # Return maximum sum\n    return max(a)\n",
        "num_ids": 253
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    arr = a\n    #arr = a + a\n    #arr = arr + arr\n    n = len(arr)\n    #max_sum = 0\n    #prev = 0\n    #c = 0\n    i = 0\n    j = 0\n    while i < n-k:\n        arr[i] = arr[i] + arr[j]\n        if arr[i] > 0:\n            j += 1\n            if j > i:\n                i = j\n        else:\n            i += 1\n    #print(arr)\n    return arr[n - k]\n",
        "num_ids": 138
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # To find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    # To find the sum of the array itself, we will use the same algorithm as max_sub_array_sum.\n    # To find the repeating number, we need to find the repeating number k times, so we will use the same loop and count how many times we have repeated the repeating number. \n    \n    # Step 1 - Initialize the variables\n    max_sum = a[0]\n    repeating_number = a[0]\n    \n    # Step 2 - Find the maximum sum, and the repeating number\n    for i in range(1, n):\n        if a[i] > max_sum:\n            max_sum = a[i]\n            repeating_number = a[i]\n        elif a[i] == repeating_number:\n            repeating_number = repeating_number + a[i]\n            \n    # Step 3 - Check if repeating_number is not k\n    if repeating_number!= k:\n        # Check if the repeating number is not in the array\n        if max_sum + k not in a:\n            # If max_sum + k is not in the array, then we have to return max_sum + k\n            return max_sum + k\n            \n    # Step 4 - To find the maximum sum of a contiguous array, we will use the same algorithm as max_sub_array_sum.\n    # First, we will sort the array, and then find the maximum sum.\n    \n    a.sort()\n    max_sum = a[0]\n    \n    # Step 5 - Find the maximum sum\n    for i in range(1, n):\n        if a[i] > max_sum:\n            max_sum = a[i]\n            \n    # Step 6 - Check if the maximum sum + k is not in the array\n    if max_sum + k not in a:\n        # If max_sum + k is not in the array, then we have to return max_sum + k\n        return max_sum + k\n        \n    # Step 7 - Check if the maximum sum + k is in the array, and return it\n    return max_sum + k\n    ",
        "num_ids": 514
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    i = 0\n    n_mod = n - k + 1\n    max_sum = 0\n    while i <= n_mod:\n        temp_sum = sum(a[i:i+k])\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n        i += 1\n    return max_sum\n    \n    \nif __name__ == '__main__':\n    \n    a = [-2, -3, 4, -1, -2, 1, 5, -3]\n    k = 3\n    print(max_sub_array_sum_repeated(a, len(a), k))\n",
        "num_ids": 151
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    #possible to use max_sum_repeated but not easy to implement\n    for i in range(1,k):\n        a.insert(0,0)\n    #print(a)\n    #print(k)\n    #print(n)\n    n_minus_k = n-k\n    if a[n_minus_k] >= k:\n        print('-1')\n        return \n    arr = []\n    for i in range(n_minus_k):\n        arr.append(a[i])\n    for i in range(n_minus_k):\n        if arr[i] > a[n_minus_k+i]:\n            arr[i] = a[n_minus_k+i]\n    if a[n] >= k:\n        arr.append(a[n])\n    #print(arr)\n    arr.sort(reverse = True)\n    print(arr[0])\n",
        "num_ids": 219
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k<0:\n        print(\"Invalid input\")\n    \n    max_sum = 0\n    for i in range(n-k+1):\n        sum = 0\n        for j in range(i,i+k):\n            sum+=a[j]\n        if max_sum < sum:\n            max_sum = sum\n    return max_sum\n",
        "num_ids": 86
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    k_sum = 0\n    for i in range(0, n-k+1): \n        k_sum = 0\n        for j in range(i, i+k): \n            k_sum += a[j] \n        if k_sum > max_sum: \n            max_sum = k_sum \n    return max_sum \n    \nif __name__ == '__main__': \n    a = [-2, -3, 4, -1, -2, 1, 5, -3] \n    n = len(a) \n    k = 2\n    print(max_sub_array_sum_repeated(a, n, k)) \n",
        "num_ids": 169
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    max_sub_array = None\n    max_i = 0\n    max_j = 0\n    current_sum = 0\n    for i in range(0, n):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_i = i\n    current_sum = 0\n    for i in range(n-1, -1, -1):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_j = i\n    return a[max_i:max_j+1]\n",
        "num_ids": 167
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0,n):\n        if (i%2 == 0):\n            sum += i*i\n    return sum\n    \n    \ndef count_even(n):\n    '''\n    Write a python function takes in an integer n and returns the count of even numbers between 1 to n.\n    '''\n    count = 0\n    for i in range(1,n):\n        if (i%2 == 0):\n            count += 1\n    return count\n    \n    \ndef sum_of_square(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i*i\n    return sum\n    \n    \ndef sum_of_square_divisors(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of square of divisors of n.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if (n%i == 0):\n            sum += i\n    return sum*sum\n    \n    \ndef prime_factors(n):\n    '''\n    Write a python function takes in an integer n and returns the prime factors of n.\n    '''\n    factors = []\n    for i in range(2,n):\n        if (n%i == 0):\n            factors.append(i)\n    return factors\n    \n    \ndef prime_factors_2(n):\n    '''\n    Write a python function takes in an integer n and returns the prime factors of n.\n    '''\n    factors = []\n    for i in range(2,n):\n        if (n%i!= 0):\n            continue\n        else:\n            while (n%i == 0):\n                factors.append(i)\n                n = n//i\n    return factors\n    \n    \ndef prime_factors_3(n):\n    '''\n    Write a python function takes in an integer n and returns the prime factors of n.\n    '''\n    factors = []\n    for i in range(2,n):\n        if (n%i!= 0):\n            continue\n        else:\n            while (n%i == 0):\n                factors.append(i)\n                n = n//i\n    return factors\n    \n    \ndef prime_factors_4(n):\n    '''\n    Write a python function takes in an integer n and returns the prime factors of n.\n    '''\n    factors = []\n    for i in range(2,n):\n        if (n%i!= 0):\n            continue\n        else:\n            while (n%i == 0):\n                factors.append(i)\n                n = n//i\n    return factors\n    \n    \ndef prime_factors_5(n):\n    '''\n    Write a python function takes in an integer n and returns the prime factors of n.\n    '''\n    factors = []\n    for i in range(2,n):\n        if (n%i!= 0):\n            continue\n        else:\n            while (n%i == 0):\n                factors.append(i)\n                n = n//i\n    return factors\n    \n    \ndef prime_factors_6(n):\n    '''\n    Write a python function takes in an integer n and returns the prime factors of n.\n    '''\n    factors = []\n    for i in range(2,n):\n        if (n%i!= 0):\n            continue\n        else:\n            while (n%i == 0):\n                factors.append(i)\n                n = n//i\n    return factors\n    \n    \ndef prime_factors_7(n):\n    '''\n    Write a python function takes in an integer n and returns the prime factors of n.\n    '''\n    factors = []\n    for i in range(2,n):\n        if (n%i!= 0):\n            continue\n        else:\n            while (n%i == 0):\n                factors.append(i)\n                n = n//i\n    return factors\n    \n    \ndef prime_factors_8(n):\n    '''\n    Write a python function takes in an integer n and returns the prime factors of n.\n    '''\n    factors = []\n    for i in range(2,n):\n        if (n%i!= 0):\n            continue\n        else:\n            while (n%i == 0):\n                factors.append(i)\n                n = n//i\n    return factors\n    \n    \ndef prime_factors_9(n):\n    '''\n    Write a python function takes in an integer n and returns the prime factors of n.\n    '''\n    factors = []\n    for i in range(2,n):\n        if (n%i!= 0):\n            continue\n        else:\n            while (n%i == 0):\n                factors.append(i)\n                n = n//i\n    return factors\n    \n    \ndef prime_factors_10(n):\n    '''\n    Write a python function takes in an integer n and returns the prime factors of n.\n    '''\n    factors = []\n    for i in range(2,n):\n        if (n%i!= 0):\n            continue\n        else:\n            while (n%i == 0):\n                factors.append(i)\n                n = n//i\n    return factors\n    \n    \ndef prime_factors_11(n):\n    '''\n    Write a python function takes in an integer n and returns the prime factors of n.\n    '''\n    factors = []\n    for i in range(2,n):\n        if (n%i!= 0):\n            continue\n        else:\n            while (n%i == 0):\n                factors.append(i)\n                n = n//i\n    return factors\n    \n    \ndef prime_factors_12(n):\n    '''\n    Write a python function takes in an integer n and returns the prime factors of n.\n    '''\n    factors = []\n    for i in range(2,n):\n        if (n%i!= 0):\n            continue\n        else:\n            while (n%i == 0):\n                factors.append(i)\n                n = n//i\n    return factors\n    \n    \ndef prime_factors_13(n):\n    '''\n    Write a python function takes in an integer n and returns the prime factors of n.\n    '''\n    factors = []\n    for i in range(2,n):\n        if (n%i!= 0):\n            continue\n        else:\n            while (n%i == 0):\n                factors.append(i)\n                n = n//i\n    return factors\n    \n    \ndef prime_factors_14(n):\n    '''\n    Write a python function takes in an integer n and returns the prime factors of n.\n    '''\n    factors = []\n    for i in range(2,n):\n        if (n%i!= 0):\n            continue\n        else:\n            while (n%i == 0):\n                factors.append(i)\n                n = n//i\n    return factors\n    \n    \ndef prime_factors_15(n):\n    '''\n    Write a python function takes in an integer n and returns the prime factors of n.\n    '''\n    factors = []\n    for i in range(2,n):\n        if (n%i!= 0):\n            continue\n        else:\n            while (n%i == 0):\n                factors.append(i)\n                n = n//i\n    return factors\n    \n    \ndef prime_factors_16(n):\n    '''\n    Write a python function takes in an integer n and returns the prime factors of n.\n    '''\n    factors = []\n    for i in range(2,n):\n        if (n%i!= 0):\n            continue\n        else:\n            while (n%i == 0):\n                factors.append(i)\n                n = n//i\n    return factors\n    \n    \ndef prime_factors_17(n):\n    '''\n    Write a python function takes in an integer n and returns the prime factors of n.\n    '''\n    factors = []\n    for i in range(2,n):\n        i",
        "num_ids": 21
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    num=0\n    result = 0\n    for i in range(n):\n        if i%2==0:\n            num += i**2\n    result = num\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(n):\n        if(i%2==0):\n            sum=sum+i*i\n    print(\"The sum of squares of even natural numbers is \",sum)\n",
        "num_ids": 51
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2 == 0:\n            sum += i**2\n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([i*i for i in range(0,n,2)])\n",
        "num_ids": 22
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0;\n    for i in range(n):\n        if(i%2==0):\n            sum = sum + (i**2);\n    return sum;\n",
        "num_ids": 43
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if(i % 2 == 0):\n            sum += i**2\n    return sum\n    ",
        "num_ids": 42
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_square = 0\n    for i in range(0,n):\n        if i%2 == 0:\n            sum_of_square = sum_of_square + i*i\n    return sum_of_square\n",
        "num_ids": 56
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i*i\n        i += 1\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2 == 0:\n            sum += i**2\n    return sum\nprint(square_Sum(5))\n",
        "num_ids": 45
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = list1[0]\n    for element in list1:\n        if len(element) > len(max_list):\n            max_list = element\n    return max_list\n",
        "num_ids": 48
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max(map(len, list1))\n",
        "num_ids": 14
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for l in list1:\n        if len(l) > max_len:\n            max_len = len(l)\n    return max_len\n",
        "num_ids": 45
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length=0\n    for i in range(len(list1)):\n        if max_length<len(list1[i]):\n            max_length=len(list1[i])\n    return max_length\n",
        "num_ids": 56
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    l = list1\n    max_length = 0\n    for x in l:\n        if max_length < len(x):\n            max_length = len(x)\n    return max_length\n",
        "num_ids": 49
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len=0\n    for i in range(len(list1)):\n        if len(list1[i])>max_len:\n            max_len=len(list1[i])\n    return max_len\n",
        "num_ids": 56
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for sub_list in list1:\n        if len(sub_list) > max_len:\n            max_len = len(sub_list)\n    return max_len\n",
        "num_ids": 51
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxlen = 0\n    for i in list1:\n        if len(i) > maxlen:\n            maxlen = len(i)\n    return maxlen\n",
        "num_ids": 41
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    \n    max_length = 0\n    max_length_item = None\n    \n    for item in list1:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_length_item = item\n    return max_length_item\n",
        "num_ids": 69
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = len(list1[0])\n    for i in list1:\n        if len(i) > max:\n            max = len(i)\n    return max\n",
        "num_ids": 43
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 0\n    if k == 0:\n        return 1\n    \n    if k == 1:\n        return n\n    \n    count = 0\n    for i in range(n):\n        if (i == 0 or i == n-1) and k == 2:\n            count += 1\n        elif (i == 0 or i == n-1) and k > 2:\n            count += count_no_of_ways(n-1, k-2)\n        else:\n            count += count_no_of_ways(i, k-1) + count_no_of_ways(i+1, k-1)\n    \n    return count\n",
        "num_ids": 162
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0]*(k+1) for _ in range(n+1)]\n",
        "num_ids": 24
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # number of ways to paint\n    res = 0\n    # color mapping\n    colors = {}\n",
        "num_ids": 26
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for i in range(k+1)] for j in range(n+1)]\n    for i in range(k+1):\n        dp[0][i] = 1\n",
        "num_ids": 47
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Base case\n    if k == 1:\n        return n\n",
        "num_ids": 18
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = {}\n    return count_ways(n, k, dp)\n",
        "num_ids": 21
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if(k==2):\n        if(n==0):\n            return 1\n        else:\n            return 0\n    if(k==1):\n        if(n==0):\n            return 0\n        else:\n            return 1\n    if(n==1):\n        return 0\n    return (count_no_of_ways(n-1, k)+count_no_of_ways(n-2, k))",
        "num_ids": 101
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # DP approach\n    dp = [[0 for i in range(k + 1)] for j in range(n + 1)] \n    for i in range(1, n + 1): \n        for j in range(1, k + 1): \n            if j == 1: \n                dp[i][j] = 1\n            elif j == 2: \n                dp[i][j] = i\n            else: \n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j] \n    return dp[n][k] \n",
        "num_ids": 144
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 2:\n        return k \n    if n == 1:\n        return k*(k-1)\n    else:\n        return count_no_of_ways(n-1,k) + count_no_of_ways(n-1,k-1) \n    \ncount_no_of_ways(4,4)\n",
        "num_ids": 85
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def dp(n, k, index, ans): \n        if index == 0: \n            return 1\n        if index == 1: \n            return 1 if k == 0 or k == 1 else 0\n        if n == 1 and k == 1: \n            return 1\n        if n == 1 or k == 1: \n            return 0\n        if k == 0 or k == 1: \n            return 0\n        if k == 2: \n            if n - 2 == index: \n                return 1\n            else: \n                return 0\n        if k == 3: \n            if n - 3 == index: \n                return 1\n            else: \n                return 0\n        if k == 4: \n            if n - 4 == index: \n                return 1\n            else: \n                return 0\n        return dp(n, k, index - 1, ans) + dp(n, k, index - 2, ans) + dp(n, k, index - 3, ans) + dp(n, k, index - 4, ans)\n    return dp(n, k, n - 1, 0)\n",
        "num_ids": 266
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n >= 0 and m >= 0:\n        q = int(n/m)\n        return q\n    elif n <= 0 and m <= 0:\n        q = int(m/n)\n        return q\n    else:\n        print(\"Invalid\")\n",
        "num_ids": 63
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = m//n \n    return quotient \n    \ndef factor(num): \n    '''\n    Write a python function to find the factors of a number.\n    '''\n    factors = [] \n    for i in range(1,num+1): \n        if (num%i==0): \n            factors.append(i) \n    return factors \n",
        "num_ids": 49
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return False\n    else:\n        return (n//m)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2011
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    print(n/m)\n",
        "num_ids": 10
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0:\n        return 0\n    if m==0:\n        return 0\n    return int(n/m)\n",
        "num_ids": 33
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n",
        "num_ids": 10
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m\n    return quotient\n",
        "num_ids": 16
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n<m:\n        return n//m\n    else:\n        return m//n",
        "num_ids": 24
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    from math import floor\n    return floor(n/m)\n",
        "num_ids": 17
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n < m:\n        print(\"invalid input\")\n    else:\n        while(True):\n            if n%m == 0:\n                print(\"quotient is : \",n//m)\n                break\n            else:\n                n += 1\n    ",
        "num_ids": 63
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w * h\n",
        "num_ids": 8
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side = math.sqrt(w**2 + h**2)\n    return side\n",
        "num_ids": 23
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt((w**2)+(h**2))\n",
        "num_ids": 19
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    w_sqr = w**2\n    h_sqr = h**2\n    temp = (w_sqr + h_sqr)**0.5\n    return (temp**2 - w_sqr) / 2\n    \n    \ndef rightanglediag(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    w_sqr = w**2\n    h_sqr = h**2\n    temp = (w_sqr + h_sqr)**0.5\n    return (temp**2 - w_sqr) / 2\n    \n    \ndef no_of_rotations(x,y,w,h):\n    '''\n    Write a function to find the number of rotations needed to achieve a right angled triangle.\n    '''\n    a = 0\n    if w > h:\n        b = x\n    else:\n        b = y\n    temp = math.sqrt((x*x) + (y*y))\n    return (temp * (h**2 - w**2) - a*b) / 2\n    \ndef rec_triangle(x,y,w,h,t):\n    '''\n    Write a function to find the smallest possible angle.\n    '''\n    if w > h:\n        a = x\n    else:\n        a = y\n    b = math.sqrt((x*x) + (y*y))\n    c = otherside_rightangle(w,h)\n    d = math.sqrt((a*a) + (c*c))\n    return math.acos(d/a)\n    \ndef other_side_rec_triangle(x,y,w,h,t):\n    '''\n    Write a function to find the smallest possible angle.\n    '''\n    if w > h:\n        a = x\n    else:\n        a = y\n    b = math.sqrt((x*x) + (y*y))\n    c = otherside_rightangle(w,h)\n    d = math.sqrt((a*a) + (c*c))\n    return math.acos(d/a)\n    \ndef smallest_rec_triangle(x,y,w,h,t):\n    '''\n    Write a function to find the smallest possible angle.\n    '''\n    if w > h:\n        a = x\n    else:\n        a = y\n    b = math.sqrt((x*x) + (y*y))\n    c = otherside_rightangle(w,h)\n    d = math.sqrt((a*a) + (c*c))\n    return math.acos(d/a)\n    \ndef smallest_other_side_rec_triangle(x,y,w,h,t):\n    '''\n    Write a function to find the smallest possible angle.\n    '''\n    if w > h:\n        a = x\n    else:\n        a = y\n    b = math.sqrt((x*x) + (y*y))\n    c = otherside_rightangle(w,h)\n    d = math.sqrt((a*a) + (c*c))\n    return math.acos(d/a)\n    \ndef main():\n    '''\n    Write a function which is passed three parameters: x, y, and w. It returns two values:\n    a and b. a and b will be the smallest possible angles.\n    '''\n    x = int(input(\"Enter the length of the first side: \"))\n    y = int(input(\"Enter the length of the second side: \"))\n    w = int(input(\"Enter the length of the third side: \"))\n    \n    if w > h:\n        a = x\n    else:\n        a = y\n    b = math.sqrt((x*x) + (y*y))\n    c = otherside_rightangle(w,h)\n    d = math.sqrt((a*a) + (c*c))\n    \n    if b == d:\n        print(\"Right angle\")\n    else:\n        print(\"Not a right angle\")\n    print(a)\n    print(b)\n    print(c)\n    print(d)\n    \n    print(no_of_rotations(x,y,w,h))\n    print(rec_triangle(x,y,w,h,t))\n    print(other_side_rec_triangle(x,y,w,h,t))\n    print(smallest_rec_triangle(x,y,w,h,t))\n    print(smallest_other_side_rec_triangle(x,y,w,h,t))\n    \n    \n    \n    \n    \nif __name__ == \"__main__\":\n    main()",
        "num_ids": 319
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    x1, y1 = 0, h\n    x2, y2 = w, 0\n    x3, y3 = w, h\n    slope = math.atan2(y3-y2, x3-x2)\n    print(slope)\n    x1_others = (y3**2 - y2**2 - x3**2)/(2*y2*x3)\n    y1_others = (-x1**2 - x3**2)/(2*y3)\n    x2_others = (y2**2 - y1**2 - x1**2)/(2*y1*x1)\n    y2_others = (-x2**2 - x1**2)/(2*y1)\n    x3_others = (y3**2 - y2**2 - x2**2)/(2*y2*x2)\n    y3_others = (-x3**2 - x2**2)/(2*y2)\n    print(x1_others, y1_others, x2_others, y2_others, x3_others, y3_others)\n    side_1 = x1_others + y1_others\n    side_2 = x2_others + y2_others\n    side_3 = x3_others + y3_others\n    if side_1**2 == side_2**2 + side_3**2:\n        return side_1\n    if side_2**2 == side_1**2 + side_3**2:\n        return side_2\n    if side_3**2 == side_1**2 + side_2**2:\n        return side_3\n    \ndef sorted_list(list_in):\n    list_out = []\n    list_in.sort()\n    for item in list_in:\n        list_out.append(item)\n    return list_out\n",
        "num_ids": 462
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if(h**2 - w**2 < 0):\n        return \"No Triangle!\"\n    return math.sqrt(h**2 - w**2)\ndef otherside_rectangle(w,h):\n    '''\n    Write a function to find the third side of a rectangle.\n    '''\n    if(h>w):\n        return \"No Triangle!\"\n    return h-w\ndef otherside_square(s):\n    '''\n    Write a function to find the third side of a square.\n    '''\n    return math.sqrt(s)\ndef otherside_hexagon(r):\n    '''\n    Write a function to find the third side of a hexagon.\n    '''\n    return r*(3**0.5)\ndef otherside_circle(r):\n    '''\n    Write a function to find the third side of a circle.\n    '''\n    return r*2\ndef otherside_triangle(w,h):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    if(h**2 - w**2 < 0):\n        return \"No Triangle!\"\n    return (h**2 + w**2)**0.5\ndef otherside_parallelogram(w,h):\n    '''\n    Write a function to find the third side of a parallelogram.\n    '''\n    if(w**2 == h**2):\n        return w\n    if(w**2 > h**2):\n        return h\n    return w\ndef otherside_obtuse_triangle(w,h):\n    '''\n    Write a function to find the third side of an obtuse triangle.\n    '''\n    if(h**2 - w**2 < 0):\n        return \"No Triangle!\"\n    return (2*(w**2*h**2)**0.5)\ndef otherside_acute_triangle(w,h):\n    '''\n    Write a function to find the third side of an acute triangle.\n    '''\n    if(h**2 - w**2 < 0):\n        return \"No Triangle!\"\n    return (h**2 - w**2)**0.5\ndef otherside_square_triangle(s,w,h):\n    '''\n    Write a function to find the third side of a square triangle.\n    '''\n    if(h**2 - w**2 < 0):\n        return \"No Triangle!\"\n    return math.sqrt(h**2 - w**2)\ndef otherside_square_parallelogram(s,w,h):\n    '''\n    Write a function to find the third side of a square parallelogram.\n    '''\n    if(h**2 == w**2):\n        return w\n    if(h**2 > w**2):\n        return h\n    return w\ndef otherside_square_obtuse_triangle(s,w,h):\n    '''\n    Write a function to find the third side of a square obtuse triangle.\n    '''\n    if(h**2 - w**2 < 0):\n        return \"No Triangle!\"\n    return math.sqrt(2*(h**2 - w**2)**0.5)\ndef otherside_square_acute_triangle(s,w,h):\n    '''\n    Write a function to find the third side of a square acute triangle.\n    '''\n    if(h**2 - w**2 < 0):\n        return \"No Triangle!\"\n    return math.sqrt(2*(w**2*h**2)**0.5)\ndef otherside_square_rectangle(s,w,h):\n    '''\n    Write a function to find the third side of a square rectangle.\n    '''\n    if(h**2 == w**2):\n        return w\n    if(h**2 > w**2):\n        return h\n    return w\ndef otherside_square_hexagon(s,w,h):\n    '''\n    Write a function to find the third side of a square hexagon.\n    '''\n    if(h**2 - w**2 < 0):\n        return \"No Triangle!\"\n    return math.sqrt(2*(h**2 - w**2)**0.5)\ndef otherside_square_circle(s,r):\n    '''\n    Write a function to find the third side of a square circle.\n    '''\n    if(r**2 == s**2):\n        return r\n    if(r**2 > s**2):\n        return r\n    return s\ndef otherside_square_triangle(w,h):\n    '''\n    Write a function to find the third side of a square triangle.\n    '''\n    if(h**2 - w**2 < 0):\n        return \"No Triangle!\"\n    return math.sqrt(h**2 - w**2)\ndef otherside_square_parallelogram(w,h):\n    '''\n    Write a function to find the third side of a square parallelogram.\n    '''\n    if(h**2 == w**2):\n        return w\n    if(h**2 > w**2):\n        return h\n    return w\ndef otherside_square_obtuse_triangle(w,h):\n    '''\n    Write a function to find the third side of a square obtuse triangle.\n    '''\n    if(h**2 - w**2 < 0):\n        return \"No Triangle!\"\n    return math.sqrt(2*(h**2 - w**2)**0.5)\ndef otherside_square_acute_triangle(w,h):\n    '''\n    Write a function to find the third side of a square acute triangle.\n    '''\n    if(h**2 - w**2 < 0):\n        return \"No Triangle!\"\n    return math.sqrt(2*(w**2*h**2)**0.5)\ndef otherside_square_rectangle(s,w,h):\n    '''\n    Write a function to find the third side of a square rectangle.\n    '''\n    if(h**2 == w**2):\n        return w\n    if(h**2 > w**2):\n        return h\n    return w\ndef otherside_square_hexagon(s,w,h):\n    '''\n    Write a function to find the third side of a square hexagon.\n    '''\n    if(h**2 - w**2 < 0):\n        return \"No Triangle!\"\n    return math.sqrt(2*(h**2 - w**2)**0.5)\ndef otherside_square_circle(s,r):\n    '''\n    Write a function to find the third side of a square circle.\n    '''\n    if(r**2 == s**2):\n        return r\n    if(r**2 > s**2):\n        return r\n    return s\ndef otherside_square_triangle(w,h):\n    '''\n    Write a function to find the third side of a square triangle.\n    '''\n    if(h**2 - w**2 < 0):\n        return \"No Triangle!\"\n    return math.sqrt(h**2 - w**2)\ndef otherside_square_parallelogram(w,h):\n    '''\n    Write a function to find the third side of a square parallelogram.\n    '''\n    if(h**2 == w**2):\n        return w\n    if(h**2 > w**2):\n        return h\n    return w\ndef otherside_square_obtuse_triangle(w,h):\n    '''\n    Write a function to find the third side of a square obtuse triangle.\n    '''\n    if(h**2 - w**2 < 0):\n        return \"No Triangle!\"\n    return math.sqrt(2*(h**2 - w**2)**0.5)\ndef otherside_square_acute_triangle(w,h):\n    '''\n    Write a function to find the third side of a square acute triangle.\n    '''\n    if(h**2 - w**2 < 0):\n        return \"No Triangle!\"\n    return math.sqrt(2*(w**2*h**2)**0.5)\ndef otherside_square_rectangle(s,w,h):\n    '''\n    Write a function to find the third side of a square rectangle.\n    '''\n    if(h**2 =",
        "num_ids": 9
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return h*math.sin(w/h)\ndef otherside_rectangle(l,w,h):\n    '''\n    Write a function to find the third side of a rectangle.\n    '''\n    return l*w\ndef otherside_triangle(a,h):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    return a/h\ndef otherside_square(a,l):\n    '''\n    Write a function to find the third side of a square.\n    '''\n    return a/l\ndef otherside_parallelogram(l,w,h):\n    '''\n    Write a function to find the third side of a parallelogram.\n    '''\n    return l*w\ndef otherside_circle(r):\n    '''\n    Write a function to find the third side of a circle.\n    '''\n    return math.pi*r**2\ndef otherside_trapezoid(h,w,l):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (h+w)*l\ndef otherside_trapezoid_2(h,l,w):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (h+w)*l\ndef otherside_trapezoid_3(l,w,h):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (l+w)*h\ndef otherside_trapezoid_4(l,h,w):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (l+w)*h\ndef otherside_trapezoid_5(w,l,h):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (w+l)*h\ndef otherside_trapezoid_6(w,h,l):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (w+l)*h\ndef otherside_trapezoid_7(l,h,w):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (l+w)*h\ndef otherside_trapezoid_8(l,w,h):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (l+w)*h\ndef otherside_trapezoid_9(h,w,l):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (h+w)*l\ndef otherside_trapezoid_10(h,l,w):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (h+w)*l\ndef otherside_trapezoid_11(w,h,l):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (w+l)*h\ndef otherside_trapezoid_12(w,l,h):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (w+l)*h\ndef otherside_trapezoid_13(l,h,w):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (l+w)*h\ndef otherside_trapezoid_14(l,w,h):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (l+w)*h\ndef otherside_trapezoid_15(h,w,l):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (h+w)*l\ndef otherside_trapezoid_16(h,l,w):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (h+w)*l\ndef otherside_trapezoid_17(w,l,h):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (w+l)*h\ndef otherside_trapezoid_18(w,h,l):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (w+l)*h\ndef otherside_trapezoid_19(l,h,w):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (l+w)*h\ndef otherside_trapezoid_20(l,w,h):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (l+w)*h\ndef otherside_trapezoid_21(h,w,l):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (h+w)*l\ndef otherside_trapezoid_22(h,l,w):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (h+w)*l\ndef otherside_trapezoid_23(w,l,h):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (w+l)*h\ndef otherside_trapezoid_24(w,h,l):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (w+l)*h\ndef otherside_trapezoid_25(l,w,h):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (l+w)*h\ndef otherside_trapezoid_26(l,h,w):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (l+w)*h\ndef otherside_trapezoid_27(w,h,l):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (w+l)*h\ndef otherside_trapezoid_28(w,l,h):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (w+l)*h\ndef otherside_trapezoid_29(h,w,l):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (h+w)*l\ndef otherside_trapezoid_30(h,l,w):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (h+w)*l\ndef otherside_trapezoid_31(w,l,h):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (w+l)*h\ndef otherside_trapezoid_32(w,h,l):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (w+l)*h\ndef otherside_trapezoid_33(l,h,w):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (l+w)*h\ndef otherside_trapezoid_34(l,w,h):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (l+w)*h\ndef otherside_trapezoid_35(h,w,l):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''\n    return (h+w)*l\ndef otherside_trapezoid_36(h,l,w):\n    '''\n    Write a function to find the third side of a trapezoid.\n    '''",
        "num_ids": 1
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (math.sqrt(w**2+h**2)-w)/2\n",
        "num_ids": 22
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w*h > 0:\n        return math.sqrt((w**2)+(h**2)) - w\n    else:\n        return math.sqrt((w**2)+(h**2)) - h\n",
        "num_ids": 53
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    S = w*h/2\n    return S\nprint(otherside_rightangle(5,9))\n",
        "num_ids": 28
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for num in listval:\n        if num > max_num:\n            max_num = num\n    return max_num\n",
        "num_ids": 43
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_v=None\n    for i in listval:\n        if max_v is None:\n            max_v=i\n        elif i>max_v:\n            max_v=i\n    return max_v\n",
        "num_ids": 56
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_number = 0\n    for i in range(len(listval)):\n        if max_number < listval[i]:\n            max_number = listval[i]\n    return max_number\n",
        "num_ids": 51
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 0\n",
        "num_ids": 17
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    cur_max = listval[0]\n    for val in listval:\n        if val > cur_max:\n            cur_max = val\n    return cur_max\n",
        "num_ids": 58
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = 0\n    for i in range(len(listval)):\n        if listval[i] > max_value:\n            max_value = listval[i]\n    return max_value\n    \nmax_val([1,2,3,4,5,6,6,6,6,6,6,6])\n",
        "num_ids": 83
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    m = -99\n    for i in listval:\n        if i > m:\n            m = i\n    return m\n",
        "num_ids": 32
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for i in listval:\n        if i > max_num:\n            max_num = i\n    return max_num\n    \nif __name__ == '__main__':\n    listval = [1,2,3,4,5,6,7,8,9,10]\n    print(f'The maximum value in the list is : {max_val(listval)}')\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2015
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for i in listval:\n        if i > max_value:\n            max_value = i\n    return max_value\n    \n",
        "num_ids": 45
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val\n",
        "num_ids": 58
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1,number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "num_ids": 48
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divs = []\n    for i in range(1, int(number**0.5) + 1):\n        if number % i == 0:\n            divs.append(i)\n            divs.append(number//i)\n    return sum(divs)\n",
        "num_ids": 65
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "num_ids": 48
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = 1\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors += i\n    return divisors\n",
        "num_ids": 44
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    \n    divisors = []\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.append(i)\n",
        "num_ids": 41
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number%i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "num_ids": 50
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_divisor = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum_divisor += i\n    return sum_divisor\n",
        "num_ids": 48
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = 0\n    for divisor in range(1, number):\n        if number % divisor == 0:\n            divisors += divisor\n    return divisors\n",
        "num_ids": 48
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    import math\n    \n    divisors = []\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.append(i)\n    sum_div = 0\n    for x in divisors:\n        sum_div += x\n    return sum_div\n    \n    \n    \n    \ndef sum_div2(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    import math\n    \n    divisors = []\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n    \n    \n    \n    \ndef sum_div3(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    import math\n    \n    if number % 2 == 0:\n        number += 1\n    divisors = []\n    for i in range(1, math.ceil(number/2)):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n    \n    \n    \n    \ndef sum_div4(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    import math\n    \n    number = int(number)\n    if number % 2 == 0:\n        number += 1\n    divisors = []\n    for i in range(1, math.ceil(number/2)):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n    \n    \n    \n    \n    \ndef sum_div5(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    import math\n    \n    number = int(number)\n    if number % 2 == 0:\n        number += 1\n    divisors = []\n    for i in range(1, math.ceil(number/2)):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n    \n    \n    \n    \n    \ndef sum_div6(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    import math\n    \n    number = int(number)\n    if number % 2 == 0:\n        number += 1\n    divisors = []\n    for i in range(1, math.ceil(number/2)):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n    \n    \n    \n    \n    \ndef sum_div7(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    import math\n    \n    number = int(number)\n    if number % 2 == 0:\n        number += 1\n    divisors = []\n    for i in range(1, math.ceil(number/2)):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n    \n    \n    \n    \n    \ndef sum_div8(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    import math\n    \n    number = int(number)\n    if number % 2 == 0:\n        number += 1\n    divisors = []\n    for i in range(1, math.ceil(number/2)):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n    \n    \n    \n    \n    \ndef sum_div9(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    import math\n    \n    number = int(number)\n    if number % 2 == 0:\n        number += 1\n    divisors = []\n    for i in range(1, math.ceil(number/2)):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n    \n    \n    \n    \n    \ndef sum_div10(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    import math\n    \n    number = int(number)\n    if number % 2 == 0:\n        number += 1\n    divisors = []\n    for i in range(1, math.ceil(number/2)):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n    \n    \n    \n    \n    \ndef sum_div11(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    import math\n    \n    number = int(number)\n    if number % 2 == 0:\n        number += 1\n    divisors = []\n    for i in range(1, math.ceil(number/2)):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n    \n    \n    \n    \n    \ndef sum_div12(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    import math\n    \n    number = int(number)\n    if number % 2 == 0:\n        number += 1\n    divisors = []\n    for i in range(1, math.ceil(number/2)):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n    \n    \n    \n    \n    \ndef sum_div13(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    import math\n    \n    number = int(number)\n    if number % 2 == 0:\n        number += 1\n    divisors = []\n    for i in range(1, math.ceil(number/2)):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n    \n    \n    \n    \n    \ndef sum_div14(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    import math\n    \n    number = int(number)\n    if number % 2 == 0:\n        number += 1\n    divisors = []\n    for i in range(1, math.ceil(number/2)):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n    \n    \n    \n    \n    \ndef sum_div15(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    import math\n    \n    number = int(number)\n    if number % 2 == 0:\n        number += 1\n    divisors = []\n    for i in range(1, math.ceil(number/2)):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n    \n    \n    \n    \n    \ndef sum_div16(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    import math\n    \n    number = int(number)\n    if number % 2 == 0:\n        number += 1\n    divisors = []\n    for i in range(1, math.ceil(number/2)):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n    \n    \n    \n    \n    \ndef sum_div17(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    import math\n    \n    number = int(number)\n    if number % 2 == 0:\n        number += 1\n    divisors = []\n",
        "num_ids": 37
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                count+=1\n    return count\n    \ndef get_Inv_Count_Optimized(arr): \n    '''\n    Write a python function to count inversions in an array using optimized\n    sorting algorithm.\n    '''\n    i,j = 0, len(arr)-1\n    count = 0\n    while i<j:\n        if arr[i] > arr[j]:\n            count+=1\n            j-=1\n        else:\n            i+=1\n    return count\n    \nif __name__ == \"__main__\":\n    arr = list(map(int,input().split()))\n    print(get_Inv_Count_Optimized(arr))\n    \n'''\nOutput:\n5 4 3 2 1\n'''",
        "num_ids": 1
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(0,len(arr)-1): \n        for j in range(i+1, len(arr)): \n            if arr[i] > arr[j]: \n                count += 1\n    print(count)\n    return count\n",
        "num_ids": 68
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    arr = sorted(arr)\n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            if arr[i] > arr[j]: \n                inv_count += 1\n    return inv_count\n",
        "num_ids": 73
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def sort_array(arr):\n        if len(arr) == 1: return arr\n        else:\n            arr1 = sort_array(arr[:len(arr)//2])\n            arr2 = sort_array(arr[len(arr)//2:])\n            return merge(arr1,arr2)\n    def merge(arr1,arr2):\n        arr = []\n        i = j = 0\n        while i<len(arr1) and j<len(arr2):\n            if arr1[i] <= arr2[j]:\n                arr.append(arr1[i])\n                i += 1\n            else:\n                arr.append(arr2[j])\n                j += 1\n        arr += arr1[i:] + arr2[j:]\n        return arr\n    if arr == []: return 0\n    return sort_array(arr)\n",
        "num_ids": 204
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def merge(arr, l, m, r):\n        n1 = m - l + 1\n        n2 = r - m\n        L = [0] * (n1)\n        R = [0] * (n2)\n        for i in range(0, n1):\n            L[i] = arr[l + i]\n        for j in range(0, n2):\n            R[j] = arr[m + 1 + j]\n        i = 0\n        j = 0\n        k = l\n        while i < n1 and j < n2:\n            if L[i] <= R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n        while i < n1:\n            arr[k] = L[i]\n            i += 1\n            k += 1\n        while j < n2:\n            arr[k] = R[j]\n            j += 1\n            k += 1\n        return arr\n    def count_Inversions(arr, l, r):\n        if l >= r:\n            return 0\n        m = (l + r) // 2\n        count1 = count_Inversions(arr, l, m)\n        count2 = count_Inversions(arr, m + 1, r)\n        count3 = merge(arr, l, m, r)\n        return count1 + count2 + count3\n    return count_Inversions(arr, 0, len(arr) - 1)\n",
        "num_ids": 367
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    if len(arr) < 2:\n        return inv_count\n    for i in range(1,len(arr)):\n        if arr[i] < arr[i-1]:\n            inv_count += 1\n    return inv_count\n",
        "num_ids": 66
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count \n",
        "num_ids": 57
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n    else:\n        count = 0\n        for i in range(n):\n            for j in range(i+1,n):\n                if arr[i] > arr[j]:\n                    count += 1\n        return count\n",
        "num_ids": 73
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    n = len(arr) \n    for i in range(n): \n        for j in range(i + 1, n): \n            if arr[i] > arr[j]: \n                inv_count += 1\n    return inv_count \n",
        "num_ids": 69
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if(arr[i]>arr[j]):\n                count+=1\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    final_list = []\n    for i in list1:\n        if isinstance(i,list):\n            final_list.extend(flatten_list(i))\n        else:\n            final_list.append(i)\n    return final_list\n",
        "num_ids": 63
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return list1\n",
        "num_ids": 18
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    for i in list1:\n        if isinstance(i,list):\n            flatten_list(i)\n        else:\n            print(i)\n",
        "num_ids": 39
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for item in list1:\n        if isinstance(item, list):\n            list2.extend(flatten_list(item))\n        else:\n            list2.append(item)\n    return list2\n",
        "num_ids": 59
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    for i in list1:\n        if isinstance(i,list):\n            flatten_list(i)\n        else:\n            list1.append(i)\n    return list1\n",
        "num_ids": 47
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for x in list1:\n        if type(x) is list:\n            list2.extend(flatten_list(x))\n        else:\n            list2.append(x)\n    return list2\n",
        "num_ids": 59
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    nested_list = []\n    for item in list1:\n        if isinstance(item, list):\n            nested_list.extend(flatten_list(item))\n        else:\n            nested_list.append(item)\n    return nested_list\n",
        "num_ids": 66
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for i in list1:\n        if type(i) == list:\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list\n",
        "num_ids": 63
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    newList = []\n    for sublist in list1:\n        for item in sublist:\n            newList.append(item)\n    return newList\n",
        "num_ids": 39
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 == []:\n        return []\n    else:\n        return flatten_list(list1[1:]) + list1[0]\n",
        "num_ids": 38
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(int)\n    s = stdata[0][1]\n    for i in stdata:\n        s += i[1]\n        d[i[0]] += i[1]\n    return d, s\n",
        "num_ids": 57
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = -1\n    for st_no, agg_tuple in stdata:\n        if agg_tuple[1] > max_aggregate:\n            max_aggregate = agg_tuple[1]\n    return max_aggregate\n",
        "num_ids": 63
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate = defaultdict(int)\n    for (d,m,y) in stdata:\n        aggregate[(d,m,y)] += 1\n    return max(aggregate.values())\n",
        "num_ids": 50
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Write your solution here\n    # print(\"stdata is \", stdata)\n    # print(\"length of stdata is \", len(stdata))\n    # print(\"stdata[0] is \", stdata[0])\n    # print(\"length of stdata[0] is \", len(stdata[0]))\n    # print(\"type of stdata[0] is \", type(stdata[0]))\n    max_aggregate = 0\n    agg_list = []\n    for tup in stdata:\n        for i in range(len(tup)):\n            if i == 0:\n                agg_list.append(tup[i])\n            else:\n                agg_list[i] = max(agg_list[i], tup[i])\n    # print(\"agg_list\", agg_list)\n    # print(\"max_aggregate\", max(agg_list))\n    return max(agg_list)\n",
        "num_ids": 219
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    sorted_data = sorted(stdata, key = lambda x: x[1], reverse=True)\n    max_aggregate = sorted_data[0][1]\n    for i in range(1, len(sorted_data)):\n        max_aggregate = max(max_aggregate, sorted_data[i][1])\n    return max_aggregate\n",
        "num_ids": 88
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Stores all the values in tuple and stores the max value\n    max_agg = {}\n    #print(stdata)\n    for i in range(len(stdata)):\n        #print(stdata[i])\n        for j in range(len(stdata[i])):\n            #print(stdata[i][j], end=\" \")\n            if j in max_agg:\n                if max_agg[j] < stdata[i][j]:\n                    max_agg[j] = stdata[i][j]\n            else:\n                max_agg[j] = stdata[i][j]\n    #print(\"Max aggregate: \", max_agg)\n    return max_agg\n",
        "num_ids": 166
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg_info = defaultdict(list)\n    for st, count in stdata:\n        agg_info[st].append(count)\n    return max(agg_info.items(), key=lambda k: sum(k[1]))\n",
        "num_ids": 58
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Map to store the aggregate keys and values\n    # Dictionary of aggregates:\n    # aggregate_dict = {\n    #     agg_key : agg_value,\n    #     agg_key : agg_value,\n    #     agg_key : agg_value\n    # }\n    aggregate_dict = defaultdict(int)\n    max_aggregate = 0\n    for num, time in stdata:\n        aggregate_dict[num] += time\n        max_aggregate = max(max_aggregate, aggregate_dict[num])\n",
        "num_ids": 129
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    total_aggregate = defaultdict(int)\n    max_aggregate = 0\n    for i in range(len(stdata)):\n        data = stdata[i]\n        total_aggregate[data] += 1\n        if total_aggregate[data] > max_aggregate:\n            max_aggregate = total_aggregate[data]\n    return max_aggregate\n",
        "num_ids": 92
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    result = 0\n    for x, y in stdata:\n        result = max(result, x+y)\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count(a,n):\n        def helper(n):\n            if n==0:\n                return 1\n            return helper(n-1)+helper(n-2)\n        return helper(n)\n    \n    def count_helper(a,n):\n        def helper(a,n,p):\n            if n==0:\n                return 1\n            if a[n-1]==a[n]:\n                return helper(a,n-1,p)\n            else:\n                return helper(a,n-1,p+1)\n        return helper(a,n,0)\n    def count_recursion(a,n):\n        if n==0:\n            return 1\n        if a[n-1]==a[n]:\n            return count_recursion(a,n-1)\n        else:\n            return count_recursion(a,n-1)+count_recursion(a,n-2)\n    if n==0:\n        return 1\n    a=[0,1,0,1,0,0]\n    #a=[0,0,0,0,0,0]\n    #a=[1,1,1,1,1,1]\n    #a=[0,1,0,1,0,1]\n    #a=[0,0,0,0,1,0]\n    #a=[1,0,0,1,0,1]\n    #a=[0,0,0,1,0,1]\n    #a=[0,1,0,1,0,0]\n    #a=[0,0,0,1,1,1]\n    #a=[0,1,0,0,1,0]\n    #a=[0,0,1,0,1,0]\n    #a=[0,0,1,0,0,1]\n    #a=[0,1,0,1,0,0]\n    #a=[0,0,1,0,0,1]\n    #a=[0,0,0,1,1,1]\n    #a=[0,1,0,1,0,0]\n    #a=[1,0,0,1,1,0]\n    #a=[0,0,0,0,0,0]\n    #a=[0,0,0,0,0,1]\n    #a=[1,0,0,0,0,0]\n    #a=[0,0,1,1,0,0]\n    #a=[0,0,0,0,1,0]\n    #a=[0,1,0,1,0,0]\n    #a=[0,0,1,1,0,0]\n    #a=[0,1,0,1,0,0]\n    #a=[1,0,1,1,0,0]\n    #a=[0,1,0,1,0,0]\n    #a=[0,1,1,1,0,0]\n    #a=[1,0,1,1,0,0]\n    #a=[0,0,1,1,0,1]\n    #a=[1,0,0,1,0,0]\n    #a=[0,1,0,1,1,1]\n    #a=[1,0,0,0,0,0]\n    #a=[0,0,0,0,0,0]\n    #a=[1,0,0,1,1,1]\n    #a=[1,0,0,0,0,0]\n    #a=[0,0,0,1,1,0]\n    #a=[1,0,0,0,0,0]\n    #a=[0,1,0,1,0,1]\n    #a=[0,0,1,0,1,0]\n    #a=[0,1,0,1,0,1]\n    #a=[1,0,0,1,0,1]\n    #a=[1,0,0,0,0,0]\n    #a=[1,0,0,0,0,0]\n    #a=[0,1,0,1,0,1]\n    #a=[1,1,0,0,0,0]\n    #a=[1,0,0,1,1,1]\n    #a=[1,1,1,1,0,0]\n    #a=[1,0,0,1,1,1]\n    #a=[0,1,1,1,0,0]\n    #a=[0,0,1,1,1,1]\n    #a=[0,0,0,0,0,1]\n    #a=[0,0,0,0,0,0]\n    #a=[1,0,0,1,0,0]\n    #a=[1,0,0,1,1,0]\n    #a=[1,0,1,1,0,0]\n    #a=[1,1,1,1,0,0]\n    #a=[1,1,0,0,0,0]\n    #a=[0,1,1,1,1,0]\n    #a=[0,1,1,1,1,1]\n    #a=[0,1,1,1,1,1]\n    #a=[0,1,1,1,1,1]\n    #a=[0,0,0,1,1,1]\n    #a=[0,1,0,1,1,1]\n    #a=[0,1,1,1,1,1]\n    #a=[1,1,1,1,1,1]\n    #a=[0,0,1,1,1,1]\n    #a=[1,0,1,1,1,1]\n    #a=[1,0,0,1,1,1]\n    #a=[1,0,0,1,1,1]\n    #a=[0,0,1,1,1,1]\n    #a=[1,0,1,1,1,1]\n    #a=[1,0,1,1,1,1]\n    #a=[1,0,0,1,1,1]\n    #a=[0,1,1,1,1,1]\n    #a=[0,0,1,1,1,1]\n    #a=[0,0,1,1,1,1]\n    #a=[0,0,0,1,1,1]\n    #a=[0,1,1,1,1,1]\n    #a=[0,0,1,1,1,1]\n    #a=[0,0,0,1,1,1]\n    #a=[0,0,1,1,1,1]\n    #a=[0,0,1,1,1,1]\n    #a=[0,0,1,1,1,1]\n    #a=[1,1,1,1,1,1]\n    #a=[0,1,1,1,1,1]\n    #a=[0,0,0,1,1,1]\n    #a=[0,0,1,1,1,1]\n    #a=[0,1,1,1,1,1]\n    #a=[1,0,1,1,1,1]\n    #a=[1,0,1,1,1,1]\n    #a=[1,0,1,1,1,1]\n    #a=[1,0,0,1,1,1]\n    #a=[1,1,1,1,1,1]\n    #a=[0,0,0,0,0,0]\n    #a=[1,0,0,1,1,0]\n    #a=[1,0,0,1,1,1]\n    #a=[1,0,0,1,1,1]\n    #a=[1,1,0,1,1,0]\n    #a=[1,1,1,1,1,0]\n    #a=[0,0,1,1,1,0]\n    #a=[0,1,1,1,1,1]\n    #a=[0,1,0,1,1,1]\n    #a=[0,1,1,1",
        "num_ids": 1997
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # This function takes time O(n*m*m) where n is the length of sequence and m is the no. of 1's in the sequence.\n    # However, it is very easy to come up with using the backtracking approach to solve this problem.\n    # But it can be easily modified to use the DP approach.\n    \n    count_seq = 0\n    \n    # Let us see the backtracking approach.\n    # We can implement the DP approach by using a 1D array.\n    # We can use a variable to store the summation of all bits in last n positions.\n    # We can also keep a 2D array to store the summation of all bits in the first n positions.\n    # The first row of the 2D array is initialized to 0 and each subsequent row is initialized to the summation of bits in ith position.\n    # For example, if we have a sequence of length 4 and we initialize 2D array with 0,0,0,0. Then in the first row we will get 0 + 0 + 0 + 0 = 0.\n    # In the second row we will get 0 + 0 + 1 = 1, and so on.\n    # So now we need to fill up 2D array in a top-down fashion.\n    # If we are at the last row, we can now fill up a column with 1's.\n    # If we are not at the last row, we need to fill up a column with 0's.\n    # Here we need a counter for each column, and we fill it up using a for loop.\n    # But we need to start from last row to first row and fill it up from the last row to the first row.\n    # We can keep doing this recursively as we move further down the 2D array.\n    \n    dp = [[0]*n]\n    \n    # Define base cases.\n    # We don't need to fill up to 2nd row.\n    # We can fill up all 1's to nth row.\n    dp[0][0] = 1\n    \n    # Fill the 2nd row.\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1]\n    \n    # Fill the first n rows.\n    for i in range(1, n):\n        for j in range(i):\n            # If the sum of the jth bit in the sequence is same as the sum of the (i-j)th bit in the sequence, then the i+j bit in sequence is 1.\n            if (i-j) % 2 == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = 0\n    \n    # Fill the nth row.\n    for i in range(1, n):\n        dp[i][n-1] = 1\n    \n    # Fill the n-th column.\n    for i in range(1, n):\n        dp[n-1][i] = 1\n    \n    # Fill up the first n columns.\n    for i in range(1, n):\n        dp[i][0] = 1\n    \n    # Fill up the nth column.\n    for i in range(1, n):\n        dp[i][n-1] = 1\n    \n    # Counting all the binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    for i in range(n):\n        for j in range(n):\n            # If the sum of the jth bit in the sequence is same as the sum of the (i-j)th bit in the sequence, then the i+j bit in sequence is 1.\n            if (i-j) % 2 == 0:\n                count_seq += dp[i][j]\n    \n    return count_seq\n    ",
        "num_ids": 874
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_seq_helper(n,sum_bin):\n        if(sum_bin == 0 and n == 0):\n            return 1\n        if(n == 0):\n            return 0\n        if(sum_bin == 0):\n            return 0\n        if(sum_bin%2 == 1):\n            return 0\n",
        "num_ids": 78
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    base = 1<<n\n    for i in range(base):\n        #print(i,bin(i))\n        if sum_bits(i) == sum_bits(i<<n):\n            count += 1\n    return count\n",
        "num_ids": 61
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_sequence(n):\n        count = 0\n        for i in range(1 << n):\n            count += 1 if sum(i & x for x in range(n + 1)) == sum(i >> n)\n        return count\n    return count_sequence(n)\n",
        "num_ids": 67
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    x = 0\n    y = 0\n    for i in range(0, 2**(n-1)):\n        x = 0\n        y = 0\n        for j in range(0, n):\n            x += int(i & (1 << j))\n        y += int(i & (1 << (n-1)))\n        if x == y:\n            x = 0\n            y = 0\n            for j in range(0, n):\n                x += int(i & (1 << j))\n                y += int(i & (1 << (n-1)))\n            if x == y:\n                x = 0\n                y = 0\n                for j in range(0, n):\n                    x += int(i & (1 << j))\n                    y += int(i & (1 << (n-1)))\n                if x == y:\n                    print(i)\n",
        "num_ids": 206
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 1:\n        return 1\n    return 2 * count_binary_seq(n - 1)\n",
        "num_ids": 28
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    def count(a):\n        return (a*(a+1))//2\n    \n    res = 0\n    for i in range(n, 2*n):\n        res += count(i)\n    return res\n    \ndef count_binary_seq_2(n):\n    '''\n    This solution works but was not efficient because of the number of calls.\n    '''\n    c = 0\n    for i in range(n, 2*n):\n        c += bin(i)[2:].count('1') * bin(i+1)[2:].count('1')\n    return c\n    \ndef count_binary_seq_3(n):\n    '''\n    This solution works but is not efficient because of the number of calls.\n    '''\n    def count_bin(n):\n        if n == 1:\n            return 1\n        else:\n            return n*count_bin(n-1) + n*count_bin(n-2)\n    return count_bin(n)\n    \ndef count_binary_seq_4(n):\n    '''\n    This solution uses a bit mask.\n    '''\n    mask = 1\n    for i in range(1, n+1):\n        mask = mask << 1\n        mask |= i\n    return (mask >> 1).count()\n    \ndef count_binary_seq_5(n):\n    '''\n    This solution uses a bit mask.\n    '''\n    def count_bin(n):\n        count = 0\n        mask = 1\n        for i in range(1, n+1):\n            mask = mask << 1\n            mask |= i\n            if mask & 1 == 1:\n                count += i\n        return count\n    return count_bin(n)\n    \ndef count_binary_seq_6(n):\n    '''\n    This solution uses a bit mask.\n    '''\n    def count_bin(n):\n        count = 0\n        mask = 1\n        for i in range(1, n+1):\n            mask = mask << 1\n            mask |= i\n            if mask & 1 == 1:\n                count += i\n        return count\n    return count_bin(n)\n    \ndef count_binary_seq_7(n):\n    '''\n    This solution uses a bit mask.\n    '''\n    def count_bin(n):\n        mask = 1\n        count = 0\n        for i in range(1, n+1):\n            mask = mask << 1\n            mask |= i\n            if mask & 1 == 1:\n                count += i\n        return count\n    return count_bin(n)\n    \ndef count_binary_seq_8(n):\n    '''\n    This solution uses a bit mask.\n    '''\n    def count_bin(n):\n        count = 0\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                count += i\n            else:\n                count -= i\n        return count\n    return count_bin(n)\n    \ndef count_binary_seq_9(n):\n    '''\n    This solution uses a bit mask.\n    '''\n    def count_bin(n):\n        count = 0\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                count += i\n            else:\n                count -= i\n        return count\n    return count_bin(n)\n    \ndef count_binary_seq_10(n):\n    '''\n    This solution uses a bit mask.\n    '''\n    def count_bin(n):\n        mask = 1\n        count = 0\n        for i in range(1, n+1):\n            mask = mask << 1\n            mask |= i\n            if mask & 1 == 1:\n                count += i\n        return count\n    return count_bin(n)\n    \ndef count_binary_seq_11(n):\n    '''\n    This solution uses a bit mask.\n    '''\n    def count_bin(n):\n        mask = 1\n        count = 0\n        for i in range(1, n+1):\n            mask = mask << 1\n            mask |= i\n            if mask & 1 == 1:\n                count += i\n        return count\n    return count_bin(n)\n    \ndef count_binary_seq_12(n):\n    '''\n    This solution uses a bit mask.\n    '''\n    def count_bin(n):\n        mask = 1\n        count = 0\n        for i in range(1, n+1):\n            mask = mask << 1\n            if mask & 1 == 1:\n                count += i\n        return count\n    return count_bin(n)\n    \ndef count_binary_seq_13(n):\n    '''\n    This solution uses a bit mask.\n    '''\n    def count_bin(n):\n        mask = 1\n        count = 0\n        for i in range(1, n+1):\n            mask = mask << 1\n            if mask & 1 == 1:\n                count += i\n        return count\n    return count_bin(n)\n    \ndef count_binary_seq_14(n):\n    '''\n    This solution uses a bit mask.\n    '''\n    def count_bin(n):\n        count = 0\n        mask = 1\n        for i in range(1, n+1):\n            mask = mask << 1\n            if mask & 1 == 1:\n                count += i\n        return count\n    return count_bin(n)\n    \ndef count_binary_seq_15(n):\n    '''\n    This solution uses a bit mask.\n    '''\n    def count_bin(n):\n        count = 0\n        mask = 1\n        for i in range(1, n+1):\n            mask = mask << 1\n            if mask & 1 == 1:\n                count += i\n        return count\n    return count_bin(n)\n    \ndef count_binary_seq_16(n):\n    '''\n    This solution uses a bit mask.\n    '''\n    def count_bin(n):\n        count = 0\n        mask = 1\n        for i in range(1, n+1):\n            mask = mask << 1\n            if mask & 1 == 1:\n                count += i\n        return count\n    return count_bin(n)\n    \ndef count_binary_seq_17(n):\n    '''\n    This solution uses a bit mask.\n    '''\n    def count_bin(n):\n        count = 0\n        mask = 1\n        for i in range(1, n+1):\n            mask = mask << 1\n            if mask & 1 == 1:\n                count += i\n        return count\n    return count_bin(n)\n    \ndef count_binary_seq_18(n):\n    '''\n    This solution uses a bit mask.\n    '''\n    def count_bin(n):\n        count = 0\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                count += i\n            else:\n                count -= i\n        return count\n    return count_bin(n)\n    \ndef count_binary_seq_19(n):\n    '''\n    This solution uses a bit mask.\n    '''\n    def count_bin(n):\n        count = 0\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                count += i\n            else:\n                count -= i\n        return count\n    return count_bin(n)\n    \ndef count_binary_seq_20(n):\n    '''\n    This solution uses a bit mask.\n    '''\n    def count_bin(n):\n        count = 0\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                count += i\n            else:\n                count -= i\n        return count\n    return count_bin(n)\n    \ndef count_binary_seq_21(n):\n    '''\n    This solution uses a bit mask.\n    '''\n    def count_bin(n):\n        count = 0\n        mask = 1\n        for i in range(1, n+1):\n            mask = mask << 1\n            mask |= i\n            if mask & 1 == 1:\n                count += i\n        return count\n    return count_bin(n)\n    \ndef count_binary_seq_22(n):\n    '",
        "num_ids": 90
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    binary_patterns = []\n    while True:\n        if sum(binary_patterns) == (n*(n+1))//2:\n            break\n        else:\n            binary_patterns.append(True)\n    return binary_patterns\n",
        "num_ids": 62
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def helper(n):\n        '''\n        This function is used for finding the count of first n binary sequences.\n        '''\n        if n == 1:\n            if sum(n_array) == sum(l_array):\n                return 1\n            else:\n                return 0\n        elif n == 2:\n            if sum(n_array) == sum(l_array):\n                return 2\n            else:\n                return 0\n        else:\n            return helper(n-1) + helper(n-2)\n    \n    n_array = list(map(int, bin(n)[2:])) # convert n to binary list\n    l_array = n_array[::-1] # reverse the list\n    if sum(n_array) == sum(l_array):\n        return helper(n)\n    else:\n        return 0\n",
        "num_ids": 169
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if len(d) == 0:\n        return 0\n    if not isinstance(d,dict):\n        return 0\n    for k in d.keys():\n        if isinstance(d[k],dict):\n            if dict_depth(d[k])>0:\n                return 1+dict_depth(d[k])\n    return 1\n",
        "num_ids": 83
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max([1] + [0] + map(dict_depth, d.items()))\n",
        "num_ids": 25
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # write your code here\n    return (max(map(lambda i: 0 if i[0] == 0 else i[0]+1, d.items())))\n    \ndef is_valid_parent(parent, child):\n    '''\n    Write a function to check if two words are valid parents in the dependency parse tree.\n    '''\n    # write your code here\n    p = parent.split('-')\n    c = child.split('-')\n    return p[0] == c[0] and p[1] == c[1]\n    \ndef get_common_ancestor(root, child1, child2):\n    '''\n    Write a function that finds the common ancestor of two nodes.\n    '''\n    # write your code here\n    parents = set()\n    parents.add(root)\n    res = ''\n    while parents:\n        cur = parents.pop()\n        for p in child1.split('-'):\n            if p == cur:\n                res = cur\n        for p in child2.split('-'):\n            if p == cur:\n                res = cur\n        for p in parent_dict[cur]:\n            parents.add(p)\n    return res\n    \ndef is_balanced_parent(parent, child):\n    '''\n    Write a function to check if two words are balanced.\n    '''\n    # write your code here\n    p = parent.split('-')\n    c = child.split('-')\n    return abs(int(p[1]) - int(c[1])) <= 1 and abs(int(p[0]) - int(c[0])) <= 1\n    \ndef find_lca(root, child1, child2):\n    '''\n    Write a function that finds the lowest common ancestor of two nodes.\n    '''\n    # write your code here\n    parents = set()\n    parents.add(root)\n    while parents:\n        cur = parents.pop()\n        for p in child1.split('-'):\n            if p == cur:\n                return cur\n        for p in child2.split('-'):\n            if p == cur:\n                return cur\n        for p in parent_dict[cur]:\n            parents.add(p)\n    return ''\n    \ndef maximum_depth(root):\n    '''\n    Write a function to find the maximum depth of a binary tree.\n    '''\n    # write your code here\n    depth = 0\n    def max_depth(node, depth):\n        nonlocal depth\n        if node:\n            depth += 1\n            max_depth(node.left, depth)\n            max_depth(node.right, depth)\n            depth -= 1\n    max_depth(root, depth)\n    return depth\n    \ndef solution(A):\n    '''\n    Write a function to check whether an input string is a palindrome or not.\n    '''\n    # write your code here\n    for i in range(len(A)):\n        if i % 2 == 1:\n            A = A[:i] + A[i+1:]\n    return 'True' if A == A[::-1] else 'False'\n",
        "num_ids": 65
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max([dict_depth(v) for v in d.values()])\n    else:\n        return 0\n",
        "num_ids": 41
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    \n    if not d:\n        return 0\n",
        "num_ids": 14
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]))\n        else:\n            depth = max(depth, 1)\n    return depth + 1\n    ",
        "num_ids": 64
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        raise TypeError('Input must be a dictionary')\n    \n    return max(map(dict_depth, d.items())) + 1\n",
        "num_ids": 45
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    d_depth = 0\n    if isinstance(d, dict):\n        for i in d:\n            if isinstance(d[i], dict):\n                d_depth += 1\n    return d_depth\n    \n",
        "num_ids": 53
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return len(d)\n",
        "num_ids": 9
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d == {}:\n        return 0\n    return 1 + max([dict_depth(item) for item in d.values()])\n",
        "num_ids": 34
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)) :\n        if (arr[i]>=ranges[index][0]) and (arr[i]<=ranges[index][1]):\n            if (rotations[i]%2 == 0):\n                if (ranges[index][0]<=arr[i]) and (arr[i]<=ranges[index][1]):\n                    return i\n            else :\n                if (ranges[index][0]<=arr[i]) and (arr[i]<=ranges[index][1]):\n                    return i\n",
        "num_ids": 139
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)-1) :\n        if arr[i] >= arr[i+1] :\n            if arr[i] == ranges and arr[i+1] == rotations and index == i+1 :\n                return arr[i]\n            elif arr[i] == ranges and arr[i+1] == rotations and index == i :\n                return arr[i+1]\n            elif arr[i] == ranges and arr[i+1] == rotations and index == i+1 :\n                return arr[i]\n            elif arr[i] == ranges and arr[i+1] == rotations and index == i-1 :\n                return arr[i]\n            else :\n                return -1\n        elif arr[i] < arr[i+1] :\n            if arr[i] == ranges and arr[i+1] == rotations and index == i :\n                return arr[i+1]\n            elif arr[i] == ranges and arr[i+1] == rotations and index == i+1 :\n                return arr[i]\n            elif arr[i] == ranges and arr[i+1] == rotations and index == i-1 :\n                return arr[i]\n            else :\n                return -1\n    return -1\n",
        "num_ids": 306
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    return arr[index-1]\n",
        "num_ids": 11
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if(index<ranges):\n        for i in range(rotations):\n            arr.insert(0,arr.pop())\n            #print(arr)\n        #print(arr)\n        return find_Element(arr,ranges,rotations,index-1)\n    else:\n        return arr[index-1]\n",
        "num_ids": 79
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)-1,-1,-1):\n        if(i == index):\n            return(arr[i])\n        else:\n            if(rotations[i] == 0):\n                continue\n            else:\n                rotations[i] = rotations[i] - 1\n                index = i\n",
        "num_ids": 78
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    #rotation = 0\n    for i in range(rotations) :\n        #rotation += 1\n        index = (index + 1) % n\n        if index == 0 :\n            rotation += 1\n    return arr[index]\n    \ndef test_find_Element():\n    arr = [1,2,3,4,5]\n    print('The element at index 0 after rotation is :',find_Element(arr,2,3,0))\n    print('The element at index 1 after rotation is :',find_Element(arr,2,3,1))\n    print('The element at index 2 after rotation is :',find_Element(arr,2,3,2))\n    print('The element at index 3 after rotation is :',find_Element(arr,2,3,3))\n    print('The element at index 4 after rotation is :',find_Element(arr,2,3,4))\n    \n",
        "num_ids": 223
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(ranges)) :\n        start = ranges[i][0]\n        end = ranges[i][1]\n        if(end>=index) :\n            if(start<=index<end) :\n                return index-start\n            else :\n                if(index>start) :\n                    index = index-start\n                if(index<=end) :\n                    index = index-end\n    return index\n",
        "num_ids": 104
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    j = 0\n    for i in range(len(arr)):\n        if(arr[i] >= ranges[index][0] and arr[i] <= ranges[index][1]):\n            j = j + 1\n            if(j == rotations[index]):\n                return arr[i]\n",
        "num_ids": 73
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(0,len(arr)) :\n        if i == index :\n            return arr[i]\n    for i in range(0,len(arr)) :\n        arr[i] = (arr[i] + 1)%ranges\n    for i in range(0,len(arr)) :\n        if i == index :\n            return arr[i]\n    for i in range(0,len(arr)) :\n        arr[i] = (arr[i] - 1)%ranges\n    for i in range(0,len(arr)) :\n        if i == index :\n            return arr[i]\n    return -1\n",
        "num_ids": 155
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    if index>=n : return -1\n    rotations = rotations%n\n    index = index%n\n    if index < n/2:\n        i = 0\n        while(i < rotations) :\n            arr = arr[::-1]\n            i = i+1\n    else :\n        i = 0\n        while(i < rotations) :\n            arr = arr[1:] + arr[:1]\n            i = i+1\n    return arr[index]\n",
        "num_ids": 125
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    return p_words\n",
        "num_ids": 43
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words_p = []\n    for i in words:\n        if i[0] == 'p':\n            words_p.append(i)\n    return words_p\n",
        "num_ids": 43
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0].lower() == 'p':\n            return word\n",
        "num_ids": 26
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p =[]\n    for word in words:\n        if word[0].lower() == 'p':\n            p.append(word)\n    return p\n",
        "num_ids": 39
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return words[:2]\n",
        "num_ids": 10
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    return p_words\n",
        "num_ids": 43
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = []\n    for w in words:\n        if w.startswith('p'):\n            p.append(w)\n    return p\n",
        "num_ids": 38
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p':\n            return word\n    return None\n",
        "num_ids": 28
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    l=[]\n    for i in words:\n        if i.startswith('p'):\n            l.append(i)\n    return l\n",
        "num_ids": 38
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    res=[]\n    for word in words:\n        if word[0] == 'p':\n            res.append(word)\n    return res\n",
        "num_ids": 37
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # if k is in the array, then it must be a subsequence.\n    # else, just check if it is a subsequence\n    if k < a[index]:\n        return a[index]\n    max_sum = 0\n    # find the max sum of increasing subsequence from prefix\n    # upto given index\n    for i in range(index):\n        if a[i] > max_sum:\n            max_sum = a[i]\n    # check if max_sum is not a subsequence or not.\n    # if not, then check if it is a subsequence\n    if max_sum <= k:\n        return k + max_sum\n    return max_sum\n",
        "num_ids": 160
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    #[ 5, -1, 7, -3, 2, 6, -4 ]\n    #n = 7\n    #index = 6\n    #k = 5\n    \n    #ans = 7\n    \n    if k >= index:\n        return 0\n    \n    ans = -sys.maxsize\n    \n    max_so_far = 0\n    for i in range(index):\n        \n        # max_so_far < ans, update ans and max_so_far\n        if max_so_far < a[i]:\n            max_so_far = a[i]\n        \n        # max_so_far >= ans, update ans and max_so_far\n        ans = max(max_so_far + a[i], ans)\n    \n    \n    return ans\n    \ndef max_sum_increasing_subseq_bottom_up(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \n    This function uses bottom up approach. \n    '''\n    #[ 5, -1, 7, -3, 2, 6, -4 ]\n    #n = 7\n    #index = 6\n    #k = 5\n    \n    #ans = 7\n    \n    \n    # Initialize dp array\n    dp = [[-sys.maxsize] * n for _ in range(n)]\n    \n    \n    # Fill the first row of dp array\n    for i in range(n):\n        if i == index:\n            dp[i][i] = a[i]\n        else:\n            dp[i][i] = 0\n    \n    for i in range(index, n):\n        for j in range(i, n):\n            # Take max of previous row(dp[i-1]) and the current element(a[i])\n            dp[i][j] = max(dp[i][j-1], a[i]) + a[j]\n    \n    \n    \n    \n    return dp[index][k-1]\n",
        "num_ids": 235
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index > n-1:\n        return 0\n    if index == n-1:\n        return a[index]\n    ans = max(a[index], max_sum_increasing_subseq(a, n, index + 1, k))\n    ans = max(ans, max_sum_increasing_subseq(a, n, index + 1, k - 1))\n    return ans\n",
        "num_ids": 93
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index >= n:\n        return 0\n    if k > n-index:\n        return 0\n    max_sum = 0\n    if index >= k:\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a, n, index+1, k))\n    max_sum = max(max_sum, max_sum_increasing_subseq(a, n, index+1, k))\n    return max_sum\n",
        "num_ids": 113
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    s = []\n    for i in range(n):\n        s.append([None] * n)\n    s[0][0] = a[0]\n    for i in range(1, n):\n        s[i][0] = s[i-1][0] + a[i]\n    for j in range(1, n):\n        for i in range(j, n):\n            s[i][j] = max(s[i-1][j], s[i-1][j-1]) + a[i]\n    \n    ans = s[n-1][k-1] if k <= n else -1\n    return ans\n",
        "num_ids": 156
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = float('-inf')\n    for i in range(index, n):\n        if a[i] > max_sum:\n            max_sum = a[i]\n        for j in range(i, index, -1):\n            if j > i and a[j] + max_sum > a[i]:\n                max_sum = a[j] + max_sum\n    if max_sum < float('-inf'):\n        return max_sum\n    else:\n        return -1\n",
        "num_ids": 122
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 0:\n        return 0\n    if a[index] <= k:\n        return max_sum_increasing_subseq(a, n - 1, index, k)\n    else:\n        return max(max_sum_increasing_subseq(a, n - 1, index, k), a[index] + max_sum_increasing_subseq(a, n - 1, index + 1, k))\n",
        "num_ids": 99
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 0 or index == 0:\n        return 0\n    if a[index] > k:\n        return max_sum_increasing_subseq(a, n, index - 1, k)\n    # elif a[index] <= k:\n    #     return max_sum_increasing_subseq(a, n, index - 1, k)\n    else:\n        return max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index - 1, k + 1))\n",
        "num_ids": 139
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = -float('inf')\n    for i in range(index + 1, n):\n        max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i, k - 1))\n    return max_sum\n",
        "num_ids": 68
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    res = 0\n    for i in range(index, n):\n        if a[i] <= k:\n            res = max(res, max_sum_increasing_subseq(a, n, i + 1, k) + a[i])\n    return res\n",
        "num_ids": 64
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    first = tuplex[0]\n    middle = tuplex[1:-1]\n    second = tuplex[-1]\n    return first + (middle * m) + second\n",
        "num_ids": 47
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    l=len(tuplex)\n    return (tuplex[0:m],tuplex[m:l])\n",
        "num_ids": 32
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = (0,0)\n    colon = (colon[0],m-1)\n    colon = (colon[0],n-1)\n    return colon\ndef get_hint(blank_pos,hint_pos,length,m,n):\n    '''\n    Write a function to check if the location of the blank is available or not.\n    Return True if available else return False\n    '''\n    if (hint_pos[0]<0 or hint_pos[0]>m-1 or hint_pos[1]<0 or hint_pos[1]>n-1):\n        return False\n    elif (blank_pos[0] == hint_pos[0] or blank_pos[1] == hint_pos[1]):\n        return False\n    else:\n        return True\ndef get_mismatch(pos,length,m,n):\n    '''\n    Write a function to get the position of all the mismatches in the string.\n    '''\n    mismatch = []\n    for i in range(1,length+1):\n        if (pos+i>m or pos+i>n):\n            break\n        else:\n            mismatch.append(pos+i)\n    return mismatch\ndef get_pos(char,m,n):\n    '''\n    Write a function to get the position of a given character in the string.\n    '''\n    pos = 0\n    for i in range(m):\n        for j in range(n):\n            if (char == grid[i][j]):\n                pos = (i,j)\n                break\n    return pos\ndef check_win(m,n,length,grid):\n    '''\n    Write a function to check if the board is won or not.\n    Return True if won else return False.\n    '''\n    for i in range(m):\n        if (length == len(set(grid[i]))):\n            return True\n    for j in range(n):\n        if (length == len(set(list(map(lambda x:x[j],grid))))):\n            return True\n    for i in range(m):\n        for j in range(n):\n            if (length == len(set(list(map(lambda x:x[i],grid[j])))))):\n                return True\n    for i in range(m):\n        for j in range(n):\n            if (length == len(set(list(map(lambda x:x[i],grid[j]))))):\n                return True\n    return False\ndef get_score(blank_pos,m,n,length,grid):\n    '''\n    Write a function to get the score.\n    '''\n    score = 0\n    for i in range(m):\n        for j in range(n):\n            if (blank_pos in get_mismatch(pos=grid[i][j],length=length,m=m,n=n)):\n                score += 1\n    return score\ndef get_best_move(grid,m,n,length):\n    '''\n    Write a function to get the best move to play the game.\n    '''\n    best_move = None\n    for i in range(m):\n        for j in range(n):\n            pos = (i,j)\n            blank_pos = get_pos('*',m,n)\n            for length in range(1,length+1):\n                if (get_mismatch(pos=pos,length=length,m=m,n=n) == []):\n                    break\n                else:\n                    best_score = get_score(blank_pos=blank_pos,m=m,n=n,length=length,grid=grid)\n                    if (best_score > best_move_score):\n                        best_move_score = best_score\n                        best_move_pos = (i,j)\n    return best_move\ndef get_curr_player(turn_count,board,m,n,length):\n    '''\n    Write a function to get the current player.\n    '''\n    if (turn_count % 2 == 0):\n        return 'X'\n    else:\n        return 'O'\ndef get_opp_player(curr_player,turn_count,board,m,n,length):\n    '''\n    Write a function to get the opponent player.\n    '''\n    if (curr_player == 'X'):\n        return 'O'\n    else:\n        return 'X'\ndef get_next_player(curr_player,turn_count,board,m,n,length):\n    '''\n    Write a function to get the next player.\n    '''\n    if (curr_player == 'X'):\n        return 'O'\n    else:\n        return 'X'\ndef play_game(board,m,n,length):\n    '''\n    Write a function to play the game.\n    '''\n    grid = deepcopy(board)\n    turn_count = 1\n    curr_player = get_curr_player(turn_count=turn_count,board=board,m=m,n=n,length=length)\n    print_board(grid=grid,m=m,n=n,length=length)\n    while(1):\n        best_move_pos = get_best_move(grid=grid,m=m,n=n,length=length)\n        blank_pos = get_pos('*',m,n)\n        print('Enter position of the blank: ')\n        blank_pos = int(input())\n        colon = colon_tuplex(tuplex=best_move_pos,m=m,n=n)\n        if (colon[0]==0 and get_hint(blank_pos=blank_pos,hint_pos=colon,length=length,m=m,n=n)):\n            grid[colon[1]][colon[0]] = curr_player\n            print(f'{curr_player} moved to {colon}')\n            print_board(grid=grid,m=m,n=n,length=length)\n            turn_count += 1\n            curr_player = get_curr_player(turn_count=turn_count,board=board,m=m,n=n,length=length)\n            if (check_win(m=m,n=n,length=length,grid=grid)):\n                print_board(grid=grid,m=m,n=n,length=length)\n                print('Hurray! You won!')\n                break\n        else:\n            grid[blank_pos[1]][blank_pos[0]] = curr_player\n            print(f'{curr_player} moved to {blank_pos}')\n            print_board(grid=grid,m=m,n=n,length=length)\n            turn_count += 1\n            curr_player = get_curr_player(turn_count=turn_count,board=board,m=m,n=n,length=length)\n            if (check_win(m=m,n=n,length=length,grid=grid)):\n                print_board(grid=grid,m=m,n=n,length=length)\n                print('Hurray! You won!')\n                break\n",
        "num_ids": 568
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m-n):\n        tuplex=tuplex[1:]\n    return tuplex\ndef colon_tupley(tupley,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m-n):\n        tupley=tupley[0]\n    return tupley\ndef colon_tuplez(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m-n):\n        tuplex=tuplex[0]\n    return tuplex\ndef colon_tuple(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m-n):\n        tuplex=tuplex[0]\n    return tuplex[1:]\ndef colon_tupley(tupley,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m-n):\n        tupley=tupley[0]\n    return tupley[1:]\ndef colon_tuplez(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m-n):\n        tuplex=tuplex[0]\n    return tuplex[1]\ndef colon_tuple(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m-n):\n        tuplex=tuplex[0]\n    return tuplex[1]\ndef colon_tupley(tupley,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m-n):\n        tupley=tupley[0]\n    return tupley[1]\ndef colon_tuplez(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m-n):\n        tuplex=tuplex[0]\n    return tuplex[1]\ndef colon_tuple(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m-n):\n        tuplex=tuplex[0]\n    return tuplex[1]\ndef colon_tupley(tupley,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m-n):\n        tupley=tupley[0]\n    return tupley[1]\ndef colon_tuplez(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m-n):\n        tuplex=tuplex[0]\n    return tuplex[1]\ndef colon_tuple(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m-n):\n        tuplex=tuplex[0]\n    return tuplex[1]\ndef colon_tupley(tupley,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m-n):\n        tupley=tupley[0]\n    return tupley[1]\ndef colon_tuplez(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m-n):\n        tuplex=tuplex[0]\n    return tuplex[1]\ndef colon_tuple(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m-n):\n        tuplex=tuplex[0]\n    return tuplex[1]\ndef colon_tupley(tupley,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m-n):\n        tupley=tupley[0]\n    return tupley[1]\ndef colon_tuplez(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m-n):\n        tuplex=tuplex[0]\n    return tuplex[1]\ndef colon_tuple(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m-n):\n        tuplex=tuplex[0]\n    return tuplex[1]\ndef colon_tupley(tupley,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m-n):\n        tupley=tupley[0]\n    return tupley[1]\ndef colon_tuplez(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m-n):\n        tuplex=tuplex[0]\n    return tuplex[1]\ndef colon_tuple(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m-n):\n        tuplex=tuplex[0]\n    return tuplex[1]\ndef colon_tupley(tupley,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m-n):\n        tupley=tupley[0]\n    return tupley[1]\ndef colon_tuplez(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m-n):\n        tuplex=tuplex[0]\n    return tuplex[1]\ndef colon_tuple(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m-n):\n        tuplex=tuplex[0]\n    return tuplex[1]\ndef colon_tupley(tupley,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m-n):\n        tupley=tupley[0]\n    return tupley[1]\ndef colon_tuplez(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m-n):\n        tuplex=tuplex[0]\n    return tuplex[1]\ndef colon_tuple(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m-n):\n        tuplex=tuplex[0]\n    return tuplex[1]\ndef colon_tupley(tupley,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m-n):\n        tupley=tupley[0]\n    return tupley[1]\ndef colon_tuplez(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m-n):\n        tuplex=tuplex[0",
        "num_ids": 23
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    a = tuplex[0]\n    b = tuplex[1]\n    c = tuplex[2]\n    if (m,n) == (1,1):\n        a = a[0]\n        b = b[0]\n        c = c[0]\n    elif m == 1 and n == 1:\n        a = a[0]\n        b = b[0]\n        c = c[0]\n    elif m == 1 and n!= 1:\n        a = a[0]\n        b = b[0]\n        c = c[0]\n    elif m!= 1 and n == 1:\n        a = a[0]\n        b = b[0]\n        c = c[0]\n    else:\n        a = a[0]\n        b = b[0]\n        c = c[0]\n    tuplex = (a,b,c)\n    return tuplex\n",
        "num_ids": 227
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon=[]\n    for i in range(m):\n        colon.append(tuplex[i][n])\n    return tuple(colon)\ndef l_find(tuplex,elem):\n    '''\n    Write a function to find the index of an element in a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if elem==tuplex[i]:\n            return i\ndef L_find(tuplex,elem):\n    '''\n    Write a function to find the index of an element in a list.\n    '''\n    for i in range(len(tuplex)):\n        if elem==tuplex[i]:\n            return i\ndef l_find_index(lst,elem):\n    '''\n    Write a function to find the index of an element in a list.\n    '''\n    for i in range(len(lst)):\n        if elem==lst[i]:\n            return i\ndef L_find_index(lst,elem):\n    '''\n    Write a function to find the index of an element in a list.\n    '''\n    for i in range(len(lst)):\n        if elem==lst[i]:\n            return i\ndef l_find_all(tuplex,elem):\n    '''\n    Write a function to find the index of an element in a tuple.\n    '''\n    index=[]\n    for i in range(len(tuplex)):\n        if elem==tuplex[i]:\n            index.append(i)\n    return index\ndef L_find_all(tuplex,elem):\n    '''\n    Write a function to find the index of an element in a list.\n    '''\n    index=[]\n    for i in range(len(tuplex)):\n        if elem==tuplex[i]:\n            index.append(i)\n    return index\ndef l_find_all_index(lst,elem):\n    '''\n    Write a function to find the index of an element in a list.\n    '''\n    index=[]\n    for i in range(len(lst)):\n        if elem==lst[i]:\n            index.append(i)\n    return index\ndef L_find_all_index(lst,elem):\n    '''\n    Write a function to find the index of an element in a list.\n    '''\n    index=[]\n    for i in range(len(lst)):\n        if elem==lst[i]:\n            index.append(i)\n    return index\ndef l_find_unique(tuplex,elem):\n    '''\n    Write a function to find the index of an element in a tuple.\n    '''\n    index=[]\n    for i in range(len(tuplex)):\n        if elem!=tuplex[i]:\n            index.append(i)\n    return index\ndef L_find_unique(tuplex,elem):\n    '''\n    Write a function to find the index of an element in a list.\n    '''\n    index=[]\n    for i in range(len(tuplex)):\n        if elem!=tuplex[i]:\n            index.append(i)\n    return index\ndef l_find_unique_index(lst,elem):\n    '''\n    Write a function to find the index of an element in a list.\n    '''\n    index=[]\n    for i in range(len(lst)):\n        if elem!=lst[i]:\n            index.append(i)\n    return index\ndef L_find_unique_index(lst,elem):\n    '''\n    Write a function to find the index of an element in a list.\n    '''\n    index=[]\n    for i in range(len(lst)):\n        if elem!=lst[i]:\n            index.append(i)\n    return index\ndef l_find_all_unique(tuplex,elem):\n    '''\n    Write a function to find the index of an element in a tuple.\n    '''\n    index=[]\n    for i in range(len(tuplex)):\n        if elem!=tuplex[i]:\n            index.append(i)\n    return index\ndef L_find_all_unique(tuplex,elem):\n    '''\n    Write a function to find the index of an element in a list.\n    '''\n    index=[]\n    for i in range(len(tuplex)):\n        if elem!=tuplex[i]:\n            index.append(i)\n    return index\ndef l_find_all_unique_index(lst,elem):\n    '''\n    Write a function to find the index of an element in a list.\n    '''\n    index=[]\n    for i in range(len(lst)):\n        if elem!=lst[i]:\n            index.append(i)\n    return index\ndef L_find_all_unique_index(lst,elem):\n    '''\n    Write a function to find the index of an element in a list.\n    '''\n    index=[]\n    for i in range(len(lst)):\n        if elem!=lst[i]:\n            index.append(i)\n    return index\ndef l_remove(tuplex,elem):\n    '''\n    Write a function to remove an element from a tuple.\n    '''\n    index=l_find(tuplex,elem)\n    del tuplex[index]\ndef L_remove(tuplex,elem):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    index=l_find_index(tuplex,elem)\n    del tuplex[index]\ndef l_remove_all(tuplex,elem):\n    '''\n    Write a function to remove all the elements from a tuple.\n    '''\n    index=l_find_all(tuplex,elem)\n    for i in range(len(index)):\n        del tuplex[index[i]]\ndef L_remove_all(tuplex,elem):\n    '''\n    Write a function to remove all the elements from a list.\n    '''\n    index=l_find_all_index(tuplex,elem)\n    for i in range(len(index)):\n        del tuplex[index[i]]\ndef l_remove_unique(tuplex,elem):\n    '''\n    Write a function to remove an element from a tuple.\n    '''\n    index=l_find_unique(tuplex,elem)\n    del tuplex[index[0]]\ndef L_remove_unique(tuplex,elem):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    index=l_find_unique_index(tuplex,elem)\n    del tuplex[index[0]]\ndef l_remove_all_unique(tuplex,elem):\n    '''\n    Write a function to remove all the elements from a tuple.\n    '''\n    index=l_find_all_unique(tuplex,elem)\n    for i in range(len(index)):\n        del tuplex[index[i]]\ndef L_remove_all_unique(tuplex,elem):\n    '''\n    Write a function to remove all the elements from a list.\n    '''\n    index=l_find_all_unique_index(tuplex,elem)\n    for i in range(len(index)):\n        del tuplex[index[i]]\ndef l_remove_item(tuplex,elem):\n    '''\n    Write a function to remove an element from a tuple.\n    '''\n    index=l_find(tuplex,elem)\n    del tuplex[index]\ndef L_remove_item(tuplex,elem):\n    '''\n    Write a function to remove an element from a list.\n    '''\n    index=l_find_index(tuplex,elem)\n    del tuplex[index]\ndef l_remove_item_all(tuplex,elem):",
        "num_ids": 44
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return (tuplex[m],tuplex[m+1])\n",
        "num_ids": 20
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    list1 = list(tuplex)\n    if len(list1) == 1:\n        return tuplex\n    else:\n        x = 0\n        y = 0\n        while x < n:\n            if y == 0:\n                list1[0] = (list1[0])\n                list1.append(m)\n                list1[1] = list1[1] + m\n                y = 1\n            else:\n                list1[0] = list1[0] + m\n                list1[1] = list1[1]\n                list1.append(m)\n                list1[1] = list1[1] + m\n                x = x + 1\n        return tuple(list1)\n",
        "num_ids": 172
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # print (tuplex[:m],tuplex[m:n],tuplex[n:])\n    return (tuplex[:m],tuplex[m:n],tuplex[n:])\ndef is_palin(tuplex):\n    '''\n    Write a function to check whether the given tuple is palindrome or not.\n    '''\n    # print (tuplex[:m],tuplex[m:n],tuplex[n:])\n    return True if tuplex == tuplex[::-1] else False\ndef reverse(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef is_rotation(tuplex,tuplex1):\n    '''\n    Write a function to check whether a given tuple is a rotation of another tuple.\n    '''\n    if tuplex == tuplex1:\n        return True\n    elif (len(tuplex) == len(tuplex1)) and (tuplex == reverse(tuplex1)):\n        return True\n    else:\n        return False\ndef is_palindrome(tuplex):\n    '''\n    Write a function to check whether a given tuple is palindrome or not.\n    '''\n    if tuplex == tuplex[::-1]:\n        return True\n    else:\n        return False\ndef rotate(tuplex):\n    '''\n    Write a function to rotate a tuple.\n    '''\n    return tuplex[1:] + tuplex[:1]\ndef num_common(tuplex,tuplex1):\n    '''\n    Write a function to get the number of common elements in two tuples.\n    '''\n    return len(tuplex & tuplex1)\ndef num_common_cnt(tuplex,tuplex1):\n    '''\n    Write a function to get the number of common elements in two tuples in count.\n    '''\n    return len((tuplex & tuplex1).__contains__)\ndef is_subset(tuplex,tuplex1):\n    '''\n    Write a function to check whether a given tuple is a subset of another tuple.\n    '''\n    if len(tuplex) == 0:\n        return False\n    elif tuplex <= tuplex1:\n        return True\n    elif tuplex1 <= tuplex:\n        return False\n    else:\n        for i in range(len(tuplex)):\n            if tuplex[i] not in tuplex1:\n                return False\n            if tuplex[i] not in tuplex1:\n                return True\n            else:\n                tuplex1 = tuplex1.replace(tuplex[i],None)\n                \ndef num_x(tuplex):\n    '''\n    Write a function to get the number of 'x' in a tuple.\n    '''\n    return tuplex.count('x')\ndef is_sublist(tuplex,tuplex1):\n    '''\n    Write a function to check whether a given tuple is a subset of another tuple.\n    '''\n    if len(tuplex) == 0:\n        return False\n    elif tuplex <= tuplex1:\n        return True\n    elif tuplex1 <= tuplex:\n        return False\n    else:\n        for i in range(len(tuplex)):\n            if tuplex[i] not in tuplex1:\n                return False\n            if tuplex[i] not in tuplex1:\n                return True\n            else:\n                tuplex1 = tuplex1.replace(tuplex[i],None)\n                \ndef rotate_tuplex(tuplex):\n    '''\n    Write a function to rotate a tuple.\n    '''\n    return tuple(reversed(tuplex))\ndef find_min_tuplex(tuplex):\n    '''\n    Write a function to get the minimum element from a tuple.\n    '''\n    min_ele = tuplex[0]\n    for i in range(1,len(tuplex)):\n        if min_ele > tuplex[i]:\n            min_ele = tuplex[i]\n    return min_ele\ndef find_max_tuplex(tuplex):\n    '''\n    Write a function to get the maximum element from a tuple.\n    '''\n    max_ele = tuplex[0]\n    for i in range(1,len(tuplex)):\n        if max_ele < tuplex[i]:\n            max_ele = tuplex[i]\n    return max_ele\ndef find_max_first(tuplex):\n    '''\n    Write a function to get the maximum element from a tuple.\n    '''\n    max_ele = tuplex[0]\n    for i in range(1,len(tuplex)):\n        if max_ele < tuplex[i]:\n            max_ele = tuplex[i]\n    return max_ele\ndef find_min_first(tuplex):\n    '''\n    Write a function to get the maximum element from a tuple.\n    '''\n    min_ele = tuplex[0]\n    for i in range(1,len(tuplex)):\n        if min_ele > tuplex[i]:\n            min_ele = tuplex[i]\n    return min_ele\ndef is_in_tuplex(tuplex,tuplex1):\n    '''\n    Write a function to check whether a given tuple is in another tuple.\n    '''\n    if tuplex in tuplex1:\n        return True\n    else:\n        return False\ndef tuplex_sum(tuplex):\n    '''\n    Write a function to get the sum of all elements from a tuple.\n    '''\n    tuplex_sum = 0\n    for i in range(len(tuplex)):\n        tuplex_sum += tuplex[i]\n    return tuplex_sum\ndef tuplex_len(tuplex):\n    '''\n    Write a function to get the length of a tuple.\n    '''\n    return len(tuplex)\ndef tuplex_max(tuplex):\n    '''\n    Write a function to get the maximum element from a tuple.\n    '''\n    max_ele = tuplex[0]\n    for i in range(1,len(tuplex)):\n        if max_ele < tuplex[i]:\n            max_ele = tuplex[i]\n    return max_ele\ndef tuplex_min(tuplex):\n    '''\n    Write a function to get the minimum element from a tuple.\n    '''\n    min_ele = tuplex[0]\n    for i in range(1,len(tuplex)):\n        if min_ele > tuplex[i]:\n            min_ele = tuplex[i]\n    return min_ele\ndef tuplex_rev(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    return tuplex[::-1]\ndef tuplex_concat(tuplex,tuplex1):\n    '''\n    Write a function to get the concatenation of two tuples.\n    '''\n    return tuplex + tuplex1\ndef tuplex_copy(tuplex):\n    '''\n    Write a function to get a copy of a tuple.\n    '''\n    return deepcopy(tuplex)\ndef tuplex_multiply(tuplex,m):\n    '''\n    Write a function to multiply a tuple.\n    '''\n    return (tuplex * m)\ndef tuplex_to_list(tuplex):\n    '''\n    Write a function to get a list from a tuple.\n    '''\n    return list(tuplex)\ndef tuplex_in_tuplex(tuplex,tuplex1):\n    '''\n    Write a function to check whether a given tuple is in another tuple.\n    '''\n    if tuplex in tuplex1:\n        return True\n    else:\n        return False\ndef tuplex_find(tuple",
        "num_ids": 35
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple([tuplex[i] for i in range(m)])\n",
        "num_ids": 21
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # TODO: implement this\n    # raise NotImplementedError()\n    \n    # sort the lists and select the k largest\n    # nums1.sort()\n    # nums2.sort()\n    # n1 = len(nums1)\n    # n2 = len(nums2)\n    # if n1 > n2:\n    #     nums1, nums2 = nums2, nums1\n    #     n1, n2 = n2, n1\n    \n    # nums1 = nums1[::-1]\n    # nums2 = nums2[::-1]\n    \n    # product = 0\n    # for i in range(n2):\n    #     product = nums1[i] * nums2[i]\n    #     if product > product:\n    #         product = nums1[i] * nums2[i]\n    #         nums2[i] = 0\n    #         n2 -= 1\n    #     if n2 == 0:\n    #         break\n    \n    # res = []\n    # for i in range(n1):\n    #     if nums2[n1 - i - 1] == 0:\n    #         res.append(nums1[i])\n    #         nums2[n1 - i - 1] = 1\n    #         n1 -= 1\n    #         if n1 == 0:\n    #             break\n    # return res\n    \n    '''\n    - using heap\n    - build a heap\n    - loop through each index in each list, if the product is larger than the max product, replace the max product\n    - delete the larger number in heap\n    '''\n    # heap = []\n    # for i in range(N):\n    #     heapq.heappush(heap, (nums1[i] * nums2[i], nums1[i], nums2[i]))\n    # for i in range(N):\n    #     if heap:\n    #         nums1[i] *= heap[0][0]\n    #         nums2[i] *= heap[0][1]\n    #         heapq.heappop(heap)\n    # return nums1 + nums2\n    \n    '''\n    - use 2 pointers\n    - if nums2[i] == 0, increment nums1[j] and nums2[j]\n    '''\n    # N = len(nums1) + len(nums2)\n    # if N % 2 == 1:\n    #     return None\n    # i, j, max1 = 0, 0, -float('inf')\n    # while i < N and j < N:\n    #     if nums2[j] == 0:\n    #         nums1[i] = nums2[j] = nums1[i] * nums2[j]\n    #         max1 = max(max1, nums1[i])\n    #         i += 1\n    #         j += 1\n    #     elif nums1[i] == 0:\n    #         nums1[i] = nums1[j] = nums2[j] * nums1[j]\n    #         max1 = max(max1, nums1[i])\n    #         j += 1\n    #     else:\n    #         if nums1[i] > nums2[j]:\n    #             nums1[i] = nums1[j] * nums2[j]\n    #             max1 = max(max1, nums1[i])\n    #         else:\n    #             nums1[i] = nums2[j] * nums1[j]\n    #             max1 = max(max1, nums1[i])\n    #         i += 1\n    #         j += 1\n    #     if i == N:\n    #         break\n    #     if j == N:\n    #         break\n    # return nums1 + nums2\n    \n    '''\n    - reverse both lists\n    - use a stack\n    - push (nums1[i], nums2[i]) into stack\n    - while stack is not empty\n    - pop two element from stack\n    - if stack[-1][0] < stack[-1][1], replace nums1[i] with stack[-1][0] * nums2[i]\n    - else replace nums1[i] with stack[-1][1] * nums2[i]\n    '''\n    # N = len(nums1) + len(nums2)\n    # if N % 2 == 1:\n    #     return None\n    # stack = []\n    # for i in range(N):\n    #     if nums2[i] == 0:\n    #         stack.append((nums1[i], 0))\n    #         stack.append((0, nums2[i]))\n    #     elif nums1[i] == 0:\n    #         stack.append((0, nums2[i]))\n    #         stack.append((nums1[i], 0))\n    #     else:\n    #         if nums1[i] > nums2[i]:\n    #             stack.append((nums1[i], nums2[i]))\n    #         else:\n    #             stack.append((nums2[i], nums1[i]))\n    # while stack:\n    #     if stack[-1][0] < stack[-1][1]:\n    #         nums1[stack[-1][0]] *= stack[-1][1]\n    #         nums2[stack[-1][1]] *= nums1[stack[-1][0]]\n    #         stack.pop()\n    #     else:\n    #         nums1[stack[-1][1]] *= stack[-1][0]\n    #         nums2[stack[-1][0]] *= nums1[stack[-1][1]]\n    #         stack.pop()\n    # return nums1 + nums2\n    \n    '''\n    - only one pointer\n    - if a[i] * b[j] > c[i], swap a[i] and b[i] and\n    - otherwise, swap a[i] and c[i]\n    '''\n    # N = len(nums1) + len(nums2)\n    # if N % 2 == 1:\n    #     return None\n    # i, j, k = 0, 0, 0\n    # while i < len(nums1) and j < len(nums2):\n    #     if nums1[i] * nums2[j] > nums1[i] * nums2[k]:\n    #         nums1[i], nums2[k] = nums2[k], nums1[i]\n    #         k += 1\n    #     else:\n    #         nums1[i], nums2[j] = nums2[j], nums1[i]\n    #         i += 1\n    #         j += 1\n    #     if i == len(nums1):\n    #         while k < j:\n    #             nums1[k], nums2[k] = nums2[k], nums1[k]\n    #             k += 1\n    #         return nums1 + nums2\n    #     if j == len(nums2):\n    #         while k < i:\n    #             nums1[k], nums2[k] = nums2[k], nums1[k]\n    #             k += 1\n    #         return nums1 + nums2\n    \n    '''\n    - merge two sorted lists and merge sort\n    '''\n    # def merge(nums1, nums2):\n    #     if len(nums1) == 0:\n    #         return nums2\n    #     if len(",
        "num_ids": 44
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    smallest = min(nums1)\n    largest = max(nums2)\n    return largest*smallest*N\n",
        "num_ids": 32
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # max_nums = []\n    # for i in range(N):\n    #     for j in range(N):\n    #         max_nums.append(nums1[i] * nums2[j])\n    # return max(max_nums)\n",
        "num_ids": 67
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N <= 0:\n        return []\n    if len(nums1) < N or len(nums2) < N:\n        return []\n    if N == 1:\n        return nums1[:N] + nums2[:N]\n    if N == 2:\n        return [max(nums1[i],nums2[i]) for i in range(min(len(nums1),len(nums2)))]\n    \n    \n    \n    nums1.sort()\n    nums2.sort()\n    \n    s = []\n    \n    def find_max_product(nums, idx, length, lp, s):\n        if len(nums) == length:\n            if len(s) < lp:\n                s.append(nums[:])\n            return\n        if idx >= len(nums):\n            return\n        if nums[idx] > 0:\n            find_max_product(nums, idx+1, length, lp, s)\n            find_max_product(nums, idx+1, length, lp, s)\n            find_max_product(nums, idx+1, length, lp, s)\n            return\n        find_max_product(nums, idx+1, length, lp, s)\n        find_max_product(nums, idx+1, length, lp, s)\n        find_max_product(nums, idx+1, length, lp, s)\n    \n    find_max_product(nums1, 0, len(nums1), lp, s)\n    find_max_product(nums2, 0, len(nums2), lp, s)\n    return sorted(s, key=lambda x: x[-1], reverse=True)[:N]\n        \n        \n",
        "num_ids": 444
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def small_product(nums1, nums2, N):\n        '''\n        Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n        '''\n        def big_product(nums1, nums2, N):\n            '''\n            Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n            '''\n            def sum_of_numbers(nums, N):\n                '''\n                Write a function to find the sum of N numbers.\n                '''\n                s = 0\n                for i in range(N):\n                    s += nums[i]\n                return s\n            def multiply_of_numbers(nums, N):\n                '''\n                Write a function to find the product of N numbers.\n                '''\n                p = 1\n                for i in range(N):\n                    p *= nums[i]\n                return p\n            def large_product(nums1, nums2, N):\n                '''\n                Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n                '''\n                s = sum_of_numbers(nums1, N)\n                p = multiply_of_numbers(nums2, N)\n                \n                if s < p:\n                    return multiply_of_numbers(nums1, N)\n                else:\n                    return multiply_of_numbers(nums2, N)\n            def small_product(nums1, nums2, N):\n                '''\n                Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n                '''\n                s = sum_of_numbers(nums1, N)\n                p = multiply_of_numbers(nums2, N)\n                if s > p:\n                    return multiply_of_numbers(nums1, N)\n                else:\n                    return multiply_of_numbers(nums2, N)\n            def big_product(nums1, nums2, N):\n                '''\n                Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n                '''\n                s = sum_of_numbers(nums1, N)\n                p = multiply_of_numbers(nums2, N)\n                if s < p:\n                    return multiply_of_numbers(nums1, N)\n                else:\n                    return multiply_of_numbers(nums2, N)\n            def large_product_2(nums1, nums2, N):\n                '''\n                Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n                '''\n                s = sum_of_numbers(nums1, N)\n                p = multiply_of_numbers(nums2, N)\n                if s < p:\n                    return small_product(nums1, nums2, N)\n                else:\n                    return large_product(nums1, nums2, N)\n            def small_product_2(nums1, nums2, N):\n                '''\n                Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n                '''\n                s = sum_of_numbers(nums1, N)\n                p = multiply_of_numbers(nums2, N)\n                if s > p:\n                    return small_product(nums1, nums2, N)\n                else:\n                    return large_product(nums1, nums2, N)\n            def big_product_2(nums1, nums2, N):\n                '''\n                Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n                '''\n                s = sum_of_numbers(nums1, N)\n                p = multiply_of_numbers(nums2, N)\n                if s < p:\n                    return big_product(nums1, nums2, N)\n                else:\n                    return small_product(nums1, nums2, N)\n            def large_product_3(nums1, nums2, N):\n                '''\n                Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n                '''\n                s = sum_of_numbers(nums1, N)\n                p = multiply_of_numbers(nums2, N)\n                if s > p:\n                    return small_product_2(nums1, nums2, N)\n                else:\n                    return large_product_2(nums1, nums2, N)\n            def small_product_3(nums1, nums2, N):\n                '''\n                Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n                '''\n                s = sum_of_numbers(nums1, N)\n                p = multiply_of_numbers(nums2, N)\n                if s < p:\n                    return big_product_2(nums1, nums2, N)\n                else:\n                    return small_product_2(nums1, nums2, N)\n            def big_product_3(nums1, nums2, N):\n                '''\n                Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n                '''\n                s = sum_of_numbers(nums1, N)\n                p = multiply_of_numbers(nums2, N)\n                if s < p:\n                    return big_product_2(nums1, nums2, N)\n                else:\n                    return small_product_2(nums1, nums2, N)\n            def large_product_4(nums1, nums2, N):\n                '''\n                Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n                '''\n                s = sum_of_numbers(nums1, N)\n                p = multiply_of_numbers(nums2, N)\n                if s < p:\n                    return small_product_3(nums1, nums2, N)\n                else:\n                    return large_product_3(nums1, nums2, N)\n            def small_product_4(nums1, nums2, N):\n                '''\n                Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n                '''\n                s = sum_of_numbers(nums1, N)\n                p = multiply_of_numbers(nums2, N)\n                if s > p:\n                    return small_product_3(nums1, nums2, N)\n                else:\n                    return large_product_3(nums1, nums2, N)\n            def big_product_4(nums1, nums2, N):\n                '''\n                Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n                '''\n                s = sum_of_numbers(nums1, N)\n                p = multiply_of_numbers(nums2, N)\n                if s > p:\n                    return small_product_3(nums1, nums2, N)\n                else:\n                    return large_product_3(nums1, nums2, N)\n            def large_product_5(nums1, nums2, N):\n                '''\n                Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n                '''\n                s = sum_of_numbers(nums1, N)\n                p = multiply_of_numbers(nums2, N)\n                if s < p:\n                    return big_product_4(nums1, nums2, N)\n                else:\n                    return small_product_4(nums1, nums2, N)\n            def small_product_5(nums1, nums2, N):\n                '''\n                Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n                ''",
        "num_ids": 29
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    import heapq\n    l = len(nums1)\n    r = len(nums2)\n    h = []\n    for i in range(l):\n        heapq.heappush(h, (nums1[i] * nums2[i], i, nums1[i], nums2[i]))\n    result = []\n    for i in range(N):\n        _, _, _, factor = heapq.heappop(h)\n        result.append(factor)\n    return result\n",
        "num_ids": 127
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #First sort the lists\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n",
        "num_ids": 33
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # return sorted(nums1, reverse=True)[:N] * sorted(nums2, reverse=True)[:N]\n    \n    if N > len(nums1) * len(nums2):\n        return None\n    else:\n        product_list = []\n        for num1 in sorted(nums1, reverse=True):\n            for num2 in sorted(nums2, reverse=True):\n                if num1 * num2 > product_list[-1]:\n                    product_list.append(num1 * num2)\n                    if len(product_list) == N:\n                        return product_list\n        return product_list\n",
        "num_ids": 154
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_prod = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i!= j:\n                tmp = nums1[i] * nums2[j]\n                if tmp > max_prod:\n                    max_prod = tmp\n    return max_prod\n",
        "num_ids": 82
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n    \nmaximum(10,20)\n",
        "num_ids": 30
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a<b:\n        max=a\n    else:\n        max=b\n    return max\n        \ndef main():\n    a=10\n    b=20\n    print(maximum(a,b))\n",
        "num_ids": 53
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    max_num = a if a>b else b\n    return max_num\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n",
        "num_ids": 11
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(\"a is maximum\")\n    else:\n        print(\"b is maximum\")\n",
        "num_ids": 29
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        print('{0} is the maximum value.'.format(a))\n    else:\n        print('{0} is the maximum value.'.format(b))\n        \nmaximum(10, 20)\n",
        "num_ids": 56
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\nmaximum(1,4)\n",
        "num_ids": 18
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \n    ",
        "num_ids": 24
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # str1 = str(input(\"Please input a string:\"))\n    tuple1 = tuple(str1)\n    print(tuple1)\n    return tuple1\n",
        "num_ids": 42
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n    \ndef tuple_to_string(lst):\n    '''\n    Write a function to convert a given tuple to a string.\n    '''\n    return str(lst)\n    \ndef upper_case(str1):\n    '''\n    Write a function to convert a given string into its upper case form.\n    '''\n    return str1.upper()\n    \ndef make_dict(lst):\n    '''\n    Write a function to create a dictionary from the given list of key-value pairs.\n    '''\n    d={}\n    for i in lst:\n        k,v=i\n        d[k]=v\n    return d\n    \ndef make_dict2(lst):\n    '''\n    Write a function to create a dictionary from the given list of key-value pairs.\n    '''\n    d={}\n    for i in range(len(lst)):\n        k,v=lst[i]\n        d[k]=v\n    return d\n    \ndef remove_odd(lst):\n    '''\n    Write a function to remove all the odd elements from a list.\n    '''\n    for i in range(len(lst)):\n        if(lst[i]%2!=0):\n            lst.remove(lst[i])\n    return lst\n    \ndef remove_odd_2(lst):\n    '''\n    Write a function to remove all the odd elements from a list.\n    '''\n    return list(filter(lambda x:x%2!=0,lst))\n    \ndef remove_even_2(lst):\n    '''\n    Write a function to remove all the even elements from a list.\n    '''\n    return list(filter(lambda x:x%2!=0,lst))\n    \ndef string_to_dict(str1):\n    '''\n    Write a function to convert a given string to a dictionary.\n    '''\n    d={}\n    lst=str1.split(\",\")\n    for i in lst:\n        k,v=i.split(\"=\")\n        d[k]=v\n    return d\n    \ndef dict_to_string(dct):\n    '''\n    Write a function to convert a given dictionary into a string.\n    '''\n    return str(dct)\n    \ndef no_comma(lst):\n    '''\n    Write a function to remove the leading and trailing commas from a list.\n    '''\n    return lst[1:-1]\n    \ndef no_comma_2(lst):\n    '''\n    Write a function to remove the leading and trailing commas from a list.\n    '''\n    if(len(lst)==1):\n        return lst[0]\n    else:\n        return lst[1:-1]\n        \ndef add_tuple(tup1,tup2):\n    '''\n    Write a function to add a tuple (x,y) to another tuple (x,y).\n    '''\n    return tup1+(tup2,)\n    \ndef add_tuple_2(tup1,tup2):\n    '''\n    Write a function to add a tuple (x,y) to another tuple (x,y).\n    '''\n    return tup1+tup2\n    \ndef add_tuple_3(tup1,tup2):\n    '''\n    Write a function to add a tuple (x,y) to another tuple (x,y).\n    '''\n    tup3=()\n    for i in range(len(tup1)):\n        tup3=tup3+(tup1[i],)+tup2[i]\n    return tup3\n    \ndef add_tuple_4(tup1,tup2):\n    '''\n    Write a function to add a tuple (x,y) to another tuple (x,y).\n    '''\n    tup3=tuple(tup1)+(tuple(tup2))\n    return tup3\n    \ndef remove_tuple(tup):\n    '''\n    Write a function to remove a tuple from a given list.\n    '''\n    return tup\n    \ndef remove_tuple_2(tup):\n    '''\n    Write a function to remove a tuple from a given list.\n    '''\n    return tup[1:]\n    \ndef remove_tuple_3(tup):\n    '''\n    Write a function to remove a tuple from a given list.\n    '''\n    return tup[1:]\n    \ndef remove_tuple_4(tup):\n    '''\n    Write a function to remove a tuple from a given list.\n    '''\n    return tup[1:]\n    \ndef add_tuple_5(tup1,tup2):\n    '''\n    Write a function to add a tuple (x,y) to another tuple (x,y).\n    '''\n    return tup1+(tup2,)\n    \ndef add_tuple_6(tup1,tup2):\n    '''\n    Write a function to add a tuple (x,y) to another tuple (x,y).\n    '''\n    return tup1+tup2\n    \ndef add_tuple_7(tup1,tup2):\n    '''\n    Write a function to add a tuple (x,y) to another tuple (x,y).\n    '''\n    return tup1+(tup2,)\n    \ndef remove_tuple_8(tup):\n    '''\n    Write a function to remove a tuple from a given list.\n    '''\n    return tup\n    \ndef remove_tuple_9(tup):\n    '''\n    Write a function to remove a tuple from a given list.\n    '''\n    return tup[1:]\n    \ndef remove_tuple_10(tup):\n    '''\n    Write a function to remove a tuple from a given list.\n    '''\n    return tup[1:]\n    \ndef add_tuple_11(tup1,tup2):\n    '''\n    Write a function to add a tuple (x,y) to another tuple (x,y).\n    '''\n    return tup1+(tup2,)\n    \ndef add_tuple_12(tup1,tup2):\n    '''\n    Write a function to add a tuple (x,y) to another tuple (x,y).\n    '''\n    return tup1+tup2\n    \ndef add_tuple_13(tup1,tup2):\n    '''\n    Write a function to add a tuple (x,y) to another tuple (x,y).\n    '''\n    return tup1+(tup2,)\n    \ndef remove_tuple_14(tup):\n    '''\n    Write a function to remove a tuple from a given list.\n    '''\n    return tup\n    \ndef remove_tuple_15(tup):\n    '''\n    Write a function to remove a tuple from a given list.\n    '''\n    return tup[1:]\n    \ndef remove_tuple_16(tup):\n    '''\n    Write a function to remove a tuple from a given list.\n    '''\n    return tup[1:]\n    \ndef add_tuple_17(tup1,tup2):\n    '''\n    Write a function to add a tuple (x,y) to another tuple (x,y).\n    '''\n    return tup1+(tup2,)\n    \ndef add_tuple_18(tup1,tup2):\n    '''\n    Write a function to add a tuple (x,y) to another tuple (x,y).\n    '''\n    return tup1+tup2\n    \ndef add_tuple_19(tup1,tup2):\n    '''\n    Write a function to add a tuple (x,y) to another tuple (x,y).\n    '''\n    return tup1+(tup2,)\n    \ndef remove_tuple_20(tup):\n    '''\n    Write a function to remove a tuple from a given list.\n    '''\n    return tup\n    \ndef remove_tuple_21(tup):\n    '''\n    Write a function to remove a tuple from a given list.\n    '",
        "num_ids": 18
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    #code here\n",
        "num_ids": 7
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.split()\n    tup = tuple(str1)\n    return tup\n",
        "num_ids": 27
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    print (list(str1))\n",
        "num_ids": 11
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    #output = tuple(str1)\n    output = ()\n    for c in str1:\n        output += (c,)\n    return output\n",
        "num_ids": 36
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | (1 << 63)\n",
        "num_ids": 12
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | (1 << (len(bin(n))-3))\n",
        "num_ids": 20
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i = 0\n    while (n & (1<<i)):\n        i += 1\n    i -= 1\n    return n | (1<<i)\n",
        "num_ids": 39
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    bit = 0\n    while(bit < n):\n        bit += 1\n        print(bit)\n    print(\"Left most unset bit is at index \" + str(bit))\n",
        "num_ids": 44
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while (n & 0b10000000):\n        n = n & ~0b10000000\n    return n\n",
        "num_ids": 28
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if(n & -n) == 0:\n        return n\n    else:\n        return n | (-n & -n)\n",
        "num_ids": 33
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return ~(n) & 0x55555555\n    \n",
        "num_ids": 18
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # (n) = n | 1\n    return n | (1<<(n.bit_length()-1))\n    \n    \ndef set_right_most_set_bit(n):\n    '''\n    Write a python function to set the right most set bit.\n    '''\n    # (n) = n | (1<<(n.bit_length()-1))\n    return n | (1<<(n.bit_length()-1))\n    \n    \ndef clear_right_most_set_bit(n):\n    '''\n    Write a python function to clear the right most set bit.\n    '''\n    # (n) = (n-1) & ~(1<<(n.bit_length()-1))\n    return (n-1) & ~(1<<(n.bit_length()-1))\n    \n    \ndef set_left_most_set_bit(n):\n    '''\n    Write a python function to set the left most set bit.\n    '''\n    # (n) = (n-1) & ~(1<<(n.bit_length()-1))\n    return (n-1) & ~(1<<(n.bit_length()-1))\n    \n    \ndef clear_left_most_set_bit(n):\n    '''\n    Write a python function to clear the left most set bit.\n    '''\n    # (n) = (n-1) & ~(1<<(n.bit_length()-1))\n    return (n-1) & ~(1<<(n.bit_length()-1))\n    \n    \ndef clear_left_most_set_bit(n):\n    '''\n    Write a python function to clear the left most set bit.\n    '''\n    # (n) = (n-1) & ~(1<<(n.bit_length()-1))\n    return (n-1) & ~(1<<(n.bit_length()-1))\n    \n    \ndef clear_left_most_set_bit(n):\n    '''\n    Write a python function to clear the left most set bit.\n    '''\n    # (n) = (n-1) & ~(1<<(n.bit_length()-1))\n    return (n-1) & ~(1<<(n.bit_length()-1))\n    \n    \ndef clear_left_most_set_bit(n):\n    '''\n    Write a python function to clear the left most set bit.\n    '''\n    # (n) = (n-1) & ~(1<<(n.bit_length()-1))\n    return (n-1) & ~(1<<(n.bit_length()-1))\n    \n    \ndef clear_left_most_set_bit(n):\n    '''\n    Write a python function to clear the left most set bit.\n    '''\n    # (n) = (n-1) & ~(1<<(n.bit_length()-1))\n    return (n-1) & ~(1<<(n.bit_length()-1))\n    \n    \ndef clear_left_most_set_bit(n):\n    '''\n    Write a python function to clear the left most set bit.\n    '''\n    # (n) = (n-1) & ~(1<<(n.bit_length()-1))\n    return (n-1) & ~(1<<(n.bit_length()-1))\n    \n    \ndef clear_left_most_set_bit(n):\n    '''\n    Write a python function to clear the left most set bit.\n    '''\n    # (n) = (n-1) & ~(1<<(n.bit_length()-1))\n    return (n-1) & ~(1<<(n.bit_length()-1))\n    \n    \ndef clear_left_most_set_bit(n):\n    '''\n    Write a python function to clear the left most set bit.\n    '''\n    # (n) = (n-1) & ~(1<<(n.bit_length()-1))\n    return (n-1) & ~(1<<(n.bit_length()-1))\n    \n    \ndef clear_left_most_set_bit(n):\n    '''\n    Write a python function to clear the left most set bit.\n    '''\n    # (n) = (n-1) & ~(1<<(n.bit_length()-1))\n    return (n-1) & ~(1<<(n.bit_length()-1))\n    \n    \ndef clear_left_most_set_bit(n):\n    '''\n    Write a python function to clear the left most set bit.\n    '''\n    # (n) = (n-1) & ~(1<<(n.bit_length()-1))\n    return (n-1) & ~(1<<(n.bit_length()-1))\n    \n    \ndef clear_left_most_set_bit(n):\n    '''\n    Write a python function to clear the left most set bit.\n    '''\n    # (n) = (n-1) & ~(1<<(n.bit_length()-1))\n    return (n-1) & ~(1<<(n.bit_length()-1))\n    \n    \ndef clear_left_most_set_bit(n):\n    '''\n    Write a python function to clear the left most set bit.\n    '''\n    # (n) = (n-1) & ~(1<<(n.bit_length()-1))\n    return (n-1) & ~(1<<(n.bit_length()-1))\n    \n    \ndef clear_left_most_set_bit(n):\n    '''\n    Write a python function to clear the left most set bit.\n    '''\n    # (n) = (n-1) & ~(1<<(n.bit_length()-1))\n    return (n-1) & ~(1<<(n.bit_length()-1))\n    \n    \ndef clear_left_most_set_bit(n):\n    '''\n    Write a python function to clear the left most set bit.\n    '''\n    # (n) = (n-1) & ~(1<<(n.bit_length()-1))\n    return (n-1) & ~(1<<(n.bit_length()-1))\n    \n    \ndef clear_left_most_set_bit(n):\n    '''\n    Write a python function to clear the left most set bit.\n    '''\n    # (n) = (n-1) & ~(1<<(n.bit_length()-1))\n    return (n-1) & ~(1<<(n.bit_length()-1))\n    \n    \ndef clear_left_most_set_bit(n):\n    '''\n    Write a python function to clear the left most set bit.\n    '''\n    # (n) = (n-1) & ~(1<<(n.bit_length()-1))\n    return (n-1) & ~(1<<(n.bit_length()-1))\n    \n    \ndef clear_left_most_set_bit(n):\n    '''\n    Write a python function to clear the left most set bit.\n    '''\n    # (n) = (n-1) & ~(1<<(n.bit_length()-1))\n    return (n-1) & ~(1<<(n.bit_length()-1))\n    \n    \ndef clear_left_most_set_bit(n):\n    '''\n    Write a python function to clear the left most set bit.\n    '''\n    # (n) = (n-1) & ~(1<<(n.bit_length()-1))\n    return (n-1) & ~(1<<(n.bit_length()-1))\n    \n    \ndef clear_left_most_set_bit(n):\n    '''\n    Write a python function to clear the left most set bit.\n    '''\n    # (n) = (n-1) & ~(1<<(n.bit_length()-1))\n    return (n-1) & ~(1<<(n.bit_length()-1))\n    \n    \ndef clear_left_most",
        "num_ids": 62
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n=n|0x1\n    return n\n",
        "num_ids": 15
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | 0x01\n",
        "num_ids": 10
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    radius = float(r)\n    height = float(h)\n    #radius = float(radius)\n    #height = float(height)\n    a = (radius**2)*3.14159265358979\n    b = 3.14159265358979*radius*height\n    c = 3.14159265358979*radius**2\n    volume = round(a*b-c,2)\n    return volume\ndef volume_cone_alt(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    radius = float(r)\n    height = float(h)\n    radius = float(radius)\n    height = float(height)\n    return 3.14159265358979*(radius**2)*height\n    \n",
        "num_ids": 54
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = r**2 * math.pi * h/3\n    return vol\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = 4/3 * math.pi * r**3\n    return vol\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    vol = 2/3 * math.pi * r**2 * h\n    return vol\ndef volume_cone_torus(r1,r2,h1,h2):\n    '''\n    Write a function to find the volume of a cone inside a torus.\n    '''\n    vol = r1**2 * (r2**2 - r1**2) * math.pi * h1 * h2\n    return vol\ndef volume_cylinder_torus(r1,r2,h1,h2):\n    '''\n    Write a function to find the volume of a cylinder inside a torus.\n    '''\n    vol = r1**2 * (r2**2 - r1**2) * math.pi * h1 * h2\n    return vol\ndef volume_cone_torus_cylinder(r1,r2,h1,h2,h3):\n    '''\n    Write a function to find the volume of a cone inside a torus and a cylinder.\n    '''\n    vol = (r1**2 * (r2**2 - r1**2) * math.pi * h1 * h2 + r1**2 * h1 * h3) / 2\n    return vol\ndef volume_cone_torus_cylinder_3d(r1,r2,h1,h2,h3,h4):\n    '''\n    Write a function to find the volume of a cone inside a torus and a cylinder.\n    '''\n    vol = (r1**2 * (r2**2 - r1**2) * math.pi * h1 * h2 + r1**2 * h1 * h3 + r1**2 * h4) / 2\n    return vol\ndef volume_cone_torus_cylinder_4d(r1,r2,h1,h2,h3,h4,h5):\n    '''\n    Write a function to find the volume of a cone inside a torus and a cylinder.\n    '''\n    vol = (r1**2 * (r2**2 - r1**2) * math.pi * h1 * h2 + r1**2 * h1 * h3 + r1**2 * h4 + r1**2 * h5) / 2\n    return vol\ndef volume_sphere_torus(r1,r2,h1,h2):\n    '''\n    Write a function to find the volume of a sphere inside a torus.\n    '''\n    vol = 4/3 * math.pi * r1**2 * h1 * h2\n    return vol\ndef volume_sphere_torus_2(r1,r2,h1,h2,h3):\n    '''\n    Write a function to find the volume of a sphere inside a torus.\n    '''\n    vol = 4/3 * math.pi * r1**2 * h1 * h2 + r1**2 * h1 * h3\n    return vol\ndef volume_sphere_torus_3(r1,r2,h1,h2,h3,h4):\n    '''\n    Write a function to find the volume of a sphere inside a torus.\n    '''\n    vol = 4/3 * math.pi * r1**2 * h1 * h2 + r1**2 * h1 * h3 + r1**2 * h4\n    return vol\ndef volume_sphere_torus_4(r1,r2,h1,h2,h3,h4,h5):\n    '''\n    Write a function to find the volume of a sphere inside a torus.\n    '''\n    vol = 4/3 * math.pi * r1**2 * h1 * h2 + r1**2 * h1 * h3 + r1**2 * h4 + r1**2 * h5\n    return vol\ndef volume_sphere_torus_5(r1,r2,h1,h2,h3,h4,h5,h6):\n    '''\n    Write a function to find the volume of a sphere inside a torus.\n    '''\n    vol = 4/3 * math.pi * r1**2 * h1 * h2 + r1**2 * h1 * h3 + r1**2 * h4 + r1**2 * h5 + r1**2 * h6\n    return vol\ndef volume_sphere_torus_6(r1,r2,h1,h2,h3,h4,h5,h6,h7):\n    '''\n    Write a function to find the volume of a sphere inside a torus.\n    '''\n    vol = 4/3 * math.pi * r1**2 * h1 * h2 + r1**2 * h1 * h3 + r1**2 * h4 + r1**2 * h5 + r1**2 * h6 + r1**2 * h7\n    return vol\ndef volume_sphere_torus_7(r1,r2,h1,h2,h3,h4,h5,h6,h7,h8):\n    '''\n    Write a function to find the volume of a sphere inside a torus.\n    '''\n    vol = 4/3 * math.pi * r1**2 * h1 * h2 + r1**2 * h1 * h3 + r1**2 * h4 + r1**2 * h5 + r1**2 * h6 + r1**2 * h7 + r1**2 * h8\n    return vol\ndef volume_sphere_torus_8(r1,r2,h1,h2,h3,h4,h5,h6,h7,h8,h9):\n    '''\n    Write a function to find the volume of a sphere inside a torus.\n    '''\n    vol = 4/3 * math.pi * r1**2 * h1 * h2 + r1**2 * h1 * h3 + r1**2 * h4 + r1**2 * h5 + r1**2 * h6 + r1**2 * h7 + r1**2 * h8 + r1**2 * h9\n    return vol\ndef volume_sphere_torus_9(r1,r2,h1,h2,h3,h4,h5,h6,h7,h8,h9,h10):\n    '''\n    Write a function to find the volume of a sphere inside a torus.\n    '''\n    vol = 4/3 * math.pi * r1**2 * h1 * h2 + r1**2 * h1 * h3 + r1**2 * h4 + r1**2 * h5 + r1**2 * h6 + r1**2 * h7 + r1**2 * h8 + r1**2 * h9 + r1**2 * h10\n    return vol\ndef volume_sphere_torus_10(r1,r2,h1,h2,h3,h4,h5,h6,h7,h8,h9,h10,h11):\n    '''\n    Write a function to find the volume of a sphere inside a torus.\n    '''\n    vol = 4/3 * math.pi * r1**2 * h1 * h2 + r1**2 * h1 * h3 + r1**2 * h4 + r1**2 * h5 + r1**2 * h6 + r1**2 * h7 + r1**2 * h8 + r1**2 * h9 + r1**2 * h10 + r1**2 * h11\n    return vol\ndef volume_sphere_torus_11(r1,r2,h1,h2,h3,h4,h5,h6,h7,h8,h9,h10,h11,h12):\n    '''\n    Write a function to find the volume of a sphere inside a torus.\n    '''\n    vol = 4/3 * math.pi * r1**2 * h1 * h2 + r1**2 * h1 * h",
        "num_ids": 33
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi*r**2*h)\n",
        "num_ids": 16
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #h = height\n    #r = radius\n    v = (math.pi*r**2)*(h/3)\n    return v\ndef volume_cone2(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #h = height\n    #r = radius\n    if h <= 0 or r <= 0:\n        raise ValueError\n    else:\n        v = (math.pi*r**2)*(h/3)\n        return v\n",
        "num_ids": 56
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (math.pi*r*r*h)/3\n    return volume\n",
        "num_ids": 22
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume\nprint(volume_cone(2,3))\n",
        "num_ids": 30
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * (r ** 2) * h\nprint(volume_cone(1,10))",
        "num_ids": 26
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = (r**2)*(math.pi)\n    vol = vol*(h/math.sqrt(r**2 + h**2))\n    return vol\n",
        "num_ids": 42
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #This is a Formula to determine volume of a cone\n    #v=pi*r^2*h\n    return (math.pi*(r**2)*h)\n",
        "num_ids": 42
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r**2*h\n",
        "num_ids": 14
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i < n:\n        i = i << 1\n    return i\n",
        "num_ids": 25
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while (n > 0):\n        n = n - 1\n        if (n & 0x01 == 0):\n            print(\"the highest power of 2 is: \", n)\n            return n\n",
        "num_ids": 47
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Finding the smallest power of 2 that is greater than or equal to n. \n    # for this we can use the formula: 2 ** i <= n \n    # i.e. if the number is greater than the 2 ** i, the number can be divided by 2 and we keep dividing. \n    i = 0 \n    while (2 ** i) <= n:\n        i += 1\n    \n    return i \n    ",
        "num_ids": 99
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    for i in range(n+1): \n    #    print(i,2**i)\n        if 2**i <= n: \n            return i\n    return i\n",
        "num_ids": 44
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max_power_of_2 = 1\n    while(max_power_of_2 < n):\n        max_power_of_2 = max_power_of_2 << 1\n    return max_power_of_2\n",
        "num_ids": 56
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    x = 1\n    while True:\n        if (2**x) > n:\n            return x-1\n        x+=1\n",
        "num_ids": 34
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        for i in range(3, n + 1):\n            if i % 2!= 0:\n                continue\n            if i == n:\n                return i\n            elif i > n:\n                return i-1\n",
        "num_ids": 80
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    power = 0\n    while n >= 4:\n        n = n >> 1\n        power += 1\n    return power \n",
        "num_ids": 33
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max = 0\n    if n == 0:\n        return 0\n    while n >= 1:\n        if n % 2 == 0:\n            n = n/2\n            if n == 1:\n                return 1\n        else:\n            n = n - 1\n            if n == 1:\n                return 1\n    return max\n",
        "num_ids": 78
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 0:\n        if (n & (n-1)) == 0:\n            return n\n        n = n - 1\n    \n    \n    \n    \n",
        "num_ids": 42
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 2: \n        return n\n    lucas_list = []\n    for x in range(1, n + 1):\n        lucas_list.append(lucas_list[x - 1] + lucas_list[x - 2])\n    return lucas_list[-1]\n",
        "num_ids": 77
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return lucas(n - 1) + lucas(n - 2)\n",
        "num_ids": 35
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n - 1) + find_lucas(n - 2)\n",
        "num_ids": 56
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: return 2\n    if n == 1: return 1\n    return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 44
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # The index of the lucas number \n    count = 2\n    while n > count:\n        count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # basically the fib sequence is a sequence of 2 fib numbers for a number n\n    lucas = 0\n    fib = 1\n    # fib1, fib2 = 0, 1\n    # for i in range(2, n + 1):\n    for i in range(2, n + 1):\n        lucas = fib + fib\n        fib = lucas\n    return lucas\n",
        "num_ids": 93
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = 1\n    for i in range(n):\n        lucas = lucas + lucas\n    return lucas\n",
        "num_ids": 34
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: return 1\n    prev = 0\n    curr = 1\n    for i in range(1, n+1):\n        temp = curr\n        curr = curr + prev\n        prev = temp\n    return curr\n",
        "num_ids": 60
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_n = 2\n    while n > 0:\n        lucas_n += 1\n        n -= 1\n    return lucas_n\n",
        "num_ids": 39
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    else:\n        return find_lucas(n-1)+1\n",
        "num_ids": 31
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n",
        "num_ids": 37
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return list_[:] + [string.format(x) for x in list_]\n",
        "num_ids": 23
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [format(element, string) for element in list_]\n",
        "num_ids": 18
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.append(string)\n    return list_\n",
        "num_ids": 15
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.extend([string])\n    return list_\n",
        "num_ids": 16
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]\n",
        "num_ids": 20
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(element) for element in list_]\n",
        "num_ids": 18
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n",
        "num_ids": 37
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for index in range(len(list_)):\n        list_[index] = list_[index] + '{0}'.format(string)\n    return list_\n",
        "num_ids": 43
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.append(string)\n    return list_\n    \n",
        "num_ids": 17
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    new_dictionary = {}\n    for i in range(len(l1)):\n        new_dictionary[l1[i]] = l2[i]\n    for i in range(len(l3)):\n        new_dictionary[l3[i]] = l2[i]\n    return new_dictionary\n",
        "num_ids": 79
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1.sort()\n    l2.sort()\n    l3.sort()\n    \n    dictionary = dict(zip(l1, l2))\n    dictionary.update(dict(zip(l2, l3)))\n    return dictionary\n",
        "num_ids": 61
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    convert = {l1[i]: l2[i] for i in range(len(l1))}\n    convert.update({l3[i]: l1[i] for i in range(len(l1))})\n    return convert\n",
        "num_ids": 61
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1 = l1 + l2 + l3\n    l1.sort()\n    li1 = list()\n    d1 = dict()\n    for i in l1:\n        i = str(i)\n        li1.append(i)\n    li1 = set(li1)\n    for i in li1:\n        d1[i] = 0\n    for i in l1:\n        i = str(i)\n        d1[i] += 1\n    print(d1)\n    ",
        "num_ids": 121
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    t1 = []\n    t2 = []\n    t3 = []\n    if l1:\n        t1.append(l1[0])\n        t2.append(l1[1])\n        t3.append(l1[2])\n    if l2:\n        t1.append(l2[0])\n        t2.append(l2[1])\n        t3.append(l2[2])\n    if l3:\n        t1.append(l3[0])\n        t2.append(l3[1])\n        t3.append(l3[2])\n    return (t1, t2, t3)\n",
        "num_ids": 159
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    for i in range(0, len(l1)):\n        dictionary[l1[i]] = l2[i]\n        dictionary[l2[i]] = l3[i]\n    return dictionary\n",
        "num_ids": 59
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    \n    for i in range(len(l1)):\n        key = l1[i]\n        value = l2[i]\n        if key not in d:\n            d[key] = {l3[i]: value}\n        else:\n            d[key].update({l3[i]: value})\n    \n    return d\n",
        "num_ids": 88
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for i in l1:\n        d1[i] = {}\n    for i in l2:\n        for j in d1:\n            if i in d1[j]:\n                d1[j][i] = d1[j][i] + l3[l2.index(i)]\n            else:\n                d1[j][i] = l3[l2.index(i)]\n    print(d1)\n",
        "num_ids": 110
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    for i in range(len(l1)):\n        dictionary[l1[i]] = {l2[i]:l3[i]}\n    return dictionary\nprint(convert_list_dictionary([1,2,3], ['a','b','c'], ['A','B','C']))\n",
        "num_ids": 80
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for i in l1:\n        d2 = {}\n        for j in l2:\n            d3 = {}\n            for k in l3:\n                d3[k] = None\n            d2[j] = d3\n        d1[i] = d2\n    return d1\n",
        "num_ids": 78
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return max(get_max_sum(n // 2), get_max_sum(n - 1)) + 1\n    if n % 3 == 0:\n        return max(get_max_sum(n // 3), get_max_sum(n - 1)) + 1\n    if n % 4 == 0:\n        return max(get_max_sum(n // 4), get_max_sum(n - 1)) + 1\n    if n % 5 == 0:\n        return max(get_max_sum(n // 5), get_max_sum(n - 1)) + 1\n    else:\n        return get_max_sum(n - 1) + 1\n",
        "num_ids": 176
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Your Code Here\n    if n % 2 == 1:\n        return (get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))\n    else:\n        return (get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4))\n",
        "num_ids": 104
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Solution\n    max_sum = 0\n    \n    n = int(n)\n",
        "num_ids": 23
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def is_prime(n):\n        if n < 2:\n            return False\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(math.sqrt(n) + 1), 2):\n            if n % i == 0:\n                return False\n        return True\n    def f(n):\n        if is_prime(n):\n            return n\n        return f(n/2) + f(n/3) + f(n/4) + f(n/5)\n    max_sum = 0\n    for i in range(1, n+1):\n        if max_sum < f(i):\n            max_sum = f(i)\n    return max_sum\n",
        "num_ids": 172
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    n = int(n)\n    if n <= 1:\n        return n\n    else:\n        for i in range(1, n+1):\n            max_sum = max(max_sum, max(i, (i//2) + (i//3) + (i//4) + (i//5)))\n    return max_sum\n",
        "num_ids": 90
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5))\n",
        "num_ids": 58
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n % 5 == 0:\n        return get_max_sum(n/5) + n\n    elif n % 3 == 0:\n        return get_max_sum(n/3) + n\n    elif n % 2 == 0:\n        return get_max_sum(n/2) + n\n    else:\n        return n\n    \n'''\n17. Write a Python function to calculate the factorial of a given numbers.\n'''\ndef factorial (n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\n    \n'''\n18. Write a Python function to check whether a given number is an armstrong number or not.\n'''\ndef is_armstrong_number(n):\n    temp = n\n    sum = 0\n    while (n > 0):\n        d = n % 10\n        sum += (d ** 3)\n        n = n // 10\n    return temp == sum\n    \n'''\n19. Write a Python function to check whether a number is divisible by a given number.\n'''\ndef is_divisible_by_number (n, k):\n    if n % k == 0:\n        return True\n    else:\n        return False\n        \n'''\n20. Write a Python function to check whether a string is pangram or not.\n'''\ndef is_pangram(str1):\n    flag = True\n    if len(str1) == 0:\n        return flag\n    for ch in str1:\n        if ch not in \"abcdefghijklmnopqrstuvwxyz\":\n            flag = False\n            break\n    return flag\n    \n'''\n21. Write a Python function to find the max occurring character in a given string.\n'''\ndef find_max_occuring_char (s):\n    max_occuring = 0\n    for ch in s:\n        occuring = s.count(ch)\n        if occuring > max_occuring:\n            max_occuring = occuring\n            max_char = ch\n    return max_char\n",
        "num_ids": 74
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def find_max(n, val):\n        if n == 1:\n            return val\n        if n % 2 == 0:\n            return find_max(n / 2, val + val)\n        else:\n            return find_max(n / 2, val + val + val)\n",
        "num_ids": 69
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 3:\n        return n\n",
        "num_ids": 13
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    list_of_max_length = []\n    for elem in input_list:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            list_of_max_length = [elem]\n        elif len(elem) == max_length:\n            list_of_max_length.append(elem)\n    return list_of_max_length\n",
        "num_ids": 107
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    list_max = []\n    \n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_len:\n            max_len = len(input_list[i])\n            list_max = input_list[i]\n    return list_max\n    \n",
        "num_ids": 82
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = -1\n    max_value = -1\n    for value in input_list:\n        if len(value) >= max_length:\n            max_length = len(value)\n            max_value = value\n    return max_value\n",
        "num_ids": 62
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if not input_list:\n        return []\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_length_list = item\n    return max_length_list\n",
        "num_ids": 69
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for ele in input_list:\n        if len(ele) > max_length:\n            max_length = len(ele)\n    for ele in input_list:\n        if len(ele) == max_length:\n            return ele\n",
        "num_ids": 65
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    list_lengths = []\n    for i in input_list:\n        list_lengths.append(len(i))\n    max_length = max(list_lengths)\n    return max_length\n",
        "num_ids": 51
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n    return max_length\n",
        "num_ids": 68
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(max(input_list, key=len))\n",
        "num_ids": 20
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n",
        "num_ids": 15
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        return None\n    max_len = 0\n    max_len_list = []\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_len:\n            max_len = len(input_list[i])\n            max_len_list = []\n            max_len_list.append(input_list[i])\n        elif len(input_list[i]) == max_len:\n            max_len_list.append(input_list[i])\n    return max_len_list\n",
        "num_ids": 144
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in test_tup:\n        if test_tup.count(i) > 1:\n            return False\n    return True\n",
        "num_ids": 35
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return False\n    else:\n        return True\n",
        "num_ids": 35
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                count += 1\n    if count == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 83
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_dict = dict()\n    for i in test_tup:\n        if i in test_dict:\n            test_dict[i] += 1\n        else:\n            test_dict[i] = 1\n    return len(test_dict.keys()) == len(test_tup)\n",
        "num_ids": 72
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    distinct = True\n    for i in range(1,len(test_tup)):\n        if test_tup[i] in test_tup[:i]:\n            distinct = False\n            break\n    return distinct\n",
        "num_ids": 57
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    print(\"Checking for distinct\")\n    for i in test_tup:\n        if test_tup.count(i) > 1:\n            print(i,\"exists in {}\".format(test_tup.count(i)))\n            return False\n    print(\"Test Passed\")\n    return True\n",
        "num_ids": 73
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_str = \"\".join(test_tup)\n    test_str = test_str.replace(\" \", \"\")\n    test_str = test_str.lower()\n    return len(test_str) == len(set(test_str))\n",
        "num_ids": 62
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    lst = list(test_tup)\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if i!= j and lst[i] == lst[j]:\n                return False\n    return True\n",
        "num_ids": 67
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # print(sorted(test_tup))\n    if len(set(sorted(test_tup))) == len(test_tup):\n        return True\n    else:\n        return False\n",
        "num_ids": 50
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Steps:\n    # 1. Take input from the user\n    # 2. Check if there is at least one unique character\n    # 3. If yes, return the first character\n    # 4. If no, return -1\n    # 5. If there are repeats, return the first character which is not repeated\n",
        "num_ids": 72
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char) == 1:\n            return char\n    return -1\n",
        "num_ids": 32
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_set = set()\n    for i in range(len(str1)):\n        if str1[i] not in char_set:\n            char_set.add(str1[i])\n        else:\n            return str1[i]\n    return None\n",
        "num_ids": 66
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    if len(str1) > 0:\n        d = {}\n        for i in range(len(str1)):\n            if str1[i] not in d:\n                d[str1[i]] = i\n",
        "num_ids": 64
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to keep track of the count of each character\n    dict1 = {}\n    # for each character in the string, increase the count in the dictionary\n    for ch in str1:\n        if ch in dict1:\n            dict1[ch] += 1\n        else:\n            dict1[ch] = 1\n",
        "num_ids": 77
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if not isinstance(str1, str):\n        raise TypeError(\"Input should be string\")\n    \n    list_str = list(str1)\n    char_set = set(list_str)\n    \n    for c in char_set:\n        count = 0\n        for i in list_str:\n            if i == c:\n                count += 1\n        \n        if count == 1:\n            return c\n            \n    return None\n",
        "num_ids": 106
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Tries to find a character that is not repeated\n    for i in range(len(str1)):\n        # Check if the character is repeated\n        if str1.count(str1[i])!= 1:\n            # Return the first non-repeated character\n            return str1[i]\n    # If there is no character in the string\n    return 'No non-repeated character found!'\n",
        "num_ids": 96
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    d = {}\n    for i in range(len(str1)):\n        if str1[i] not in d.keys():\n            d[str1[i]] = 1\n        else:\n            d[str1[i]] += 1\n    for j in d:\n        if d[j] == 1:\n            return j\n    return \"No non-repeated character found!\"\n",
        "num_ids": 93
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) == 1:\n            return str1[i]\n    return -1\n",
        "num_ids": 44
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict1={}\n    for i in str1:\n        if i not in dict1:\n            dict1[i]=1\n        else:\n            dict1[i]=dict1[i]+1\n    for i in dict1:\n        if dict1[i]==1:\n            return i\n    return''\n",
        "num_ids": 77
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    #your code here\n    if string == re.search(regex,string).group(0):\n        return True\n    else:\n        return False\n    #return True if string[0] == string[-1] else False\n",
        "num_ids": 56
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    print(re.search(regex,string))\ncheck_char('banana')\n",
        "num_ids": 23
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    s = re.search(regex,string)\n    if s:\n        return True\n    return False\n",
        "num_ids": 28
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return True if re.match(regex,string) else False\n",
        "num_ids": 18
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string.startswith('a') and string.endswith('a'):\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string) is not None:\n        return True\n    else:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (len(string) > 1) and (len(string) == len(string.replace(string[0], ''))):\n        print(\"True\")\n    else:\n        print(\"False\")\n",
        "num_ids": 49
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # your code here\n    return True if regex.match(string) else False\n",
        "num_ids": 21
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(string[0] == string[-1]):\n        print(\"True\")\n    else:\n        print(\"False\")\n",
        "num_ids": 33
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (len(string) >= 1) and (len(string) <= 100):\n        if re.match(regex, string):\n            if re.match(regex, string[0]) and re.match(regex, string[-1]):\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 90
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    data = sorted([a,b,c])\n    if data[1] == data[0] and data[1] == data[2]:\n        return data[0]\n    elif data[1] == data[0]:\n        return data[1]\n    elif data[1] == data[2]:\n        return data[1]\n    else:\n        return (data[1] + data[2])/2\n",
        "num_ids": 102
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a = a - b - c\n    if a % 2 == 0:\n        return a/2 + b/2\n    else:\n        return a / 2 + b / 2 + c / 2\n",
        "num_ids": 48
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    nums = [a,b,c]\n    nums.sort()\n    #print(nums)\n    if len(nums)%2==0:\n        med = (nums[int(len(nums)/2)] + nums[int(len(nums)/2)-1])/2\n        print('The median of the three numbers is:'+ str(med))\n    else:\n        med = nums[int(len(nums)/2)]\n        print('The median of the three numbers is:'+ str(med))\n    return med\n",
        "num_ids": 134
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return (a+b+c)/2\n",
        "num_ids": 13
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a >= b and a >= c:\n        if a == b:\n            if b == c:\n                median = a\n            else:\n                median = b\n        else:\n            if b == c:\n                median = c\n            else:\n                median = a\n    elif b >= a and b >= c:\n        if b == a:\n            if a == c:\n                median = b\n            else:\n                median = a\n        else:\n            if a == c:\n                median = c\n            else:\n                median = b\n    elif c >= a and c >= b:\n        if c == a:\n            if a == b:\n                median = a\n            else:\n                median = b\n        else:\n            if a == b:\n                median = b\n            else:\n                median = c\n    return median\n",
        "num_ids": 212
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b < c:\n        return b\n    elif a < c < b:\n        return c\n    elif b < a < c:\n        return a\n    elif b < c < a:\n        return c\n    elif c < a < b:\n        return a\n    elif c < b < a:\n        return b\n",
        "num_ids": 85
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    nums = [a,b,c]\n    nums.sort()\n    if nums[1] == nums[2] and nums[0] == nums[1]:\n        return nums[0]\n    elif nums[1] == nums[2]:\n        return (nums[1] + nums[0]) / 2\n    elif nums[0] == nums[2]:\n        return (nums[1] + nums[0]) / 2\n    elif nums[0] == nums[1]:\n        return (nums[1] + nums[2]) / 2\n    else:\n        return nums[1]\n",
        "num_ids": 163
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    list_of_nums = (a,b,c)\n    list_of_nums.sort()\n    print(list_of_nums)\n    if len(list_of_nums) % 2 == 1:\n        return list_of_nums[len(list_of_nums) // 2]\n    else:\n        return (list_of_nums[len(list_of_nums) // 2] + list_of_nums[len(list_of_nums) // 2 - 1]) / 2\nprint(median_numbers(1,2,3))\n",
        "num_ids": 145
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a,b,c = sorted([a,b,c])\n    if a+b > c:\n        if a+c > b:\n            return a\n        else:\n            return c\n    else:\n        if b+c > a:\n            return b\n        else:\n            return a\n            \n            \n    \n",
        "num_ids": 79
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    assert a < b < c\n    assert b > c\n    assert c > a > b\n    assert c > a < b\n    assert a > b > c\n    assert b < c < a\n    assert a < b < c and b > c > a\n    assert a < b < c and a > c > b\n    assert b < c < a and a > c > b\n    assert a < b < c and a > c > b and b < c < a\n    assert a < b < c and a > c > b and b < c < a\n    assert b > c > a and a < b < c\n    assert a < b < c and a > c > b and b < c < a\n    assert b > c > a and a < b < c\n    assert c > a > b and b < c < a\n    assert c > a > b and b < c < a\n    assert c > a > b and a < c < b\n    assert a > c > b and b < c < a\n    assert a < c > b and b < c < a\n    assert b < c > a and a < c < b\n    assert a > c > b and b < c < a and a < b < c\n    assert b < c > a and a < b < c\n    assert c > a > b and b < c < a and b > c > a\n    assert c > a > b and a < c < b\n    assert c > a > b and a < c < b and b < c < a\n    assert a < b < c and b > c > a and a < c < b\n    assert b < c < a and b > c > a and c < b < a\n    assert c < a < b and c > a > b\n    assert b < c < a and a > c > b and a < c < b\n    assert b < c < a and a > c > b and b < c < a\n    assert c > a > b and a < c < b\n    assert a < b < c and a > c > b and b < c < a\n    assert a < b < c and a > c > b and b < c < a\n    assert a < b < c and a > c > b and b < c < a\n    assert a < b < c and a > c > b and b < c < a\n    assert a > c > b and b < c < a and a < b < c\n    assert b < c < a and a < c < b\n    assert a < b < c and a > c > b and b < c < a\n    assert b < c < a and b > c > a and c < b < a\n    assert c > a > b and a < c < b and b < c < a\n    assert c > a > b and a < c < b and b < c < a\n    assert c > a > b and a < c < b and b < c < a\n    assert a < b < c and a > c > b and a < c < b\n    assert b < c < a and a < c < b\n    assert c < a < b and c > a > b and c < a < b\n    assert c < a < b and c > a > b and c < a < b\n    assert a < b < c and c > a > b and b < c < a\n    assert a < b < c and c > a > b and c < a < b\n    assert a > c > b and b < c < a and a < c < b\n    assert b < c < a and a < c < b\n    assert b < c < a and a > c > b and b < c < a\n    assert c < a < b and b < c < a\n    assert a < b < c and b < c < a\n    assert b > c > a and a < b < c and a < c < b\n    assert c > a > b and b < c < a and a < c < b\n    assert c > a > b and a < c < b and b < c < a\n    assert a < b < c and a > c > b and a < c < b\n    assert a < b < c and a > c > b and b < c < a\n    assert a < b < c and a > c > b and b < c < a\n    assert a < b < c and a > c > b and b < c < a\n    assert a > c > b and b < c < a and a < c < b\n    assert b < c < a and a < c < b\n    assert a < b < c and b > c > a and a < c < b\n    assert a < b < c and c > a > b and c < a < b\n    assert a < b < c and c > a > b and a < c < b\n    assert a < b < c and a > c > b and b < c < a\n    assert a < b < c and a > c > b and b < c < a\n    assert a < b < c and a > c > b and b < c < a\n    assert a < b < c and a > c > b and b < c < a\n    assert b < c < a and a < c < b\n    assert a < b < c and b > c > a and a < c < b\n    assert a < b < c and b > c > a and a < c < b\n    assert a < b < c and a > c > b and b < c < a\n    assert a < b < c and a > c > b and b < c < a\n    assert a < b < c and a > c > b and b < c < a\n    assert a < b < c and a > c > b and b < c < a\n    assert c > a > b and a < c < b and b < c < a\n    assert b < c < a and a < c < b\n    assert a < b < c and b > c > a and a < c < b\n    assert a < b < c and a > c > b and b < c < a\n    assert a < b < c and a > c > b and b < c < a\n    assert b < c < a and a < c < b\n    assert a < b < c and b > c > a and a < c < b\n    assert a < b < c and a > c > b and b < c < a\n    assert a < b < c and a > c > b and b < c < a\n    assert a < b < c and a > c > b and b < c < a\n    assert a < b < c and a > c > b and b < c < a\n    assert a > c > b and b < c < a and a < c < b\n    assert b < c < a and a < c < b\n    assert a < b < c and b > c > a and a < c < b\n    assert a < b < c and a > c > b and b < c < a\n    assert a < b < c and a > c > b and b < c < a\n    assert b < c < a and a < c < b\n    assert a < b < c and b > c > a and a < c < b\n    assert a < b < c and a > c > b and b < c < a\n    assert a < b < c and a > c > b and b < c < a\n    assert a < b < c and a > c > b and b < c < a\n    assert a < b < c and a > c > b and b < c < a\n    assert a > c > b and b < c < a and a < c < b\n    assert a < b < c and a > c > b and a < c < b\n    assert a < b < c and a > c > b and b < c < a\n    assert a < b < c and a > c > b and b < c < a\n    assert a < b < c and a > c > b and b < c < a\n    assert a < b < c and a > c > b and b < c < a\n    assert a < b < c and a > c > b and b < c < a\n    assert a < b < c and a > c > b and b < c < a\n    assert a > c > b and b < c < a and a < c < b\n    assert a < b < c and a > c > b and a < c < b\n    assert a < b < c and a > c > b and b < c < a\n    assert a < b < c and a > c > b and b < c < a\n    assert a < b < c and a > c > b and b < c < a\n    assert a < b < c and a > c > b and b < c < a\n    assert a ",
        "num_ids": 2016
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for i in nums:\n        sum_list.append(sum(int(i) for i in str(i)))\n    return sum_list\n",
        "num_ids": 44
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for number in nums:\n        # print(number)\n        # print(int(number))\n        sum_of_digits += int(number)\n    return sum_of_digits\n",
        "num_ids": 58
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    num_sum = 0\n    for num in nums:\n        num_sum += int(num)\n    return num_sum\n",
        "num_ids": 33
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(int, nums))\n",
        "num_ids": 14
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    # if len(nums) == 1:\n    #     return sum(nums)\n    \n    if len(nums) == 2:\n        return sum(nums)\n",
        "num_ids": 60
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    if nums == [] or not nums:\n        return 0\n    else:\n        total = 0\n        for i in nums:\n            total += sum_of_digits(int(i))\n        return total\n",
        "num_ids": 54
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum_of_digits(num)\n    return total\n",
        "num_ids": 32
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(i) for i in str(nums))\n",
        "num_ids": 19
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    for num in nums:\n        digits = 0\n        while num > 0:\n            digits = digits + int(num%10)\n            num = int(num/10)\n        print(digits)\n",
        "num_ids": 53
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n",
        "num_ids": 12
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup1[1], test_tup2[0] ^ test_tup2[1])\n",
        "num_ids": 40
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(bitwise_operation(element1, element2) for element1, element2 in zip(test_tup1, test_tup2))\n    \ndef bitwise_and(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise and operation across the given tuples.\n    '''\n    return tuple(bitwise_operation(element1, element2) for element1, element2 in zip(test_tup1, test_tup2))\n",
        "num_ids": 39
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup1[1], test_tup2[0] ^ test_tup2[1])\n",
        "num_ids": 40
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    tup_1, tup_2 = test_tup1[0], test_tup2[0]\n    \n    return (tup_1, tup_2, int(tup_1) ^ int(tup_2))\n    \n    \ndef bitwise_and(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise and operation across the given tuples.\n    '''\n    tup_1, tup_2 = test_tup1[0], test_tup2[0]\n    \n    return (tup_1, tup_2, int(tup_1) & int(tup_2))\n",
        "num_ids": 61
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n",
        "num_ids": 40
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (int(test_tup1[0]) ^ int(test_tup1[1]) ^ int(test_tup2[0]) ^ int(test_tup2[1]),)\n",
        "num_ids": 50
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tuple = ()\n    for i in range(len(test_tup1)):\n        result_tuple = result_tuple + (test_tup1[i] ^ test_tup2[i],)\n    return result_tuple\n",
        "num_ids": 64
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n",
        "num_ids": 40
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for i in test_list:\n        for j in test_list:\n            if i[0] == j[0] and i[1] == j[1] and i[2] == j[2]:\n                count += 1\n",
        "num_ids": 62
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    s = set(test_list)\n    return len(s)\n",
        "num_ids": 19
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][0] and test_list[i][1] == test_list[j][1]:\n                count += 1\n    print('total tuple:', count)\n    \n    \ndef find_duplicates(test_list):\n    '''\n    Write a function to find and print all duplicate entries in the list.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                new_list.append(test_list[i])\n    print('duplicate list:', new_list)\n    \n    \ndef find_unique(test_list):\n    '''\n    Write a function to find and print all unique entries in the list.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        if test_list[i] not in new_list:\n            new_list.append(test_list[i])\n    print('unique list:', new_list)\n    \n    \ndef get_dict_max_min(test_list):\n    '''\n    Write a function to find and print the max and min values of the given list.\n    '''\n    max_val = test_list[0]\n    min_val = test_list[0]\n    for i in range(len(test_list)):\n        if max_val < test_list[i]:\n            max_val = test_list[i]\n        if min_val > test_list[i]:\n            min_val = test_list[i]\n    print('max value:', max_val)\n    print('min value:', min_val)\n    \n    \ndef get_key_max_min(test_list):\n    '''\n    Write a function to find and print the max and min keys of the given list.\n    '''\n    max_val = max(test_list, key=lambda x: x[0])\n    min_val = min(test_list, key=lambda x: x[0])\n    print('max value:', max_val)\n    print('min value:', min_val)\n    \n    \ndef get_index_max_min(test_list):\n    '''\n    Write a function to find and print the max and min indices of the given list.\n    '''\n    max_val = max(enumerate(test_list), key=lambda x: x[1])\n    min_val = min(enumerate(test_list), key=lambda x: x[1])\n    print('max value:', max_val)\n    print('min value:', min_val)\n    \n    \ndef get_index_max_min_value(test_list):\n    '''\n    Write a function to find and print the max and min indices of the given list along with their corresponding values.\n    '''\n    max_val = max(enumerate(test_list), key=lambda x: x[1])\n    min_val = min(enumerate(test_list), key=lambda x: x[1])\n    print('max value:', max_val, max_val[1])\n    print('min value:', min_val, min_val[1])\n    \n    \ndef get_index_max_min_value_count(test_list):\n    '''\n    Write a function to find and print the maximum value, index and count of the given list.\n    '''\n    max_val = max(enumerate(test_list), key=lambda x: x[1])\n    print('max value:', max_val)\n    print('max count:', test_list.count(max_val[1]))\n    print('max index:', max_val[0])\n    \n    \ndef get_index_max_min_value_count_tuples(test_list):\n    '''\n    Write a function to find and print the maximum value, index and count of the given list.\n    '''\n    max_val = max(enumerate(test_list), key=lambda x: x[1])\n    print('max value:', max_val)\n    print('max count:', test_list.count(max_val[1]))\n    print('max index:', max_val[0])\n    \n    \ndef get_index_max_min_value_count_tuples_frequency(test_list):\n    '''\n    Write a function to find and print the maximum value, index and count of the given list.\n    '''\n    max_val = max(enumerate(test_list), key=lambda x: x[1])\n    print('max value:', max_val)\n    print('max count:', test_list.count(max_val[1]))\n    print('max index:', max_val[0])\n    \n    \ndef get_key_max_min_value_count(test_list):\n    '''\n    Write a function to find and print the maximum value, key and count of the given list.\n    '''\n    max_val = max(enumerate(test_list), key=lambda x: x[1])\n    print('max value:', max_val)\n    print('max count:', test_list.count(max_val[1]))\n    print('max index:', max_val[0])\n    \n    \ndef get_key_max_min_value_count_tuples(test_list):\n    '''\n    Write a function to find and print the maximum value, key and count of the given list.\n    '''\n    max_val = max(enumerate(test_list), key=lambda x: x[1])\n    print('max value:', max_val)\n    print('max count:', test_list.count(max_val[1]))\n    print('max index:', max_val[0])\n    \n    \ndef get_key_max_min_value_count_tuples_frequency(test_list):\n    '''\n    Write a function to find and print the maximum value, key and count of the given list.\n    '''\n    max_val = max(enumerate(test_list), key=lambda x: x[1])\n    print('max value:', max_val)\n    print('max count:', test_list.count(max_val[1]))\n    print('max index:', max_val[0])\n    \n    \ndef get_duplicate_list(test_list):\n    '''\n    Write a function to check if a list contains any duplicate values.\n    '''\n    test_list = list(set(test_list))\n    if len(test_list) == len(test_list):\n        print('False')\n    else:\n        print('True')\n        \n        \ndef get_unique_list(test_list):\n    '''\n    Write a function to check if a list contains any duplicate values.\n    '''\n    test_list = list(set(test_list))\n    if len(test_list) == len(test_list):\n        print('True')\n    else:\n        print('False')\n        \n        \ndef remove_duplicates(test_list):\n    '''\n    Write a function to remove duplicates from the given list.\n    '''\n    test_list = list(set(test_list))\n    print('List after removing duplicates:', test_list)\n    \n    \ndef get_new_list(test_list):\n    '''\n    Write a function to convert the given list of numbers into a list of words.\n    '''\n    test_list = list(test_list)\n    test_list = test_list[1:]\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i].split(' ')\n    test_list = list(map(lambda x: x[1], test_list))\n    print('List after converting the given list into a list of words:', test_list)\n    \n    \ndef get_common_items(test_list):\n    '''\n    Write a function to find and print all common items in the given lists.\n",
        "num_ids": 19
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # initialize a count variable to 0\n    count = 0\n    # loop over each element in the list\n    for i in test_list:\n        # if the element is not None, add 1 to the count\n        if i:\n            count += 1\n    # return the count variable\n    return count\n",
        "num_ids": 71
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    list_elements = []\n    for i in test_list:\n        if i not in list_elements:\n            list_elements.append(i)\n    return len(list_elements)\n",
        "num_ids": 51
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    for ele in test_list:\n        if len(set(ele)) == len(ele):\n            return len(set(ele))\n",
        "num_ids": 34
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # we can use Counter to count the number of occurences\n    # see the examples below:\n    # https://docs.python.org/3.5/library/collections.html#collections.Counter\n    # https://stackoverflow.com/questions/2190413/how-to-count-the-occurrences-of-each-element-in-a-list\n    # https://docs.python.org/3.5/library/itertools.html#itertools.count\n    # https://docs.python.org/3.5/library/itertools.html#itertools.combinations\n    # https://docs.python.org/3.5/library/itertools.html#itertools.permutations\n    # https://docs.python.org/3.5/library/itertools.html#itertools.product\n    # https://docs.python.org/3.5/library/itertools.html#itertools.islice\n    # https://docs.python.org/3.5/library/itertools.html#itertools.accumulate\n    # https://docs.python.org/3.5/library/itertools.html#itertools.chain\n    # https://docs.python.org/3.5/library/itertools.html#itertools.product\n    # https://docs.python.org/3.5/library/itertools.html#itertools.chain.from_iterable\n    # https://docs.python.org/3.5/library/itertools.html#itertools.repeat\n    # https://docs.python.org/3.5/library/itertools.html#itertools.compress\n    # https://docs.python.org/3.5/library/itertools.html#itertools.compress\n    # https://docs.python.org/3.5/library/itertools.html#itertools.groupby\n    # https://docs.python.org/3.5/library/itertools.html#itertools.filterfalse\n    # https://docs.python.org/3.5/library/itertools.html#itertools.islice\n    # https://docs.python.org/3.5/library/itertools.html#itertools.permutations\n    # https://docs.python.org/3.5/library/itertools.html#itertools.product\n    # https://docs.python.org/3.5/library/itertools.html#itertools.repeat\n    # https://docs.python.org/3.5/library/itertools.html#itertools.compress\n    # https://docs.python.org/3.5/library/itertools.html#itertools.compress\n    # https://docs.python.org/3.5/library/itertools.html#itertools.groupby\n    # https://docs.python.org/3.5/library/itertools.html#itertools.filterfalse\n    # https://docs.python.org/3.5/library/itertools.html#itertools.islice\n    # https://docs.python.org/3.5/library/itertools.html#itertools.permutations\n    # https://docs.python.org/3.5/library/itertools.html#itertools.product\n    # https://docs.python.org/3.5/library/itertools.html#itertools.repeat\n    # https://docs.python.org/3.5/library/itertools.html#itertools.compress\n    # https://docs.python.org/3.5/library/itertools.html#itertools.compress\n    # https://docs.python.org/3.5/library/itertools.html#itertools.groupby\n    # https://docs.python.org/3.5/library/itertools.html#itertools.filterfalse\n    # https://docs.python.org/3.5/library/itertools.html#itertools.islice\n    # https://docs.python.org/3.5/library/itertools.html#itertools.permutations\n    # https://docs.python.org/3.5/library/itertools.html#itertools.product\n    # https://docs.python.org/3.5/library/itertools.html#itertools.repeat\n    # https://docs.python.org/3.5/library/itertools.html#itertools.compress\n    # https://docs.python.org/3.5/library/itertools.html#itertools.compress\n    # https://docs.python.org/3.5/library/itertools.html#itertools.groupby\n    # https://docs.python.org/3.5/library/itertools.html#itertools.filterfalse\n    # https://docs.python.org/3.5/library/itertools.html#itertools.islice\n    # https://docs.python.org/3.5/library/itertools.html#itertools.permutations\n    # https://docs.python.org/3.5/library/itertools.html#itertools.product\n    # https://docs.python.org/3.5/library/itertools.html#itertools.repeat\n    # https://docs.python.org/3.5/library/itertools.html#itertools.compress\n    # https://docs.python.org/3.5/library/itertools.html#itertools.compress\n    # https://docs.python.org/3.5/library/itertools.html#itertools.groupby\n    # https://docs.python.org/3.5/library/itertools.html#itertools.filterfalse\n    # https://docs.python.org/3.5/library/itertools.html#itertools.islice\n    # https://docs.python.org/3.5/library/itertools.html#itertools.permutations\n    # https://docs.python.org/3.5/library/itertools.html#itertools.product\n    # https://docs.python.org/3.5/library/itertools.html#itertools.repeat\n    # https://docs.python.org/3.5/library/itertools.html#itertools.compress\n    # https://docs.python.org/3.5/library/itertools.html#itertools.compress\n    # https://docs.python.org/3.5/library/itertools.html#itertools.groupby\n    # https://docs.python.org/3.5/library/itertools.html#itertools.filterfalse\n    # https://docs.python.org/3.5/library/itertools.html#itertools.islice\n    # https://docs.python.org/3.5/library/itertools.html#itertools.permutations\n    # https://docs.python.org/3.5/library/itertools.html#itertools.product\n    # https://docs.python.org/3.5/library/itertools.html#itertools.repeat\n    # https://docs.python.org/3.5/library/itertools.html#itertools.compress\n    # https://docs.python.org/3.5/library/itertools.html#itertools.compress\n    # https://docs.python.org/3.5/library/itertools.html#itertools.groupby\n    # https://docs.python.org/3.5/library/itertools.html#itertools.filterfalse\n    # https://docs.python.org/3.5/library/itertools.html#itertools.islice\n    # https://docs.python.org/3.5/library/itertools.html#itertools.permutations\n    # https://docs.python.org/3.5/library/itertools.html#itertools.product\n    # https://docs.python.org/3.5/library/itertools.html#itertools.repeat\n    # https://docs.python.org/3.5/library/itertools.htm",
        "num_ids": 2013
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    s = set()\n    for i in test_list:\n        s.add(i)\n    \n    return len(s)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2012
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    if len(test_list) == 0:\n        return 0\n    dict = {}\n    for item in test_list:\n        for i in item:\n            if i in dict.keys():\n                dict[i] += 1\n            else:\n                dict[i] = 1\n    return len(dict)\n",
        "num_ids": 75
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    return len(unique_list)\n",
        "num_ids": 47
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple([sum(x) for x in zip(test_tup1, test_tup2)])\n",
        "num_ids": 29
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(map(operator.add, test_tup1, test_tup2))\n",
        "num_ids": 25
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup_1 = list(test_tup1)\n    test_tup_2 = list(test_tup2)\n    res = []\n    for x, y in zip(test_tup_1, test_tup_2):\n        if isinstance(x, tuple) and isinstance(y, tuple):\n            res.append(add_nested_tuples(x, y))\n        else:\n            res.append(x + y)\n    return tuple(res)\n",
        "num_ids": 121
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        # print(\"i value: \", i)\n        # print(\"test_tup1[i]: \", test_tup1[i])\n        # print(\"test_tup2[i]: \", test_tup2[i])\n        test_tup1[i] += test_tup2[i]\n    return test_tup1\n",
        "num_ids": 100
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    for i in range(len(test_tup1)):\n        if len(test_tup1[i]) == 2:\n            test_tup1[i] = (test_tup1[i][0], int(test_tup1[i][1]) + int(test_tup2[i]))\n        else:\n            test_tup1[i] = (test_tup1[i][0], test_tup1[i][1] + test_tup2[i])\n    return tuple(test_tup1)\n",
        "num_ids": 168
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(tuple(map(lambda x, y: x + y, tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n",
        "num_ids": 52
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    res = []\n    for i in range(len(test_tup1)):\n        res.append((test_tup1[i][0] + test_tup2[i][0], test_tup1[i][1] + test_tup2[i][1]))\n    return res\n",
        "num_ids": 76
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(map(operator.add, test_tup1, test_tup2))\n",
        "num_ids": 25
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return (list(map(lambda x,y: x+y, test_tup1[0], test_tup2[0])),\n            list(map(lambda x,y: x+y, test_tup1[1], test_tup2[1])))\n",
        "num_ids": 68
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = []\n    for i in range(0, len(test_tup1)):\n        new_tup.append((test_tup1[i] + test_tup2[i]))\n    return tuple(new_tup)\n",
        "num_ids": 65
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n        \n",
        "num_ids": 23
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\nminimum(5,2)\n",
        "num_ids": 18
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n",
        "num_ids": 11
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\nprint(minimum(5,6))\n",
        "num_ids": 30
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        return a\n    else:\n        return b\n    \n    ",
        "num_ids": 25
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        small=a\n    else:\n        small=b\n    return small\n",
        "num_ids": 27
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    min = 0\n    if a < b:\n        min = a\n    else:\n        min = b\n    return min\n",
        "num_ids": 32
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\nminimum(5,6)\n",
        "num_ids": 28
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if(tuplex in tuple1):\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuplex:\n        if x in tuple1:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuplex:\n        if item in tuple1:\n            return True\n        else:\n            return False\n",
        "num_ids": 31
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # import pdb;pdb.set_trace()\n    tuplex = tuplex[0]\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n",
        "num_ids": 50
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i==tuple1:\n            return True\n        else:\n            return False\n    return False\n",
        "num_ids": 36
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(\"yes\")\n    else:\n        print(\"no\")\n",
        "num_ids": 28
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    p = 0\n    y = x\n    while x > 0:\n        p = p + (x%10)\n        x = x // 10\n    if (p + y) % 2!= 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 63
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # x=int(input(\"Enter the number : \"))\n    if x%2==0:\n        print(\"The parity of the number is even\")\n    else:\n        print(\"The parity of the number is odd\")\n",
        "num_ids": 54
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"{} is even\".format(x))\n    else:\n        print(\"{} is odd\".format(x))\n",
        "num_ids": 41
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x & 1:\n        return False\n    else:\n        return True\n",
        "num_ids": 21
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x%2)\n",
        "num_ids": 10
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        return False\n    else:\n        return True\n",
        "num_ids": 23
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Logic to find parity\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 30
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # If the given number is even then the parity is even\n    if (x % 2 == 0): \n        print (\"even\")\n    # Else, the parity is odd \n    else: \n        print (\"odd\")\n",
        "num_ids": 54
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x%2)==0:\n        print(\"Even\")\n    else:\n        print(\"odd\")\n",
        "num_ids": 29
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    #get the array from the user\n    n = list(str(n))\n",
        "num_ids": 21
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    import math\n",
        "num_ids": 6
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return int(''.join(sorted(list(str(n)), reverse=True)))\n",
        "num_ids": 23
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    while len(n) > 1:\n        n = max(int(n[0]) * int(n[1]), int(n[0]) + int(n[1]))\n        n = str(n)\n    return int(n)\n",
        "num_ids": 68
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # if the input number is equal to 0, the next bigger number is 1\n    if n == 0:\n        return 1\n",
        "num_ids": 31
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == 0 or n==1:\n        return n\n    a = n%10\n    b = n//10\n    return int(str(b)+str(a))\n",
        "num_ids": 44
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    for i in range(len(digits) - 1, -1, -1):\n        if digits[i] < digits[i - 1]:\n            digits[i], digits[i - 1] = digits[i - 1], digits[i]\n    return int(''.join(digits))\n",
        "num_ids": 83
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    string = str(n)\n    number = ''\n    for i in range(len(string)):\n        number += string[i]\n    number = int(number)\n    while number > 0:\n        if len(str(number)) == 1:\n            number *= 10\n            continue\n        number = int(str(number)[1:]) * 10\n        if len(str(number)) == 1:\n            number += int(str(number)[0])\n            number = int(number)\n            continue\n        if len(str(number)) == 2:\n            number += int(str(number)[0])\n            number = int(number)\n            continue\n    return number\n",
        "num_ids": 160
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num = list(str(n))\n    for i in range(len(num)):\n        if num[i] > num[i+1]:\n            for j in range(i+1, len(num)):\n                if num[j] < num[i]:\n                    num[i], num[j] = num[j], num[i]\n                    break\n            else:\n                break\n    num = int(\"\".join(num))\n    return num\n",
        "num_ids": 110
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num = str(n)\n    num_list = []\n    for i in num:\n        num_list.append(i)\n    # print(num_list)\n    max_num = max(num_list)\n    if max_num == '9':\n        return int(num)\n    for j in range(len(num_list)):\n        if max_num == num_list[j]:\n            max_num_index = j\n            break\n    if max_num_index!= len(num_list) - 1:\n        num_list[max_num_index] = '9'\n        for k in range(max_num_index + 1, len(num_list)):\n            num_list[k] = '0'\n    return int(\"\".join(num_list))\n",
        "num_ids": 192
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # print(nums1, nums2)\n    # print(len(nums1), len(nums2))\n    # print(k)\n    # O(m*n*log(k))\n    n1, n2 = len(nums1), len(nums2)\n    if n1 < k or n2 < k:\n        return []\n    # O(min(m,n)*log(k))\n    # need to sort, O(nlogk)\n    # print(nums1, nums2)\n    nums1.sort()\n    nums2.sort()\n    # print(nums1, nums2)\n    result = []\n    for i, num1 in enumerate(nums1):\n        for j, num2 in enumerate(nums2):\n            # print(num1, num2)\n            if i > j:\n                break\n            if i + j > k - 1:\n                break\n            if num1 < num2:\n                result.append([num1, num2])\n                # print(num1, num2)\n                break\n    return result\n",
        "num_ids": 268
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    h = []\n    for i in range(k):\n        heapq.heappush(pq,(nums1[i]+nums2[i],i,0))\n    for i in range(k):\n        heapq.heappush(h,heapq.heappop(pq)[0])\n    res = []\n    while len(res)<k:\n        res.append([nums1[heapq.heappop(h)],nums2[heapq.heappop(h)]])\n    return res\n",
        "num_ids": 142
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # nums = list(nums1) + list(nums2)\n    # heapq.heapify(nums)\n    # return heapq.nsmallest(k, nums)\n    \n    # map approach\n    # O(n)\n    def pairs_in_dict(nums, k, mapp):\n        n = len(nums)\n        nums = dict(zip(nums, range(n)))\n        return map(lambda x: (x[1], x[0]), heapq.nsmallest(k, nums.items(), lambda x: x[1]))\n    \n    return pairs_in_dict(nums1, k, nums2)\n",
        "num_ids": 166
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # O(n1 + n2)\n    # O(n1 + n2)\n    # heap = []\n    # for i in range(k):\n    #     heapq.heappush(heap, (nums1[i] + nums2[i], i))\n    #     result = []\n    #     while heap:\n    #         value, idx = heapq.heappop(heap)\n    #         result.append((nums1[idx], nums2[idx]))\n    #     return result\n    # O(n1 * k)\n    if not nums1 or not nums2:\n        return nums1 or nums2\n    if len(nums1) >= len(nums2):\n        nums1, nums2 = nums2, nums1\n    # O(n1 * k + n2 * k)\n    minheap = [(nums1[0] + nums2[0], 0, 0)]\n    # O(n)\n    seen = set()\n    for i in range(1, len(nums1)):\n        if len(minheap) < k:\n            heapq.heappush(minheap, (nums1[i] + nums2[i], i, 0))\n            seen.add((nums1[i], nums2[i]))\n        else:\n            if (nums1[i], nums2[i]) in seen:\n                continue\n            # O(n)\n            while minheap and minheap[0][0] <= nums1[i] + nums2[i]:\n                val, idx, j = heapq.heappop(minheap)\n                seen.remove((nums1[idx], nums2[idx]))\n                heapq.heappush(minheap, (nums1[i] + nums2[i], idx, j))\n                seen.add((nums1[idx], nums2[idx]))\n    return minheap\n",
        "num_ids": 493
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k == 0:\n        return nums1\n    heap = []\n    for i in range(min(len(nums1), len(nums2))):\n        heapq.heappush(heap, (nums1[i]+nums2[i], i, 0))\n    nums1 = nums1[len(nums1)-k:]\n    nums2 = nums2[len(nums2)-k:]\n    while len(heap) > 0:\n        pair = heapq.heappop(heap)\n        nums1 = [pair[1]] + nums1\n        nums2 = [pair[2]] + nums2\n        if len(nums1) == len(nums2) == k:\n            return nums1\n        if len(nums1) > len(nums2):\n            for i in range(pair[1]+1, len(nums1)):\n                heapq.heappush(heap, (nums1[i]+nums2[0], i, 0))\n        else:\n            for i in range(pair[2]+1, len(nums2)):\n                heapq.heappush(heap, (nums1[0]+nums2[i], 0, i))\n    return nums1\n",
        "num_ids": 315
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    n = len(nums1)\n    k = min(k, n)\n    if k == 0:\n        return []\n    nums1.sort()\n    res = []\n    for i in range(n):\n        l = nums2[nums1[i] - 1]\n        if k > 0:\n            k -= 1\n            res.append([nums1[i], l])\n        else:\n            return res\n    return res\n    \ndef k_smallest_pairs_two_pointer(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    n = len(nums1)\n    k = min(k, n)\n    if k == 0:\n        return []\n    nums1.sort()\n    res = []\n    for i in range(n):\n        if k > 0:\n            k -= 1\n            res.append([nums1[i], nums2[i]])\n        else:\n            return res\n    return res\n    \ndef k_smallest_pairs_bubble_sort(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    n = len(nums1)\n    k = min(k, n)\n    if k == 0:\n        return []\n    res = []\n    nums1.sort()\n    for i in range(k):\n        res.append([nums1[i], nums2[i]])\n    return res\n    \ndef k_smallest_pairs_merge_sort(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    n = len(nums1)\n    k = min(k, n)\n    if k == 0:\n        return []\n    res = []\n    l1 = []\n    l2 = []\n    for i in range(n):\n        l1.append(nums1[i])\n        l2.append(nums2[i])\n    l1.sort()\n    l2.sort()\n    i, j = 0, 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] < l2[j]:\n            res.append([l1[i], l2[j]])\n            i += 1\n        elif l1[i] > l2[j]:\n            res.append([l1[i], l2[j]])\n            j += 1\n        else:\n            i += 1\n            j += 1\n    return res\n    \ndef k_smallest_pairs_pythagoras_sort(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    n = len(nums1)\n    k = min(k, n)\n    if k == 0:\n        return []\n    nums1.sort()\n    res = []\n    for i in range(k):\n        x = nums1[i]\n        y = nums2[i]\n        res.append([x, y])\n    for i in range(k, n):\n        x = nums1[i]\n        y = nums2[i]\n        if (x * x) + (y * y) <= (x * x) + (y * y):\n            res.append([x, y])\n        else:\n            res.append([y, x])\n    return res\n    \ndef k_smallest_pairs_fastest(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    n = len(nums1)\n    k = min(k, n)\n    if k == 0:\n        return []\n    nums1.sort()\n    res = []\n    for i in range(n):\n        l = nums2[nums1[i] - 1]\n        if k > 0:\n            k -= 1\n            res.append([nums1[i], l])\n        else:\n            return res\n    return res\n    \ndef k_smallest_pairs_pyp(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    n = len(nums1)\n    k = min(k, n)\n    if k == 0:\n        return []\n    nums1.sort()\n    res = []\n    for i in range(k):\n        l = nums2[nums1[i] - 1]\n        res.append([nums1[i], l])\n    for i in range(k, n):\n        heapq.heappush(res, (nums1[i] * nums1[i], nums1[i], nums2[i]))\n    return res\n    \ndef k_smallest_pairs_hashing(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    n = len(nums1)\n    k = min(k, n)\n    if k == 0:\n        return []\n    nums1.sort()\n    res = []\n    for i in range(k):\n        l = nums2[nums1[i] - 1]\n        res.append([nums1[i], l])\n    for i in range(k, n):\n        if nums2[i] in res:\n            continue\n        res.append([nums1[i], nums2[i]])\n    return res\n    \ndef k_smallest_pairs_chaining(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    n = len(nums1)\n    k = min(k, n)\n    if k == 0:\n        return []\n    nums1.sort()\n    res = []\n    for i in range(k):\n        l = nums2[nums1[i] - 1]\n        res.append([nums1[i], l])\n    for i in range(k, n):\n        res.append([nums1[i], nums2[i]])\n    return res\n    \ndef k_smallest_pairs_quick(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    n = len(nums1)\n    k = min(k, n)\n    if k == 0:\n        return []\n    nums1.sort()\n    res = []\n    for i in range(k):\n        l = nums2[nums1[i] - 1]\n        res.append([nums1[i], l])\n    for i in range(k, n):\n        res.append([nums1[i], nums2[i]])\n    return res\n    \ndef k_smallest_pairs_interactive(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    n = len(nums1)\n    k = min(k, n)\n    if k == 0:\n        return []\n    nums1.sort()\n    res = []\n    for i in range(k):\n        l = nums2[nums1[i] - 1]\n        res.append([nums1[i]",
        "num_ids": 83
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == len(nums2):\n        return sorted([[x,y] for x,y in zip(nums1,nums2)],key=lambda x: x[0] + x[1])[:k]\n",
        "num_ids": 62
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    arr = []\n    if k < 0:\n        return\n    if len(nums1) < 1 or len(nums2) < 1:\n        return\n    # find min and max in nums1 and nums2\n    min1, max1 = min(nums1), max(nums1)\n    min2, max2 = min(nums2), max(nums2)\n    # check min and max from nums1 and nums2 if they are same then return\n    if min1 == max1 or min2 == max2:\n        return\n    # check for size of array and increase size of array\n    if len(nums1) < len(nums2):\n        nums1, nums2 = nums2, nums1\n        min1, max1 = min2, max2\n    # create a array with size k and store all pairs in heap\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap, (nums1[i] + nums2[i], i, i))\n    # compare max of last two elements in heap and move the element to make k pairs\n    for _ in range(k):\n        curr, i, j = heapq.heappop(heap)\n        # add new pair and update minmax\n        heapq.heappush(heap, (curr, i, j))\n        if curr <= max1:\n            max1 = curr\n    # compare minmax in heap and return\n    return [x for x, _, _ in heap]\n",
        "num_ids": 373
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    from collections import deque\n    if not nums1 or not nums2:\n        return []\n    q1, q2 = deque(nums1), deque(nums2)\n    res = []\n    for i in range(min(k, len(nums1))):\n        while q1 and q1[0] <= q2[0]:\n            q1.popleft()\n        while q2 and q2[0] <= q1[0]:\n            q2.popleft()\n        res.append([q1.popleft(), q2.popleft()])\n    return res\n",
        "num_ids": 148
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    print(nums1)\n    print(nums2)\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    for i in range(1, len(nums2)):\n        while heap and heap[0][0] > nums2[i]:\n            heapq.heappop(heap)\n        heapq.heappush(heap, (nums1[heap[0][1]] + nums2[i], heap[0][1], i))\n    result = []\n    for i in range(k):\n        result.append(heap[i])\n    return result\n",
        "num_ids": 180
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            #print(list1[i],list1[j])\n            prod = list1[i][0]*list1[j][0]\n            if prod < min_product:\n                min_product = prod\n    return min_product\n",
        "num_ids": 99
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        a = (list1[i][0],list1[i][1])\n        b = (list1[i][1],list1[i][0])\n        list2.append(a)\n        list2.append(b)\n    min_tuple = tuple(min(list2))\n    return min_tuple\n",
        "num_ids": 98
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i, len(list1)):\n            min_product = min(min_product,list1[i][0]*list1[j][0])\n    return min_product\n",
        "num_ids": 73
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1 = sorted(list1)\n    product_list = []\n    for x in range(len(list1)):\n        product_list.append(list1[x][0]*list1[x][1])\n    return min(product_list)\n",
        "num_ids": 64
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 0\n    for tup in list1:\n        temp = tup[0] * tup[1]\n        if temp > min_product:\n            min_product = temp\n    return min_product\n",
        "num_ids": 55
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_num = None\n    min_num_product = None\n    for num, product in list1:\n        if min_num == None or min_num > num:\n            min_num = num\n        if min_num_product == None or min_num_product > product:\n            min_num_product = product\n    return min_num, min_num_product\n",
        "num_ids": 90
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort()\n    #print(list1)\n    min_product_list = []\n    min_product = float('inf')\n    for i in range(len(list1)-1):\n        temp_1 = list1[i]\n        temp_2 = list1[i+1]\n        prod = temp_1[0]*temp_2[0]\n        if prod < min_product:\n            min_product = prod\n            min_product_list = []\n            min_product_list.append(temp_1)\n            min_product_list.append(temp_2)\n        elif prod == min_product:\n            min_product_list.append(temp_1)\n            min_product_list.append(temp_2)\n    #print(min_product_list)\n    #min_product_list.sort()\n    return min_product_list\n",
        "num_ids": 213
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort(key=lambda x:x[0])\n    list1.sort(key=lambda x:x[1])\n    return (list1[0][0]*list1[0][1],list1[1][0]*list1[1][1])\n",
        "num_ids": 68
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min = 100000000000\n    for i in range(len(list1)):\n        if min > list1[i][0]*list1[i][1]:\n            min = list1[i][0]*list1[i][1]\n",
        "num_ids": 61
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            if list1[i] == list1[j]:\n                min_product = min(min_product, list1[i] * list1[j])\n    return min_product\n",
        "num_ids": 85
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for i in range(len(listval)):\n        if(listval[i] < min_value):\n            min_value = listval[i]\n    return min_value\n",
        "num_ids": 57
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for x in range(len(listval)):\n        if listval[x] < min_val:\n            min_val = listval[x]\n    return min_val\n",
        "num_ids": 56
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n",
        "num_ids": 10
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        min = listval[0]\n        for i in range(len(listval)):\n            if listval[i] < min:\n                min = listval[i]\n    return min\n",
        "num_ids": 83
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n",
        "num_ids": 10
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] < minval:\n            minval = listval[i]\n    return minval\n",
        "num_ids": 54
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n",
        "num_ids": 10
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 1:\n        return listval[0]\n",
        "num_ids": 21
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] < min:\n            min = listval[i]\n    return min\n",
        "num_ids": 50
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    #initialize minimum value with the first item in the list\n    min_val = listval[0]\n    #iterate through the entire list\n    for i in range(1,len(listval)):\n        #if the min_val is less than the item at the ith index\n        if min_val > listval[i]:\n            #set the new minimum value\n            min_val = listval[i]\n    #return the minimum value\n    return min_val\n",
        "num_ids": 113
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    res = ''\n    for w in word.split('_'):\n        res += w[0].upper() + w[1:]\n    return res\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n",
        "num_ids": 34
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    \n    word = re.sub('_', '', word)\n    return word.title()\n",
        "num_ids": 25
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s1 = re.sub('_',' ',word)\n    s2 = re.sub('(.)([A-Z][a-z]+)', r'\\1 \\2', s1).lower()\n    return s2[0].lower()+s2[1:]\n",
        "num_ids": 66
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not word or not isinstance(word, str):\n        return word\n    word = word.replace(\"-\", \"\")\n    word = word.replace(\"_\", \"\")\n    return word[0].lower() + word[1:]\n",
        "num_ids": 58
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub('_','', word)\n    word = word[0].upper() + word[1:]\n    return word\n",
        "num_ids": 34
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    import re\n    word = re.sub('_', '', word)\n    word = word[0].lower() + word[1:]\n    return word\n",
        "num_ids": 39
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s1 = ''.join(x for x in word.split('_'))\n    s2 = ''.join(x.title() for x in s1.split(' '))\n    return s2\n    \n    \ndef test_snake_to_camel():\n    assert snake_to_camel('test_snake_case') == 'TestSnakeCase'\n    assert snake_to_camel('test_snake_case_2') == 'TestSnakeCase_2'\n    assert snake_to_camel('test_snake_case_3') == 'TestSnakeCase_3'\n    assert snake_to_camel('test_snake_case_4') == 'TestSnakeCase_4'\n    assert snake_to_camel('test_snake_case_5') == 'TestSnakeCase_5'\n    assert snake_to_camel('test_snake_case_6') == 'TestSnakeCase_6'\n    assert snake_to_camel('test_snake_case_7') == 'TestSnakeCase_7'\n    assert snake_to_camel('test_snake_case_8') == 'TestSnakeCase_8'\n    assert snake_to_camel('test_snake_case_9') == 'TestSnakeCase_9'\n    assert snake_to_camel('test_snake_case_10') == 'TestSnakeCase_10'\n    assert snake_to_camel('test_snake_case_11') == 'TestSnakeCase_11'\n    assert snake_to_camel('test_snake_case_12') == 'TestSnakeCase_12'\n    assert snake_to_camel('test_snake_case_13') == 'TestSnakeCase_13'\n    assert snake_to_camel('test_snake_case_14') == 'TestSnakeCase_14'\n    assert snake_to_camel('test_snake_case_15') == 'TestSnakeCase_15'\n    assert snake_to_camel('test_snake_case_16') == 'TestSnakeCase_16'\n    assert snake_to_camel('test_snake_case_17') == 'TestSnakeCase_17'\n    assert snake_to_camel('test_snake_case_18') == 'TestSnakeCase_18'\n    assert snake_to_camel('test_snake_case_19') == 'TestSnakeCase_19'\n    assert snake_to_camel('test_snake_case_20') == 'TestSnakeCase_20'\n    assert snake_to_camel('test_snake_case_21') == 'TestSnakeCase_21'\n    assert snake_to_camel('test_snake_case_22') == 'TestSnakeCase_22'\n    assert snake_to_camel('test_snake_case_23') == 'TestSnakeCase_23'\n    assert snake_to_camel('test_snake_case_24') == 'TestSnakeCase_24'\n    assert snake_to_camel('test_snake_case_25') == 'TestSnakeCase_25'\n    assert snake_to_camel('test_snake_case_26') == 'TestSnakeCase_26'\n    assert snake_to_camel('test_snake_case_27') == 'TestSnakeCase_27'\n    assert snake_to_camel('test_snake_case_28') == 'TestSnakeCase_28'\n    assert snake_to_camel('test_snake_case_29') == 'TestSnakeCase_29'\n    assert snake_to_camel('test_snake_case_30') == 'TestSnakeCase_30'\n    assert snake_to_camel('test_snake_case_31') == 'TestSnakeCase_31'\n    assert snake_to_camel('test_snake_case_32') == 'TestSnakeCase_32'\n    assert snake_to_camel('test_snake_case_33') == 'TestSnakeCase_33'\n    assert snake_to_camel('test_snake_case_34') == 'TestSnakeCase_34'\n    assert snake_to_camel('test_snake_case_35') == 'TestSnakeCase_35'\n    assert snake_to_camel('test_snake_case_36') == 'TestSnakeCase_36'\n    assert snake_to_camel('test_snake_case_37') == 'TestSnakeCase_37'\n    assert snake_to_camel('test_snake_case_38') == 'TestSnakeCase_38'\n    assert snake_to_camel('test_snake_case_39') == 'TestSnakeCase_39'\n    assert snake_to_camel('test_snake_case_40') == 'TestSnakeCase_40'\n    assert snake_to_camel('test_snake_case_41') == 'TestSnakeCase_41'\n    assert snake_to_camel('test_snake_case_42') == 'TestSnakeCase_42'\n    assert snake_to_camel('test_snake_case_43') == 'TestSnakeCase_43'\n    assert snake_to_camel('test_snake_case_44') == 'TestSnakeCase_44'\n    assert snake_to_camel('test_snake_case_45') == 'TestSnakeCase_45'\n    assert snake_to_camel('test_snake_case_46') == 'TestSnakeCase_46'\n    assert snake_to_camel('test_snake_case_47') == 'TestSnakeCase_47'\n    assert snake_to_camel('test_snake_case_48') == 'TestSnakeCase_48'\n    assert snake_to_camel('test_snake_case_49') == 'TestSnakeCase_49'\n    assert snake_to_camel('test_snake_case_50') == 'TestSnakeCase_50'\n    assert snake_to_camel('test_snake_case_51') == 'TestSnakeCase_51'\n    assert snake_to_camel('test_snake_case_52') == 'TestSnakeCase_52'\n    assert snake_to_camel('test_snake_case_53') == 'TestSnakeCase_53'\n    assert snake_to_camel('test_snake_case_54') == 'TestSnakeCase_54'\n    assert snake_to_camel('test_snake_case_55') == 'TestSnakeCase_55'\n    assert snake_to_camel('test_snake_case_56') == 'TestSnakeCase_56'\n    assert snake_to_camel('test_snake_case_57') == 'TestSnakeCase_57'\n    assert snake_to_camel('test_snake_case_58') == 'TestSnakeCase_58'\n    assert snake_to_camel('test_snake_case_59') == 'TestSnakeCase_59'\n    assert snake_to_camel('test_snake_case_60') == 'TestSnakeCase_60'\n    assert snake_to_camel('test_snake_case_61') == 'TestSnakeCase_61'\n    assert snake_to_camel('test_snake_case_62') == 'TestSnakeCase_62'\n    assert snake_to_camel('test_snake_case_63') == 'TestSnakeCase_63'\n    assert snake_to_camel('test_snake_case_64') == 'TestSnakeCase_64'\n    assert snake_to_camel('test_snake_case_65') == 'TestSnakeCase_65'\n    assert snake_to_camel('test_snake_case_66') == 'TestSnakeCase_66'\n    assert snake_to_camel('test_snake_case_67') == 'TestSnakeCase_67'\n    assert snake_to_camel('test_snake_case_68') == 'TestSnakeCase_68'\n    assert snake_to_camel('test_snake_case_69') == 'TestSnakeCase_69'\n    assert snake_to_camel('test_snake_case_70') == 'TestSnakeCase_70'\n    assert snake_to_camel('test_snake_case_71') == 'TestSnakeCase_71'\n    assert snake_to_camel('test_snake_case_72') == 'TestSnakeCase_72'\n    assert snake_t",
        "num_ids": 2011
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    \n    # converting first word to uppercase and then lowercase\n    word = word.title()\n    \n    # splitting the word and each word will be converted to uppercase\n    word = word.split(\"_\")\n    \n    # initializing variable for camel case\n    final_word = \"\"\n    \n    # iterating the list of words and concatenating each words with word\n    for word in word:\n        final_word += word.title()\n    \n    # concatenating the first word with the first element of the list\n    final_word = final_word + word[0]\n    \n    # return the final string\n    return final_word\n    ",
        "num_ids": 156
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return \"\".join(x.title() for x in word.split(\"_\"))\n",
        "num_ids": 22
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    res = []\n    for i in range(len(word)):\n        if word[i].isupper():\n            res.append(word[i].lower())\n        else:\n            res.append(word[i])\n    return ''.join(res)\n",
        "num_ids": 64
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if len(l) == 0:\n        return\n    for i in range(len(l)):\n        if l[i] % 2!= 0:\n            l.pop(i)\n            return\n    l.pop()\n",
        "num_ids": 57
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    #assert all([isinstance(i, int) for i in l])\n    for i in l:\n        if i % 2 == 0:\n            l.remove(i)\n    return l\n",
        "num_ids": 48
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if l[i] % 2!= 0:\n            l.remove(l[i])\n    return l\n",
        "num_ids": 41
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if len(l) < 2:\n        return l\n    index = 0\n    for item in l:\n        if item % 2 == 0:\n            continue\n        else:\n            l.pop(index)\n            continue\n        index += 1\n    return l\n",
        "num_ids": 64
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_numbers = list()\n    for num in l:\n        if num%2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers\n",
        "num_ids": 46
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i%2 == 0:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for i in range(len(l)):\n        if l[i] % 2 == 0:\n            odd_list.append(l[i])\n",
        "num_ids": 45
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.remove(l[0])\n    l.remove(l[1])\n    return l\n",
        "num_ids": 26
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l1 = []\n    for num in l:\n        if num%2==0:\n            l1.append(num)\n",
        "num_ids": 33
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n",
        "num_ids": 12
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n",
        "num_ids": 12
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Approach 1\n    # list1.sort()\n    # return list1[n - 1]\n    \n    # Approach 2\n    \n    list1.sort()\n    return list1[-1]\n",
        "num_ids": 51
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]\n",
        "num_ids": 14
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n]\n    except IndexError:\n        print(\"Invalid index\")\n",
        "num_ids": 27
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n - 1]\n",
        "num_ids": 12
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n            \n    return False\n",
        "num_ids": 35
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list3=[]\n    for i in list1:\n        if i in list2:\n            list3.append(i)\n    if list3==[]:\n        print(\"No Value Exists in List2\")\n    else:\n        print(list3)\noverlapping([1,2,3],[4,5,6]) \noverlapping([1,2,3,1],[4,5,6]) \noverlapping([1,2,3,1,2],[4,5,6]) \noverlapping([1,2,3,1,2,1],[4,5,6]) \noverlapping([1,2,3,1,2,1,2],[4,5,6]) \noverlapping([1,2,3,1,2,1,2,1],[4,5,6]) \noverlapping([1,2,3,1,2,1,2,1,2],[4,5,6]) \n",
        "num_ids": 232
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if list1 == list2:\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 25
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                return True\n    return False\n",
        "num_ids": 52
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # XOR operation\n    # returns 1 if either 1 or 2 are True else 0\n    for x in list1:\n        if x in list2:\n            return 1\n    return 0\n    \nlist1 = [4,8,9,8,3,2]\nlist2 = [8,9,2]\n",
        "num_ids": 76
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    for val1 in list1:\n        if val1 in list2:\n            return True\n    return False\n",
        "num_ids": 30
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if list1 in list2:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n        else:\n            continue\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    if n==0:\n        return\n    # return the pair with highest product\n    max_prod = 0\n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            if arr[i]*arr[j] > max_prod:\n                max_prod = arr[i]*arr[j]\n    for i in range(0, n):\n        if arr[i]>0 and arr[i]*max_prod/arr[i] == max_prod/arr[i]:\n            return i, arr[i]\n    return\n",
        "num_ids": 154
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    print(\"Enter the array elements: \")\n    arr = list(map(int,input().split()))\n    max = -99999999999999999999\n    max_index = -1\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if (arr[i]*arr[j] > max):\n                max = arr[i]*arr[j]\n                max_index = i\n    print(\"Maximum product is: \",max,\" at index \",max_index)\n",
        "num_ids": 128
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    #List to store the product of array\n    product =[] \n    \n    #If no element in the array\n    if (len(arr) == 0):\n        print(\"Array is empty\")\n        return\n    \n    #If array length is 1\n    if (len(arr) == 1):\n        print(\"The highest product is :\", arr[0])\n        return\n    \n    #Iterate through the array\n    for i in range(len(arr)):\n        #If the next element is greater than current element\n        if (i!= len(arr)-1 and arr[i] > arr[i+1]):\n            #Make a new product \n            product_new = arr[i] * arr[i+1] \n            \n            #Add the product into the list\n            product.append(product_new)\n    \n    #Print the max element\n    print(\"The highest product is :\", max(product)) \n    return\n",
        "num_ids": 222
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr)<=1:\n        return -1\n    #print(arr)\n    start = 0\n    end = len(arr)-1\n    #print(start,end)\n    res = arr[0]*arr[1]\n    while(start<end):\n        if res<arr[start]*arr[end]:\n            res = arr[start]*arr[end]\n        if arr[start]<arr[end]:\n            start+=1\n        else:\n            end-=1\n    return res\n",
        "num_ids": 127
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = 1\n    for num in arr: \n        if num!= 0: \n            product = num * max_product \n            if product < num: \n                max_product = product \n    return max_product\n",
        "num_ids": 58
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_p = 1\n    max_pair = []\n    max_product = []\n",
        "num_ids": 23
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_prod = -1\n    for i in range(0, len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i]*arr[j] > max_prod:\n                max_prod = arr[i]*arr[j]\n",
        "num_ids": 76
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    size = len(arr)\n    max_product = 0\n    low = 0\n    high = 0\n    for i in range(size):\n        for j in range(size):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                low = i\n                high = j\n    return low, high\n",
        "num_ids": 93
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = 1\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]*arr[j] > max_product:\n                max_product = arr[i]*arr[j]\n    return max_product\n",
        "num_ids": 77
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort() \n    max_product = arr[0] * arr[1] \n    for i in range(len(arr) - 1): \n        if arr[i] * arr[i + 1] > max_product: \n            max_product = arr[i] * arr[i + 1] \n    return max_product \n    \n    \ndef max_Product_recursion(arr, n): \n    # A utility function to get maximum \n    # product of a group of numbers \n    if n == 1: \n        return arr[0] \n    max1 = arr[0] * max_Product_recursion(arr, n - 1) \n    max2 = arr[1] * max_Product_recursion(arr, n - 1) \n    return max(max1, max2) \n    \n    \ndef max_Product_recursion_2(arr, n): \n    # A utility function to get maximum \n    # product of a group of numbers \n    if n == 1: \n        return arr[0] \n    max1 = arr[0] * max_Product_recursion_2(arr, n - 1) \n    max2 = arr[1] * max_Product_recursion_2(arr, n - 1) \n    return max(max1, max2) \n    \n    ",
        "num_ids": 322
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    def group_first(Input): \n        \"\"\"\n        Write a function to find common first element in given list of tuple.\n        \"\"\"\n        groups = {}\n        for i in Input:\n            if i[0] in groups:\n                groups[i[0]] += i[1]\n            else:\n                groups[i[0]] = i[1]\n        return groups\n    \n    def group_first_2(Input): \n        \"\"\"\n        Write a function to find common first element in given list of tuple.\n        \"\"\"\n        groups = {}\n        for i in Input:\n            if i[0] in groups:\n                groups[i[0]] += i[1]\n            else:\n                groups[i[0]] = i[1]\n        return groups\n    \n    # group_first_2({1: 3, 2: -2, 3: 4, 4: -4, 5: 6, 6: -6, 7: 8, 8: -8})\n    group_first_2([(1, 3), (2, -2), (3, 4), (4, -4), (5, 6), (6, -6), (7, 8), (8, -8)])\n    \n    # group_first({1: 3, 2: -2, 3: 4, 4: -4, 5: 6, 6: -6, 7: 8, 8: -8})\n    group_first([(1, 3), (2, -2), (3, 4), (4, -4), (5, 6), (6, -6), (7, 8), (8, -8)])\n    \n    # group_first([(1, 3), (2, -2), (3, 4), (4, -4), (5, 6), (6, -6), (7, 8), (8, -8)])\n    \n    # group_first([(1, 3), (2, -2), (3, 4), (4, -4), (5, 6), (6, -6), (7, 8), (8, -8)])\n    \n    # group_first([(1, 3), (2, -2), (3, 4), (4, -4), (5, 6), (6, -6), (7, 8), (8, -8)])\n    \n    # group_first([(1, 3), (2, -2), (3, 4), (4, -4), (5, 6), (6, -6), (7, 8), (8, -8)])\n    \n    # group_first([(1, 3), (2, -2), (3, 4), (4, -4), (5, 6), (6, -6), (7, 8), (8, -8)])\n    \n    # group_first([(1, 3), (2, -2), (3, 4), (4, -4), (5, 6), (6, -6), (7, 8), (8, -8)])\n    \n    # group_first([(1, 3), (2, -2), (3, 4), (4, -4), (5, 6), (6, -6), (7, 8), (8, -8)])\n    \n    # group_first([(1, 3), (2, -2), (3, 4), (4, -4), (5, 6), (6, -6), (7, 8), (8, -8)])\n    \n    # group_first([(1, 3), (2, -2), (3, 4), (4, -4), (5, 6), (6, -6), (7, 8), (8, -8)])\n    \n    # group_first([(1, 3), (2, -2), (3, 4), (4, -4), (5, 6), (6, -6), (7, 8), (8, -8)])\n    \n    # group_first([(1, 3), (2, -2), (3, 4), (4, -4), (5, 6), (6, -6), (7, 8), (8, -8)])\n    \n    # group_first([(1, 3), (2, -2), (3, 4), (4, -4), (5, 6), (6, -6), (7, 8), (8, -8)])\n    \n    # group_first([(1, 3), (2, -2), (3, 4), (4, -4), (5, 6), (6, -6), (7, 8), (8, -8)])\n    \n    # group_first([(1, 3), (2, -2), (3, 4), (4, -4), (5, 6), (6, -6), (7, 8), (8, -8)])\n    \n    # group_first([(1, 3), (2, -2), (3, 4), (4, -4), (5, 6), (6, -6), (7, 8), (8, -8)])\n    \n    # group_first([(1, 3), (2, -2), (3, 4), (4, -4), (5, 6), (6, -6), (7, 8), (8, -8)])\n    \n    # group_first([(1, 3), (2, -2), (3, 4), (4, -4), (5, 6), (6, -6), (7, 8), (8, -8)])\n    \n    # group_first([(1, 3), (2, -2), (3, 4), (4, -4), (5, 6), (6, -6), (7, 8), (8, -8)])\n    \n    # group_first([(1, 3), (2, -2), (3, 4), (4, -4), (5, 6), (6, -6), (7, 8), (8, -8)])\n    \n    # group_first([(1, 3), (2, -2), (3, 4), (4, -4), (5, 6), (6, -6), (7, 8), (8, -8)])\n    \n    # group_first([(1, 3), (2, -2), (3, 4), (4, -4), (5, 6), (6, -6), (7, 8), (8, -8)])\n    \n    # group_first([(1, 3), (2, -2), (3, 4), (4, -4), (5, 6), (6, -6), (7, 8), (8, -8)])\n    \n    # group_first([(1, 3), (2, -2), (3, 4), (4, -4), (5, 6), (6, -6), (7, 8), (8, -8)])\n    \n    # group_first([(1, 3), (2, -2), (3, 4), (4, -4), (5, 6), (6, -6), (7, 8), (8, -8)])\n    \n    # group_first([(1, 3), (2, -2), (3, 4), (4, -4), (5, 6), (6, -6), (7, 8), (8, -8)])\n    \n    # group_first([(1, 3), (2, -2), (3, 4), (4, -4), (5, 6), (6, -6), (7, 8), (8, -8)])\n    \n    # group_first([(1, 3), (2, -2), (3, 4), (4, -4), (5, 6), (6, -6), (7, 8), (8, -8)])\n    \n    # group_first([(1, 3), (2, -2), (3, 4), (4, -4), (5, 6), (6, -6), (7, 8), (8, -8)])\n    \n    # group_first([(1, 3), (2, -2), (3, 4), (4, -4), (5, 6), (6, -6), (7, 8), (8, -8)])\n    \n    # group_first([(1, 3), (2, -2), (3, 4), (4, -4), (5, 6), (6, -6), (7, 8), (8, -8)])\n    \n    # group_first([(1, 3), (2, -",
        "num_ids": 2015
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    n = len(Input)\n    if n == 0:\n        return []\n    if n == 1:\n        return Input[0]\n",
        "num_ids": 35
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = {}\n    for i in range(len(Input)):\n        key = Input[i][0]\n        val = Input[i][1]\n        if key in result:\n            result[key].append(val)\n        else:\n            result[key] = []\n            result[key].append(val)\n    print(result)\n",
        "num_ids": 84
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    a = []\n    for i in range(len(Input)):\n        a.append(Input[i][0])\n    \n    i = 0\n    b = []\n    for j in range(len(Input)):\n        if a[i] == Input[j][0]:\n            b.append(Input[j])\n        i += 1\n    \n    return b\n",
        "num_ids": 92
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Common_List = []\n    for i in range(len(Input)):\n        Common_List.append(Input[i][0])\n    for i in range(len(Common_List)):\n        Common_List[i] = Common_List[i].strip()\n    Common_List = list(dict.fromkeys(Common_List))\n    Common_List = list(set(Common_List))\n    print(f\"The common element in the list of tuple: {Common_List}\")\n",
        "num_ids": 118
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = []\n    # Start with the smalles one\n    count = len(Input[0])\n    for x in range(count):\n        element = Input[0][x]\n        flag = 0\n        for y in range(1,len(Input)):\n            if element == Input[y][x]:\n                flag = 1\n                break\n        if flag == 0:\n            common_element.append(element)\n    return common_element\n",
        "num_ids": 108
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    def first_common(x):\n        first_common_element = []\n        for i in range(len(x)):\n            if x[i][0] not in first_common_element:\n                first_common_element.append(x[i][0])\n        return first_common_element\n    \n    return first_common(Input)\n",
        "num_ids": 84
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if not Input: \n        return None\n    else: \n        new_input = {}\n        for i in Input:\n            key, value = i \n            if value in new_input:\n                new_input[value].append(key)\n            else:\n                new_input[value] = [key]\n        Output = []\n        for key, value in new_input.items():\n            if len(value) >= 2:\n                Output.append((value[0], value[-1]))\n        return Output \n    ",
        "num_ids": 127
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if len(Input) == 1:\n        return Input[0][0]\n    elif len(Input) == 0:\n        return False\n    elif len(Input) > 1:\n        lst = []\n        for i in range(len(Input)):\n            lst.append(Input[i][0])\n        return max(set(lst), key = lst.count)\n        \ndef remove_duplicate_from_list(Input):\n    '''\n    Write a function to remove all duplicate elements from list.\n    '''\n    if len(Input) == 0:\n        return False\n    else:\n        Input = sorted(set(Input))\n        return Input\n",
        "num_ids": 34
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input = tuple(sorted(Input, key=lambda x: x[1]))\n    n = len(Input)\n    i = 0\n    j = n - 1\n    while i < j:\n        if Input[i][1]!= Input[j][1]:\n            break\n        else:\n            i += 1\n            j -= 1\n    return Input[i]\n",
        "num_ids": 91
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    length=len(lst)\n    max_length=lst[0]\n    for i in range(1,length):\n        if length<i:\n            break\n        if max_length<lst[i]:\n            max_length=lst[i]\n    return max_length\n            \ndef main():\n    lst = [2,3,4,5,6]\n    max_length=Find_Max(lst)\n    print(\"Maximum length of elements is {}\".format(max_length))\n",
        "num_ids": 124
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_length_index = 0\n    for i in range(len(lst)):\n        if max_length < len(lst[i]):\n            max_length = len(lst[i])\n            max_length_index = i\n    return max_length_index\n",
        "num_ids": 76
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for x in lst:\n        if len(x) > max:\n            max = len(x)\n    for i in range(0, len(lst)):\n        if len(lst[i]) == max:\n            print(lst[i])\n",
        "num_ids": 70
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    m = 0\n    for i in range(len(lst)):\n        if len(lst[i])>m:\n            m = len(lst[i])\n    return m\n",
        "num_ids": 48
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_count = 0\n    max_element = None\n    for i in range(len(lst)):\n        if lst[i] > max_count:\n            max_count = lst[i]\n            max_element = lst[i]\n    return max_element\n",
        "num_ids": 70
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    \n    return max_len\n",
        "num_ids": 47
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_item = None\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_item = i\n    return max_item\n",
        "num_ids": 59
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n    for i in range(len(lst)):\n        if len(lst[i]) == max_len:\n            return lst[i]\n",
        "num_ids": 86
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_elem = i\n    return max_elem\n    \ndef main():\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst = ['Geeks', 'For', 'Geeks', 'is', 'great']\n    print(\"The maximum element of the list is :\", Find_Max(lst))\n",
        "num_ids": 44
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst)==0:\n        return None\n    m=0\n    for i in range(len(lst)):\n        if len(lst[i])>m:\n            m=len(lst[i])\n            max1=lst[i]\n    return max1\n",
        "num_ids": 74
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in range(0, len(list1)):\n        list1[i] = round(list1[i],2)\n    for j in list1:\n        total = total + j\n    print('The sum of list elements rounded to 2 decimals:', total)\n    print('The total multiplied by the length of the list:', total * len(list1))\n    return total * len(list1)\n",
        "num_ids": 105
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += i\n        i = round(i)\n    return total * len(list1)\n",
        "num_ids": 38
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    \n    for i in range(len(list1)):\n        list1[i]=round(list1[i])\n",
        "num_ids": 31
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    i = 0\n    j = 0\n    s = 0\n    while(i < len(list1)):\n        if(list1[i] % 2 == 0):\n            list1[i] = int(list1[i] / 2)\n        else:\n            list1[i] = int((list1[i] + 1) / 2)\n        i = i + 1\n",
        "num_ids": 93
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    round_to = 10\n    rounded_list = []\n    for element in list1:\n        rounded_element = int(round(element,round_to))\n        rounded_list.append(rounded_element)\n    print(sum(rounded_list)*len(list1))\n",
        "num_ids": 67
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    round_and_sum = []\n    for i in list1:\n        round_and_sum.append(round(i))\n    return sum(round_and_sum)\n",
        "num_ids": 44
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print(sum(round(i) for i in list1))\n",
        "num_ids": 18
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    \n    list1 = list(list1)\n    list1.sort()\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    list1 = sum(list1)\n    lis",
        "num_ids": 2003
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total = total + round(i)\n    return total * len(list1)\n",
        "num_ids": 35
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    print(total*len(list1))\n",
        "num_ids": 34
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            result = result + i**3\n    return result\n    ",
        "num_ids": 43
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    a=[]\n    for i in range(1,n+1):\n        if i%2==0:\n            a.append(i**3)\n    return sum(a)\nprint(cube_Sum(5))\n",
        "num_ids": 55
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return n*(n+1)*(2*n+1)\n",
        "num_ids": 19
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    numbers = list(range(n))\n    sum = 0\n    for i in numbers:\n        if i%2 == 0:\n            sum += i**3\n    return sum\n",
        "num_ids": 45
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([x*x*x for x in range(1,n+1) if x % 2 == 0])\n    \ndef cube_Sum_2(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([x*x*x for x in range(1,n+1) if x % 2 == 0])\n    \nprint(cube_Sum(3))\nprint(cube_Sum_2(3))\n",
        "num_ids": 52
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    count = 0\n    cube_sum = 0\n    for i in range(n):\n        if (i % 2) == 0:\n            count += 1\n            cube_sum += (i * i * i)\n    return(cube_sum)\n",
        "num_ids": 60
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube = 0\n    for x in range(n):\n        cube = cube + (x**3)\n    print(\"cube sum of first %d natural numbers is:\" %n, cube)\ncube_Sum(4)\ncube_Sum(5)\n",
        "num_ids": 60
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum=0\n    for i in range(n):\n        cube_sum+=i**3\n    return cube_sum\n    # return sum(list(map(lambda x: x**3, range(n))))\n",
        "num_ids": 54
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    return total\n",
        "num_ids": 31
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # your code here\n    return None\n",
        "num_ids": 12
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_str = ''\n    for i in test_tup:\n        test_str = test_str + str(i) + ','\n    return test_str\n",
        "num_ids": 42
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_tup = ''.join(test_tup)\n    return new_tup\n",
        "num_ids": 25
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return test_tup[0] + test_tup[1] + test_tup[2]\n",
        "num_ids": 28
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n",
        "num_ids": 14
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return''.join(test_tup)\n",
        "num_ids": 13
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    return delimiter.join(test_tup)\n",
        "num_ids": 23
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = []\n    for tup in test_tup:\n        for item in tup:\n            result.append(item)\n    return ''.join(result)\n",
        "num_ids": 43
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    import statistics\n    n = int(n)\n    sum_of_cube = 0\n    for i in range(1, n+1):\n        sum_of_cube += i**3\n    average = sum_of_cube/n\n    print(average)\n    return average\n",
        "num_ids": 68
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total += i**3\n    return total / n\n",
        "num_ids": 29
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # Check if n is negative\n    if n < 0:\n        print(\"Invalid Input\")\n",
        "num_ids": 24
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    count = 0\n    sum = 0\n    for i in range(n+1):\n        count+=1\n        sum += i**3\n    return sum/count\n",
        "num_ids": 41
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + pow(i, 3)\n",
        "num_ids": 28
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    summ = 0\n    for i in range(n):\n        summ = summ + i*i*i\n    summ = summ / n\n    return summ\n",
        "num_ids": 41
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum = sum + i**3\n    return sum / n\n    \ndef find_Average_Of_Squares(n):\n    '''\n    Write a python function to find the average of squares of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum = sum + i**2\n    return sum / n\n",
        "num_ids": 33
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    c = 0\n    while n <= 0:\n        print(\"Enter a non negative number : \")\n        n = int(input())\n    for i in range(1, n + 1):\n        c = c + i ** 3\n    return c / n\n",
        "num_ids": 62
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return sum([i**3 for i in range(n)]) / n\n",
        "num_ids": 20
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum=0\n    for i in range(n):\n        sum=sum+i**3\n    return sum/n\n",
        "num_ids": 31
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "num_ids": 13
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    tuple_list = list(test_tuple)\n    rear_list = []\n    for i in range(len(tuple_list)):\n        rear_list.append(tuple_list[i][-1])\n    return tuple(rear_list)\n",
        "num_ids": 68
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n",
        "num_ids": 12
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    x = test_tuple\n    if len(x) == 1:\n        return test_tuple\n    else:\n        return test_tuple[-1]\n",
        "num_ids": 42
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple((i[-1] for i in test_tuple))\n",
        "num_ids": 20
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(test_tuple[::-1])\n",
        "num_ids": 16
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    for i in test_tuple:\n        i = i.split()\n        i = i[-1]\n    return test_tuple\n",
        "num_ids": 36
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(map(lambda x : x[-1], test_tuple))\n",
        "num_ids": 22
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple((str(elem) for elem in test_tuple[::-1]))\n",
        "num_ids": 26
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return (tuple(test_tuple[1]))\n",
        "num_ids": 17
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n    \nif __name__ == \"__main__\":\n    x = int(input(\"Enter element to count: \"))\n    list1 = []\n    while True:\n        n = input(\"Enter elements: \")\n        if n == \"\":\n            break\n        else:\n            list1.append(list(map(int, n.split())))\n    print(count_element_in_list(list1, x))\n",
        "num_ids": 130
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    cnt = 0\n    for sublist in list1:\n        if x in sublist:\n            cnt += 1\n    return cnt\n",
        "num_ids": 36
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    c = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            c += 1\n    return c\n",
        "num_ids": 39
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x == i:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if x in list1[i]:\n            count = count+1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    n = 0\n    for i in list1:\n        if i == x:\n            n += 1\n    return n\n",
        "num_ids": 31
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    #start writing your code here\n    #Hint: return filter(lambda x: x%2!=0,nums)\n    return list(filter(lambda x:x%2!=0,nums))\n",
        "num_ids": 52
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # below solution:\n    return filter(lambda x: x%2, nums)\n",
        "num_ids": 23
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [n for n in nums if n % 2!= 0]\n",
        "num_ids": 20
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnumbers = []\n    for i in nums:\n        if i % 2!= 0:\n            oddnumbers.append(i)\n    return oddnumbers\n",
        "num_ids": 43
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x:x%2!=0,nums)\n",
        "num_ids": 20
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return[x for x in nums if x%2==1]\n",
        "num_ids": 19
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x%2!=0, nums)\n    # return list(filter(lambda x: x%2!=0, nums))\n",
        "num_ids": 41
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnumbers = []\n    for i in nums:\n        if i % 2!= 0:\n            oddnumbers.append(i)\n    return oddnumbers\n",
        "num_ids": 43
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    print(\"\\nFilter Odd Numbers:\")\n    for num in nums:\n        if num % 2!= 0:\n            print(num)\n",
        "num_ids": 37
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = []\n    for i in nums:\n        if i%2 == 1:\n            odd_numbers.append(i)\n    return odd_numbers\n",
        "num_ids": 45
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split(\"-\")\n    return f\"{dt[2]}-{dt[1]}-{dt[0]}\"\n",
        "num_ids": 36
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split('-')\n    new_date = date[2] + '-' + date[1] + '-' + date[0]\n    return new_date\n",
        "num_ids": 45
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    print(\"Original Date is {}\".format(dt))\n    dt = dt.split(\"-\")\n    final = \"{}-{}-{}\".format(dt[2],dt[1],dt[0])\n    print(\"New Date is {}\".format(final))\n",
        "num_ids": 66
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split(\"-\")\n    return \"-\".join(date[::-1])\n",
        "num_ids": 26
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    \n    #Convert to string and check date format\n    str_date = str(dt)\n    #match object to find the date\n    match = re.match(r'(\\d+)-(\\d+)-(\\d+)', str_date)\n    \n    #if the match object is None, error\n    if match == None:\n        raise ValueError(\"Date is not in the correct format\")\n    \n    #Convert string to desired format and return\n    return dt.replace(str_date[3]+\"-\"+str_date[2]+\"-\"+str_date[1],str_date[2]+\"-\"+str_date[1]+\"-\"+str_date[0])\n",
        "num_ids": 163
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split('-')\n    month = int(date[1])\n    date[1] = str(month-1)\n    date = '-'.join(date)\n    return date\n    \ndef print_date_difference(start_date, end_date):\n    '''\n    Write a function that calculates the difference between the start and end date.\n    '''\n    start_date = start_date.split('-')\n    end_date = end_date.split('-')\n    start_date = '-'.join(start_date)\n    end_date = '-'.join(end_date)\n    start_date = change_date_format(start_date)\n    end_date = change_date_format(end_date)\n    start_date = datetime.datetime.strptime(start_date, '%d-%m-%Y')\n    end_date = datetime.datetime.strptime(end_date, '%d-%m-%Y')\n    delta = end_date - start_date\n    return delta.days\n    \ndef swap_letters(s):\n    '''\n    Write a function that swaps the case of every letter in the input string s.\n    '''\n    s = s.swapcase()\n    return s\n    \ndef swap_letters_v2(s):\n    '''\n    Write a function that swaps the case of every letter in the input string s.\n    '''\n    return s.swapcase()\n    \ndef write_text(filename):\n    '''\n    Write a function to read a file and return the text as a string.\n    '''\n    file = open(filename, 'r')\n    text = file.read()\n    file.close()\n    return text\n    \ndef write_text_v2(filename):\n    '''\n    Write a function to read a file and return the text as a string.\n    '''\n    file = open(filename, 'r')\n    text = file.read()\n    file.close()\n    return text.replace('\\n', '')\n    \ndef get_highest_seat_id(filename):\n    '''\n    Write a function to read a file and return the highest seat ID\n    '''\n    text = write_text_v2(filename)\n    text_list = list(text)\n    seat_id = []\n    for i in text_list:\n        seat_id.append(ord(i) - 64)\n    seat_id = sorted(seat_id)\n    return seat_id[-1] + 1\n    \ndef get_seat_id_v2(filename):\n    '''\n    Write a function to read a file and return the highest seat ID\n    '''\n    text = write_text_v2(filename)\n    text_list = list(text)\n    seat_id = []\n    for i in text_list:\n        seat_id.append(ord(i) - 64)\n    seat_id = sorted(seat_id)\n    return list(zip(range(len(seat_id)), seat_id))\n    \ndef convert_to_binary(input_string):\n    '''\n    Write a function to convert a decimal number to its binary equivalent.\n    '''\n    return bin(input_string)\n    \ndef convert_to_binary_v2(input_string):\n    '''\n    Write a function to convert a decimal number to its binary equivalent.\n    '''\n    return f\"{input_string:b}\"\n    \ndef get_binary_from_seat_id(seat_id):\n    '''\n    Write a function to get a seat number from a seat ID.\n    '''\n    seat_binary = f\"{seat_id:b}\"\n    return int(seat_binary[:7], 2), int(seat_binary[7:], 2)\n    \ndef get_seat_id_from_binary(binary_seat):\n    '''\n    Write a function to get a seat number from a seat ID.\n    '''\n    binary_seat = f\"{binary_seat[0]:b}{binary_seat[1]:b}\"\n    return int(binary_seat, 2)\n    \ndef get_row_from_seat_binary(binary_row):\n    '''\n    Write a function to get a row number from a binary seat.\n    '''\n    binary_row = f\"{binary_row[0]:b}{binary_row[1]:b}\"\n    row = binary_row[:7]\n    return int(row, 2)\n    \ndef get_column_from_seat_binary(binary_column):\n    '''\n    Write a function to get a column number from a binary seat.\n    '''\n    binary_column = f\"{binary_column[0]:b}{binary_column[1]:b}\"\n    column = binary_column[7:]\n    return int(column, 2)\n    \ndef create_seat_map(seat_list):\n    '''\n    Write a function that returns a seat map from a seat list\n    '''\n    seat_map = []\n    for i in range(128):\n        seat_map.append([])\n        for j in range(8):\n            seat_map[-1].append([])\n            for k in range(8):\n                seat_map[-1][-1].append([])\n    for i in seat_list:\n        seat_map[i][0][0] = True\n        seat_map[i][7][7] = True\n    for i in range(8):\n        seat_map[0][i][0] = True\n        seat_map[0][i][7] = True\n        seat_map[127][i][0] = True\n        seat_map[127][i][7] = True\n    for i in range(8):\n        seat_map[i][0][1] = True\n        seat_map[i][7][1] = True\n        seat_map[i][0][6] = True\n        seat_map[i][7][6] = True\n    for i in range(8):\n        seat_map[1][i][1] = True\n        seat_map[1][i][6] = True\n        seat_map[6][i][1] = True\n        seat_map[6][i][6] = True\n    return seat_map\n    \ndef get_seat_map(seat_list, seat_map):\n    '''\n    Write a function that returns a seat map from a seat list\n    '''\n    for i in range(8):\n        for j in range(8):\n            if seat_map[i][j][0] == True:\n                seat_map[i][j][0] = False\n            if seat_map[i][j][7] == True:\n                seat_map[i][j][7] = False\n    for i in range(8):\n        for j in range(8):\n            if seat_map[i][j][1] == True:\n                seat_map[i][j][1] = False\n            if seat_map[i][j][6] == True:\n                seat_map[i][j][6] = False\n    return seat_map\n    \ndef get_seat_list_from_seat_map(seat_map):\n    '''\n    Write a function that returns a list of all occupied seats from a seat map\n    '''\n    seat_list = []\n    for i in range(8):\n        for j in range(8):\n            if seat_map[i][j][0] == True:\n                seat_list.append(i)\n            if seat_map[i][j][7] == True:\n                seat_list.append(i)\n    for i in range(8):\n        for j in range(8):\n            if seat_map[i][j][1] == True:\n                seat_list.append(i)\n            if seat_map[i][j][6] == True:\n                seat_list.append(i)\n    return seat_list\n    \ndef is_seat_occupied(seat_map, row, column):\n    '''\n    Write a function that determines if a seat is occupied\n    '''\n    return seat_map[row][column] == True\n    \ndef is_seat_empty(seat_map, row, column):\n    '''\n    Write a function that determines if a seat is empty\n    '''\n    return seat_ma",
        "num_ids": 7
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    d_t = dt.split('-')\n    new_d_t = ''\n    for i in range(len(d_t)):\n        if d_t[i].isdigit() and i!= len(d_t)-1:\n            new_d_t += d_t[i]\n            continue\n        if i == len(d_t)-1:\n            if int(d_t[i]) > 12:\n                new_d_t += d_t[i]\n                continue\n            else:\n                new_d_t += str(int(d_t[i]) + 12)\n                continue\n        if int(d_t[i]) > 31:\n            new_d_t += d_t[i]\n            continue\n        elif int(d_t[i]) < 31 and int(d_t[i]) > 0:\n            new_d_t += d_t[i]\n        else:\n            new_d_t += str(int(d_t[i]) + 12)\n    return new_d_t\n",
        "num_ids": 256
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.replace('-', '')\n    if len(dt) == 10:\n        dt = dt[:5] + '-' + dt[5:7] + '-' + dt[7:]\n    elif len(dt) == 8:\n        dt = dt[:4] + '-' + dt[4:6] + '-' + dt[6:]\n    else:\n        raise Exception('Input Error')\n    return dt\n",
        "num_ids": 113
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    date = dt[2] + '-' + dt[1] + '-' + dt[0]\n    return date\n",
        "num_ids": 44
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt_list = dt.split('-')\n    return f'{dt_list[2]}-{dt_list[1]}-{dt_list[0]}'\n",
        "num_ids": 44
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = 1\n    while gap < len(my_list):\n        gap = gap*3+1\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n",
        "num_ids": 108
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap >= 1:\n        for i in range(gap,n):\n            j = i\n            while j > gap-1 and my_list[j-gap] > my_list[j]:\n                my_list[j], my_list[j-gap] = my_list[j-gap],my_list[j]\n                j -= gap\n        gap = gap//2\n    return my_list\n",
        "num_ids": 115
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "num_ids": 114
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap >= 1:\n        for i in range(gap,n):\n            j = i\n            temp = my_list[i]\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n",
        "num_ids": 108
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap,n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2\n",
        "num_ids": 109
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n",
        "num_ids": 108
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    if n <= 1:\n        return\n    h = 1\n    while h < n:\n        h = 3 * h + 1\n    for i in range(h):\n        j = i + h\n        while j < n:\n            k = j - h\n            temp = my_list[j]\n            while k >= 0 and my_list[k] > temp:\n                my_list[k + h] = my_list[k]\n                k = k - h\n            my_list[k + h] = temp\n            j = j + 1\n    return my_list",
        "num_ids": 147
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # len_of_list = len(my_list)\n    # gap = len_of_list // 2\n    # while gap > 0:\n        # for i in range(gap,len_of_list):\n            # for j in range(i,gap-1,-gap):\n                # if my_list[j] < my_list[j-gap]:\n                    # swap(my_list,j,j-gap)\n        # gap = gap // 2\n    # return my_list\n",
        "num_ids": 118
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    size = len(my_list)\n    gap = 1\n    while gap < size:\n        gap = gap * 3 + 1\n    while gap > 1:\n        for i in range(gap,size):\n            temp = my_list[i]\n            j = i\n            while (j - gap) >= 0 and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 3\n",
        "num_ids": 127
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if len(my_list) == 0 or len(my_list) == 1:\n        return my_list\n    else:\n        gap = len(my_list) // 2\n        while gap > 0:\n            for i in range(gap, len(my_list)):\n                j = i\n                while j >= gap and my_list[j - gap] > my_list[j]:\n                    my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                    j -= gap\n            gap //= 2\n        return my_list\n",
        "num_ids": 143
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return(tuple(x and y for x, y in zip(test_tup1, test_tup2)))\n",
        "num_ids": 31
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple([x or y for x, y in zip(test_tup1, test_tup2)])\n",
        "num_ids": 30
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(a and b for a, b in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    a, b = test_tup1\n    c, d = test_tup2\n    test_tuple = (a, c)\n    test_tuple2 = (b, d)\n    return test_tuple, test_tuple2\n",
        "num_ids": 62
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x and y for x, y in zip(test_tup1, test_tup2))\n    \nif __name__ == '__main__':\n    print('Examples:')\n    print(and_tuples((1, 2), (0, 1)))\n    print(and_tuples((0, 1), (1, 0)))\n    print(and_tuples((1, 1), (1, 1)))\n",
        "num_ids": 103
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (x + y) for x, y in zip(test_tup1, test_tup2)\n",
        "num_ids": 29
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(a and b for a, b in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    list1, list2 = list(test_tup1), list(test_tup2)\n    return list(zip(list1, list2, zip(list1, list2)))\n",
        "num_ids": 47
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # l_tup1 = list(test_tup1)\n    # l_tup2 = list(test_tup2)\n    # return (tuple(map(lambda x, y: x and y, test_tup1, test_tup2)))\n    return (tuple(x and y for x, y in zip(test_tup1, test_tup2)))\n",
        "num_ids": 96
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    a, b = test_tup1\n    c, d = test_tup2\n    return (a & c), (b & d)\n",
        "num_ids": 37
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x_values = range(-5, 6)\n    y_values = []\n    for x in x_values:\n        y_values.append((a * x ** 2 + b * x + c) ** 0.5)\n    return x_values, y_values\n",
        "num_ids": 65
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (a*b**2 + 2*c*b)**(1/2)\n",
        "num_ids": 24
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a*(b**2) - 2*a*c\n",
        "num_ids": 18
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    return (a*b**2 + 2*b*c*a**2 + c**2)**(1/2)\n    ",
        "num_ids": 35
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    directrix = a * (b**2) - (4 * a * c)\n    return directrix\n",
        "num_ids": 27
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a, b, c\n",
        "num_ids": 10
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a*(b**2) + 2*a*c\n",
        "num_ids": 18
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        x_r = 0\n    else:\n        x_r = (a*b)/(b**2 - 4*a*c)\n    return x_r\n",
        "num_ids": 48
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    parabola_directrix = lambda x: ((a*x**2) + (b*x) + c) \n    return parabola_directrix\n    \n",
        "num_ids": 42
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return c*(a-b)**2 + a*b + 2*a*b*c\n",
        "num_ids": 26
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    if len(list1) == 0:\n        return False\n    if len(list2) == 0:\n        return False\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False\n",
        "num_ids": 83
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n            else:\n                return False\n    return False\n    \ndef common_element2(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n            else:\n                return False\n    return False\n    \ndef common_element3(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    i=0\n    j=0\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n            else:\n                return False\n    return False\n    \ndef common_element4(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    i=0\n    j=0\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n            else:\n                return False\n    return False\n    \ndef common_element5(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    i=0\n    j=0\n    while i < len(list1):\n        for j in list2:\n            if i == j:\n                return True\n            else:\n                return False\n        i+=1\n    return False\n    \ndef common_element6(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    i=0\n    j=0\n    while i < len(list1):\n        for j in list2:\n            if i == j:\n                return True\n            else:\n                return False\n        i+=1\n    return False\n    \n    \n    \ndef common_element7(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    i=0\n    j=0\n    while i < len(list1):\n        for j in list2:\n            if i == j:\n                return True\n            else:\n                return False\n        i+=1\n    return False\n    \ndef common_element8(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    i=0\n    j=0\n    while i < len(list1):\n        for j in list2:\n            if i == j:\n                return True\n            else:\n                return False\n        i+=1\n    return False\n    \ndef common_element9(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    i=0\n    j=0\n    while i < len(list1):\n        for j in list2:\n            if i == j:\n                return True\n            else:\n                return False\n        i+=1\n    return False\n    \ndef common_element10(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    i=0\n    j=0\n    while i < len(list1):\n        for j in list2:\n            if i == j:\n                return True\n            else:\n                return False\n        i+=1\n    return False\n    \n    \n    \n    \ndef common_element11(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    i=0\n    j=0\n    while i < len(list1):\n        for j in list2:\n            if i == j:\n                return True\n            else:\n                return False\n        i+=1\n    return False\n    \ndef common_element12(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    i=0\n    j=0\n    while i < len(list1):\n        for j in list2:\n            if i == j:\n                return True\n            else:\n                return False\n        i+=1\n    return False\n    \n    \n    \n    \n    \ndef common_element13(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    i=0\n    j=0\n    while i < len(list1):\n        for j in list2:\n            if i == j:\n                return True\n            else:\n                return False\n        i+=1\n    return False\n    \ndef common_element14(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    i=0\n    j=0\n    while i < len(list1):\n        for j in list2:\n            if i == j:\n                return True\n            else:\n                return False\n        i+=1\n    return False\n    \n    \n    \n    \n    \ndef common_element15(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    i=0\n    j=0\n    while i < len(list1):\n        for j in list2:\n            if i == j:\n                return True\n            else:\n                return False\n        i+=1\n    return False\n    \ndef common_element16(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    i=0\n    j=0\n    while i < len(list1):\n        for j in list2:\n            if i == j:\n                return True\n            else:\n                return False\n        i+=1\n    return False\n    \n    \ndef common_element17(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    i=0\n    j=0\n    while i < len(list1):\n        for j in list2:\n            if i == j:\n                return True\n            else:\n                return False\n        i+=1\n    return False\n    \ndef common_element18(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    i=0\n    j=0\n    while i < len(list1):\n        for j in list2:\n            if i == j:\n                return True\n            else:\n                return False\n        i+=1\n    return False\n    \n    \n    \n    \n    \n    \ndef common_element19(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    i=0\n    j=0\n    while i < len(list1):\n        for j in list2:\n            if i == j:\n                return True\n            else:\n                return False\n        i+=1\n    return False\n    \ndef common_element20(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    i=0\n    j=0\n    while i < len(list1):\n        for j in list2:\n            if i == j:\n                return True\n            else:\n                return False\n        i+=1\n    return False\n    \n    \ndef common_element21(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    i=0\n    j=0\n    while i < le",
        "num_ids": 17
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # list1 = [1, 2, 3, 4]\n    # list2 = [3, 4, 5, 6]\n    # # print(common_element(list1, list2))\n    # print(list1)\n    # print(list2)\n    # for i in list1:\n    #     for j in list2:\n    #         if i == j:\n    #             print(i)\n    #             break\n    # else:\n    #     print(\"No Common Element\")\n",
        "num_ids": 120
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return list(set(list1) & set(list2))\n",
        "num_ids": 18
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_elements = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                common_elements.append(i)\n    if common_elements:\n        return True\n    return False\n",
        "num_ids": 60
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return True if any(x in list1 for x in list2) else False\n",
        "num_ids": 21
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_elements = []\n    for element in list1:\n        for element2 in list2:\n            if element == element2:\n                common_elements.append(element)\n    if len(common_elements)!= 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 71
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i==j:\n                return True\n    return False\n    \n    \n        \nprint(common_element([1, 2, 3], [2, 3, 4]))\nprint(common_element([1, 2, 3], [4, 5, 6]))\nprint(common_element([1, 2, 3, 4], [3, 4, 5]))\n",
        "num_ids": 104
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    lst1 = set(list1)\n    lst2 = set(list2)\n    return (lst1.intersection(lst2))\n",
        "num_ids": 39
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2) / 2 * height\n",
        "num_ids": 16
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2)/2 * height\n",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2)/2 * height\n    \n    \n    \ndef main():\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    try:\n        length = float(input(\"Enter length of the trapezium: \"))\n        width = float(input(\"Enter width of the trapezium: \"))\n        height = float(input(\"Enter height of the trapezium: \"))\n        \n    except ValueError:\n        print('You entered wrong value. Please try again.')\n        return\n    \n    \n    print(\"The length of trapezium is: \", median_trapezium(length, width, height))\n    \n    \nmain()    ",
        "num_ids": 121
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2)*0.5*height\n",
        "num_ids": 17
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return ((base1+base2)/2 * height)/2\n",
        "num_ids": 17
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1 = float(base1)\n    base2 = float(base2)\n    height = float(height)\n    \n    return (base1 + base2)/2 * height\n",
        "num_ids": 45
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    A = (base1 + base2) / 2.0\n    B = height / 2.0\n    return A*B\n",
        "num_ids": 32
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    print(base1, base2, height)\n    return ((base1+base2)/2)\n",
        "num_ids": 26
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 < base2 and height > 0:\n        return (base1+base2)/2*height\n    elif base1 > base2 and height > 0:\n        return (base1+base2)/2*height\n    elif base1 == base2 == height == 0:\n        return 0\n    else:\n        return -1\n    \nprint(median_trapezium(10,5,20))\nprint(median_trapezium(10,5,0))\nprint(median_trapezium(1,2,3))",
        "num_ids": 131
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number < arr[0]:\n        return False\n    for index in range(len(arr) - 1):\n        if number <= arr[index] and number > arr[index + 1]:\n            return True\n    return False\n",
        "num_ids": 55
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # iterate over the array\n    for i in range(len(arr)):\n        # compare\n        if arr[i] <= number:\n            return True\n    # if none of the number is smaller than the given number, return false\n    return False\n",
        "num_ids": 61
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    \n    return number > arr\n",
        "num_ids": 10
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    flag = False\n    for i in range(len(arr)):\n        if arr[i] < number:\n            flag = True\n            break\n    if flag == False:\n        return True\n    else:\n        return False\n",
        "num_ids": 56
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # curr_greater = False\n    # for i in range(0, len(arr)):\n    #     if arr[i] > number:\n    #         curr_greater = True\n    #         break\n    # return curr_greater\n    # Time: O(N) | Space:O(1)\n    # num_greater_than_arr = []\n    # for i in range(len(arr)):\n    #     if arr[i] > number:\n    #         num_greater_than_arr.append(arr[i])\n    # return num_greater_than_arr\n    # Time: O(N) | Space:O(1)\n    greater = False\n    for i in range(len(arr)):\n        if arr[i] > number:\n            greater = True\n            break\n    return greater\n    # Time: O(N) | Space:O(1)\n    # if number < arr[0]:\n    #     return False\n    # for i in range(1, len(arr)):\n    #     if number < arr[i]:\n    #         return False\n    # return True\n",
        "num_ids": 275
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n",
        "num_ids": 32
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[0]:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n",
        "num_ids": 32
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    \n    # Create a new empty array\n    check = []\n    \n    # traverse through the array\n    for x in arr:\n        \n        # Check if the number is greater than the current element\n        if number > x:\n            check.append(True)\n        else:\n            check.append(False)\n    \n    # if the number is greater than any element in the array return true\n    if True in check:\n        return True\n    \n    return False\n    ",
        "num_ids": 111
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(\"ab\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by two or more b's.\n    '''\n    pattern = re.compile(\"ab{2,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three or more b's.\n    '''\n    pattern = re.compile(\"ab{3,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four or more b's.\n    '''\n    pattern = re.compile(\"ab{4,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by five or more b's.\n    '''\n    pattern = re.compile(\"ab{5,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by six or more b's.\n    '''\n    pattern = re.compile(\"ab{6,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by seven or more b's.\n    '''\n    pattern = re.compile(\"ab{7,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by eight or more b's.\n    '''\n    pattern = re.compile(\"ab{8,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by nine or more b's.\n    '''\n    pattern = re.compile(\"ab{9,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by ten or more b's.\n    '''\n    pattern = re.compile(\"ab{10,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by eleven or more b's.\n    '''\n    pattern = re.compile(\"ab{11,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by twelve or more b's.\n    '''\n    pattern = re.compile(\"ab{12,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by thirteen or more b's.\n    '''\n    pattern = re.compile(\"ab{13,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fourteen or more b's.\n    '''\n    pattern = re.compile(\"ab{14,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fifteen or more b's.\n    '''\n    pattern = re.compile(\"ab{15,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by sixteen or more b's.\n    '''\n    pattern = re.compile(\"ab{16,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by seventeen or more b's.\n    '''\n    pattern = re.compile(\"ab{17,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by eighteen or more b's.\n    '''\n    pattern = re.compile(\"ab{18,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by nineteen or more b's.\n    '''\n    pattern = re.compile(\"ab{19,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty or more b's.\n    '''\n    pattern = re.compile(\"ab{20,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_twenty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty one or more b's.\n    '''\n    pattern = re.compile(\"ab{21,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_twenty_two(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty two or more b's.\n    '''\n    pattern = re.compile(\"ab{22,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_twenty_three(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty three or more b's.\n    '''\n    pattern = re.compile(\"ab{23,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_twenty_four(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty four or more b's.\n    '''\n    pattern = re.compile(\"ab{24,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_twenty_five(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty five or more b's.\n    '''\n    pattern = re.compile(\"ab{25,}\")\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_twenty_six(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty six or more b's.\n    '''",
        "num_ids": 1
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = re.compile(r'ab+')\n    mo = regex.search(text)\n    return mo is not None\n",
        "num_ids": 34
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = re.compile(r'ab')\n    mo = regex.search(text)\n    return True if mo else False\n",
        "num_ids": 34
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    res = re.search(pattern, text)\n    print(res)\n    return res\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    res = re.findall(pattern, text)\n    print(res)\n    return res\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    res = re.split(pattern, text)\n    print(res)\n    return res\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    res = re.findall(pattern, text)\n    print(res)\n    return res\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    res = re.split(pattern, text)\n    print(res)\n    return res\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    res = re.findall(pattern, text)\n    print(res)\n    return res\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    res = re.split(pattern, text)\n    print(res)\n    return res\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    res = re.findall(pattern, text)\n    print(res)\n    return res\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    res = re.split(pattern, text)\n    print(res)\n    return res\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    res = re.findall(pattern, text)\n    print(res)\n    return res\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    res = re.split(pattern, text)\n    print(res)\n    return res\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    res = re.findall(pattern, text)\n    print(res)\n    return res\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    res = re.split(pattern, text)\n    print(res)\n    return res\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    res = re.findall(pattern, text)\n    print(res)\n    return res\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    res = re.split(pattern, text)\n    print(res)\n    return res\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    res = re.findall(pattern, text)\n    print(res)\n    return res\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    res = re.split(pattern, text)\n    print(res)\n    return res\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    res = re.findall(pattern, text)\n    print(res)\n    return res\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    res = re.split(pattern, text)\n    print(res)\n    return res\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    res = re.findall(pattern, text)\n    print(res)\n    return res\ndef text_match_twenty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    res = re.split(pattern, text)\n    print(res)\n    return res\ndef text_match_twenty_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    res = re.findall(pattern, text)\n    print(res)\n    return res\ndef text_match_twenty_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    res = re.split(pattern, text)\n    print(res)\n    return res\ndef text_match_twenty_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    res = re.findall(pattern, text)\n    print(res)\n    return res\ndef text_match_twenty_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    res = re.split(pattern, text)\n    print(res)\n    return res\ndef text_match_twenty_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    res = re.findall(pattern, text)\n    print(res)\n    return res\ndef text_match_twenty_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    res = re.split(pattern, text)\n    print(res)\n    return res\ndef text_match_twenty_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    res = re.findall(pattern, text)\n    print(res)\n    return res\ndef text_match_twenty_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b'",
        "num_ids": 21
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r\"(a[b]+?)\")\n    if re.search(pattern, text):\n        return re.search(pattern, text).group()\n    else:\n        return False\n",
        "num_ids": 51
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # YOUR CODE HERE\n    text = re.sub('a.*b', \"\", text)\n    return text\n",
        "num_ids": 28
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    \n    text = re.sub(r'\\s', \"\", text) # Remove spaces\n    b = re.compile(r'ab+')\n    a = b.search(text)\n    if a:\n        return True\n    else:\n        return False\n",
        "num_ids": 65
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(\"a+b\", text)\n",
        "num_ids": 15
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    s = re.findall(r'ab*',text)\n    if s:\n        print(s)\n    else:\n        print(\"No matches found\")\n",
        "num_ids": 41
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'a(b)+', text)\n    return match\n",
        "num_ids": 23
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n    \n    \ndef check_Palindrome(n):\n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    while (n!=0):\n        last = last_Digit(n)\n        first = last_Digit(n)\n        n = (n//10) + (last*10)\n        print(first,last)\n    if (first==last):\n        return True\n    else:\n        return False\n        \n        \ndef main():\n    \n    n = int(input(\"Enter the Number\\n\"))\n    if (check_Palindrome(n)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \nif __name__ == '__main__':\n    main(",
        "num_ids": 145
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Python program to find the last digit of a number\n    # convert the number into a list\n    n = list(str(n))\n    \n    # remove the first element from the list\n    n.pop(0)\n    \n    # return the last element\n    return int(n[-1])\n",
        "num_ids": 73
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n > 0 :\n        return (int(str(n)[-1]))\n    else:\n        return(0)\n",
        "num_ids": 33
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = int(n) % 10\n    return last_digit\n",
        "num_ids": 20
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n",
        "num_ids": 14
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    \n    n = int(n)\n    l = int(n / 10)\n    r = int(n % 10)\n    \n    if l == 0 :\n        return r\n    else :\n        return last_Digit(l)\n    \ndef reverse(number) :\n    '''\n    Write a python function to find the reverse of a given number.\n    '''\n    \n    number = int(number)\n    rev = 0\n    \n    while number > 0 :\n        rev = (rev * 10) + (number % 10)\n        number = int(number / 10)\n    \n    return rev\n    \ndef is_prime(number) :\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    \n    number = int(number)\n    \n    if number == 1 or number == 0 :\n        return False\n    if number % 2 == 0 :\n        return False\n    for i in range(3, number // 2) :\n        if number % i == 0 :\n            return False\n    return True\n    \ndef is_palindrome(number) :\n    '''\n    Write a python function to check if a given number is a palindrome or not.\n    '''\n    \n    number = int(number)\n    \n    rev = reverse(number)\n    \n    if rev == number :\n        return True\n    return False\n    \ndef is_prime_number(n) :\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    \n    if n <= 1 :\n        return False\n    elif n <= 3 :\n        return True\n    elif n % 2 == 0 or n % 3 == 0 :\n        return False\n    i = 5\n    while i * i <= n :\n        if n % i == 0 or n % (i + 2) == 0 :\n            return False\n        i = i + 6\n    return True\n    \ndef is_prime_number(n) :\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    \n    if n <= 1 :\n        return False\n    elif n <= 3 :\n        return True\n    elif n % 2 == 0 or n % 3 == 0 :\n        return False\n    i = 5\n    while i * i <= n :\n        if n % i == 0 or n % (i + 2) == 0 :\n            return False\n        i = i + 6\n    return True\n    \ndef sum_Digits(n) :\n    '''\n    Write a python function to find the sum of all digits of a given number.\n    '''\n    \n    sum = 0\n    n = str(n)\n    for i in n :\n        sum += int(i)\n    \n    return sum\n    \ndef sum_Digits(n) :\n    '''\n    Write a python function to find the sum of all digits of a given number.\n    '''\n    \n    if n == 0 :\n        return 0\n    \n    i = 1\n    sum = 0\n    while i <= n :\n        sum += int(n)\n        n = n - 1\n    return sum\n    \ndef sum_Digits(n) :\n    '''\n    Write a python function to find the sum of all digits of a given number.\n    '''\n    \n    if n == 0 :\n        return 0\n    \n    i = 1\n    sum = 0\n    while i <= n :\n        sum += int(n)\n        n = n - 1\n    return sum\n    \ndef sum_Digits(n) :\n    '''\n    Write a python function to find the sum of all digits of a given number.\n    '''\n    \n    if n == 0 :\n        return 0\n    \n    i = 1\n    sum = 0\n    while i <= n :\n        sum += int(n)\n        n = n - 1\n    return sum\n    \ndef sum_Digits(n) :\n    '''\n    Write a python function to find the sum of all digits of a given number.\n    '''\n    \n    if n == 0 :\n        return 0\n    \n    i = 1\n    sum = 0\n    while i <= n :\n        sum += int(n)\n        n = n - 1\n    return sum\n    \ndef sum_Digits(n) :\n    '''\n    Write a python function to find the sum of all digits of a given number.\n    '''\n    \n    if n == 0 :\n        return 0\n    \n    i = 1\n    sum = 0\n    while i <= n :\n        sum += int(n)\n        n = n - 1\n    return sum\n    \ndef sum_Digits(n) :\n    '''\n    Write a python function to find the sum of all digits of a given number.\n    '''\n    \n    if n == 0 :\n        return 0\n    \n    i = 1\n    sum = 0\n    while i <= n :\n        sum += int(n)\n        n = n - 1\n    return sum\n    \ndef sum_Digits(n) :\n    '''\n    Write a python function to find the sum of all digits of a given number.\n    '''\n    \n    if n == 0 :\n        return 0\n    \n    i = 1\n    sum = 0\n    while i <= n :\n        sum += int(n)\n        n = n - 1\n    return sum\n    \ndef sum_Digits(n) :\n    '''\n    Write a python function to find the sum of all digits of a given number.\n    '''\n    \n    if n == 0 :\n        return 0\n    \n    i = 1\n    sum = 0\n    while i <= n :\n        sum += int(n)\n        n = n - 1\n    return sum\n    \ndef sum_Digits(n) :\n    '''\n    Write a python function to find the sum of all digits of a given number.\n    '''\n    \n    if n == 0 :\n        return 0\n    \n    i = 1\n    sum = 0\n    while i <= n :\n        sum += int(n)\n        n = n - 1\n    return sum\n    \ndef sum_Digits(n) :\n    '''\n    Write a python function to find the sum of all digits of a given number.\n    '''\n    \n    if n == 0 :\n        return 0\n    \n    i = 1\n    sum = 0\n    while i <= n :\n        sum += int(n)\n        n = n - 1\n    return sum\n    \ndef sum_Digits(n) :\n    '''\n    Write a python function to find the sum of all digits of a given number.\n    '''\n    \n    if n == 0 :\n        return 0\n    \n    i = 1\n    sum = 0\n    while i <= n :\n        sum += int(n)\n        n = n - 1\n    return sum\n    \ndef sum_Digits(n) :\n    '''\n    Write a python function to find the sum of all digits of a given number.\n    '''\n    \n    if n == 0 :\n        return 0\n    \n    i = 1\n    sum = 0\n    while i <= n :\n        sum += int(n)\n        n = n - 1\n    return sum\n    \ndef sum_Digits(n) :\n    '''\n    Write a python function to find the sum of all digits of a given number.\n    '''\n    \n    if n == 0 :\n        return 0\n    \n    i = 1\n    sum = 0\n    while i <= n :\n        sum += int(n)\n        n = n - 1\n    return sum\n    \ndef sum_Digits(n) :\n    '''\n    Write a python function to find the sum of all digits of a given number.\n    '''\n    \n    if n == 0 :\n        return 0\n    \n    i = 1\n    sum = 0\n    while i <= n :\n        sum += int(n)\n        n = n - 1\n    return sum\n    \ndef sum_Digits(n) :\n    '''\n    Write a python function to find the sum of all digits of a given number.\n    '''\n    \n    if n == 0 :\n        return 0\n    \n    i = 1\n    sum = 0\n    while i <= n :\n        sum += int(n)\n        n = n - 1\n    return sum\n    \ndef sum_Digits(n) :\n    '",
        "num_ids": 67
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    while n // 10 :\n        n = n // 10\n    return n % 10\n",
        "num_ids": 22
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    x = str(n)\n    return x[-1]\n",
        "num_ids": 18
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = int(input('Enter the number'))\n    if n >= 0:\n        if n == 0:\n            print('The last digit of {} is {}'.format(n,n%10))\n        else:\n            print('The last digit of {} is {}'.format(n,n%10))\n    else:\n        print('The last digit of {} is {}'.format(n,n%10))\n        \nlast_Digit(-20)\n",
        "num_ids": 107
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n",
        "num_ids": 8
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    l1 = []\n    for i in range(len(list1)):\n        if list1[i]<0:\n            l1.append(list1[i])\n    return l1\n    \n",
        "num_ids": 51
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list1 = list(map(int,list1))\n    print(\"Original list : \",list1)\n    for i in range(0,len(list1)):\n        if list1[i]>0:\n            list1[i] = -list1[i]\n    print(\"Negative numbers are : \",list1)\n    return list1\n",
        "num_ids": 85
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return list2\n",
        "num_ids": 37
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for i in range(0,len(list1)):\n        if list1[i] < 0:\n            result.append(list1[i])\n    return result\n",
        "num_ids": 48
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in list1:\n        if i < 0:\n            neg.append(i)\n    print(\"Negative numbers in the given list:\",neg)\n",
        "num_ids": 45
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in list1:\n        if i < 0:\n            neg.append(i)\n    return neg\n",
        "num_ids": 34
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    print(list1)\n    # your code here\n    count = 0\n    for i in list1:\n        if i < 0:\n            count += 1\n            list1.remove(i)\n    print(list1)\n    return count\n",
        "num_ids": 60
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [-n for n in list1]\nprint(neg_nos([-5, -5, -10, 2, 5, -3, -2, -1]))",
        "num_ids": 42
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n",
        "num_ids": 17
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for x in list1:\n        if x < 0:\n            result.append(x)\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace('a','',1)\n    \ndef test_remove_odd():\n    assert remove_odd('a') == 'a'\n    assert remove_odd('aa') == 'a'\n    assert remove_odd('b') == 'b'\n    assert remove_odd('ab') == 'b'\n    assert remove_odd('aaab') == 'aabb'\n    assert remove_odd('abc') == 'bcd'\n    \nif __name__ == '__main__':\n    test_remove_odd(",
        "num_ids": 126
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace(\" \", \"\").replace(\".\", \"\")\nprint(remove_odd(\"Taha is a good boy\"))\n",
        "num_ids": 32
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if str1=='':\n        return str1\n    new_str=\"\"\n    for i in range(len(str1)):\n        if str1[i]=='0':\n            continue\n        else:\n            new_str=new_str+str1[i]\n    return new_str\n",
        "num_ids": 74
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1[::2]\n",
        "num_ids": 11
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in str1:\n        if i % 2 == 0:\n            str1 = str1.replace(i,'')\n    return str1\n",
        "num_ids": 37
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if len(str1) == 0:\n        return ''\n    else:\n        return str1[:-1:2]\n",
        "num_ids": 32
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # method 1\n    str1 = str1.replace('o', '')\n    str1 = str1.replace('O', '')\n    str1 = str1.replace(' ', '')\n    str1 = str1.replace('x', '')\n    str1 = str1.replace('X', '')\n    return str1\n",
        "num_ids": 81
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    list_a=list(str1)\n    for i in range(len(list_a)):\n        if i%2==0:\n            list_a.remove(list_a[i])\n    result=''.join(list_a)\n    return result\n",
        "num_ids": 65
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    lst = list(str1)\n    lst1 = []\n    for i in lst:\n        if i % 2 == 0:\n            lst1.append(i)\n    s = ''.join(lst1)\n    return s\n",
        "num_ids": 62
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for char in str1:\n        if char.isalpha():\n            return str1.replace(char,\"\")\n        else:\n            continue\nprint(remove_odd(\"a1b2c3\"))\nprint(remove_odd(\"1a2b3c4\"))\nprint(remove_odd(\"a!@#$%^&*()_+=-|]}][{;:\\\"<>,./?\"))\nprint(remove_odd(\"a-b-c-d\"))\nprint(remove_odd(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"))",
        "num_ids": 147
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for x in range(len(test_list)):\n        for y in range(len(test_list)):\n            if x!= y:\n                if len(test_list[x]) == len(test_list[y]) and test_list[x] == test_list[y]:\n                    count += 1\n    return count\n",
        "num_ids": 86
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    test_list = sorted(test_list)\n    dic = {}\n    for i,j in test_list:\n        if i not in dic:\n            dic[i] = j\n        if j not in dic:\n            dic[j] = i\n        if i == j:\n            continue\n        if (i,j) not in dic.keys():\n            dic[(i,j)] = 1\n        else:\n            dic[(i,j)] += 1\n    return dic\n",
        "num_ids": 125
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] < test_list[j][0] and test_list[i][1] > test_list[j][1]:\n                bidirectional_count += 1\n                continue\n            if test_list[i][0] > test_list[j][0] and test_list[i][1] < test_list[j][1]:\n                bidirectional_count += 1\n    return bidirectional_count\n",
        "num_ids": 149
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            if test_list[i][0] <= test_list[j][1] and test_list[i][1] >= test_list[j][0]:\n                count += 1\n    return count\n",
        "num_ids": 84
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        if (test_list[i][1] == test_list[i+1][0]) or (test_list[i+1][1] == test_list[i][0]):\n            count += 1\n    return count\n",
        "num_ids": 76
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    def count_bidirectional_two_list(a,b):\n        '''\n        Define count_bidirectional_two_list function to count bidirectional tuple pairs.\n        '''\n        return len(set(zip(a,b)))\n    return count_bidirectional_two_list(test_list[0],test_list[1])\n",
        "num_ids": 40
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    from collections import Counter\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            tup = (test_list[i], test_list[j])\n            if tup[0]==tup[1]:\n                count+=1\n    return count\n",
        "num_ids": 87
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return len([x for x in test_list if x[1] == x[2]])\n    \n    \ndef count_digits(test_list):\n    '''\n    Write a function to count the number of digits in the numbers in the list.\n    '''\n    return len([x for x in test_list if str(x).isdigit()])\n    \n    \ndef find_longest_substring(test_list):\n    '''\n    Write a function to find the longest substring in the list.\n    '''\n    return max([x for x in test_list], key=len)\n    \n    \ndef count_upper_lower(test_list):\n    '''\n    Write a function to count the number of upper- and lower-case letters in the list.\n    '''\n    upper, lower = 0, 0\n    for x in test_list:\n        if x.isupper():\n            upper += 1\n        if x.islower():\n            lower += 1\n    return upper, lower\n    \n    \ndef get_first_character_of_each_word(test_list):\n    '''\n    Write a function to return the first character of each word in the list.\n    '''\n    return [x[0] for x in test_list]\n    \n    \ndef sort_list_by_first_element(test_list):\n    '''\n    Write a function to sort the list based on the first element of each word in the list.\n    '''\n    return sorted(test_list, key=lambda x: x[0])\n    \n    \ndef sort_list_by_last_element(test_list):\n    '''\n    Write a function to sort the list based on the last element of each word in the list.\n    '''\n    return sorted(test_list, key=lambda x: x[-1])\n    \n    \ndef sort_list_by_index_element(test_list):\n    '''\n    Write a function to sort the list based on the index element of each word in the list.\n    '''\n    return sorted(test_list, key=lambda x: x[0])\n    \n    \ndef sort_list_by_second_element(test_list):\n    '''\n    Write a function to sort the list based on the second element of each word in the list.\n    '''\n    return sorted(test_list, key=lambda x: x[1])\n    \n    \ndef count_all_upper_lower(test_list):\n    '''\n    Write a function to count the number of upper- and lower-case letters in the list.\n    '''\n    all_lower, all_upper = 0, 0\n    for x in test_list:\n        if x.isupper():\n            all_upper += 1\n        if x.islower():\n            all_lower += 1\n    return all_upper, all_lower\n    \n    \ndef count_in_range(test_list):\n    '''\n    Write a function to count the number of elements in the list that fall in a range.\n    '''\n    in_range = 0\n    for x in test_list:\n        if int(x) >= -100 and int(x) <= 100:\n            in_range += 1\n    return in_range\n    \n    \ndef is_first_name_short(test_list):\n    '''\n    Write a function to determine whether a first name is a shorter name or not.\n    '''\n    short = False\n    for x in test_list:\n        if len(x) > 5:\n            short = True\n    return short\n    \n    \ndef sort_list_by_name_last_first(test_list):\n    '''\n    Write a function to sort the list based on the last element of each word in the list.\n    '''\n    return sorted(test_list, key=lambda x: x[0])\n    \n    \ndef find_first_number(test_list):\n    '''\n    Write a function to find the first number in the list.\n    '''\n    for x in test_list:\n        if x.isnumeric():\n            return x\n        \n        \ndef count_pairs(test_list):\n    '''\n    Write a function to count the number of pairs of elements in the list.\n    '''\n    return len([x for x in test_list if x in test_list[1:]])\n    \n    \ndef sort_list_by_index_element(test_list):\n    '''\n    Write a function to sort the list based on the index element of each word in the list.\n    '''\n    return sorted(test_list, key=lambda x: x[0])\n    \n    \ndef sort_list_by_index_element(test_list):\n    '''\n    Write a function to sort the list based on the index element of each word in the list.\n    '''\n    return sorted(test_list, key=lambda x: x[0])\n    \n    \ndef add_new_word_to_list(test_list, word):\n    '''\n    Write a function to add a new word to a list if it is not already in the list.\n    '''\n    if word not in test_list:\n        test_list.append(word)\n    return test_list\n    \n    \ndef count_pairs(test_list):\n    '''\n    Write a function to count the number of pairs of elements in the list.\n    '''\n    return len([x for x in test_list if x in test_list[1:]])\n    \n    \ndef count_pairs(test_list):\n    '''\n    Write a function to count the number of pairs of elements in the list.\n    '''\n    return len([x for x in test_list if x in test_list[1:]])\n    \n    \ndef count_pairs(test_list):\n    '''\n    Write a function to count the number of pairs of elements in the list.\n    '''\n    return len([x for x in test_list if x in test_list[1:]])\n    \n    \ndef insert_at_index(test_list, index, element):\n    '''\n    Write a function to insert an element at a specific index in a list.\n    '''\n    test_list.insert(index, element)\n    return test_list\n    \n    \ndef get_n_most_common_elements(test_list, n):\n    '''\n    Write a function to get the n most common elements from a list.\n    '''\n    return sorted(test_list, key=lambda x: x[1], reverse=True)[:n]\n    \n    \ndef get_n_least_common_elements(test_list, n):\n    '''\n    Write a function to get the n least common elements from a list.\n    '''\n    return sorted(test_list, key=lambda x: x[1])[:n]\n    \n    \ndef is_first_name_short(test_list):\n    '''\n    Write a function to determine whether a first name is a shorter name or not.\n    '''\n    short = False\n    for x in test_list:\n        if len(x) > 5:\n            short = True\n    return short\n    \n    \ndef is_first_name_short(test_list):\n    '''\n    Write a function to determine whether a first name is a shorter name or not.\n    '''\n    short = False\n    for x in test_list:\n        if len(x) > 5:\n            short = True\n    return short\n    \n    \ndef is_first_name_short(test_list):\n    '''\n    Write a function to determine whether a first name is a shorter name or not.\n    '''\n    short = False\n    for x in test_list:\n        if len(x) > 5:\n            short = True\n    return short\n    \n    \ndef is_first_name_short(test_list):\n    '''\n    Write a function to determine whether a first name is a shorter name or not.\n    '''\n    short = False\n    for x in test_list:\n        if len(x) > 5:\n            short = True\n    return short\n    \n    \ndef is_first_name_short(test_list):\n    '''\n    Write a function to determine whether a first name is a shorter name or not.\n    '''\n    short = False\n    for x in test_list:\n        if len",
        "num_ids": 19
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    counter = 0\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            counter += 1\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                counter -= 1\n                break\n    print(counter)\n",
        "num_ids": 94
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    # Write your code here\n    for x in range(len(test_list)):\n        for y in range(x+1,len(test_list)):\n            count += int(test_list[x][0]==test_list[y][0])\n            count += int(test_list[x][1]==test_list[y][1])\n    print(count)\n",
        "num_ids": 98
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n",
        "num_ids": 9
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return\n    elif len(L) == 1:\n        return L[0]\n    else:\n        return L[0] * 10 + multiple_to_single(L[1:])\n",
        "num_ids": 58
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return L[0]*100+L[1]*10+L[2]\n",
        "num_ids": 23
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    else:\n        return L[0] + multiple_to_single(L[1:])\n",
        "num_ids": 39
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join([str(elem) for elem in L]))\n",
        "num_ids": 22
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if L==[]:\n        return 0\n    elif len(L)==1:\n        return L[0]\n    else:\n        return L[0]*10 + multiple_to_single(L[1:])\n",
        "num_ids": 56
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = L[:]\n    for i in range(len(L)):\n        L[i] = int(L[i])\n    L = sorted(L)\n    return L[0] * 10 + L[1]\n",
        "num_ids": 56
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    #result = 0\n    #for i in L:\n        #result = result*10 + i\n",
        "num_ids": 26
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if L is None or L == [] or type(L)!= list:\n        return None\n",
        "num_ids": 24
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # print(L)\n    return int(''.join(map(str,L)))\n",
        "num_ids": 23
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.lower()\n    list_of_words = []\n    for word in text.split():\n        list_of_words.append(word)\n",
        "num_ids": 40
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    output_list=[]\n    pattern = r'(\\w+)(?:' + r'(?:' + r'\\w+|\\s|,|\\.|!|:|;|\\?)+|' + r'\\w+|\\s|,|\\.|!|:|;)' + r')'\n    find_adverb = re.finditer(pattern, text)\n    for find_adverb_item in find_adverb:\n        output_list.append(find_adverb_item.span())\n    return output_list\n",
        "num_ids": 130
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    if not text:\n        return 0\n    result = re.finditer(r'(?:<[^>]*?>)?(\\s*?)([A-Z][a-z]+)', text)\n    if not result:\n        return 0\n    return result.next().start(1)\n",
        "num_ids": 72
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.lower()\n    list_of_adverb = []\n    list_of_positions = []\n    if re.search('(without)', text):\n        list_of_adverb.append(re.search('(without)', text).group(0))\n    if re.search('(without)', text):\n        list_of_positions.append(re.search('(without)', text).span(0))\n    if re.search('(without)', text):\n        list_of_adverb.append(re.search('(without)', text).group(0))\n    if re.search('(without)', text):\n        list_of_positions.append(re.search('(without)', text).span(0))\n    if re.search('(without)', text):\n        list_of_adverb.append(re.search('(without)', text).group(0))\n    if re.search('(without)', text):\n        list_of_positions.append(re.search('(without)', text).span(0))\n    if re.search('(without)', text):\n        list_of_adverb.append(re.search('(without)', text).group(0))\n    if re.search('(without)', text):\n        list_of_positions.append(re.search('(without)', text).span(0))\n    if re.search('(without)', text):\n        list_of_adverb.append(re.search('(without)', text).group(0))\n    if re.search('(without)', text):\n        list_of_positions.append(re.search('(without)', text).span(0))\n    if re.search('(without)', text):\n        list_of_adverb.append(re.search('(without)', text).group(0))\n    if re.search('(without)', text):\n        list_of_positions.append(re.search('(without)', text).span(0))\n    if re.search('(without)', text):\n        list_of_adverb.append(re.search('(without)', text).group(0))\n    if re.search('(without)', text):\n        list_of_positions.append(re.search('(without)', text).span(0))\n    if re.search('(without)', text):\n        list_of_adjective = re.findall(r'(without)\\s(n\\'t|n\\'t)', text)\n        list_of_positions.append(re.findall(r'(without)\\s(n\\'t|n\\'t)', text))\n    if re.search('(without)', text):\n        list_of_adjective = re.findall(r'(without)\\s(n\\'t|n\\'t)', text)\n        list_of_positions.append(re.findall(r'(without)\\s(n\\'t|n\\'t)', text))\n    if re.search('(without)', text):\n        list_of_adjective = re.findall(r'(without)\\s(n\\'t|n\\'t)', text)\n        list_of_positions.append(re.findall(r'(without)\\s(n\\'t|n\\'t)', text))\n    if re.search('(without)', text):\n        list_of_adjective = re.findall(r'(without)\\s(n\\'t|n\\'t)', text)\n        list_of_positions.append(re.findall(r'(without)\\s(n\\'t|n\\'t)', text))\n    if re.search('(without)', text):\n        list_of_adjective = re.findall(r'(without)\\s(n\\'t|n\\'t)', text)\n        list_of_positions.append(re.findall(r'(without)\\s(n\\'t|n\\'t)', text))\n    if re.search('(without)', text):\n        list_of_adjective = re.findall(r'(without)\\s(n\\'t|n\\'t)', text)\n        list_of_positions.append(re.findall(r'(without)\\s(n\\'t|n\\'t)', text))\n    if re.search('(without)', text):\n        list_of_adjective = re.findall(r'(without)\\s(n\\'t|n\\'t)', text)\n        list_of_positions.append(re.findall(r'(without)\\s(n\\'t|n\\'t)', text))\n    if re.search('(without)', text):\n        list_of_adjective = re.findall(r'(without)\\s(n\\'t|n\\'t)', text)\n        list_of_positions.append(re.findall(r'(without)\\s(n\\'t|n\\'t)', text))\n    if re.search('(without)', text):\n        list_of_adjective = re.findall(r'(without)\\s(n\\'t|n\\'t)', text)\n        list_of_positions.append(re.findall(r'(without)\\s(n\\'t|n\\'t)', text))\n    if re.search('(without)', text):\n        list_of_adjective = re.findall(r'(without)\\s(n\\'t|n\\'t)', text)\n        list_of_positions.append(re.findall(r'(without)\\s(n\\'t|n\\'t)', text))\n    if re.search('(without)', text):\n        list_of_adjective = re.findall(r'(without)\\s(n\\'t|n\\'t)', text)\n        list_of_positions.append(re.findall(r'(without)\\s(n\\'t|n\\'t)', text))\n    if re.search('(without)', text):\n        list_of_adjective = re.findall(r'(without)\\s(n\\'t|n\\'t)', text)\n        list_of_positions.append(re.findall(r'(without)\\s(n\\'t|n\\'t)', text))\n    if re.search('(without)', text):\n        list_of_adjective = re.findall(r'(without)\\s(n\\'t|n\\'t)', text)\n        list_of_positions.append(re.findall(r'(without)\\s(n\\'t|n\\'t)', text))\n    if re.search('(without)', text):\n        list_of_adjective = re.findall(r'(without)\\s(n\\'t|n\\'t)', text)\n        list_of_positions.append(re.findall(r'(without)\\s(n\\'t|n\\'t)', text))\n    if re.search('(without)', text):\n        list_of_adjective = re.findall(r'(without)\\s(n\\'t|n\\'t)', text)\n        list_of_positions.append(re.findall(r'(without)\\s(n\\'t|n\\'t)', text))\n    if re.search('(without)', text):\n        list_of_adjective = re.findall(r'(without)\\s(n\\'t|n\\'t)', text)\n        list_of_positions.append(re.findall(r'(without)\\s(n\\'t|n\\'t)', text))\n    if re.search('(without)', text):\n        list_of_adjective = re.findall(r'(without)\\s(n\\'t|n\\'t)', text)\n        list_of_positions.append(re.findall(r'(without)\\s(n\\'t|n\\'t)', text))\n    if re.search('(without)', text):\n        list_of_adjective = re.findall(r'(without)\\s(n\\'t|n\\'t)', text)\n        list_of_positions.append(re.findall(r'(without)\\s(n\\'t|n\\'t)', text))\n    if re.search('",
        "num_ids": 2008
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # split the sentence into words\n    words = text.split()\n    \n    # define the list of adverbs\n    adverbs = ['ad', 'adp', 'adv', 'ag', 'an', 'b', 'c', 'd', 'e', 'f', 'i', 'l','m', 'n', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'x', 'y', 'z']\n    \n    # define the regex\n    pattern = r\"(\\w+)(\" + \"|\".join(map(re.escape,adverbs)) + r\")\"\n    \n    # define an empty list for storing adverb and their positions\n    adverbs_pos = []\n    \n    # get the match for each adverb in the sentence\n    for match in re.finditer(pattern,text):\n        \n        # get the adverb\n        adverb = match.group(0)\n        \n        # add the position of adverb to the list\n        adverbs_pos.append(match.start())\n        \n        # get the adverb\n        #print(adverb)\n        \n    # return the list of adverb and their positions\n    return adverbs_pos\n    \nif __name__ == \"__main__\":\n    #input_text = \"a short sentence\"\n    input_text = \"I am a short sentence.\"\n    print(find_adverb_position(input_text))\n",
        "num_ids": 340
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = \"ADV[ ]+\"\n    data = re.findall(pattern, text)\n    first_adverb = False\n    list_of_adverbs = []\n    for d in data:\n        if d.isupper() and d!= \"ADV.\" and first_adverb == False:\n            first_adverb = True\n            list_of_adverbs.append(d)\n        if d.isupper() and d!= \"ADV.\":\n            list_of_adverbs.append(d)\n        if d.islower():\n            first_adverb = False\n    return list_of_adverbs\n",
        "num_ids": 151
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb = input('Enter a word:')\n    result = re.findall(adverb, text)\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    first_adverb_position = \"\"\n    sentence = text.split('.')\n    for sentence in sentence:\n        sentence = sentence.split('?')\n        sentence = sentence[0]\n        sentence = sentence.split(',')\n        if re.search(\"to\", sentence):\n            sentence = sentence.split('.')\n            for index, line in enumerate(sentence):\n                if re.search(\"to\", line):\n                    first_adverb_position = str(index + 1)\n    return first_adverb_position\n",
        "num_ids": 131
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    regex = \"^[A-Z].*[\\s]$\"\n    sentence = re.search(regex, text)\n    if sentence == None:\n        print(\"This is not a valid sentence\")\n    elif sentence:\n        adverb_positions = []\n        for word in sentence.group(0):\n            if word.isupper():\n                adverb_positions.append(sentence.span()[0] + 1)\n        return adverb_positions\n    else:\n        print(\"This is not a valid sentence\")\n    return None\n",
        "num_ids": 135
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = (2*l**2)*math.pi\n    b = (2*l**2)*(math.pi)\n    return a + b",
        "num_ids": 37
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = l ** 2\n    b = 6 * l\n    return a + b\n",
        "num_ids": 22
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)\n",
        "num_ids": 12
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l * l\n    return area\n",
        "num_ids": 15
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (l**2)*6\n",
        "num_ids": 11
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6*(l**2)\n    return area\n",
        "num_ids": 17
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)\n",
        "num_ids": 12
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for i in nums:\n        if i > 0:\n            positive_count += 1\n    return positive_count / len(nums)\n",
        "num_ids": 43
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for n in nums:\n        if n > 0:\n            count += 1\n    return count/len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count\n",
        "num_ids": 40
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count\n    \n",
        "num_ids": 42
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos = 0\n    for i in nums:\n        if i>=0:\n            pos+=1\n    return pos",
        "num_ids": 31
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    result = 0\n    for x in range(len(nums)):\n        if nums[x] >= 0:\n            result += 1\n    return result/len(nums)\n",
        "num_ids": 46
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count / len(nums)\n",
        "num_ids": 46
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count=0\n    for i in range(len(nums)):\n        if nums[i]>0:\n            count=count+1\n    return count/len(nums)\n",
        "num_ids": 48
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_num = 0\n    neg_num = 0\n    for num in nums:\n        if num > 0:\n            pos_num += 1\n        else:\n            neg_num += 1\n    return pos_num/len(nums)\n",
        "num_ids": 61
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count_pos = 0\n    for num in nums:\n        if num > 0:\n            count_pos += 1\n    return count_pos / len(nums)\n",
        "num_ids": 43
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = 0\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            if list1[i] > largest_neg:\n                largest_neg = list1[i]\n    print(\"Largest Negative Number in the List is : {}\".format(largest_neg))\n",
        "num_ids": 79
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1)\n    \n    \nprint(largest_neg([-5,-2,1,-3]))    \n",
        "num_ids": 32
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = -10000\n    for x in list1:\n        if x<0:\n            if x>largest_neg:\n                largest_neg = x\n    return largest_neg\n",
        "num_ids": 47
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    if len(list2) == 0:\n        return False\n    else:\n        return list2[-1]\n",
        "num_ids": 60
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -1\n    for i in list1:\n        if i<0:\n            if i>largest:\n                largest = i\n    return largest\n",
        "num_ids": 39
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort(reverse=True)\n    return list1[0]\n",
        "num_ids": 21
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1) > 0:\n        result = -1\n        for i in range(len(list1)):\n            if list1[i] < 0:\n                if result < list1[i]:\n                    result = list1[i]\n        return result\n    else:\n        return None\n",
        "num_ids": 74
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = 0\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            if list1[i] > largest:\n                largest = list1[i]\n    return largest\n",
        "num_ids": 55
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = -999999\n    for i in list1:\n        if i<max_num:\n            max_num = i\n    print(\"Largest Negative number from given list is : \",max_num)\n",
        "num_ids": 54
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num=0\n    for num in list1:\n        if num<0:\n            if num>largest_num:\n                largest_num=num\n    return largest_num\n",
        "num_ids": 46
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n",
        "num_ids": 34
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    \n    # first we will loop through each tuple in our list and get the length\n    # of each item in the tuple. \n    # then we will call the trimmed function on each tuple to get a new list\n    # that only contains the tuples with less than k items.\n    \n    # the output should be a new list of tuples.\n    \n    for t in test_list:\n        if len(t) <= K:\n            test_list.remove(t)\n    \n    return test_list\n    \ndef trim_tuple2(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    \n    # first we will loop through each tuple in our list and get the length\n    # of each item in the tuple. \n    # then we will call the trimmed function on each tuple to get a new list\n    # that only contains the tuples with less than k items.\n    \n    # the output should be a new list of tuples.\n    \n    for t in test_list:\n        if len(t) <= K:\n            test_list.remove(t)\n    \n    return test_list\n    \ndef trim_tuple3(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    \n    # first we will loop through each tuple in our list and get the length\n    # of each item in the tuple. \n    # then we will call the trimmed function on each tuple to get a new list\n    # that only contains the tuples with less than k items.\n    \n    # the output should be a new list of tuples.\n    \n    for t in test_list:\n        if len(t) <= K:\n            test_list.remove(t)\n    \n    return test_list\n    \n",
        "num_ids": 122
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n        \n    return test_list\n",
        "num_ids": 56
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return test_list\n    return test_list[:K]\n",
        "num_ids": 30
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Time: O(n) | Space: O(1)\n    for i in range(0, len(test_list)):\n        test_list[i] = test_list[i][:K]\n",
        "num_ids": 52
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    \n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            del test_list[i][K]\n    \n    return test_list\n",
        "num_ids": 51
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    temp_list = []\n    for i in range(0, len(test_list)):\n        if len(test_list[i]) == K:\n            temp_list.append(test_list[i])\n    return temp_list\n    \n",
        "num_ids": 61
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Your code here\n    for i in range(len(test_list)):\n        test_list[i] = list(test_list[i])\n        while len(test_list[i]) > K:\n            del test_list[i][-1]\n        test_list[i] = tuple(test_list[i])\n    return test_list\n",
        "num_ids": 88
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # make sure the input is a list\n    if type(test_list)!= list:\n        raise TypeError(\"Please enter a list\")\n",
        "num_ids": 35
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    k = K\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:k]\n",
        "num_ids": 39
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = tuple()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result\n",
        "num_ids": 51
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    tup_new = ()\n    for i in range(len(test_tup1)):\n        tup_new += (test_tup1[i]*test_tup2[i],)\n    return tup_new\nprint(index_multiplication((1,2,3,4),(2,3,4,5)))\n",
        "num_ids": 84
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return (test_tup1[0] * test_tup2[0], test_tup1[1] * test_tup2[1])\n",
        "num_ids": 40
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(int(i)*j for i,j in zip(test_tup1, test_tup2))\n",
        "num_ids": 31
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    if (type(test_tup1)!= tuple or type(test_tup2)!= tuple) or len(test_tup1)!= len(test_tup2) or len(test_tup1) == 0 or len(test_tup2) == 0:\n        raise Exception(\"Wrong arguments to the function\")\n    \n    return tuple(a * b for a, b in zip(test_tup1, test_tup2))\n",
        "num_ids": 112
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        test_tup1, test_tup2 = test_tup2, test_tup1\n",
        "num_ids": 47
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return (test_tup1[0]*test_tup2[0], test_tup1[1]*test_tup2[1], test_tup1[2]*test_tup2[2])\n",
        "num_ids": 57
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    multiplied = ()\n    for i in range(0, len(test_tup1)):\n        multiplied = multiplied + (test_tup1[i] * test_tup2[i],)\n    return multiplied\n",
        "num_ids": 56
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(tup1_mult * tup2_mult for tup1_mult, tup2_mult in zip(test_tup1, test_tup2))\n",
        "num_ids": 45
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Write your solution here\n    count = 0\n    for i in range(len(tup)):\n        if tup[i] in lst:\n            count += 1\n    return count\n    \n    \n    \n    \nprint(\"Example 1\") \ntup1 = (1,2,3,4,5,6,7,8,9,10,10,10,10,10,10)\nlst1 = [1,2,3,4,5,6,7,8,9,10]\nprint(\"Input tuple : \",tup1)\nprint(\"Input list : \",lst1)\nprint(\"Output : \",count_Occurrence(tup1, lst1))\nprint(\"\\n\")\n",
        "num_ids": 172
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst_count = list(Counter(lst).values())\n    for i in range(len(lst)):\n        if lst_count[i] == 1:\n            lst_count[i] = \"No Occurence\"\n    count = \" \".join(lst_count)\n    return count\n",
        "num_ids": 77
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return (Counter(lst) & Counter(tup))\n",
        "num_ids": 17
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for i in range(len(lst)):\n        if lst[i] == tup[i]:\n            lst[i] = tup[i]\n    return lst\nprint(count_Occurrence((3,4,6,5), [1,1,1,1,1,1,3,3,3,3,3]))\n",
        "num_ids": 87
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = 0\n    for x in tup:\n        if x in lst:\n            cnt += 1\n    print(cnt)\n",
        "num_ids": 37
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return len(Counter(lst).keys())\n    \n    \ndef count_Occurrence1(tup,lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return len(Counter(lst))\n",
        "num_ids": 12
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for x in lst:\n        if x in tup:\n            count += 1\n    return count \n",
        "num_ids": 33
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = 0\n    for ele in lst:\n        if ele in tup:\n            cnt += 1\n    return cnt\n",
        "num_ids": 35
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    new = []\n    for x in lst:\n        for i in tup:\n            if x == i:\n                new.append(i)\n    return new\n",
        "num_ids": 42
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for x in lst:\n        if x in tup:\n            count = count + 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        yield num ** 3\n",
        "num_ids": 17
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i]=nums[i]**3\n    return nums\n",
        "num_ids": 34
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_nums = []\n    for x in nums:\n        cube_nums.append(x**3)\n    return cube_nums\ncube_nums([1, 2, 3, 4])",
        "num_ids": 51
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** 3\n    return nums\n",
        "num_ids": 35
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result\n    ",
        "num_ids": 30
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for x in nums:\n        nums = x*x*x\n    return nums\n",
        "num_ids": 25
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube = []\n    for n in nums:\n        cube.append(n**3)\n    print(cube)\n",
        "num_ids": 31
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 3)\n",
        "num_ids": 18
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for n in nums:\n        result.append(n**3)\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1): \n        sum += i\n    return sum \n    \ndef cal_sum_n(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return sum(range(1, n + 1))\n",
        "num_ids": 15
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    while(n > 0):\n        total = total + n\n        n = n - 1\n    return total\n",
        "num_ids": 33
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n**2 + n + 2\n",
        "num_ids": 12
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i\n    print(\"Sum of Perrin numbers from 1 to %d is %d\" % (n, sum))\n",
        "num_ids": 51
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    \n    total = 0\n    \n    for i in range(1, n+1):\n        total += i\n        \n    return total\n",
        "num_ids": 35
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    n = 0\n    while n <= 100:\n        if is_perrin(n):\n            n = n + 1\n            print(n)\n",
        "num_ids": 37
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        result += i\n",
        "num_ids": 25
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    def sum_perrin(n):\n        sum = 0\n        for i in range(2,n):\n            if(n%i==0):\n                return 0\n            else:\n                sum = sum + i\n        return sum\n    return sum_perrin(n)\n",
        "num_ids": 67
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return sum(i for i in range(1, n+1) if i%2==0)",
        "num_ids": 25
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    #sum = 0\n    for i in range(1,n):\n        #sum = sum + (i*i)\n        print(i*i)\n    return sum\n",
        "num_ids": 43
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return_list = []\n    for i in range(l):\n        return_list.append(str[i])\n    return return_list\n",
        "num_ids": 36
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    l=l[:l]\n    string = \"\"\n    for i in range(l):\n        string += str[i]\n    return string\n",
        "num_ids": 37
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in range(l):\n        print(str[i])\n",
        "num_ids": 19
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str[:l]\n",
        "num_ids": 10
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    s_arr = []\n    if len(str) > l:\n        s_arr.append(str[0:l])\n        s_arr.append(str[l:])\n        return s_arr\n    elif len(str) < l:\n        if l <= len(str):\n            s_arr.append(str)\n        else:\n            s_arr.append(str[0:l])\n        return s_arr\n",
        "num_ids": 106
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    length = 0\n    while True:\n        try:\n            start = str.index(l,length)\n            end = start + len(l)\n            yield str[start:end]\n            length = end\n        except:\n            break\n",
        "num_ids": 60
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    lst = list(str)\n    final_lst = []\n    for i in range(l):\n        final_lst.append(lst.pop())\n    return final_lst\n",
        "num_ids": 49
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    res = []\n    for i in range(len(l)):\n        if len(l[i]) >= l[i]:\n            l[i] = l[i][:l[i]]\n            res.append(l[i])\n    return res\n",
        "num_ids": 63
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if str == 'a':\n        return 'a'\n    elif str == 'e':\n        return 'e'\n    elif str == 'i':\n        return 'i'\n    elif str == 'o':\n        return 'o'\n    elif str == 'u':\n        return 'u'\n    elif len(str) == l:\n        return str\n    else:\n        return '<ERROR>'\n",
        "num_ids": 103
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(l):\n        result.append(str[i:i+l])\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    x=re.sub('\\s', '', text1)\n    return x\ndef read_file():\n    '''\n    Write a function to read a file and return a list of strings.\n    '''\n    with open('file1.txt', 'r') as f:\n        str1 = f.read()\n        return str1\ndef remove_words(text2):\n    '''\n    Write a function to remove all words with more than 2 letters in the given string.\n    '''\n    x = re.sub('[a-z]{2,}', '', text2)\n    return x\ndef convert_to_lowercase(text3):\n    '''\n    Write a function to convert all characters of a string to lowercase.\n    '''\n    x = text3.lower()\n    return x\ndef remove_numbers(text4):\n    '''\n    Write a function to remove all numbers from the given string.\n    '''\n    x = re.sub('\\d', '', text4)\n    return x\ndef remove_punctuations(text5):\n    '''\n    Write a function to remove all punctuations from the given string.\n    '''\n    x = re.sub('[^\\w\\s]', '', text5)\n    return x\ndef find_longest_word(text6):\n    '''\n    Write a function to find the longest word in the given string.\n    '''\n    x = max(re.findall('\\w+', text6), key=len)\n    return x\ndef find_longest_sentence(text7):\n    '''\n    Write a function to find the longest sentence in the given string.\n    '''\n    x = max(re.findall('[.!?]+', text7), key=len)\n    return x\ndef count_upper_case_characters(text8):\n    '''\n    Write a function to count the number of characters in the given string which are in uppercase.\n    '''\n    x = len(re.findall('[A-Z]', text8))\n    return x\ndef count_lower_case_characters(text9):\n    '''\n    Write a function to count the number of characters in the given string which are in lowercase.\n    '''\n    x = len(re.findall('[a-z]', text9))\n    return x\ndef count_numbers(text10):\n    '''\n    Write a function to count the number of numbers in the given string.\n    '''\n    x = len(re.findall('\\d', text10))\n    return x\ndef count_special_characters(text11):\n    '''\n    Write a function to count the number of special characters in the given string.\n    '''\n    x = len(re.findall('\\W', text11))\n    return x\ndef count_whitespaces(text12):\n    '''\n    Write a function to count the number of whitespaces in the given string.\n    '''\n    x = len(re.findall('\\s', text12))\n    return x\ndef count_capital_letters(text13):\n    '''\n    Write a function to count the number of capital letters in the given string.\n    '''\n    x = len(re.findall('[A-Z]', text13))\n    return x\ndef count_punctuations(text14):\n    '''\n    Write a function to count the number of punctuations in the given string.\n    '''\n    x = len(re.findall('[!#$%&\\'()*+,-./:;<=>?@[\\]^_`{|}~]', text14))\n    return x\ndef count_characters(text15):\n    '''\n    Write a function to count the number of characters in the given string.\n    '''\n    x = len(text15)\n    return x\ndef read_file_lines(text16):\n    '''\n    Write a function to read the lines of the given file and return a list of lines.\n    '''\n    with open('file2.txt', 'r') as f:\n        str2 = f.readlines()\n        return str2\ndef count_lines(text17):\n    '''\n    Write a function to count the number of lines in the given file.\n    '''\n    x = len(read_file_lines(text17))\n    return x\ndef find_longest_line(text18):\n    '''\n    Write a function to find the longest line in the given file.\n    '''\n    max = 0\n    with open('file2.txt', 'r') as f:\n        for line in f:\n            if max < len(line):\n                max = len(line)\n    return max\ndef find_most_repeated_character(text19):\n    '''\n    Write a function to find the most repeated character in the given file.\n    '''\n    str3 = read_file()\n    x = re.findall('\\w+', str3)\n    dict1 = {}\n    for i in x:\n        if i in dict1.keys():\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    x = max(dict1.items(), key=lambda kv: kv[1])\n    return x\ndef find_most_repeated_character_in_first_five_lines(text20):\n    '''\n    Write a function to find the most repeated character in the first 5 lines of the given file.\n    '''\n    x = read_file_lines(text20)\n    str3 = re.findall('\\w+', str3)\n    dict1 = {}\n    for i in x:\n        if i in dict1.keys():\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    x = max(dict1.items(), key=lambda kv: kv[1])\n    return x\ndef count_characters_in_sentences(text21):\n    '''\n    Write a function to count the number of characters in the sentences of the given file.\n    '''\n    str3 = read_file()\n    x = re.findall('[.!?]+', str3)\n    y = len(x)\n    return y\ndef count_characters_in_words(text22):\n    '''\n    Write a function to count the number of characters in the words of the given file.\n    '''\n    str3 = read_file()\n    x = re.findall('\\w+', str3)\n    y = len(x)\n    return y\ndef count_characters_in_lines(text23):\n    '''\n    Write a function to count the number of characters in the lines of the given file.\n    '''\n    str3 = read_file()\n    x = re.findall('\\w+', str3)\n    y = len(x)\n    return y\ndef count_characters_in_paragraphs(text24):\n    '''\n    Write a function to count the number of characters in the paragraphs of the given file.\n    '''\n    str3 = read_file()\n    x = re.findall('\\w+', str3)\n    y = len(x)\n    return y\ndef count_characters_in_paragraphs_with_new_lines(text25):\n    '''\n    Write a function to count the number of characters in the paragraphs of the given file with new lines.\n    '''\n    str3 = read_file()\n    x = re.findall('\\w+', str3)\n    y = len(x)\n    return y\ndef count_characters_in_sentences_with_new_lines(text26):\n    '''\n    Write a function to count the number of characters in the sentences of the given file with new lines.\n    '''\n    str3 = read_file()\n    x = re.findall('\\w+', str3)\n    y = len(x)\n    return y\ndef count_characters_in_sentences_with_whitespaces(text27):\n    '''\n    Write a function to count the number of characters in the sentences of the given file with whitespaces.\n    '''\n    str3 = read_file()\n    x = re.findall('\\w+', str3)\n    y = len(x)\n    return y\ndef count_characters_in_words_with_whitespaces(text2",
        "num_ids": 57
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace(' ','')\n    return text1\n    pass\n",
        "num_ids": 23
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    whitespaces = \"\".join(char for char in text1 if char in \" \")\n    text1 = text1.replace(whitespaces, '')\n    return text1\ndef get_leetcode_code(text1):\n    '''\n    Write a function to change all the vowels \u2018a\u2019, \u2018e\u2019, \u2018i\u2019, \u2018o\u2019, \u2018u\u2019 to \u2018l\u2019, \u2018w\u2019, \u2018y\u2019, \u2018r\u2019, respectively.\n    '''\n    vowels = \"aeiou\"\n    text1 = text1.lower()\n    text1 = re.sub('\\W', '', text1)\n    for vowel in vowels:\n        text1 = re.sub(vowel, vowel.lower(), text1)\n    text1 = re.sub(' ', '', text1)\n    text1 = re.sub('\\s+', '', text1)\n    return text1\ndef test_get_leetcode_code():\n    '''\n    The goal is to write a function that returns a new string that has all the vowels in it mapped to lowercase and all other characters in the string unchanged.\n    '''\n    assert get_leetcode_code(\"leetcode\") == \"leetcode\"\n    assert get_leetcode_code(\"Lintcode\") == \"lintcode\"\n    assert get_leetcode_code(\"linter\") == \"lintr\"\n    assert get_leetcode_code(\"LEetcode\") == \"leetcode\"\n    assert get_leetcode_code(\"Lintcode\") == \"lintcode\"\n    assert get_leetcode_code(\"linter\") == \"lintr\"\n    assert get_leetcode_code(\"aA#\") == \"a\"\n    assert get_leetcode_code(\"\") == \"\"\n    assert get_leetcode_code(\"   \") == \"\"\n    assert get_leetcode_code(\"leetcode\") == \"leetcode\"\n    assert get_leetcode_code(\"Lintcode\") == \"lintcode\"\n    assert get_leetcode_code(\"linter\") == \"lintr\"\n    assert get_leetcode_code(\"LEetcode\") == \"leetcode\"\n    assert get_leetcode_code(\"Lintcode\") == \"lintcode\"\n    assert get_leetcode_code(\"linter\") == \"lintr\"\n    assert get_leetcode_code(\"aA#\") == \"a\"\n",
        "num_ids": 317
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace(\"\\n\",\"\")\n    text1 = text1.replace(\"\\t\",\"\")\n    text1 = text1.replace(\" \",\"\")\n    return text1\n",
        "num_ids": 48
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(' ', '')\n",
        "num_ids": 13
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = re.sub(\"\\s\", \"\", text1)\n    return text\n",
        "num_ids": 22
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Here we are checking if the input is empty or not\n    if text1 == '':\n        return text1\n    # Here we are converting the string to lower case\n    text1 = text1.lower()\n    # Here we are using regex to remove all the whitespaces from the string\n    text1 = re.sub(\"\\s+\", '', text1)\n    return text1\n",
        "num_ids": 91
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    #Solution\n    text1 = text1.strip()\n    return text1\n",
        "num_ids": 21
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n",
        "num_ids": 10
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+', '', text1)\n",
        "num_ids": 18
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return 0\n    else:\n        return sale_amount - actual_cost\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return 0\n    return actual_cost - sale_amount\n",
        "num_ids": 27
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost == 0:\n        return actual_cost\n    else:\n        return actual_cost - sale_amount\n    \ndef length_of_the_word(word):\n    '''\n    Write a function that returns the length of the given string.\n    '''\n    return len(word)\n",
        "num_ids": 9
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return (actual_cost - sale_amount) if actual_cost > sale_amount else 0\n",
        "num_ids": 24
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount: \n        loss_amount=actual_cost-sale_amount \n    else: \n        loss_amount=0 \n    return loss_amount\n",
        "num_ids": 47
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>=sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return 0\n",
        "num_ids": 32
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost-sale_amount < 0:\n        return 0\n    else:\n        return actual_cost - sale_amount\n",
        "num_ids": 33
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount\n",
        "num_ids": 12
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount if actual_cost - sale_amount > 0 else 0\n",
        "num_ids": 24
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    actual_cost = float(actual_cost)\n    sale_amount = float(sale_amount)\n    return actual_cost - sale_amount\n    \n    \ndef avg_price(actual_price,quantity): \n    '''\n    Write a function that gives average price of the product if the given quantity is more than 0 else return 0.\n    '''\n    actual_price = float(actual_price)\n    quantity = float(quantity)\n    return actual_price * quantity\n    \n    \ndef profit(actual_price,actual_cost,sale_amount): \n    '''\n    Write a function that gives profit amount from the given price of the product and the amount that has sale.\n    '''\n    actual_price = float(actual_price)\n    actual_cost = float(actual_cost)\n    sale_amount = float(sale_amount)\n    return actual_price - actual_cost + sale_amount\n    \n    \ndef main():\n    '''\n    Write a program that asks the user to enter an actual cost, a sale amount, and quantity and it returns the profit amount of the product.\n    '''\n    actual_cost = input('Enter the actual cost:')\n    sale_amount = input('Enter the sale amount:')\n    quantity = input('Enter the quantity:')\n    print('Profit amount:',profit(actual_price,actual_cost,sale_amount))\n    \nif __name__ == \"__main__\":\n    main()",
        "num_ids": 81
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sumOfEvenFactors = 0\n    while n > 1:\n        if n % 2 == 0:\n            sumOfEvenFactors += n\n            n = n / 2\n        else:\n            n = n - 1\n    print(sumOfEvenFactors)\n",
        "num_ids": 64
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 1\n    for i in range(2, n) : \n        if (n % i) == 0: \n            sum = sum + i\n    return sum \n",
        "num_ids": 44
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = []\n    for i in range(1,n+1):\n        if(n%i==0):\n            factors.append(i)\n    #print(factors)\n    total = 0\n    for i in range(0,len(factors)):\n        if(factors[i]%2==0):\n            total = total + factors[i]\n    return total\n",
        "num_ids": 96
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    res = 0\n    for i in range(1,n) :\n        if(n%i==0 and i%2==0):\n            res += i\n    return res\n",
        "num_ids": 44
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = []\n    \n    while n % 2 == 0 : \n        factors.append(2) \n        n = n // 2\n    \n    for i in range(3,int(math.sqrt(n))+1,2) : \n        while n % i == 0 : \n            factors.append(i) \n            n = n // i \n    \n    if n > 2 : \n        factors.append(n)\n    \n    return sum(factors)\n    \n    \n    \n    \n    \ndef palindrome(n) :\n    '''\n    Write a python function to check if a number is a palindrome.\n    '''\n    \n    if str(n) == str(n)[::-1]:\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n) : \n        if n % i == 0 : \n            sum += i\n    return sum\n",
        "num_ids": 39
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1) : \n        if (n % i == 0) : \n            sum += i\n    return sum\n",
        "num_ids": 43
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    while(n > 0):\n        i = n % 10\n        if(i % 2 == 0):\n            sum += i\n            n = n//10\n        else:\n            n = n//10\n    return sum\n",
        "num_ids": 59
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # your code here\n    return 0\n",
        "num_ids": 12
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factor = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            even_factor.append(i)\n    return sum(even_factor)\n",
        "num_ids": 50
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    for word in text:\n        if 'z' in word:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_match_regex = r'[a-z]+[a-z]*z'\n    return re.findall(word_match_regex, text)\n",
        "num_ids": 43
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word = r'z+'\n    match = re.search(word,text)\n    if match:\n        return True\n    else:\n        return False\n",
        "num_ids": 40
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    \n    return re.search(r'z', text)\n    ",
        "num_ids": 18
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = re.search('z',text)\n    if text:\n        print('Got a match:',text)\n    else:\n        print('No match')\n",
        "num_ids": 41
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    for word in re.findall(r'z+',text):\n        print(word)\n    \ndef sort_words(text):\n    '''\n    Write a function that sorts the words alphabetically.\n    '''\n    return sorted(re.findall(r'\\w+',text))\n",
        "num_ids": 20
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # define a pattern\n    wordz_pattern = r'z'\n    # compile the pattern\n    wordz_regex = re.compile(wordz_pattern)\n    # search for the pattern in the string\n    if wordz_regex.search(text):\n        print(\"The word 'z' is present in the text.\")\n    else:\n        print(\"The word 'z' is not present in the text.\")",
        "num_ids": 100
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    \n    # for each word in the string, if we find z, return True\n    for word in text.split():\n        if 'z' in word:\n            return True\n",
        "num_ids": 43
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'z\\S', text)\n",
        "num_ids": 17
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = re.findall('z', text)\n    return text\n",
        "num_ids": 19
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 2 == 0:\n        return 31\n    else:\n        return 30\ndef check_weeknumb_number(weeknumb2):\n    '''\n    Write a function to check whether the given week number contains 7 days or not.\n    '''\n    if weeknumb2 % 2 == 0:\n        return 7\n    else:\n        return 6\ndef check_daynumb_number(daynumb2):\n    '''\n    Write a function to check whether the given day number contains 31 days or not.\n    '''\n    if daynumb2 % 2 == 0:\n        return 31\n    else:\n        return 30\ndef check_monthnumb_name(monthname):\n    '''\n    Write a function to check whether the given month name contains 31 days or not.\n    '''\n    months = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    }\n    return months[monthname]\ndef check_weeknumb_name(weekname):\n    '''\n    Write a function to check whether the given week name contains 7 days or not.\n    '''\n    days = {\n        \"Monday\": 0,\n        \"Tuesday\": 1,\n        \"Wednesday\": 2,\n        \"Thursday\": 3,\n        \"Friday\": 4,\n        \"Saturday\": 5,\n        \"Sunday\": 6\n    }\n    return days[weekname]\ndef check_daynumb_name(dayname):\n    '''\n    Write a function to check whether the given day name contains 31 days or not.\n    '''\n    days = {\n        \"Monday\": 0,\n        \"Tuesday\": 1,\n        \"Wednesday\": 2,\n        \"Thursday\": 3,\n        \"Friday\": 4,\n        \"Saturday\": 5,\n        \"Sunday\": 6\n    }\n    return days[dayname]\ndef check_time_number(time_num):\n    '''\n    Write a function to check whether the given time number contains 8 days or not.\n    '''\n    if time_num % 2 == 0:\n        return 8\n    else:\n        return 7\ndef check_date_number(date_num):\n    '''\n    Write a function to check whether the given date number contains 31 days or not.\n    '''\n    if date_num % 2 == 0:\n        return 31\n    else:\n        return 30\ndef print_all_options(num1,num2,num3):\n    '''\n    Print all the options for the user.\n    '''\n    print(\"You can use these functions to calculate a number and print a number and a month or a year.\")\n    print(\"1. Calculate a number.\")\n    print(\"2. Calculate a month.\")\n    print(\"3. Calculate a year.\")\n    print(\"4. Print a month.\")\n    print(\"5. Print a year.\")\n    print(\"6. Print a day.\")\n    print(\"7. Print a week.\")\n    print(\"8. Print a time.\")\n    print(\"9. Print a date.\")\n    print(\"0. Exit.\")\ndef print_options(opt):\n    '''\n    Print all the options for the user.\n    '''\n    print(\"You can use these functions to calculate a number and print a number and a month or a year.\")\n    print(\"1. Calculate a number.\")\n    print(\"2. Calculate a month.\")\n    print(\"3. Calculate a year.\")\n    print(\"4. Print a month.\")\n    print(\"5. Print a year.\")\n    print(\"6. Print a day.\")\n    print(\"7. Print a week.\")\n    print(\"8. Print a time.\")\n    print(\"9. Print a date.\")\n    print(\"0. Exit.\")\ndef print_num_result(num1,num2,num3):\n    '''\n    Print the result of the user.\n    '''\n    print(\"The result of {} + {} + {} is {}\".format(num1,num2,num3,num1+num2+num3))\ndef print_month_result(monthname,monthnum):\n    '''\n    Print the result of the user.\n    '''\n    print(\"The result of {} + {} is {}\".format(monthname,monthnum,check_monthnumb_name(monthname)))\ndef print_year_result(yearname,yearnum):\n    '''\n    Print the result of the user.\n    '''\n    print(\"The result of {} + {} is {}\".format(yearname,yearnum,check_yearnumb_name(yearname)))\ndef print_day_result(dayname,daynum):\n    '''\n    Print the result of the user.\n    '''\n    print(\"The result of {} + {} is {}\".format(dayname,daynum,check_daynumb_name(dayname)))\ndef print_week_result(weekname,weeknum):\n    '''\n    Print the result of the user.\n    '''\n    print(\"The result of {} + {} is {}\".format(weekname,weeknum,check_weeknumb_name(weekname)))\ndef print_time_result(time_name,time_num):\n    '''\n    Print the result of the user.\n    '''\n    print(\"The result of {} + {} is {}\".format(time_name,time_num,check_time_number(time_num)))\ndef print_date_result(date_name,date_num):\n    '''\n    Print the result of the user.\n    '''\n    print(\"The result of {} + {} is {}\".format(date_name,date_num,check_date_number(date_num)))\ndef print_month_options():\n    '''\n    Print the month options for the user.\n    '''\n    print(\"You can use these functions to calculate a number and print a number and a month or a year.\")\n    print(\"1. Calculate a number.\")\n    print(\"2. Calculate a month.\")\n    print(\"3. Calculate a year.\")\n    print(\"4. Print a month.\")\n    print(\"5. Print a year.\")\n    print(\"6. Print a day.\")\n    print(\"7. Print a week.\")\n    print(\"8. Print a time.\")\n    print(\"9. Print a date.\")\n    print(\"0. Exit.\")\ndef print_year_options():\n    '''\n    Print the year options for the user.\n    '''\n    print(\"You can use these functions to calculate a number and print a number and a month or a year.\")\n    print(\"1. Calculate a number.\")\n    print(\"2. Calculate a month.\")\n    print(\"3. Calculate a year.\")\n    print(\"4. Print a month.\")\n    print(\"5. Print a year.\")\n    print(\"6. Print a day.\")\n    print(\"7. Print a week.\")\n    print(\"8. Print a time.\")\n    print(\"9. Print a date.\")\n    print(\"0. Exit.\")\ndef print_day_options():\n    '''\n    Print the day options for the user.\n    '''\n    print(\"You can use these functions to calculate a number and print a number and a month or a year.\")\n    print(\"1. Calculate a number.\")\n    print(\"2. Calculate a month.\")\n    print(\"3. Calculate a year.\")\n    print(\"4. Print a month.\")\n    print(\"5. Print a year.\")\n    print(\"6. Print a day.\")\n    print(\"7. Print a week.\")\n    print(\"8. Print a time.\")\n    print(\"9. Print a date.\")\n    print(\"0. Exit.\")\ndef print_week_options():\n    '''\n    Print the week options for the user.\n    '''\n    print(\"You can use these functions to calculate a number and print a number and a month or a year.\")\n    print(\"1. Calculate a number.\")\n    print(\"2. Calculate a month.\")\n    print(\"3. Calculate a year.\")\n    print(\"4. Print a month.\")\n    print(\"5. Print a year.\")\n    print(\"6. Print a day.\")\n    print(\"7. Print a week.\")\n    print(\"8. Print a time.\")\n    print(\"9. Print a date.\")\n    print(\"0. Exit.\")\ndef print_time_options():\n    '''\n    Print the time options for the user",
        "num_ids": 10
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 30\n    elif monthnum2 == 2:\n        if (((year%4 == 0) and (year%100!= 0)) or (year%400 == 0)):\n            return 29\n        else:\n            return 28\n",
        "num_ids": 134
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1,13):\n        if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 80
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 > 12:\n        raise ValueError(\"The month number you have input must be less than 12\")\n    elif monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        print(\"True\")\n    else:\n        print(\"False\")\n",
        "num_ids": 91
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        print(\"31 days in the month\")\n    else:\n        print(\"30 days in the month\")\n",
        "num_ids": 71
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnumb = int(monthnum2)\n    if monthnumb == 1 or monthnumb == 3 or monthnumb == 5 or monthnumb == 7 or monthnumb == 8 or monthnumb == 10 or monthnumb == 12:\n        print(True)\n    elif monthnumb == 4 or monthnumb == 6 or monthnumb == 9 or monthnumb == 11:\n        print(True)\n    else:\n        print(False)\n",
        "num_ids": 109
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2%2==0:\n        if monthnum2%4==0:\n            if monthnum2%100!=0:\n                if monthnum2%400==0:\n                    return 31\n                else:\n                    return 28\n            else:\n                return 30\n        else:\n            return 29\n    else:\n        return 30\n",
        "num_ids": 83
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    return True if 31 in monthnum2 else False\n",
        "num_ids": 14
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1,13):\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    n = len(stringlist)\n    for i in range(n):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n",
        "num_ids": 42
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    l = []\n    for i in stringlist:\n        l.append(i[::-1])\n    return l\n",
        "num_ids": 31
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for i in stringlist:\n        newlist.append(i[::-1])\n    print(newlist)\n",
        "num_ids": 36
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]\n",
        "num_ids": 18
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse_string_list = []\n    for i in range(len(stringlist)):\n        reverse_string_list.append(stringlist[i][::-1])\n    return reverse_string_list\n",
        "num_ids": 51
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist.reverse()\n",
        "num_ids": 9
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for i in range(len(stringlist)):\n        new_list.append(stringlist[i][::-1])\n    return new_list\n",
        "num_ids": 45
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    \n    for string in stringlist:\n        new_list.append(string[::-1])\n    \n    return new_list\n",
        "num_ids": 41
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n",
        "num_ids": 12
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversedList = []\n    for i in stringlist:\n        reversedList.append(i[::-1])\n    return reversedList\n",
        "num_ids": 38
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst_len = len(lst)\n    min_len = lst_len\n    if lst_len == 0:\n        return None\n    for i in range(lst_len):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_index = i\n    return lst[min_index]\n",
        "num_ids": 95
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    from heapq import heappop, heappush\n    \n    heap = []\n    min_length = len(lst)\n    for i in range(len(lst)):\n        heappush(heap, (lst[i], i))\n",
        "num_ids": 64
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len=lst[0][0]\n    min_idx=0\n    for i in range(1,len(lst)):\n        if(lst[i][0]<min_len):\n            min_len=lst[i][0]\n            min_idx=i\n    return min_idx\n",
        "num_ids": 82
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    return min(lst)\n",
        "num_ids": 10
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    n=len(lst)\n    index = 0\n    m = lst[0]\n    for i in range(n):\n        if m > lst[i]:\n            m = lst[i]\n            index = i\n    return index\n",
        "num_ids": 62
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_sub = []\n    for i in range(len(lst)):\n        curr_sub = []\n        for j in range(i+1,len(lst)):\n            if(len(lst[i])<=len(lst[j])):\n                curr_sub.append(lst[j])\n        if(len(curr_sub)>0):\n            min_sub.append(curr_sub)\n    \n    min_sub_length = 9999999\n    min_length_sub = []\n    for sub in min_sub:\n        if(len(sub)<min_sub_length):\n            min_sub_length = len(sub)\n            min_length_sub = sub\n    \n    print(\"The sublist having minimum length is: \",min_length_sub)\n",
        "num_ids": 197
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    min_len = len(lst[0])\n    for i in range(1,len(lst)):\n        if min_len > len(lst[i]):\n            min_len = len(lst[i])\n    return min_len\n    \ndef sort_array(arr):\n    '''\n    Write a function that sort given array using recursion.\n    '''\n    \n    if len(arr) == 1:\n        return arr\n    else:\n        return sort_array(arr[:-1]) + sort_array(arr[-1:])\n    \ndef remove_rec(arr, n):\n    '''\n    Write a function to remove recursively a given element from an array.\n    '''\n    \n    if len(arr) == 1:\n        return\n    if len(arr) == 2:\n        if arr[0] == n:\n            return\n        if arr[1] == n:\n            return\n    if len(arr) == 3:\n        if arr[0] == n:\n            return\n        if arr[1] == n:\n            return\n        if arr[2] == n:\n            return\n    \n    for i in range(0,len(arr)):\n        if arr[i] == n:\n            arr.pop(i)\n            break\n        elif i == len(arr)-1:\n            return\n            \n    remove_rec(arr[1:],n)\n            \ndef rotate(arr, k):\n    '''\n    Write a function to rotate an array by k steps.\n    '''\n    \n    if k > 0 and k < len(arr):\n        k = k%len(arr)\n        return arr[len(arr)-k:] + arr[:len(arr)-k]\n        \ndef merge_list(lst):\n    '''\n    Write a function that merges a list of sorted lists.\n    '''\n    \n    if len(lst) == 0 or len(lst[0]) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst[0]) == 1:\n        return lst\n    \n    lst.sort(key=len)\n    \n    i = 0\n    j = 0\n    \n    merged = []\n    \n    while i < len(lst) and j < len(lst[i]):\n        if lst[i][j] < lst[i][j+1]:\n            merged.append(lst[i][j])\n            j += 1\n        else:\n            merged.append(lst[i][j+1])\n            i += 1\n            \n    return merged + lst[i:]\n    \ndef flip_binary(arr):\n    '''\n    Write a function that reverses a binary array.\n    '''\n    \n    if len(arr) == 0:\n        return\n    if len(arr) == 1:\n        return arr\n    if len(arr) == 2:\n        return arr[::-1]\n    \n    i = len(arr) - 2\n    j = len(arr)-1\n    \n    while i >= 0 and j >= 0:\n        arr[i], arr[j] = arr[j], arr[i]\n        i -= 1\n        j -= 1\n        \ndef arr_rotate(arr, d):\n    '''\n    Write a function that rotates an array by d elements.\n    '''\n    \n    if d > 0 and d < len(arr):\n        arr = arr[d:] + arr[:d]\n        return arr\n        \ndef find_pair(arr, n):\n    '''\n    Write a function that returns a pair of indices of elements in an array that sum to n.\n    '''\n    \n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == n:\n                return [i,j]\n",
        "num_ids": 57
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst = sorted(lst)\n    index = 0\n    for i in range(len(lst)):\n        if lst[i]!= lst[index]:\n            index = i\n    return lst[index]\n",
        "num_ids": 58
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    MIN = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < MIN:\n            MIN = len(lst[i])\n    \n    minlist = []\n    for i in range(len(lst)):\n        if len(lst[i]) == MIN:\n            minlist.append(lst[i])\n    return minlist\n",
        "num_ids": 101
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    n = len(lst)\n    min_len = len(lst[0])\n    index_min_len = 0\n    index_min_length = -1\n",
        "num_ids": 43
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    a=(l*b)\n    return(a)\n",
        "num_ids": 16
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "num_ids": 13
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    print(area)\n    return area\n",
        "num_ids": 19
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    for i in range(len(str1)):\n        if ord(str1[i]) >= 65 and ord(str1[i]) <= 90:\n            str1 = str1[:i] + str1[i+1:]\n    return str1\n",
        "num_ids": 62
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1=str1.lower()\n    for i in range(len(str1)):\n        if str1[i].isupper()==True:\n            str1=str1[0:i]+str1[i+1:len(str1)]\n    return str1\n",
        "num_ids": 68
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.strip()\n    new_str = []\n    for item in str1:\n        if item.islower():\n            new_str.append(item)\n    return \"\".join(new_str)\n",
        "num_ids": 56
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    \n    # Using regex\n    # s = re.sub('[A-Z]', '', str1)\n    # return s\n    \n    # Using list comprehension\n    return ''.join(i for i in str1 if i.islower())\n    \n    # Using list comprehenson\n    # return ''.join(filter(lambda x: x.islower(), str1))\n    \n    # Using re\n    # return re.sub(r'[A-Z]', '', str1)\n",
        "num_ids": 121
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    return str1\ndef is_pangram(str1):\n    '''\n    Write a function to determine if a given string is a pangram,\n    i.e. contains all the letters of the English alphabet.\n    '''\n    d ={}\n    str1 = str1.lower()\n    for i in str1:\n        if i not in d:\n            d[i]=1\n        else:\n            d[i]+=1\n    if len(d) ==26:\n        return True\n    return False\n",
        "num_ids": 71
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]+', '', str1)\n",
        "num_ids": 20
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    #result = re.search(\"[A-Z]\", str1)\n    #return str1[:result.start()] + str1[result.end():]\n    #return re.sub(\"[A-Z]\", \"\", str1)\n    return str1.lower()\n",
        "num_ids": 69
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    str1 = re.sub(r'[A-Z]', '', str1)\n    return str1\n",
        "num_ids": 39
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # initialise empty string\n    str2 = ''\n    # iterate through the string\n    for char in str1:\n        # check if character is uppercase\n        if not char.isupper():\n            # append character to string\n            str2 = str2 + char\n    # return the result\n    return str2\n",
        "num_ids": 77
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Your Code here\n    return re.sub('[A-Z]', \"\", str1)\n",
        "num_ids": 26
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst = sorted(lst)\n    return [x[0] for x in lst]\n",
        "num_ids": 26
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return map(lambda sub_list: sub_list[0], lst)\n    \ndef Count(lst):\n    '''\n    Write a python function to get the frequency of each element of the list.\n    '''\n    return map(lambda x: lst.count(x), lst)\n    \ndef Find_Max(lst):\n    '''\n    Write a python function to get the maximum element of the list.\n    '''\n    return max(lst)\n    \ndef Find_Min(lst):\n    '''\n    Write a python function to get the minimum element of the list.\n    '''\n    return min(lst)\n    \ndef Is_Palindrome(string):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    return string == string[::-1]\n    \ndef Sort_List(lst):\n    '''\n    Write a python function to sort a list in ascending order.\n    '''\n    return sorted(lst)\n    \ndef Get_Ratio(lst):\n    '''\n    Write a python function to get the ratio of positive and negative numbers in the list.\n    '''\n    return map(lambda x: x / abs(x), lst)\n    \ndef Get_Max_Numbers(lst, k):\n    '''\n    Write a python function to get the top k number in a list using heap sort.\n    '''\n    return heapq.nlargest(k, lst, key=abs)\n    \ndef Get_Max_Numbers(lst, k):\n    '''\n    Write a python function to get the top k number in a list using heap sort.\n    '''\n    return heapq.nlargest(k, lst, key=lambda x: (x*-1))\n    \ndef Filter(lst, func):\n    '''\n    Write a python function to get the filtered list based on the given function.\n    '''\n    return filter(func, lst)\n    \ndef Filter_Duplicates(lst):\n    '''\n    Write a python function to get the filtered list based on the given function.\n    '''\n    return list(dict.fromkeys(lst))\n",
        "num_ids": 15
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]\n",
        "num_ids": 18
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    i = 0\n    while i < len(lst):\n        print lst[i][0]\n        i += 1\n    return\n",
        "num_ids": 35
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(i[0])\n    return lst1\n    \ndef Extract2(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(i[0])\n    return lst1\n    \ndef Extract3(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(i[1])\n    return lst1\n    \ndef Extract4(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(i[0])\n    return lst1\n    \ndef Extract5(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(i[1])\n    return lst1\n    \ndef Extract6(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(i[2])\n    return lst1\n    \ndef Extract7(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(i[3])\n    return lst1\n    \ndef Extract8(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(i[4])\n    return lst1\n    \ndef Extract9(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(i[5])\n    return lst1\n    \ndef Extract10(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(i[6])\n    return lst1\n    \ndef Extract11(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(i[7])\n    return lst1\n    \ndef Extract12(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(i[8])\n    return lst1\n    \ndef Extract13(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(i[9])\n    return lst1\n    \ndef Extract14(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(i[10])\n    return lst1\n    \ndef Extract15(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(i[11])\n    return lst1\n    \ndef Extract16(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(i[12])\n    return lst1\n    \ndef Extract17(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(i[13])\n    return lst1\n    \ndef Extract18(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(i[14])\n    return lst1\n    \ndef Extract19(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(i[15])\n    return lst1\n    \ndef Extract20(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(i[16])\n    return lst1\n    \ndef Extract21(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(i[17])\n    return lst1\n    \ndef Extract22(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(i[18])\n    return lst1\n    \ndef Extract23(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(i[19])\n    return lst1\n    \ndef Extract24(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(i[20])\n    return lst1\n    \ndef Extract25(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(i[21])\n    return lst1\n    \ndef Extract26(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(i[22])\n    return lst1\n    \ndef Extract27(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(i[23])\n    return lst1\n    \ndef Extract28(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(i[24])\n    return lst1\n    \ndef Extract29(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(i[25])\n    return lst1\n    \ndef Extract30(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(i[26])\n    return lst1\n    \ndef Extract31(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = [",
        "num_ids": 8
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(0,len(lst)):\n        lst[i]=lst[i][0]\n    return lst\n",
        "num_ids": 36
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)):\n        lst[i]=lst[i][0]\n    return lst\n",
        "num_ids": 34
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in lst:\n        if isinstance(i,list):\n            Extract(i)\n        else:\n            print (i,end=\"\")\n",
        "num_ids": 40
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for sub_lst in lst:\n        res.append(sub_lst[0])\n    return res\n",
        "num_ids": 35
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    print(\"Number of uppercase characters:\",count)\n",
        "num_ids": 41
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([i for i in str if i.isupper()])\n",
        "num_ids": 19
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len(str.upper())\n",
        "num_ids": 11
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    up_ctr = 0\n    for i in str:\n        if i.isupper():\n            up_ctr += 1\n    print(f\"The count of uppercase is {up_ctr}\")\n    return\n",
        "num_ids": 53
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    res = 0\n    for i in str:\n        if i.isupper():\n            res += 1\n    return res\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len(str) - str.count(' ') - str.count('\\n')\n",
        "num_ids": 24
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    x = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            x = x + 1\n    return x\n",
        "num_ids": 40
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    sum = 0\n    for i in str:\n        if i.isupper():\n            sum += 1\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    #str = input('Enter the String')\n    cnt = 0\n    for i in range(len(str)):\n        if str[i] >= 'A' and str[i] <= 'Z':\n            cnt += 1\n    print(f'Upper case characters in the given string: {cnt}')\n",
        "num_ids": 77
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    a =[]\n    for i in list1:\n        for j in list1:\n            if j!= i:\n                a.append(i+j)\n    print(a)\n    return a\n",
        "num_ids": 51
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [[list1[0]]]\n    combinations = []\n    for idx,item in enumerate(list1):\n        if idx == 0:\n            combinations += [[item]]\n        else:\n            combinations += [[item] + i for i in combinations]\n            combinations += [[item] + i for i in combinations]\n    return combinations\n",
        "num_ids": 113
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) < 1:\n        return []\n    else:\n        if len(list1) == 1:\n            return [[list1[0]]]\n        else:\n            combination = []\n            for i in range(len(list1)):\n                if i == 0:\n                    new_list = list1[i:]\n                else:\n                    new_list = list1[i:] + list1[:i]\n                combination += combinations_list(new_list)\n            return combination\n",
        "num_ids": 122
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    com_list = []\n    for i in range(len(list1)+1):\n        com_list.append(list(combinations(list1, i)))\n    com_list = list(chain(*com_list))\n    return com_list\n",
        "num_ids": 61
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    import copy\n    import itertools\n    print(\"Enter the list: \")\n    list1=list(map(int,input().split()))\n    \n    print(\"The combinations of the list are: \")\n    list1=list(itertools.combinations_with_replacement(list1,len(list1)))\n    for i in range(len(list1)):\n        print(list1[i])\n",
        "num_ids": 102
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    com = list(itertools.combinations(list1, 2))\n    return com\n",
        "num_ids": 24
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    def combinations_recursive(list1, idx, result, temp):\n        if idx >= len(list1):\n            result.append(temp)\n            return\n",
        "num_ids": 42
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            for k in range(j+1,len(list1)):\n                result.append([list1[i],list1[j],list1[k]])\n    return result\n",
        "num_ids": 80
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [[list1[0]]]\n    return [[i] + j for i in list1 for j in combinations_list(list1-{i})]\n",
        "num_ids": 65
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_prod = arr[0]\n    for i in range(1, len(arr)):\n        curr_prod = arr[i]\n        if curr_prod < 0:\n            curr_prod = 0\n        max_prod = max(max_prod, curr_prod)\n    return max_prod\n",
        "num_ids": 86
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    cur_max = 0\n    max_so_far = 0\n    cur_min = 0\n    max_so_far_min = 0\n    max_cur = 0\n",
        "num_ids": 45
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    #max_product = 0\n    #for i in range(len(arr)):\n    #    for j in range(i+1, len(arr)):\n    #        if max_product < arr[i]*arr[j]:\n    #            max_product = arr[i]*arr[j]\n",
        "num_ids": 76
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    cur_prod = arr[0]\n    max_prod = arr[0]\n    for i in range(1, len(arr)):\n        if cur_prod > 0:\n            cur_prod *= arr[i]\n        else:\n            cur_prod = arr[i]\n        max_prod = max(max_prod, cur_prod)\n    return max_prod\n",
        "num_ids": 101
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    result = 1\n    max_product = 1\n    for i in range(len(arr)):\n        result *= arr[i]\n        if result < max_product:\n            max_product = result\n        for j in range(i):\n            result = arr[i] * arr[j]\n            if result > max_product:\n                max_product = result\n    return max_product\n",
        "num_ids": 95
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = 0\n    current_product = 1\n    # Return max product if arr is empty\n    if len(arr) == 0:\n        return max_product\n    for i in range(len(arr)):\n        # The current product should be greater than previous product (previous)\n        # so increase the current product\n        current_product *= arr[i]\n        # If the current product is greater than the max product\n        if current_product > max_product:\n            max_product = current_product\n    # Update max_product\n    current_product = 1\n    for i in range(len(arr) - 1, -1, -1):\n        # The current product should be greater than previous product (previous)\n        # so decrease the current product\n        current_product *= arr[i]\n        # If the current product is greater than the max product\n        if current_product > max_product:\n            max_product = current_product\n    return max_product\n",
        "num_ids": 230
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    def maximum_product_sub_array(arr,start,end):\n        if(start==end):\n            return (arr[start]*arr[start])\n        if(start==end-1):\n            return (arr[start]*arr[end])\n        else:\n            if(arr[start]>arr[start+1] and arr[start]>arr[start-1]):\n                max_left=arr[start]*arr[start]\n            else:\n                max_left=max_subarray_product(arr,start,start+1)\n            if(arr[end]>arr[start] and arr[end]>arr[end-1]):\n                max_right=arr[end]*arr[end]\n            else:\n                max_right=max_subarray_product(arr,end-1,end)\n            return max(max_left,max_right)\n        \n    max_product=0\n    for i in range(len(arr)):\n        max_product=maximum_product_sub_array(arr,i,len(arr)-1)\n        if(max_product>0):\n            return max_product\n        \n",
        "num_ids": 277
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    largest = -float('inf')\n    # start from the beginning\n    start = 0\n    end = 0\n    largest_sub = float('-inf')\n    while end < len(arr):\n        if largest_sub < 0:\n            largest_sub = arr[end]\n            start = end\n        else:\n            largest_sub = max(largest_sub, arr[end])\n            if largest_sub * largest < 0:\n                largest = largest_sub\n                start = end\n        end += 1\n    return largest\n",
        "num_ids": 124
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    global_max = float('-inf')\n    max_prod = float('-inf')\n    min_prod = float('inf')\n    max_start = 0\n    min_start = 0\n",
        "num_ids": 50
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n in dict.values():\n        return False\n    else:\n        return True\n",
        "num_ids": 23
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict:\n        if i!= n:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict.keys():\n        if i!= n:\n            return False\n        else:\n            return True\n",
        "num_ids": 31
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= 1:\n        for value in dict.values():\n            if value!= n:\n                return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return True\n    else:\n        for i in dict.keys():\n            if i == n:\n                continue\n            else:\n                return False\n",
        "num_ids": 47
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.keys()) > 0:\n        if list(dict.values())[0] == list(dict.values())[-1]:\n            return False\n        else:\n            return True\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(set(dict.values())) == 1\n",
        "num_ids": 16
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return False\n    else:\n        for i in dict.values():\n            if type(i)!= int:\n                return False\n        return True\n",
        "num_ids": 47
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    check = all(dict[i] == dict[n] for i in dict)\n    if check:\n        print(f'All values are same!')\n    else:\n        print(f'Not all values are same.')\n",
        "num_ids": 56
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return (n in dict.values())\n    \nprint(check_value({1: 1, 2: 2, 3: 3, 4: 4, 5: 5}, 4))\n",
        "num_ids": 43
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    empty = 0\n    for k,v in dict1.items():\n        if v==\"\":\n            empty += 1\n    for i in range(empty):\n        del dict1[next(iter(dict1))]\n",
        "num_ids": 54
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict1.fromkeys(dict1,None)\n",
        "num_ids": 16
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    my_dict = {}\n    for key in dict1:\n        if dict1[key]!= '':\n            my_dict[key] = dict1[key]\n    return my_dict\n    \nif __name__ == \"__main__\":\n    # Test case 1\n    dict1 = {'a': '1', 'b': '', 'c': '3'}\n    print(drop_empty(dict1))\n    \n    # Test case 2\n    dict2 = {'a': '1', 'b': '2', 'c': '', 'd': '4'}\n    print(drop_empty(dict2))",
        "num_ids": 151
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for k,v in dict1.items():\n        if v!= '':\n            new_dict[k] = v\n    return new_dict\n",
        "num_ids": 45
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # initialize a variable to keep track of empty items\n    empty_items = 0\n",
        "num_ids": 21
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # Your code here\n    return dict1\n",
        "num_ids": 13
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key:val for key,val in dict1.items() if val}\n",
        "num_ids": 22
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for k,v in dict1.items():\n        if v == {} or v == {}.fromkeys(v):\n            del dict1[k]\n    return dict1\n",
        "num_ids": 43
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # Make a copy of dict1\n    dict2 = dict1.copy()\n",
        "num_ids": 21
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    return max(reduce(mul, arr))\n",
        "num_ids": 15
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # i = 0\n    # prod = 1\n    # max_prod = 1\n    # while i <= len(arr) - 1:\n    #     if arr[i] == 0:\n    #         i += 1\n    #         continue\n    #     prod = arr[i] * prod\n    #     if prod > max_prod:\n    #         max_prod = prod\n    #     i += 1\n    # return max_prod\n    '''\n    Note that we can always use a nested loop and find the maximum product while keeping track of the maximum product encountered.\n    '''\n    max_prod = arr[0]\n    cur_prod = arr[0]\n    for i in range(1, len(arr)):\n        cur_prod = max(arr[i], cur_prod * arr[i])\n        max_prod = max(cur_prod, max_prod)\n    return max_prod\n    \n    \n    \nif __name__ == \"__main__\":\n    print(max_product([-2,-1,-5,-4,-3]))\n    print(max_product([-4,-2,-6,-5,-3,-1]))\n    print(max_product([-5,1,-5,-2,-4,3,-5]))\n    print(max_product([-5,1,-5,-2,-4,3,5]))\n    print(max_product([-4,-2,-5,-4,0]))\n    print(max_product([0]))\n    print(max_product([0,0]))",
        "num_ids": 236
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n    dp = [1] * n\n    res = 1\n    for i in range(1, n):\n        dp[i] = arr[i - 1] * dp[i - 1]\n",
        "num_ids": 67
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    max_product = float('-inf')\n    for i in range(1, len(arr)):\n        max_product = max(max_product, arr[i]*max_product_of_subseq(arr, i-1))\n        #print(max_product, i)\n    return max_product\n",
        "num_ids": 93
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        max_product = arr[0]\n        prev_max = max_product\n        prev_min = arr[0]\n        for i in range(1, len(arr)):\n            curr_max = max(prev_max * arr[i], prev_min * arr[i])\n            prev_min = min(prev_min * arr[i], prev_max * arr[i])\n            prev_max = curr_max\n            if curr_max > max_product:\n                max_product = curr_max\n        return max_product\n",
        "num_ids": 153
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n==0:\n        return 0\n    if n==1:\n        return arr[0]\n    \n    max_ = -999999\n    for i in range(n):\n        for j in range(i,n):\n            if i==0:\n                max_ = max(max_,arr[i]*arr[j])\n            else:\n                max_ = max(max_,arr[i]*arr[j],arr[i]*arr[j]*arr[j])\n    return max_\n",
        "num_ids": 133
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # without any sorting\n    # can return any negative number\n    # or any positive number\n    res = 0\n    for i in range(len(arr)-1):\n        curr = arr[i]\n        for j in range(i+1, len(arr)):\n            curr = curr*arr[j]\n            if curr > res:\n                res = curr\n    return res\n",
        "num_ids": 96
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    size = len(arr)\n    if size <= 0:\n        return 0\n    if size == 1:\n        return arr[0]\n    max_product = arr[0]\n    min_product = arr[0]\n    for i in range(1,size):\n        max_product = max(arr[i]*max_product,min_product*arr[i],arr[i])\n        min_product = min(arr[i]*min_product,max_product*arr[i],arr[i])\n    return max_product\n",
        "num_ids": 130
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    return max(reduce(mul, arr, 1), 1)\n",
        "num_ids": 19
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = 0\n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            product = arr[i]*arr[j]\n            max_product = max(max_product, product)\n    return max_product\n",
        "num_ids": 76
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    #tup = (4,2,3)\n    #res = (5,3,4)\n    res = (tup[0] + tup[1],tup[1] + tup[2])\n    return res\n",
        "num_ids": 58
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 3:\n        if type(test_tup[0]) == str:\n            return test_tup[0], test_tup[2], ''.join(sorted(test_tup[0] + test_tup[1] + test_tup[2]))\n        elif type(test_tup[1]) == str:\n            return test_tup[1], test_tup[0], ''.join(sorted(test_tup[1] + test_tup[0] + test_tup[2]))\n        else:\n            return test_tup[2], test_tup[0], ''.join(sorted(test_tup[2] + test_tup[0] + test_tup[1]))\n    else:\n        return -1\n    \ndef combine_lists(tup1, tup2):\n    '''\n    Write a function to combine two lists.\n    '''\n    if len(tup1) == len(tup2):\n        return tup1 + tup2\n    else:\n        return -1\n        \ndef get_in_list(lst, item):\n    '''\n    Write a function to find if the item is in the list.\n    '''\n    if item in lst:\n        return True\n    else:\n        return False\n    \ndef get_in_range(lst, first, second):\n    '''\n    Write a function to find if the item is in the list.\n    '''\n    if first <= lst < second:\n        return True\n    else:\n        return False\n    \ndef sort_dict_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by its value.\n    '''\n    dict1 = {k: v for k, v in sorted(dict1.items(), key=lambda item: item[1])}\n    return dict1\n    \ndef sort_dict_by_key(dict1):\n    '''\n    Write a function to sort a dictionary by its key.\n    '''\n    dict1 = {k: v for k, v in sorted(dict1.items(), key=lambda item: item[0])}\n    return dict1\n    \ndef add_sub_list(lst1, lst2):\n    '''\n    Write a function to add a list to a list of lists.\n    '''\n    if len(lst1) == len(lst2):\n        return lst1 + lst2\n    else:\n        return -1\n        \ndef get_sum_of_square(lst):\n    '''\n    Write a function to get the sum of squares of a list.\n    '''\n    sum = 0\n    for i in lst:\n        sum += i**2\n    return sum\n    \ndef find_item(lst, item):\n    '''\n    Write a function to find if the item is in the list.\n    '''\n    if item in lst:\n        return True\n    else:\n        return False\n    \ndef reverse_list(lst):\n    '''\n    Write a function to reverse the list.\n    '''\n    lst.reverse()\n    return lst\n    \ndef find_smallest_number(lst):\n    '''\n    Write a function to find the smallest number in the list.\n    '''\n    smallest_number = lst[0]\n    for i in lst:\n        if i < smallest_number:\n            smallest_number = i\n    return smallest_number\n    \ndef find_largest_number(lst):\n    '''\n    Write a function to find the largest number in the list.\n    '''\n    largest_number = lst[0]\n    for i in lst:\n        if i > largest_number:\n            largest_number = i\n    return largest_number\n    \ndef get_nth_element_from_the_end(lst):\n    '''\n    Write a function to get the nth element from the end of the list.\n    '''\n    lst.append(lst[0])\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[len(lst)-1]\n        \ndef get_nth_element_from_the_front(lst, n):\n    '''\n    Write a function to get the nth element from the front of the list.\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[n]\n    \ndef get_nth_element_from_the_end(lst, n):\n    '''\n    Write a function to get the nth element from the end of the list.\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[len(lst)-n]\n    \ndef get_nth_element_from_the_front(lst, n):\n    '''\n    Write a function to get the nth element from the front of the list.\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[n]\n    \ndef get_frequency(lst, item):\n    '''\n    Write a function to get the frequency of an item in the list.\n    '''\n    count = 0\n    for i in lst:\n        if i == item:\n            count += 1\n    return count\n    \ndef find_pair(lst, item):\n    '''\n    Write a function to find if there are two numbers in the list that sum to the item.\n    '''\n    lst.sort()\n    left = 0\n    right = len(lst) - 1\n    while left < right:\n        if lst[left] + lst[right] == item:\n            return True\n        elif lst[left] + lst[right] < item:\n            left += 1\n        else:\n            right -= 1\n    return False\n    \ndef find_sum_of_element(lst, item):\n    '''\n    Write a function to find if there are two numbers in the list that sum to the item.\n    '''\n    lst.sort()\n    left = 0\n    right = len(lst) - 1\n    while left < right:\n        if lst[left] + lst[right] == item:\n            return True\n        elif lst[left] + lst[right] < item:\n            left += 1\n        else:\n            right -= 1\n    return False\n    \ndef get_index_of_element(lst, item):\n    '''\n    Write a function to find the index of the element.\n    '''\n    for i in range(0, len(lst)):\n        if lst[i] == item:\n            return i\n    return -1\n    \ndef get_index_of_min_number(lst):\n    '''\n    Write a function to find the index of the minimum number.\n    '''\n    lst.sort()\n    return lst.index(lst[0])\n    \ndef get_index_of_max_number(lst):\n    '''\n    Write a function to find the index of the maximum number.\n    '''\n    lst.sort()\n    return lst.index(lst[-1])\n    \ndef get_index_of_second_minimum_number(lst):\n    '''\n    Write a function to find the index of the second minimum number.\n    '''\n    lst.sort()\n    lst = list(set(lst))\n    if len(lst) > 1:\n        return lst.index(lst[1])\n    else:\n        return -1\n    \ndef get_index_of_second_maximum_number(lst):\n    '''\n    Write a function to find the index of the second maximum number.\n    '''\n    lst.sort()\n    lst = list(set(lst))\n    if len(lst) > 1:\n        return lst.index(lst[-1])\n    else:\n        return -1\n    \ndef get_index_of_number_at_given_position(lst, position):\n    '''\n    Write a function to find the index of the number a",
        "num_ids": 14
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    test_tup = list(test_tup)\n    new_list = []\n    for x in range(len(test_tup)-1):\n        new_list.append(test_tup[x]+test_tup[x+1])\n    return tuple(new_list)\n",
        "num_ids": 72
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    tup = test_tup\n    final_tup = []\n    for i in range(len(tup)-1):\n        final_tup.append(tup[i]+tup[i+1])\n    final_tup.append(tup[-1])\n    return final_tup\n",
        "num_ids": 76
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(x + y for x, y in zip(test_tup, test_tup[1:]))\n    \nprint(add_pairwise((1, 2, 3)))\nprint(add_pairwise((2, 3, 4)))\nprint(add_pairwise((2, 3, 4, 5)))\nprint(add_pairwise((5, 6, 7, 8)))\n",
        "num_ids": 92
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    s = \"(\"\n    for i in range(1, len(test_tup)):\n        s = s + str(test_tup[i]) + \" + \"\n    s = s[0:-4] + \")\"\n    return eval(s)\n",
        "num_ids": 64
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    a = []\n    for i in range(len(test_tup)-1):\n        a.append(test_tup[i])\n        a.append(test_tup[i+1])\n    return a\n",
        "num_ids": 55
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    res = []\n    n = len(test_tup)\n    for i in range(n):\n        if i == 0:\n            res.append(test_tup[i] + test_tup[i + 1])\n        elif i == n - 1:\n            res.append(test_tup[i - 1] + test_tup[i])\n        else:\n            res.append(test_tup[i - 1] + test_tup[i] + test_tup[i + 1])\n",
        "num_ids": 127
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Test Case 1\n    a = test_tup\n    a_left = a[:len(a)-1]\n    a_right = a[1:]\n    sum_left = 0\n    sum_right = 0\n    for i in range(len(a_left)):\n        sum_left += a_left[i]\n    for i in range(len(a_right)):\n        sum_right += a_right[i]\n    result = sum_left + sum_right\n    return result\n",
        "num_ids": 122
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    tup = test_tup\n    if len(tup) <= 2:\n        return tup\n    else:\n        return tup[0] + tup[1] + tup[2]\n",
        "num_ids": 51
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    #Code here\n    temp = 1\n    for i in arr:\n        temp = temp*i % n\n    return temp\n",
        "num_ids": 32
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # return reduce(lambda x,y: x*y, arr) % n\n    # return reduce(lambda x,y: x*y % n, arr)\n    return (reduce(lambda x,y: x*y % n, arr) )\n",
        "num_ids": 61
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    ans = 1\n    for i in range(n):\n        ans = (ans * arr[i]) % n\n    return ans\n",
        "num_ids": 33
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    ans = 1\n    for i in range(n):\n        ans *= arr[i]\n    return ans % n\n",
        "num_ids": 31
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    #solution1:\n    #product = 1\n    #for i in range(len(arr)):\n        #product = product * arr[i]\n    #return product % n\n    #solution2\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product\n",
        "num_ids": 86
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    rem = 1\n    for i in arr:\n        rem = (rem * i) % n\n    return rem\n",
        "num_ids": 29
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    sum = 0\n    for i in range(0, n):\n        sum = sum + arr[i]\n    return sum % n\n",
        "num_ids": 34
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(0, n):\n        product *= arr[i]\n    print(product % n)\n",
        "num_ids": 35
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return (reduce(lambda x, y: x * y, arr) % n)\n",
        "num_ids": 23
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(n):\n        product *= arr[i]\n    \n    return product % n\n",
        "num_ids": 33
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    c=1\n    for i in range(len(l)-1):\n        if l[i]==l[i+1]:\n            c+=1\n        else:\n            c=1\n        if c>=2:\n            return False\n    return True\n",
        "num_ids": 64
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l1 = []\n    for i in range(len(l)):\n        if i == 0 or i == (len(l)-1):\n            l1.append(l[i])\n            continue\n        if l[i] - l[i-1] == 1:\n            l1.append(l[i])\n        else:\n            continue\n    if len(l1) == len(l):\n        return True\n    else:\n        return False\n",
        "num_ids": 110
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return len(set(l))==1\n",
        "num_ids": 13
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # your code here\n    for i in range(1, len(l)):\n        if l[i] - l[i - 1] == 1:\n            return True\n    return False\n",
        "num_ids": 47
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if l==[]:\n        print(\"List is empty\")\n    if len(l)<2:\n        print(\"Not a valid list\")\n    for i in range(len(l)-1):\n        if l[i]==l[i+1]:\n            return False\n    return True\nprint(\"Checking the Consecutive:\",check_Consecutive(l))\n",
        "num_ids": 90
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) > 1:\n        return all(l[i+1]-l[i] == 1 for i in range(len(l)-1))\n    else:\n        return False\n",
        "num_ids": 48
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(0,len(l)-1):\n        if l[i] == l[i+1] -1:\n            pass\n        else:\n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)):\n        if l[i]==l[i+1]:\n            return False\n    return True\nprint(check_Consecutive(l1))\n",
        "num_ids": 48
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    #Time complexity is O(n) because we are iterating through the list.\n    #Space complexity is O(1) because we are storing a constant number of variables.\n    result=True\n    for i in range(1,len(l)):\n        if l[i]-l[i-1]!=1:\n            result=False\n            break\n    return result\n",
        "num_ids": 89
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1_set = set(test_list1)\n    test_list2_set = set(test_list2)\n",
        "num_ids": 34
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple(set(test_list1) & set(test_list2))\n",
        "num_ids": 22
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Your code here\n    return(set(test_list1) & set(test_list2))\n",
        "num_ids": 27
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    final_list = []\n    for i in range(len(test_list1)):\n        final_list.append((test_list1[i], test_list2[i]))\n",
        "num_ids": 47
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1).intersection(set(test_list2)))\n",
        "num_ids": 24
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #Solution:\n    return set(test_list1) & set(test_list2)\n",
        "num_ids": 25
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for i in test_list1:\n        if i in test_list2:\n            intersection.append(i)\n    return intersection\n",
        "num_ids": 41
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    output = []\n    for i in test_list1:\n        if i in test_list2:\n            output.append(i)\n    return output\n    \n    \n    \n    \n    \n    \ndef set_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the set intersection of two sets.\n    '''\n    # (a|b)=a\u2229b\n    a_set = set(test_list1)\n    b_set = set(test_list2)\n    output = a_set & b_set\n    return output\n    \n    \n    \n    \n    \n    \ndef list_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the list intersection of two lists.\n    '''\n    output = []\n    a = set(test_list1)\n    b = set(test_list2)\n    for i in a:\n        if i in b:\n            output.append(i)\n    return output\n",
        "num_ids": 55
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    new_tuple = []\n    for each in test_list1:\n        if each in test_list2:\n            new_tuple.append(each)\n    return tuple(new_tuple)\n",
        "num_ids": 51
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    #create a list with all the elements in both given list \n    all_elements = list(set(test_list1) & set(test_list2))\n    return all_elements\n",
        "num_ids": 48
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    return str1\n",
        "num_ids": 22
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = str1\n    str2 = str2.replace(ch,newch)\n    return str2\n",
        "num_ids": 29
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    return str1\n",
        "num_ids": 22
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = str1.replace(ch,newch)\n    return str2\n",
        "num_ids": 22
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n    \nprint(replace_char(\"Worried\", \"o\", \"o\"))\nprint(replace_char(\"abc\", \"a\", \"z\"))\n",
        "num_ids": 49
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n",
        "num_ids": 22
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    return str1\n",
        "num_ids": 22
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda kv: kv[1], reverse=True)\n",
        "num_ids": 27
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    result = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return result\n",
        "num_ids": 30
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x:x[1])\n",
        "num_ids": 21
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_list = sorted(dict1.items(), key=lambda x: x[1])\n    return sorted_list\ndef merge(dict1, dict2):\n    '''\n    Merge two dictionaries into one.\n    '''\n    result = dict1.copy()\n    for key in dict2:\n        result[key] = result.get(key, 0) + dict2[key]\n    return result\ndef num_sub_dict_key(dict1, dict2):\n    '''\n    Write a function to return the number of keys that are common to two dicts.\n    '''\n    result = 0\n    for key in dict1:\n        if key in dict2:\n            result += 1\n    return result\ndef two_dicts(dict1, dict2):\n    '''\n    Write a function to return a dictionary of common keys and corresponding counts from two dictionaries.\n    '''\n    common_keys = []\n    result = {}\n    for key in dict1:\n        if key in dict2:\n            common_keys.append(key)\n            result[key] = dict1[key] + dict2[key]\n    return result\ndef two_dicts_values(dict1, dict2):\n    '''\n    Write a function to return a dictionary of common keys and corresponding counts from two dictionaries.\n    '''\n    common_keys = []\n    result = {}\n    for key in dict1:\n        if key in dict2:\n            common_keys.append(key)\n            result[key] = dict1[key] + dict2[key]\n    return result\ndef dict_set_merge(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into one, merging the common keys and counts.\n    '''\n    result = {}\n    for key in dict1:\n        result[key] = dict1[key] + dict2[key]\n    return result\ndef two_dicts_values_set_merge(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into one, merging the common keys and counts.\n    '''\n    result = {}\n    for key in dict1:\n        result[key] = dict1[key] + dict2[key]\n    return result\ndef dict_get_items(dict1):\n    '''\n    Write a function to return a list of all items in a dictionary.\n    '''\n    result = []\n    for key in dict1:\n        result.append(key)\n    return result\ndef dict_get_values(dict1):\n    '''\n    Write a function to return a list of all values in a dictionary.\n    '''\n    result = []\n    for value in dict1.values():\n        result.append(value)\n    return result\ndef dict_get_keys(dict1):\n    '''\n    Write a function to return a list of all keys in a dictionary.\n    '''\n    result = []\n    for key in dict1:\n        result.append(key)\n    return result\ndef count_words(string1):\n    '''\n    Write a function to return a dictionary of all the words in a string, counted.\n    '''\n    dict1 = {}\n    string1 = string1.split()\n    for i in string1:\n        if i not in dict1:\n            dict1[i] = 1\n        else:\n            dict1[i] += 1\n    return dict1\ndef count_words_2(string1):\n    '''\n    Write a function to return a dictionary of all the words in a string, counted.\n    '''\n    dict1 = {}\n    string1 = string1.split()\n    for i in string1:\n        if i not in dict1:\n            dict1[i] = 1\n        else:\n            dict1[i] += 1\n    return dict1\ndef count_words_3(string1):\n    '''\n    Write a function to return a dictionary of all the words in a string, counted.\n    '''\n    dict1 = {}\n    string1 = string1.split()\n    for i in string1:\n        dict1[i] = 1\n    return dict1\ndef count_words_4(string1):\n    '''\n    Write a function to return a dictionary of all the words in a string, counted.\n    '''\n    dict1 = {}\n    string1 = string1.split()\n    for i in string1:\n        if i not in dict1:\n            dict1[i] = 1\n        else:\n            dict1[i] += 1\n    return dict1\ndef get_first_4_letters(string1):\n    '''\n    Write a function to return the first 4 letters of a string.\n    '''\n    result = ''\n    if len(string1) > 4:\n        result = string1[0:4]\n    else:\n        result = string1\n    return result\ndef get_last_4_letters(string1):\n    '''\n    Write a function to return the last 4 letters of a string.\n    '''\n    result = ''\n    if len(string1) > 4:\n        result = string1[-4:]\n    else:\n        result = string1\n    return result\ndef get_first_4_letters_2(string1):\n    '''\n    Write a function to return the first 4 letters of a string.\n    '''\n    result = ''\n    if len(string1) > 4:\n        result = string1[0:4]\n    else:\n        result = string1\n    return result\ndef get_last_4_letters_2(string1):\n    '''\n    Write a function to return the last 4 letters of a string.\n    '''\n    result = ''\n    if len(string1) > 4:\n        result = string1[-4:]\n    else:\n        result = string1\n    return result\ndef get_first_4_letters_3(string1):\n    '''\n    Write a function to return the first 4 letters of a string.\n    '''\n    return string1[0:4]\ndef get_last_4_letters_3(string1):\n    '''\n    Write a function to return the last 4 letters of a string.\n    '''\n    return string1[-4:]\ndef get_first_4_letters_4(string1):\n    '''\n    Write a function to return the first 4 letters of a string.\n    '''\n    return string1[0:4]\ndef get_last_4_letters_4(string1):\n    '''\n    Write a function to return the last 4 letters of a string.\n    '''\n    return string1[-4:]\ndef get_first_4_letters_5(string1):\n    '''\n    Write a function to return the first 4 letters of a string.\n    '''\n    return string1[0:4]\ndef get_last_4_letters_5(string1):\n    '''\n    Write a function to return the last 4 letters of a string.\n    '''\n    return string1[-4:]\ndef get_first_4_letters_6(string1):\n    '''\n    Write a function to return the first 4 letters of a string.\n    '''\n    return string1[0:4]\ndef get_last_4_letters_6(string1):\n    '''\n    Write a function to return the last 4 letters of a string.\n    '''\n    return string1[-4:]\ndef count_occurence(dict1):\n    '''\n    Write a function to count the occurrences of each word in a string.\n    '''\n    result = {}\n    string1 = dict1.split()\n    for i in string1:\n        if i not in result:\n            result[i] = 1\n        else:\n            result[i] += 1\n    return result\ndef count_occurence_2(dict1):\n    '''\n    Write a function to count the occurrences of each word in a string.\n    '''\n    result = {}\n    string1 = dict1.split()\n    for i in string1:\n        if i not in result:\n            result[i] = 1\n        else:\n            result[i] += 1\n    return result\ndef count_occurence_3(dict1):\n    '''\n    Write a function to count the occurrences of each word in a string.\n    '''\n    result = Counter(dict1)\n    return result\ndef count_occur",
        "num_ids": 20
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda x: x[1],reverse=True))\n",
        "num_ids": 28
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1 = dict1.items()\n    return sorted(dict1, key = lambda kv : kv[1])\n    \ndef sort_counter(lst):\n    '''\n    Write a function to sort a list of tuples by the number of occurences\n    of each tuple in the list.\n    '''\n    count = Counter(lst)\n    return sorted(count.items(), key = lambda kv : kv[1])\n",
        "num_ids": 31
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return(sorted(dict1.items(),key=lambda x: x[1],reverse=True))\n",
        "num_ids": 27
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    keys = list(dict1.keys())\n    for i in range(len(keys)):\n        for j in range(i+1, len(keys)):\n            if dict1[keys[i]] < dict1[keys[j]]:\n                keys[i], keys[j] = keys[j], keys[i]\n    return keys\n",
        "num_ids": 83
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    new_list = sorted(counter.items(),key=lambda x:x[1])\n    return dict(new_list)\n",
        "num_ids": 41
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    #print(dict1)\n    return sorted(dict1.items(), key=lambda x:x[1],reverse=True)\n",
        "num_ids": 33
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    #if len(nums) == 0:\n    #    return None\n",
        "num_ids": 20
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = float('-inf')\n    smallest = float('inf')\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest + smallest\n",
        "num_ids": 60
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # max_val = max(nums)\n    # min_val = min(nums)\n    #\n    # return max_val + min_val\n    '''\n    Use this:\n    '''\n    return max(nums) + min(nums)\n    '''\n    Using the max and min builtin functions:\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Get the length of the given array\n    length = len(nums)\n    # Initialize largest and smallest\n    largest = nums[0]\n    smallest = nums[0]\n    # Loop through the given array\n    for i in range(length):\n        # Find the largest and smallest\n        if nums[i] > largest:\n            largest = nums[i]\n        elif nums[i] < smallest:\n            smallest = nums[i]\n    # Return the sum of largest and smallest\n    return largest + smallest\n",
        "num_ids": 131
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    l=len(nums)\n    if l==0:\n        return 0\n    elif l==1:\n        return nums[0]\n    else:\n        return max(nums)+min(nums)\n",
        "num_ids": 55
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    \n    if nums:\n        max_value = nums[0]\n        min_value = nums[0]\n        for val in nums:\n            if val > max_value:\n                max_value = val\n            if val < min_value:\n                min_value = val\n        return max_value + min_value\n    else:\n        return 0\n    \n    # OR\n    # max_val = nums[0]\n    # min_val = nums[0]\n    # for i in nums:\n    #     if i > max_val:\n    #         max_val = i\n    #     if i < min_val:\n    #         min_val = i\n    # return max_val + min_val\n    \n",
        "num_ids": 182
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for i in nums:\n        if i > largest:\n            largest = i\n        if i < smallest:\n            smallest = i\n    return largest + smallest\n",
        "num_ids": 60
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) <= 1:\n        return nums\n    sorted_nums = sorted(nums)\n    return sorted_nums[0] + sorted_nums[-1]\n",
        "num_ids": 50
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    maxi = 0\n    mini = 0\n    for i in range(len(nums)):\n        if nums[i] > maxi:\n            maxi = nums[i]\n    for j in range(len(nums)):\n        if nums[j] < mini:\n            mini = nums[j]\n    return (maxi + mini)\n",
        "num_ids": 90
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_value = max(nums)\n    min_value = min(nums)\n",
        "num_ids": 24
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower = ''\n    for i in range(len(string)):\n        if ord(string[i]) >= 97 and ord(string[i]) <= 122:\n            lower += chr(ord(string[i]) - 32)\n        else:\n            lower += string[i]\n    return lower\n",
        "num_ids": 72
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower = string.lower()\n    return lower\n",
        "num_ids": 14
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lowercase = string.lower()\n    print(lowercase)\n    return lowercase\n",
        "num_ids": 23
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\nprint(is_lower(\"CAPITALS\"))\nprint(is_lower(\"hello\"))\nprint(is_lower(\"HelloWorld\"))\n",
        "num_ids": 39
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    print(\"Original String: \", str1)\n    str2 = str1.replace(\"a\",\"\")\n    str3 = str2.replace(\"e\",\"\")\n    str4 = str3.replace(\"i\",\"\")\n    str5 = str4.replace(\"o\",\"\")\n    str6 = str5.replace(\"u\",\"\")\n    print(\"After removal of lowercase: \", str6)\n    return str6\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    print(\"Original String: \", str1)\n    str2 = str1.replace(\"A\",\"\")\n    str3 = str2.replace(\"E\",\"\")\n    str4 = str3.replace(\"I\",\"\")\n    str5 = str4.replace(\"O\",\"\")\n    str6 = str5.replace(\"U\",\"\")\n    print(\"After removal of uppercase: \", str6)\n    return str6\ndef remove_space(str1):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    print(\"Original String: \", str1)\n    str2 = str1.replace(\" \", \"\")\n    print(\"After removal of spaces: \", str2)\n    return str2\ndef remove_non_alpha(str1):\n    '''\n    Write a function to remove non alpha numeric characters from a given string.\n    '''\n    print(\"Original String: \", str1)\n    str2 = str1.replace(\" \", \"\")\n    str3 = str2.replace(\".\", \"\")\n    str4 = str3.replace(\",\", \"\")\n    str5 = str4.replace(\"-\", \"\")\n    str6 = str5.replace(\"/\", \"\")\n    print(\"After removal of non alpha numeric characters: \", str6)\n    return str6\ndef remove_multiple_spaces(str1):\n    '''\n    Write a function to remove multiple spaces from a given string.\n    '''\n    print(\"Original String: \", str1)\n    str2 = str1.replace(\" \", \"\")\n    str3 = str2.replace(\"  \", \"\")\n    print(\"After removal of multiple spaces: \", str3)\n    return str3\ndef remove_non_num(str1):\n    '''\n    Write a function to remove non numerical characters from a given string.\n    '''\n    print(\"Original String: \", str1)\n    str2 = str1.replace(\" \", \"\")\n    str3 = str2.replace(\".\", \"\")\n    str4 = str3.replace(\",\", \"\")\n    str5 = str4.replace(\"-\", \"\")\n    str6 = str5.replace(\"/\", \"\")\n    print(\"After removal of non numerical characters: \", str6)\n    return str6\ndef remove_multiple_spaces(str1):\n    '''\n    Write a function to remove multiple spaces from a given string.\n    '''\n    print(\"Original String: \", str1)\n    str2 = str1.replace(\" \", \"\")\n    str3 = str2.replace(\"  \", \"\")\n    print(\"After removal of multiple spaces: \", str3)\n    return str3\ndef remove_all_spaces(str1):\n    '''\n    Write a function to remove all the spaces from a given string.\n    '''\n    print(\"Original String: \", str1)\n    str2 = str1.replace(\" \", \"\")\n    print(\"After removal of spaces: \", str2)\n    return str2\ndef remove_multiple_spaces(str1):\n    '''\n    Write a function to remove multiple spaces from a given string.\n    '''\n    print(\"Original String: \", str1)\n    str2 = str1.replace(\" \", \"\")\n    str3 = str2.replace(\"  \", \"\")\n    print(\"After removal of multiple spaces: \", str3)\n    return str3\ndef remove_spaces(str1):\n    '''\n    Write a function to remove all spaces from a given string.\n    '''\n    print(\"Original String: \", str1)\n    str2 = str1.replace(\" \", \"\")\n    print(\"After removal of spaces: \", str2)\n    return str2\ndef remove_non_alphanumeric(str1):\n    '''\n    Write a function to remove non alphanumeric characters from a given string.\n    '''\n    print(\"Original String: \", str1)\n    str2 = str1.replace(\" \", \"\")\n    str3 = str2.replace(\".\", \"\")\n    str4 = str3.replace(\",\", \"\")\n    str5 = str4.replace(\"-\", \"\")\n    str6 = str5.replace(\"/\", \"\")\n    print(\"After removal of non alphanumeric characters: \", str6)\n    return str6\ndef remove_non_alphanumeric(str1):\n    '''\n    Write a function to remove non alphanumeric characters from a given string.\n    '''\n    print(\"Original String: \", str1)\n    str2 = str1.replace(\" \", \"\")\n    str3 = str2.replace(\".\", \"\")\n    str4 = str3.replace(\",\", \"\")\n    str5 = str4.replace(\"-\", \"\")\n    str6 = str5.replace(\"/\", \"\")\n    print(\"After removal of non alphanumeric characters: \", str6)\n    return str6\ndef remove_non_alphanumeric(str1):\n    '''\n    Write a function to remove non alphanumeric characters from a given string.\n    '''\n    print(\"Original String: \", str1)\n    str2 = str1.replace(\" \", \"\")\n    str3 = str2.replace(\".\", \"\")\n    str4 = str3.replace(\",\", \"\")\n    str5 = str4.replace(\"-\", \"\")\n    str6 = str5.replace(\"/\", \"\")\n    print(\"After removal of non alphanumeric characters: \", str6)\n    return str6\ndef remove_non_alphanumeric(str1):\n    '''\n    Write a function to remove non alphanumeric characters from a given string.\n    '''\n    print(\"Original String: \", str1)\n    str2 = str1.replace(\" \", \"\")\n    str3 = str2.replace(\".\", \"\")\n    str4 = str3.replace(\",\", \"\")\n    str5 = str4.replace(\"-\", \"\")\n    str6 = str5.replace(\"/\", \"\")\n    print(\"After removal of non alphanumeric characters: \", str6)\n    return str6\ndef remove_non_alphanumeric(str1):\n    '''\n    Write a function to remove non alphanumeric characters from a given string.\n    '''\n    print(\"Original String: \", str1)\n    str2 = str1.replace(\" \", \"\")\n    str3 = str2.replace(\".\", \"\")\n    str4 = str3.replace(\",\", \"\")\n    str5 = str4.replace(\"-\", \"\")\n    str6 = str5.replace(\"/\", \"\")\n    print(\"After removal of non alphanumeric characters: \", str6)\n    return str6\ndef remove_non_alphanumeric(str1):\n    '''\n    Write a function to remove non alphanumeric characters from a given string.\n    '''\n    print(\"Original String: \", str1)\n    str2 = str1.replace(\" \", \"\")\n    str3 = str2.replace(\".\", \"\")\n    str4 = str3.replace(\",\", \"\")\n    str5 = str4.replace(\"-\", \"\")\n    str6 = str5.replace(\"/\", \"\")\n    print(\"After removal of non alphanumeric characters: \", str6)\n    return str6\ndef remove_non_alphanumeric(str1):\n    '''\n    Write a function to remove non alphanumeric characters from a given string.\n    '''\n    print(\"Original String: \", str1)\n    str2 = str1.replace(\" \", \"\")\n    str3 = str2.replace(\".\", \"\")\n    str4 = str3.replace(\",\", \"\")\n    str5 = str4.replace(\"-\", \"\")\n    str6 = str5.replace(\"/\", \"\")\n    print(\"After removal of non alphanumeric characters: \", str6)\n    return str6\ndef remove_non_alphanumeric(str1):\n    '''\n    Write a function to remove non alphanumeric characters from a given string.\n    '''\n    print(\"Original String: \", str",
        "num_ids": 10
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # return str1.lower().replace(\" \",\"\")\n",
        "num_ids": 16
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    \n    final = str1.lower()\n    \n    return final\n",
        "num_ids": 19
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]', '', str1)\n",
        "num_ids": 22
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    l=[]\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            l.append(str1[i])\n    l=\"\".join(l)\n    return l\n",
        "num_ids": 55
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.upper()\n    \ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n    \ndef remove_non_alpha(str1):\n    '''\n    Write a function to remove non-alphabetic substrings from a given string.\n    '''\n    return re.sub('[^A-Za-z ]+', '', str1)\n    \ndef remove_non_ascii(str1):\n    '''\n    Write a function to remove non-ascii substrings from a given string.\n    '''\n    return re.sub('[^\\x00-\\x7F]+', '', str1)\n",
        "num_ids": 26
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]+', '', str1, 0)\n",
        "num_ids": 24
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(\"[a-z]+\",'',str1)\n",
        "num_ids": 20
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]', '', str1)\n",
        "num_ids": 20
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]', '', str1).lower()\n",
        "num_ids": 24
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n==0:\n        return '0'\n    elif n==1:\n        return '1'\n    else :\n        if n%10 == 1:\n            return '1'\n        else :\n            return '0'\n",
        "num_ids": 58
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    #your code here\n    \n    # Hint: You can use the builtin function ord() to get the ASCII value of a char.\n    return n%10\n    \n    \ndef second_Digit(n) :\n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    #your code here\n    \n    return (n//10)%10\n    \n    \ndef third_Digit(n) :\n    '''\n    Write a python function to find the third digit of a given number.\n    '''\n    #your code here\n    \n    return (n//100)%10\n    \n    \ndef fourth_Digit(n) :\n    '''\n    Write a python function to find the fourth digit of a given number.\n    '''\n    #your code here\n    \n    return (n//1000)%10\n    \n    \ndef fifth_Digit(n) :\n    '''\n    Write a python function to find the fifth digit of a given number.\n    '''\n    #your code here\n    \n    return (n//10000)%10\n    \n    \ndef sixth_Digit(n) :\n    '''\n    Write a python function to find the sixth digit of a given number.\n    '''\n    #your code here\n    \n    return (n//100000)%10\n    \n    \ndef seventh_Digit(n) :\n    '''\n    Write a python function to find the seventh digit of a given number.\n    '''\n    #your code here\n    \n    return (n//1000000)%10\n    \n    \ndef eigth_Digit(n) :\n    '''\n    Write a python function to find the eigth digit of a given number.\n    '''\n    #your code here\n    \n    return (n//10000000)%10\n    \n    \ndef ninth_Digit(n) :\n    '''\n    Write a python function to find the ninth digit of a given number.\n    '''\n    #your code here\n    \n    return (n//100000000)%10\n    \n    \ndef tenth_Digit(n) :\n    '''\n    Write a python function to find the tenth digit of a given number.\n    '''\n    #your code here\n    \n    return (n//10000000000)%10\n    \n    \ndef first_Digit_String(str) :\n    '''\n    Write a python function to find the first digit of a given string.\n    '''\n    #your code here\n    \n    return ord(str[0])\n    \n    \ndef second_Digit_String(str) :\n    '''\n    Write a python function to find the second digit of a given string.\n    '''\n    #your code here\n    \n    return ord(str[1])\n    \n    \ndef third_Digit_String(str) :\n    '''\n    Write a python function to find the third digit of a given string.\n    '''\n    #your code here\n    \n    return ord(str[2])\n    \n    \ndef fourth_Digit_String(str) :\n    '''\n    Write a python function to find the fourth digit of a given string.\n    '''\n    #your code here\n    \n    return ord(str[3])\n    \n    \ndef fifth_Digit_String(str) :\n    '''\n    Write a python function to find the fifth digit of a given string.\n    '''\n    #your code here\n    \n    return ord(str[4])\n    \n    \ndef sixth_Digit_String(str) :\n    '''\n    Write a python function to find the sixth digit of a given string.\n    '''\n    #your code here\n    \n    return ord(str[5])\n    \n    \ndef seventh_Digit_String(str) :\n    '''\n    Write a python function to find the seventh digit of a given string.\n    '''\n    #your code here\n    \n    return ord(str[6])\n    \n    \ndef eigth_Digit_String(str) :\n    '''\n    Write a python function to find the eigth digit of a given string.\n    '''\n    #your code here\n    \n    return ord(str[7])\n    \n    \ndef ninth_Digit_String(str) :\n    '''\n    Write a python function to find the ninth digit of a given string.\n    '''\n    #your code here\n    \n    return ord(str[8])\n    \n    \ndef tenth_Digit_String(str) :\n    '''\n    Write a python function to find the tenth digit of a given string.\n    '''\n    #your code here\n    \n    return ord(str[9])\n    \n    \ndef first_Digit_List(lst) :\n    '''\n    Write a python function to find the first digit of a given list.\n    '''\n    #your code here\n    \n    return lst[0]\n    \n    \ndef second_Digit_List(lst) :\n    '''\n    Write a python function to find the second digit of a given list.\n    '''\n    #your code here\n    \n    return lst[1]\n    \n    \ndef third_Digit_List(lst) :\n    '''\n    Write a python function to find the third digit of a given list.\n    '''\n    #your code here\n    \n    return lst[2]\n    \n    \ndef fourth_Digit_List(lst) :\n    '''\n    Write a python function to find the fourth digit of a given list.\n    '''\n    #your code here\n    \n    return lst[3]\n    \n    \ndef fifth_Digit_List(lst) :\n    '''\n    Write a python function to find the fifth digit of a given list.\n    '''\n    #your code here\n    \n    return lst[4]\n    \n    \ndef sixth_Digit_List(lst) :\n    '''\n    Write a python function to find the sixth digit of a given list.\n    '''\n    #your code here\n    \n    return lst[5]\n    \n    \ndef seventh_Digit_List(lst) :\n    '''\n    Write a python function to find the seventh digit of a given list.\n    '''\n    #your code here\n    \n    return lst[6]\n    \n    \ndef eigth_Digit_List(lst) :\n    '''\n    Write a python function to find the eigth digit of a given list.\n    '''\n    #your code here\n    \n    return lst[7]\n    \n    \ndef ninth_Digit_List(lst) :\n    '''\n    Write a python function to find the ninth digit of a given list.\n    '''\n    #your code here\n    \n    return lst[8]\n    \n    \ndef tenth_Digit_List(lst) :\n    '''\n    Write a python function to find the tenth digit of a given list.\n    '''\n    #your code here\n    \n    return lst[9]\n    \n    \ndef first_Digit_Tuple(tpl) :\n    '''\n    Write a python function to find the first digit of a given tuple.\n    '''\n    #your code here\n    \n    return tpl[0]\n    \n    \ndef second_Digit_Tuple(tpl) :\n    '''\n    Write a python function to find the second digit of a given tuple.\n    '''\n    #your code here\n    \n    return tpl[1]\n    \n    \ndef third_Digit_Tuple(tpl) :\n    '''\n    Write a python function to find the third digit of a given tuple.\n    '''\n    #your code here\n    \n    return tpl[2]\n    \n    \ndef fourth_Digit_Tuple(tpl) :\n    '''\n    Write a python function to find the fourth digit of a given tuple.\n    '''\n    #your code here\n    \n    return tpl[3]\n    \n    \ndef fifth_Digit_Tuple(tpl) :\n    '''\n    Write a python function to find the fifth digit of a given tuple.\n    '''\n    #your code here\n    \n    return tpl[4]\n    \n    \ndef sixth_Digit_Tuple(tpl) :\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n//10)\n",
        "num_ids": 29
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0 :\n        return n\n    else :\n        return n%10\n",
        "num_ids": 23
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if isinstance(n, int) :\n        if n > 0 :\n            return (int(str(n)[0]))\n    else :\n        raise TypeError(\"n must be an integer\")\n    return\n",
        "num_ids": 52
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n==0:\n        return 0\n    return n%10\n",
        "num_ids": 19
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    n=abs(n)\n    digit=n%10\n    \n    return digit\n    \ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    \n    n=abs(n)\n    second_digit=n%100//10\n    \n    return second_digit\n    \n    \ndef is_Prime_Number(n) :  \n    '''\n    Write a python function to find whether a given number is Prime or not.\n    '''\n    \n    n=abs(n)\n    if(n==1):\n        return False\n    for i in range(2, n//2) :\n        if(n%i == 0) :\n            return False\n            \n    return True\n    \n    \ndef is_Prime_Number2(n) :  \n    '''\n    Write a python function to find whether a given number is Prime or not.\n    '''\n    \n    n=abs(n)\n    if(n==1):\n        return False\n    for i in range(2, int((n**(0.5)) + 1)) :\n        if(n%i == 0) :\n            return False\n            \n    return True\n    \n    \ndef is_Prime_Number3(n) :  \n    '''\n    Write a python function to find whether a given number is Prime or not.\n    '''\n    \n    if(n%2==0):\n        return False\n        \n    if(n<2) :\n        return False\n        \n    for i in range(3, int(math.sqrt(n)+1),2) :\n        if(n%i==0) :\n            return False\n            \n    return True\n    \n    \ndef is_Prime_Number4(n) :  \n    '''\n    Write a python function to find whether a given number is Prime or not.\n    '''\n    \n    def prime_helper(n):\n        if(n==1) :\n            return False\n        if(n==2):\n            return True\n        if(n%2==0):\n            return False\n            \n        d = 3\n        while(d*d<=n) :\n            if(n%d==0):\n                return False\n            d += 2\n            \n        return True\n        \n    return prime_helper(n)\n        \n    \ndef is_Prime_Number5(n) :  \n    '''\n    Write a python function to find whether a given number is Prime or not.\n    '''\n    \n    def prime_helper(n) :\n        if(n==1) :\n            return False\n        if(n==2):\n            return True\n        if(n%2==0):\n            return False\n            \n        d = 3\n        while(d*d<=n) :\n            if(n%d==0):\n                return False\n            d += 2\n            \n        return True\n        \n    return prime_helper(n)\n    \n    \ndef is_Prime_Number6(n) :  \n    '''\n    Write a python function to find whether a given number is Prime or not.\n    '''\n    \n    def prime_helper(n):\n        if(n==1) :\n            return False\n        if(n==2):\n            return True\n        if(n%2==0):\n            return False\n            \n        d = 3\n        while(d*d<=n) :\n            if(n%d==0):\n                return False\n            d += 2\n            \n        return True\n        \n    return prime_helper(n)\n    \n    \ndef is_Prime_Number7(n) :  \n    '''\n    Write a python function to find whether a given number is Prime or not.\n    '''\n    \n    def prime_helper(n) :\n        if(n==1) :\n            return False\n        if(n==2):\n            return True\n        if(n%2==0):\n            return False\n            \n        d = 3\n        while(d*d<=n) :\n            if(n%d==0):\n                return False\n            d += 2\n            \n        return True\n        \n    return prime_helper(n)\n    \n    \ndef is_Prime_Number8(n) :  \n    '''\n    Write a python function to find whether a given number is Prime or not.\n    '''\n    \n    def prime_helper(n) :\n        if(n==1) :\n            return False\n        if(n==2):\n            return True\n        if(n%2==0):\n            return False\n            \n        d = 3\n        while(d*d<=n) :\n            if(n%d==0):\n                return False\n            d += 2\n            \n        return True\n        \n    return prime_helper(n)\n    \n    \ndef is_Prime_Number9(n) :  \n    '''\n    Write a python function to find whether a given number is Prime or not.\n    '''\n    \n    def prime_helper(n) :\n        if(n==1) :\n            return False\n        if(n==2):\n            return True\n        if(n%2==0):\n            return False\n            \n        d = 3\n        while(d*d<=n) :\n            if(n%d==0):\n                return False\n            d += 2\n            \n        return True\n        \n    return prime_helper(n)\n    \n    \ndef is_Prime_Number10(n) :  \n    '''\n    Write a python function to find whether a given number is Prime or not.\n    '''\n    \n    def prime_helper(n) :\n        if(n==1) :\n            return False\n        if(n==2):\n            return True\n        if(n%2==0):\n            return False\n            \n        d = 3\n        while(d*d<=n) :\n            if(n%d==0):\n                return False\n            d += 2\n            \n        return True\n        \n    return prime_helper(n)\n    \n    \ndef is_Prime_Number11(n) :  \n    '''\n    Write a python function to find whether a given number is Prime or not.\n    '''\n    \n    def prime_helper(n) :\n        if(n==1) :\n            return False\n        if(n==2):\n            return True\n        if(n%2==0):\n            return False\n            \n        d = 3\n        while(d*d<=n) :\n            if(n%d==0):\n                return False\n            d += 2\n            \n        return True\n        \n    return prime_helper(n)\n    \n    \ndef is_Prime_Number12(n) :  \n    '''\n    Write a python function to find whether a given number is Prime or not.\n    '''\n    \n    def prime_helper(n) :\n        if(n==1) :\n            return False\n        if(n==2):\n            return True\n        if(n%2==0):\n            return False\n            \n        d = 3\n        while(d*d<=n) :\n            if(n%d==0):\n                return False\n            d += 2\n            \n        return True\n        \n    return prime_helper(n)\n    \n    \ndef is_Prime_Number13(n) :  \n    '''\n    Write a python function to find whether a given number is Prime or not.\n    '''\n    \n    def prime_helper(n) :\n        if(n==1) :\n            return False\n        if(n==2):\n            return True\n        if(n%2==0):\n            return False\n            \n        d = 3\n        while(d*d<=n) :\n            if(n%d==0):\n                return False\n            d += 2\n            \n        return True\n        \n    return prime_helper(n)\n    \n    \ndef is_Prime_Number14(n) :  \n    '''\n    Write a python function to find whether a given number is Prime or not.\n    '''\n    \n    def prime_helper(n) :\n        if(n==1) :\n            return False\n        if(n==2):\n            return True\n        if(n%2==0):\n            return False\n            \n        d = 3\n    ",
        "num_ids": 62
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n // 10)\n",
        "num_ids": 29
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n // 10\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10\n",
        "num_ids": 8
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    i = 0\n    while i < len(list):\n        if list[i] % 2 == 0:\n            list.pop(i)\n        else:\n            i += 1\n    return list\n",
        "num_ids": 49
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for x in list:\n        if x%2!= 0:\n            odd_list.append(x)\n    return odd_list\n",
        "num_ids": 42
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list_odd = list[::2]\n    print(\"List of odd numbers in the list: \", list_odd)\n    \n    \ndef Merge(list1, list2):\n    '''\n    Write a python function which takes two lists and merges them into one.\n    '''\n    result = []\n    i = 0\n    j = 0\n    while (i < len(list1)) and (j < len(list2)):\n        if list1[i] < list2[j]:\n            result.append(list1[i])\n            i += 1\n        else:\n            result.append(list2[j])\n            j += 1\n    if i < len(list1):\n        result += list1[i:]\n    if j < len(list2):\n        result += list2[j:]\n    print(\"List after merge: \", result)\n    \n",
        "num_ids": 139
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list\n",
        "num_ids": 42
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i%2 == 1:\n            odd_list.append(i)\n",
        "num_ids": 35
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = [] \n    for i in list: \n        if i % 2!= 0: \n            odd_list.append(i) \n    return odd_list \n    \n    \n    ",
        "num_ids": 52
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    \n    l1 = []\n    for i in range(len(list)): \n        if list[i] % 2!= 0: \n            l1.append(list[i]) \n    return l1 \n",
        "num_ids": 55
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list[::2]\n    \n",
        "num_ids": 12
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for num in list:\n        if num % 2 == 1:\n            odd.append(num)\n    return odd\n",
        "num_ids": 35
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even = []\n    odd = []\n    for item in list:\n        if item % 2 == 0:\n            even.append(item)\n        else:\n            odd.append(item)\n    print(f'even = {even}')\n    print(f'odd = {odd}')\n    return even,odd\n",
        "num_ids": 78
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return (n * (n + 1) * (2 * n + 1)) // 6 - sum(range(1, n + 1))\n",
        "num_ids": 34
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Your code here\n",
        "num_ids": 8
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    #First method\n    #count = 0\n    #sum = 0\n    #while count < n :\n    #    sum += (count**3)\n    #    count += 1\n    #diff = n*(n+1)//2 - sum\n    #return diff\n    \n    #Second method\n    return sum(range(1,n+1))*(n+1) - sum(range(1,n+1))\n",
        "num_ids": 103
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    n = int(input(\"Enter a number\"))\n    \n    cube_sum = n * (n * n * n)\n    sum_n = 0\n    for i in range(1,n+1) :\n        sum_n += i\n    \n    diff = cube_sum - sum_n\n    return diff\n",
        "num_ids": 78
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    # n1 = int(input())\n    # n2 = int(input())\n    # sum_of_cube = 0\n    # sum_of_num = 0\n    # for i in range(1,n+1):\n    #     sum_of_cube += i**3\n    # for i in range(1,n+1):\n    #     sum_of_num += i\n    # diff = sum_of_cube - sum_of_num\n    # return diff\n    \n    # O/P : 4\n",
        "num_ids": 127
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    def squares(n) :  \n        '''\n        Write a python function to find the difference between the sum of the first n natural numbers and the sum of the first n natural numbers.\n        '''\n    import math\n    print(math.sqrt(n))\n",
        "num_ids": 17
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sumOfCubes(n):  \n        return sum([i*i*i for i in range(1,n+1)])\n    return abs(sumOfCubes(n) - sumOfCubes(n-1))  \n  \ndef findFirstDifference(n) :  \n    '''\n    Write a python function to find the first number in a given list of positive numbers (total sum of the cubes of the first n natural numbers) which has a difference of 2 with the sum of cubes of the first n natural numbers.\n    '''\n    def sumOfCubes(n):  \n        return sum([i*i*i for i in range(1,n+1)])\n    return 2*sumOfCubes(n) - sumOfCubes(n-1)\n",
        "num_ids": 57
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def difference(n) :\n        if n==0 :\n            return 0\n        return (n*(n+1))/2 - (n*(2*n+1))/2\n",
        "num_ids": 47
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n=int(input(\"Enter the number of natural numbers:\"))\n    sum_1=0\n    sum_2=0\n    for i in range(n):\n        sum_1+=i**3\n        sum_2+=i\n    difference=sum_2-sum_1\n    print(\"The difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers is:\",difference)\n",
        "num_ids": 101
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum1 = 0\n    sum2 = 0\n    sum3 = 0\n    for i in range(1,n+1) : \n        sum1 += i**3\n        sum2 += i**2\n        sum3 += i\n    print(sum2 - sum1)\n",
        "num_ids": 67
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if len(A) == 0 :\n        return 0\n",
        "num_ids": 16
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(1,N) :\n        for j in range(i+1,N) :\n            xor = A[i] ^ A[j]\n            if (xor) % 2!= 0 :\n                count += 1\n    return count\n",
        "num_ids": 69
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if (A[i] ^ A[j]) % 2 == 1 :\n                count += 1\n    return count ",
        "num_ids": 58
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] == 0:\n                count+=1\n                print(A[i],\",\",A[j])\n            else:\n                continue\n    print(\"Number of odd pairs = \",count)\n    \ndef find_Odd_Pair2(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] == 0:\n                count+=1\n                print(A[i],\",\",A[j])\n            else:\n                continue\n    print(\"Number of odd pairs = \",count)\n",
        "num_ids": 84
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N-1) : \n        for j in range(i+1,N) : \n            if(A[i] ^ A[j]) % 2!= 0 : \n                count += 1\n    return count \n",
        "num_ids": 67
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    c = 0\n    for i in range(N):\n        if A[i]%2!= 0:\n            c+=1\n    return c\n",
        "num_ids": 38
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd = 0\n    for i in range(0,N) :\n        if A[i] & 1 == 1 :\n            odd += 1\n    return odd\n",
        "num_ids": 40
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N-1) :\n        for j in range(i+1,N) :\n            if A[i] ^ A[j] == 0 :\n                count += 1\n                \n    return count\n        \nif __name__ == \"__main__\": \n    A = [2, 4, 5, 6, 7, 7]\n    N = len(A)\n    print(find_Odd_Pair(A,N))\n",
        "num_ids": 116
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if (A[i] ^ A[j]) % 2!= 0 :\n                count += 1\n    return count\n    \ndef find_Odd_Pair2(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if (A[i] ^ A[j]) % 2!= 0 :\n                count += 1\n    return count\n    \ndef find_Odd_Pair3(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if (A[i] ^ A[j]) % 2!= 0 :\n                count += 1\n    return count\n    \n",
        "num_ids": 61
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_pair_count = 0\n    for i in range(0,N) :\n        for j in range(i+1, N) :\n            if (A[i] ^ A[j]) % 2 == 1:\n                odd_pair_count += 1\n    return odd_pair_count\n",
        "num_ids": 72
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for i in string:\n        if i.isupper():\n            new_string += i.lower()\n        elif i.islower():\n            new_string += i.upper()\n        else:\n            new_string += i\n    return new_string\n",
        "num_ids": 70
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # single_case = lambda s: s.swapcase()\n    # return string.swapcase()\n",
        "num_ids": 28
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for letter in string:\n        if letter.isupper():\n            new_string += letter.lower()\n        else:\n            new_string += letter.upper()\n",
        "num_ids": 48
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if type(string) == str:\n        return string.swapcase()\n    else:\n        return None\n",
        "num_ids": 29
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    #TODO: Write your function here\n    return string.swapcase()\n",
        "num_ids": 22
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Add your code here\n    res = 0\n    n1 = int(n1)\n    n2 = int(n2)\n    \n    if n1 == 0 or n2 == 0:\n        return 0\n    for i in range(len(str(n1))):\n        res += abs(n1-n2)\n        n1 = int(str(n1)[i])\n        n2 = int(str(n2)[i])\n    return res\n",
        "num_ids": 112
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(int(n1) - int(n2)) for i in range(len(n1))])\n",
        "num_ids": 31
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    n1 = n1-10**len(str(n1))\n    n2 = n2-10**len(str(n2))\n    for i in range(len(str(n1))):\n        diff = n1-n2\n        sum += abs(diff)\n        n1 = n1//10\n        n2 = n2//10\n    return sum\n",
        "num_ids": 95
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    distance = 0\n    for i in range(len(n1)):\n        distance += int(n1[i]) - int(n2[i])\n    return distance\n",
        "num_ids": 63
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1, n2 = str(n1), str(n2)\n    d = max(len(n1), len(n2))\n    total_sum = 0\n    for i in range(d):\n        total_sum = total_sum + int(n1[i]) - int(n2[i])\n    return total_sum\n",
        "num_ids": 83
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == 0 or n2 == 0:\n        return n1 + n2\n    sum_diff = 0\n    n1_len = len(str(n1))\n    n2_len = len(str(n2))\n    if n1_len > n2_len:\n        diff_nums = n1\n        for i in range(n2_len):\n            diff_nums += (n1_len - i - 1) * 10**i\n        for i in range(n2_len):\n            diff_nums += (n2_len - i - 1) * 10**(n2_len - i - 1)\n    elif n1_len < n2_len:\n        diff_nums = n2\n        for i in range(n1_len):\n            diff_nums += (n2_len - i - 1) * 10**i\n        for i in range(n1_len):\n            diff_nums += (n1_len - i - 1) * 10**(n1_len - i - 1)\n    else:\n        for i in range(n1_len):\n            diff_nums += (n1_len - i - 1) * 10**i\n    return diff_nums\n",
        "num_ids": 297
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    a = n1\n    b = n2\n    s = 0\n    while a!= 0:\n        a = a//10\n        b = b//10\n        c = (a - b)\n        s = s + c\n    return s\n",
        "num_ids": 61
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    assert len(str(n1)) == len(str(n2))\n",
        "num_ids": 20
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return digit_distance(n1, n2)\n",
        "num_ids": 15
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = len(str(n1))\n    d2 = len(str(n2))\n    if d1 > d2:\n        n2 = n2*10**(d1-d2)\n    elif d2 > d1:\n        n1 = n1*10**(d2-d1)\n    return (n1-n2)\n",
        "num_ids": 89
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    sums = a[0]\n    for i in range(1, size):\n        sums += a[i]\n        if sums < 0:\n            sums = 0\n        if sums > max_sum:\n            max_sum = sums\n    return max_sum\n",
        "num_ids": 76
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    start = 0\n    end = 0\n    sums = [0] * size\n    # Generate sums for each index, and maximum sum for a given index\n    for i in range(size):\n        sums[i] = a[i] + sums[i - 1]\n        if max_sum < sums[i]:\n            max_sum = sums[i]\n            start = i\n        # If sum is 0, then this is the largest contiguous sublist and the start is the index\n        if sums[i] == 0:\n            end = i\n            break\n",
        "num_ids": 140
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    n = len(a)\n    if n == 0:\n        return 0\n    max_sum = a[0]\n    for i in range(1, n):\n        if a[i] + max_sum > 0:\n            max_sum = a[i] + max_sum\n        else:\n            max_sum = a[i]\n        if max_sum > max_sum:\n            max_sum = max_sum\n    return max_sum\n",
        "num_ids": 117
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sub_sum = 0\n    max_sum = 0\n",
        "num_ids": 16
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    current_sum = 0\n    index = 0\n    while index < size:\n        if current_sum < 0:\n            current_sum = a[index]\n            index += 1\n            continue\n        current_sum += a[index]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n",
        "num_ids": 91
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    max_sum_index = 0\n    sum = 0\n    for i in range(size):\n        sum += a[i]\n        if sum > max_sum:\n            max_sum = sum\n            max_sum_index = i\n        if sum < 0:\n            sum = 0\n    print(max_sum, max_sum_index)\n",
        "num_ids": 94
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    max_sum_start = 0\n    max_sum_end = 0\n    for i in range(0, size-1):\n        if a[i] >= a[i+1]:\n            max_sum = a[i]\n        else:\n            max_sum = a[i+1]\n        if max_sum > max_sum_end:\n            max_sum_end = max_sum\n        if max_sum > max_sum_start:\n            max_sum_start = max_sum\n    return max_sum_start + max_sum_end\n",
        "num_ids": 145
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n",
        "num_ids": 75
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    max_sum = a[0]\n    cur_sum = a[0]\n    for i in range(1, size):\n        cur_sum = max(cur_sum + a[i], a[i])\n        max_sum = max(max_sum, cur_sum)\n    return max_sum\n",
        "num_ids": 86
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return_tup = []\n    for i in test_tup1:\n        if i not in return_tup:\n            return_tup.append(i)\n    for i in test_tup2:\n        if i not in return_tup:\n            return_tup.append(i)\n    return return_tup\n",
        "num_ids": 83
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    final_set = set(test_tup1).union(set(test_tup2))\n    final_list = sorted(final_set)\n    return final_list\n",
        "num_ids": 44
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = []\n    for i in range(0,len(test_tup1)):\n        union_tup.append(test_tup1[i])\n    for i in range(0,len(test_tup2)):\n        if test_tup2[i] not in union_tup:\n            union_tup.append(test_tup2[i])\n    return tuple(sorted(union_tup))\n",
        "num_ids": 111
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return sorted(list(set1 | set2))\n",
        "num_ids": 41
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    union_set = test_set1 | test_set2\n    union_set = sorted(union_set)\n    return union_set\n",
        "num_ids": 65
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n",
        "num_ids": 28
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    temp_list = []\n    temp_list.extend(test_tup1)\n    temp_list.extend(test_tup2)\n    temp_list.sort()\n    return temp_list\n",
        "num_ids": 53
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_list = []\n    for i in range(len(test_tup1)):\n        test_list.append(test_tup1[i])\n    for j in range(len(test_tup2)):\n        if test_tup2[j] not in test_list:\n            test_list.append(test_tup2[j])\n    return test_list\n",
        "num_ids": 96
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) == 0:\n        return test_tup2\n    elif len(test_tup2) == 0:\n        return test_tup1\n    elif test_tup1[0] > test_tup2[0]:\n        return (test_tup1[0], test_tup2[0], test_tup1[1])\n    elif test_tup1[0] < test_tup2[0]:\n        return (test_tup1[0], test_tup2[0], test_tup1[1])\n    elif test_tup1[0] == test_tup2[0]:\n        return (test_tup1[0], test_tup1[1] + test_tup2[1], test_tup1[2])\n",
        "num_ids": 203
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(set(test_tup1) | set(test_tup2))\n",
        "num_ids": 24
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    d=dict()\n    \n    for i in range(len(lst)):\n        temp_lst = lst[i]\n        temp_lst.sort()\n        if temp_lst not in d.keys():\n            d[temp_lst] = 1\n        else:\n            d[temp_lst] += 1\n        \n    max_len = 0\n    for v in d.values():\n        if v > max_len:\n            max_len = v\n",
        "num_ids": 117
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len=0\n    for i in range(len(lst)):\n        if(len(lst[i])>max_len):\n            max_len=len(lst[i])\n    return max_len\n",
        "num_ids": 57
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    # for loop\n    n = len(lst)\n    max_length = 0\n    for i in range(n):\n        sub_list = lst[i]\n        n = len(sub_list)\n        length = n + 1\n        if length > max_length:\n            max_length = length\n    return max_length\n",
        "num_ids": 84
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    d = {}\n    for ele in lst:\n        if ele not in d:\n            d[ele] = 1\n        else:\n            d[ele] += 1\n",
        "num_ids": 43
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)-1):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) > max_len:\n                max_len = len(lst[i:j+1])\n    return max_len\n",
        "num_ids": 82
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest_length=0\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            for k in range(len(lst[i][j])):\n                for l in range(len(lst[i][j][k])):\n                    for m in range(len(lst[i][j][k][l])):\n                        for n in range(len(lst[i][j][k][l][m])):\n                            if(len(lst[i][j][k][l][m][n])==1):\n                                longest_length=max(longest_length,len(lst[i][j][k][l][m][n]))\n    print(longest_length)\n    print(lst)\nlst=[[\"a\",\"b\"],[\"c\",\"d\"],[\"e\",\"f\",\"g\"]]\nFind_Max_Length(lst)",
        "num_ids": 220
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = len(lst[0])\n    for i in range(1,len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n    return max_len\n",
        "num_ids": 64
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    sub = []\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            sub.append(lst[i:j])\n    return max([len(i) for i in sub])\n",
        "num_ids": 60
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        sub_list_len = 0\n        for j in range(len(lst)):\n            if lst[i] == lst[j]:\n                sub_list_len += 1\n        if sub_list_len > max_len:\n            max_len = sub_list_len\n    return max_len\n",
        "num_ids": 97
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    for i in range(1,len(lst)):\n        for j in range(len(lst)-i):\n            if len(lst[j:j+i])>len(lst[j:j+i+1]):\n                lst[j:j+i+1]=lst[j:j+i]\n            else:\n                lst[j:j+i]=lst[j:j+i+1]\n    return lst\n",
        "num_ids": 113
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # find all the quotation marks\n    marks = re.findall(r\"(?<=\\\")[^\\\"]+\\\"(?=\\\")|(?<=\\\")[^\\\"]+\\\"(?=\\\")\", text)\n    \n    # extract the values\n    values = re.findall(r'\"[^\"]*?\"', str(marks))\n    return values\n",
        "num_ids": 89
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    start = re.search(r\"\\\".*\\\"\", text)\n    end = re.search(r\"\\\".*\\\"\", text)\n    \n    start = start.group(0).strip(\"\\\"\")\n    end = end.group(0).strip(\"\\\"\")\n",
        "num_ids": 66
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if not text:\n        return ''\n    text = text.replace('\"', '')\n    text = text.replace(\"'\", '')\n    text = text.replace(\"\u2018\", '')\n    text = text.replace(\"\u2019\", '')\n    text = text.replace(\"\u201c\", '')\n    text = text.replace(\"\u201d\", '')\n    text = text.replace(\",\", '')\n    text = text.replace(\";\", '')\n    text = text.replace(\".\", '')\n    text = text.replace(\"(\", '')\n    text = text.replace(\")\", '')\n    text = text.replace(\"-\", '')\n    text = text.replace(\"\u2014\", '')\n    text = text.replace(\"/\", '')\n    text = text.replace(\"_\", '')\n    text = text.replace(\"+\", '')\n    text = text.replace(\"&\", '')\n    text = text.replace(\")(\", '')\n    text = text.replace(\"\u2019(\", '')\n    text = text.replace(\"\u2018(\", '')\n    text = text.replace(\"\u2019)\", '')\n    text = text.replace(\"\u2018)\", '')\n    text = text.replace(\"'\", '')\n    text = text.replace('\"', '')\n    text = text.replace(\"\u201c\", '')\n    text = text.replace(\"\u201d\", '')\n    text = text.replace(\",\", '')\n    text = text.replace(\";\", '')\n    text = text.replace(\".\", '')\n    text = text.replace(\"(\", '')\n    text = text.replace(\")\", '')\n    text = text.replace(\"-\", '')\n    text = text.replace(\"\u2014\", '')\n    text = text.replace(\"/\", '')\n    text = text.replace(\"_\", '')\n    text = text.replace(\"+\", '')\n    text = text.replace(\"&\", '')\n    text = text.replace(\")(\", '')\n    text = text.replace(\"\u2019(\", '')\n    text = text.replace(\"\u2018(\", '')\n    text = text.replace(\"\u2019)\", '')\n    text = text.replace(\"\u2018)\", '')\n    text = text.replace(\"'\", '')\n    text = text.replace('\"', '')\n    text = text.replace(\"\u201c\", '')\n    text = text.replace(\"\u201d\", '')\n    text = text.replace(\",\", '')\n    text = text.replace(\";\", '')\n    text = text.replace(\".\", '')\n    text = text.replace(\"(\", '')\n    text = text.replace(\")\", '')\n    text = text.replace(\"-\", '')\n    text = text.replace(\"\u2014\", '')\n    text = text.replace(\"/\", '')\n    text = text.replace(\"_\", '')\n    text = text.replace(\"+\", '')\n    text = text.replace(\"&\", '')\n    text = text.replace(\")(\", '')\n    text = text.replace(\"\u2019(\", '')\n    text = text.replace(\"\u2018(\", '')\n    text = text.replace(\"\u2019)\", '')\n    text = text.replace(\"\u2018)\", '')\n    text = text.replace(\"'\", '')\n    text = text.replace('\"', '')\n    text = text.replace(\"\u201c\", '')\n    text = text.replace(\"\u201d\", '')\n    text = text.replace(\",\", '')\n    text = text.replace(\";\", '')\n    text = text.replace(\".\", '')\n    text = text.replace(\"(\", '')\n    text = text.replace(\")\", '')\n    text = text.replace(\"-\", '')\n    text = text.replace(\"\u2014\", '')\n    text = text.replace(\"/\", '')\n    text = text.replace(\"_\", '')\n    text = text.replace(\"+\", '')\n    text = text.replace(\"&\", '')\n    text = text.replace(\")(\", '')\n    text = text.replace(\"\u2019(\", '')\n    text = text.replace(\"\u2018(\", '')\n    text = text.replace(\"\u2019)\", '')\n    text = text.replace(\"\u2018)\", '')\n    text = text.replace(\"'\", '')\n    text = text.replace('\"', '')\n    text = text.replace(\"\u201c\", '')\n    text = text.replace(\"\u201d\", '')\n    text = text.replace(\",\", '')\n    text = text.replace(\";\", '')\n    text = text.replace(\".\", '')\n    text = text.replace(\"(\", '')\n    text = text.replace(\")\", '')\n    text = text.replace(\"-\", '')\n    text = text.replace(\"\u2014\", '')\n    text = text.replace(\"/\", '')\n    text = text.replace(\"_\", '')\n    text = text.replace(\"+\", '')\n    text = text.replace(\"&\", '')\n    text = text.replace(\")(\", '')\n    text = text.replace(\"\u2019(\", '')\n    text = text.replace(\"\u2018(\", '')\n    text = text.replace(\"\u2019)\", '')\n    text = text.replace(\"\u2018)\", '')\n    text = text.replace(\"'\", '')\n    text = text.replace('\"', '')\n    text = text.replace(\"\u201c\", '')\n    text = text.replace(\"\u201d\", '')\n    text = text.replace(\",\", '')\n    text = text.replace(\";\", '')\n    text = text.replace(\".\", '')\n    text = text.replace(\"(\", '')\n    text = text.replace(\")\", '')\n    text = text.replace(\"-\", '')\n    text = text.replace(\"\u2014\", '')\n    text = text.replace(\"/\", '')\n    text = text.replace(\"_\", '')\n    text = text.replace(\"+\", '')\n    text = text.replace(\"&\", '')\n    text = text.replace(\")(\", '')\n    text = text.replace(\"\u2019(\", '')\n    text = text.replace(\"\u2018(\", '')\n    text = text.replace(\"\u2019)\", '')\n    text = text.replace(\"\u2018)\", '')\n    text = text.replace(\"'\", '')\n    text = text.replace('\"', '')\n    text = text.replace(\"\u201c\", '')\n    text = text.replace(\"\u201d\", '')\n    text = text.replace(\",\", '')\n    text = text.replace(\";\", '')\n    text = text.replace(\".\", '')\n    text = text.replace(\"(\", '')\n    text = text.replace(\")\", '')\n    text = text.replace(\"-\", '')\n    text = text.replace(\"\u2014\", '')\n    text = text.replace(\"/\", '')\n    text = text.replace(\"_\", '')\n    text = text.replace(\"+\", '')\n    text = text.replace(\"&\", '')\n    text = text.replace(\")(\", '')\n    text = text.replace(\"\u2019(\", '')\n    text = text.replace(\"\u2018(\", '')\n    text = text.replace(\"\u2019)\", '')\n    text = text.replace(\"\u2018)\", '')\n    text = text.replace(\"'\", '')\n    text = text.replace('\"', '')\n    text = text.replace(\"\u201c\", '')\n    text = text.replace(\"\u201d\", '')\n    text = text.replace(\",\", '')\n    text = text.replace(\";\", '')\n    text = text.replace(\".\", '')\n    text = text.replace(\"(\", '')\n    text = text.replace(\")\", '')\n    text = text.replace(\"-\", '')\n    text = text.replace(\"\u2014\", '')\n    text = text.replace(\"/\", '')\n    text = text.replace(\"_\", '')\n    text = text.replace(\"+\", '')\n    text = text.replace(\"&\", '')\n    text = text.replace(\")(\", '')\n    text = text.replace(\"\u2019(\", '')\n    text = text.replace(\"\u2018(\", '')\n    text = text.replace(\"\u2019)\", '')\n    text = text.replace(",
        "num_ids": 2016
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'\"[^\"]*\"', text)\n",
        "num_ids": 20
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile('\"([^\"]*)\"')\n    values = pattern.findall(text)\n    return values\n",
        "num_ids": 33
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if '\"' in text:\n        pattern = r'\"(.*?)\"'\n        result = re.findall(pattern, text)\n        return result\n    else:\n        pattern = r\"'(.*?)'\"\n        result = re.findall(pattern, text)\n        return result\n",
        "num_ids": 68
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    val = re.findall(r'\"[^\"]*\"',text)\n    return val\n",
        "num_ids": 25
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    \n    text = text.strip()\n    vals = re.findall(r\"\\\".+\\\"\", text)\n    res = []\n    for val in vals:\n        res.append(val[1:-1])\n    return res\n",
        "num_ids": 59
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    try:\n        return (re.findall(r'\"(.*?)\"', text))\n    except TypeError:\n        print(\"No Data extracted\")\ndef get_numbers(list_values):\n    '''\n    Write a function to extract all the numbers in a list of strings.\n    '''\n    for i in range(0,len(list_values)):\n        list_values[i]=re.sub(\"[^0-9]\", \"\", list_values[i])\n        try:\n            list_values[i]=int(list_values[i])\n        except ValueError:\n            pass\n    return list_values\ndef sort_list(list_of_numbers):\n    '''\n    Write a function to sort a list of numbers in ascending order.\n    '''\n    list_of_numbers.sort()\n    return list_of_numbers\ndef largest_number(list_of_numbers):\n    '''\n    Write a function to find the largest number in a list of numbers.\n    '''\n    return max(list_of_numbers)\ndef smallest_number(list_of_numbers):\n    '''\n    Write a function to find the smallest number in a list of numbers.\n    '''\n    return min(list_of_numbers)\ndef mean_of_numbers(list_of_numbers):\n    '''\n    Write a function to calculate the mean of a list of numbers.\n    '''\n    return sum(list_of_numbers)/len(list_of_numbers)\ndef variance_of_numbers(list_of_numbers):\n    '''\n    Write a function to calculate the variance of a list of numbers.\n    '''\n    return sum((x-mean_of_numbers(list_of_numbers))**2 for x in list_of_numbers)\ndef sd_of_numbers(list_of_numbers):\n    '''\n    Write a function to calculate the standard deviation of a list of numbers.\n    '''\n    return variance_of_numbers(list_of_numbers)/(len(list_of_numbers)-1)\ndef median_of_numbers(list_of_numbers):\n    '''\n    Write a function to find the median of a list of numbers.\n    '''\n    return sorted(list_of_numbers)[len(list_of_numbers)//2]\ndef z_score_of_numbers(list_of_numbers):\n    '''\n    Write a function to calculate the z-score of a list of numbers.\n    '''\n    return (list_of_numbers[0]-mean_of_numbers(list_of_numbers))/sd_of_numbers(list_of_numbers)\ndef midpoint_of_numbers(list_of_numbers):\n    '''\n    Write a function to calculate the midpoint of a list of numbers.\n    '''\n    return (max(list_of_numbers)+min(list_of_numbers))/2\ndef percentiles_of_numbers(list_of_numbers):\n    '''\n    Write a function to find the percentiles of a list of numbers.\n    '''\n    return [round(percentile,2) for percentile in (1,25,50,75,95,99,99.9)]\ndef main():\n    text = '''The numbers are,\n    25, 27, 27, 30,\n    30, 34, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n    36, 36, 36, 36,\n",
        "num_ids": 1216
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    p = re.compile('\"(.*?)\"')\n    return p.findall(text)\n",
        "num_ids": 26
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count+=1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    res = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]==arr[j]:\n                res+=1\n    return res\n    \ndef max_min(arr, n):\n    '''\n    Write a python function which takes a list of integers and returns the maximum and minimum element of that list.\n    '''\n    res_min = arr[0]\n    res_max = arr[0]\n    for i in range(n):\n        if arr[i] > res_max:\n            res_max = arr[i]\n        if arr[i] < res_min:\n            res_min = arr[i]\n    return res_min, res_max\n",
        "num_ids": 85
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n): \n        for j in range(i+1, n): \n            if (arr[i]!= arr[j]): \n                count += 1\n    return count \n",
        "num_ids": 57
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    from itertools import combinations\n    from collections import Counter\n    count = 0\n    counter = Counter(arr)\n    for i in range(0,len(arr)):\n        lst = list(combinations(arr,2))\n        for j in lst:\n            if j[0]!= j[1] and counter[j[0]] == counter[j[1]]:\n                count = count + 1\n    return count\n",
        "num_ids": 104
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    dict = {}\n    for i in range(n):\n        if (arr[i] not in dict):\n            dict[arr[i]] = 1\n        else:\n            dict[arr[i]] += 1\n    for i in range(n):\n        for j in range(i + 1,n):\n            if (arr[i] == arr[j]):\n                print(arr[i],arr[j])\n                return False\n    return True\n",
        "num_ids": 108
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count+=1\n    return count\n    \ndef get_Pairs(arr,n):\n    '''\n    Write a python function which takes a list of integers and returns the count of possible unordered pairs where both elements are equal.\n    '''\n    count = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count+=1\n    return count\n",
        "num_ids": 54
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n",
        "num_ids": 52
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    # arr = [1,5,3,9,7]\n    # n = len(arr)\n    arr.sort()\n    for i in range(n):\n        for j in range(i+1,n):\n            if(arr[i]==arr[j]):\n                count+=1\n                \n    return count\nprint(count_Pairs([1,5,3,9,7],5))\n",
        "num_ids": 105
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    if len(arr) > 1:\n        for i in range(len(arr)):\n            for j in range(i+1,len(arr)):\n                if arr[i]!= arr[j]:\n                    count += 1\n    return count\n",
        "num_ids": 67
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if arr[i] == arr[j]: \n                count += 1\n",
        "num_ids": 49
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    lst = []\n    for i in range(len(word)):\n        lst.append(word[i])\n    return lst\n    \n",
        "num_ids": 38
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split(\" \")\n    \n    ",
        "num_ids": 14
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "num_ids": 9
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n    \ndef join(arr): \n    '''\n    Write a python function to join characters of an array.\n    '''\n    return ''.join(arr)\n",
        "num_ids": 11
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    s = ''\n    for i in word:\n        s = s + i\n    return s\n",
        "num_ids": 25
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "num_ids": 9
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "num_ids": 9
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n    ",
        "num_ids": 10
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n",
        "num_ids": 9
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n    \ndef remove_duplicate_words(words):\n    '''\n    Write a python function to remove duplicates words from the input.\n    '''\n    return set(words)\n    \ndef reverse(s):\n    '''\n    Write a python function to reverse the input string.\n    '''\n    return s[::-1]\n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check if the input string is a palindrome.\n    '''\n    return s == reverse(s)\n    \ndef length_of_longest_substring(str):\n    '''\n    Write a python function to find length of the longest substring in a given string.\n    '''\n    longest = 0\n    for i in range(len(str)-1):\n        j = i + 1\n        while j < len(str):\n            if str[i]!= str[j]:\n                break\n            else:\n                longest = max(longest, j-i)\n            j += 1\n    return longest\n    \ndef is_primitive_root(g, p):\n    '''\n    Write a python function to find primitive root of a given integer.\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        elif num == 2:\n            return True\n        elif num > 2 and num % 2 == 0:\n            return False\n        else:\n            for i in range(3, int(num ** 0.5 + 1), 2):\n                if num % i == 0:\n                    return False\n            return True\n    \n    if is_prime(p) and (g**p - 1) % p == 0:\n        return True\n    else:\n        return False\n    \ndef is_prime(n):\n    '''\n    Write a python function to check if the given integer is prime or not.\n    '''\n    if n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n    \ndef find_unique_char(str):\n    '''\n    Write a python function to find unique characters in a given string.\n    '''\n    return set(str)\n    \ndef longest_consecutive_sequence(str):\n    '''\n    Write a python function to find longest consecutive sequence in a given string.\n    '''\n    if len(str) < 2:\n        return 0\n    res = 1\n    cur = str[0]\n    for i in range(1, len(str)):\n        if str[i] == cur:\n            res += 1\n        else:\n            cur = str[i]\n            res = max(res, i - i - 1)\n    return max(res, len(str) - 1)\n    \ndef frequency_sort(arr):\n    '''\n    Write a python function to sort an array of numbers in such a way that all adjacent \n    numbers with same frequency are arranged from low to high.\n    '''\n    dic = {}\n    for i in range(len(arr)):\n        if arr[i] not in dic:\n            dic[arr[i]] = 0\n        dic[arr[i]] += 1\n    \n    arr.sort()\n    nums = sorted(dic.items(), key=lambda x: x[1])\n    for i in range(len(arr)):\n        arr[i] = nums[i][0]\n    return arr\n    \ndef main():\n    #n = int(input())\n    #s = list(input())\n    s = \"abab\"\n    n = len(s)\n    d = {}\n    \n    for i in range(n):\n        if s[i] not in d:\n            d[s[i]] = 0\n        d[s[i]] += 1\n    \n    d = sorted(d.items(), key=lambda x: x[1])\n    for i in range(len(d)):\n        d[i] = d[i][0]\n    for i in range(n):\n        s = s[:i] + d[i] + s[i + 1:]\n    print(s)\n    \nif __name__ == \"__main__\":\n    main()",
        "num_ids": 298
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n = n // 10\n    return total\n",
        "num_ids": 32
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # list comprehension to create a list of all the digits of n\n    digits = [int(i) for i in str(n)]\n    # use sum to add all the digits to get the sum of all digits\n    return sum(digits)\n",
        "num_ids": 59
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    if n < 0:\n        return -1\n    else:\n        return (n % 10) + sum_digits(n // 10)\n",
        "num_ids": 47
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return n\n    return n % 10 + sum_digits(n//10)\n",
        "num_ids": 29
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    n1 = n % 10\n    return n1 + sum_digits(n//10)\n",
        "num_ids": 47
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(i) for i in str(n))\n",
        "num_ids": 18
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # your code here\n    sum_digits = 0\n    n = str(n)\n    for i in n:\n        sum_digits += int(i)\n    return sum_digits\n",
        "num_ids": 49
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(d) for d in str(n)])\n    \nprint(sum_digits(25))\nprint(sum_digits(99))\n",
        "num_ids": 41
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while(n!= 0):\n        s += (n % 10)\n        n = n // 10\n    return s\n",
        "num_ids": 36
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    result = 0\n    while n:\n        result += n % 10\n        n //= 10\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    if len(list1)<=1:\n        return 1\n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            return 0\n    return 1\n    \nprint(issort_list([1,2,3,4,5]))\nprint(issort_list([1,2,3,4,5,6,7,8,9,10]))\n",
        "num_ids": 108
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(0, len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1)==1:\n        return True\n    elif list1[0]<=list1[1]:\n        return issort_list(list1[1:])\n    else:\n        return False\n",
        "num_ids": 55
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0:\n        return True\n    elif len(list1) == 1:\n        return True\n    else:\n        for i in range(len(list1)-1):\n            if list1[i] <= list1[i+1]:\n                continue\n            else:\n                return False\n    return True\n",
        "num_ids": 82
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\n",
        "num_ids": 13
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            return False\n    return True\nprint(issort_list([10,2,4,6,1]))\nprint(issort_list([1,2,4,6,10]))\nprint(issort_list([1,2,3,4,5]))\nprint(issort_list([10,1,1,2,2,3,3,4,4,5]))\nprint(issort_list([5,4,3,2,1]))\nprint(issort_list([1,1,1,1]))\nprint(issort_list([2,1,1,1,1]))\nprint(issort_list([2,2,1,1,1]))\nprint(issort_list([2,1,2,1,1]))\nprint(issort_list([2,1,1,2,1]))\nprint(issort_list([2,1,1,1,2]))\nprint(issort_list([]))\nprint(issort_list([4,1,1,1]))\nprint(issort_list([4,1,2,1]))\nprint(issort_list([4,1,1,2]))\nprint(issort_list([4,2,1,1]))\nprint(issort_list([4,2,2,1]))\nprint(issort_list([4,2,1,2]))\nprint(issort_list([4,2,1,2,1]))\nprint(issort_list([4,1,1,1,1]))\nprint(issort_list([4,2,1,1,1]))\nprint(issort_list([4,1,1,2,1]))\nprint(issort_list([4,1,1,2,2]))\nprint(issort_list([4,1,1,2,2,1]))\nprint(issort_list([4,1,2,1,1]))\nprint(issort_list([4,1,1,2,2,1]))\nprint(issort_list([4,1,2,1,2]))\nprint(issort_list([4,1,1,2,2,2]))\nprint(issort_list([4,1,2,1,2,2]))\nprint(issort_list([4,1,2,2,1,1]))\nprint(issort_list([4,1,2,1,2,2,1]))\nprint(issort_list([4,2,1,1,1]))\nprint(issort_list([4,2,1,1,1,1]))\nprint(issort_list([4,2,1,1,1,1,1]))\nprint(issort_list([4,2,1,1,1,1,1,1]))\nprint(issort_list([4,2,1,1,1,1,1,1,1]))\nprint(issort_list([4,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1",
        "num_ids": 2015
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    \n    if n <= 1:\n        return True\n",
        "num_ids": 24
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if(list1[i+1]<list1[i]):\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1:\n        for i in range(len(list1)):\n            for j in range(len(list1) - i - 1):\n                if list1[j] > list1[j + 1]:\n                    temp = list1[j]\n                    list1[j] = list1[j + 1]\n                    list1[j + 1] = temp\n    return True\n",
        "num_ids": 93
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length\n",
        "num_ids": 11
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [[]] * length\n",
        "num_ids": 9
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst\n",
        "num_ids": 30
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    # return [dict() for x in range(length)]\n    return [{} for x in range(length)]\n",
        "num_ids": 29
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst\n",
        "num_ids": 30
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n",
        "num_ids": 35
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    if len(list1) == 0:\n        return sorted_list\n    if len(list1) == 1:\n        return list1\n    elif len(list1) == 2:\n        if list1[0] <= list1[1]:\n            return list1\n        else:\n            return list1[::-1]\n    else:\n        list1_1 = sort_sublists(list1[0])\n        list1_2 = sort_sublists(list1[1])\n        if list1_1 < list1_2:\n            sorted_list = list1_1\n        else:\n            sorted_list = list1_2\n    return sorted_list\n",
        "num_ids": 171
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # if len(list1) == 1:\n    #     return list1\n    # else:\n    #     for i in range(0, len(list1) - 1):\n    #         if list1[i] > list1[i + 1]:\n    #             list1[i], list1[i + 1] = list1[i + 1], list1[i]\n    #     return sort_sublists(list1[:-1]) + list1[-1:]\n",
        "num_ids": 115
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=lambda x: x[0])\n",
        "num_ids": 19
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Empty list\n    if not list1:\n        return []\n    \n    # Base Case\n    if len(list1) == 1:\n        return list1\n    \n    # Recursive Case\n    sorted_sublists = []\n    for i in range(len(list1)):\n        if isinstance(list1[i],list):\n            sorted_sublists.append(sort_sublists(list1[i]))\n        else:\n            sorted_sublists.append(list1[i])\n    \n    # Sort the sublists\n    sorted_sublists.sort()\n    \n    return sorted_sublists\n",
        "num_ids": 152
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1.sort()\n    return list1\n",
        "num_ids": 14
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # write your code here\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n",
        "num_ids": 42
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Write your code here\n    list1.sort()\n    # list1.sort(key=len)\n",
        "num_ids": 28
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n",
        "num_ids": 35
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n",
        "num_ids": 29
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    '''\n    Write a Python program to remove duplicates from a list of lists.\n    '''\n    '''\n    Write a Python program to get the third and sixth character of each of the strings in the following list.\n    '''\n    '''\n    Write a Python program to get the key, value and item in a dictionary.\n    '''\n    '''\n    Write a Python program to get the character at the given index in a string.\n    '''\n    '''\n    Write a Python program to get the length of a list.\n    '''\n    '''\n    Write a Python program to check if the given key already exists in a dictionary.\n    '''\n    '''\n    Write a Python program to generate and print a dictionary that contains a number (between 1 and n) in the form (x, x*x).\n    '''\n    '''\n    Write a Python program to generate and print a dictionary that contains the even numbers in the given list.\n    '''\n    '''\n    Write a Python program to get the largest and smallest number from a given list.\n    '''\n    '''\n    Write a Python program to find the index of an item in a given list.\n    '''\n    '''\n    Write a Python program to remove the items with even index from a list and return the list.\n    '''\n    '''\n    Write a Python program to add a key:value pair to a dictionary.\n    '''\n    '''\n    Write a Python program to find the length of the dictionary.\n    '''\n    '''\n    Write a Python program to remove a key:value pair from a dictionary.\n    '''\n    '''\n    Write a Python program to copy a dictionary into another dictionary.\n    '''\n    '''\n    Write a Python program to copy a dictionary with key value pairs into another dictionary.\n    '''\n    '''\n    Write a Python program to get the frequency of the key in a given dictionary.\n    '''\n    '''\n    Write a Python program to create a dictionary from keys and values of given lists.\n    '''\n    '''\n    Write a Python program to find the highest 3 numbers in a list.\n    '''\n    '''\n    Write a Python program to find the second smallest number in a list.\n    '''\n    '''\n    Write a Python program to find the second largest number in a list.\n    '''\n    '''\n    Write a Python program to add a key:value pair to a dictionary.\n    '''\n    '''\n    Write a Python program to find the frequency of words in a string.\n    '''\n    '''\n    Write a Python program to find the percentage of vowels in a given string.\n    '''\n    '''\n    Write a Python program to create a dictionary from keys and values of given lists.\n    '''\n    '''\n    Write a Python program to add a key:value pair to a dictionary.\n    '''\n    '''\n    Write a Python program to find the sum of even and odd numbers in a given list.\n    '''\n    '''\n    Write a Python program to concatenate a given list with another list.\n    '''\n    '''\n    Write a Python program to return a new dictionary with the count (number of occurrences) of each element in a given list.\n    '''\n    '''\n    Write a Python program to remove an item from a dictionary.\n    '''\n    '''\n    Write a Python program to combine two dictionaries.\n    '''\n    '''\n    Write a Python program to sort a dictionary by value.\n    '''\n    '''\n    Write a Python program to extract a sub-dictionary from a given dictionary.\n    '''\n    '''\n    Write a Python program to sort a dictionary by value.\n    '''\n    '''\n    Write a Python program to generate a dictionary from a string.\n    '''\n    '''\n    Write a Python program to count the number of words in a string.\n    '''\n    '''\n    Write a Python program to remove the spaces in a string.\n    '''\n    '''\n    Write a Python program to generate a dictionary from two given lists without losing duplicate values.\n    '''\n    '''\n    Write a Python program to merge two dictionaries into one.\n    '''\n    '''\n    Write a Python program to print a dictionary in table form.\n    '''\n    '''\n    Write a Python program to sort a dictionary by value.\n    '''\n    '''\n    Write a Python program to print a dictionary in table form.\n    '''\n    '''\n    Write a Python program to count the occurrences of each word in a given string.\n    '''\n    '''\n    Write a Python program to find the index of an item in a given list.\n    '''\n    '''\n    Write a Python program to print the length of a dictionary.\n    '''\n    '''\n    Write a Python program to print all the keys in a dictionary.\n    '''\n    '''\n    Write a Python program to print the occurrence of a given word in a string.\n    '''\n    '''\n    Write a Python program to find the index of an item in a given list.\n    '''\n    '''\n    Write a Python program to remove an item from a dictionary.\n    '''\n    '''\n    Write a Python program to find the frequency of each word in a given sentence.\n    '''\n    '''\n    Write a Python program to find the second largest number in a list.\n    '''\n    '''\n    Write a Python program to find the second smallest number in a list.\n    '''\n    '''\n    Write a Python program to find the length of a dictionary.\n    '''\n    '''\n    Write a Python program to sort a list alphabetically.\n    '''\n    '''\n    Write a Python program to count the number of values in a dictionary.\n    '''\n    '''\n    Write a Python program to print a dictionary line by line.\n    '''\n    '''\n    Write a Python program to find the length of a dictionary.\n    '''\n    '''\n    Write a Python program to find the second largest number in a list.\n    '''\n    '''\n    Write a Python program to count the number of even and odd numbers in a given list.\n    '''\n    '''\n    Write a Python program to get the frequency of a key in a given dictionary.\n    '''\n    '''\n    Write a Python program to add a key:value pair to a dictionary.\n    '''\n    '''\n    Write a Python program to find the number of occurrences of a given word in a string.\n    '''\n    '''\n    Write a Python program to remove a key:value pair from a dictionary.\n    '''\n    '''\n    Write a Python program to find the length of a dictionary.\n    '''\n    '''\n    Write a Python program to check if a given key already exists in a dictionary.\n    '''\n    '''\n    Write a Python program to check if a given key is present in a dictionary.\n    '''\n    '''\n    Write a Python program to check if a given key exists in a dictionary.\n    '''\n    '''\n    Write a Python program to add a key:value pair to a dictionary.\n    '''\n    '''\n    Write a Python program to remove a key:value pair from a dictionary.\n    '''\n    '''\n    Write a Python program to get the frequency of a key in a dictionary.\n    '''\n    '''\n    Write a Python program to get the value of a key in a dictionary.\n    '''\n    '''\n    Write a Python program to remove a key:value pair from a dictionary.\n    '''\n    '''\n    Write a Python program to find the second largest number in a list.\n    '''\n    '''\n    Write a Python program to find the second smallest number in a list.\n    '''\n    '''\n    Write a Python program to sort a dictionary.\n    '''\n    '''\n    Write a Python program to sort a dictionary.\n    '''\n    '''\n    Write a Python program to add a key:value pair to a dictionary.\n    '''\n    '''\n    Write a Python program to count the occurrences of a given word in a string.\n    '''\n    '''\n    Write a Python program to get the frequency of a key in a dictionary.\n    '''\n    '''\n    Write a Python program to print the key value pair with maximum length in a dictionary.\n    '''\n    '''\n    Write a Python program to return the frequency of a key in a dictionary.\n    '''\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = list(nums)\n    i = 0\n    while i < len(nums)-1:\n        if nums[i] == nums[i+1]:\n            del nums[i+1]\n        i += 1\n    nums = set(nums)\n    return list(nums)\n",
        "num_ids": 78
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "num_ids": 47
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = set(nums)\n    return list(nums)\n",
        "num_ids": 20
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    for num in nums:\n        if num in seen:\n            seen.remove(num)\n        else:\n            seen.add(num)\n    return seen\n",
        "num_ids": 47
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # list of lists\n    # list of numbers\n    nums_new = []\n    for nums_i in nums:\n        if nums_i not in nums_new:\n            nums_new.append(nums_i)\n    return nums_new\n",
        "num_ids": 68
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    #n = len(nums)\n    #print(n)\n    #for x in range(0, n):\n        #print(x)\n        #print(nums[x])\n    #arr = [1,2,1,2,3,2,4]\n    #return [x for x in arr if arr.count(x) == 1]\n    return list(dict.fromkeys(nums))\n    # return list(set(nums))\n",
        "num_ids": 112
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_numbers = []\n    for number in nums:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers\n",
        "num_ids": 47
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_numbers = []\n    for element in nums:\n        if element not in unique_numbers:\n            unique_numbers.append(element)\n    print(unique_numbers)\n",
        "num_ids": 49
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return {i for i in nums}\n",
        "num_ids": 13
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = list(set(list_data))\n    result = 1\n    for i in list_data:\n        result *= i\n    return result\n",
        "num_ids": 40
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    count = 1\n    result = 1\n    for i in range(len(list_data)-1):\n        if(list_data[i]!= list_data[i+1]):\n            count = 1\n        else:\n            count +=1\n            if(count > 1):\n                result = result * (count + 1)\n            else:\n                result = result * (count + 1)\n    return result\n",
        "num_ids": 100
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    lst_data = []\n    for data in list_data:\n        if data not in lst_data:\n            lst_data.append(data)\n    return lst_data\n",
        "num_ids": 48
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    result = 1\n    for x in list_data:\n        result = result * x\n    return result\n",
        "num_ids": 27
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    num=[]\n    n = len(list_data)\n    for i in range(0,n):\n        if list_data[i] not in num:\n            num.append(list_data[i])\n    return 1\n    \n    \n    \n",
        "num_ids": 63
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    output = []\n    for i in range(len(list_data)):\n        if list_data.count(list_data[i]) == 1:\n            output.append(list_data[i])\n    return(sum(output))\n",
        "num_ids": 59
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # No need to return anything\n    \n    product = 1\n    \n    # Iterate over the list of elements\n    for i in list_data:\n        if i not in product:\n            product *= i\n    \n    return product\n    \n    # No need to return anything\n",
        "num_ids": 68
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # step 1. get the length of the list\n    length = len(list_data)\n    # step 2. create a list to hold all the elements\n    unique_list = []\n    # step 3. loop through each element in the list\n    for x in list_data:\n        # step 4. check if element exists in the unique list\n        if x not in unique_list:\n            # step 5. if the element does not exist, add it to the unique list\n            unique_list.append(x)\n    # step 6. calculate the product of the elements\n    # step 7. return the product\n    return unique_list[0] * unique_list[length-1]\n",
        "num_ids": 159
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product_result = 1\n    for i in list_data:\n        product_result = product_result * i\n    return product_result\n",
        "num_ids": 35
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # list_data = [[1, 2], [1, 3, 5], [1, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4, 5],]\n    # unique_list = []\n    # for i in range(len(list_data)):\n    #     if i not in unique_list:\n    #         unique_list.append(i)\n    # for i in unique_list:\n    #     print(i)\n    # product_value = 1\n    # for i in range(len(unique_list)):\n    #     product_value = product_value * list_data[i][0]\n    # print(product_value)\n    # product_value = 1\n    # for i in range(len(unique_list)):\n    #     product_value = product_value * list_data[i][-1]\n    # print(product_value)\n",
        "num_ids": 219
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s=2*pi*r*h\n    return s\n",
        "num_ids": 17
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    surface_area=2*math.pi*r*h\n    print(surface_area)\n    return surface_area\n",
        "num_ids": 35
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    PI = 3.14159\n    return PI*r**2*h + 2*PI*r*(r**2 + h**2)\n",
        "num_ids": 36
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    surfacearea = math.pi * r * h\n    return surfacearea\n",
        "num_ids": 23
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = pi * r * h + 2 * pi * r ** 2\n    return surfacearea\n",
        "num_ids": 25
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return surfacearea\n",
        "num_ids": 31
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2*pi*r*h\n    return surface_area\n",
        "num_ids": 21
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s = 2*pi*r*h\n    return s\n",
        "num_ids": 17
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159\n    area = pi * r ** 2 * h\n    print(area)\n",
        "num_ids": 27
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a=pi*r*r\n    b=2*pi*r*h\n    c=pi*r*h\n    d=2*(pi*r*h)+(pi*r*h)*2\n    total_surface_area=a+b+c+d\n    return total_surface_area\n",
        "num_ids": 75
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not A or not B: \n        return False\n    if len(A) < len(B): \n        return False\n    for i in range(len(A)): \n        if A[i]!= B[i]: \n            return False\n    return True\n",
        "num_ids": 68
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # A=list(map(int,input().split()))\n    # B=list(map(int,input().split()))\n",
        "num_ids": 34
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i = 0\n    j = 0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i = i + 1\n            j = j + 1\n        else:\n            j = j + 1\n    if i == len(A) and j == len(B):\n        return True\n    else:\n        return False\n",
        "num_ids": 93
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B):\n        return False\n    i = 0\n    j = 0\n    while i<len(A) and j<len(B):\n        if A[i] == B[j]:\n            i+=1\n            j+=1\n        else:\n            j+=1\n    if i == len(A):\n        return True\n    else:\n        return False\n",
        "num_ids": 96
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i:] == B[:len(A[i:])]:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    print(\"\\n\")\n",
        "num_ids": 56
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    n=len(A)\n    m=len(B)\n    if m>n:\n        return False\n    for i in range(n):\n        if A[i]==B[0]:\n            flag=True\n            for j in range(m):\n                if A[i+j]!=B[j]:\n                    flag=False\n                    break\n            if flag:\n                return True\n    return False\n",
        "num_ids": 100
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)<len(B):\n        smaller=A\n        bigger=B\n    else:\n        smaller=B\n        bigger=A\n",
        "num_ids": 42
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    \n    for i in range(len(A)):\n        if A[i]!= B[i]:\n            return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n",
        "num_ids": 18
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    flag=False\n    for i in range(0,len(A)):\n        if(A[i] in B):\n            flag=True\n        else:\n            flag=False\n            break\n    return flag\n    \n",
        "num_ids": 55
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n <= 1):\n        return 1\n    else:\n        return (n % 10) * last_Digit_Factorial(n//10)\n    \n",
        "num_ids": 41
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n < 0): \n        return -1\n    else:\n        res = 1\n        while (n!= 0): \n            res = res * 10\n            n = n // 10\n        return res % 10",
        "num_ids": 54
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return n%10*last_Digit_Factorial(n//10)\n",
        "num_ids": 48
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 10:\n        return n\n    n = n%10\n    n = n*(10**(len(str(n))-1))\n    return n\n",
        "num_ids": 43
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    r = 0\n    if (n < 1): \n        return 0\n    else:\n        while (n//10) : \n            r = r * 10 + n%10 \n            n = n//10\n        return r % 10\n",
        "num_ids": 59
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    def fact(n):\n        if n==1:\n            return n\n        else:\n            return (n*fact(n-1))\n    return int(fact(n)%10)\n",
        "num_ids": 48
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        raise ValueError(\"Only positive numbers allowed\")\n    elif n <= 10:\n        return n\n    else:\n        return 1 + last_Digit_Factorial(n//10)\n",
        "num_ids": 53
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<=0:\n        print(\"Wrong Input\")\n    else:\n        factorial = 1\n        while(n>1):\n            factorial *= n\n            n-=1\n        print(factorial%10)\n",
        "num_ids": 58
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 0: \n        return -1\n",
        "num_ids": 15
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while(n > 0):\n        factorial *= n\n        n -= 1\n    return factorial\n",
        "num_ids": 33
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    final_list = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) or j < len(list2) or k < len(list3):\n        if i < len(list1):\n            final_list.append(list1[i])\n            i += 1\n        if j < len(list2):\n            final_list.append(list2[j])\n            j += 1\n        if k < len(list3):\n            final_list.append(list3[k])\n            k += 1\n    return final_list\n",
        "num_ids": 140
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.extend([list1[i]])\n        result.extend([list2[i]])\n        result.extend([list3[i]])\n    return result\n",
        "num_ids": 63
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    res=[]\n    for i in range(len(list1)):\n        res.append(list1[i])\n        res.append(list2[i])\n        res.append(list3[i])\n    return res\n",
        "num_ids": 57
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    for i in range(len(list1)):\n        list3.append(list1[i])\n        list3.append(list2[i])\n        list3.append(list1[i])\n",
        "num_ids": 51
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list4 = []\n    for i in range(len(list1)):\n        list4.append(list1[i])\n        list4.append(list2[i])\n        list4.append(list3[i])\n    return list4\n    \ndef replace_middle(list1, item_to_replace, new_item):\n    '''\n    Write a function that takes a list and a value to search for,\n    and returns a new list with the value in index 2 replaced\n    with the new value.\n    The length of the list will always be at least 3.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if list1[i] == item_to_replace:\n            list2.append(new_item)\n        else:\n            list2.append(list1[i])\n    return list2\n    \ndef last_first_middle(list1):\n    '''\n    Write a function that takes a list and does the same thing as the \n    first_last_middle function, but with only one difference.\n    That is, if the input list is:\n    ['apple', 'banana', 'carrot']\n    Then the function should return:\n    ['carrot', 'banana', 'apple']\n    '''\n    list3 = []\n    for i in range(len(list1)):\n        if i == 0:\n            list3.append(list1[i])\n        elif i == len(list1) - 1:\n            list3.append(list1[i])\n        else:\n            list3.append(list1[i])\n    return list3\n",
        "num_ids": 87
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3\n",
        "num_ids": 13
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    final_list = []\n    for i in range(len(list1)):\n        final_list.extend([list1[i],list2[i],list3[i]])\n    return final_list\n",
        "num_ids": 53
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    return result\n",
        "num_ids": 100
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1,list2,list3]\n",
        "num_ids": 15
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [item for l in (list1,list2,list3) for item in l]\n",
        "num_ids": 25
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if type(test_tup1) is not tuple or type(test_tup2) is not tuple:\n        print('Invalid type')\n        return None\n    if len(test_tup1)!= len(test_tup2):\n        print('Invalid Tuple')\n        return None\n    # for ele in test_tup1:\n    #     if ele not in test_tup2:\n    #         return ele\n    # for ele in test_tup2:\n    #     if ele not in test_tup1:\n    #         return ele\n    d = dict()\n    for ele in test_tup1:\n        if ele not in d:\n            d[ele] = 1\n        else:\n            d[ele] += 1\n    for ele in test_tup2:\n        if ele in d:\n            d[ele] -= 1\n        else:\n            d[ele] = 1\n    result = []\n    for key, value in d.items():\n        if value!= 0:\n            result.append(key)\n    return result\n",
        "num_ids": 255
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"The tuples are not the same size.\"\n    \n    # Assign variables to test_tup1 and test_tup2.\n    tup1 = test_tup1\n    tup2 = test_tup2\n    \n    # Create a list to store the elements in tup1 and tup2.\n    tup1_list = []\n    tup2_list = []\n    \n    # Loop through the list and add all the elements to the new list.\n    for item in tup1:\n        tup1_list.append(item)\n        \n    for item in tup2:\n        tup2_list.append(item)\n        \n    # Create a set of tup1_list and tup2_list so that you can remove duplicates.\n    set_tup1_list = set(tup1_list)\n    set_tup2_list = set(tup2_list)\n    \n    # Create a new list to store the elements that are different between the sets.\n    diff_list = []\n    \n    # Loop through the list and append the elements that are different.\n    for item in tup1_list:\n        if item in tup2_list and item not in set_tup1_list:\n            diff_list.append(item)\n            \n    for item in tup2_list:\n        if item in tup1_list and item not in set_tup2_list:\n            diff_list.append(item)\n            \n    return diff_list\n",
        "num_ids": 384
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # the function takes in two tuples and returns a dictionary with the two elements that are different in the given tuple\n    # for example, if test_tup1 = (1,2,3,4) and test_tup2 = (1,2,5,4) then the function should return {1:2,2:5}\n",
        "num_ids": 79
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return [ele1 for ele1 in test_tup1 if ele1 not in test_tup2] + \\\n    [ele2 for ele2 in test_tup2 if ele2 not in test_tup1]\n",
        "num_ids": 55
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(i)\n    return dissimilar\n",
        "num_ids": 61
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_tup = []\n    for elem in range(len(test_tup1)):\n        if test_tup1[elem]!= test_tup2[elem]:\n            dissimilar_tup.append(test_tup1[elem])\n    return dissimilar_tup\n",
        "num_ids": 80
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1, test_tup2 = tuple(test_tup1), tuple(test_tup2)\n    res = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            res.append(i)\n    for i in test_tup2:\n        if i not in test_tup1:\n            res.append(i)\n    return res\n",
        "num_ids": 103
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    ans = []\n    for item in test_tup1:\n        if item not in test_tup2:\n            ans.append(item)\n    return ans\n",
        "num_ids": 42
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    l1 = test_tup1[0]\n    l2 = test_tup2[0]\n    l3 = test_tup1[1]\n    l4 = test_tup2[1]\n    l5 = test_tup1[2]\n    l6 = test_tup2[2]\n    l7 = test_tup1[3]\n    l8 = test_tup2[3]\n    l9 = test_tup1[4]\n    l10 = test_tup2[4]\n    l11 = test_tup1[5]\n    l12 = test_tup2[5]\n    l13 = test_tup1[6]\n    l14 = test_tup2[6]\n    l15 = test_tup1[7]\n    l16 = test_tup2[7]\n    l17 = test_tup1[8]\n    l18 = test_tup2[8]\n    l19 = test_tup1[9]\n    l20 = test_tup2[9]\n    l21 = test_tup1[10]\n    l22 = test_tup2[10]\n    l23 = test_tup1[11]\n    l24 = test_tup2[11]\n    l25 = test_tup1[12]\n    l26 = test_tup2[12]\n    l27 = test_tup1[13]\n    l28 = test_tup2[13]\n    l29 = test_tup1[14]\n    l30 = test_tup2[14]\n    l31 = test_tup1[15]\n    l32 = test_tup2[15]\n    l33 = test_tup1[16]\n    l34 = test_tup2[16]\n    l35 = test_tup1[17]\n    l36 = test_tup2[17]\n    l37 = test_tup1[18]\n    l38 = test_tup2[18]\n    l39 = test_tup1[19]\n    l40 = test_tup2[19]\n    l41 = test_tup1[20]\n    l42 = test_tup2[20]\n    l43 = test_tup1[21]\n    l44 = test_tup2[21]\n    l45 = test_tup1[22]\n    l46 = test_tup2[22]\n    l47 = test_tup1[23]\n    l48 = test_tup2[23]\n    l49 = test_tup1[24]\n    l50 = test_tup2[24]\n    l51 = test_tup1[25]\n    l52 = test_tup2[25]\n    l53 = test_tup1[26]\n    l54 = test_tup2[26]\n    l55 = test_tup1[27]\n    l56 = test_tup2[27]\n    l57 = test_tup1[28]\n    l58 = test_tup2[28]\n    l59 = test_tup1[29]\n    l60 = test_tup2[29]\n    l61 = test_tup1[30]\n    l62 = test_tup2[30]\n    l63 = test_tup1[31]\n    l64 = test_tup2[31]\n    l65 = test_tup1[32]\n    l66 = test_tup2[32]\n    l67 = test_tup1[33]\n    l68 = test_tup2[33]\n    l69 = test_tup1[34]\n    l70 = test_tup2[34]\n    l71 = test_tup1[35]\n    l72 = test_tup2[35]\n    l73 = test_tup1[36]\n    l74 = test_tup2[36]\n    l75 = test_tup1[37]\n    l76 = test_tup2[37]\n    l77 = test_tup1[38]\n    l78 = test_tup2[38]\n    l79 = test_tup1[39]\n    l80 = test_tup2[39]\n    l81 = test_tup1[40]\n    l82 = test_tup2[40]\n    l83 = test_tup1[41]\n    l84 = test_tup2[41]\n    l85 = test_tup1[42]\n    l86 = test_tup2[42]\n    l87 = test_tup1[43]\n    l88 = test_tup2[43]\n    l89 = test_tup1[44]\n    l90 = test_tup2[44]\n    l91 = test_tup1[45]\n    l92 = test_tup2[45]\n    l93 = test_tup1[46]\n    l94 = test_tup2[46]\n    l95 = test_tup1[47]\n    l96 = test_tup2[47]\n    l97 = test_tup1[48]\n    l98 = test_tup2[48]\n    l99 = test_tup1[49]\n    l100 = test_tup2[49]\n    l101 = test_tup1[50]\n    l102 = test_tup2[50]\n    l103 = test_tup1[51]\n    l104 = test_tup2[51]\n    l105 = test_tup1[52]\n    l106 = test_tup2[52]\n    l107 = test_tup1[53]\n    l108 = test_tup2[53]\n    l109 = test_tup1[54]\n    l110 = test_tup2[54]\n    l111 = test_tup1[55]\n    l112 = test_tup2[55]\n    l113 = test_tup1[56]\n    l114 = test_tup2[56]\n    l115 = test_tup1[57]\n    l116 = test_tup2[57]\n    l117 = test_tup1[58]\n    l118 = test_tup2[58]\n    l119 = test_tup1[59]\n    l120 = test_tup2[59]\n    l121 = test_tup1[60]\n    l122 = test_tup2[60]\n    l123 = test_tup1[61]\n    l124 = test_tup2[61]\n    l125 = test_tup1[62]\n    l126 = test_tup2[62]\n    l127 = test_tup1[63]\n    l128 = test_tup2[63]\n    l129 = test_tup1[64]\n    l130 = test_tup2[64]\n    l131 = test_tup1[65]\n    l132 = test_tup2[65]\n    l133 = test_tup1[66]\n    l134 = test_tup2[66]\n    l135 = test_tup1[67]\n    l136 = test_tup2[67]\n    l137 = test_tup1[68]\n    l138 = test_tup2[68]\n    l139 = test_tup1[69]\n    l140 = test_tup2[69]\n    l141 = test_tup1[70]\n    l142 = test_tup2[70]\n    l143 = test_tup1[71]\n    l144 = test_tup2[71]\n    l145 = test_tup1[72]\n    l146 = test_tup2[72]\n    l147 = test_tup1[73]\n    l148 = test_tup2[73]\n    l149 = test_tup1[74]\n    l150 = test_tup2[74]\n    l151 = test_tup1[75]\n    l152 = test_tup2[75]\n    l153 = test_tup1[76]\n    l154 = test_tup2[76]",
        "num_ids": 2003
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_count = 0\n    for x in range(0, len(test_tup1)):\n        if test_tup1[x]!= test_tup2[x]:\n            dissimilar_count += 1\n    print(\"The number of dissimilar elements is: {}\".format(dissimilar_count))\n",
        "num_ids": 81
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = test_tuple\n    for item in test_tuple:\n        if type(item) == tuple:\n            new_tuple = even_ele(item, even_fnc)\n        if not even_fnc(item):\n            return new_tuple\n    return new_tuple\n",
        "num_ids": 76
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for tuple in test_tuple:\n        for index in range(len(tuple)):\n            if even_fnc(tuple[index]):\n                even_list.append(tuple[index])\n    return tuple(even_list)\n",
        "num_ids": 68
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if not isinstance(test_tuple, tuple): \n        raise TypeError(\"Input should be a tuple.\") \n    new_tuple = []\n    for ele in test_tuple: \n        if isinstance(ele, tuple):\n            new_tuple.extend(even_ele(ele, even_fnc))\n        else:\n            if even_fnc(ele): \n                new_tuple.append(ele) \n    return tuple(new_tuple) \n",
        "num_ids": 118
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    pass\n    #YOUR CODE HERE\n    #return even_fnc(test_tuple)\n",
        "num_ids": 26
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(lambda x: even_fnc(x), test_tuple))\n",
        "num_ids": 24
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for elem in test_tuple:\n        if not even_fnc(elem):\n            return None\n    return test_tuple\n",
        "num_ids": 36
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = tuple(filter(even_fnc, test_tuple))\n    return even_tuple\n",
        "num_ids": 30
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_list = []\n    for i in range(len(test_tuple)):\n        if test_tuple[i] % 2 == 0:\n            new_list.append(test_tuple[i])\n    new_tuple = tuple(new_list)\n    return even_fnc(new_tuple)\n",
        "num_ids": 80
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    ret_tuple = ()\n    for item in test_tuple:\n        if even_fnc(item) == True:\n            ret_tuple = ret_tuple + (item,)\n    return ret_tuple\n",
        "num_ids": 55
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if type(test_tuple)!= tuple:\n        print('Please enter a tuple')\n    elif test_tuple:\n        for i in test_tuple:\n            if type(i) == tuple:\n                even_ele(i, even_fnc)\n            else:\n                if even_fnc(i):\n                    continue\n                else:\n                    print('Removing {}'.format(i))\n                    test_tuple = test_tuple[:test_tuple.index(i)] + test_tuple[test_tuple.index(i)+1:]\n        print('Uneven tuple is {}'.format(test_tuple))\n",
        "num_ids": 156
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 1/2*b*(b+s)\n    return area\n",
        "num_ids": 21
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4 * s * b\n",
        "num_ids": 10
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Complete this function\n    area = (b*s)+(2*s*s)+(b*b)\n    print(\"The surface area of a square pyramid with a given base edge and height is \",area)\n",
        "num_ids": 51
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (2*b*s)+(2*(s**2))\n",
        "num_ids": 20
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0\n    for i in range(b):\n        area += b * (i + 1)\n    area = (area - b) * 2\n    return area + s * s * s\n",
        "num_ids": 48
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    print(f\"Surface Area of a square pyramid is : {s * (s + b) * 0.5}\") \n    return s * (s + b) * 0.5 \n",
        "num_ids": 47
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #edge1 = b + b\n    #edge2 = (b*2 + s) * 2 \n    #total_Area = (edge1 + edge2) * 2 \n    #return total_Area\n",
        "num_ids": 51
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    print(\"SURFACE AREA OF SQUARE PYRAMID IS %f \" %((b*s*2)+(b*(s-2))+2*s))\n",
        "num_ids": 43
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area=0\n    area=s*(s+b)*0.5\n    print(area)\n    return area\n",
        "num_ids": 31
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b**2)*s\n",
        "num_ids": 11
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n        \n        \n        \ndef my_set(set1):\n    '''\n    Write a function to check if a set is empty\n    '''\n    if len(set1) == 0:\n        return True\n    else:\n        return False\n        \n        \n        \ndef my_tuple(tuple1):\n    '''\n    Write a function to check if a tuple is empty\n    '''\n    if len(tuple1) == 0:\n        return True\n    else:\n        return False\n        \n        \ndef my_list(list1):\n    '''\n    Write a function to check if a list is empty\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n        \n        \ndef my_string(str1):\n    '''\n    Write a function to check if a string is empty\n    '''\n    if len(str1) == 0:\n        return True\n    else:\n        return False\n        \n        \ndef my_file(file1):\n    '''\n    Write a function to check if a file is empty\n    '''\n    if os.stat(file1).st_size == 0:\n        return True\n    else:\n        return False\n        \n        \ndef my_zip(zip1):\n    '''\n    Write a function to check if a zipfile is empty\n    '''\n    if len(zip1) == 0:\n        return True\n    else:\n        return False\n        \n        \ndef my_tuple(tuple1):\n    '''\n    Write a function to check if a tuple is empty\n    '''\n    if len(tuple1) == 0:\n        return True\n    else:\n        return False\n        \n        \ndef my_set(set1):\n    '''\n    Write a function to check if a set is empty\n    '''\n    if len(set1) == 0:\n        return True\n    else:\n        return False\n        \n        \ndef my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n        \n        \n        \ndef my_list(list1):\n    '''\n    Write a function to check if a list is empty\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n        \n        \ndef my_file(file1):\n    '''\n    Write a function to check if a file is empty\n    '''\n    if os.stat(file1).st_size == 0:\n        return True\n    else:\n        return False\n        \n        \ndef my_zip(zip1):\n    '''\n    Write a function to check if a zipfile is empty\n    '''\n    if len(zip1) == 0:\n        return True\n    else:\n        return False\n        \n        \ndef my_tuple(tuple1):\n    '''\n    Write a function to check if a tuple is empty\n    '''\n    if len(tuple1) == 0:\n        return True\n    else:\n        return False\n        \n        \ndef my_set(set1):\n    '''\n    Write a function to check if a set is empty\n    '''\n    if len(set1) == 0:\n        return True\n    else:\n        return False\n        \n        \ndef my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n        \n        \n        \ndef my_list(list1):\n    '''\n    Write a function to check if a list is empty\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n        \n        \ndef my_file(file1):\n    '''\n    Write a function to check if a file is empty\n    '''\n    if os.stat(file1).st_size == 0:\n        return True\n    else:\n        return False\n        \n        \ndef my_zip(zip1):\n    '''\n    Write a function to check if a zipfile is empty\n    '''\n    if len(zip1) == 0:\n        return True\n    else:\n        return False\n        \n        \ndef my_tuple(tuple1):\n    '''\n    Write a function to check if a tuple is empty\n    '''\n    if len(tuple1) == 0:\n        return True\n    else:\n        return False\n        \n        \ndef my_set(set1):\n    '''\n    Write a function to check if a set is empty\n    '''\n    if len(set1) == 0:\n        return True\n    else:\n        return False\n        \n        \ndef my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n        \n        \ndef my_list(list1):\n    '''\n    Write a function to check if a list is empty\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n        \n        \ndef my_file(file1):\n    '''\n    Write a function to check if a file is empty\n    '''\n    if os.stat(file1).st_size == 0:\n        return True\n    else:\n        return False\n        \n        \ndef my_zip(zip1):\n    '''\n    Write a function to check if a zipfile is empty\n    '''\n    if len(zip1) == 0:\n        return True\n    else:\n        return False\n        \n        \ndef my_tuple(tuple1):\n    '''\n    Write a function to check if a tuple is empty\n    '''\n    if len(tuple1) == 0:\n        return True\n    else:\n        return False\n        \n        \ndef my_set(set1):\n    '''\n    Write a function to check if a set is empty\n    '''\n    if len(set1) == 0:\n        return True\n    else:\n        return False\n        \n        \ndef my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n        \n        \n        \ndef my_list(list1):\n    '''\n    Write a function to check if a list is empty\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n        \n        \ndef my_file(file1):\n    '''\n    Write a function to check if a file is empty\n    '''\n    if os.stat(file1).st_size == 0:\n        return True\n    else:\n        return False\n        \n        \ndef my_zip(zip1):\n    '''\n    Write a function to check if a zipfile is empty\n    '''\n    if len(zip1) == 0:\n        return True\n    else:\n        return False\n        \n        \ndef my_tuple(tuple1):\n    '''\n    Write a function to check if a tuple is empty\n    '''\n    if len(tuple1) == 0:\n        return True\n    else:\n        return False\n        \n        \ndef my_set(set1):\n    '''\n    Write a function to check if a set is empty\n    '''\n    if len(set1) == 0:\n        return True\n    else:\n        return False\n        \n        \ndef my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n        \n        \n        \ndef my_list(list1):\n    '''\n    Write a function to check if a list is empty\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return False\n        \n        \ndef my_file(file1):\n    '''\n    Write a function to check if a file is empty\n    ''",
        "num_ids": 16
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"True\")\n    else:\n        print(\"False\")\nmy_dict({})\n",
        "num_ids": 32
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(True)\n    else:\n        print(False)\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n",
        "num_ids": 21
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"True\")\n    else:\n        print(\"False\")\n",
        "num_ids": 26
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n",
        "num_ids": 22
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n",
        "num_ids": 21
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"True\")\n    else:\n        print(\"False\")\n        \nmy_dict({})\n",
        "num_ids": 34
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    dict1 = {}\n",
        "num_ids": 8
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    else:\n        return ((catalan_number(num-1)) * num) / (num-1)\n",
        "num_ids": 39
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    return catalan_number_recursion(num)\n    \ndef catalan_number_recursion(num):\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return catalan_number_recursion(num - 1) * num\n",
        "num_ids": 65
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catal_num = 1\n    for i in range(1, num+1):\n        catal_num *= i\n        catal_num /= i+1\n    return catal_num\n",
        "num_ids": 50
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def count(num):\n        return num*(num-1)//2\n    return catalan_number_helper(num,1,count)\n",
        "num_ids": 38
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def catalan_number_aux(n, num):\n        '''\n        Calculates catalan number\n        '''\n        if n == 0:\n            return 1\n        elif n == 1:\n            return num\n        elif n == 2:\n            return num*(num-1)*(2*num-1)/(num+1)\n        else:\n            return num*catalan_number_aux(n-1, num-1) + catalan_number_aux(n-2, num)\n    return catalan_number_aux(num-1, num)\n",
        "num_ids": 109
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    if num == 0:\n        return 0\n    sum = 0\n    for i in range(num):\n        sum += catalan_number(i) * catalan_number(num-1-i)\n    return sum\n",
        "num_ids": 65
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 2:\n        return 1\n    num -= 2\n    result = 0\n    for i in range(1, num):\n        result = result * (2 * i - 1)\n    return result\n",
        "num_ids": 51
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = 0\n    if num == 0:\n        return 1\n    for i in range(num):\n        n = n * (2*i + 1) / (i + 1)\n    return int(n)\n",
        "num_ids": 53
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    else:\n        return num * catalan_number(num-1)\n",
        "num_ids": 31
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    return math.factorial(2*num)//(math.factorial(num)*math.factorial(num+1))\n",
        "num_ids": 32
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # def find_adverbs(text):\n    #     for i in range(len(text)):\n    #         if text[i] == 'ly':\n    #             return i\n",
        "num_ids": 46
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    ad_list = []\n    for x in range(0, len(text)-1):\n        if text[x] == 'e':\n            for y in range(x+1, len(text)):\n                if text[y] =='s':\n                    if text[y+1] == 't':\n                        ad_list.append((x, y))\n    return ad_list\n    \n",
        "num_ids": 95
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    if not isinstance(text, str):\n        raise TypeError('First argument must be a string')\n    # Create regex pattern to search for adverbs ending with ly\n    ad_pattern = re.compile('(?:ly)$')\n    # Find all adverb endings\n    # If the word is found, print the word and the positions\n    for match in re.finditer(ad_pattern, text):\n        if match.group(1):\n            print(match.group())\n            print('First word is: ', match.group(1))\n            print('First word position: ', match.start(1))\n            print('Last word position: ', match.end(1))\n",
        "num_ids": 158
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # your code here\n    result = []\n    index = []\n    word_list = text.split()\n    for i in range(len(word_list)):\n        if word_list[i].endswith('ly'):\n            result.append(word_list[i])\n            index.append(i)\n    return result, index\ndef count_words(text):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    # your code here\n    result = re.findall(r\"\\w+\", text)\n    return len(result)\ndef find_conjunctions(text):\n    '''\n    Write a function to find all the conjunctions in a given string.\n    '''\n    # your code here\n    result = re.findall(r\"\\b(?:and|but)\\b\", text)\n    return result\ndef find_nouns(text):\n    '''\n    Write a function to find all the nouns in a given string.\n    '''\n    # your code here\n    result = re.findall(r\"\\b[A-Za-z]+\\b\", text)\n    return result\ndef find_nouns_and_adj(text):\n    '''\n    Write a function to find all the nouns and adjectives in a given string.\n    '''\n    # your code here\n    result = re.findall(r\"\\b[A-Za-z]+[A-Za-z\\s]+\\b\", text)\n    return result\ndef find_noun_possessives(text):\n    '''\n    Write a function to find all the nouns and possessives in a given string.\n    '''\n    # your code here\n    result = re.findall(r\"\\b[A-Za-z\\s]+[A-Za-z]+\\'?s?\\b\", text)\n    return result\ndef find_verbs(text):\n    '''\n    Write a function to find all the verbs in a given string.\n    '''\n    # your code here\n    result = re.findall(r\"\\b[A-Za-z]+\\b\", text)\n    return result\ndef find_adv(text):\n    '''\n    Write a function to find all the adverbs in a given string.\n    '''\n    # your code here\n    result = re.findall(r\"\\b[A-Za-z]+\\b\", text)\n    return result\ndef find_prepositions(text):\n    '''\n    Write a function to find all the prepositions in a given string.\n    '''\n    # your code here\n    result = re.findall(r\"\\b[A-Za-z]+\\b\", text)\n    return result\ndef find_prepositions_in_sentences(text):\n    '''\n    Write a function to find all the prepositions in a given string.\n    '''\n    # your code here\n    result = re.findall(r\"\\b[A-Za-z]+\\b\", text)\n    return result\ndef find_nouns_in_sentences(text):\n    '''\n    Write a function to find all the nouns in a given string.\n    '''\n    # your code here\n    result = re.findall(r\"\\b[A-Za-z]+\\b\", text)\n    return result\ndef find_pronouns(text):\n    '''\n    Write a function to find all the pronouns in a given string.\n    '''\n    # your code here\n    result = re.findall(r\"\\b[A-Za-z]+\\b\", text)\n    return result\ndef find_pronouns_in_sentences(text):\n    '''\n    Write a function to find all the pronouns in a given string.\n    '''\n    # your code here\n    result = re.findall(r\"\\b[A-Za-z]+\\b\", text)\n    return result\ndef find_verbs_in_sentences(text):\n    '''\n    Write a function to find all the verbs in a given string.\n    '''\n    # your code here\n    result = re.findall(r\"\\b[A-Za-z]+\\b\", text)\n    return result\ndef find_verbs_and_nouns(text):\n    '''\n    Write a function to find all the verbs and nouns in a given string.\n    '''\n    # your code here\n    result = re.findall(r\"\\b[A-Za-z]+\\b\", text)\n    return result\ndef find_noun_possessives_in_sentences(text):\n    '''\n    Write a function to find all the nouns and possessives in a given string.\n    '''\n    # your code here\n    result = re.findall(r\"\\b[A-Za-z]+\\b\", text)\n    return result\ndef find_conjunctions_in_sentences(text):\n    '''\n    Write a function to find all the conjunctions in a given string.\n    '''\n    # your code here\n    result = re.findall(r\"\\b[A-Za-z]+\\b\", text)\n    return result\ndef find_prepositions_in_sentences(text):\n    '''\n    Write a function to find all the prepositions in a given string.\n    '''\n    # your code here\n    result = re.findall(r\"\\b[A-Za-z]+\\b\", text)\n    return result\ndef find_comparatives(text):\n    '''\n    Write a function to find all the comparatives in a given string.\n    '''\n    # your code here\n    result = re.findall(r\"\\b[A-Za-z]+\\b\", text)\n    return result\ndef find_wh_words(text):\n    '''\n    Write a function to find all the wh words in a given string.\n    '''\n    # your code here\n    result = re.findall(r\"\\b[A-Za-z]+\\b\", text)\n    return result\ndef find_noun_comparatives(text):\n    '''\n    Write a function to find all the nouns and comparatives in a given string.\n    '''\n    # your code here\n    result = re.findall(r\"\\b[A-Za-z]+\\b\", text)\n    return result\ndef find_adv_comparatives(text):\n    '''\n    Write a function to find all the adverbs and comparatives in a given string.\n    '''\n    # your code here\n    result = re.findall(r\"\\b[A-Za-z]+\\b\", text)\n    return result\ndef find_noun_comparatives_and_adverbs(text):\n    '''\n    Write a function to find all the nouns, comparatives and adverbs in a given string.\n    '''\n    # your code here\n    result = re.findall(r\"\\b[A-Za-z]+\\b\", text)\n    return result\ndef find_verb_conjunctions(text):\n    '''\n    Write a function to find all the verbs and conjunctions in a given string.\n    '''\n    # your code here\n    result = re.findall(r\"\\b[A-Za-z]+\\b\", text)\n    return result\ndef find_pronouns_with_prepositions(text):\n    '''\n    Write a function to find all the pronouns, prepositions and possessives in a given string.\n    '''\n    # your code here\n    result = re.findall(r\"\\b[A-Za-z]+\\b\", text)\n    return result\ndef find_pronoun_comparatives(text):\n    '''\n    Write a function to find all the pronouns, comparatives and adverbs in a given string.\n    '''\n    # your code here\n    result = re.findall(r\"\\b[A-Za-z]+\\b\", text)\n    return result\ndef find_pronoun_comparatives_and_adverbs(text):\n    '''\n    Write a function to find all the pronouns, comparatives and adverbs in a given string.\n    '''\n    # your code here\n    result = r",
        "num_ids": 12
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #text = 'I was at the bar and it had a great wait, I had to call. Just gave it to a poor soul who was waiting for me.'\n    #text = 'My life was so boring, you really are the best person in the world! My best friend was a little guy who just wanted to play with me.'\n    #text = 'The plane had been flying long before the flight, we knew it was a big deal.'\n    #text = 'The flight was just going to be the biggest of them all.'\n    #text = 'Last time I was at the bar, I had a great wait, I had to call. Just gave it to a poor soul who was waiting for me.'\n    #text = 'I was at the bar and it had a great wait, I had to call. Just gave it to a poor soul who was waiting for me.'\n    #text = 'My life was so boring, you really are the best person in the world! My best friend was a little guy who just wanted to play with me.'\n    #text = 'The plane had been flying long before the flight, we knew it was a big deal.'\n    #text = 'Last time I was at the bar, I had a great wait, I had to call. Just gave it to a poor soul who was waiting for me.'\n    #text = 'I was at the bar and it had a great wait, I had to call. Just gave it to a poor soul who was waiting for me.'\n    #text = 'My life was so boring, you really are the best person in the world! My best friend was a little guy who just wanted to play with me.'\n    #text = 'The plane had been flying long before the flight, we knew it was a big deal.'\n",
        "num_ids": 388
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs_ly = re.findall(r'^(ly|ly\\'s|ly\\')', text, re.IGNORECASE)\n    return adverbs_ly\n",
        "num_ids": 44
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    if re.search(r'ly(.*)',text):\n        m=re.search(r'ly(.*)',text)\n        return m.group(1),len(text)-len(m.group(1))\n    else:\n        return \"null\",0\n",
        "num_ids": 67
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text = text.replace(\".\", \"\")\n    text = re.sub(r'\\bly\\b', '', text)\n    adverbs_regex = r'\\bly(?!\\b)'\n    adverbs = re.findall(adverbs_regex, text)\n    return adverbs\n",
        "num_ids": 72
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_positions = {}\n    # Find all positions of each adverb\n    adverb_positions = [(i.start(0), i.end(0)) for i in re.finditer(r'\\bly\\b', text)]\n    # Print all positions of each adverb\n    print(f'Adverb Positions: {adverb_positions}')\n",
        "num_ids": 88
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = []\n    ly = []\n    flag = 0\n    for i in range(0,len(text)):\n        if (text[i]=='l' and text[i+1]=='y'):\n            flag = 1\n            ly.append(i)\n        if (flag == 1):\n            if (text[i]=='y' and text[i+1]=='y'):\n                flag = 0\n                result.append([ly[len(ly)-1],ly[len(ly)-1]+1])\n                ly = []\n    print(result)\n    for i in range(0,len(result)):\n        result[i][0] = result[i][0] +1\n    print(result)\n    return result\n",
        "num_ids": 181
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_dict = {}\n    for item in items:\n        if item in items_dict:\n            items_dict[item] += 1\n        else:\n            items_dict[item] = 1\n    \n    # sort dictionary by value\n    items_list = []\n    for item in items_dict:\n        items_list.append((items_dict[item],item))\n    items_list.sort(reverse=True)\n    \n    return items_list[:n]\n    \ndef k_closest_items(items,k):\n    '''\n    Write a function that takes an unsorted list of items and a number K and \n    returns a list of the K closest items in the list.\n    '''\n    items_dict = {}\n    for item in items:\n        if item in items_dict:\n            items_dict[item] += 1\n        else:\n            items_dict[item] = 1\n    \n    # sort dictionary by value\n    items_list = []\n    for item in items_dict:\n        items_list.append((items_dict[item],item))\n    items_list.sort(reverse=True)\n    \n    return items_list[:k]\n    \ndef make_word_list():\n    '''\n    Write a function that reads a text file and breaks it into lines.\n    Then it breaks each line into words.\n    Then it breaks words into letters,\n    and finally it counts the number of occurrences of each letter.\n    '''\n    word_list = []\n    with open('words.txt') as file:\n        for line in file:\n            line = line.strip()\n            word_list += line.split()\n    return word_list\n    \ndef histogram(items):\n    '''\n    Write a function that takes in a sequence of items and builds a histogram\n    data structure. It should be a dictionary of the form:\n    { item1 : frequency1,\n      item2 : frequency2,\n     ...\n      itemn : frequencyn }\n    '''\n    histogram = {}\n    for item in items:\n        if item in histogram:\n            histogram[item] += 1\n        else:\n            histogram[item] = 1\n    return histogram\n",
        "num_ids": 50
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Start with trivial case of empty list\n    if len(items) == 0:\n        return []\n    # Sort items by price\n    items = sorted(items,key=lambda x: x[1],reverse=True)\n    # Create a heap of tuples (price, item)\n    heap = []\n    for item in items:\n        heapq.heappush(heap,(item[1], item))\n        # pop the item out of the heap\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [i[1] for i in heap]\n",
        "num_ids": 148
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    '''\n    example input:\n    [\n       {'id':1, 'price':3.2},\n       {'id':2, 'price':5.6},\n       {'id':3, 'price':2.9}\n    ]\n    n=3\n    '''\n    '''\n    NOTE: if n is greater than length of items, return list sorted\n    in decreasing order of item.price\n    '''\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapify(items)\n    # heapq.heapif",
        "num_ids": 1906
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    counts = {}\n    for item in items:\n        counts[item] = counts.get(item, 0) + 1\n    pq = []\n    for item, count in counts.items():\n        heapq.heappush(pq, (count, item))\n    return [(heapq.heappop(pq)[1],heapq.heappop(pq)[0]) for _ in range(n)]\n",
        "num_ids": 105
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n>len(items):\n        raise Exception('The length of the list is lower than the value of n')\n    h = []\n    for i in items:\n        if len(h) == n:\n            break\n        if len(h) == 0:\n            heapq.heappush(h,i)\n        else:\n            if i > h[0]:\n                heapq.heapreplace(h,i)\n            else:\n                pass\n    return h\n",
        "num_ids": 116
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #\n    #\n    #\n    if items:\n        if n>len(items):\n            return []\n        #\n        items.sort(key=lambda x:x[1])\n        #\n        #\n        return items[:n]\n    else:\n        return []",
        "num_ids": 68
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    t=[]\n    for i in items:\n        t.append((i,items.count(i)))\n    heapq.heapify(t)\n    while len(t) > n:\n        heapq.heappop(t)\n    return t\n    \n",
        "num_ids": 68
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort(reverse=True, key=lambda x: x[1])\n    return items[:n]\n",
        "num_ids": 29
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    dict = {}\n    for item in items:\n        if item in dict:\n            dict[item] += 1\n        else:\n            dict[item] = 1\n    if n > len(items):\n        return items\n    return heapq.nlargest(n,dict,key=lambda x:dict[x])\n",
        "num_ids": 76
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort(key=lambda x: x[1],reverse=True)\n    return items[:n]\n",
        "num_ids": 29
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[0:n]+l[n+1:]\n",
        "num_ids": 17
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    split_list = []\n    if n == 0:\n        split_list.append(l)\n    else:\n        n = n - 1\n        for i in range(len(l)):\n            if i == n:\n                split_list.append(l[0:i])\n                split_list.append(l[i + 1:len(l)])\n                break\n    return split_list\n",
        "num_ids": 98
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) == 0:\n        return []\n    elif len(l) == 1:\n        return [l]\n    else:\n        return l[0:n] + split_Arr(l[n:], n)\n",
        "num_ids": 59
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    size = len(l)\n    if size == 0:\n        return []\n    return l[:n] + l[n:size]\n",
        "num_ids": 36
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n], l[n:]\n",
        "num_ids": 14
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n>len(l):\n        return l\n    return l[:n]+l[n:n+1]\n",
        "num_ids": 31
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    left = l[:n]\n    right = l[n:]\n    lst = left + right\n    return lst\n    # Write a python function to find the kth element in a list.\n    # Note : k starts from 0\ndef find_kth(lst, n):\n    '''\n    Write a python function to find the kth element in a list.\n    Note : k starts from 0\n    '''\n    lst.sort()\n    if n<=len(lst):\n        print(lst[n-1])\n    else:\n        print('number is not in list')\n        \n    # Write a python function to find the kth element in a list.\n    # Note : k starts from 0\ndef find_kth(lst, n):\n    '''\n    Write a python function to find the kth element in a list.\n    Note : k starts from 0\n    '''\n    lst.sort()\n    if n<=len(lst):\n        print(lst[n-1])\n    else:\n        print('number is not in list')\n",
        "num_ids": 45
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if l==[]:\n        return None\n    if n<0:\n        return None\n    if n>=len(l):\n        return None\n    \n    if n==len(l):\n        return l\n    if n<len(l):\n        return l[:n]+l[n+1:]\n",
        "num_ids": 76
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) <= n:\n        return l\n    a = l[:n]\n    b = l[n:]\n    return a + b\n",
        "num_ids": 39
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    x = int(len(l) / 2)\n    y = int(len(l) / 2)\n    return l[:x], l[y:]\n",
        "num_ids": 40
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    t = tuple(listx)\n    print('\\n',t,'\\n')\n    return t\n",
        "num_ids": 27
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    \n    x = tuple(listx)\n    \n    return x\n",
        "num_ids": 19
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # return listx\n    return tuple(listx)\n",
        "num_ids": 16
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    print(type(listx))\n    print(listx)\n    return tuple(listx)\n",
        "num_ids": 26
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple1 = tuple(listx)\n    return tuple1\n",
        "num_ids": 18
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    t = tuple(listx)\n    return t\n",
        "num_ids": 15
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    \n",
        "num_ids": 12
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num\n",
        "num_ids": 34
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val - min_val\n",
        "num_ids": 34
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max = nums[0]\n    min = nums[0]\n    for num in nums:\n        if num > max:\n            max = num\n        if num < min:\n            min = num\n    return max - min\n",
        "num_ids": 58
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    n = len(nums)\n    i = 0\n    j = n-1\n    max = -1\n    min = 2**32\n    while i < j:\n        if nums[i] > max:\n            max = nums[i]\n        if nums[j] < min:\n            min = nums[j]\n        i += 1\n        j -= 1\n    return max-min\n    \ndef pair_sum(nums, s):\n    '''\n    Write a python function to find the two numbers such that the difference between them is minimum\n    and return the minimum difference.\n    '''\n    n = len(nums)\n    i = 0\n    j = n-1\n    min = 2**32\n    while i < j:\n        if nums[i]+nums[j] == s:\n            if min > abs(nums[i]-nums[j]):\n                min = abs(nums[i]-nums[j])\n            i += 1\n            j -= 1\n        elif nums[i]+nums[j] < s:\n            i += 1\n        else:\n            j -= 1\n    return min\n    \ndef longest_substring(str1, str2):\n    '''\n    Write a python function to find the longest common substring of two given strings. \n    '''\n    n = len(str1)\n    m = len(str2)\n    i = 0\n    j = 0\n    longest = 0\n    while i < n and j < m:\n        if str1[i] == str2[j]:\n            longest = max(longest, len(str1[i:j+1]))\n            i += 1\n            j += 1\n        else:\n            if len(str1[i:j+1]) > longest:\n                i += 1\n            else:\n                j += 1\n    return longest\n    \ndef find_duplicates(num, arr):\n    '''\n    Write a python function to find the duplicate numbers in the array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        while i!= arr[i] and arr[i]!= -1:\n            temp = arr[i]\n            arr[i] = arr[temp]\n            arr[temp] = temp\n    for i in range(n):\n        if arr[i] == -1:\n            return i\n    return -1\n    \ndef is_prime(num):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n    \ndef rotate_array(arr, d):\n    '''\n    Write a python function to rotate an array by d elements.\n    '''\n    n = len(arr)\n    d = d%n\n    i = 0\n    j = n-1\n    while i < d:\n        arr[i], arr[j] = arr[j], arr[i]\n        i += 1\n        j -= 1\n    return arr\n    \ndef rotate_bit(n, k):\n    '''\n    Write a python function to rotate a bit pattern by k places.\n    '''\n    n = n << k\n    if n > 2**32-1:\n        return -1\n    return n\n    \ndef last_digit(num):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    while num >= 10:\n        num = num//10\n    return num % 10\n    \ndef find_substring(str1, str2):\n    '''\n    Write a python function to find the sub-string common to both strings.\n    '''\n    n = len(str1)\n    m = len(str2)\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if str1[i] == str2[j]:\n            i += 1\n            j += 1\n        else:\n            i += 1\n    return -1\n    \ndef palindrome_check(s):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    i = 0\n    j = len(s)-1\n    while i < j:\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n    \ndef search_in_rotated_array(arr, key):\n    '''\n    Write a python function to search for an element in a given rotated sorted array of n elements. \n    '''\n    n = len(arr)\n    if n == 0:\n        return -1\n    i = 0\n    j = n-1\n    while i < j:\n        if arr[i] == key:\n            return i\n        if arr[j] == key:\n            return j\n        m = (i+j)//2\n        if arr[m] == key:\n            return m\n        if arr[i] <= arr[m]:\n            if key >= arr[i] and key < arr[m]:\n                j = m\n            else:\n                i = m+1\n        else:\n            if key >= arr[m] and key < arr[j]:\n                i = m+1\n            else:\n                j = m-1\n    if arr[i] == key:\n        return i\n    if arr[j] == key:\n        return j\n    return -1\n    \ndef find_maximum_occurring_char(str1):\n    '''\n    Write a python function to find the maximum occurring character in a given string.\n    '''\n    n = len(str1)\n    max = -1\n    i = 0\n    while i < n:\n        if str1[i] > max:\n            max = str1[i]\n        i += 1\n    return max\n    \ndef sum_of_two_smallest(arr):\n    '''\n    Write a python function to find the sum of two smallest numbers in an array.\n    '''\n    n = len(arr)\n    i = 0\n    j = n-1\n    while i < j:\n        if arr[i] > arr[j]:\n            arr[i], arr[j] = arr[j], arr[i]\n        i += 1\n    temp = -2**32\n    max = -2**32\n    while arr[i]!= -1:\n        temp = max\n        max = arr[i]\n        i += 1\n        if max > temp:\n            return max\n    return max\n    \ndef palindrome_partition(str1, k):\n    '''\n    Write a python function to partition a given string, such that all the anagrams are put in different buckets, so that no two strings in the same bucket are anagrams.\n    '''\n    n = len(str1)\n    str1 = sorted(str1)\n    n_1 = n//2\n    for i in range(n_1):\n        str1[i] = str1[i][::-1]\n    for i in range(n_1, n):\n        if str1[i] == str1[i-n_1]:\n            str1[i], str1[i-n_1] = str1[i-n_1][::-1], str1[i][::-1]\n    return str1\n    \ndef word_break(str1, word_dict):\n    '''\n    Write a python function to check if a given string can be segmented into a list of words, such that no two words are anagrams.\n    '''\n    n = len(str1)\n    visited = [False]*n\n    for i in range(n):\n        visited[i] = True\n        for j in range(i, n):\n            if str1[i:j+1] in word_dict:\n                visited[j+1] = True\n    for i in range(n):\n        if visited[i] == False:\n            return False\n    return True\n    \ndef bst_insert(root, key):\n    '''\n    Write a python function to insert a given key in a BST.\n    '''\n    if root is None:\n        return Node(key)\n    if key < root.data:\n        root.left = bst_insert(root.lef",
        "num_ids": 39
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_value = -float('inf')\n    min_value = float('inf')\n    for num in nums:\n        if num > max_value:\n            max_value = num\n        if num < min_value:\n            min_value = num\n    return abs(max_value-min_value)\n",
        "num_ids": 76
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        return nums[0] - nums[-1]\n",
        "num_ids": 36
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    min_value = nums[0]\n    max_value = nums[0]\n    for num in nums:\n        if num < min_value:\n            min_value = num\n        if num > max_value:\n            max_value = num\n    return max_value - min_value\n",
        "num_ids": 74
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums)-min(nums)\n",
        "num_ids": 15
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    big = 0\n    small = 0\n    for x in nums:\n        if x > big:\n            big = x\n        if x < small:\n            small = x\n    return small - big\nprint(big_diff([10, 3, 5, 6]))\n",
        "num_ids": 66
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return nums[-1]-nums[0]\n",
        "num_ids": 23
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    i = 1\n    while i <= b:\n        if i ** 2 == a:\n            print(i)\n        i += 1\n",
        "num_ids": 34
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # your code here\n",
        "num_ids": 8
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a < b:\n        temp = a\n        a = b\n        b = temp\n    while a < b:\n        a = a + 1\n        if a ** 0.5 == int(a ** 0.5):\n            print(a)\n    return 'no perfect squares between two numbers'\n",
        "num_ids": 72
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b):\n        if is_perfect_square(i):\n            print(i)\n    print('done')\n    return None\n",
        "num_ids": 40
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    res = []\n    for i in range(a, b+1):\n        if i ** 2 == i:\n            res.append(i)\n    return res\n",
        "num_ids": 41
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    x=int(a*a+b*b)\n    print(x)\n    return x\n",
        "num_ids": 26
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for x in range(a, b+1):\n        if x**0.5 == int(x**0.5):\n            result.append(int(x**0.5))\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    \n    for i in range(a, b+1):\n        if i*i == i:\n            print(i)\n            \n",
        "num_ids": 34
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # if a - b <= 1:\n    #     return a**2\n    # else:\n    #     for n in range(a, b+1):\n    #         if n*n == n:\n    #             return n\n    if a <= 1:\n        return a**2\n    else:\n        for n in range(a, b+1):\n            if n*n == n:\n                return n\n",
        "num_ids": 100
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if not a:\n        return None\n",
        "num_ids": 12
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt((x**2)+(y**2))\n    theta = cmath.atan2(y, x)\n    if theta > 0:\n        theta = theta\n    else:\n        theta = 2*cmath.pi+theta\n    return theta,r\ndef polar_rect_coord(r,theta):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y\ndef rect_coord_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = cmath.sqrt((x**2)+(y**2))\n    theta = cmath.atan2(y, x)\n    if theta > 0:\n        theta = theta\n    else:\n        theta = 2*cmath.pi+theta\n    return theta,r\ndef rect_coord_polar_coord(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y\ndef polar_rect_coord_from_rect(x,y,a,b):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x + a\n    y = y + b\n    r = cmath.sqrt((x**2)+(y**2))\n    theta = cmath.atan2(y, x)\n    if theta > 0:\n        theta = theta\n    else:\n        theta = 2*cmath.pi+theta\n    return theta,r\ndef rect_coord_polar_coord_from_rect(x,y,a,b):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = x + a\n    y = y + b\n    r = cmath.sqrt((x**2)+(y**2))\n    theta = cmath.atan2(y, x)\n    if theta > 0:\n        theta = theta\n    else:\n        theta = 2*cmath.pi+theta\n    return theta,r\n",
        "num_ids": 90
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x**2 + y**2)**0.5, (x*2*cmath.sqrt(y**2 + x**2))\ndef polar_rect_z(x,y,z):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (z**2 + x**2 + y**2)**0.5, (2*z*x*cmath.sqrt(y**2 + x**2))\n",
        "num_ids": 44
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #First convert to cartesian coordinates and then take the modulus\n    a = (x**2 + y**2) ** 0.5\n    b = 2*math.atan2(y,x)\n    return a,b\ndef polar_rect_integrate(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates and then integrate over the domain.\n    '''\n    #First convert to cartesian coordinates and then take the modulus\n    a = (x**2 + y**2) ** 0.5\n    b = 2*math.atan2(y,x)\n    #Then take the modulus and multiply by 2pi\n    return (a*math.sin(b) + b) * 2 * math.pi\ndef polar_rect_integrate2(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates and then integrate over the domain.\n    '''\n    #First convert to cartesian coordinates and then take the modulus\n    a = (x**2 + y**2) ** 0.5\n    b = 2*math.atan2(y,x)\n    #Then take the modulus and multiply by 2pi\n    return (a*math.sin(b) + b) * 2 * math.pi\ndef polar_rect_integrate3(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates and then integrate over the domain.\n    '''\n    #First convert to cartesian coordinates and then take the modulus\n    a = (x**2 + y**2) ** 0.5\n    b = 2*math.atan2(y,x)\n    #Then take the modulus and multiply by 2pi\n    return (a*math.sin(b) + b) * 2 * math.pi\ndef polar_rect_integrate4(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates and then integrate over the domain.\n    '''\n    #First convert to cartesian coordinates and then take the modulus\n    a = (x**2 + y**2) ** 0.5\n    b = 2*math.atan2(y,x)\n    #Then take the modulus and multiply by 2pi\n    return (a*math.sin(b) + b) * 2 * math.pi\ndef polar_rect_integrate5(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates and then integrate over the domain.\n    '''\n    #First convert to cartesian coordinates and then take the modulus\n    a = (x**2 + y**2) ** 0.5\n    b = 2*math.atan2(y,x)\n    #Then take the modulus and multiply by 2pi\n    return (a*math.sin(b) + b) * 2 * math.pi\ndef polar_rect_integrate6(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates and then integrate over the domain.\n    '''\n    #First convert to cartesian coordinates and then take the modulus\n    a = (x**2 + y**2) ** 0.5\n    b = 2*math.atan2(y,x)\n    #Then take the modulus and multiply by 2pi\n    return (a*math.sin(b) + b) * 2 * math.pi\ndef polar_rect_integrate7(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates and then integrate over the domain.\n    '''\n    #First convert to cartesian coordinates and then take the modulus\n    a = (x**2 + y**2) ** 0.5\n    b = 2*math.atan2(y,x)\n    #Then take the modulus and multiply by 2pi\n    return (a*math.sin(b) + b) * 2 * math.pi\ndef polar_rect_integrate8(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates and then integrate over the domain.\n    '''\n    #First convert to cartesian coordinates and then take the modulus\n    a = (x**2 + y**2) ** 0.5\n    b = 2*math.atan2(y,x)\n    #Then take the modulus and multiply by 2pi\n    return (a*math.sin(b) + b) * 2 * math.pi\ndef polar_rect_integrate9(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates and then integrate over the domain.\n    '''\n    #First convert to cartesian coordinates and then take the modulus\n    a = (x**2 + y**2) ** 0.5\n    b = 2*math.atan2(y,x)\n    #Then take the modulus and multiply by 2pi\n    return (a*math.sin(b) + b) * 2 * math.pi\ndef polar_rect_integrate10(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates and then integrate over the domain.\n    '''\n    #First convert to cartesian coordinates and then take the modulus\n    a = (x**2 + y**2) ** 0.5\n    b = 2*math.atan2(y,x)\n    #Then take the modulus and multiply by 2pi\n    return (a*math.sin(b) + b) * 2 * math.pi\ndef polar_rect_integrate11(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates and then integrate over the domain.\n    '''\n    #First convert to cartesian coordinates and then take the modulus\n    a = (x**2 + y**2) ** 0.5\n    b = 2*math.atan2(y,x)\n    #Then take the modulus and multiply by 2pi\n    return (a*math.sin(b) + b) * 2 * math.pi\ndef polar_rect_integrate12(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates and then integrate over the domain.\n    '''\n    #First convert to cartesian coordinates and then take the modulus\n    a = (x**2 + y**2) ** 0.5\n    b = 2*math.atan2(y,x)\n    #Then take the modulus and multiply by 2pi\n    return (a*math.sin(b) + b) * 2 * math.pi\ndef polar_rect_integrate13(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates and then integrate over the domain.\n    '''\n    #First convert to cartesian coordinates and then take the modulus\n    a = (x**2 + y**2) ** 0.5\n    b = 2*math.atan2(y,x)\n    #Then take the modulus and multiply by 2pi\n    return (a*math.sin(b) + b) * 2 * math.pi\ndef polar_rect_integrate14(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates and then integrate over the domain.\n    '''\n    #First convert to cartesian coordinates and then take the modulus\n    a = (x**2 + y**2) ** 0.5\n    b = 2*math.atan2(y,x)\n    #Then take the modulus and multiply by 2pi\n    return (a*math.sin(b) + b) * 2 * math.pi\ndef polar_rect_integrate15(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates and then integrate over the domain.\n    '''\n    #First convert to cartesian coordinates and then take the modulus\n    a = (x**2 + y**2) ** 0.5\n    b = 2*math.atan2(y,x)\n    #Then take the modulus and multiply by 2pi\n    return (a*math.sin(b) + b) * 2 * math.pi\ndef polar_rect_integrate16(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates and then integrate over the domain.\n    '''\n    #First convert to cartesian coordinates and then take the modulus\n    a = (x**2 + y**2) ** 0.5\n    b = 2*math.atan2(y,x)\n    #Then take the modulus and multiply by 2pi\n    return (a*math.sin(b) + b) * 2 * math.pi\ndef polar_rect_integrate17",
        "num_ids": 91
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=x**2+y**2\n    #print(r)\n    r=math.sqrt(r)\n    #print(r)\n    x=r*x/r\n    y=r*y/r\n    #print(x,y)\n    return x,y\n",
        "num_ids": 71
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    radius = cmath.sqrt((x**2)+(y**2))\n    theta = cmath.phase(x)\n    return radius, theta\n",
        "num_ids": 40
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x*(x*x + y*y), y*(x*x + y*y))\ndef polar_rect_2(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (r * math.cos(theta), r * math.sin(theta))\ndef cartesian_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x*(x*x + y*y), y*(x*x + y*y))\ndef cartesian_rect_2(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x * math.sqrt(2), y * math.sqrt(2))\ndef cartesian_rect_3(x,y,z):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return (x * math.sqrt(2), y * math.sqrt(2))\ndef polar_rect_3(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (r * math.cos(theta), r * math.sin(theta))\n",
        "num_ids": 24
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2+y**2)\n    theta = cmath.atan2(y,x)\n    return r,theta\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = (x**2+y**2)**0.5\n    theta = cmath.atan2(y,x)\n    return r,theta\ndef rect_rect(x1,y1,x2,y2):\n    '''\n    Write a function to check if a rectangle is overlapped with another rectangle.\n    '''\n    if x1<x2 and x2<x1+x1-x2:\n        if y1<y2 and y2<y1+y1-y2:\n            return True\n        else:\n            return False\n    elif x1>x2 and x1-x2>x2-x1:\n        if y1<y2 and y2<y1+y1-y2:\n            return True\n        else:\n            return False\n    elif y1<y2 and y2<y1+y1-y2:\n        if x1<x2 and x2<x1+x1-x2:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 174
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x!= 0:\n        if y!= 0:\n            return x / (2 * cmath.sqrt(x**2+y**2)), -y / (2 * cmath.sqrt(x**2+y**2))\n        else:\n            return x / (2 * cmath.sqrt(x**2+y**2)), -y / (2 * cmath.sqrt(x**2+y**2))\n    else:\n        if y!= 0:\n            return -y / (2 * cmath.sqrt(x**2+y**2)), y / (2 * cmath.sqrt(x**2+y**2))\n        else:\n            return -y / (2 * cmath.sqrt(x**2+y**2)), y / (2 * cmath.sqrt(x**2+y**2))\n",
        "num_ids": 206
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2 + y**2\n    theta = cmath.acos(x/r)\n    return(r, theta)\n",
        "num_ids": 37
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x*x+y*y\n    t = cmath.sqrt(r)\n    return t,t.real\n",
        "num_ids": 33
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) == 0:\n        return None\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n",
        "num_ids": 51
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    if not newList:\n        return newList\n    else:\n        last_index = len(newList)-1\n        newList[0], newList[last_index] = newList[last_index], newList[0]\n        return newList\n",
        "num_ids": 64
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n",
        "num_ids": 33
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # your code here\n    return newList\n",
        "num_ids": 13
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a= newList.pop()\n    b= newList.pop(0)\n    newList.append(a)\n    newList.insert(0,b)\n    return newList\n",
        "num_ids": 47
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2: \n        return newList\n",
        "num_ids": 19
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    n = len(newList)\n    if n < 2:\n        return newList\n    else:\n        newList[0], newList[n-1] = newList[n-1], newList[0]\n    return newList\n",
        "num_ids": 59
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    total = 0\n    for i in range(n+1):\n        total += factorial(i) / (factorial(k) * factorial(n-k))\n    return total\n",
        "num_ids": 46
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0:\n        return 1\n    return (binomial_Coeff(n-1,k-1) + k*binomial_Coeff(n-1,k))\n",
        "num_ids": 48
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    k = k%n\n    Coeff = 1\n    for i in range(n):\n        Coeff *= i\n    for i in range(1,k+1):\n        Coeff *= i\n    for i in range(1,n-k+1):\n        Coeff /= i\n    return Coeff\n",
        "num_ids": 82
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    s = 0\n    for i in range(1, k+1):\n        s += binom_coeff(n,i)\n    return s\n",
        "num_ids": 38
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k <= 0:\n        return 0\n    if k == 1:\n        return n\n    if k == 2:\n        return n*(n+1)\n    return n*(binomial_Coeff(n-1,k-1)+binomial_Coeff(n-1,k-2))\n",
        "num_ids": 77
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    import math\n    def binomial_coeff(n, k):\n        if (n <= k) and (k <= n+1):\n            if k == 1 or k == n:\n                return 1\n            else:\n                return (n * (n - 1)) // 2\n        else:\n            return 0\n",
        "num_ids": 75
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = 1\n    for i in range(1,n+1):\n        C = C*(i)\n    return C\n",
        "num_ids": 33
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n<=0: \n        return 0\n    elif k<0: \n        return 0\n    else:\n        return (binomial_Coeff(n-1,k) + binomial_Coeff(n-1,k-1))\n",
        "num_ids": 65
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    ans = 1\n    for i in range(1,k+1):\n        ans = ans * (n-i+1) // i\n    return ans\n    \n    \ndef fibonacci_series(N): \n    '''\n    Write a python function to find the Nth term in the fibonacci series. \n    '''\n    fib_list = [1,1]\n    if N == 0:\n        return fib_list[0]\n    elif N == 1:\n        return fib_list[1]\n    for i in range(2,N+1):\n        fib_list.append(fib_list[i-1]+fib_list[i-2])\n    return fib_list[N]\n    \n    \ndef bit_conversion(N):\n    '''\n    Write a python function to convert a given decimal number to binary.\n    '''\n    i = 0\n    binary = \"\"\n    while N > 0:\n        remainder = N%2\n        binary = str(remainder) + binary\n        N = N // 2\n        i += 1\n    return binary\n    \n    \ndef freq_analysis(cipher_text):\n    '''\n    Write a python function to find the frequency of each character in the given ciphertext.\n    '''\n    char_freq = {}\n    for i in cipher_text:\n        if i in char_freq:\n            char_freq[i] += 1\n        else:\n            char_freq[i] = 1\n    return char_freq\n    \n    \ndef graph_generator(G,data):\n    '''\n    Write a python function to find the graph of the given graph, with the given data.\n    '''\n    G.add_weighted_edges_from(data)\n    return G\n    \n    \ndef check_if_sub_graph(G,sub_G):\n    '''\n    Write a python function to check if the given graph is a subgraph of the given graph.\n    '''\n    for i in G.nodes():\n        if i in sub_G.nodes():\n            for j in sub_G.nodes():\n                if i!=j and (i,j) not in G.edges() and (j,i) not in G.edges():\n                    return False\n    return True\n    \n    \ndef time_complexity(A,B):\n    '''\n    Write a python function to find the time complexity of the given function.\n    '''\n    count = 0\n    start = time()\n    while True:\n        count += 1\n        pass\n    return count\n    \n    \ndef print_func():\n    '''\n    Write a python function to print a single line of strings.\n    '''\n    print(\"Hi\")\n    return \"\"\n    \n    \ndef recursion_depth():\n    '''\n    Write a python function to find the depth of the recursion in the function.\n    '''\n    pass\n    \n    \ndef is_sublist(list1,list2):\n    '''\n    Write a python function to check whether the given list is a sublist of the other list.\n    '''\n    for i in list1:\n        if i not in list2:\n            return False\n    return True\n    \n    \ndef is_substring(str1,str2):\n    '''\n    Write a python function to check whether the given string is a substring of the other string.\n    '''\n    if str1 in str2:\n        return True\n    else:\n        return False\n    \n    \ndef is_prime(num):\n    '''\n    Write a python function to check whether the given number is a prime number.\n    '''\n    for i in range(2,num):\n        if num%i == 0:\n            return False\n    return True\n    \n    \ndef get_largest_prime_factor(num):\n    '''\n    Write a python function to find the largest prime factor of a given number.\n    '''\n    for i in range(2,num):\n        if num%i == 0:\n            return i\n        else:\n            pass\n    return 1\n    \n    \ndef maximum_number(list1,list2):\n    '''\n    Write a python function to find the maximum element in the given list.\n    '''\n    largest = -1\n    for i in range(0,len(list1)):\n        if list1[i] > largest:\n            largest = list1[i]\n    return largest\n    \n    \ndef count_sublist(list1,list2):\n    '''\n    Write a python function to count the number of sublist in the given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i:].count(list2[0])!= 0:\n            count += 1\n    return count\n    \n    \ndef quadratic_equation(a,b,c):\n    '''\n    Write a python function to find the two solutions to the quadratic equation.\n    '''\n    D = (b**2)-4*a*c\n    if D < 0:\n        return print(\"No Solution\")\n    elif D == 0:\n        return ((-b)/(2*a))\n    else:\n        x1 = (-b + math.sqrt(D))/(2*a)\n        x2 = (-b - math.sqrt(D))/(2*a)\n        return x1,x2\n    \n    \ndef xor(a,b):\n    '''\n    Write a python function to find the XOR value of the given numbers.\n    '''\n    res = 0\n    for i in range(max(len(a),len(b))):\n        if i<len(a):\n            res += a[i]\n        if i<len(b):\n            res += b[i]\n    return res\n    \n    \ndef is_palindrome(word):\n    '''\n    Write a python function to check whether the given word is a palindrome.\n    '''\n    return word == word[::-1]\n    \n    \ndef is_rotated_palindrome(word):\n    '''\n    Write a python function to check whether the given word is a rotated palindrome.\n    '''\n    return word == word[::-1] and word[0] == word[-1]\n    \n    \ndef is_rotated_palindrome_using_dict(word):\n    '''\n    Write a python function to check whether the given word is a rotated palindrome.\n    '''\n    d = {}\n    for i in range(len(word)):\n        if i not in d:\n            d[i] = word[i]\n    start = 0\n    end = len(word)-1\n    while end > start:\n        if d[start]!= d[end]:\n            return False\n        start += 1\n        end -= 1\n    return True\n    \n    \ndef number_of_pairs(n,r,arr):\n    '''\n    Write a python function to find the number of pairs in a set of pairs.\n    '''\n    count = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == r:\n                count += 1\n    return count\n    \n    \ndef alternating_array(a):\n    '''\n    Write a python function to find the length of the longest alternating subarray in a given array.\n    '''\n    count = 0\n    prev = 0\n    for i in range(0,len(a)):\n        if a[i]!= a[prev]:\n            count += 1\n        prev = i\n    return count + 1\n    \n    \ndef find_index(arr,num):\n    '''\n    Write a python function to find the index of the given number in the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == num:\n            return i\n    return -1\n    \n    \ndef nth_prime_number(n):\n    '''\n    Write a python function to find the nth prime number.\n    '''\n    count = 0\n    nth = 1\n    while True:\n        if count == n:\n            return nth\n        for i in range(2,nth):\n            if nth%",
        "num_ids": 47
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return (math.factorial(n) / (math.factorial(k) * math.factorial(n - k)))\n",
        "num_ids": 32
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip == '0.0.0.0':\n        return '0.0.0.0'\n    elif ip == '255.255.255.255':\n        return '255.255.255.255'\n    else:\n        ip = ip.split('.')\n        ip[0] = '0' if int(ip[0]) == 0 else ip[0]\n        ip[1] = '0' if int(ip[1]) == 0 else ip[1]\n        ip[2] = '0' if int(ip[2]) == 0 else ip[2]\n        ip[3] = '0' if int(ip[3]) == 0 else ip[3]\n        return '.'.join(ip)\n",
        "num_ids": 175
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_array = ip.split('.')\n    ip_array[0] = ip_array[0].lstrip('0')\n    ip_array[1] = ip_array[1].lstrip('0')\n    ip_array[2] = ip_array[2].lstrip('0')\n    ip_array[3] = ip_array[3].lstrip('0')\n    ip = '.'.join(ip_array)\n    return ip\n",
        "num_ids": 111
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return '.'.join(str(int(ip.split('.')[0])) for i in range(len(ip.split('.'))) if int(ip.split('.')[0]))\ndef removezero_port(port):\n    '''\n    Write a function to remove leading zeroes from a port number.\n    '''\n    return str(int(port))\ndef removezero_postfix(postfix):\n    '''\n    Write a function to remove leading zeroes from a port number.\n    '''\n    return postfix\ndef no_of_zeroes_after_zero(string):\n    '''\n    Write a function to count the number of zeroes at the end of a string.\n    '''\n    return ''.join(x for x in string if x == '0').count('0')\ndef count_port(string):\n    '''\n    Write a function to count the number of ports in a given string.\n    '''\n    return len(re.findall('[0-9]*',string))\ndef count_port_without_zero(string):\n    '''\n    Write a function to count the number of ports in a given string.\n    '''\n    return len(re.findall('[0-9]*',string)) - no_of_zeroes_after_zero(string)\ndef count_port_after_subnet_mask(string):\n    '''\n    Write a function to count the number of ports in a given string.\n    '''\n    return len(re.findall('[0-9]*',string))\ndef count_port_before_subnet_mask(string):\n    '''\n    Write a function to count the number of ports in a given string.\n    '''\n    return len(re.findall('[0-9]*',string))\ndef remove_ip_subnet_mask(string):\n    '''\n    Write a function to remove the ip and subnet mask from the given string.\n    '''\n    return '.'.join(str(int(ip.split('.')[0])) for ip in re.findall('[0-9]*.[0-9]*.[0-9]*.[0-9]*',string))\ndef is_ip_subnet_mask(string):\n    '''\n    Write a function to check if the given string is an ip and subnet mask.\n    '''\n    return len(re.findall('[0-9]*.[0-9]*.[0-9]*.[0-9]*',string)) == 1 and not re.findall('[0-9]*.[0-9]*.[0-9]*.[0-9]*',string)\ndef ip_subnet_mask(string):\n    '''\n    Write a function to check if the given string is an ip and subnet mask.\n    '''\n    return len(re.findall('[0-9]*.[0-9]*.[0-9]*.[0-9]*',string)) == 1 and not re.findall('[0-9]*.[0-9]*.[0-9]*.[0-9]*',string)\ndef no_of_zeroes_in_ip(string):\n    '''\n    Write a function to count the number of zeroes in an ip address.\n    '''\n    return str(int(string.split('.')[0])).count('0')\ndef is_ip_address_without_subnet_mask(string):\n    '''\n    Write a function to check if the given string is an ip address without subnet mask.\n    '''\n    return len(re.findall('[0-9]*.[0-9]*.[0-9]*.[0-9]*',string)) == 1 and not re.findall('[0-9]*.[0-9]*.[0-9]*.[0-9]*',string)\ndef is_ip_address(string):\n    '''\n    Write a function to check if the given string is an ip address.\n    '''\n    return len(re.findall('[0-9]*.[0-9]*.[0-9]*.[0-9]*',string)) == 1 and not re.findall('[0-9]*.[0-9]*.[0-9]*.[0-9]*',string)\ndef ip_address(string):\n    '''\n    Write a function to check if the given string is an ip address.\n    '''\n    return len(re.findall('[0-9]*.[0-9]*.[0-9]*.[0-9]*',string)) == 1 and not re.findall('[0-9]*.[0-9]*.[0-9]*.[0-9]*',string)\ndef no_of_zeroes_in_port(string):\n    '''\n    Write a function to count the number of zeroes in a port number.\n    '''\n    return str(int(string)).count('0')\ndef is_port_number(string):\n    '''\n    Write a function to check if the given string is a port number.\n    '''\n    return len(re.findall('[0-9]*',string)) == 2\ndef port_number(string):\n    '''\n    Write a function to check if the given string is a port number.\n    '''\n    return len(re.findall('[0-9]*',string)) == 2\ndef is_ip_prefix(string):\n    '''\n    Write a function to check if the given string is an ip prefix.\n    '''\n    return string.count('/') == 2 and not re.findall('[0-9]*.[0-9]*.[0-9]*.[0-9]*',string)\ndef is_ip_prefix_without_subnet_mask(string):\n    '''\n    Write a function to check if the given string is an ip prefix without subnet mask.\n    '''\n    return string.count('/') == 2 and not re.findall('[0-9]*.[0-9]*.[0-9]*.[0-9]*',string)\ndef ip_prefix(string):\n    '''\n    Write a function to check if the given string is an ip prefix.\n    '''\n    return string.count('/') == 2 and not re.findall('[0-9]*.[0-9]*.[0-9]*.[0-9]*',string)\ndef no_of_zeroes_in_port_number(string):\n    '''\n    Write a function to count the number of zeroes in a port number.\n    '''\n    return str(int(string)).count('0')\ndef is_port_number_with_zeros(string):\n    '''\n    Write a function to check if the given string is a port number.\n    '''\n    return len(re.findall('[0-9]*',string)) == 2\ndef is_port_number_without_zeros(string):\n    '''\n    Write a function to check if the given string is a port number.\n    '''\n    return len(re.findall('[0-9]*',string)) == 2 and no_of_zeroes_in_port_number(string) == 0\ndef port_number_with_zeros(string):\n    '''\n    Write a function to check if the given string is a port number.\n    '''\n    return len(re.findall('[0-9]*',string)) == 2 and no_of_zeroes_in_port_number(string) == 1\ndef port_number_without_zeros(string):\n    '''\n    Write a function to check if the given string is a port number.\n    '''\n    return len(re.findall('[0-9]*',string)) == 2 and no_of_zeroes_in_port_number(string) == 0\ndef no_of_zeroes_after_port_number(string):\n    '''\n    Write a function to count the number of zeroes at the end of a port number.\n    '''\n    return str(int(string)).count('0')\ndef no_of_zeroes_before_port_number(string):\n    '''\n    Write a function to count the number of zeroes at the end of a port number.\n    '''\n    return str(int(string)).count('0')\nde",
        "num_ids": 16
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if(len(ip)==0):\n        return \"\"\n    if(len(ip)==1):\n        return ip\n    if(ip[0]!=\"0\"):\n        return ip\n    return removezero_ip(ip[1:])\n",
        "num_ids": 62
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = str(ip)\n    ip = re.sub(r'\\b0+','',ip)\n    return ip\n    \ndef remove_double_dots(ip):\n    '''\n    Write a function to remove multiple consecutive dots from an ip address.\n    '''\n    ip = str(ip)\n    ip = re.sub(r'\\.\\.', '.', ip)\n    return ip\n    \ndef is_ip_valid(ip):\n    '''\n    Write a function to check if the given ip is valid.\n    '''\n    ip = removezero_ip(ip)\n    ip = remove_double_dots(ip)\n    ip = ip.split('.')\n    if len(ip)!= 4:\n        return False\n    else:\n        for i in ip:\n            if len(i) > 3:\n                return False\n            else:\n                if not i.isdigit():\n                    return False\n                else:\n                    i = int(i)\n                    if i > 255:\n                        return False\n        return True\n        \ndef reverse_ip(ip):\n    '''\n    Write a function to reverse the order of the ip address.\n    '''\n    ip = str(ip)\n    ip = ip.split('.')\n    ip.reverse()\n    return '.'.join(ip)\n    \ndef is_ip_valid_again(ip):\n    '''\n    Write a function to check if the given ip is valid again.\n    '''\n    ip = reverse_ip(ip)\n    if is_ip_valid(ip):\n        return True\n    else:\n        return False\n        \ndef get_first_ip_octet(ip):\n    '''\n    Write a function to get the first ip octet of the ip address.\n    '''\n    ip = str(ip)\n    ip = ip.split('.')\n    ip[0] = int(ip[0])\n    return ip[0]\n    \ndef get_second_ip_octet(ip):\n    '''\n    Write a function to get the second ip octet of the ip address.\n    '''\n    ip = str(ip)\n    ip = ip.split('.')\n    ip[1] = int(ip[1])\n    return ip[1]\n    \ndef get_third_ip_octet(ip):\n    '''\n    Write a function to get the third ip octet of the ip address.\n    '''\n    ip = str(ip)\n    ip = ip.split('.')\n    ip[2] = int(ip[2])\n    return ip[2]\n    \ndef get_ip_octet_count(ip):\n    '''\n    Write a function to get the ip octet count.\n    '''\n    ip = str(ip)\n    ip = ip.split('.')\n    return len(ip)\n    \ndef get_network_address(ip):\n    '''\n    Write a function to get the network address of the ip address.\n    '''\n    octet1 = get_first_ip_octet(ip)\n    octet2 = get_second_ip_octet(ip)\n    octet3 = get_third_ip_octet(ip)\n    return str(octet1) + '.' + str(octet2) + '.' + str(octet3) + '.'\n    \ndef get_broadcast_address(ip):\n    '''\n    Write a function to get the broadcast address of the ip address.\n    '''\n    octet1 = get_first_ip_octet(ip)\n    octet2 = get_second_ip_octet(ip)\n    octet3 = get_third_ip_octet(ip)\n    octet1 = octet1 - 1\n    octet2 = octet2 - 1\n    octet3 = octet3 - 1\n    return str(octet1) + '.' + str(octet2) + '.' + str(octet3) + '.'\n    \ndef get_prefix_length(ip):\n    '''\n    Write a function to get the prefix length of the ip address.\n    '''\n    octet1 = get_first_ip_octet(ip)\n    octet2 = get_second_ip_octet(ip)\n    octet3 = get_third_ip_octet(ip)\n    octet1 = octet1 - 1\n    octet2 = octet2 - 1\n    octet3 = octet3 - 1\n    return len(str(octet1)) + len(str(octet2)) + len(str(octet3))\n    \ndef get_subnet_mask(ip):\n    '''\n    Write a function to get the subnet mask of the ip address.\n    '''\n    octet1 = get_first_ip_octet(ip)\n    octet2 = get_second_ip_octet(ip)\n    octet3 = get_third_ip_octet(ip)\n    octet1 = octet1 - 1\n    octet2 = octet2 - 1\n    octet3 = octet3 - 1\n    return str(octet1) + '.' + str(octet2) + '.' + str(octet3) + '.' + '1'\n    \ndef is_in_subnet(ip, net):\n    '''\n    Write a function to check if the ip address is in the subnet.\n    '''\n    ip = str(ip)\n    ip = ip.split('.')\n    net = net.split('.')\n    \n    if len(ip)!= 4:\n        return False\n    if len(net)!= 4:\n        return False\n    \n    octet1 = get_first_ip_octet(ip)\n    octet2 = get_second_ip_octet(ip)\n    octet3 = get_third_ip_octet(ip)\n    octet4 = get_first_ip_octet(net)\n    octet5 = get_second_ip_octet(net)\n    octet6 = get_third_ip_octet(net)\n    \n    octet1 = octet1 - 1\n    octet2 = octet2 - 1\n    octet3 = octet3 - 1\n    octet4 = octet4 - 1\n    octet5 = octet5 - 1\n    octet6 = octet6 - 1\n    \n    if (octet1 < octet4 and octet2 < octet5 and octet3 < octet6):\n        return True\n    else:\n        return False\n        \ndef get_first_ip_octet_binary(ip):\n    '''\n    Write a function to get the first ip octet of the ip address in binary.\n    '''\n    ip = str(ip)\n    ip = ip.split('.')\n    ip[0] = int(ip[0])\n    octet1 = bin(ip[0])[2:]\n    octet1 = '0'*(8-len(octet1)) + octet1\n    return octet1\n    \ndef get_second_ip_octet_binary(ip):\n    '''\n    Write a function to get the second ip octet of the ip address in binary.\n    '''\n    ip = str(ip)\n    ip = ip.split('.')\n    ip[1] = int(ip[1])\n    octet2 = bin(ip[1])[2:]\n    octet2 = '0'*(8-len(octet2)) + octet2\n    return octet2\n    \ndef get_third_ip_octet_binary(ip):\n    '''\n    Write a function to get the third ip octet of the ip address in binary.\n    '''\n    ip = str(ip)\n    ip = ip.split('.')\n    ip[2] = int(ip[2])\n    octet3 = bin(ip[2])[2:]\n    octet3 = '0'*(8-len(octet3)) + octet3\n    return octet3\n    \ndef get_ip_octet_count_binary(ip):\n    '''\n    Write a function to get the ip octet count of the ip address in binary.\n    '''\n    ip = str(ip)\n    ip = ip.split('.')\n    ip[0] = int(ip[0])\n    octet1 = bin(ip[0])[",
        "num_ids": 45
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    i = int(ip.split('.')[0])\n    if i < 100:\n        return f'0{ip}'\n    else:\n        return ip\ndef to_int(ip):\n    '''\n    Write a function to convert a string to an integer.\n    '''\n    return int(ip)\ndef print_ip(ip):\n    '''\n    Write a function to print a given ip address in the following format.\n    '''\n    print(f'{ip.split(\".\")[0]}.', end='')\n    for i in range(1, 4):\n        print(f'{ip.split(\".\")[i]}', end='')\n        if i < 3:\n            print(',', end='')\n    print('')\ndef check_ip_validity(ip):\n    '''\n    Write a function to check whether an input ip is valid or not.\n    '''\n    ip = ip.split('.')\n    if len(ip)!= 4:\n        return False\n    if ip[0].isdigit() and ip[1].isdigit() and ip[2].isdigit() and ip[3].isdigit():\n        return True\n    else:\n        return False\ndef get_valid_ip_address(ip):\n    '''\n    Write a function to get the valid ip address from the given ip address.\n    '''\n    ip = ip.split('.')\n    return ip[0] + '.' + ip[1] + '.' + ip[2] + '.' + ip[3]\ndef from_octal_to_int(octal_address):\n    '''\n    Write a function to convert an octal address to an integer.\n    '''\n    return int(octal_address, 8)\ndef valid_network_address_octal(octal_address):\n    '''\n    Write a function to validate an octal address.\n    '''\n    return 'octal' in str(octal_address)\ndef ip_octal_string_to_int(ip):\n    '''\n    Write a function to convert an octal address to an integer.\n    '''\n    ip = ip.split('.')\n    return int(ip[0])*256*256*256 + int(ip[1])*256*256 + int(ip[2])*256 + int(ip[3])\ndef ip_int_to_octal(ip):\n    '''\n    Write a function to convert an octal address to an integer.\n    '''\n    octal_address = f'{ip//(256**3)}'\n    octal_address += f'{ip%(256**3)}'\n    octal_address += f'{ip//(256**2)}'\n    octal_address += f'{ip%(256**2)}'\n    octal_address += f'{ip//(256**1)}'\n    octal_address += f'{ip%(256**1)}'\n    octal_address += f'{ip//256}'\n    octal_address += f'{ip%256}'\n    return octal_address\ndef is_ipv4_address(ip):\n    '''\n    Write a function to validate an IPv4 address.\n    '''\n    ip = ip.split('.')\n    if len(ip)!= 4:\n        return False\n    if ip[0].isdigit() and ip[1].isdigit() and ip[2].isdigit() and ip[3].isdigit():\n        return True\n    else:\n        return False\ndef ip_int_octal_to_string(ip):\n    '''\n    Write a function to convert an octal address to an integer.\n    '''\n    octal_address = f'{ip//(256**3)}'\n    octal_address += f'{ip%(256**3)}'\n    octal_address += f'{ip//(256**2)}'\n    octal_address += f'{ip%(256**2)}'\n    octal_address += f'{ip//(256**1)}'\n    octal_address += f'{ip%(256**1)}'\n    octal_address += f'{ip//256}'\n    octal_address += f'{ip%256}'\n    return octal_address\ndef is_subnet_mask(mask):\n    '''\n    Write a function to check whether a given ip is subnet mask or not.\n    '''\n    ip_binary = to_int(mask)\n    ip_int = to_int(mask)\n    ip_octal = to_int(mask)\n    ip_octal_int = to_int(mask)\n    #Checking whether given mask is subnet mask or not\n    if ip_octal_int.bit_length() < 32:\n        return False\n    #Checking if IP address is subnet mask\n    if ip_octal_int.bit_length() >= 32:\n        return True\n    #Checking octal to int conversion of mask and ip\n    ip_int = ip_int | ip_octal_int\n    ip_octal_int = ip_octal_int - ip_int\n    #Checking if mask is valid\n    if ip_octal_int.bit_length() == 0:\n        return True\n    elif ip_octal_int.bit_length()!= ip_binary.bit_length() or ip_octal_int.bit_length() < 32:\n        return False\n    #Checking whether ip is subnet mask\n    return True\ndef is_valid_address(address):\n    '''\n    Write a function to validate an address.\n    '''\n    if not address:\n        return False\n    if not check_ip_validity(address):\n        return False\n    octal = ip_octal_string_to_int(address)\n    binary = to_bin(octal)\n    if binary.count('1') < 32:\n        return False\n    else:\n        return True\ndef is_host_address(address):\n    '''\n    Write a function to check whether an address is host address or not.\n    '''\n    octal = ip_octal_string_to_int(address)\n    binary = to_bin(octal)\n    if binary.count('1') < 128:\n        return False\n    else:\n        return True\ndef to_bin(ip):\n    '''\n    Write a function to convert an integer ip address to binary.\n    '''\n    binary = ''\n    for i in range(ip.bit_length()):\n        if ip%2 == 1:\n            binary += '1'\n            ip = ip//2\n        else:\n            binary += '0'\n            ip = ip//2\n    return binary\ndef get_valid_network_address(ip):\n    '''\n    Write a function to get the valid network address from an ip address.\n    '''\n    octal = ip_octal_string_to_int(ip)\n    return ip_int_octal_to_string(octal & ~((1 << (32 - ip_int_octal_to_string(octal).count('1'))) - 1))\ndef get_broadcast_address(ip):\n    '''\n    Write a function to get the broadcast address from an ip address.\n    '''\n    octal = ip_octal_string_to_int(ip)\n    return ip_int_octal_to_string(octal | ((1 << (32 - ip_int_octal_to_string(octal).count('1'))) - 1))\ndef get_first_host_address(ip):\n    '''\n    Write a function to get the first host address from an ip address.\n    '''\n    octal = ip_octal_string_to_int(ip)\n    return ip_int_octal_to_string(octal | 1)\ndef get_last_host_address(ip):\n    '''\n    Write a function to get the last host address from an ip address.\n    '''\n    octal = ip_octal_string_to_int(ip)\n    return ip_int_octal_to_string(octal | 2)\ndef get_network_address(ip):\n    '''\n    Write a function to get the network address from an ip address.\n    '''\n    octal = ip_octal_string_to_int(ip)\n    return ip",
        "num_ids": 23
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    num = int(ip)\n    ip = str(num)\n    return ip\n",
        "num_ids": 22
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip == '0.0.0.0':\n        return ip\n    else:\n        return ip[:3]\n",
        "num_ids": 32
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if not isinstance(ip,int):\n        return None\n    return ip & 0xffff\n",
        "num_ids": 25
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_parts = ip.split('.')\n    if len(ip_parts) < 4:\n        return ip\n    else:\n        ip_parts = [int(num) for num in ip_parts]\n        for index,num in enumerate(ip_parts):\n            if num!= 0:\n                ip_parts[index] = num\n                break\n        return '.'.join(map(str,ip_parts))\n",
        "num_ids": 103
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            even_list.append(list1[i])\n        else:\n            odd_list.append(list1[i])\n    odd_list = list(set(odd_list))\n    even_list = list(set(even_list))\n    odd_sum = 0\n    for i in range(len(odd_list)):\n        odd_sum += odd_list[i]\n    even_sum = 0\n    for i in range(len(even_list)):\n        even_sum += even_list[i]\n    return abs(odd_sum - even_sum)\n",
        "num_ids": 175
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list2 = []\n    for num in list1:\n        if num % 2 == 0:\n            list2.append(num)\n            list2.append(abs(len(list2) - 1))\n        else:\n            list2.append(num)\n    print(list2)\n    return abs(len(list2) - 1)\n",
        "num_ids": 84
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return None\n    even = list1[0]\n    odd = list1[1]\n    if even is None and odd is None:\n        return None\n    if even is None and odd is not None:\n        return odd - even\n    if even is not None and odd is None:\n        return even - odd\n    if even is not None and odd is not None:\n        if even % 2 == 0 and odd % 2 == 1:\n            return odd - even\n        elif even % 2 == 1 and odd % 2 == 0:\n            return even - odd\n        elif even % 2 == 1 and odd % 2 == 1:\n            return odd - even\n        elif even % 2 == 0 and odd % 2 == 0:\n            return even - odd\n    else:\n        return None\n",
        "num_ids": 194
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    else:\n        if list1[0] % 2 == 0:\n            return [list1[0] - list1[1]] + diff_even_odd(list1[2:])\n        else:\n            return diff_even_odd(list1[1:]) + [list1[0] - list1[1]]\n",
        "num_ids": 94
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return abs(list1[0] - list1[-1])\n    \n    \ndef diff_even_odd_mul(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return abs(list1[0] * list1[-1])\n    \n    \ndef diff_even_odd_sum(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return sum(list1[0:2]) - sum(list1[1:-1])\n    \n    \ndef diff_even_odd_sum_mul(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return sum(list1[0:2]) * sum(list1[1:-1])\n    \n    \ndef diff_even_odd_sum_mul_even(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return sum(list1[0:2]) * (sum(list1[1:-1]) + list1[0] + list1[-1]) / 2\n    \n    \ndef diff_even_odd_sum_mul_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return sum(list1[0:2]) * (sum(list1[1:-1]) + list1[0] + list1[-1]) / 2 - list1[0]\n    \n    \ndef diff_even_odd_sum_mul_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return sum(list1[0:2]) * (sum(list1[1:-1]) + list1[0] + list1[-1]) / 2 - sum(list1[0:2])\n    \n    \ndef diff_even_odd_sum_mul_odd_even(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return sum(list1[0:2]) * (sum(list1[1:-1]) + list1[0] + list1[-1]) / 2 - sum(list1[0:2]) * (sum(list1[1:-1]) + list1[0] + list1[-1]) / 2\n    \n    \ndef diff_even_odd_sum_mul_odd_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return sum(list1[0:2]) * (sum(list1[1:-1]) + list1[0] + list1[-1]) / 2 - sum(list1[0:2]) * (sum(list1[1:-1]) + list1[0] + list1[-1]) / 2 * (sum(list1[0:2]) + sum(list1[1:-1]) + list1[0] + list1[-1]) / 2\n    \n    \ndef diff_even_odd_sum_mul_odd_even_odd_even(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return sum(list1[0:2]) * (sum(list1[1:-1]) + list1[0] + list1[-1]) / 2 - sum(list1[0:2]) * (sum(list1[1:-1]) + list1[0] + list1[-1]) / 2 * (sum(list1[0:2]) + sum(list1[1:-1]) + list1[0] + list1[-1]) / 2\n    \n    \ndef diff_even_odd_sum_mul_odd_even_odd_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return sum(list1[0:2]) * (sum(list1[1:-1]) + list1[0] + list1[-1]) / 2 - sum(list1[0:2]) * (sum(list1[1:-1]) + list1[0] + list1[-1]) / 2 * (sum(list1[0:2]) + sum(list1[1:-1]) + list1[0] + list1[-1]) / 2\n    \n    \ndef diff_even_odd_sum_mul_odd_even_odd_odd_even(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return sum(list1[0:2]) * (sum(list1[1:-1]) + list1[0] + list1[-1]) / 2 - sum(list1[0:2]) * (sum(list1[1:-1]) + list1[0] + list1[-1]) / 2 * (sum(list1[0:2]) + sum(list1[1:-1]) + list1[0] + list1[-1]) / 2\n    \n    \ndef diff_even_odd_sum_mul_odd_even_odd_odd_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return sum(list1[0:2]) * (sum(list1[1:-1]) + list1[0] + list1[-1]) / 2 - sum(list1[0:2]) * (sum(list1[1:-1]) + list1[0] + list1[-1]) / 2 * (sum(list1[0:2]) + sum(list1[1:-1]) + list1[0] + list1[-1]) / 2\n    \n    \ndef diff_even_odd_sum_mul_odd_even_odd_odd_odd_even(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return sum(list1[0:2]) * (sum(list1[1:-1]) + list1[0] + list1[-1]) / 2 - sum(list1[0:2]) * (sum(list1[1:-1]) + list1[0] + list1[-1]) / 2 * (sum(list1[0:2]) + sum(list1[1:-1]) + list1[0] + list1[-1]) / 2\n    \n    \ndef diff_even_odd_sum_mul_odd_even_odd_odd_odd_odd_even(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return sum(list1[0:2]) * (sum(list1[1:-1]) + list1[0] + list1[-1]) / 2 - sum(list1[0:2]) * (sum(list1[1:-1]) + list1[0] + list1[-1]) / 2 * (sum(list1[0:2]) + sum(list1[1:-1]) + list1[0] + list1[-1]) / 2\n    \n    \ndef diff_even_odd_sum_mul_odd_even_odd_odd_odd_odd_odd_even(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return sum(list1[0:2]) * (sum(list1[1:-1]) + list1[0] + list1[-1]) / 2 - sum(list1[0:2]) * (sum(list1[1:-1]) + list1[0] + list1[-1]) / 2 * (sum(list1[0:2]) + sum(list1[1:-1]) + list1[0] + list1[-1]) / 2\n    \n    ",
        "num_ids": 115
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    \n    even_numbers = []\n    odd_numbers = []\n",
        "num_ids": 20
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return None\n    \n    if len(list1) == 1:\n        return list1[0]\n    \n    even = 0\n    odd = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    \n    return abs(even-odd)\n",
        "num_ids": 101
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd = 0\n    even = 0\n    for i in list1:\n        if i % 2 == 0:\n            even += i\n        else:\n            odd += i\n    return even - odd\n",
        "num_ids": 49
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_list = []\n    even_list = []\n    for i in list1:\n        if i % 2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    return odd_list[0] - even_list[0]\n",
        "num_ids": 73
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_num = i\n        else:\n            odd_num = i\n    return abs(even_num - odd_num)\n",
        "num_ids": 64
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # str1 = '011011011'\n    # str2 = '011011011'\n    # str1 = '00101'\n    # str2 = '11111'\n    # str1 = '000001'\n    # str
        "num_ids": 2001
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            str1,str2 = str2,str1\n            count += 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    c=0\n    if len(str1)!=len(str2):\n        return -1\n    for i in range(len(str1)):\n        if str1[i]!=str2[i]:\n            c=c+1\n    return c\ndef test_min_Swaps():\n    print('Test 1:')\n    assert min_Swaps('0110101','0110111')==2\n    print('Test 2:')\n    assert min_Swaps('0110101','0110111')==-1\n    print('Test 3:')\n    assert min_Swaps('1010101','0110111')==4\n    print('Test 4:')\n    assert min_Swaps('1010101','0110111')==-1\n    print('Test 5:')\n    assert min_Swaps('1010101','0110101')==-1\n    print('Test 6:')\n    assert min_Swaps('1010101','0110111')==4\n    print('Test 7:')\n    assert min_Swaps('1010101','0110101')==4\n    print('Test 8:')\n    assert min_Swaps('0110101','0110111')==4\n    print('Test 9:')\n    assert min_Swaps('0110101','0110101')==4\n    print('Test 10:')\n    assert min_Swaps('0110101','0110111')==-1\n    print('Test 11:')\n    assert min_Swaps('0110101','0110101')==4\n    print('Test 12:')\n    assert min_Swaps('0110101','0110111')==-1\n    print('Test 13:')\n    assert min_Swaps('0110101','0110101')==4\n    print('Test 14:')\n    assert min_Swaps('0110101','0110111')==-1\n    print('Test 15:')\n    assert min_Swaps('0110101','0110101')==4\n    print('Test 16:')\n    assert min_Swaps('0110101','0110111')==-1\n    print('Test 17:')\n    assert min_Swaps('0110101','0110101')==4\n    print('Test 18:')\n    assert min_Swaps('0110101','0110111')==-1\n    print('Test 19:')\n    assert min_Swaps('0110101','0110101')==4\n    print('Test 20:')\n    assert min_Swaps('0110101','0110111')==-1\n    print('Test 21:')\n    assert min_Swaps('0110101','0110101')==4\n    print('Test 22:')\n    assert min_Swaps('0110101','0110111')==-1\n    print('Test 23:')\n    assert min_Swaps('0110101','0110101')==4\n    print('Test 24:')\n    assert min_Swaps('0110101','0110111')==-1\n    print('Test 25:')\n    assert min_Swaps('0110101','0110101')==4\n    print('Test 26:')\n    assert min_Swaps('0110101','0110111')==-1\n    print('Test 27:')\n    assert min_Swaps('0110101','0110101')==4\n    print('Test 28:')\n    assert min_Swaps('0110101','0110111')==-1\n    print('Test 29:')\n    assert min_Swaps('0110101','0110101')==4\n    print('Test 30:')\n    assert min_Swaps('0110101','0110111')==-1\n    print('Test 31:')\n    assert min_Swaps('0110101','0110101')==4\n    print('Test 32:')\n    assert min_Swaps('0110101','0110111')==-1\n    print('Test 33:')\n    assert min_Swaps('0110101','0110101')==4\n    print('Test 34:')\n    assert min_Swaps('0110101','0110111')==-1\n    print('Test 35:')\n    assert min_Swaps('0110101','0110101')==4\n    print('Test 36:')\n    assert min_Swaps('0110101','0110111')==-1\n    print('Test 37:')\n    assert min_Swaps('0110101','0110101')==4\n    print('Test 38:')\n    assert min_Swaps('0110101','0110111')==-1\n    print('Test 39:')\n    assert min_Swaps('0110101','0110101')==4\n    print('Test 40:')\n    assert min_Swaps('0110101','0110111')==-1\n    print('Test 41:')\n    assert min_Swaps('0110101','0110101')==4\n    print('Test 42:')\n    assert min_Swaps('0110101','0110111')==-1\n    print('Test 43:')\n    assert min_Swaps('0110101','0110101')==4\n    print('Test 44:')\n    assert min_Swaps('0110101','0110111')==-1\n    print('Test 45:')\n    assert min_Swaps('0110101','0110101')==4\n    print('Test 46:')\n    assert min_Swaps('0110101','0110111')==-1\n    print('Test 47:')\n    assert min_Swaps('0110101','0110101')==4\n    print('Test 48:')\n    assert min_Swaps('0110101','0110111')==-1\n    print('Test 49:')\n    assert min_Swaps('0110101','0110101')==4\n    print('Test 50:')\n    assert min_Swaps('0110101','0110111')==-1\n    print('Test 51:')\n    assert min_Swaps('0110101','0110101')==4\n    print('Test 52:')\n    assert min_Swaps('0110101','0110111')==-1\n    print('Test 53:')\n    assert min_Swaps('0110101','0110101')==4\n    print('Test 54:')\n    assert min_Swaps('0110101','0110111')==-1\n    print('Test 55:')\n    assert min_Swaps('0110101','0110101')==4\n    print('Test 56:')\n    assert min_Swaps('0110101','0110111')==-1\n    print('Test 57:')\n    assert min_Swaps('0110101','0110101')==4\n    print('Test 58:')\n    assert min_Swaps('0110101','0110111')==-1\n    print('Test 59:')\n    assert min_Swaps('0110101','0110101')==4\n    print('Test 60:')\n    assert min_Swaps('0110101','0110111')==-1\n    print('Test 61:')\n    assert min_Swaps('0110101','0110101')==4\n    print('Test 62:')\n    assert min_Swaps('0110101','0110111')==-1\n    print('Test 63:')\n    assert min_Swaps('0110101','0110101')==4\n    print('Test 64:')\n    assert min_Swaps('0110101','0110111')==-1\n    print('Test 65:')\n    assert min_Swaps('0110101','0110101')==4\n    print('Test 66:')\n    assert min_Swaps('0110101','0110111')==-1\n    print('Test 67:')\n    assert min_Swaps('0110101','0110101')==4\n    print('Test 68:')\n    assert min_Swaps('0110101','0110111')==-1\n    print('Test 69:')\n    assert min_Swaps('0110101','0110101')==4\n    print('Test 70:')\n    assert min_Swaps('0110101','0110111')==-1\n    print('Test 71:')\n    assert min_Swaps('0110101','0110101')==4\n    print('Test 72:')\n    assert min_Swaps('0110101','0110111')==-1\n    print('Test 73:')\n    assert min_Swaps('0110101','0110",
        "num_ids": 2002
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Step 1: Get the two strings and store in a list\n    str1 = list(str1)\n    str2 = list(str2)\n",
        "num_ids": 37
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    len1=len(str1)\n    len2=len(str2)\n    \n    if (len1!=len2) : return -1\n    \n    count=0\n    \n    for i in range(0,len1) :\n        if(str1[i]!=str2[i]) :\n            if (str1[i]=='0') :\n                str1=str1[:i]+'1'+str1[i+1:]\n            else : \n                str1=str1[:i]+'0'+str1[i+1:]\n            count+=1\n    return count\n",
        "num_ids": 150
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(0,len(str1)) :\n        if(str1[i]!=str2[i]) :\n            count += 1\n    return count\n    \nif __name__ == \"__main__\" :\n    str1 = input(\"Enter the string : \")\n    str2 = input(\"Enter the string : \")\n    print(min_Swaps(str1,str2))\n",
        "num_ids": 103
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n=len(str1)\n    arr = list(str1)\n    arr1=list(str2)\n    arr2=[]\n    for i in range(0,n):\n        arr2.append(arr[i])\n",
        "num_ids": 58
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    x = 0\n    str1 = str1.split(' ')\n    str2 = str2.split(' ')\n    for i in range(len(str1)) :\n        for j in range(len(str2)) :\n            if str1[i]==str2[j] :\n                break\n        else :\n            x += 1\n    return x\n",
        "num_ids": 88
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    str1 = '0b'+str1\n    str2 = '0b'+str2\n    for i in range(0,len(str1)-1) :\n        if (str1[i]!= str2[i]) :\n            count+=1\n            for j in range(i+1,len(str1)) :\n                if (str1[j] == str2[i]):\n                    str1 = str1[:j]+str1[j+1:]\n                    break\n                elif(str1[j]!=str2[i]) :\n                    str1 = str1[:j]+str1[j+1:]\n                    break\n    \n    print(count)\n    return count\n",
        "num_ids": 175
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)!=len(str2):\n        return -1\n",
        "num_ids": 21
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    b = (2**31)-1\n    for x in tuple_list:\n        if x > b:\n            return -1\n    return b\ndef sum_tuple(tuple_list):\n    '''\n    Write a function to sum the elements in a given tuple.\n    '''\n    b = 0\n    for x in tuple_list:\n        b += x\n    return b\ndef common_element(list1, list2):\n    '''\n    Write a function to find the common element in two lists.\n    '''\n    i = 0\n    while i < len(list1):\n        if list1[i] in list2:\n            return list1[i]\n        i += 1\n    return -1\ndef common_element_index(list1, list2):\n    '''\n    Write a function to find the common element in two lists and return its index.\n    '''\n    i = 0\n    while i < len(list1):\n        if list1[i] in list2:\n            return list1.index(list1[i])\n        i += 1\n    return -1\ndef is_element_in_list(element, list):\n    '''\n    Write a function to check whether the given element is in the list or not.\n    '''\n    i = 0\n    while i < len(list):\n        if list[i] == element:\n            return 1\n        i += 1\n    return 0\ndef is_element_in_list_index(element, list):\n    '''\n    Write a function to check whether the given element is in the list or not.\n    '''\n    i = 0\n    while i < len(list):\n        if list[i] == element:\n            return i\n        i += 1\n    return -1\ndef in_list(element, list):\n    '''\n    Write a function to check whether the given element is in the list or not.\n    '''\n    i = 0\n    while i < len(list):\n        if list[i] == element:\n            return 1\n        i += 1\n    return 0\ndef in_list_index(element, list):\n    '''\n    Write a function to check whether the given element is in the list or not.\n    '''\n    i = 0\n    while i < len(list):\n        if list[i] == element:\n            return i\n        i += 1\n    return -1\ndef unpack_list(list_tuple):\n    '''\n    Write a function to unpack the list into a tuple.\n    '''\n    return tuple(list_tuple)\ndef unpack_tuple(list_tuple):\n    '''\n    Write a function to unpack the list into a tuple.\n    '''\n    return list(list_tuple)\ndef write_to_file(file_path, content):\n    '''\n    Write a function to write content to a given file.\n    '''\n    with open(file_path, \"w\") as file:\n        file.write(content)\ndef read_from_file(file_path):\n    '''\n    Write a function to read content from a given file.\n    '''\n    with open(file_path, \"r\") as file:\n        content = file.read()\n    return content\ndef replace_in_string(string, old_string, new_string):\n    '''\n    Write a function to replace the given old_string with the new_string in the given string.\n    '''\n    string = string.replace(old_string, new_string)\n    return string\ndef read_from_file_with_replacement(file_path, old_string, new_string):\n    '''\n    Write a function to read content from a given file, and replace the old_string with the new_string if the old_string is found in the file.\n    '''\n    with open(file_path, \"r\") as file:\n        content = file.read()\n        content = replace_in_string(content, old_string, new_string)\n    return content\ndef string_frequency_list(string):\n    '''\n    Write a function to count the frequency of characters in the given string.\n    '''\n    freq_list = []\n    freq_dict = {}\n    for char in string:\n        freq_dict[char] = freq_dict.get(char, 0) + 1\n    for key, value in freq_dict.items():\n        freq_list.append((key, value))\n    freq_list.sort(key=lambda x: x[1], reverse=True)\n    return freq_list\ndef remove_duplicate_from_list(list):\n    '''\n    Write a function to remove all duplicates in the given list.\n    '''\n    set_list = set(list)\n    new_list = list(set_list)\n    return new_list\ndef remove_duplicate_from_list_with_set(list):\n    '''\n    Write a function to remove all duplicates in the given list.\n    '''\n    set_list = set(list)\n    new_list = list(set_list)\n    return new_list\ndef remove_duplicate_from_list_with_sort(list):\n    '''\n    Write a function to remove all duplicates in the given list.\n    '''\n    list.sort()\n    new_list = list[:]\n    i = 1\n    while i < len(new_list):\n        if new_list[i] == new_list[i - 1]:\n            new_list.pop(i)\n        else:\n            i += 1\n    return new_list\ndef remove_duplicate_from_list_with_sort_with_set(list):\n    '''\n    Write a function to remove all duplicates in the given list.\n    '''\n    list.sort()\n    new_list = list[:]\n    i = 1\n    while i < len(new_list):\n        if new_list[i] == new_list[i - 1]:\n            new_list.pop(i)\n        else:\n            i += 1\n    return new_list\ndef remove_duplicate_from_list_with_sort_with_set_using_two_pointers(list):\n    '''\n    Write a function to remove all duplicates in the given list.\n    '''\n    list.sort()\n    new_list = list[:]\n    i = 0\n    while i < len(new_list):\n        if new_list[i] == new_list[i + 1]:\n            new_list.pop(i)\n        else:\n            i += 1\n    return new_list\ndef remove_duplicate_from_list_with_sort_with_set_using_two_pointers_with_sorting(list):\n    '''\n    Write a function to remove all duplicates in the given list.\n    '''\n    list.sort()\n    new_list = list[:]\n    i = 0\n    while i < len(new_list):\n        if new_list[i] == new_list[i + 1]:\n            new_list.pop(i)\n        else:\n            i += 1\n    return new_list\ndef remove_duplicate_from_list_with_set_comprehension(list):\n    '''\n    Write a function to remove all duplicates in the given list.\n    '''\n    set_list = set(list)\n    new_list = list[:]\n    return list[0:len(list)]\ndef rotate_list_by_index(list, index):\n    '''\n    Write a function to rotate the given list by the given index.\n    '''\n    list.reverse()\n    list = list[index:] + list[:index]\n    return list\ndef rotate_list_by_index_with_sorting(list, index):\n    '''\n    Write a function to rotate the given list by the given index.\n    '''\n    list.sort()\n    list = list[index:] + list[:index]\n    return list\ndef rotate_list_by_index_with_sorting_comprehension(list, index):\n    '''\n    Write a function to rotate the given list by the given index.\n    '''\n    list.sort()\n    list = list[index:] + list[:index]\n    return list\ndef is_list_palindrome_without_reversal(list):\n",
        "num_ids": 44
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size = 0\n    for element in tuple_list:\n        tuple_size += sys.getsizeof(element)\n    return tuple_size\n",
        "num_ids": 40
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size=0\n    for i in tuple_list:\n        size=size+sys.getsizeof(i)\n    return size\n",
        "num_ids": 34
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_list = tuple(tuple_list)\n    size = sys.getsizeof(tuple_list)\n    print(f'{tuple_list} : {size}')\n",
        "num_ids": 48
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 16
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    length = len(tuple_list)\n    return length * 8\n",
        "num_ids": 19
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    count=0\n    for i in tuple_list:\n        count+=sys.getsizeof(i)\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 16
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    \n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 18
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return(sys.getsizeof(tuple_list))\n",
        "num_ids": 17
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Edge cases\n    if (k < 0) or (k > len(arr1) + len(arr2)):\n        return -1\n    if len(arr1) == 0:\n        return arr2[k - 1]\n    if len(arr2) == 0:\n        return arr1[k - 1]\n",
        "num_ids": 78
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    low = 0\n    high = len(arr1)-1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr1[mid] == arr2[k-1]:\n            return arr1[mid]\n        elif arr1[mid] < arr2[k-1]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    if arr1[low] == arr2[k-1]:\n        return arr1[low]\n    else:\n        return arr2[k-1]\n    \nprint(find_kth([1,3,5,7,9],[2,4,6,8,10],5))\n",
        "num_ids": 164
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def find_in_sorted_arr(arr1, arr2, k):\n        if len(arr1) == 0:\n            return -1\n        if len(arr2) == 0:\n            return -1\n        if arr1[-1] < arr2[-1]:\n            return find_in_sorted_arr(arr1[:-1], arr2, k)\n        if arr1[-1] > arr2[-1]:\n            return find_in_sorted_arr(arr1, arr2[:-1], k)\n        if arr1[-1] == arr2[-1]:\n            return k\n    if len(arr1) == 0:\n        return -1\n    if len(arr2) == 0:\n        return -1\n    return find_in_sorted_arr(arr1, arr2, k)\n",
        "num_ids": 204
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    length1 = len(arr1)\n    length2 = len(arr2)\n",
        "num_ids": 22
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while (i < len(arr1) and j < len(arr2)):\n        if (arr1[i] <= arr2[j]):\n            i = i + 1\n        else:\n            j = j + 1\n    if (k > i):\n        return find_kth(arr2, arr1, k-i)\n    return arr1[i-1]\n",
        "num_ids": 102
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) <= k or len(arr2) <= k:\n        return -1\n    \n    m = len(arr1)\n    n = len(arr2)\n    \n    left = 0\n    right = m\n    \n    while left <= right:\n        mid = left + (right-left)//2\n        \n        if arr1[mid] == arr2[k-1]:\n            return k-1\n        \n        if arr1[mid] < arr2[k-1]:\n            left = mid+1\n        \n        else:\n            right = mid-1\n    \n    if k == left:\n        return left\n    else:\n        return left+1\n",
        "num_ids": 165
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # flag = False\n    # for i in range(len(arr1)):\n    #     for j in range(len(arr2)):\n    #         if arr1[i] == arr2[j]:\n    #             if i+j == k:\n    #                 flag = True\n    #                 break\n    #     if flag:\n    #         break\n    # return arr1[i] if flag else arr2[j]\n",
        "num_ids": 105
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    if n1 == 0 or n2 == 0:\n        return -1\n    if n1 == 1 and k == 1:\n        return arr1[0]\n    if n2 == 1 and k == n1:\n        return arr2[0]\n    if n1 < k or k < 0:\n        return -1\n    if n2 < k or k < 0:\n        return -1\n    low1, high1 = 0, n1 - 1\n    low2, high2 = 0, n2 - 1\n    while low1 <= high1 and low2 <= high2:\n        mid1 = low1 + (high1 - low1) // 2\n        mid2 = low2 + (high2 - low2) // 2\n        if arr1[mid1] < arr2[mid2]:\n            if k <= mid1:\n                high1 = mid1 - 1\n            else:\n                low1 = mid1 + 1\n        elif arr1[mid1] > arr2[mid2]:\n            if k <= mid2:\n                high2 = mid2 - 1\n            else:\n                low2 = mid2 + 1\n        else:\n            if k == mid1:\n                return arr1[mid1]\n            elif k == mid2:\n                return arr2[mid2]\n            else:\n                return min(arr1[mid1], arr2[mid2])\n    return -1\n    \n    \n    \n    # Alternate solution: O(log(min(m,n)))\n    '''\n    if len(arr1) == 0 or len(arr2) == 0:\n        return -1\n    if len(arr1) == 1 and len(arr2) == 1:\n        return min(arr1[0], arr2[0])\n    \n    low1, high1 = 0, len(arr1) - 1\n    low2, high2 = 0, len(arr2) - 1\n    while low1 <= high1 and low2 <= high2:\n        mid1 = low1 + (high1 - low1) // 2\n        mid2 = low2 + (high2 - low2) // 2\n        if arr1[mid1] < arr2[mid2]:\n            if k <= mid1:\n                high1 = mid1 - 1\n            else:\n                low1 = mid1 + 1\n        elif arr1[mid1] > arr2[mid2]:\n            if k <= mid2:\n                high2 = mid2 - 1\n            else:\n                low2 = mid2 + 1\n        else:\n            if k == mid1:\n                return arr1[mid1]\n            elif k == mid2:\n                return arr2[mid2]\n            else:\n                return min(arr1[mid1], arr2[mid2])\n    return -1\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1330
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    i = 0\n    j = 0\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    return arr1[i] if i == n1 else arr2[j]\n",
        "num_ids": 92
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    len1 = len(arr1)\n    len2 = len(arr2)\n    \n    low = 0\n    high = len1\n    \n    while low <= high:\n        mid1 = (low + high) // 2\n        mid2 = k - mid1\n        \n        if mid1 > 0 and arr1[mid1 - 1] > arr2[mid2]:\n            high = mid1 - 1\n        elif mid1 < len1 and arr1[mid1] < arr2[mid2]:\n            low = mid1 + 1\n        else:\n            if mid1 == 0:\n                res = arr2[mid2 - 1]\n            else:\n                res = arr1[mid1 - 1]\n            \n            if mid2 == 0:\n                kth_el = arr1[mid1]\n            else:\n                kth_el = arr2[mid2 - 1]\n            \n            break\n    return res\n",
        "num_ids": 220
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum = sum + digit ** 3\n        temp = temp // 10\n    return True if sum == number else False\n",
        "num_ids": 52
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    strnumber = str(number)\n    \n    power = len(strnumber)\n    sum = 0\n    \n    for i in range(0, power):\n        sum = sum + int(strnumber[i])**power\n        \n    if sum == int(strnumber):\n        print(f\"{strnumber} is an Armstrong number\")\n    else:\n        print(f\"{strnumber} is not an Armstrong number\")\n    \n    \ndef reverse_string(string):\n    '''\n    Write a function to reverse the given string.\n    '''\n    \n    strnumber = str(string)\n    return strnumber[::-1]\n    \ndef display_binary(n):\n    '''\n    Write a function to convert the decimal to binary, octal and hexadecimal numbers.\n    '''\n    \n    binary = bin(n)\n    octal = oct(n)\n    hexadecimal = hex(n)\n    \n    print(f\"Decimal {n} : {binary}\")\n    print(f\"Octal : {octal}\")\n    print(f\"Hexadecimal : {hexadecimal}\")\n    \ndef sum_of_digits(n):\n    '''\n    Write a function that returns the sum of the digits of the given number\n    '''\n    \n    return sum(map(int, str(n)))\n    \ndef factorial(n):\n    '''\n    Write a function that returns the factorial of the given number\n    '''\n    \n    fact = 1\n    for i in range(2, n+1):\n        fact = fact * i\n    return fact\n    \ndef sum_of_list(lst):\n    '''\n    Write a function that takes a list and return the sum of all its elements.\n    '''\n    \n    return sum(lst)\n    \ndef sum_of_list_by_lambda(lst):\n    '''\n    Write a function that takes a list and return the sum of all its elements using lambda.\n    '''\n    \n    return sum(lst)\n    \ndef sum_of_list_by_map(lst):\n    '''\n    Write a function that takes a list and return the sum of all its elements using map.\n    '''\n    \n    return sum(map(int, lst))\n    \ndef sum_of_list_by_filter(lst):\n    '''\n    Write a function that takes a list and return the sum of all its elements using filter.\n    '''\n    \n    return sum(filter(bool, lst))\n    \ndef sum_of_list_by_filter_by_lambda(lst):\n    '''\n    Write a function that takes a list and return the sum of all its elements using filter and lambda.\n    '''\n    \n    return sum(filter(lambda x: bool(x), lst))\n    \ndef reverse_list_by_list_comprehension(lst):\n    '''\n    Write a function that takes a list and return the reversed list.\n    '''\n    \n    return lst[::-1]\n    \ndef reverse_list_by_list_comprehension_using_generator_expression(lst):\n    '''\n    Write a function that takes a list and return the reversed list.\n    '''\n    \n    return reversed(lst)\n    \ndef reverse_list_by_list_comprehension_using_generator_expression_by_comp(lst):\n    '''\n    Write a function that takes a list and return the reversed list using generator expression.\n    '''\n    \n    return (x for x in reversed(lst))\n    \ndef reverse_list_by_list_comprehension_using_generator_expression_by_comp_using_yield(lst):\n    '''\n    Write a function that takes a list and return the reversed list using generator expression.\n    '''\n    \n    return (yield x for x in reversed(lst))\n    \ndef reverse_list_by_list_comprehension_using_generator_expression_by_comp_using_yield_by_comp(lst):\n    '''\n    Write a function that takes a list and return the reversed list using generator expression.\n    '''\n    \n    return (x for x in reversed(lst))\n    \ndef reverse_list_by_list_comprehension_using_generator_expression_by_comp_using_yield_by_comp_by_comp(lst):\n    '''\n    Write a function that takes a list and return the reversed list using generator expression.\n    '''\n    \n    return (yield x for x in reversed(lst))\n    \ndef reverse_list_by_list_comprehension_using_generator_expression_by_comp_using_yield_by_comp_by_comp_by_comp(lst):\n    '''\n    Write a function that takes a list and return the reversed list using generator expression.\n    '''\n    \n    return (x for x in reversed(lst))\n    \ndef reverse_list_by_list_comprehension_using_generator_expression_by_comp_using_yield_by_comp_by_comp_by_comp_by_comp(lst):\n    '''\n    Write a function that takes a list and return the reversed list using generator expression.\n    '''\n    \n    return (yield x for x in reversed(lst))\n    \ndef reverse_list_by_list_comprehension_using_generator_expression_by_comp_using_yield_by_comp_by_comp_by_comp_by_comp_by_comp(lst):\n    '''\n    Write a function that takes a list and return the reversed list using generator expression.\n    '''\n    \n    return (x for x in reversed(lst))\n    \ndef reverse_list_by_list_comprehension_using_generator_expression_by_comp_using_yield_by_comp_by_comp_by_comp_by_comp_by_comp_by_comp(lst):\n    '''\n    Write a function that takes a list and return the reversed list using generator expression.\n    '''\n    \n    return (yield x for x in reversed(lst))\n    \ndef reverse_list_by_list_comprehension_using_generator_expression_by_comp_using_yield_by_comp_by_comp_by_comp_by_comp_by_comp_by_comp_by_comp(lst):\n    '''\n    Write a function that takes a list and return the reversed list using generator expression.\n    '''\n    \n    return (x for x in reversed(lst))\n    \ndef reverse_list_by_list_comprehension_using_generator_expression_by_comp_using_yield_by_comp_by_comp_by_comp_by_comp_by_comp_by_comp_by_comp(lst):\n    '''\n    Write a function that takes a list and return the reversed list using generator expression.\n    '''\n    \n    return (yield x for x in reversed(lst))\n    \ndef reverse_list_by_list_comprehension_using_generator_expression_by_comp_using_yield_by_comp_by_comp_by_comp_by_comp_by_comp_by_comp_by_comp_by_comp(lst):\n    '''\n    Write a function that takes a list and return the reversed list using generator expression.\n    '''\n    \n    return (x for x in reversed(lst))\n    \ndef reverse_list_by_list_comprehension_using_generator_expression_by_comp_using_yield_by_comp_by_comp_by_comp_by_comp_by_comp_by_comp_by_comp_by_comp(lst):\n    '''\n    Write a function that takes a list and return the reversed list using generator expression.\n    '''\n    \n    return (yield x for x in reversed(lst))\n    \ndef reverse_list_by_list_comprehension_using_generator_expression_by_comp_using_yield_by_comp_by_comp_by_comp_by_comp_by_comp_by_comp_by_comp_by_comp_by_comp(lst):\n    '''\n    Write a function that takes a lis",
        "num_ids": 11
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    result = 0\n    sum_num = 0\n    while number > 0:\n        digit = number % 10\n        result = result * digit\n        number = number // 10\n    if result == number:\n        print(result)\n    else:\n        print('It is not armstrong number')\n",
        "num_ids": 70
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    n = number\n    while n > 0:\n        digit = n % 10\n        sum += digit ** 3\n        n = n // 10\n    if sum == number:\n        print('The given number', number, 'is armstrong')\n    else:\n        print('The given number', number, 'is not armstrong')\n",
        "num_ids": 82
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    # \n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    #\n    if number == sum:\n        return True\n    else:\n        return False\n",
        "num_ids": 65
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    number = str(number)\n    for i in range(len(number)):\n        sum = sum + int(number[i]) ** len(number)\n    if sum == int(number):\n        return True\n    else:\n        return False\n",
        "num_ids": 65
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp = temp // 10\n",
        "num_ids": 40
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp=number\n    num_list=[]\n    while temp > 0:\n        num_list.append(temp % 10)\n        temp = temp // 10\n    if sum(num_list) == number:\n        return True\n    else:\n        return False",
        "num_ids": 63
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_list = list(str(number))\n    while len(number_list) > 1:\n        number_list = sum([int(x) ** len(number_list) for x in number_list])\n        if number == number_list:\n            return True\n        else:\n            return False\n",
        "num_ids": 73
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number==0:\n        return False\n    sum=0\n    while number>0:\n        x=number%10\n        sum=sum+(x**3)\n        number=number//10\n    if sum==number:\n        return True\n    else:\n        return False\n",
        "num_ids": 68
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_numbers = 0\n    average_numbers = 0\n    if n == 1:\n        return(number)\n    else:\n        for i in range(n):\n            sum_numbers += number\n            number += 1\n            average_numbers = sum_numbers / n\n        return(sum_numbers, average_numbers)\n",
        "num_ids": 84
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while count < number:\n        sum = sum + count\n        count = count + 1\n    average = sum / number\n    return sum, average\n    \ndef multiply(a, b):\n    '''\n    Write a function to multiply two numbers a and b without using multiplication operator.\n    '''\n    return a * b\n",
        "num_ids": 8
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    pass\n    \ndef is_factor(num):\n    '''\n    Write a function that takes an integer and return True if the number is a factor of the input number.\n    '''\n    pass\n    \ndef power_two(n):\n    '''\n    Write a function to return the number of bits of n, that are equal to 1.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    while count < number:\n        total += count\n        count += 1\n    return total / number\n",
        "num_ids": 35
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(0,number):\n        sum = sum + i\n    average = sum / number\n    print(f\"sum is {sum} and average is {average}\")\n",
        "num_ids": 50
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number):\n        sum += i\n    average = sum / number\n    return sum, average\n",
        "num_ids": 34
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    def sum_of_numbers(number):\n        if number == 0:\n            return 0\n        else:\n            return number + sum_of_numbers(number-1)\n",
        "num_ids": 45
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1,number+1):\n        sum += i\n    average = sum / number\n    print('sum:',sum)\n    print('average:',average)\n",
        "num_ids": 55
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    print(\"function sum_average\")\n    sum = 0\n    average = 0\n    if number < 0:\n        print(\"Please enter a natural number.\")\n    else:\n        for i in range(1, number+1):\n            sum += i\n        average = sum / number\n        print(\"sum:\", sum, \"average:\", average)\n",
        "num_ids": 82
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    #your code here\n    sum = 0\n    for i in range(1,number+1):\n        sum += i\n    average = sum/number\n    print(sum)\n    print(average)\n",
        "num_ids": 50
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False\n    \ndef is_Odd(n) :\n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    if n%2!=0:\n        return True\n    else:\n        return False\n    \ndef is_Prime(n) :\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n>1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return False\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy3(n) :\n    '''\n    Write a python function to check whether the given number is divisible by 3 or not.\n    '''\n    if n%3==0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy5(n) :\n    '''\n    Write a python function to check whether the given number is divisible by 5 or not.\n    '''\n    if n%5==0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy7(n) :\n    '''\n    Write a python function to check whether the given number is divisible by 7 or not.\n    '''\n    if n%7==0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy17(n) :\n    '''\n    Write a python function to check whether the given number is divisible by 17 or not.\n    '''\n    if n%17==0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy19(n) :\n    '''\n    Write a python function to check whether the given number is divisible by 19 or not.\n    '''\n    if n%19==0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy27(n) :\n    '''\n    Write a python function to check whether the given number is divisible by 27 or not.\n    '''\n    if n%27==0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy29(n) :\n    '''\n    Write a python function to check whether the given number is divisible by 29 or not.\n    '''\n    if n%29==0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy37(n) :\n    '''\n    Write a python function to check whether the given number is divisible by 37 or not.\n    '''\n    if n%37==0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy41(n) :\n    '''\n    Write a python function to check whether the given number is divisible by 41 or not.\n    '''\n    if n%41==0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy47(n) :\n    '''\n    Write a python function to check whether the given number is divisible by 47 or not.\n    '''\n    if n%47==0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy53(n) :\n    '''\n    Write a python function to check whether the given number is divisible by 53 or not.\n    '''\n    if n%53==0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy59(n) :\n    '''\n    Write a python function to check whether the given number is divisible by 59 or not.\n    '''\n    if n%59==0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy61(n) :\n    '''\n    Write a python function to check whether the given number is divisible by 61 or not.\n    '''\n    if n%61==0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy67(n) :\n    '''\n    Write a python function to check whether the given number is divisible by 67 or not.\n    '''\n    if n%67==0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy71(n) :\n    '''\n    Write a python function to check whether the given number is divisible by 71 or not.\n    '''\n    if n%71==0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy77(n) :\n    '''\n    Write a python function to check whether the given number is divisible by 77 or not.\n    '''\n    if n%77==0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy79(n) :\n    '''\n    Write a python function to check whether the given number is divisible by 79 or not.\n    '''\n    if n%79==0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy83(n) :\n    '''\n    Write a python function to check whether the given number is divisible by 83 or not.\n    '''\n    if n%83==0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy87(n) :\n    '''\n    Write a python function to check whether the given number is divisible by 87 or not.\n    '''\n    if n%87==0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy89(n) :\n    '''\n    Write a python function to check whether the given number is divisible by 89 or not.\n    '''\n    if n%89==0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy93(n) :\n    '''\n    Write a python function to check whether the given number is divisible by 93 or not.\n    '''\n    if n%93==0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy97(n) :\n    '''\n    Write a python function to check whether the given number is divisible by 97 or not.\n    '''\n    if n%97==0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy101(n) :\n    '''\n    Write a python function to check whether the given number is divisible by 101 or not.\n    '''\n    if n%101==0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy103(n) :\n    '''\n    Write a python function to check whether the given number is divisible by 103 or not.\n    '''\n    if n%103==0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy109(n) :\n    '''\n    Write a python function to check whether the given number is divisible by 109 or not.\n    '''\n    if n%109==0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy117(n) :\n    '''\n    Write a python function to check whether the given number is divisible by 117 or not.\n    '''\n    if n%117==0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy121(n) :\n    '''\n    Write a python function to check whether the given number is divisible by 121 or not.\n    '''\n    if n%121==0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy127(n) :\n    '''\n    Write a python function to check whether the given number is divisible by 127 or not.\n    '''\n    if n%127==0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy131(n) :\n    '''\n    Write a python function to check whether the given number is divisible by 131 or not.\n    '''\n    if n%131==0:\n        return True\n    else:\n        return False\n    \ndef is_DivisibleBy137(n) :\n    '''\n    Write a python function to chec",
        "num_ids": 10
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n",
        "num_ids": 10
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n%2 == 0) : \n        return True\n    else : \n        return False\n    \ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    if (n%2!= 0) : \n        return True\n    else : \n        return False\n",
        "num_ids": 28
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 :\n        return True\n    else :\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True\n    else : \n        return False\n",
        "num_ids": 25
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True\n    else : \n        return False\ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    if n%2!= 0 : \n        return True\n    else : \n        return False\ndef is_Prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n > 1 : \n        for i in range(2,n) : \n            if n%i == 0 : \n                return False\n        return True\n    else : \n        return False\ndef is_Prime1(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n > 1 : \n        for i in range(2,n) : \n            if n%i == 0 : \n                return False\n        return True\n    else : \n        return False\ndef is_Prime2(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n > 1 : \n        for i in range(2,n) : \n            if n%i == 0 : \n                return False\n        return True\n    else : \n        return False\ndef is_Prime3(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n > 1 : \n        for i in range(2,n) : \n            if n%i == 0 : \n                return False\n        return True\n    else : \n        return False\ndef is_Prime4(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n > 1 : \n        for i in range(2,n) : \n            if n%i == 0 : \n                return False\n        return True\n    else : \n        return False\ndef is_Prime5(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n > 1 : \n        for i in range(2,n) : \n            if n%i == 0 : \n                return False\n        return True\n    else : \n        return False\ndef is_Prime6(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n > 1 : \n        for i in range(2,n) : \n            if n%i == 0 : \n                return False\n        return True\n    else : \n        return False\ndef is_Prime7(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n > 1 : \n        for i in range(2,n) : \n            if n%i == 0 : \n                return False\n        return True\n    else : \n        return False\ndef is_Prime8(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n > 1 : \n        for i in range(2,n) : \n            if n%i == 0 : \n                return False\n        return True\n    else : \n        return False\ndef is_Prime9(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n > 1 : \n        for i in range(2,n) : \n            if n%i == 0 : \n                return False\n        return True\n    else : \n        return False\ndef is_Prime10(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n > 1 : \n        for i in range(2,n) : \n            if n%i == 0 : \n                return False\n        return True\n    else : \n        return False\ndef is_Prime11(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n > 1 : \n        for i in range(2,n) : \n            if n%i == 0 : \n                return False\n        return True\n    else : \n        return False\ndef is_Prime12(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n > 1 : \n        for i in range(2,n) : \n            if n%i == 0 : \n                return False\n        return True\n    else : \n        return False\ndef is_Prime13(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n > 1 : \n        for i in range(2,n) : \n            if n%i == 0 : \n                return False\n        return True\n    else : \n        return False\ndef is_Prime14(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n > 1 : \n        for i in range(2,n) : \n            if n%i == 0 : \n                return False\n        return True\n    else : \n        return False\ndef is_Prime15(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n > 1 : \n        for i in range(2,n) : \n            if n%i == 0 : \n                return False\n        return True\n    else : \n        return False\ndef is_Prime16(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n > 1 : \n        for i in range(2,n) : \n            if n%i == 0 : \n                return False\n        return True\n    else : \n        return False\ndef is_Prime17(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n > 1 : \n        for i in range(2,n) : \n            if n%i == 0 : \n                return False\n        return True\n    else : \n        return False\ndef is_Prime18(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n > 1 : \n        for i in range(2,n) : \n            if n%i == 0 : \n                return False\n        return True\n    else : \n        return False\ndef is_Prime19(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n > 1 : \n        for i in range(2,n) : \n            if n%i == 0 : \n                return False\n        return True\n    else : \n        return False\ndef is_Prime20(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n > 1 : \n        for i in range(2,n) : \n            if n%i == 0 : \n                return False\n        return True\n    else : \n        return False\ndef is_Prime21(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n > 1 : \n        for i in range(2,n) : \n            if n%i == 0 : \n                return False\n        return True\n    else : \n        return False\ndef is_Prime22(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    if n > 1 : \n        for i in range(2,n) : \n            if n%i == 0 : \n                return False\n        return True\n    else : \n        return False",
        "num_ids": 49
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2 == 0): \n        return True\n    else: \n        return False\n",
        "num_ids": 26
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n    \nn = int(input(\"Enter the number : \"))\nprint(is_Even(n))\n",
        "num_ids": 34
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n%2==0) : \n        return True\n    else : \n        return False\n",
        "num_ids": 27
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) > 1:\n            return i\n    return None\n    \n",
        "num_ids": 33
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)-1):\n        if str1[i] == str1[i+1]:\n            return str1[i]\n    return \"No repeated character\"\n        \n",
        "num_ids": 50
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if len(str1) == 1:\n        return str1\n",
        "num_ids": 18
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str_list = list(str1)\n    for i in range(len(str_list)):\n        if str_list[i] in str_list[i+1:]:\n            return str_list[i]\n    return -1\n",
        "num_ids": 60
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    s=str1.lower()\n    n=len(s)\n    freq=[]\n    for i in range(n):\n        i_count=0\n        for j in range(i+1,n):\n            if(s[i]==s[j]):\n                i_count=i_count+1\n        freq.append(i_count)\n    max_occ=max(freq)\n    if max_occ>1:\n        return s[freq.index(max_occ)]\n    else:\n        return -1\n",
        "num_ids": 133
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    from collections import Counter\n    c = Counter(str1)\n    for i, j in c.items():\n        if j == 1:\n            return i\n    else:\n        return -1\n",
        "num_ids": 48
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if str1 == \"\":\n        return \"The string is empty\"\n    else:\n        str1 = str1.lower()\n        char = str1[0]\n        count = 1\n        for i in range(1,len(str1)):\n            if str1[i] == char:\n                count += 1\n                if count == 2:\n                    return f\"First repeated character is {char}\"\n            else:\n                char = str1[i]\n                count = 1\n    return \"No repeated character found\"\n",
        "num_ids": 124
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if str1 == \"\":\n        return None\n    for i in range(len(str1)):\n        if str1[i] in str1[i+1:]:\n            return str1[i]\n    return None\n    \nprint(first_repeated_char(\"hvbdvab\")) #return h\nprint(first_repeated_char(\"ff\")) #return None\nprint(first_repeated_char(\"\")) #return None\nprint(first_repeated_char(\"abcdef\")) #return None\n",
        "num_ids": 122
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # for each character\n    for i in range(len(str1)):\n        # check if it repeats\n        if str1[i] in str1[i+1:]:\n            # if it repeats, return index of the first repeat\n            return str1[i]\n    # else if there is no repeat, return -1\n    return -1\n",
        "num_ids": 84
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # for a repeated character find it and then return the index of that character\n    if not isinstance(str1, str):\n        raise ValueError(\"Invalid argument: str1 must be a string\")\n    for char in str1:\n        if str1.count(char) > 1:\n            return char\n    return None\n",
        "num_ids": 76
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = set()\n    for i in range(n):\n        j = i\n        while j > 0:\n            j = j//10\n            if j == 5:\n                ludic.add(i)\n                break\n            elif j == 6:\n                break\n    return list(ludic)\n",
        "num_ids": 75
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n <= 0: return []\n    ludic_numbers = []\n    for i in range(n+1):\n        if is_ludic(i):\n            ludic_numbers.append(i)\n    return lucid_numbers\n",
        "num_ids": 60
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = set()\n    for i in range(1,n):\n        if i > 1 and (i%10 == 0 or i%3 == 0 or i%7 == 0):\n            ludic.add(i)\n        else:\n            ludic.add(i+2)\n    return sorted(ludic)\n",
        "num_ids": 78
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if i % 7 == 0 or i % 5 == 0:\n            continue\n        elif i % 2 == 0:\n            if i % 3 == 0:\n                continue\n        elif i % 3 == 0:\n            if i % 5 == 0:\n                continue\n        else:\n            ludic_numbers.append(i)\n    return lucid_numbers\n",
        "num_ids": 109
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    n = int(n)\n    lucids = []\n    for i in range(2, n + 1):\n        s = sum(int(c) ** 2 for c in str(i))\n        if s == i:\n            lucids.append(i)\n    return lucids\n",
        "num_ids": 71
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for x in range(2,n):\n        l = 0\n        for y in range(1,x):\n            if x % y == 0:\n                l = 1\n                break\n        if l == 0:\n            ludic.append(x)\n    return lucid\n",
        "num_ids": 72
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Check if number is a multiple of 2\n    if n % 2 == 0:\n        n = n / 2\n        while n % 2 == 0:\n            n = n / 2\n    # Check if number is a multiple of 5\n    if n % 5 == 0:\n        n = n / 5\n        while n % 5 == 0:\n            n = n / 5\n    # Check if number is a multiple of 10\n    if n % 10 == 0:\n        n = n / 10\n        while n % 10 == 0:\n            n = n / 10\n    # Return the number if it is a multiple of both 2 and 5\n    if n % 15 == 0:\n        n = n / 15\n        while n % 15 == 0:\n            n = n / 15\n    return n\n",
        "num_ids": 183
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    n = int(n)\n    l = []\n    for i in range(1,n):\n        if '4' in str(i) or '7' in str(i) or '6' in str(i) or '9' in str(i):\n            l.append(i)\n    return l\n",
        "num_ids": 76
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    l = []\n    for i in range(n):\n        if is_lucid(i):\n            l.append(i)\n    return l\n    \ndef is_lucid(n):\n    '''\n    Write a function to determine if a given integer is a lucid number\n    '''\n    total = 0\n    for x in str(n):\n        total += int(x)\n    return total == n\n    \ndef get_lucids_list(n):\n    '''\n    Write a function to get all lucids numbers in a list\n    '''\n    return [x for x in range(n) if is_lucid(x)]\n    \ndef get_lucids_list_filtered(n):\n    '''\n    Write a function to get all lucids numbers in a list\n    '''\n    return list(filter(lambda x: is_lucid(x), range(n)))\n    \ndef get_lucids_list_filtered_2(n):\n    '''\n    Write a function to get all lucids numbers in a list\n    '''\n    return list(filter(lambda x: is_lucid(x), range(n)))\n    \ndef test_get_lucids_list():\n    n = 2\n    assert get_lucids_list(n) == [1, 3]\n    print('Success')\n    \ndef test_get_lucids_list_2():\n    n = 7\n    assert get_lucids_list_filtered(n) == [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 28, 29, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766, 768, 770, 772, 774, 776, 778, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868, 870, 872, 874, 876, 878, 880, 882, 884, 886, 888, 890, 892, 894, 896, 898, 900, 902, 904, 906, 908, 910, 912, 914, 916, 918, 920, 922, 924, 926, 928, 930, 932, 934, 936, 938, 940, 942, 944, 946, 948, 950, 952, 954, 956, 958, 960, 962, 964, 966, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 988, 990, 992, 994, 996, 998, 1000, 1002, 1004, 1006, 1008, 1010, 1012, 1014, 1016, 1018, 1020, 1022, 1024, 1026, 1028, 1030, 1032, 1034, 1036, 1038, 1040, 1042, 1044, 1046, 1048, 1050, 1052, 1054, 1056, 1058, 1060, 1062, 1064, 1066, 1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 1092, 1094, 1096, 1098, 1100, 1102, 1104, 1106, 1108, 1110, 1112, 1114, 1116, 1118, 1120, 1122, 1124, 1126, 1128, 1130, 1132, 1134, 1136, 1138, 1140, 1142, 1144, 1146, 1148, 1150, 1152, 1154, 1156, 1158, 1160, 1162, 1164, 1166, 1168, 1170, 1172, 1174, 1176, 1178, 1180, 1182, 1184, 1186, 1188, 1190, 1192, 1194, 1196, 1198, 1200, 1202, 1204, 1206, 1208, 1210, 1212, 1214, 1216, 1218, 1220, 1222, 1224, 1226, 1228, 1230, 1232, 1234, 1236, 1238, 1240, 1242, 1244, 1246, 1248, 1250, 1252, 1254, 1256, 1258, 1260, 1262, 1264, 1266, 1268",
        "num_ids": 1752
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(1, n + 1):\n        if (sum(int(d) for d in str(i)) == i):\n            lucids.append(i)\n    return lucids\n",
        "num_ids": 57
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    word = \"\"\n    for i in range(len(s)):\n        if s[i] == \" \":\n            reverse_words(word)\n            word = \"\"\n        else:\n            word += s[i]\n    reverse_words(word)\n    return word\n",
        "num_ids": 67
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(list(s.split(' '))[::-1])\n",
        "num_ids": 21
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Step 1: Convert the string to lowercase\n    s = s.lower()\n",
        "num_ids": 22
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n",
        "num_ids": 17
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split(' ')))\n",
        "num_ids": 18
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    l = s.split()\n    l.reverse()\n    return''.join(l)\n",
        "num_ids": 24
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words = words[::-1]\n    return''.join(words)\n",
        "num_ids": 28
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s:\n        return s\n    \n    words = s.split()\n    words = words[::-1]\n    return''.join(words)\n    \n    \n    \n    \n",
        "num_ids": 48
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(' ')\n    words = reversed(words)\n    return''.join(words)\n",
        "num_ids": 28
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    reverse = s.split(\" \")\n    reverse.reverse()\n    new_string = \" \".join(reverse)\n    print(new_string)\n",
        "num_ids": 38
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n                break\n    else:\n        return False\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    else:\n        return True\n",
        "num_ids": 45
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2,num):\n            if num % i == 0:\n                return False\n    return True\n",
        "num_ids": 57
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    import math\n    if num == 1:\n        return False\n    for i in range(2, int(math.sqrt(num) + 1)):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 56
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    elif num == 2 or num == 3:\n        return True\n    elif num % 2 == 0 or num % 3 == 0:\n        return False\n    else:\n        for i in range(5, int(num**0.5 + 1), 2):\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n        return True\n",
        "num_ids": 101
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2,int(num/2)):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 35
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n                break\n        else:\n            return True\n    else:\n        return False\n",
        "num_ids": 52
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n",
        "num_ids": 56
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, num // 2, 2):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 69
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2:\n        return True\n    elif num%2 == 0 or num == 1:\n        return False\n",
        "num_ids": 31
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n",
        "num_ids": 14
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * (math.pi / 180)\n    return radians\n",
        "num_ids": 21
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * math.pi / 180\n    return radians\ndef cm_to_inch(cm):\n    '''\n    Write a function to convert centimeters to inches.\n    '''\n    inches = cm * 2.54 / 100\n    return inches\ndef cm_to_m(cm):\n    '''\n    Write a function to convert centimeters to meters.\n    '''\n    meter = cm * 0.01\n    return meter\ndef cm_to_ft(cm):\n    '''\n    Write a function to convert centimeters to feet.\n    '''\n    feet = cm * 0.3048\n    return feet\ndef cm_to_yd(cm):\n    '''\n    Write a function to convert centimeters to yards.\n    '''\n    yd = cm * 0.9144\n    return yd\ndef cm_to_mi(cm):\n    '''\n    Write a function to convert centimeters to miles.\n    '''\n    mi = cm * 1609.34\n    return mi\ndef cm_to_nmi(cm):\n    '''\n    Write a function to convert centimeters to nautical miles.\n    '''\n    nmi = cm * 0.000539956803\n    return nmi\ndef cm_to_yd_mi(cm):\n    '''\n    Write a function to convert centimeters to yards and miles.\n    '''\n    yd_mi = cm * 0.9144 / 1609.34\n    return yd_mi\ndef cm_to_mi_yd(cm):\n    '''\n    Write a function to convert centimeters to miles and yards.\n    '''\n    mi_yd = cm * 1609.34 / 0.9144\n    return mi_yd\ndef in_to_cm(inch):\n    '''\n    Write a function to convert inches to centimeters.\n    '''\n    cm = inch * 2.54\n    return cm\ndef in_to_m(inch):\n    '''\n    Write a function to convert inches to meters.\n    '''\n    meter = inch * 0.0254\n    return meter\ndef in_to_ft(inch):\n    '''\n    Write a function to convert inches to feet.\n    '''\n    feet = inch * 0.3048\n    return feet\ndef in_to_yd(inch):\n    '''\n    Write a function to convert inches to yards.\n    '''\n    yd = inch * 0.9144\n    return yd\ndef in_to_mi(inch):\n    '''\n    Write a function to convert inches to miles.\n    '''\n    mi = inch * 0.0006336074\n    return mi\ndef in_to_nmi(inch):\n    '''\n    Write a function to convert inches to nautical miles.\n    '''\n    nmi = inch * 0.0000160934\n    return nmi\ndef in_to_yd_mi(inch):\n    '''\n    Write a function to convert inches to yards and miles.\n    '''\n    yd_mi = inch * 0.9144 / 0.0006336074\n    return yd_mi\ndef in_to_mi_yd(inch):\n    '''\n    Write a function to convert inches to miles and yards.\n    '''\n    mi_yd = inch * 0.0006336074 / 0.9144\n    return mi_yd\ndef mi_to_cm(mi):\n    '''\n    Write a function to convert miles to centimeters.\n    '''\n    cm = mi * 1609.34\n    return cm\ndef mi_to_m(mi):\n    '''\n    Write a function to convert miles to meters.\n    '''\n    meter = mi * 0.621371\n    return meter\ndef mi_to_ft(mi):\n    '''\n    Write a function to convert miles to feet.\n    '''\n    feet = mi * 0.3048\n    return feet\ndef mi_to_yd(mi):\n    '''\n    Write a function to convert miles to yards.\n    '''\n    yd = mi * 0.9144\n    return yd\ndef mi_to_nmi(mi):\n    '''\n    Write a function to convert miles to nautical miles.\n    '''\n    nmi = mi * 0.000539956803\n    return nmi\ndef mi_to_yd_nmi(mi):\n    '''\n    Write a function to convert miles to yards and nautical miles.\n    '''\n    yd_nmi = mi * 0.9144 / 0.000539956803\n    return yd_nmi\ndef mi_to_mi_yd(mi):\n    '''\n    Write a function to convert miles and yards to miles.\n    '''\n    mi_yd = mi * 0.621371 / 0.9144\n    return mi_yd\ndef mi_to_yd_mi(mi):\n    '''\n    Write a function to convert miles and yards to miles and yards.\n    '''\n    mi_yd = mi * 0.621371 / 0.9144\n    return mi_yd\ndef yd_to_cm(yd):\n    '''\n    Write a function to convert yards to centimeters.\n    '''\n    cm = yd * 0.9144 * 2.54\n    return cm\ndef yd_to_m(yd):\n    '''\n    Write a function to convert yards to meters.\n    '''\n    meter = yd * 0.9144 * 0.3048\n    return meter\ndef yd_to_ft(yd):\n    '''\n    Write a function to convert yards to feet.\n    '''\n    feet = yd * 0.9144 * 0.3048 / 3.28\n    return feet\ndef yd_to_mi(yd):\n    '''\n    Write a function to convert yards to miles.\n    '''\n    mi = yd * 0.9144 / 1609.34\n    return mi\ndef yd_to_nmi(yd):\n    '''\n    Write a function to convert yards to nautical miles.\n    '''\n    nmi = yd * 0.9144 / 0.000539956803\n    return nmi\ndef yd_to_yd_nmi(yd):\n    '''\n    Write a function to convert yards to yards and nautical miles.\n    '''\n    yd_nmi = yd * 0.9144 / 0.000539956803\n    return yd_nmi\ndef yd_to_mi_yd(yd):\n    '''\n    Write a function to convert yards to miles and yards.\n    '''\n    mi_yd = yd * 0.9144 / 0.621371\n    return mi_yd\ndef yd_to_mi_mi(yd):\n    '''\n    Write a function to convert yards to miles and miles.\n    '''\n    mi_mi = yd * 0.9144 / 0.621371\n    return mi_mi\ndef nmi_to_cm(nmi):\n    '''\n    Write a function to convert nautical miles to centimeters.\n    '''\n    cm = nmi * 0.621371 * 1609.34\n    return cm\ndef nmi_to_m(nmi):\n    '''\n    Write a function to convert nautical miles to meters.\n    '''\n    meter = nmi * 0.621371 * 0.3048\n    return meter\ndef nmi_to_ft(nmi):\n    '''\n    Write a function to convert nautical miles to feet.\n    '''\n    feet = nmi * 0.621371 * 0.3048 / 3.28\n    return feet\ndef nmi_to_yd(nmi):\n    '''\n    Write a function to convert nautical miles to yards.\n    '''\n    yd = nmi * 0.621371 * 0.9144\n    return yd\ndef nmi_to_mi(nmi):\n    '''\n    Write a function to convert nautical miles to miles.\n    '''\n    mi = nmi * 0.621371 * 0.0006336074\n    return mi\ndef nmi_to_mi_yd(nmi):\n    '''\n    Write a function to convert nautical miles to miles and yards.\n    '''\n    mi_yd = nmi * 0.621371 * 0.0006336074 / 0.9144\n    return mi_yd\ndef nmi_to_mi_mi(nmi):\n    '''\n    Write a function to convert nautical miles to miles and miles",
        "num_ids": 15
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians=degree*math.pi/180\n    print(radians)\ndef display_grade():\n    '''\n    Write a program that outputs grades between 0 and 100.\n    '''\n    for i in range(101):\n        print(i)\ndef display_grade_binary():\n    '''\n    Write a program that outputs grades between 0 and 100 in binary.\n    '''\n    for i in range(101):\n        print(format(i,'b'))\ndef display_grade_hexadecimal():\n    '''\n    Write a program that outputs grades between 0 and 100 in hexadecimal.\n    '''\n    for i in range(101):\n        print(format(i,'#'))\ndef display_grade_octal():\n    '''\n    Write a program that outputs grades between 0 and 100 in octal.\n    '''\n    for i in range(101):\n        print(format(i,'o'))\ndef get_sum(num_1,num_2):\n    '''\n    Write a program that accepts two numbers as input and returns the sum.\n    '''\n    return num_1+num_2\ndef get_sum_even_odd():\n    '''\n    Write a program that accepts a number and returns the sum of its digits, except for the number 0, which is represented by the word \u201cZero\u201d. \n    Note that the number 0 represents the whole number.\n    '''\n    num=input(\"Enter a number:\")\n    sum=0\n    if num == 0:\n        print(\"Zero\")\n    else:\n        if int(num)%2==0:\n            for i in range(len(num)):\n                if int(num[i])!= 0:\n                    sum += int(num[i])\n            print(\"The sum of the digits of the number is: \",sum)\n        else:\n            for i in range(len(num)):\n                if int(num[i])!= 0:\n                    sum += int(num[i])\n            print(\"The sum of the digits of the number is: \",sum-10)\ndef get_even_odd():\n    '''\n    Write a program that accepts a number as input and returns its even and odd digits. \n    Note that the number 0 represents the whole number.\n    '''\n    num=input(\"Enter a number:\")\n    sum_even=0\n    sum_odd=0\n    if num == 0:\n        print(\"Zero\")\n    else:\n        if int(num)%2==0:\n            for i in range(len(num)):\n                if int(num[i])!= 0:\n                    sum_even += int(num[i])\n            print(\"The sum of the even digits of the number is: \",sum_even)\n        else:\n            for i in range(len(num)):\n                if int(num[i])!= 0:\n                    sum_odd += int(num[i])\n            print(\"The sum of the odd digits of the number is: \",sum_odd)\ndef get_digits():\n    '''\n    Write a program that accepts a number and returns its digits.\n    '''\n    num=input(\"Enter a number:\")\n    print(num[0])\n    print(num[1])\n    print(num[2])\n    print(num[3])\n    print(num[4])\n    print(num[5])\ndef get_length():\n    '''\n    Write a program that accepts a string as input and returns its length.\n    '''\n    name=input(\"Enter a name:\")\n    print(len(name))\ndef get_sum_list():\n    '''\n    Write a program that accepts a list of integer numbers as input and returns the sum of those numbers.\n    '''\n    num=input(\"Enter a number:\")\n    num_list=num.split()\n    sum=0\n    for i in range(len(num_list)):\n        sum += int(num_list[i])\n    print(sum)\ndef get_sum_list_even_odd():\n    '''\n    Write a program that accepts a list of integer numbers as input and returns the sum of those numbers, except ignore the 0 numbers. \n    Note that the number 0 represents the whole number.\n    '''\n    num=input(\"Enter a number:\")\n    num_list=num.split()\n    sum_even=0\n    sum_odd=0\n    for i in range(len(num_list)):\n        if int(num_list[i])!= 0:\n            if int(num_list[i])%2==0:\n                sum_even += int(num_list[i])\n            else:\n                sum_odd += int(num_list[i])\n    print(\"The sum of the even digits of the number is: \",sum_even)\n    print(\"The sum of the odd digits of the number is: \",sum_odd)\ndef get_length_list():\n    '''\n    Write a program that accepts a list of integers as input and returns the length of the list.\n    '''\n    num=input(\"Enter a number:\")\n    num_list=num.split()\n    print(len(num_list))\ndef get_sum_list_divisors():\n    '''\n    Write a program that accepts a number as input and returns the sum of its divisors.\n    '''\n    num=input(\"Enter a number:\")\n    num_list=num.split()\n    sum=0\n    for i in range(len(num_list)):\n        if int(num_list[i])!= 0:\n            count=1\n            while count <= int(num_list[i]):\n                if int(num_list[i])%count == 0:\n                    sum += count\n                count += 1\n    print(sum)\ndef get_sum_list_divisors_even_odd():\n    '''\n    Write a program that accepts a number as input and returns the sum of its divisors, except ignore the number 0 and return the sum of its divisors, except ignore the numbers that are even.\n    '''\n    num=input(\"Enter a number:\")\n    num_list=num.split()\n    sum_even=0\n    sum_odd=0\n    for i in range(len(num_list)):\n        if int(num_list[i])!= 0:\n            if int(num_list[i])%2==0:\n                sum_even += int(num_list[i])\n            else:\n                sum_odd += int(num_list[i])\n    print(\"The sum of the even digits of the number is: \",sum_even)\n    print(\"The sum of the odd digits of the number is: \",sum_odd)\ndef get_sum_list_divisors_even_odd_prime():\n    '''\n    Write a program that accepts a number as input and returns the sum of its divisors, except ignore the number 0 and return the sum of its divisors, except ignore the numbers that are even or divisors of 2.\n    '''\n    num=input(\"Enter a number:\")\n    num_list=num.split()\n    sum_even=0\n    sum_odd=0\n    for i in range(len(num_list)):\n        if int(num_list[i])!= 0:\n            if int(num_list[i])%2!=0 and int(num_list[i])!=2:\n                sum_even += int(num_list[i])\n            elif int(num_list[i])%2==0 or int(num_list[i])==2:\n                sum_odd += int(num_list[i])\n    print(\"The sum of the even digits of the number is: \",sum_even)\n    print(\"The sum of the odd digits of the number is: \",sum_odd)\ndef get_sum_list_divisors_even_odd_prime_max():\n    '''\n    Write a program that accepts a number as input and returns the sum of its divisors, except ignore the number 0 and return the sum of its divisors, except ignore the numbers that are even or divisors of 2.\n    '''\n    num=input(\"Enter a number:\")\n    num_list=num.split()\n    sum_even=0\n    sum_odd=0\n    for i in range(len(num_list)):\n        if int(num_list[i])!= 0:\n            if int(num_list[i])%2!=0 and int(num_list[i])!",
        "num_ids": 91
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\n",
        "num_ids": 14
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian\n",
        "num_ids": 19
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n",
        "num_ids": 14
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree * math.pi / 180\n    return rad\n",
        "num_ids": 17
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    substr = result.group()\n    start = result.start()\n    end = result.end()\n    return substr, start, end\n",
        "num_ids": 47
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        start = match.start()\n        end = match.end()\n        return text[start:end], start, end\n    return None\n",
        "num_ids": 51
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    \n    # pattern = re.compile(r'\\(.*\\)')\n    # pattern = re.compile(r'\\(\\S*\\).*\\S*\\(.*\\)')\n    # pattern = re.compile(r'\\(\\S*\\)')\n    # pattern = re.compile(r'\\(.*\\)')\n    # pattern = re.compile(r'\\([^)]*\\)')\n",
        "num_ids": 102
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    r = re.search(pattern, text)\n    \n    if r:\n        print('\\n\\n' + r.group() + '\\n')\n        print('start index: ', r.start())\n        print('end index: ', r.end())\n        print(f'text index: {r.start() + 1} to {r.end() + 1 - r.start()}')\n",
        "num_ids": 96
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    def match_literal(literal, text, index):\n        if not text:\n            return index\n        if text[0]!= literal:\n            return None\n        if literal == text[0]:\n            return match_literal(literal, text[1:], index + 1)\n        else:\n            return None\n",
        "num_ids": 79
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    \n    matches = re.findall(pattern, text)\n    if not matches:\n        return None, None, None\n",
        "num_ids": 32
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    return result.group(), result.start(), result.end()\n",
        "num_ids": 29
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if len(text) == 0:\n        return ''\n    if pattern == '':\n        return (text, 0, 0)\n    if pattern == text:\n        return (text, 0, 0)\n    if pattern in '+?*{}^$|':\n        return (text, 0, 0)\n    if pattern == '\\\\' and text.startswith('\\\\\\\\'):\n        return (text[1:], 0, 0)\n    if pattern == '\\\\' and text.startswith('\\\\'):\n        return (text[1:], 0, 0)\n    if pattern == '.' and text.startswith('\\\\'):\n        return (text[1:], 0, 0)\n    if pattern == '.' and text.startswith('.'):\n        return (text[1:], 0, 0)\n    if pattern == '(' and text.startswith('\\\\'):\n        return (text[1:], 0, 0)\n    if pattern == '(':\n        match = re.search(r'([^()]*)(\\()', text)\n        if match:\n            return (match.group(1), match.start(1), match.start(1) + match.group(1).count('(')\n        return (text, 0, 0)\n    if pattern == ')' and text.startswith('\\\\'):\n        return (text[1:], 0, 0)\n    if pattern == ')' and text.startswith(')'):\n        match = re.search(r'([^()]*)(\\))', text)\n        if match:\n            return (match.group(1), match.start(1), match.start(1) + match.group(1).count(')'))\n        return (text, 0, 0)\n    if pattern == '[' and text.startswith('\\\\'):\n        return (text[1:], 0, 0)\n    if pattern == '[':\n        match = re.search(r'([^[]]*)(\\[)', text)\n        if match:\n            return (match.group(1), match.start(1), match.start(1) + match.group(1).count('['))\n        return (text, 0, 0)\n    if pattern == ']' and text.startswith('\\\\'):\n        return (text[1:], 0, 0)\n    if pattern == ']' and text.startswith(']'):\n        match = re.search(r'([^[]]*)(\\])', text)\n        if match:\n            return (match.group(1), match.start(1), match.start(1) + match.group(1).count(']'))\n        return (text, 0, 0)\n    if pattern == '{' and text.startswith('\\\\'):\n        return (text[1:], 0, 0)\n    if pattern == '{' and text.startswith('{'):\n        match = re.search(r'([^{]*)(\\{)', text)\n        if match:\n            return (match.group(1), match.start(1), match.start(1) + match.group(1).count('{'))\n        return (text, 0, 0)\n    if pattern == '}' and text.startswith('\\\\'):\n        return (text[1:], 0, 0)\n    if pattern == '}' and text.startswith('}'):\n        match = re.search(r'([^}]*)(\\})', text)\n        if match:\n            return (match.group(1), match.start(1), match.start(1) + match.group(1).count('}'))\n        return (text, 0, 0)\n    if pattern == '?' and text.startswith('\\\\'):\n        return (text[1:], 0, 0)\n    if pattern == '?' and text.startswith('?'):\n        match = re.search(r'([^?]*)(\\?)', text)\n        if match:\n            return (match.group(1), match.start(1), match.start(1) + match.group(1).count('?'))\n        return (text, 0, 0)\n    if pattern == '+' and text.startswith('\\\\'):\n        return (text[1:], 0, 0)\n    if pattern == '+' and text.startswith('+'):\n        match = re.search(r'([^+]*)(\\+)', text)\n        if match:\n            return (match.group(1), match.start(1), match.start(1) + match.group(1).count('+'))\n        return (text, 0, 0)\n    if pattern == '*' and text.startswith('\\\\'):\n        return (text[1:], 0, 0)\n    if pattern == '*' and text.startswith('*'):\n        match = re.search(r'([^*]*)(\\*)', text)\n        if match:\n            return (match.group(1), match.start(1), match.start(1) + match.group(1).count('*'))\n        return (text, 0, 0)\n    if pattern == '.' and text.startswith('\\\\'):\n        return (text[1:], 0, 0)\n    if pattern == '.' and text.startswith('.'):\n        match = re.search(r'([^.]*)(\\.)', text)\n        if match:\n            return (match.group(1), match.start(1), match.start(1) + match.group(1).count('.'))\n        return (text, 0, 0)\n    if pattern == '\\\\' and text.startswith('\\\\'):\n        return (text[1:], 0, 0)\n    if pattern == '\\\\' and text.startswith('\\\\\\\\'):\n        return (text[1:], 0, 0)\n    if pattern == '$' and text.startswith('\\\\'):\n        return (text[1:], 0, 0)\n    if pattern == '$' and text.startswith('$'):\n        match = re.search(r'([^$]*)(\\$)', text)\n        if match:\n            return (match.group(1), match.start(1), match.start(1) + match.group(1).count('$'))\n        return (text, 0, 0)\n    if pattern == '^' and text.startswith('\\\\'):\n        return (text[1:], 0, 0)\n    if pattern == '^' and text.startswith('^'):\n        match = re.search(r'([^^]*)(\\^)', text)\n        if match:\n            return (match.group(1), match.start(1), match.start(1) + match.group(1).count('^'))\n        return (text, 0, 0)\n    if pattern == '|' and text.startswith('\\\\'):\n        return (text[1:], 0, 0)\n    if pattern == '|' and text.startswith('|'):\n        match = re.search(r'([^|]*)(\\|)', text)\n        if match:\n            return (match.group(1), match.start(1), match.start(1) + match.group(1).count('|'))\n        return (text, 0, 0)\n    if pattern == '^' and text.startswith('^'):\n        match = re.search(r'([^^]*)(\\^)', text)\n        if match:\n            return (match.group(1), match.start(1), match.start(1) + match.group(1).count('^'))\n        return (text, 0, 0)\n    if pattern == '{' and text.startswith('\\\\'):\n        return (text[1:], 0, 0)\n    if pattern == '{' and text.startswith('{'):\n        match = re.search(r'([^{]*)(\\{)', text)\n        if match:\n            return (match.group(1), match.start(1), match.start(1) + match.group(1).count('{'))\n        return (text, 0, 0)\n    if pattern == '}' and text.startswith('\\\\'):\n        return ",
        "num_ids": 1992
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if not pattern:\n        return text, 0, 0\n    else:\n        pattern = pattern.lower()\n        pos = 0\n        index = 0\n        for i in range(len(text)):\n            if text[i] == pattern[0]:\n                index = i\n                for j in range(len(pattern)):\n                    if text[index + j]!= pattern[j]:\n                        break\n                    else:\n                        index += 1\n                if index == len(pattern):\n                    return text[:index], index, index + 1\n        return text, 0, 0\n",
        "num_ids": 136
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_numbers = [1,2,4,10,12,13,14,16,17,18,19,20,24,25,26,27,28,30,31,32,33,36,37,38,39,40,42,43,44,45,48,49,50,51,54,55,56,57,60,62,63,64,65,66,68,69,70,71,72,74,75,76,77,78,80,81,82,83,84,86,87,88,89,90,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954",
        "num_ids": 2019
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # base condition.\n    if n <= 0:\n        return 0\n    return n * bell_Number(n - 1) + bell_Number(n - 2) + bell_Number(n - 3)\n",
        "num_ids": 50
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 0\n    if n < 0: \n        print(\"Enter a valid input\") \n    elif n == 1: \n        bell = 1\n    else: \n        bell = (bell_Number(n - 1) + (n - 1) * bell_Number(n - 2))\n    return bell\n",
        "num_ids": 76
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return (n*(n+1)//2)\n",
        "num_ids": 16
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bellNumber = 1\n    for i in range(1,n+1):\n        bellNumber = bellNumber*i\n    return bellNumber\n",
        "num_ids": 35
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    bell_Number_series = [1,1]\n    for i in range(2,n):\n        bell_Number_series.append(bell_Number_series[-1]+bell_Number_series[-2])\n    return bell_Number_series[-1]\n",
        "num_ids": 88
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    def f(x):\n        if x == 0:\n            return 1\n        return f(x-1) + x\n",
        "num_ids": 31
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    # Base case\n    if n <= 1:\n        return 1\n        \n    # Recursive call\n    return n * bell_Number(n - 1) \n",
        "num_ids": 42
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    n = int(n)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n",
        "num_ids": 57
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if(n == 1): \n        return 1\n    else: \n        return (n * bell_Number(n - 1)) \n",
        "num_ids": 35
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) == 0:\n        return list1\n    if list1[0] == L:\n        return list1[1:]\n    return list1[:len(list1)-1]\n",
        "num_ids": 51
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    i = 0\n    j = 0\n    k = L - 1\n",
        "num_ids": 19
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) == 1:\n        return []\n    else:\n        if L == 0:\n            return list1[:L]\n        else:\n            list1.pop(L)\n            return list1\n",
        "num_ids": 55
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    length_list = len(list1)\n    removed_element = list1[length_list - L]\n    del list1[length_list - L]\n    return list1\n    \n    # sample input\n    '''\n    list1 = [1,2,3,4,5,6]\n    L = 3\n    return_list = remove_kth_element(list1, L)\n    print(return_list)\n    '''\n    \n    # Edge case\n    '''\n    list1 = []\n    L = 0\n    return_list = remove_kth_element(list1, L)\n    print(return_list)\n    '''\n    \n    # Success case\n    '''\n    list1 = [1,2,3,4,5,6]\n    L = 2\n    return_list = remove_kth_element(list1, L)\n    print(return_list)\n    '''\n    \n    \ndef one_element_to_the_end(list1):\n    '''\n    Write a python function which takes a list as an argument and returns a new list with the first and last element\n    of the original list removed.\n    '''\n    # Edge case\n    '''\n    list1 = []\n    return_list = one_element_to_the_end(list1)\n    print(return_list)\n    '''\n    \n    # Success case\n    '''\n    list1 = [1,2,3,4,5]\n    return_list = one_element_to_the_end(list1)\n    print(return_list)\n    '''\n    \n    \ndef multiply_numbers(num1,num2):\n    '''\n    Write a python function which takes two numbers and returns their multiplication.\n    '''\n    # Edge case\n    '''\n    num1 = 0\n    num2 = 0\n    return_val = multiply_numbers(num1, num2)\n    print(return_val)\n    '''\n    \n    # Success case\n    '''\n    num1 = 4\n    num2 = 6\n    return_val = multiply_numbers(num1, num2)\n    print(return_val)\n    '''\n    \n    \ndef is_the_palindrome(s):\n    '''\n    Write a python function which takes a string as an argument and returns true if the string is a palindrome, else it returns false.\n    '''\n    # Edge case\n    '''\n    s = 'abcba'\n    return_val = is_the_palindrome(s)\n    print(return_val)\n    '''\n    \n    # Success case\n    '''\n    s = 'civic'\n    return_val = is_the_palindrome(s)\n    print(return_val)\n    '''\n    \n    \ndef rotate_the_string(string):\n    '''\n    Write a python function which takes a string as an argument and returns the string after rotating it by 2 spaces.\n    '''\n    # Edge case\n    '''\n    string = 'abcdef'\n    return_val = rotate_the_string(string)\n    print(return_val)\n    '''\n    \n    # Success case\n    '''\n    string = 'geeksforgeeks'\n    return_val = rotate_the_string(string)\n    print(return_val)\n    '''\n    \n    \ndef flip_the_string(string):\n    '''\n    Write a python function which takes a string as an argument and returns the string after reversing the string.\n    '''\n    # Edge case\n    '''\n    string = 'abcdef'\n    return_val = flip_the_string(string)\n    print(return_val)\n    '''\n    \n    # Success case\n    '''\n    string = 'geeksforgeeks'\n    return_val = flip_the_string(string)\n    print(return_val)\n    '''\n    \n    \ndef is_unique_string(s):\n    '''\n    Write a python function which takes a string as an argument and returns true if the string is a unique string, else it returns false.\n    '''\n    # Edge case\n    '''\n    s = ''\n    return_val = is_unique_string(s)\n    print(return_val)\n    '''\n    \n    # Success case\n    '''\n    s = 'abcdefgh'\n    return_val = is_unique_string(s)\n    print(return_val)\n    '''\n    \n    \ndef is_palindrome_word(s):\n    '''\n    Write a python function which takes a string as an argument and returns true if the string is a palindrome word, else it returns false.\n    '''\n    # Edge case\n    '''\n    s = 'abcd'\n    return_val = is_palindrome_word(s)\n    print(return_val)\n    '''\n    \n    # Success case\n    '''\n    s = 'rithm'\n    return_val = is_palindrome_word(s)\n    print(return_val)\n    '''\n    \n    \ndef all_the_letters_reversed(string):\n    '''\n    Write a python function which takes a string as an argument and returns the string after reversing the string.\n    '''\n    # Edge case\n    '''\n    string = 'abcdef'\n    return_val = all_the_letters_reversed(string)\n    print(return_val)\n    '''\n    \n    # Success case\n    '''\n    string = 'geeksforgeeks'\n    return_val = all_the_letters_reversed(string)\n    print(return_val)\n    '''\n    \n    \ndef is_palindrome_word_reverse(s):\n    '''\n    Write a python function which takes a string as an argument and returns true if the string is a palindrome word, else it returns false.\n    '''\n    # Edge case\n    '''\n    s = 'abcd'\n    return_val = is_palindrome_word_reverse(s)\n    print(return_val)\n    '''\n    \n    # Success case\n    '''\n    s = 'rithm'\n    return_val = is_palindrome_word_reverse(s)\n    print(return_val)\n    '''\n    \n    \ndef is_substring(substring, string):\n    '''\n    Write a python function which takes a string as an argument and returns true if the string is a substring of the original string.\n    '''\n    # Edge case\n    '''\n    string = 'geeksforgeeks'\n    substring = 'g'\n    return_val = is_substring(substring, string)\n    print(return_val)\n    '''\n    \n    # Success case\n    '''\n    string = 'geeksforgeeks'\n    substring = 'ks'\n    return_val = is_substring(substring, string)\n    print(return_val)\n    '''\n    \n    \ndef check_if_the_string_is_substring(string1, string2):\n    '''\n    Write a python function which takes a string as an argument and returns true if the string is a substring of the original string.\n    '''\n    # Edge case\n    '''\n    string1 = 'geeksforgeeks'\n    string2 = 'ks'\n    return_val = check_if_the_string_is_substring(string1, string2)\n    print(return_val)\n    '''\n    \n    # Success case\n    '''\n    string1 = 'geeksforgeeks'\n    string2 = 'ks'\n    return_val = check_if_the_string_is_substring(string1, string2)\n    print(return_val)\n    '''\n    \n    \ndef get_all_substrings(string):\n    '''\n    Write a python function which takes a string as an argument and returns a list of all the substrings of the original string.\n    '''\n    # Edge case\n    '''\n    string = 'geeksforgeeks'\n    return_val = get_all_substrings(string)\n    print(return_val)\n    '''\n    \n    # Success case\n    '''\n    string = 'g",
        "num_ids": 7
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    for i in range(0, L - 1):\n        list1[i] = list1[i + 1]\n    del(list1[L])\n    return list1\n",
        "num_ids": 46
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L]+list1[L+1:]\n    \ndef second_smallest_element(list1):\n    '''\n    Write a python function which takes a list and returns the second smallest element. If the list is empty, return -1.\n    '''\n    list2 = []\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    list3 = sorted(list2)\n    if len(list3) == 0:\n        return -1\n    else:\n        return list3[1]\n",
        "num_ids": 72
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # list1 = list(list1)\n    list2 = []\n    for i in range(0,len(list1)-1):\n        list2.append(list1[i])\n    return list2\n",
        "num_ids": 52
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if list1 == None:\n        return None\n    elif len(list1) == 1:\n        return list1\n    elif len(list1) == 2:\n        if list1[0] == L:\n            return [list1[1]]\n        else:\n            return list1\n    else:\n        k = len(list1)//2\n        m = list1[k]\n        if m == L:\n            list1.pop(k)\n            return remove_kth_element(list1, L)\n        elif m > L:\n            return remove_kth_element(list1[0:k], L)\n        else:\n            list1.pop(k)\n            return remove_kth_element(list1, L)\n",
        "num_ids": 182
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == None:\n        return None\n    if L.is_empty():\n        return None\n    if L.head.next == None and L.size == 1:\n        return None\n    x = None\n    y = None\n    if L.size > 1:\n        x = L.head\n        for i in range(0, L.size-1):\n            y = x\n            x = x.next\n        y.next = x.next\n        x = None\n    return x\n",
        "num_ids": 118
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L+1:]\n",
        "num_ids": 21
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    #n-1: since then'th column starts from index 1 not from 0\n    for i in range(N-1):\n        max = test_list[i][0]\n        for j in range(1, len(test_list)):\n            if test_list[i][j] > max:\n                max = test_list[i][j]\n        test_list[i][0] = max\n    return test_list[N-1][0]\n    \n    \n    \n    \n    \n    \ndef rotate(list1):\n    '''\n    Given a matrix of any size of n x n, print the matrix in the following format :\n    \n    Example 1:\n    \n    Input:\n    [[1,2,3,4],\n    [5,6,7,8],\n    [9,10,11,12],\n    [13,14,15,16]]\n    \n    Output:\n    1 2 3 4\n    5 6 7 8\n    9 10 11 12\n    13 14 15 16\n    \n    Explanation: Here the matrix is in the form of \n
        "num_ids": 1869
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    def max_of_nth_column(test_matrix, n):\n        max_in_col = max_in_row = 0\n        for i in test_matrix:\n            max_in_row = max(i[n - 1], max_in_row)\n            max_in_col = max(max_in_row, max_in_col)\n        return max_in_col\n    return max_of_nth_column(test_list, N)\n",
        "num_ids": 116
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list[N-1])\n",
        "num_ids": 15
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    list = []\n    for i in range(len(test_list)):\n        list.append(max(test_list[i]))\n    return list[N]\n",
        "num_ids": 43
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    output = []\n    for j in range(0, N):\n        output.append(max(test_list[i][j] for i in range(0, len(test_list))))\n    return output\n",
        "num_ids": 51
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if not test_list:\n        return\n    if len(test_list) == 1:\n        return test_list[0][N-1]\n    if len(test_list[0]) == 1:\n        return max(test_list[0])\n    return max(test_list[0][N-1], max_of_nth(test_list[1:], N-1))\n",
        "num_ids": 96
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N < 0 or N >= len(test_list[0]):\n        raise ValueError\n    max_num = 0\n    for i in range(len(test_list)):\n        if max_num < test_list[i][N]:\n            max_num = test_list[i][N]\n    return max_num\n",
        "num_ids": 81
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_num = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j] > max_num:\n                max_num = test_list[i][j]\n    return max_num\n",
        "num_ids": 75
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list[i] for i in range(len(test_list)) if N <= i)\n",
        "num_ids": 29
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    list_of_lists = matrix_to_list(test_list)\n    max_nth_list = []\n    \n    for i in range(len(list_of_lists)):\n        max_nth_list.append(max(list_of_lists[i][N-1]))\n        \n    return max(max_nth_list)\n",
        "num_ids": 88
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    n = len(lst)\n    if n == 1:\n        return lst\n    result = []\n    for i in range(n):\n        result.append(lst[i][0])\n        result.append(lst[i][1])\n    return result\n",
        "num_ids": 67
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    a=[]\n    for i in lst:\n        a.append(i[0])\n        a.append(i[1])\n    return a\n",
        "num_ids": 39
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    x = len(lst)\n    for i in range(x):\n        for j in range(x):\n            if lst[i][0] == lst[j][0]:\n                lst[i][1] += lst[j][1]\n                lst.pop(j)\n                break\n    return lst\n    \nprint(merge([[1,2],[3,4],[5,6]]))\n'''\nOutput:\n[1,2,5,6]\n'''\n",
        "num_ids": 2
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return (lst[0],lst[1])\n",
        "num_ids": 16
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst = list(map(lambda x:x[0:1],lst))\n    return list(map(lambda x:x[0],lst)) + list(map(lambda x:x[1],lst))\n",
        "num_ids": 55
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst_merge = []\n    for item in lst:\n        if len(item) == 1:\n            lst_merge.append([item[0]])\n        elif len(item) == 2:\n            lst_merge.append([item[0],item[1]])\n        else:\n            lst_merge.append([item[0],item[2]])\n    return lst_merge\n",
        "num_ids": 105
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst = merge(lst)\n    return lst\n    \n",
        "num_ids": 19
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_list = []\n    for i in range(len(lst)):\n        new_list.append([lst[i][0], lst[i][1]])\n    return new_list\n",
        "num_ids": 51
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    #code here\n    lst=list(map(list,lst))\n    x=[]\n    for i in range(len(lst)):\n        x.append(lst[i][0])\n    x=tuple(x)\n    y=[]\n    for i in range(len(lst)):\n        y.append(lst[i][1])\n    y=tuple(y)\n    final=[]\n    final.append(x)\n    final.append(y)\n    return final",
        "num_ids": 125
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return lst[0], lst[1]\n",
        "num_ids": 15
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    output = []\n    for i in range(len(test_list)):\n        output.append(sum(test_list[:i+1]))\n    return output\n",
        "num_ids": 43
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    a = 0\n    list1 = []\n    for i in range(len(test_list)):\n        a = a + test_list[i]\n        list1.append(a)\n    return list1\n    \nprint(cummulative_sum((1, 2, 3, 4)))    \nprint(cummulative_sum((10, 20, 30, 40, 50)))\n",
        "num_ids": 92
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    list_size = len(test_list)\n    res = list()\n    for i in range(list_size):\n        res.append(test_list[i] + sum(res[:i]))\n    return res\n",
        "num_ids": 56
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum=0\n    for i in range(len(test_list)):\n        total_sum += test_list[i]\n    return total_sum\n",
        "num_ids": 41
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    # Code here\n    for i in range(len(test_list)):\n        cum_sum = cum_sum + test_list[i]\n    return cum_sum\n",
        "num_ids": 50
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if len(test_list)==0:\n        print(\"Enter a non empty list\")\n        return\n    cummulative_sum=0\n    for i in range(len(test_list)):\n        cummulative_sum+=test_list[i]\n    return cummulative_sum\n",
        "num_ids": 72
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = 0\n    for value in test_list:\n        result += value\n    return result\n",
        "num_ids": 25
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return 0\n    elif len(test_list) == 1:\n        return test_list[0]\n    else:\n        return test_list[0] + cummulative_sum(test_list[1:])\n",
        "num_ids": 67
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if len(test_list)==0:\n        return\n    else:\n        new_list=[]\n        total_sum=0\n        for i in range(len(test_list)):\n            total_sum=test_list[i]+total_sum\n            new_list.append(total_sum)\n        print(new_list)\n",
        "num_ids": 84
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    a=[]\n    for x in range(len(test_list)):\n        a.append(test_list[x])\n    return sum(a)\n",
        "num_ids": 40
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average = []\n    for tup in nums:\n        total = 0\n        for val in tup:\n            total += val\n        total /= len(tup)\n        average.append(total)\n    return average\n",
        "num_ids": 56
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    if len(nums) == 0:\n        return []\n    else:\n        sum_list = []\n        for i in nums:\n            sum_list.append(i[0])\n        return sum_list / len(nums)\n",
        "num_ids": 60
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i][1]\n    return sum / len(nums)\n",
        "num_ids": 41
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    s = 0\n    for i in range(len(nums)):\n        s += nums[i]\n    return (s/len(nums))\n",
        "num_ids": 40
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [(sum(x)/len(x)) for x in zip(*nums)]\n",
        "num_ids": 22
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    #TODO: WRITE YOUR CODE HERE\n    avg_list = []\n    for i in range(len(nums)):\n        total = 0\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n        avg_list.append(total / len(nums[i]))\n    return avg_list\n",
        "num_ids": 90
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average = []\n    for i in range(len(nums)):\n        #average = nums[i]\n        for j in range(len(nums[i])):\n            #average = sum / len(nums[i])\n            average.append(nums[i][j]/len(nums[i]))\n    return average\n",
        "num_ids": 85
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    for num in nums:\n        nums = 0\n    return nums\n",
        "num_ids": 21
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return map(lambda x: list(map(lambda y: y/len(x), x)), nums)\n",
        "num_ids": 28
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return tuple(map(lambda x: sum(x) / len(x), nums))\n",
        "num_ids": 24
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    modulo_of_tuple1 = []\n    for i in range(0, len(test_tup1)):\n        modulo_of_tuple1.append(test_tup1[i] % test_tup2[i])\n",
        "num_ids": 62
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # if all(isinstance(element, int) for element in test_tup1) and all(isinstance(element, int) for element in test_tup2):\n    #     return (test_tup1[0]%test_tup2[0], test_tup1[1]%test_tup2[1], test_tup1[2]%test_tup2[2])\n    # else:\n    #     raise Exception(\"The two tuples have to be of type integer\")\n    return tuple(x%y for x, y in zip(test_tup1, test_tup2))\n",
        "num_ids": 150
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # your code here\n    return tuple(i % j for i,j in zip(test_tup1,test_tup2))\n",
        "num_ids": 35
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    \n    if len(test_tup1) == len(test_tup2):\n        return tuple((a % b for a, b in zip(test_tup1, test_tup2)))\n    else:\n        return \"Tuples must be the same length!\"\n",
        "num_ids": 99
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    #print(test_tup1[0], test_tup2[0])\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        return test_tup1[0] % test_tup2[0]\n",
        "num_ids": 71
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = (\n        (test_tup1[0] % test_tup2[0]),\n        (test_tup1[1] % test_tup2[1]),\n        (test_tup1[2] % test_tup2[2]),\n        (test_tup1[3] % test_tup2[3]),\n        (test_tup1[4] % test_tup2[4]),\n        (test_tup1[5] % test_tup2[5]),\n        (test_tup1[6] % test_tup2[6]),\n        (test_tup1[7] % test_tup2[7]),\n        (test_tup1[8] % test_tup2[8]),\n        (test_tup1[9] % test_tup2[9]),\n        (test_tup1[10] % test_tup2[10]),\n        (test_tup1[11] % test_tup2[11]),\n        (test_tup1[12] % test_tup2[12]),\n        (test_tup1[13] % test_tup2[13]),\n        (test_tup1[14] % test_tup2[14]),\n        (test_tup1[15] % test_tup2[15]),\n        (test_tup1[16] % test_tup2[16]),\n        (test_tup1[17] % test_tup2[17]),\n        (test_tup1[18] % test_tup2[18]),\n        (test_tup1[19] % test_tup2[19]),\n        (test_tup1[20] % test_tup2[20]),\n        (test_tup1[21] % test_tup2[21]),\n        (test_tup1[22] % test_tup2[22]),\n        (test_tup1[23] % test_tup2[23]),\n        (test_tup1[24] % test_tup2[24]),\n        (test_tup1[25] % test_tup2[25]),\n        (test_tup1[26] % test_tup2[26]),\n        (test_tup1[27] % test_tup2[27]),\n        (test_tup1[28] % test_tup2[28]),\n        (test_tup1[29] % test_tup2[29]),\n        (test_tup1[30] % test_tup2[30]),\n        (test_tup1[31] % test_tup2[31]),\n        (test_tup1[32] % test_tup2[32]),\n        (test_tup1[33] % test_tup2[33]),\n        (test_tup1[34] % test_tup2[34]),\n        (test_tup1[35] % test_tup2[35]),\n        (test_tup1[36] % test_tup2[36]),\n        (test_tup1[37] % test_tup2[37]),\n        (test_tup1[38] % test_tup2[38]),\n        (test_tup1[39] % test_tup2[39]),\n        (test_tup1[40] % test_tup2[40]),\n        (test_tup1[41] % test_tup2[41]),\n        (test_tup1[42] % test_tup2[42]),\n        (test_tup1[43] % test_tup2[43]),\n        (test_tup1[44] % test_tup2[44]),\n        (test_tup1[45] % test_tup2[45]),\n        (test_tup1[46] % test_tup2[46]),\n        (test_tup1[47] % test_tup2[47]),\n        (test_tup1[48] % test_tup2[48]),\n        (test_tup1[49] % test_tup2[49]),\n        (test_tup1[50] % test_tup2[50]),\n        (test_tup1[51] % test_tup2[51]),\n        (test_tup1[52] % test_tup2[52]),\n        (test_tup1[53] % test_tup2[53]),\n        (test_tup1[54] % test_tup2[54]),\n        (test_tup1[55] % test_tup2[55]),\n        (test_tup1[56] % test_tup2[56]),\n        (test_tup1[57] % test_tup2[57]),\n        (test_tup1[58] % test_tup2[58]),\n        (test_tup1[59] % test_tup2[59]),\n        (test_tup1[60] % test_tup2[60]),\n        (test_tup1[61] % test_tup2[61]),\n        (test_tup1[62] % test_tup2[62]),\n        (test_tup1[63] % test_tup2[63]),\n        (test_tup1[64] % test_tup2[64]),\n        (test_tup1[65] % test_tup2[65]),\n        (test_tup1[66] % test_tup2[66]),\n        (test_tup1[67] % test_tup2[67]),\n        (test_tup1[68] % test_tup2[68]),\n        (test_tup1[69] % test_tup2[69]),\n        (test_tup1[70] % test_tup2[70]),\n        (test_tup1[71] % test_tup2[71]),\n        (test_tup1[72] % test_tup2[72]),\n        (test_tup1[73] % test_tup2[73]),\n        (test_tup1[74] % test_tup2[74]),\n        (test_tup1[75] % test_tup2[75]),\n        (test_tup1[76] % test_tup2[76]),\n        (test_tup1[77] % test_tup2[77]),\n        (test_tup1[78] % test_tup2[78]),\n        (test_tup1[79] % test_tup2[79]),\n        (test_tup1[80] % test_tup2[80]),\n        (test_tup1[81] % test_tup2[81]),\n        (test_tup1[82] % test_tup2[82]),\n        (test_tup1[83] % test_tup2[83]),\n        (test_tup1[84] % test_tup2[84]),\n        (test_tup1[85] % test_tup2[85]),\n        (test_tup1[86] % test_tup2[86]),\n        (test_tup1[87] % test_tup2[87]),\n        (test_tup1[88] % test_tup2[88]),\n        (test_tup1[89] % test_tup2[89]),\n        (test_tup1[90] % test_tup2[90]),\n        (test_tup1[91] % test_tup2[91]),\n        (test_tup1[92] % test_tup2[92]),\n        (test_tup1[93] % test_tup2[93]),\n        (test_tup1[94] % test_tup2[94]),\n        (test_tup1[95] % test_tup2[95]),\n        (test_tup1[96] % test_tup2[96]),\n        (test_tup1[97] % test_tup2[97]),\n        (test_tup1[98] % test_tup2[98]),\n        (test_tup1[99] % test_",
        "num_ids": 2000
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    tup1_len = len(test_tup1)\n    tup2_len = len(test_tup2)\n    if tup1_len!= tup2_len:\n        return \"Error! Incorrect tuple size!\"\n    result = []\n    for i in range(tup1_len):\n        result.append(int(test_tup1[i] % test_tup2[i]))\n    return tuple(result)\n",
        "num_ids": 112
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    assert len(test_tup1) == len(test_tup1)\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup = new_tup + (int(test_tup1[i] % test_tup2[i]),)\n    return new_tup\n    \n    \nprint(tuple_modulo((1,3,2,8,8,5,8), (6,3,9,5,7,8,5)))",
        "num_ids": 147
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] % test_tup2[i])\n    return tuple(new_tup)\n",
        "num_ids": 62
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(t1%t2 for t1,t2 in zip(test_tup1,test_tup2))\n",
        "num_ids": 33
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d==0:\n        return steps\n    else:\n        return min(1, steps//d, min_Jumps(steps+1, d-1))\n",
        "num_ids": 41
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    n = len(steps)\n    jumps = 0\n    i = 0\n    while i < n:\n        if steps[i]!= d:\n            jumps += 1\n            i += steps[i] - 1\n        else:\n            i += 1\n    return jumps\n",
        "num_ids": 68
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    x = 0\n    steps_list = []\n    x = 0\n    \n    while(x <= steps):\n        steps_list.append(x)\n        x += 1\n    \n    if steps_list[-1]!= steps:\n        steps_list.append(steps)\n    \n    new_steps_list = steps_list[::-1]\n    \n    new_list = []\n    for i in new_steps_list:\n        if d <= i:\n            new_list.append(i)\n            break\n        elif i + d > steps:\n            new_list.append(i)\n            break\n        else:\n            new_list.append(i)\n    \n    if new_list[-1]!= new_steps_list[-1]:\n        new_list.append(steps)\n    \n    new_list.reverse()\n    return len(new_list)\n",
        "num_ids": 217
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # base case \n    if d == 0: \n        return 0\n    \n    # initialize count \n    count = 0\n    \n    # loop for the given steps \n    for i in range(1, steps + 1): \n        \n        # check if we can reach destination from current position\n        if (i-1 >= 0 and d - i >= 0): \n            if (points[i - 1][d - i]!= 0): \n                count = count + 1\n        \n        # check if we can reach destination from current position\n        if (i - d >= 0 and d - i >= 0): \n            if (points[i - d][d - i]!= 0): \n                count = count + 1\n    \n    # return count \n    return count \n",
        "num_ids": 185
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    step = 0\n    while step!= steps:\n        if step + d <= steps:\n            jumps += 1\n        step += d\n    return jumps\n",
        "num_ids": 45
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    n = len(steps)\n    if n == 1:\n        if steps[0] == d:\n            return 1\n        else:\n            return 0\n    else:\n        l = 0\n        r = 0\n        res = -1\n        # loop from left to right and update l and r \n        for i in range(n):\n            if steps[i] < d:\n                l = i + 1\n            if steps[i] == d:\n                r = i + 1\n                break\n        # check for jumps\n        for i in range(l, r):\n            if steps[i] == d:\n                j = i + 1\n                while j < r and steps[j] == d:\n                    j += 1\n                if j == r:\n                    res = max(res, i - l + 1)\n        return res \n",
        "num_ids": 209
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    n = 0\n    a = steps\n    while a > 0:\n        a -= d\n        if a < 0:\n            n += 1\n            a += d\n    return n\n",
        "num_ids": 45
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    if d == 1:\n        return steps\n    if d < steps:\n        return -1\n    if d > steps:\n        return steps\n    min_n_steps = steps\n    for i in range(1,d+1):\n        n_steps = min_Jumps(steps, d-i)\n        if n_steps!= -1 and n_steps+1 < min_n_steps:\n            min_n_steps = n_steps+1\n    return min_n_steps\n",
        "num_ids": 130
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: \n        return 0\n    jumps = 0\n    step = 1\n    i = 0\n    while i < steps:\n        #print (i)\n        if (i == 0) or (i == d):\n            jumps += 1\n            break\n        if i == 1:\n            if i == 1 and (i == d):\n                jumps += 1\n                break\n            else:\n                jumps += 1\n                i -= 1\n                continue\n        if i >= d:\n            i -= d\n        else:\n            i += 1\n            jumps += 1\n    return jumps\n",
        "num_ids": 144
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if (d == 1):\n        return steps + 1\n    else:\n        if (d < 0):\n            return 0\n        else:\n            return min(1+min_Jumps(steps, d-1), 1+min_Jumps(steps, d-2))\n",
        "num_ids": 67
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    new_list = []\n    for i in range(0,len(nums1)):\n        new_list.append(nums1[i] / nums2[i])\n    return new_list\n    \ndef div_list_2(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    new_list = []\n    for i in range(0,len(nums1)):\n        new_list.append(nums1[i] / nums2[i])\n    return new_list\n",
        "num_ids": 52
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    else:\n        return [[nums1[i],nums2[i]] for i in range(len(nums1))]\n        \n",
        "num_ids": 61
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n",
        "num_ids": 38
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    def div_list_elem(num1,num2):\n        res = []\n        for i in range(len(num1)):\n            res.append(num1[i]/num2[i])\n        return res\n",
        "num_ids": 57
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)==0 or len(nums2)==0:\n        return []\n    if len(nums1)==1 and len(nums2)==1:\n        return list(nums1)+list(nums2)\n    if len(nums1)>len(nums2):\n        nums1,nums2=nums2,nums1\n    result=[]\n    for i in range(0,len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n",
        "num_ids": 140
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return list(map(lambda x, y: x/y, nums1, nums2))\n",
        "num_ids": 26
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [x/y for x,y in zip(nums1,nums2)]\n",
        "num_ids": 24
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"lists must have the same length to be divided\")\n    n1 = nums1[:]\n    n2 = nums2[:]\n    for i,j in zip(n1,n2):\n        i = i/j\n    return n1\n    \ndef is_prime(number):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if number > 1:\n        for i in range(2,number):\n            if number % i == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n    \ndef is_leap(year):\n    '''\n    Write a function to check if a year is a leap year or not.\n    '''\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n        \ndef is_palindrome(str):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    if str[::-1] == str:\n        return True\n    else:\n        return False\n    \ndef min_max(nums):\n    '''\n    Write a function to get the minimum and maximum element in a list.\n    '''\n    return min(nums),max(nums)\n    \ndef diff_calc(n1,n2):\n    '''\n    Write a function to calculate the absolute value of difference between two numbers.\n    '''\n    diff = n2 - n1\n    if diff > 0:\n        return diff\n    else:\n        return -diff\n    \ndef element_wise_mul(nums1,nums2):\n    '''\n    Write a function to multiply element-wise two lists.\n    '''\n    n1 = nums1[:]\n    n2 = nums2[:]\n    for i,j in zip(n1,n2):\n        i = i * j\n    return n1\n    \ndef file_count(path):\n    '''\n    Write a function to count the number of files in a folder.\n    '''\n    if os.path.isdir(path):\n        return len([name for name in os.listdir(path) if os.path.isfile(os.path.join(path, name))])\n    else:\n        raise ValueError(\"path must be a folder\")\n    \ndef file_size(path):\n    '''\n    Write a function to count the total size of files in a folder.\n    '''\n    if os.path.isdir(path):\n        return sum([os.path.getsize(name) for name in os.listdir(path) if os.path.isfile(os.path.join(path, name))])\n    else:\n        raise ValueError(\"path must be a folder\")\n    \ndef file_to_list(path):\n    '''\n    Write a function to convert the contents of a folder into a list of lists.\n    '''\n    if os.path.isdir(path):\n        return [[name,os.path.getsize(name)] for name in os.listdir(path) if os.path.isfile(os.path.join(path, name))]\n    else:\n        raise ValueError(\"path must be a folder\")\n    \ndef reverse(nums):\n    '''\n    Write a function to reverse a list.\n    '''\n    if len(nums) == 0:\n        return nums\n    else:\n        return nums[-1:] + nums[:-1]\n",
        "num_ids": 38
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1/num2 for num1, num2 in zip(nums1,nums2)]\n",
        "num_ids": 28
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    ans = []\n    for i in range(len(nums1)):\n        ans.append(nums1[i]/nums2[i])\n    return ans\n",
        "num_ids": 44
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.split()\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            continue\n        elif test_str[i].isalpha():\n            continue\n        else:\n            if i == 0:\n                test_str.append(test_str.pop(i))\n                continue\n            elif i == len(test_str)-1:\n                test_str.append(test_str.pop(i))\n                continue\n            else:\n                i_pre = test_str.index(test_str[i-1])\n                i_next = test_str.index(test_str[i+1])\n                test_str[i_pre] = test_str[i]\n                test_str[i_next] = test_str[i]\n    test_str =''.join(test_str)\n    return test_str\n",
        "num_ids": 220
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str=''\n    for i in test_str:\n        if i.isnumeric():\n            new_str=new_str+i+' '\n    return new_str\n",
        "num_ids": 47
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    for i in range(0, len(test_str)):\n        if test_str[i].isdigit():\n            test_str = test_str[i:] + test_str[:i]\n    return test_str\n    \ndef alphabet_position(text):\n    '''\n    Write a function that takes a string and returns a string where all the\n    characters are in alphabetical order.\n    '''\n    \n    new_str = \"\"\n    \n    for i in range(0, len(text)):\n        if 65 <= ord(text[i]) <= 90:\n            new_str += chr(ord(text[i]) + 32)\n        else:\n            new_str += text[i]\n    return new_str\n    \ndef string_match(a, b):\n    '''\n    Write a function that checks if two strings are anagrams of each other.\n    '''\n    \n    return sorted(a) == sorted(b)\n    \ndef string_anagram(s1, s2):\n    '''\n    Write a function that takes two strings and returns True if they are\n    anagrams of each other, False otherwise.\n    '''\n    \n    if sorted(s1) == sorted(s2):\n        return True\n    else:\n        return False\n    \ndef string_anagram_optimised(s1, s2):\n    '''\n    Write a function that takes two strings and returns True if they are\n    anagrams of each other, False otherwise.\n    '''\n    \n    if len(s1)!= len(s2):\n        return False\n    \n    count = {}\n    \n    for i in range(len(s1)):\n        if s1[i] in count:\n            count[s1[i]] += 1\n        else:\n            count[s1[i]] = 1\n        \n        if s2[i] in count:\n            count[s2[i]] -= 1\n        else:\n            count[s2[i]] = -1\n        \n        if count[s1[i]]!= 0 or count[s2[i]]!= 0:\n            return False\n        \n    return True\n    \ndef count_substring(string, sub_string):\n    '''\n    Write a function that takes a string and a substring and returns the\n    number of times that the substring occurs in the string.\n    '''\n    \n    count = 0\n    \n    for i in range(len(string)):\n        if string[i:].startswith(sub_string):\n            count += 1\n            \n    return count\n    \ndef count_substring_optimised(string, sub_string):\n    '''\n    Write a function that takes a string and a substring and returns the\n    number of times that the substring occurs in the string.\n    '''\n    \n    if len(sub_string) == 0:\n        return 0\n    \n    count = 0\n    \n    for i in range(len(string)):\n        if string[i:].startswith(sub_string):\n            count += 1\n            \n    return count\n    \ndef multiply_even_numbers(a, b):\n    '''\n    Write a function that accepts a list of numbers and returns the product\n    of all the even numbers.\n    '''\n    \n    even_product = 1\n    \n    for i in range(len(a)):\n        if i % 2 == 0:\n            even_product *= a[i]\n            \n    return even_product\n    \ndef multiply_even_numbers_optimised(a, b):\n    '''\n    Write a function that accepts a list of numbers and returns the product\n    of all the even numbers.\n    '''\n    \n    if len(a) == 0:\n        return 0\n    \n    even_product = 1\n    \n    for i in range(len(a)):\n        if i % 2 == 0:\n            even_product *= a[i]\n            \n    return even_product\n    \ndef add_string(s1, s2):\n    '''\n    Write a function that takes a string and returns the string consisting\n    of the first character of string1 followed by the last character of\n    string1 and so on, up until and including the last character of string2.\n    '''\n    \n    if len(s1) < len(s2):\n        return s2[:len(s1)] + s1\n    \n    return s1 + s2[:len(s2)]\n    \ndef add_string_optimised(s1, s2):\n    '''\n    Write a function that takes a string and returns the string consisting\n    of the first character of string1 followed by the last character of\n    string1 and so on, up until and including the last character of string2.\n    '''\n    \n    if len(s1) < len(s2):\n        return s2[:len(s1)] + s1\n    \n    return s1 + s2[:len(s2)]\n    \ndef last_index(arr, val):\n    '''\n    Write a function that takes an array and a value and returns the last\n    index of the value in the array.\n    '''\n    \n    for i in range(len(arr)):\n        if arr[i] == val:\n            return i\n            \ndef last_index_optimised(arr, val):\n    '''\n    Write a function that takes an array and a value and returns the last\n    index of the value in the array.\n    '''\n    \n    if len(arr) == 0:\n        return -1\n    \n    for i in range(len(arr)):\n        if arr[i] == val:\n            return i\n            \ndef count_occurrences(string, char):\n    '''\n    Write a function that returns the number of occurrences of char in\n    string.\n    '''\n    \n    return string.count(char)\n    \ndef count_occurrences_optimised(string, char):\n    '''\n    Write a function that returns the number of occurrences of char in\n    string.\n    '''\n    \n    return string.count(char)\n    \ndef reverse_string(string):\n    '''\n    Write a function that reverses the string in place.\n    '''\n    \n    for i in range(len(string) // 2):\n        string[i], string[len(string) - i - 1] = string[len(string) - i - 1], string[i]\n    \n    return string\n    \ndef reverse_string_optimised(string):\n    '''\n    Write a function that reverses the string in place.\n    '''\n    \n    string.reverse()\n    \n    return string\n    \ndef pivot(lst):\n    '''\n    Write a function that takes a list of numbers and returns the value of the\n    pivot element.\n    '''\n    \n    return lst[-1]\n    \ndef pivot_optimised(lst):\n    '''\n    Write a function that takes a list of numbers and returns the value of the\n    pivot element.\n    '''\n    \n    return lst[-1]\n    \ndef sum_list(lst):\n    '''\n    Write a function that takes a list and returns the sum of all the items\n    in the list.\n    '''\n    \n    return sum(lst)\n    \ndef sum_list_optimised(lst):\n    '''\n    Write a function that takes a list and returns the sum of all the items\n    in the list.\n    '''\n    \n    return sum(lst)\n    \ndef sum_list_n(n, lst):\n    '''\n    Write a function that takes a list and n and returns the sum of the\n    first n items in the list.\n    '''\n    \n    return sum(lst[:n])\n    \ndef sum_list_n_optimised(n, lst):\n    '''\n    Write a function that takes a list and n and returns the sum of the\n    first n items in the list.\n    '''\n    \n    return sum(lst[:n])\n    \ndef sum_list_start(start, lst):\n    '''\n    Write a function that takes a list and start and returns the sum of the\n    items from the start index to the end index.\n    '''\n    \n    return sum(lst[start:])\n    \ndef sum_list_start_optimise",
        "num_ids": 26
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    start = 0\n    end = len(test_str) - 1\n    while start < end:\n        while test_str[start].isnumeric() and start < end:\n            start += 1\n        while test_str[end].isnumeric() and start < end:\n            end -= 1\n        if start < end:\n            test_str = test_str[:start] + test_str[start+1:end] + test_str[start] + test_str[end+1:]\n    return test_str\n",
        "num_ids": 125
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return test_str[0] + test_str[1:].replace(\" \",\"\")\n",
        "num_ids": 24
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    import re\n    i = re.sub(r'\\d+','',test_str)\n    return i\n",
        "num_ids": 29
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # let's just try to build a function that will move all the numbers to the end of the given string\n    # this is a naive implementation - it just iterates through the string and tries to reassign each\n    # character in the string to its index position. The function should return a string that has all the numbers\n    # moved to the end of the given string.\n    # def move_num(test_str):\n    #     ret = ''\n    #     for ch in test_str:\n    #         if ch.isdigit():\n    #             ret = ch + ret\n    #         else:\n    #             ret = ret + ch\n    #     return ret\n",
        "num_ids": 154
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    if len(test_str) == 0:\n        return ''\n        \n    result = ''\n    alpha_index = 0\n    \n    while alpha_index < len(test_str):\n        for i in range(alpha_index, len(test_str)):\n            if test_str[i] =='':\n                break\n        \n        if alpha_index == i:\n            for i in range(len(test_str)):\n                if test_str[i] =='':\n                    break\n                result += test_str[i]\n                \n        else:\n            result += test_str[i]\n            \n        alpha_index = i + 1\n    \n    return result\n",
        "num_ids": 165
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return_str = ''\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            return_str += test_str[i]\n            test_str = test_str.replace(test_str[i], '')\n    return_str += test_str\n",
        "num_ids": 77
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    l = test_str.split(' ')\n    new_str = ''\n    for i in l:\n        if i.isdigit():\n            new_str += i +''\n    return new_str.strip()\n",
        "num_ids": 55
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    #base case: if there is only one item, it's the only subset\n    if len(a) <= 1:\n        return a\n    #recursive case: if there is only 2 items, return only the first one\n    elif len(a) == 2:\n        return a if a[0] % a[1] == 0 else a[1:]\n    else:\n        #divisors of a[0]\n        a0_divisors = largest_subset(a[:len(a)//2])\n        #divisors of a[1]\n        a1_divisors = largest_subset(a[len(a)//2:])\n        #return a0_divisors + a1_divisors if a0_divisors[0] > a1_divisors[0] else a1_divisors + a0_divisors\n        return max(a0_divisors + a1_divisors, key=len)\n",
        "num_ids": 233
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def helper(a):\n        # for every number in the list\n        for i in range(len(a)):\n            # compute the sum of all the numbers divisible by the number\n            s = sum([x for x in a if x % a[i] == 0])\n            if s > len(a):\n                # save the smallest sum in an array\n                res = [a[i]]\n                # add the rest of the numbers divisible by a[i] to the res\n                for j in range(i+1, len(a)):\n                    s = sum([x for x in a if x % a[j] == 0])\n                    if s <= len(a):\n                        res.append(a[j])\n                    else:\n                        break\n                return res\n        return []\n",
        "num_ids": 184
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    s = set()\n    for i in a:\n        s.add(i)\n    for i in range(1,max(a)):\n        if i not in s and i in a:\n            return i\n    return -1\n",
        "num_ids": 58
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    k = 2\n    ans = 0\n    while(k <= n):\n        i = 0\n        while(i + 1 < n and a[i] % k == 0):\n            i += 1\n        if(i == 0):\n            k += 1\n            continue\n        ans = max(ans, i)\n        k += 1\n    return ans\n",
        "num_ids": 98
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # https://www.geeksforgeeks.org/largest-sum-contiguous-subarray-whose-sum-divides-another-array/\n    # https://www.geeksforgeeks.org/largest-sum-contiguous-subarray/\n    # https://www.geeksforgeeks.org/find-the-largest-subarray-with-sum-equal-to-another-array/\n    \n    s,sums = 0,0\n    st = [] # store the index of all summations with this sum\n    for i,v in enumerate(a):\n        s += v\n        sums += v\n        if sums == s:\n            st.append(i)\n        if sums > s:\n            s = 0\n            sums = 0\n    print(s,st)\n    \n    t = set(st)\n    print(t)\n    l = max(t)\n    r = min(t)\n    ans = []\n    for i in range(l,r+1):\n        ans.append(a[i])\n    print(ans)\n",
        "num_ids": 254
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = list(a)\n    max_subset = []\n    a.sort()\n    \n    def get_max_subset(a, i, j, subset):\n        if subset == max_subset:\n            return\n",
        "num_ids": 57
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    N = len(a)\n    s = {a[i]: i for i in range(N)}\n    d = {a[i]: i for i in range(N)}\n    print(s,d)\n    count = 0\n    max_count = 0\n    while len(s) > 1:\n        for i in s:\n            if i - 1 in d:\n                d[i] = max(d[i - 1], d[i])\n            else:\n                d[i] = d[i - 1]\n        s.pop(d[max(s.keys())])\n        count += 1\n        print(s,d)\n        max_count = max(max_count, count)\n        count = 0\n    print(max_count)\n",
        "num_ids": 181
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # https://www.geeksforgeeks.org/largest-subset-of-given-numbers/\n    # https://www.geeksforgeeks.org/largest-subset-of-given-numbers-dynamic-programming/\n    # https://www.geeksforgeeks.org/largest-subset-of-given-numbers-dynamic-programming-using-array/\n    # https://www.geeksforgeeks.org/largest-subset-of-given-numbers-dynamic-programming-using-memoization/\n    # https://www.geeksforgeeks.org/largest-subset-of-given-numbers-dynamic-programming-using-memoization/\n    # https://www.geeksforgeeks.org/largest-subset-of-given-numbers-dynamic-programming-using-memoization-memoization/\n    # https://www.geeksforgeeks.org/largest-subset-of-given-numbers-dynamic-programming-using-memoization/\n",
        "num_ids": 252
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    if n==1: return a\n    subsets = []\n    for i in range(n):\n        for j in range(i+1,n):\n            if j>i+1 and a[j]%a[i]==0 and a[j]/a[i]>1:\n                subsets.append([a[i],a[j]])\n    if len(subsets)==0: return a\n    subsets.sort(key = lambda x:x[0])\n    return subsets[0]\n",
        "num_ids": 133
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    i = 0\n    while i < len(a):\n        j = i\n        if a[i] > 1:\n            while j < len(a):\n                if a[j] % a[i]!= 0:\n                    j = j + 1\n                else:\n                    del a[j]\n        i = i + 1\n    return(len(a))\nprint(largest_subset([2, 4, 6, 8]))\n",
        "num_ids": 106
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    # if sorted array has odd length\n    if n%2 == 1:\n        # return middle element of arr1\n        return arr1[n//2]\n    else:\n        # return average of two middle elements\n        return (arr1[n//2 - 1] + arr1[n//2])/2\n",
        "num_ids": 77
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        return find_element_using_binary_search(arr1, arr2, n//2, n//2)\n    else:\n        return find_element_using_binary_search(arr1, arr2, (n+1)//2, n//2)\n",
        "num_ids": 73
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    #find the middle index\n    middle = n // 2\n    if n % 2 == 0:\n        # if the list contains an even amount of elements\n        return (arr1[middle] + arr2[middle]) // 2\n    else:\n        return arr1[middle]\n",
        "num_ids": 66
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # find the midpoint of the array\n    mid = int(n/2)\n    # print(mid)\n    # if the array has odd number of elements\n    if n % 2 == 1:\n        # take the average of the middle two elements\n        return (arr1[mid] + arr2[mid])/2\n    # else if the array has even number of elements\n    else:\n        # take the average of the middle two elements\n        return (arr1[mid] + arr2[mid-1])/2\n",
        "num_ids": 123
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    if n%2==0:\n        return (find_mid(arr1, n//2) + find_mid(arr2, n//2))//2\n    else:\n        return find_mid(arr1, n//2)\n",
        "num_ids": 60
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    m,n = len(arr1), len(arr2)\n    if m > n:\n        arr1, arr2, m, n = arr2, arr1, n, m\n    if n == 0:\n        raise ValueError\n    imin, imax, half_len = 0, m, (m + n + 1) // 2\n    while imin <= imax:\n        i = (imin + imax) // 2\n        j = half_len - i\n        if i < m and arr2[j-1] > arr1[i]:\n            # i is too small, must increase it\n            imin = i + 1\n        elif i > 0 and arr1[i-1] > arr2[j]:\n            # i is too big, must decrease it\n            imax = i - 1\n        else:\n            # i is perfect\n            if i == 0: max_of_left = arr2[j-1]\n            elif j == 0: max_of_left = arr1[i-1]\n            else: max_of_left = max(arr1[i-1], arr2[j-1])\n            \n            if (m + n) % 2 == 1:\n                return max_of_left\n            \n            if i == m: min_of_right = arr2[j]\n            elif j == n: min_of_right = arr1[i]\n            else: min_of_right = min(arr1[i], arr2[j])\n            \n            return (max_of_left + min_of_right) / 2.0\n",
        "num_ids": 376
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    size = len(arr1)\n    x = size//2\n    if size % 2 == 0:\n        return (arr1[x-1] + arr1[x])/2\n    else:\n        return arr1[x]\n",
        "num_ids": 58
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.sort()\n    arr2.sort()\n    arr1_len = len(arr1)\n    arr2_len = len(arr2)\n",
        "num_ids": 40
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return -1\n",
        "num_ids": 14
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    \n    result = []\n    \n    for num in nums:\n        result.append(num ** n)\n    \n    return result\n    \ndef test_nth_nums():\n    assert nth_nums([1,2,3,4], 3) == [1, 8, 27, 64]\n    assert nth_nums([1,2,3,4], 1) == [1, 1, 1, 1]\n    assert nth_nums([1,2,3,4], 5) == [1, 8, 27, 64, 256]\n",
        "num_ids": 136
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    l = []\n    for i in nums:\n        i = i ** n\n        l.append(i)\n    print(l)\n",
        "num_ids": 36
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(0,len(nums)):\n        nums[i] = nums[i]**n\n    return nums\n",
        "num_ids": 37
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [n**x for x in range(0,n+1)]\nprint(nth_nums([-2, 3, 4],2))\n",
        "num_ids": 38
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n == 1:\n        return list(map(lambda x: x**n, nums))\n",
        "num_ids": 26
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Your code here\n    new_list = []\n    for i in range(len(nums)):\n        new_list.append(nums[i]**n)\n    return new_list\n    \n        \n",
        "num_ids": 54
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    \n    i = 0\n    while i < len(nums):\n        nums[i] = nums[i] ** n\n        i += 1\n",
        "num_ids": 39
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Create an empty list to hold the results\n    results = []\n",
        "num_ids": 18
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums_copy=nums.copy()\n    for i in range(len(nums_copy)):\n        nums_copy[i]=n*nums_copy[i]\n    return nums_copy\n",
        "num_ids": 54
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n==1:\n        return nums\n    else:\n        return[n*x for x in nums]\n",
        "num_ids": 31
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # your code here\n    return string.upper()\n",
        "num_ids": 15
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    result = string.upper()\n    return result\n    \ndef split_sequence(list_to_be_split):\n    '''\n    Write a python function to split a given string.\n    '''\n    result = list_to_be_split.split()\n    return result\n",
        "num_ids": 20
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    \n    \n    if string:\n        if string[0].isupper():\n            return string.upper()\n        else:\n            return string\n    else:\n        return None\n",
        "num_ids": 44
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper_str = ''\n    for letter in string:\n        upper_str += letter.upper()\n    return upper_str\n",
        "num_ids": 32
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    \n    # code here\n    string = string.upper()\n    return string\n",
        "num_ids": 21
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    head = newList.head\n    head2 = newList.head2\n    newList.head = head2\n    newList.head2 = head\n",
        "num_ids": 38
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\nprint(swap_List([1,2,3,4,5]))\n",
        "num_ids": 51
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    len_list=len(newList)\n    print(len_list)\n    newList[len_list-1],newList[0]=newList[0],newList[len_list-1]\n    return newList\n",
        "num_ids": 56
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    n = len(newList)\n    last = newList[n-1]\n    newList[0], newList[n-1] = newList[n-1], newList[0]\n    return newList\nprint(swap_List([1,2,3,4]))\n",
        "num_ids": 71
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if newList == []:\n        return []\n    last = newList[len(newList)-1]\n    newList.pop()\n    newList.append(last)\n    return newList\n    \n",
        "num_ids": 51
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n",
        "num_ids": 31
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if not newList:\n        return newList\n    else:\n        temp = newList[0]\n        newList[0] = newList[len(newList)-1]\n        newList[len(newList)-1] = temp\n        return newList\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2013
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    first = newList[0]\n    last = newList[len(newList) - 1]\n    newList[0] = last\n    newList[len(newList) - 1] = first\n    return newList\n    \ndef swap_List_recursive(newList, index):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    if index == len(newList) - 1:\n        newList[0] = newList[index]\n        newList[index] = newList[len(newList) - 1]\n        newList[len(newList) - 1] = newList[0]\n    else:\n        newList[index] = newList[index + 1]\n        newList[index + 1] = newList[index]\n        newList[index] = newList[index + 1]\n        newList = swap_List_recursive(newList, index + 1)\n    return newList\n",
        "num_ids": 141
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) > 0:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    else:\n        return []\n",
        "num_ids": 51
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList\n",
        "num_ids": 45
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def area_tri(r):\n        #area of triangle\n        s=math.sqrt(3)*r*r\n        print(\"area of triangle=\",s)\n        #area of sector\n        t=2*math.sqrt(3)*r\n        print(\"area of sector=\",t)\n        #area of circle\n        c=r*r*math.pi\n        print(\"area of circle=\",c)\n        #area of the triangle\n        s=math.sqrt(3)*r*r\n        return s\n    #main program\n    r=float(input(\"enter the radius of the semicircle:\"))\n    area_tri(r)\n    \ndef pyramid(a,b) :\n    '''\n    Write a python function that takes two integers, a and b, as parameters and then returns the maximum number of ways you can partition a given number into a pyramid with the sum a and b.\n    '''\n    #pseudocode\n    #number of ways to partition\n    c=0\n    #number of ways to partition into the pyramid\n    p=0\n    #highest pyramid\n    h=0\n    #largest pyramid\n    l=0\n    for i in range(a,b+1):\n        c=c+1\n    for i in range(a,b+1):\n        p=p+1\n    if(a+b>c):\n        h=c\n        l=a+b\n    elif(a+b<c):\n        h=c\n        l=a\n    else:\n        h=c\n        l=a\n    return p,h,l\n    \ndef pyramid_tri(a,b) :\n    '''\n    Write a python function to find the maximum number of ways that a given number can be partitioned into a pyramid with a given sum.\n    '''\n    #pseudocode\n    #number of ways to partition\n    c=0\n    #number of ways to partition into the pyramid\n    p=0\n    #highest pyramid\n    h=0\n    #largest pyramid\n    l=0\n    #lower bound of a\n    a_lb=0\n    #upper bound of a\n    a_ub=a\n    for i in range(a_lb,a_ub+1):\n        c=c+1\n    #lower bound of b\n    b_lb=0\n    #upper bound of b\n    b_ub=b\n    for i in range(b_lb,b_ub+1):\n        p=p+1\n    if(a+b>c):\n        h=c\n        l=a+b\n    elif(a+b<c):\n        h=c\n        l=a\n    else:\n        h=c\n        l=a\n    return p,h,l\n    \ndef water_tower(a,b,c) :\n    '''\n    Write a python function that takes three integers a,b,c as parameters and returns the maximum number of ways that the height of a water tower can be reached.\n    '''\n    #pseudocode\n    #number of ways to partition\n    c=0\n    #number of ways to partition into the pyramid\n    p=0\n    #highest pyramid\n    h=0\n    #largest pyramid\n    l=0\n    for i in range(a,b+1):\n        c=c+1\n    for i in range(b,c+1):\n        p=p+1\n    if(a+b+c>c):\n        h=c\n        l=a+b+c\n    elif(a+b+c<c):\n        h=c\n        l=a\n    else:\n        h=c\n        l=a\n    return p,h,l\n    \ndef howManyGames(p, d, m, s):\n    '''\n    Write a python function that takes four parameters, p, d, m, s as parameters and returns the number of games you can play.\n    '''\n    import math\n    def game_num(p,d,m,s) :\n        #number of games\n        num=0\n        #number of games till completion\n        num_g=0\n        #max games\n        num_g_max=p\n        #max games till completion\n        num_g_max_till_completion=p\n        #max games till completion without completing\n        num_g_max_till_completion_noc=p\n        #number of games completed till completion\n        num_g_completion=0\n        #number of games\n        num_g_noc=0\n        while(num<d) :\n            #number of games till completion\n            num_g=num_g+1\n            if(num_g>num_g_max_till_completion):\n                num_g_max_till_completion=num_g\n            if(num_g>num_g_max_till_completion_noc):\n                num_g_max_till_completion_noc=num_g\n            if(num_g_noc>num_g_max_till_completion_noc):\n                num_g_max_till_completion_noc=num_g_noc\n            if(num_g_completion>num_g_max_till_completion_noc):\n                num_g_max_till_completion_noc=num_g_completion\n            num_g_noc=0\n            #current games\n            num_g_cur=0\n            while(num_g_cur<m) :\n                #number of games till completion\n                num_g=num_g+1\n                if(num_g>num_g_max_till_completion):\n                    num_g_max_till_completion=num_g\n                if(num_g>num_g_max_till_completion_noc):\n                    num_g_max_till_completion_noc=num_g\n                if(num_g_noc>num_g_max_till_completion_noc):\n                    num_g_max_till_completion_noc=num_g_noc\n                if(num_g_completion>num_g_max_till_completion_noc):\n                    num_g_max_till_completion_noc=num_g_completion\n                num_g_cur=0\n                #current games\n                num_g_cur=num_g_cur+1\n                if(num_g_cur>m) :\n                    break\n                #number of games till completion\n                num_g=num_g-s\n                if(num_g>num_g_max_till_completion):\n                    num_g_max_till_completion=num_g\n                if(num_g>num_g_max_till_completion_noc):\n                    num_g_max_till_completion_noc=num_g\n                if(num_g_noc>num_g_max_till_completion_noc):\n                    num_g_max_till_completion_noc=num_g_noc\n                if(num_g_completion>num_g_max_till_completion_noc):\n                    num_g_max_till_completion_noc=num_g_completion\n                num_g_noc=0\n                #current games\n                num_g_cur=num_g_cur-s\n                if(num_g_cur<0) :\n                    break\n                #number of games till completion\n                num_g=num_g+1\n                if(num_g>num_g_max_till_completion):\n                    num_g_max_till_completion=num_g\n                if(num_g>num_g_max_till_completion_noc):\n                    num_g_max_till_completion_noc=num_g\n                if(num_g_noc>num_g_max_till_completion_noc):\n                    num_g_max_till_completion_noc=num_g_noc\n                if(num_g_completion>num_g_max_till_completion_noc):\n                    num_g_max_till_completion_noc=num_g_completio",
        "num_ids": 1071
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = math.pi * r * r\n    print(f\"Area of largest triangle inscribed in semicircle with radius {r} is {area}\")\n",
        "num_ids": 42
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area_x = 1/2*r*r*math.sqrt(1+math.cos(math.pi/3)**2)\n    area_y = 1/2*r*r*math.sqrt(1+math.cos(math.pi/6)**2)\n    area_z = 1/2*r*r*math.sqrt(1+math.cos(math.pi/8)**2)\n    return area_x+area_y+area_z\n",
        "num_ids": 118
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = (1.0 / 2) * math.sqrt(2 * math.pi * r ** 2)\n    return area\n",
        "num_ids": 33
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    a = r*r*math.sqrt(3)\n    print(\"The area of the largest triangle that can be inscribed in a semicircle with a given radius is :\",a)\n",
        "num_ids": 49
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.14159265358979323\n    a = (pi*r**2)/3\n    return a\n",
        "num_ids": 31
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # a = 0.5 * 3.14 * r * r\n    area = 3.14 * r * r\n    return area\nprint(triangle_area(2))\n",
        "num_ids": 43
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r <= 0 :\n        raise ValueError(\"Radius cannot be 0 or negative\")\n    return (1/3) * math.sqrt(3) * r * r\n",
        "num_ids": 43
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area_of_triangle(r) :\n        '''\n        The area of the triangle is 1/2(l x h)\n        '''\n        l = 2 * r * math.sin(math.pi/3)\n        h = l / math.tan(math.pi/3)\n        return (l * h)/2\n    def area_of_rectangle(l, h) :\n        return (l * h)/2\n    # A function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius\n    def largest_triangle_area(r) :\n        # l = 2 * r * math.sin(math.pi/3)\n        # h = l / math.tan(math.pi/3)\n        # return (l * h)/2\n        return area_of_triangle(r)\n",
        "num_ids": 166
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # a = 3*r^2\n    a = 3 * r ** 2\n    b = r ** 2\n    c = (b * math.sqrt(2)) / 2\n    area = (a + b + c) / 2\n    return a\n",
        "num_ids": 61
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # if end is not defined, we use the max value of array as end\n    if end is None:\n        end = len(array) - 1\n",
        "num_ids": 37
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n    if start > end:\n        return\n    mid = (start + end) // 2\n    if array[mid] == mid + 1:\n        find_First_Missing(array,start,mid - 1)\n    elif array[mid] == mid:\n        find_First_Missing(array,mid + 1, end)\n    else:\n        find_First_Missing(array,start,mid - 1)\n        find_First_Missing(array,mid + 1, end)\n    return mid + 1\n",
        "num_ids": 137
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if end - start < 3:\n        return end + 1\n    if end - start == 3:\n        return array[start + 2]\n",
        "num_ids": 50
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    for i in range(start,end):\n        if array[i]!= i + 1:\n            return i + 1\n    return end + 1\n",
        "num_ids": 53
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start < end:\n        mid = start + (end - start)//2\n        if array[mid] == mid+1:\n            return find_First_Missing(array,mid+1,end)\n        elif array[mid] < mid+1:\n            return find_First_Missing(array,start,mid)\n        else:\n            return find_First_Missing(array,mid+1,end)\n    else:\n        return mid+1\n",
        "num_ids": 125
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start == end:\n        return -1\n    if start >= end:\n        return start\n    mid = (start + end) // 2\n    if mid == array[mid]:\n        if mid + 1 <= len(array) - 1 and array[mid] == array[mid + 1]:\n            return find_First_Missing(array,start=mid + 2,end=end)\n        else:\n            return find_First_Missing(array,start=start,end=mid)\n    elif mid < array[mid]:\n        if array[mid] == mid + 1:\n            return find_First_Missing(array,start=mid + 2,end=end)\n        else:\n            return find_First_Missing(array,start=start,end=mid)\n    elif mid > array[mid]:\n        if array[mid] == mid - 1:\n            return find_First_Missing(array,start=start,end=mid - 2)\n        else:\n            return find_First_Missing(array,start=start,end=mid)\n",
        "num_ids": 261
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if start < 0 or end is not None and end < 0 or start > end:\n        raise ValueError('Start index cannot be greater than end index or be less than 0')\n    if end is None and start > len(array):\n        raise ValueError('Start index cannot be greater than the length of array')\n    if start == 0 and end == len(array):\n        return len(array)\n    if end == len(array):\n        return len(array) - 1\n    if end == 0:\n        return 0\n    if end - start == 0:\n        return start\n    if start == 0:\n        return end\n    return find_First_Missing(array,start,end-1)\n",
        "num_ids": 162
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    for i in range(start,end):\n        if (i+1) not in array:\n            return i+1\n    return None\n",
        "num_ids": 50
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    \n    for i in range(start,end+1):\n        if i not in array:\n            return i\n    return -1\n",
        "num_ids": 49
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n",
        "num_ids": 18
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "num_ids": 13
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    \n    #using python slice to take the string\n    string_replace_spaces = string[:]\n    #spliting the string at the spaces and take the first element\n    string_replace_spaces = string_replace_spaces.split(' ')\n    \n    #list comprehension to replace the spaces\n    string_replace_spaces = [i.replace(' ', '%20') for i in string_replace_spaces]\n    \n    #converting back to the string\n    string_replace_spaces = ''.join(string_replace_spaces)\n    \n    return string_replace_spaces\n    \n    \ndef replace_numbers(string):\n    '''\n    Write a function to replace all numbers in the given string with '%24'.\n    '''\n    \n    #using python slice to take the string\n    string_replace_numbers = string[:]\n    #spliting the string at the numbers and take the first element\n    string_replace_numbers = string_replace_numbers.split(' ')\n    \n    #list comprehension to replace the numbers\n    string_replace_numbers = [i.replace(' ', '%24') for i in string_replace_numbers]\n    \n    #converting back to the string\n    string_replace_numbers = ''.join(string_replace_numbers)\n    \n    return string_replace_numbers\n    \n    \ndef replace_punctuations(string):\n    '''\n    Write a function to replace all punctuations in the given string with '%2C'.\n    '''\n    \n    #using python slice to take the string\n    string_replace_punctuations = string[:]\n    #spliting the string at the punctuations and take the first element\n    string_replace_punctuations = string_replace_punctuations.split(' ')\n    \n    #list comprehension to replace the punctuations\n    string_replace_punctuations = [i.replace(' ', '%2C') for i in string_replace_punctuations]\n    \n    #converting back to the string\n    string_replace_punctuations = ''.join(string_replace_punctuations)\n    \n    return string_replace_punctuations\n    \n    \ndef replace_all(string):\n    '''\n    Write a function to replace all characters in the given string with '%25'.\n    '''\n    \n    #using python slice to take the string\n    string_replace_all = string[:]\n    #spliting the string at the punctuations and take the first element\n    string_replace_all = string_replace_all.split(' ')\n    \n    #list comprehension to replace the punctuations\n    string_replace_all = [i.replace(' ', '%25') for i in string_replace_all]\n    \n    #converting back to the string\n    string_replace_all = ''.join(string_replace_all)\n    \n    return string_replace_all\n    \n    \ndef space_compression(string):\n    '''\n    Write a function to compress given string and return the length of the compressed string.\n    '''\n    \n    #using python slice to take the string\n    string_compression = string[:]\n    #spliting the string at the spaces and take the first element\n    string_compression = string_compression.split(' ')\n    \n    #list comprehension to replace the spaces\n    string_compression = [i for i in string_compression if i!= '']\n    \n    #converting back to the string\n    string_compression = ''.join(string_compression)\n    \n    return len(string_compression)\n    \n    \ndef space_compression_no_count(string):\n    '''\n    Write a function to compress given string and return the length of the compressed string.\n    '''\n    \n    #using python slice to take the string\n    string_compression = string[:]\n    #spliting the string at the spaces and take the first element\n    string_compression = string_compression.split(' ')\n    \n    #list comprehension to replace the spaces\n    string_compression = [i for i in string_compression if i!= '']\n    \n    #converting back to the string\n    string_compression = ''.join(string_compression)\n    \n    return string_compression\n    \n    \ndef space_compression_no_count_sort(string):\n    '''\n    Write a function to compress given string and return the length of the compressed string.\n    '''\n    \n    #using python slice to take the string\n    string_compression = string[:]\n    #spliting the string at the spaces and take the first element\n    string_compression = string_compression.split(' ')\n    \n    #sorting the string using list sort\n    string_compression.sort()\n    \n    #list comprehension to replace the spaces\n    string_compression = [i for i in string_compression if i!= '']\n    \n    #converting back to the string\n    string_compression = ''.join(string_compression)\n    \n    return len(string_compression)\n    \n    \ndef space_compression_sort(string):\n    '''\n    Write a function to compress given string and return the length of the compressed string.\n    '''\n    \n    #using python slice to take the string\n    string_compression = string[:]\n    #spliting the string at the spaces and take the first element\n    string_compression = string_compression.split(' ')\n    \n    #sorting the string using list sort\n    string_compression.sort()\n    \n    #list comprehension to replace the spaces\n    string_compression = ''.join(string_compression)\n    \n    return len(string_compression)\n    \n    \ndef space_compression_count(string):\n    '''\n    Write a function to compress given string and return the length of the compressed string.\n    '''\n    \n    #using python slice to take the string\n    string_compression = string[:]\n    #spliting the string at the spaces and take the first element\n    string_compression = string_compression.split(' ')\n    \n    #list comprehension to replace the spaces\n    string_compression = [i for i in string_compression if i!= '']\n    \n    #converting back to the string\n    string_compression = ''.join(string_compression)\n    \n    #counting the spaces\n    count = 0\n    for i in string_compression:\n        if i!= '':\n            count = count + 1\n    \n    return count\n    \n    \ndef space_compression_count_sort(string):\n    '''\n    Write a function to compress given string and return the length of the compressed string.\n    '''\n    \n    #using python slice to take the string\n    string_compression = string[:]\n    #spliting the string at the spaces and take the first element\n    string_compression = string_compression.split(' ')\n    \n    #sorting the string using list sort\n    string_compression.sort()\n    \n    #list comprehension to replace the spaces\n    string_compression = [i for i in string_compression if i!= '']\n    \n    #converting back to the string\n    string_compression = ''.join(string_compression)\n    \n    #counting the spaces\n    count = 0\n    for i in string_compression:\n        if i!= '':\n            count = count + 1\n    \n    return count\n    \n    \ndef space_compression_sort_count(string):\n    '''\n    Write a function to compress given string and return the length of the compressed string.\n    '''\n    \n    #using python slice to take the string\n    string_compression = string[:]\n    #spliting the string at the spaces and take the first element\n    string_compression = string_compression.split(' ')\n    \n    #sorting the string using list sort\n    string_compression.sort()\n    \n    #list comprehension to replace the spaces\n    string_compression = [i for i in string_compression if i!= '']\n    \n    #converting back to the string\n    string_compression = ''.join(string_compression)\n    \n    #counting the spaces\n    count = 0\n    for i in string_compression:\n        if i!= '':\n            count = count + 1\n    \n    return count\n    \n    \ndef space_compression_count_sort_count(strin",
        "num_ids": 199
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n    \ndef test_replace_spaces():\n    assert replace_spaces(\"This is a test\") == \"This%20is%20a%20test\"\n    assert replace_spaces(\"   Hello   \") == \"Hello%20\"\n    assert replace_spaces(\"\") == \"\"\n    assert replace_spaces(\" \") == \"\"\n    assert replace_spaces(\"Hello\") == \"Hello\"\n    \n    \ndef find_the_longest(string):\n    '''\n    Write a function to find the longest word in the given string.\n    '''\n    return max(string.split(), key=len)\n    \ndef test_find_the_longest():\n    assert find_the_longest(\"Find the longest word\") == \"Find\"\n    assert find_the_longest(\"One\") == \"One\"\n    assert find_the_longest(\"\") == \"\"\n    assert find_the_longest(\"Hello world!\") == \"Hello\"\n    assert find_the_longest(\"Hello world! I am a developer.\") == \"I\"\n    assert find_the_longest(\"We need to find the longest word in this sentence.\") == \"longest\"\n    \n    \ndef is_palindrome(string):\n    '''\n    Write a function to check if the given string is palindrome or not.\n    '''\n    return string == string[::-1]\n    \ndef test_is_palindrome():\n    assert is_palindrome(\"\") == True\n    assert is_palindrome(\"A man, a plan, a canal: Panama\") == True\n    assert is_palindrome(\"race a car\") == False\n    assert is_palindrome(\"race a car.\") == False\n    \n    \ndef find_kth_largest(array, k):\n    '''\n    Write a function that takes an array and an integer k and returns the kth largest element in the array.\n    Note that it is the kth largest element in the sorted order, not the kth distinct element.\n    '''\n    \n    def partition(array, low, high):\n        \n        pivot = array[high]\n        i = low - 1\n        \n        for j in range(low, high):\n            \n            if array[j] <= pivot:\n                i += 1\n                array[i], array[j] = array[j], array[i]\n        \n        array[i + 1], array[high] = array[high], array[i + 1]\n        return i + 1\n        \n    def select(array, low, high, k):\n        \n        if low == high:\n            return array[low]\n        \n        index = partition(array, low, high)\n        \n        if index == k:\n            return array[index]\n        elif index < k:\n            return select(array, index + 1, high, k)\n        else:\n            return select(array, low, index - 1, k)\n    \n    return select(array, 0, len(array) - 1, k - 1)\n    \n    \ndef test_find_kth_largest():\n    assert find_kth_largest([5, 2, 1], 2) == 2\n    assert find_kth_largest([5, 2, 1], 1) == 5\n    assert find_kth_largest([5, 2, 1], 0) == 5\n    assert find_kth_largest([5, 2, 1], 3) == 1\n    assert find_kth_largest([5, 2, 1], 4) == 1\n    assert find_kth_largest([5, 2, 1], 5) == 5\n    assert find_kth_largest([5, 2, 1], 6) == 1\n    \n    \ndef test_find_kth_largest_2():\n    assert find_kth_largest([5, 2, 1, 2, 2, 2, 2, 2, 2], 3) == 2\n    assert find_kth_largest([5, 2, 1, 2, 2, 2, 2, 2, 2], 2) == 2\n    assert find_kth_largest([5, 2, 1, 2, 2, 2, 2, 2, 2], 1) == 5\n    assert find_kth_largest([5, 2, 1, 2, 2, 2, 2, 2, 2], 0) == 5\n    \n    \ndef find_maximum_of_three(arr):\n    '''\n    Write a function that takes an array of integers and returns the largest integer.\n    '''\n    \n    def maximum(arr):\n        \n        if len(arr) == 1:\n            return arr[0]\n        \n        if len(arr) == 2:\n            return max(arr[0], arr[1])\n        \n        l = arr[0]\n        h = max(arr[0], arr[1])\n        \n        for i in range(2, len(arr)):\n            if l < arr[i]:\n                h = max(arr[i], h)\n                l = arr[i]\n        \n        return h\n    \n    return maximum(arr)\n    \ndef test_find_maximum_of_three():\n    assert find_maximum_of_three([5, 7, -3, 4, 6]) == 7\n    assert find_maximum_of_three([5, 7, -3, 4, -6]) == 7\n    assert find_maximum_of_three([5, 7, -3, 4, -6]) == 7\n    assert find_maximum_of_three([5, 7, -3, 4, -6]) == 7\n    assert find_maximum_of_three([5, 7, -3, 4, -6]) == 7\n    assert find_maximum_of_three([5, 7, -3, 4, -6]) == 7\n    assert find_maximum_of_three([5, 7, -3, 4, -6]) == 7\n    \n    assert find_maximum_of_three([5, 7, -3, 4, 6, 2, -6]) == 7\n    assert find_maximum_of_three([5, 7, -3, 4, 6, 2, -6]) == 7\n    assert find_maximum_of_three([5, 7, -3, 4, 6, 2, -6]) == 7\n    assert find_maximum_of_three([5, 7, -3, 4, 6, 2, -6]) == 7\n    assert find_maximum_of_three([5, 7, -3, 4, 6, 2, -6]) == 7\n    assert find_maximum_of_three([5, 7, -3, 4, 6, 2, -6]) == 7\n    assert find_maximum_of_three([5, 7, -3, 4, 6, 2, -6]) == 7\n    \n    assert find_maximum_of_three([5, -7, -3, 4, 6, 2, -6]) == 5\n    assert find_maximum_of_three([5, -7, -3, 4, 6, 2, -6]) == 5\n    assert find_maximum_of_three([5, -7, -3, 4, 6, 2, -6]) == 5\n    assert find_maximum_of_three([5, -7, -3, 4, 6, 2, -6]) == 5\n    assert find_maximum_of_three([5, -7, -3, 4, 6, 2, -6]) == 5\n    assert find_maximum_of_three([5, -7, -3, 4, 6, 2, -6]) == 5\n    assert find_maximum_of_three([5, -7, -3, 4, 6, 2, -6]) == 5\n    \n    assert find_maximum_of_three([5, -7, -3, 4, 6, 2, -6]) == 5\n    assert find_maximum_of_three([5, -7, -3, 4, 6, 2, -6]) == 5\n    assert find_maximum_of_three([5, -7, -3, 4, 6, 2, -6]) == 5\n    assert find_maximum_of_three([5, -7, -3, 4, 6, 2, -6]) == 5\n    assert find_maximum_of_three([5, -7, -3, 4, 6, 2, -6]) == 5\n    assert find_maximum_of_three([5, -7, -3, 4, 6, 2, -6]) == 5\n    assert find_maximum_of_three([5, -7, -3, 4, 6, 2, -6]) == 5\n",
        "num_ids": 956
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    return [i for i in list if i%2==0]\n",
        "num_ids": 18
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in list:\n        if i%2 == 0:\n            even.append(i)\n    return even\n",
        "num_ids": 35
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in list: \n        if i % 2 == 0: \n            even_list.append(i)\n    return even_list \n",
        "num_ids": 44
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for i in list:\n        if i % 2 == 0:\n            even_numbers.append(i)\n    return even_numbers\n",
        "num_ids": 44
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list1 = []\n    for i in list:\n        if i % 2 == 0:\n            list1.append(i)\n    return list1\n",
        "num_ids": 38
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_no = [] \n    for i in list: \n        if i % 2 == 0: \n            even_no.append(i) \n    return even_no \n",
        "num_ids": 46
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n    return even\n",
        "num_ids": 35
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    if not list: \n        return []\n    even_numbers = []\n    for i in range(0, len(list)): \n        if list[i]%2 == 0: \n            even_numbers.append(list[i]) \n    return even_numbers \n",
        "num_ids": 71
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n    print(\"Even numbers from the given list: \", even)\n",
        "num_ids": 45
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    Even_list = []\n    for i in list:\n        if i % 2 == 0:\n            Even_list.append(i)\n    return Even_list\n",
        "num_ids": 41
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    #return [ele[0]+1,ele[1],ele[0]-1,ele[1],ele[0],ele[1]-1,ele[0],ele[1]+1]\n    #return [ele[0]+1,ele[1]+1,ele[0]-1,ele[1]-1]\n    #return [ele[0]-1,ele[1],ele[0],ele[1]+1,ele[0]+1]\n    #return [(ele[0], ele[1]-1), (ele[0], ele[1]+1), (ele[0]-1, ele[1]), (ele[0]+1, ele[1])]\n    #return [(ele[0]+1, ele[1]-1), (ele[0]+1, ele[1]), (ele[0]+1, ele[1]+1), (ele[0], ele[1]+1)]\n    return [(ele[0], ele[1]-1), (ele[0], ele[1]+1), (ele[0]-1, ele[1]), (ele[0]+1, ele[1])]\n",
        "num_ids": 256
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    lst = []\n    if ele[0] == 0 and ele[1] == 0: \n        lst.append(tuple((ele[0]+1, ele[1])))\n    elif ele[0] == 0 and ele[1]!= 0:\n        lst.append(tuple((ele[0]+1, ele[1]-1)))\n    elif ele[0]!= 0 and ele[1] == 0:\n        lst.append(tuple((ele[0]-1, ele[1])))\n    elif ele[0]!= 0 and ele[1]!= 0:\n        lst.append(tuple((ele[0]-1, ele[1]-1)))\n        lst.append(tuple((ele[0]-1, ele[1]+1)))\n        lst.append(tuple((ele[0]+1, ele[1]-1)))\n        lst.append(tuple((ele[0]+1, ele[1]+1)))\n",
        "num_ids": 236
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub.append(ele)\n    return sub\n",
        "num_ids": 14
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x = ele[0]\n    y = ele[1]\n    l = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if i == x and j == y:\n                continue\n            l.append((i, j))\n    return l\n",
        "num_ids": 81
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return ((ele[0]+1, ele[1]),(ele[0]-1, ele[1]),(ele[0], ele[1]+1),(ele[0], ele[1]-1),(ele[0]+1, ele[1]+1),(ele[0]-1, ele[1]-1),(ele[0]-1, ele[1]+1),(ele[0]+1, ele[1]-1))\n",
        "num_ids": 101
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x = ele[0]\n    y = ele[1]\n    sub.append([x-1, y])\n    sub.append([x+1, y])\n    sub.append([x, y+1])\n    sub.append([x, y-1])\n    return sub\n",
        "num_ids": 70
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x = ele[0]\n    y = ele[1]\n    #left up:\n    sub.append((x-1, y-1))\n    #left:\n    sub.append((x-1, y))\n    #right up\n    sub.append((x-1, y+1))\n    #right:\n    sub.append((x, y+1))\n    #left down\n    sub.append((x+1, y-1))\n    #right down\n    sub.append((x+1, y))\n    #return the adjacent coordinates\n    return sub\n",
        "num_ids": 138
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0:\n        sub = [ele]\n    else:\n        sub.append(ele)\n    for i in range(1, len(ele) + 1):\n        y = ele[0] - i\n        x = ele[1] - i\n        if 0 <= x < 8 and 0 <= y < 8:\n            sub.append((y, x))\n        y = ele[0] + i\n        x = ele[1] + i\n        if 0 <= x < 8 and 0 <= y < 8:\n            sub.append((y, x))\n    sub = tuple(sub)\n    return sub\n",
        "num_ids": 149
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x1,y1,z1 = ele\n    x2,y2,z2 = ele\n    return [[x1-1,y1-1,z1-1],\n    [x1+1,y1-1,z1-1],\n    [x1-1,y1+1,z1-1],\n    [x1+1,y1+1,z1-1],\n    [x1-1,y1-1,z1+1],\n    [x1+1,y1-1,z1+1],\n    [x1-1,y1+1,z1+1],\n    [x1+1,y1+1,z1+1],\n    [x2-1,y2-1,z2-1],\n    [x2+1,y2-1,z2-1],\n    [x2-1,y2+1,z2-1],\n    [x2+1,y2+1,z2-1],\n    [x2-1,y2-1,z2+1],\n    [x2+1,y2-1,z2+1],\n    [x2-1,y2+1,z2+1],\n    [x2+1,y2+1,z2+1],\n    [x1-2,y1-2,z1-2],\n    [x1-1,y1-2,z1-2],\n    [x1-1,y1-1,z1-2],\n    [x1+1,y1-1,z1-2],\n    [x1-1,y1+1,z1-2],\n    [x1+1,y1+1,z1-2],\n    [x1-1,y1+1,z1+1],\n    [x1+1,y1+1,z1+1],\n    [x1-2,y1+2,z1-2],\n    [x1-1,y1+2,z1-2],\n    [x1-1,y1+1,z1-1],\n    [x1+1,y1+1,z1-1],\n    [x1-1,y1+1,z1+1],\n    [x1+1,y1+1,z1+1],\n    [x1-1,y1-1,z1+2],\n    [x1+1,y1-1,z1+2],\n    [x1-1,y1+1,z1+2],\n    [x1+1,y1+1,z1+2],\n    [x2-2,y2-2,z2-2],\n    [x2-1,y2-2,z2-2],\n    [x2-1,y2-1,z2-2],\n    [x2+1,y2-1,z2-2],\n    [x2-1,y2+1,z2-2],\n    [x2+1,y2+1,z2-2],\n    [x2-1,y2+1,z2-1],\n    [x2+1,y2+1,z2-1],\n    [x2-2,y2+2,z2-2],\n    [x2-1,y2+2,z2-2],\n    [x2-1,y2+1,z2-1],\n    [x2+1,y2+1,z2-1],\n    [x2-1,y2+1,z2+1],\n    [x2+1,y2+1,z2+1],\n    [x2-1,y2+1,z2+2],\n    [x2+1,y2+1,z2+2],\n    [x2-1,y2-1,z2+2],\n    [x2+1,y2-1,z2+2],\n    [x2-1,y2-1,z2-1],\n    [x2+1,y2-1,z2-1],\n    [x2-1,y2-1,z2-2],\n    [x2+1,y2-1,z2-2],\n    [x2-1,y2-1,z2-2],\n    [x2+1,y2-1,z2-2],\n    [x2+2,y2-2,z2-2],\n    [x2-2,y2-2,z2-2],\n    [x2-2,y2-2,z2-1],\n    [x2-2,y2-2,z2-2],\n    [x2-2,y2-1,z2-1],\n    [x2-2,y2-1,z2-2],\n    [x2-2,y2-2,z2-1],\n    [x2-2,y2-2,z2-2],\n    [x2-1,y2-1,z2-1],\n    [x2-1,y2-1,z2-2],\n    [x2-1,y2-1,z2-2],\n    [x2+1,y2-1,z2-2],\n    [x2-1,y2-1,z2+1],\n    [x2-1,y2-1,z2+2],\n    [x2-1,y2-1,z2+3],\n    [x2+1,y2-1,z2+3],\n    [x2-1,y2-1,z2+2],\n    [x2+1,y2-1,z2+2],\n    [x2-1,y2-1,z2+1],\n    [x2+1,y2-1,z2+1],\n    [x2-1,y2-1,z2-1],\n    [x2-1,y2-1,z2-2],\n    [x2+1,y2-1,z2-2],\n    [x2-1,y2-1,z2-1],\n    [x2+1,y2-1,z2-1],\n    [x2-1,y2+1,z2-1],\n    [x2+1,y2+1,z2-1],\n    [x2-1,y2+1,z2+1],\n    [x2+1,y2+1,z2+1],\n    [x2-1,y2+1,z2+2],\n    [x2+1,y2+1,z2+2],\n    [x2-1,y2+1,z2+2],\n    [x2+1,y2+1,z2+3],\n    [x2-1,y2+1,z2+3],\n    [x2-1,y2+1,z2+2],\n    [x2-1,y2+1,z2+2],\n    [x2+1,y2+1,z2+2],\n    [x2-1,y2+1,z2+1],\n    [x2+1,y2+1,z2+1],\n    [x2-1,y2+1,z2-1],\n    [x2+1,y2+1,z2-1],\n    [x2-1,y2+1,z2-1],\n    [x2+1,y2+1,z2-2],\n    [x2-1,y2-1,z2-2],\n    [x2-1,y2+2,z2-2],\n    [x2-1,y2-2,z2-2],\n    [x2-1,y2-1,z2-2],\n    [x2+1,y2-1,z2-2],\n    [x2-1,y2-1,z2-3],\n    [x2-1,y2-1,z2-2],\n    [x2+1,y2-1,z2-2],\n    [x2-1,y2-1,z2-1],\n    [x2+",
        "num_ids": 2012
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] < 0 or ele[0] > 3:\n        return sub\n    else:\n        sub.append((ele[0] - 1, ele[1]))\n        sub.append((ele[0] + 1, ele[1]))\n        sub.append((ele[0], ele[1] - 1))\n        sub.append((ele[0], ele[1] + 1))\n    return adjac(sub[-1], sub[:-1])\n",
        "num_ids": 113
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_').replace('_','')\n",
        "num_ids": 19
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for i in range(len(text)):\n        if text[i] == \" \":\n            text = text[:i] + \"_\" + text[i+1:]\n        elif text[i] == \"_\":\n            text = text[:i] + \" \" + text[i+1:]\n    return text\n",
        "num_ids": 78
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_').replace('_','')\n",
        "num_ids": 19
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n",
        "num_ids": 19
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    word = text.replace(' ','_')\n    return word.replace('_',' ')\n",
        "num_ids": 25
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if text == '':\n        return text\n    return text.replace(' ', '_').replace('_','')\n    \ndef replace_double_spaces(text):\n    '''\n    Write a function to replace multiple spaces with a single space in a given string.\n    '''\n    if text == '':\n        return text\n    return text.replace('  ','')\n    \ndef delete_spaces(text):\n    '''\n    Write a function to delete extra spaces in a given string.\n    '''\n    if text == '':\n        return text\n    return text.replace('  ', '')\n    \ndef word_count(text):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    if text == '':\n        return 0\n    return len(text.split())\n    \ndef text_to_numbers(text):\n    '''\n    Write a function to convert a given string to a number.\n    '''\n    try:\n        return int(text)\n    except:\n        try:\n            return float(text)\n        except:\n            return text\n            \ndef get_numbers(text):\n    '''\n    Write a function to get the numbers from a given string.\n    '''\n    if text == '':\n        return text\n    return ''.join(str(text))\n    \ndef square_numbers(num):\n    '''\n    Write a function to square a given number.\n    '''\n    try:\n        return num**2\n    except:\n        try:\n            return int(num)\n        except:\n            return float(num)\n        \ndef multiply_numbers(num1, num2):\n    '''\n    Write a function to multiply 2 numbers.\n    '''\n    try:\n        return num1*num2\n    except:\n        try:\n            return float(num1)\n        except:\n            return float(num2)\n        \ndef divide_numbers(num1, num2):\n    '''\n    Write a function to divide 2 numbers.\n    '''\n    try:\n        return num1/num2\n    except:\n        try:\n            return float(num1)\n        except:\n            return float(num2)\n        \ndef add_number_and_number(num1, num2):\n    '''\n    Write a function to add 2 numbers.\n    '''\n    try:\n        return num1+num2\n    except:\n        try:\n            return float(num1)\n        except:\n            return float(num2)\n        \ndef sub_number_and_number(num1, num2):\n    '''\n    Write a function to subtract 2 numbers.\n    '''\n    try:\n        return num1-num2\n    except:\n        try:\n            return float(num1)\n        except:\n            return float(num2)\n        \ndef multiply_number_and_number(num1, num2):\n    '''\n    Write a function to multiply 2 numbers.\n    '''\n    try:\n        return num1*num2\n    except:\n        try:\n            return float(num1)\n        except:\n            return float(num2)\n        \ndef divide_number_and_number(num1, num2):\n    '''\n    Write a function to divide 2 numbers.\n    '''\n    try:\n        return num1/num2\n    except:\n        try:\n            return float(num1)\n        except:\n            return float(num2)\n        \ndef get_string_length(text):\n    '''\n    Write a function to get the length of a string.\n    '''\n    if text == '':\n        return 0\n    return len(text)\n    \ndef print_string(text):\n    '''\n    Write a function to print a string.\n    '''\n    if text == '':\n        return ''\n    return f'{text}'\n    \ndef get_string_reversed(text):\n    '''\n    Write a function to get the reverse of a string.\n    '''\n    if text == '':\n        return ''\n    return text[::-1]\n    \ndef get_string_capitalized(text):\n    '''\n    Write a function to capitalize a string.\n    '''\n    if text == '':\n        return text\n    return text.upper()\n    \ndef reverse_string_recursion(text):\n    '''\n    Write a function to get the reverse of a string using recursion.\n    '''\n    if text == '':\n        return ''\n    return reverse_string_recursion(text[1:]) + text[0]\n    \ndef reverse_string_iteration(text):\n    '''\n    Write a function to get the reverse of a string using iteration.\n    '''\n    if text == '':\n        return text\n    rev = ''\n    for i in range(len(text)-1, -1, -1):\n        rev += text[i]\n    return rev\n    \ndef reverse_string_for_loop(text):\n    '''\n    Write a function to get the reverse of a string using for loop.\n    '''\n    if text == '':\n        return ''\n    rev = ''\n    for i in range(len(text)-1, -1, -1):\n        rev += text[i]\n    return rev\n    \ndef count_occurences(text, search):\n    '''\n    Write a function to count the number of occurences of a substring in a given string.\n    '''\n    if text == '':\n        return 0\n    if search == '':\n        return 0\n    if len(text) < len(search):\n        return 0\n    \n    start = 0\n    count = 0\n    while start < len(text) and count < len(search):\n        if text[start] == search[count]:\n            start += 1\n            count += 1\n        else:\n            start += 1\n            count = 0\n    return count\n    \ndef get_first_occurence(text, search):\n    '''\n    Write a function to get the first occurence of a substring in a given string.\n    '''\n    if text == '':\n        return ''\n    if search == '':\n        return ''\n    if len(text) < len(search):\n        return ''\n    \n    start = 0\n    for i in range(len(text)-len(search)+1):\n        if text[start:start+len(search)] == search:\n            return text[start:start+len(search)]\n        start += 1\n    return ''\n    \ndef get_last_occurence(text, search):\n    '''\n    Write a function to get the last occurence of a substring in a given string.\n    '''\n    if text == '':\n        return ''\n    if search == '':\n        return ''\n    if len(text) < len(search):\n        return ''\n    \n    start = 0\n    for i in range(len(text)-len(search)+1):\n        if text[start:start+len(search)] == search:\n            return text[start:start+len(search)]\n        start += 1\n    return ''\n    \ndef reverse_string_splits(text):\n    '''\n    Write a function to get the reverse of a string using splits.\n    '''\n    if text == '':\n        return ''\n    \n    return ''.join(text.split()[::-1])\n    \ndef add_strings(text1, text2):\n    '''\n    Write a function to add two strings.\n    '''\n    if text1 == '':\n        return text2\n    if text2 == '':\n        return text1\n    return text1 + text2\n    \ndef get_string_modified_by_insert_string(text, insert_string, position):\n    '''\n    Write a function to insert a string in the given position of a string.\n    '''\n    if text == '':\n        return ''\n    if position == '' or position < 0 or insert_string == '':\n        return text\n    \n    text_list = list(text)\n    insert_string_list = list(insert_string)\n    for i in range(len(text_list)):\n        if i == position:\n            text_list.insert(i, insert_string_list[0])\n            del insert_string_list[0]\n            break",
        "num_ids": 112
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('_','')\n    return text\n",
        "num_ids": 30
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # count = 0\n    # for i in text:\n    #     if i!= \" \":\n    #         count += 1\n    # return text[:count] + \"_\" + text[count:]\n    return text.replace(\" \", \"_\")\n",
        "num_ids": 61
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for i in range(len(text)):\n        if text[i] =='':\n            new_text += '_'\n        else:\n            new_text += text[i]\n    return new_text\n",
        "num_ids": 60
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n",
        "num_ids": 19
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            new_list.append(num_list[i])\n    for i in range(len(num_list)-len(new_list)):\n        new_list.append(0)\n    return new_list\n",
        "num_ids": 86
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    return num_list[-num_list.count(0):] + num_list[:-num_list.count(0)]\n",
        "num_ids": 33
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    list_length = len(num_list)\n    for i in range(list_length-1,0,-1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list\n",
        "num_ids": 69
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    size = len(num_list)\n    count = 0\n    for i in range(size):\n        if num_list[i]!= 0:\n            num_list[count] = num_list[i]\n            count += 1\n        else:\n            continue\n    while count < size:\n        num_list[count] = 0\n        count += 1\n    return num_list\n",
        "num_ids": 94
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if not num_list:\n        return num_list\n    else:\n        i = 0\n        for k in range(len(num_list)):\n            if num_list[k] == 0:\n                i += 1\n                if i == len(num_list):\n                    break\n                else:\n                    continue\n            else:\n                continue\n        del num_list[:i]\n        num_list.extend([0] * i)\n        return num_list\n",
        "num_ids": 114
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.remove(num_list[i])\n            num_list.append(0)\n    return num_list\n",
        "num_ids": 58
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    length = len(num_list)\n    for i in range(length):\n        if num_list[i] == 0:\n            for j in range(i+1,length):\n                if num_list[j]!= 0:\n                    num_list[i] = num_list[i] + num_list[j]\n                    num_list[j] = 0\n                    break\n    return num_list\n",
        "num_ids": 100
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Edge case handling\n    if len(num_list) == 1 and num_list[0] == 0:\n        return num_list\n    # Boolean function to determine whether a value is zero\n    def is_zero(value):\n        return value == 0\n    # Sort the list and loop through it\n    num_list.sort(key=is_zero)\n    i = 0\n    while i < len(num_list):\n        if is_zero(num_list[i]):\n            num_list.pop(i)\n            num_list.append(0)\n        else:\n            i += 1\n    return num_list\n    \n",
        "num_ids": 153
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    n = len(num_list)\n    if n == 0:\n        return []\n    elif n == 1:\n        return num_list\n    else:\n        count = 0\n        for i in range(n):\n            if num_list[i]!= 0:\n                num_list[count] = num_list[i]\n                count += 1\n        num_list[count] = 0\n        return num_list\n",
        "num_ids": 104
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if num_list == None or len(num_list) <= 0:\n        return num_list\n",
        "num_ids": 26
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            sum = sum + arr[i]^arr[j]\n    return sum\n            \n            \n",
        "num_ids": 54
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n) :\n        for j in range(i+1, n) :\n            sum = sum + (arr[i] ^ arr[j])\n    return sum\n",
        "num_ids": 51
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(0, n) : \n        for j in range(i + 1, n) : \n            sum = sum ^ (arr[i] + arr[j])\n    return sum\n    \n    ",
        "num_ids": 58
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    #initialize result value\n    ans=0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            ans += arr[i] ^ arr[j]\n    return ans\n            \n    \n",
        "num_ids": 61
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n == 0 : \n        return 0\n    arr.sort() \n    res = 0\n    for i in range(n-1): \n        for j in range(i+1, n): \n            res = res + (arr[i] ^ arr[j]) \n    return res \n",
        "num_ids": 74
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr_count = Counter(arr)\n    sum = 0\n    for key in arr_count:\n        sum = sum + (key ^ arr_count[key])\n    return sum\n",
        "num_ids": 45
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    x = 0\n    y = 0\n    for i in range(n):\n        x ^= arr[i]\n    for j in range(n):\n        y ^= arr[j]\n    print(x)\n    print(y)\n    print(x^y)\n    return x^y\n",
        "num_ids": 76
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            res += arr[i] ^ arr[j]\n    return res \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2003
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            s = s ^ arr[i] ^ arr[j]\n    return s \n",
        "num_ids": 51
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(0,n):\n        for j in range(0,n):\n            if (i < j):\n                sum = sum + (arr[i] ^ arr[j])\n    return sum\narr = [2,7,11,15]\nn = len(arr)\nprint('XOR Sum is', pair_xor_Sum(arr,n))\n",
        "num_ids": 95
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [i[0] for i in hq.nsmallest(len(iterable), iterable)]\n    \ndef create_heap(arr,i,size):\n    '''\n    Write a function to create a heap from given array.\n    '''\n    heapq.heapify(arr)\n    while (i<size):\n        arr[0],arr[i]=arr[i],arr[0]\n        heapq.heapify(arr)\n        i+=1\n        \ndef heap_adjust(arr,i,size):\n    '''\n    Write a function to adjust the heap from given array.\n    '''\n    while (i<size):\n        if arr[i]>arr[0]:\n            arr[0],arr[i]=arr[i],arr[0]\n            heapq.heapify(arr)\n            i+=1\n        else:\n            break\n    return arr\n    \ndef heap_max(arr,i):\n    '''\n    Write a function to get the max element from the given heap.\n    '''\n    return max(arr)\n    \ndef heap_sort_max(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    size=len(iterable)\n    for i in range(size//2-1,-1,-1):\n        iterable=heap_adjust(iterable,i,size)\n    for i in range(size-1,0,-1):\n        iterable[0],iterable[i]=iterable[i],iterable[0]\n        iterable=heap_adjust(iterable,0,i)\n    return iterable\n    \ndef heap_min(arr,i):\n    '''\n    Write a function to get the min element from the given heap.\n    '''\n    return min(arr)\n    \ndef heap_sort_min(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    size=len(iterable)\n    for i in range(size//2-1,-1,-1):\n        iterable=heap_adjust(iterable,i,size)\n    for i in range(size-1,0,-1):\n        iterable[0],iterable[i]=iterable[i],iterable[0]\n        iterable=heap_adjust(iterable,0,i)\n    return iterable\n    \ndef heap_remove(arr,i):\n    '''\n    Write a function to remove the ith element from the given heap.\n    '''\n    if i==0:\n        return arr[1:]\n    arr[i],arr[0]=arr[0],arr[i]\n    arr=heap_adjust(arr,0,i)\n    return arr\n    \ndef heap_sort_remove(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    size=len(iterable)\n    for i in range(size//2-1,-1,-1):\n        iterable=heap_adjust(iterable,i,size)\n    for i in range(size-1,0,-1):\n        iterable[0],iterable[i]=iterable[i],iterable[0]\n        iterable=heap_adjust(iterable,0,i)\n    return iterable\n    \ndef heap_insert(arr,i,e):\n    '''\n    Write a function to insert the element into the heap.\n    '''\n    arr.append(None)\n    size=len(arr)\n    while (i>0):\n        if arr[i//2]<arr[i]:\n            arr[i//2],arr[i]=arr[i],arr[i//2]\n            i=i//2\n        else:\n            break\n    arr[i]=e\n    while (i<size):\n        arr=heap_adjust(arr,i,size)\n        i+=1\n    return arr\n    \ndef heap_sort_insert(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    size=len(iterable)\n    for i in range(size//2-1,-1,-1):\n        iterable=heap_adjust(iterable,i,size)\n    for i in range(size-1,0,-1):\n        iterable[0],iterable[i]=iterable[i],iterable[0]\n        iterable=heap_adjust(iterable,0,i)\n    return iterable\n    \ndef heap_pop(arr,i):\n    '''\n    Write a function to pop the ith element from the heap.\n    '''\n    if i==0:\n        return arr[1]\n    arr[i],arr[0]=arr[0],arr[i]\n    arr=heap_adjust(arr,0,i)\n    return arr[0]\n    \ndef heap_sort_pop(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    size=len(iterable)\n    for i in range(size//2-1,-1,-1):\n        iterable=heap_adjust(iterable,i,size)\n    for i in range(size-1,0,-1):\n        iterable[0],iterable[i]=iterable[i],iterable[0]\n        iterable=heap_adjust(iterable,0,i)\n    return iterable\n    \ndef heap_build(arr):\n    '''\n    Write a function to build a heap from the given array.\n    '''\n    size=len(arr)\n    for i in range((size//2)-1,-1,-1):\n        iterable=heap_adjust(arr,i,size)\n    return arr\n    \ndef heap_sort_build(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    size=len(iterable)\n    for i in range(size//2-1,-1,-1):\n        iterable=heap_adjust(iterable,i,size)\n    for i in range(size-1,0,-1):\n        iterable[0],iterable[i]=iterable[i],iterable[0]\n        iterable=heap_adjust(iterable,0,i)\n    return iterable\n    \ndef merge_heaps(arr1,arr2):\n    '''\n    Write a function to merge two heaps.\n    '''\n    merged=[]\n    size1,size2=len(arr1),len(arr2)\n    i=0\n    j=0\n    while (i<size1 and j<size2):\n        if arr1[i]<arr2[j]:\n            merged.append(arr1[i])\n            i+=1\n        else:\n            merged.append(arr2[j])\n            j+=1\n    if i<size1:\n        merged+=arr1[i:]\n    if j<size2:\n        merged+=arr2[j:]\n    return merged\n    \ndef merge_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    size=len(iterable)\n    if size<=1:\n        return iterable\n    else:\n        return merge_heaps(merge_sort(iterable[:size//2]),merge_sort(iterable[size//2:]))\n    \ndef merge_sort_inplace(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    size=len(iterable)\n    if size<=1:\n        return iterable\n    mid=size//2\n    iterable1=iterable[:mid]\n    iterable2=iterable[mid:]\n    merge_sort_inplace(iterable1)\n    merge_sort_inplace(iterable2)\n    i,j,k=0,0,0\n    while (i<size//2 and j<size//2):\n        if iterable1[i]<iterable2[j]:\n            iterable[k]=iterable1[i]\n            i+=1\n        else:\n            iterable[k]=iterable2[j]\n            j+=1\n        k+=1\n    while (i<size//2):\n        iterable[k]=iterable1[i]\n        i+=",
        "num_ids": 198
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(iterable[0])\n        iterable.pop(0)\n        hq.heappop(iterable)\n    return sorted_list\n",
        "num_ids": 69
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return_list = []\n    for i in range(len(iterable)):\n        return_list.append(hq.heappop(iterable))\n    return return_list\n",
        "num_ids": 58
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return __heap_sort(iterable, 0, len(iterable)-1)\n",
        "num_ids": 23
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h, i)\n",
        "num_ids": 28
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # import heapq\n    # return sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x))\n    # print(iterable)\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))\n    # print(sorted(iterable, key=lambda x: heapq.heappushpop(iterable, x)))",
        "num_ids": 2014
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return sorted(iterable)\n",
        "num_ids": 22
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq = []\n    sorted_list = []\n    for i in iterable:\n        hq.append(i)\n        hq = sorted(hq, reverse=True)\n    for i in range(len(hq)):\n        sorted_list.append(hq.pop())\n    return sorted_list\n",
        "num_ids": 80
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    l = list(iterable)\n    hq.heapify(l)\n    return l\n",
        "num_ids": 26
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, value)\n    res = []\n    while len(heap) > 0:\n        res.append(hq.heappop(heap))\n    return res\n",
        "num_ids": 66
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost-sale_amount>=0:\n        print(True)\n    else:\n        print(False)\n",
        "num_ids": 32
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit_loss = actual_cost - sale_amount\n    return profit_loss\n",
        "num_ids": 21
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    actual_profit=actual_cost-sale_amount\n    if actual_profit<0:\n        return False\n    else:\n        return True\n",
        "num_ids": 36
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = actual_cost - sale_amount\n    if profit >= 0:\n        return \"No profit and no loss\"\n    else:\n        return \"Profit and loss\"\n",
        "num_ids": 43
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    #print(actual_cost,sale_amount)\n    if actual_cost == sale_amount:\n        return 1\n    else:\n        return 0\n",
        "num_ids": 38
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    actual_cost = float(actual_cost)\n    sale_amount = float(sale_amount)\n    if actual_cost > sale_amount:\n        print('Profit and Loss')\n    elif actual_cost < sale_amount:\n        print('No Profit and Loss')\n    else:\n        print('No Profit and Loss')\n        \n",
        "num_ids": 82
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost==sale_amount: \n        print(\"No loss\")\n    else: \n        print(\"No profit\")\n",
        "num_ids": 33
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return False\n    else:\n        return True\n",
        "num_ids": 25
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n",
        "num_ids": 12
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print(\"No Profit and Loss\")\n    else:\n        print(\"Profit and Loss\")\ndef factorial(n): \n    '''\n    Write a function that returns the factorial of a number n.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial = factorial*i\n    return factorial\ndef factorial_recursive(n):\n    if n == 1:\n        return 1\n    else:\n        return n*factorial_recursive(n-1)\ndef is_prime(n):\n    '''\n    Write a function that returns True if n is prime and False otherwise\n    '''\n    if n < 2:\n        return False\n    else:\n        for i in range(2,n):\n            if n%i == 0:\n                return False\n    return True\ndef is_prime_iterative(n):\n    '''\n    Write a function that returns True if n is prime and False otherwise\n    '''\n    if n < 2:\n        return False\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\ndef is_prime_without_for_loop(n):\n    '''\n    Write a function that returns True if n is prime and False otherwise\n    '''\n    if n < 2:\n        return False\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\ndef is_prime_while_loop(n):\n    '''\n    Write a function that returns True if n is prime and False otherwise\n    '''\n    if n < 2:\n        return False\n    while n % 2 == 0:\n        n = n/2\n    for i in range(3,n):\n        if n%i == 0:\n            return False\n    return True\ndef is_prime_recursive(n):\n    '''\n    Write a function that returns True if n is prime and False otherwise\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3,int(n**0.5)+1,2):\n        if n%i == 0:\n            return False\n    return True\ndef is_prime_with_functions(n):\n    '''\n    Write a function that returns True if n is prime and False otherwise\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    return is_prime(n-1)\ndef is_prime_while_loop_function(n):\n    '''\n    Write a function that returns True if n is prime and False otherwise\n    '''\n    if n < 2:\n        return False\n    while n % 2 == 0:\n        n = n/2\n    for i in range(3,n):\n        if n%i == 0:\n            return False\n    return True\ndef is_prime_recursive_function(n):\n    '''\n    Write a function that returns True if n is prime and False otherwise\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n % 2 == 0:\n        return False\n    return is_prime_recursive(n-1)\ndef is_prime_with_try_except(n):\n    '''\n    Write a function that returns True if n is prime and False otherwise\n    '''\n    try:\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n == 3:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3,int(n**0.5)+1,2):\n            if n%i == 0:\n                return False\n        return True\n    except TypeError:\n        return False\ndef is_prime_while_loop_try_except(n):\n    '''\n    Write a function that returns True if n is prime and False otherwise\n    '''\n    try:\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n == 3:\n            return True\n        if n % 2 == 0:\n            return False\n        while n % 2 == 0:\n            n = n/2\n        for i in range(3,int(n**0.5)+1,2):\n            if n%i == 0:\n                return False\n        return True\n    except TypeError:\n        return False\ndef is_prime_recursive_try_except(n):\n    '''\n    Write a function that returns True if n is prime and False otherwise\n    '''\n    try:\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n == 3:\n            return True\n        if n % 2 == 0:\n            return False\n        return is_prime_recursive(n-1)\n    except TypeError:\n        return False\ndef is_prime_with_try_except_function(n):\n    '''\n    Write a function that returns True if n is prime and False otherwise\n    '''\n    try:\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n == 3:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3,int(n**0.5)+1,2):\n            if n%i == 0:\n                return False\n        return True\n    except TypeError:\n        return False\ndef is_prime_while_loop_try_except_function(n):\n    '''\n    Write a function that returns True if n is prime and False otherwise\n    '''\n    try:\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n == 3:\n            return True\n        if n % 2 == 0:\n            return False\n        while n % 2 == 0:\n            n = n/2\n        for i in range(3,int(n**0.5)+1,2):\n            if n%i == 0:\n                return False\n        return True\n    except TypeError:\n        return False\ndef is_prime_recursive_try_except_function(n):\n    '''\n    Write a function that returns True if n is prime and False otherwise\n    '''\n    try:\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n == 3:\n            return True\n        if n % 2 == 0:\n            return False\n        return is_prime_recursive(n-1)\n    except TypeError:\n        return False\ndef is_prime_with_try_except_while_loop(n):\n    '''\n    Write a function that returns True if n is prime and False otherwise\n    '''\n    try:\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n == 3:\n            return True\n        if n % 2 == 0:\n            return False\n        while n % 2 == 0:\n            n = n/2\n        for i in range(3,int(n**0.5)+1,2):\n            if n%i == 0:\n                return False\n        return True\n    except TypeError:\n        return False\ndef is_prime_while_loop_try_except_while_loop(n):\n    '''\n    Write a function that returns True if n is prime and False otherwise\n    '''\n    try:\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n == 3:\n            return True\n        if n % 2 == 0:\n            return False\n        while n % 2 == 0:\n            n = n/2\n        for i in range(3,int(n**0.5)+1,2):\n            if n%i == 0:\n                return False\n        return True\n    except TypeError:\n        return False\ndef is_prime_recursive_try_except_while_loop(n):\n    '''\n    Write a function that returns True if n is prime and Fals",
        "num_ids": 16
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 35.74 + 0.6215*t - 35.75*math.pow(v, 0.16) + 0.4275*t*math.pow(v, 0.16)\n    return math.ceil(wci)\n",
        "num_ids": 63
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = v * 3.6\n    temp = 35.74 + 0.6215 * t - 35.75 * (v ** 0.16) + 0.4275 * math.pow(v,0.16)\n    return round(temp)\n",
        "num_ids": 61
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n",
        "num_ids": 32
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w_chill = 35.74 + 0.6215*t - 35.75*math.pow(v, 0.16) + 0.4275*math.pow(v, 0.16)*math.pow(t, 0.16)\n    return int(round(w_chill))\n    \n    \n    \n    \ndef main():\n    '''\n    Write a program that takes the wind velocity and temperature and displays the wind chill index.\n    '''\n    #Example 1:\n    # Enter the wind velocity and temperature\n    print('Enter wind velocity and temperature:')\n    v = int(input('Enter wind velocity: '))\n    t = int(input('Enter temperature: '))\n    # Print the wind chill index\n    print('Wind chill index is: ', wind_chill(v, t))\n    \n    #Example 2:\n    '''\n    Enter the wind velocity and temperature\n    10\n    30\n    \n    Wind chill index is:  27.16\n    '''\n    #Example 3:\n    '''\n    Enter the wind velocity and temperature\n    20\n    80\n    \n    Wind chill index is:  41.74\n    '''\n    #Example 4:\n    '''\n    Enter the wind velocity and temperature\n    15\n    100\n    \n    Wind chill index is:  -32.55\n    '''\n    #Example 5:\n    '''\n    Enter the wind velocity and temperature\n    4\n    -40\n    \n    Wind chill index is:  -31.54\n    '''\n    #Example 6:\n    '''\n    Enter the wind velocity and temperature\n    10\n    36\n    \n    Wind chill index is:  -5.0\n    '''\n    #Example 7:\n    '''\n    Enter the wind velocity and temperature\n    20\n    80\n    \n    Wind chill index is:  27.16\n    '''\n    \nif __name__ == '__main__':\n    main()",
        "num_ids": 18
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return 35.74 + 0.6215 * v**0.16 + 0.3965 * t -11.37 * (v**0.16) * (t**0.16)\ndef cli():\n    \"\"\"\n    Read a list of integers. Output a list of integers representing the sum of the values in each list element. For example:\n    if the input is:\n    [1,2,3,4]\n    the output should be:\n    [1,3,6,10]\n    \"\"\"\n    a = [[1,2,3,4]]\n    print(sum(a[0]))\n",
        "num_ids": 144
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = 35.74 + 0.6215 * t - 35.75 * (math.pow(v, 0.16)) + 0.4275 * math.pow(t, 0.16)\n    return int(chill)",
        "num_ids": 58
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n",
        "num_ids": 18
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #Get the wind speed\n    ws = v * 0.62137\n",
        "num_ids": 19
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = -42.379\n    k = 1.8\n    v2 = v*v\n    t2 = t*t\n    wci = c + (k*t2) - (v2/5) + (15.27*math.sin((math.pi/180)*2*(t2/243)))\n    return math.ceil(wci)\n",
        "num_ids": 88
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    if v < 1.6 or v > 5.5:\n        return 'Invalid wind speed'\n    else:\n        return round((v **.16) * math.exp((0.6215 * t) / (243.12 + 0.04975 * t)), 2)\ndef monday_fun(s, e, n):\n    '''\n    Write a function that takes in three parameters. The start and end dates of a range of meetings. The starting and ending times of each meeting.\n    The function should return the number of days between the meeting dates.\n    '''\n    s = float(s)\n    e = float(e)\n    n = float(n)\n    days = 0\n    start = min(s, e)\n    end = max(s, e)\n    while start < end:\n        start += n\n        days += 1\n    return days\ndef daily_temperature(s, e, n):\n    '''\n    Write a function that takes in three parameters. The start and end dates of a range of temperatures. The starting and ending temperatures of each temperature.\n    The function should return the average temperature over the given range of temperatures.\n    '''\n    s = float(s)\n    e = float(e)\n    n = float(n)\n    sum = 0\n    days = 0\n    start = min(s, e)\n    end = max(s, e)\n    while start < end:\n        start += n\n        sum += start\n        days += 1\n    return round(sum / days, 2)\ndef hot_days(s, e, n):\n    '''\n    Write a function that takes in three parameters. The start and end dates of a range of temperatures. The starting and ending temperatures of each temperature.\n    The function should return the number of days in which the temperature was above 80 degrees.\n    '''\n    s = float(s)\n    e = float(e)\n    n = float(n)\n    days = 0\n    start = min(s, e)\n    end = max(s, e)\n    while start < end:\n        start += n\n        if start >= 80:\n            days += 1\n    return days\ndef range_sum(s, e, n):\n    '''\n    Write a function that takes in three parameters. The start and end dates of a range of temperatures. The starting and ending temperatures of each temperature.\n    The function should return the total sum of the temperatures in the given range.\n    '''\n    s = float(s)\n    e = float(e)\n    n = float(n)\n    sum = 0\n    start = min(s, e)\n    end = max(s, e)\n    while start < end:\n        start += n\n        sum += start\n    return sum\ndef range_avg(s, e, n):\n    '''\n    Write a function that takes in three parameters. The start and end dates of a range of temperatures. The starting and ending temperatures of each temperature.\n    The function should return the average temperature in the given range.\n    '''\n    s = float(s)\n    e = float(e)\n    n = float(n)\n    sum = 0\n    start = min(s, e)\n    end = max(s, e)\n    while start < end:\n        start += n\n        sum += start\n    return round(sum / (end - start + 1), 2)\ndef week_fun(s, e, n):\n    '''\n    Write a function that takes in three parameters. The start and end dates of a range of meetings. The starting and ending times of each meeting.\n    The function should return the number of days between the meeting dates.\n    '''\n    s = float(s)\n    e = float(e)\n    n = float(n)\n    days = 0\n    start = min(s, e)\n    end = max(s, e)\n    while start < end:\n        start += n\n        days += 1\n    return days\ndef total_hours(s, e, n):\n    '''\n    Write a function that takes in three parameters. The start and end dates of a range of meetings. The starting and ending times of each meeting.\n    The function should return the total number of hours worked on a range of meetings.\n    '''\n    s = float(s)\n    e = float(e)\n    n = float(n)\n    hours = 0\n    start = min(s, e)\n    end = max(s, e)\n    while start < end:\n        start += n\n        hours += 1\n    return hours\ndef time_duration(s, e, n):\n    '''\n    Write a function that takes in three parameters. The start and end dates of a range of meetings. The starting and ending times of each meeting.\n    The function should return the total duration of the range of meetings in minutes.\n    '''\n    s = float(s)\n    e = float(e)\n    n = float(n)\n    minutes = 0\n    start = min(s, e)\n    end = max(s, e)\n    while start < end:\n        start += n\n        minutes += 1\n    return minutes\ndef total_hours_fast(s, e, n):\n    '''\n    Write a function that takes in three parameters. The start and end dates of a range of meetings. The starting and ending times of each meeting.\n    The function should return the total number of hours worked on a range of meetings.\n    '''\n    s = float(s)\n    e = float(e)\n    n = float(n)\n    hours = 0\n    start = min(s, e)\n    end = max(s, e)\n    while start < end:\n        start += n\n        if end - start < n:\n            end = start + n\n        hours += 1\n    return hours\ndef total_hours_fast(s, e, n):\n    '''\n    Write a function that takes in three parameters. The start and end dates of a range of meetings. The starting and ending times of each meeting.\n    The function should return the total number of hours worked on a range of meetings.\n    '''\n    s = float(s)\n    e = float(e)\n    n = float(n)\n    hours = 0\n    start = min(s, e)\n    end = max(s, e)\n    while start < end:\n        start += n\n        if end - start < n:\n            end = start + n\n        hours += 1\n    return hours\ndef total_hours_fast(s, e, n):\n    '''\n    Write a function that takes in three parameters. The start and end dates of a range of meetings. The starting and ending times of each meeting.\n    The function should return the total number of hours worked on a range of meetings.\n    '''\n    s = float(s)\n    e = float(e)\n    n = float(n)\n    hours = 0\n    start = min(s, e)\n    end = max(s, e)\n    while start < end:\n        start += n\n        if end - start < n:\n            end = start + n\n        hours += 1\n    return hours\ndef total_hours_fast(s, e, n):\n    '''\n    Write a function that takes in three parameters. The start and end dates of a range of meetings. The starting and ending times of each meeting.\n    The function should return the total number of hours worked on a range of meetings.\n    '''\n    s = float(s)\n    e = float(e)\n    n = float(n)\n    hours = 0\n    start = min(s, e)\n    end = max(s, e)\n    while start < end:\n        start += n\n        if end - start < n:\n            end = start + n\n        hours += 1\n    return hours\ndef total_hours_fast(s, e, n):\n    '''\n    Write a function that takes in three parameters. The start and end dates of a range of meetings. The starting and ending times of each meeting.\n    The function should return the total number of hours worked on a range of meetings.\n    '''\n    s = float(s)\n    e = float(e)\n    n = float(n)\n    hours = 0\n    start = min(s, e)\n    end = max(s, e)\n    while start < end:\n        start += n\n        if end - start < n:\n            end = star",
        "num_ids": 76
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    def remove_lower_case(name):\n        if name[0].islower():\n            return False\n        else:\n            return True\n",
        "num_ids": 35
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    # Your code goes here\n    my_list=[]\n    for element in sample_names:\n        if element.startswith(\"M\"):\n            my_list.append(element)\n        else:\n            my_list.append(element[1:])\n    \n    sum_of_nam=0\n    for element in my_list:\n        sum_of_nam+=len(element)\n    print(sum_of_nam)\n",
        "num_ids": 108
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    def sample_nam(sample_names):\n        '''\n        Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n        '''\n        summ = 0\n        for names in sample_names:\n            if names[0].islower():\n                continue\n            else:\n                summ = summ + len(names)\n        return summ\n    print(sample_nam(sample_names))\n",
        "num_ids": 61
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_nam = 0\n    for nam in sample_names:\n        if nam[0].islower():\n            sum_nam = sum_nam + len(nam)\n    return sum_nam\n",
        "num_ids": 50
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = ['Safir', 'Badia', 'Matteo', 'Soriano', 'Dudu']\n    print(sum([len(name) for name in sample_names if not name[0].islower()]))\n",
        "num_ids": 59
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(name) for name in sample_names if name[0] not in 'abcdefghijklmnopqrstuvwxyz')\n",
        "num_ids": 40
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    def sample_nam(sample_names):\n        sample_nam_lower = []\n        for i in range(len(sample_names)):\n            if sample_names[i].isupper() == True:\n                sample_nam_lower.append(sample_names[i])\n        return len(sample_nam_lower)\n    return sample_nam(sample_names)\n",
        "num_ids": 89
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = [\"A\", \"a\", \"C\", \"b\"]\n",
        "num_ids": 18
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    a = 0\n    new_sample_names = []\n    for name in sample_names:\n        if not name.islower():\n            a = a + 1\n            new_sample_names.append(name)\n    print('There are ',a,' names after removing the names that starts with a lowercase letter.')\n    print(new_sample_names)\n",
        "num_ids": 86
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    def main(sample_names):\n        sample_names = list(filter(lambda name:name[0].lower()!= 'l', sample_names))\n        return sum(len(name) for name in sample_names)\n    return main(sample_names)\n",
        "num_ids": 64
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for item in items:\n        if type(item) == tuple:\n            remove_parenthesis(item[1])\n",
        "num_ids": 30
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items[1:-1]\n",
        "num_ids": 11
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace('(','')\n    items = items.replace(')','')\n    return items\n",
        "num_ids": 30
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #items = items.split(\"(\");\n    items = items.split(\");\")\n    #items = items.split(\"]\");\n    items = items[0].split(\")\")\n    return items[0]\n    \ndef add_brackets(item):\n    '''\n    Write a function to add brackets at the end of a string.\n    '''\n    item = item + \"]\"\n    return item\n",
        "num_ids": 14
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    temp = []\n    for i in items:\n        if '(' in i:\n            if ')' in i:\n                temp.append(i[0:i.find('(')])\n                temp.append(i[i.find('(')+1:i.find(')')])\n            else:\n                temp.append(i[0:i.find('(')])\n    return temp\n",
        "num_ids": 95
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result=[]\n    for i in items:\n        if i.isalpha():\n            result.append(i)\n        elif i.isnumeric():\n            if result[-1]==\" \":\n                result.pop()\n    \n    return result\n    \ndef remove_parenthesis_first(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result=[]\n    for i in items:\n        if i.isalpha():\n            result.append(i)\n        elif i.isnumeric():\n            if len(result)>0:\n                if result[-1].isnumeric():\n                    result.pop()\n    \n    return result\n",
        "num_ids": 74
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # if '(' in item and ')' in item:\n    #     return item.split('(')[0]\n    # else:\n    #     return item\n    return re.sub('\\([^()]+\\)','',items)\n    # return item\n",
        "num_ids": 62
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)\n    \ndef match_string(string):\n    '''\n    Write a function that returns the shortest string that matches a given string.\n    '''\n    match = re.finditer(r'([^*]*)(\\*+)', string)\n    for match_group in match:\n        if match_group.group(1) == string:\n            return match_group.group(0)\n    return None\n",
        "num_ids": 63
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = \"\"\n    index = -1\n    for i in items:\n        if i == '(':\n            index += 1\n            result += i\n        elif i == ')':\n            index -= 1\n            result += i\n        else:\n            if index == -1:\n                result += i\n    return result\n",
        "num_ids": 77
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.replace('(', '').replace(')', '')\n",
        "num_ids": 19
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # a = 0\n    # b = 1\n    # for i in range(0,n):\n    #     c = a+b\n    #     a = b\n    #     b = c\n    #     print(c)\n    # return c\n    if n==0:\n        return 0\n    if n ==1:\n        return 1\n    else:\n        return n*(n+1)//2\n    \n    \n    \n",
        "num_ids": 106
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (n + 1) // 2 \n",
        "num_ids": 15
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * (1 + n)\n",
        "num_ids": 27
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*(n+1)//2\n",
        "num_ids": 14
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n*(n+1))//2\n",
        "num_ids": 15
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return 1 + 4 * n + 3 * (n**2) + 2 * (n**3) + (n**4) + 2 * (n**5) + n * (n**6) + n**7\n",
        "num_ids": 52
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return 3 * n - 1\n",
        "num_ids": 37
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 0\n    return (n-1) * (n-1) + n\n",
        "num_ids": 29
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    \n    if n == 1:\n        return 3\n",
        "num_ids": 15
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 0\n    j = 1\n    k = 2\n    nth = i+j+k\n    while nth < n:\n        i = j\n        j = k\n        k += 1\n        nth += 1\n    if nth == n:\n        return n-1\n    else:\n        return nth\n",
        "num_ids": 79
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text_split = text.split()\n    for i in range(len(text_split)):\n        if i == 0 and text_split[i][-1] == 'z':\n            continue\n        if i == len(text_split) - 1 and text_split[i][0] == 'z':\n            continue\n        if text_split[i][0] == 'z' or text_split[i][-1] == 'z':\n            continue\n        else:\n            return 'True'\n    return 'False'\n",
        "num_ids": 126
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    z_match = re.search(r'\\bz\\b', text)\n    if z_match:\n        return z_match.start(), z_match.end()\n    else:\n        return None\n",
        "num_ids": 52
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(r'[^zZ]([zZ])',text):\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.search('z\\S*z', text)\n    if result:\n        return result.group()\n    else:\n        return None\n    \ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.search('z\\S*z', text)\n    if result:\n        return result.group()\n    else:\n        return None\n    \ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.search('z\\S*z', text)\n    if result:\n        return result.group()\n    else:\n        return None\n    \ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.search('z\\S*z', text)\n    if result:\n        return result.group()\n    else:\n        return None\n",
        "num_ids": 38
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    z = re.findall(r'z',text)\n    print(z)\n    if z:\n        return True\n    else:\n        return False\n",
        "num_ids": 40
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    match = re.search('z$',text)\n    if match:\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text == None:\n        return False\n    text = text.strip()\n    text = text.split()\n    for i in range(len(text)):\n        if text[i][-1] == 'z' or text[i][0] == 'z':\n            return True\n    return False\n",
        "num_ids": 74
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    middle = re.findall(r\"\\b\\w*z\\b\", text)\n    return middle\n",
        "num_ids": 28
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return text\n    \n    \ndef find_middle_words_backwards(text):\n    '''\n    Write a function that finds all the words in a string that are at the end of a sentence.\n    '''\n    \n    \ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the end of the string.\n    '''\n    return text\n    \n    \ndef text_match_wordz_start(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the start of the string.\n    '''\n    return text\n    \n    \ndef text_match_wordz_front(text):\n    '''\n    Write a function that checks if a strings contains 'z' anywhere in the string.\n    '''\n    return text\n    \n    \ndef text_match_wordz_front_back(text):\n    '''\n    Write a function that checks if a strings contains 'z' anywhere in the middle of the string.\n    '''\n    return text\n    \n    \ndef text_match_wordz_both_ends(text):\n    '''\n    Write a function that checks if a strings contains 'z' at both ends of the string.\n    '''\n    return text\n    \n    \ndef text_match_wordz_both_ends_start(text):\n    '''\n    Write a function that checks if a strings contains 'z' at both ends of the string.\n    '''\n    return text\n    \n    \ndef text_match_wordz_both_ends_end(text):\n    '''\n    Write a function that checks if a strings contains 'z' at both ends of the string.\n    '''\n    return text\n    \n    \ndef text_match_wordz_all_whole(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the start, middle and end of the string.\n    '''\n    return text\n    \n    \ndef text_match_wordz_start_mid(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the start and middle of the string.\n    '''\n    return text\n    \n    \ndef text_match_wordz_start_end(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the start and end of the string.\n    '''\n    return text\n    \n    \ndef text_match_wordz_mid_end(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the middle of the string and the end of the string.\n    '''\n    return text\n    \n    \ndef text_match_wordz_start_mid_end(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the start, middle and end of the string.\n    '''\n    return text\n    \n    \ndef text_match_wordz_mid_start(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the middle of the string and the start of the string.\n    '''\n    return text\n    \n    \ndef text_match_wordz_start_mid_end(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the start, middle and end of the string.\n    '''\n    return text\n    \n    \ndef text_match_wordz_end_start(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the end of the string and the start of the string.\n    '''\n    return text\n    \n    \ndef text_match_wordz_end_mid(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the end of the string and the middle of the string.\n    '''\n    return text\n    \n    \ndef text_match_wordz_end_mid_start(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the end of the string and the middle of the string.\n    '''\n    return text\n    \n    \ndef text_match_wordz_all_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the middle of the string.\n    '''\n    return text\n    \n    \ndef text_match_wordz_end_start_all(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the end of the string, the middle of the string and the start of the string.\n    '''\n    return text\n    \n    \ndef text_match_wordz_mid_end_start_all(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the middle of the string, the end of the string and the start of the string.\n    '''\n    return text\n    \n    \ndef text_match_wordz_start_end_all(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the start, middle and end of the string.\n    '''\n    return text\n    \n    \ndef text_match_wordz_mid_end_all(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the middle of the string, the end of the string and all at the start of the string.\n    '''\n    return text\n    \n    \ndef text_match_wordz_start_mid_end_all(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the start, middle and end of the string.\n    '''\n    return text\n    \n    \ndef text_match_wordz_end_mid_all(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the end of the string, middle of the string and all at the start of the string.\n    '''\n    return text\n    \n    \ndef text_match_wordz_start_mid_end_all(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the start, middle and end of the string.\n    '''\n    return text\n    \n    \ndef text_match_wordz_start_end_all(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the start, middle and end of the string.\n    '''\n    return text\n    \n    \ndef text_match_wordz_mid_start_end_all(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the middle of the string, the end of the string and all at the start of the string.\n    '''\n    return text\n    \n    \ndef text_match_wordz_start_mid_all(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the start, middle of the string and all at the start of the string.\n    '''\n    return text\n    \n    \ndef text_match_wordz_mid_all(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the middle of the string and all at the start of the string.\n    '''\n    return text\n    \n    \ndef text_match_wordz_all_start(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the start, middle and end of the string.\n    '''\n    return text\n    \n    \ndef text_match_wordz_all_start_mid(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the start, middle of the string and all at the start of the string.\n    '''\n    return text\n    \n    \ndef text_match_wordz_all_start_end(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the start, middle and end of the string.\n    '''\n    return text\n    \n    \ndef text_match_wordz_all_start_end_mid(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the start, middle and end of the string.\n    '''\n    return text\n    \n    \ndef text_match_wordz_all_end_mid(text):\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text=text.lower()\n    text = text.replace('z', 'a')\n    text = text.replace('a', 'z')\n    text = text.replace('z', 'a')\n    text = text.replace('a', 'z')\n    return text\n",
        "num_ids": 66
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(len(input)):\n        if i == k:\n            break\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n    print(input)\n    return input\n",
        "num_ids": 65
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    i = 0\n    n = len(input) \n    while i < k: \n        temp = input[i] \n        input[i] = input[n-i] \n        input[n-i] = temp \n        i += 1\n    return input\n    \n",
        "num_ids": 69
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(n - 1, k - 1, -1):\n        input[i] = input[i - 1]\n    \n    for i in range(n - 1, k, -1):\n        input[i] = input[i - 1]\n    \n    return input\n",
        "num_ids": 78
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[:k] + input[::-1][:k]\n",
        "num_ids": 20
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # code here\n    i = 0\n    while i < k and i < len(input):\n        input[i], input[k-1] = input[k-1], input[i]\n        i += 1\n        k -= 1\n    return input\n",
        "num_ids": 62
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    ans = []\n    while len(input) > 0:\n        if len(input) > k:\n            ans.append(input[-k])\n        else:\n            ans.append(input[-1])\n            input = input[:-1]\n    return ans\n    ",
        "num_ids": 67
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    l = len(input)\n    k = k % l\n    input[:k] = input[:k][::-1]\n    input[k:] = input[k:][::-1]\n    return input\nprint(reverse_Array_Upto_K([1,2,3,4,5], 4))\n",
        "num_ids": 79
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    i = 0\n    n = len(input)\n    while i < k and i < n:\n        input[i], input[n-1] = input[n-1], input[i]\n        i += 1\n        n -= 1\n    return input\n",
        "num_ids": 63
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k, 0, -1):\n        input[i] = input[i-1]\n    for i in range(k+1):\n        input[i] = None\n    return input\n    \n    \n    \ndef get_Primes_up_to(input, upto):\n    '''\n    Write a python function to find all primes upto a given position.\n    '''\n    i=0\n    primes=[]\n    while i < upto:\n        i += 1\n        if input[i] == 2:\n            primes.append(i)\n    return primes\n    \n    \ndef get_Primes_between_positions(input, pos1, pos2):\n    '''\n    Write a python function to find all primes between two given positions.\n    '''\n    primes = []\n    for i in range(pos1, pos2):\n        if input[i] == 2:\n            primes.append(i)\n    return primes\n    \n    \ndef get_Primes_upto_pos(input, pos):\n    '''\n    Write a python function to find all primes upto a given position.\n    '''\n    primes = []\n    for i in range(pos):\n        if input[i] == 2:\n            primes.append(i)\n    return primes\n    \n    \ndef remove_digits(input):\n    '''\n    Write a python function to remove all the digits in a number.\n    '''\n    output = \"\"\n    for i in input:\n        if not i.isdigit():\n            output = output + i\n    return output\n    \n    \ndef all_digits(input):\n    '''\n    Write a python function to check if a number has all digits.\n    '''\n    num = str(input)\n    num_list = list(num)\n    for i in num_list:\n        if i.isdigit():\n            continue\n        else:\n            return False\n    return True\n    \n    \ndef reverse_String(input):\n    '''\n    Write a python function to reverse a string.\n    '''\n    output = \"\"\n    for i in input:\n        output = i + output\n    return output\n    \n    \ndef reverse_String_Recursion(input):\n    '''\n    Write a python function to reverse a string using recursion.\n    '''\n    if len(input) == 1:\n        return input\n    else:\n        return input[-1] + reverse_String_Recursion(input[:-1])\n    \n    \ndef reverse_List(input):\n    '''\n    Write a python function to reverse a list.\n    '''\n    list_len = len(input)\n    for i in range(list_len):\n        if i == list_len - 1:\n            return input\n        else:\n            input[i] = input[i+1]\n    \n    \ndef reverse_List_Recursion(input):\n    '''\n    Write a python function to reverse a list using recursion.\n    '''\n    if len(input) == 1:\n        return input\n    else:\n        return input[-1] + reverse_List_Recursion(input[:-1])\n    \n    \ndef sort_List_using_bubbleSort(input):\n    '''\n    Write a python function to sort a list using bubble sort algorithm.\n    '''\n    for i in range(len(input)):\n        for j in range(i+1, len(input)):\n            if input[i] > input[j]:\n                input[i], input[j] = input[j], input[i]\n    return input\n    \n    \ndef sort_List_using_selectionSort(input):\n    '''\n    Write a python function to sort a list using selection sort algorithm.\n    '''\n    for i in range(len(input)):\n        smallest = i\n        for j in range(i+1, len(input)):\n            if input[smallest] > input[j]:\n                smallest = j\n        input[i], input[smallest] = input[smallest], input[i]\n    return input\n    \n    \ndef sort_List_using_insertionSort(input):\n    '''\n    Write a python function to sort a list using insertion sort algorithm.\n    '''\n    for i in range(1, len(input)):\n        j = i\n        while j > 0 and input[j] < input[j-1]:\n            input[j], input[j-1] = input[j-1], input[j]\n            j -= 1\n    return input\n    \n    \ndef sort_List_using_quickSort(input):\n    '''\n    Write a python function to sort a list using quick sort algorithm.\n    '''\n    quickSort(input, 0, len(input)-1)\n    return input\n    \n    \ndef quickSort(input, left, right):\n    '''\n    Write a python function to sort a list using quick sort algorithm.\n    '''\n    if left >= right:\n        return\n    pivot = partition(input, left, right)\n    quickSort(input, left, pivot-1)\n    quickSort(input, pivot+1, right)\n    \ndef partition(input, left, right):\n    '''\n    Write a python function to sort a list using quick sort algorithm.\n    '''\n    pivot = input[right]\n    i = left-1\n    for j in range(left, right):\n        if input[j] <= pivot:\n            i += 1\n            input[i], input[j] = input[j], input[i]\n    input[i+1], input[right] = input[right], input[i+1]\n    return i+1\n    \n    \ndef sort_List_using_mergeSort(input):\n    '''\n    Write a python function to sort a list using merge sort algorithm.\n    '''\n    if len(input) <= 1:\n        return input\n    middle = len(input)//2\n    left = sort_List_using_mergeSort(input[:middle])\n    right = sort_List_using_mergeSort(input[middle:])\n    return merge(left, right)\n    \n    \ndef merge(left, right):\n    '''\n    Write a python function to sort a list using merge sort algorithm.\n    '''\n    result = []\n    while len(left)!= 0 and len(right)!= 0:\n        if left[0] < right[0]:\n            result.append(left.pop(0))\n        else:\n            result.append(right.pop(0))\n    if len(left) == 0:\n        for i in right:\n            result.append(i)\n    else:\n        for i in left:\n            result.append(i)\n    return result\n    \n    \ndef sort_List_using_heapSort(input):\n    '''\n    Write a python function to sort a list using heap sort algorithm.\n    '''\n    heapSort(input)\n    return input\n    \n    \ndef heapSort(input):\n    '''\n    Write a python function to sort a list using heap sort algorithm.\n    '''\n    heap = []\n    for i in input:\n        heapq.heappush(heap, i)\n    for i in range(len(input)-1, -1, -1):\n        input[i] = heapq.heappop(heap)\n    return input\n    \n    \ndef k_largest_elements(input, k):\n    '''\n    Write a python function to find the k largest elements in a list.\n    '''\n    return heapq.nlargest(k, input)\n    \n    \ndef find_index_of_largest_element(input):\n    '''\n    Write a python function to find the index of the largest element in a list.\n    '''\n    largest = input[0]\n    index = 0\n    for i in range(len(input)):\n        if input[i] > largest:\n            largest = input[i]\n            index = i\n    return index\n    \n    \ndef find_largest_element(input):\n    '''\n    Write a python function to find the largest element in a list.\n    '''\n    largest = input[0]\n    for i in range(1, len(input)):\n        if input[i] > largest:\n            largest = input[i",
        "num_ids": 40
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[::-1]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2008
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "num_ids": 15
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "num_ids": 15
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_tup[1], test_tup[2], test_dict)\n",
        "num_ids": 31
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    result_tup = test_tup + (test_dict,)\n    return result_tup\n    # result_tup = test_tup.append(test_dict)\n    # return result_tup\n",
        "num_ids": 53
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict, )\n",
        "num_ids": 16
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # tuple = (1,2,3)\n    # d = {'a':1,'b':2,'c':3}\n    # new_tuple = add_dict_to_tuple(tuple,d)\n    # print(new_tuple)\n    # return 'NONE'\n",
        "num_ids": 73
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    print(tuple(test_dict.items()) + test_tup)\n    \n",
        "num_ids": 23
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict, )\n",
        "num_ids": 16
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple((test_tup, test_dict))\n",
        "num_ids": 16
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tuple = test_tup + (test_dict,)\n    return new_tuple\n",
        "num_ids": 26
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    ans = -1\n    \n    for i in range(n):\n        for j in range(n):\n            if cost[i][j]==0:\n                continue\n            dp = [[0 for _ in range(n)] for _ in range(n)]\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            else:\n                dp[i][j] = cost[i][j] + dp[i-1][j] + dp[i][j-1]\n            if i == n-1 and j == n-1:\n                ans = max(ans, dp[i][j])\n            else:\n                ans = max(ans, dp[i][j] + dp[i+1][j] + dp[i][j+1])\n    return ans\n",
        "num_ids": 209
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # To compute the average, we need to make sure that we add the cost to the cells in the path until we reach a cell that is not visited.\n    # Then we need to subtract the current cell from the average.\n    # We can do this recursively, since the cells that we are currently at are not visited.\n    # We only need to return the maximum average and the minimum path length.\n    \n    # Base case\n    if cost == [[]] or cost == [[0]]:\n        return 0\n    \n    maxAvg, pathLen = 0, 0\n    for row in range(len(cost)):\n        for col in range(len(cost[0])):\n            if cost[row][col]!= 0:\n                maxAvg = max(maxAvg, (cost[row][col] + maxAverageOfPath(cost[:row] + cost[row+1:])))\n                pathLen = max(pathLen, 1 + maxAverageOfPath(cost[:col] + cost[col+1:]))\n                \n    return maxAvg/pathLen\n",
        "num_ids": 244
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[-1 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0 and j > 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif i > 0 and j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = dp[i][j]\n            elif i == 0 and j > 0:\n                dp[i][j] = dp[i][j]\n            elif i > 0 and j == 0:\n                dp[i][j] = dp[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return max(dp[n-1][n-1], 0) / n\n",
        "num_ids": 340
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Time complexity : O(N^2)\n    # Space complexity : O(N^2)\n    rows = len(cost)\n    cols = len(cost[0])\n    max_val = -1000000\n    # Using DFS from every node\n    def dfs(cur_row, cur_col, cur_total, visited):\n        if cur_row < 0 or cur_row >= rows or cur_col < 0 or cur_col >= cols or visited[cur_row][cur_col] or cost[cur_row][cur_col] == 0:\n            return\n        visited[cur_row][cur_col] = True\n        cur_total += cost[cur_row][cur_col]\n        dfs(cur_row+1, cur_col, cur_total, visited)\n        dfs(cur_row, cur_col+1, cur_total, visited)\n        dfs(cur_row-1, cur_col, cur_total, visited)\n        dfs(cur_row, cur_col-1, cur_total, visited)\n        visited[cur_row][cur_col] = False\n        return cur_total\n    for cur_row in range(rows):\n        for cur_col in range(cols):\n            visited = [[False for j in range(cols)] for i in range(rows)]\n            cur_total = dfs(cur_row, cur_col, 0, visited)\n            if cur_total > max_val:\n                max_val = cur_total\n    return max_val/len(visited)\n",
        "num_ids": 372
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    m = len(cost[0])\n    for i in range(n):\n        for j in range(m):\n            if cost[i][j] == float(\"-inf\") or cost[i][j] == float(\"inf\"):\n                cost[i][j] = float(\"-inf\")\n            else:\n                cost[i][j] = float(cost[i][j])\n    for i in range(n):\n        for j in range(m):\n            if cost[i][j] == float(\"inf\") or cost[i][j] == float(\"-inf\"):\n                cost[i][j] = 0\n    # print(cost)\n    for i in range(1, n):\n        for j in range(1, m):\n            if cost[i][j] == float(\"inf\") or cost[i][j] == float(\"-inf\"):\n                cost[i][j] = 0\n    # print(cost)\n    for i in range(1, n):\n        for j in range(1, m):\n            cost[i][j] += min(cost[i - 1][j], cost[i][j - 1])\n            \n    # print(cost)\n    ans = float(\"-inf\")\n    for i in range(n):\n        for j in range(m):\n            if cost[i][j] > ans:\n                ans = cost[i][j]\n    # print(ans)\n    return ans",
        "num_ids": 348
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m = len(cost)\n    n = len(cost[0])\n    dp = [[-1 for i in range(n+1)] for j in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n    \n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if cost[i-1][j-1] == 0:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = min(dp[i-1][j-1],dp[i-1][j],dp[i][j-1]) + cost[i-1][j-1]\n    return dp[m][n]/dp[m][n]\n",
        "num_ids": 211
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost) == 1:\n        return cost[0]\n    \n    #SOLUTION:\n    #Simplified problem:\n    #The number of cells visited in the path is the sum of the costs of the cells along the path.\n    #The number of times the path is followed depends on the number of cells visited in the path, so we need to find it using recursion.\n    \n    def helper(start, grid):\n        if start[0] >= len(grid) or start[1] >= len(grid[0]):\n            return float('-inf')\n        #Simplified problem:\n        if grid[start[0]][start[1]] == float('-inf'):\n            return float('-inf')\n        \n        avg = float('-inf')\n        for direction in directions:\n            #Move in the direction:\n            new_cell = (start[0] + direction[0], start[1] + direction[1])\n            #Check if new cell is valid. If not, continue.\n            if new_cell[0] < 0 or new_cell[1] < 0:\n                continue\n            \n            #If it is valid, add the new value to the current average:\n            if grid[new_cell[0]][new_cell[1]]!= float('-inf'):\n                avg = max(avg, grid[new_cell[0]][new_cell[1]])\n            \n        return avg + grid[start[0]][start[1]]\n    \n    return max(helper((0,0), cost), helper((len(cost) - 1, len(cost[0]) - 1), cost))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1943
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    return ",
        "num_ids": 5
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    m = len(cost)\n    n = len(cost[0])\n    if not isSquareMatrix(cost):\n        return -1\n    for i in range(m):\n        for j in range(n):\n            if cost[i][j] == -1:\n                cost[i][j] = 0\n",
        "num_ids": 76
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    N = len(cost)\n    \n    if N == 0:\n        return 0\n    if N == 1:\n        return cost[0][0]\n        \n    dp = [[0 for _ in range(N)] for _ in range(N)]\n    \n    for i in range(N):\n        for j in range(N):\n            dp[i][j] = cost[i][j]\n            \n    \n    for i in range(1,N):\n        for j in range(1,N):\n            dp[i][j] = cost[i][j] + min(dp[i-1][j], dp[i][j-1])\n    \n    return int(round(float(dp[N-1][N-1]) / float(N),1))\n    \n    \n    \n",
        "num_ids": 193
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_dict = {}\n    for i in students.keys():\n        if (students[i][0]>h) and (students[i][1]>w):\n            new_dict[i]=students[i]\n    return new_dict\n",
        "num_ids": 63
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {k:v for k,v in students.items() if v[0]>h and v[1]>w}\n",
        "num_ids": 33
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    data=[]\n    for student in students:\n        if (students[student][0] >= h and students[student][1] >= w):\n            data.append(student)\n    return data",
        "num_ids": 48
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_list = []\n    for name in students:\n        if(students[name][0] < h or students[name][1] < w):\n            new_list.append(students[name])\n    return new_list\n",
        "num_ids": 58
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = []\n    for name, value in students.items():\n        if value[0] >= h and value[1] >= w:\n            result.append(name)\n    return result\n",
        "num_ids": 47
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    s_list = list(students.values())\n    s_t = list(students.keys())\n    \n    s_list.sort(key=lambda x: (x[0], x[1]))\n    new_s = []\n    for i in s_list:\n        if i[0] > h or i[1] > w:\n            new_s.append(i)\n    print(new_s)\n    for j in range(len(new_s)):\n        new_s[j] = s_t[s_list.index(new_s[j])]\n    \n    return new_s\n",
        "num_ids": 152
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result_list = []\n    for student in students.items():\n        if student[1][0] > h and student[1][1] > w:\n            result_list.append(student)\n    return result_list\n",
        "num_ids": 55
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    data = {}\n    for student in students:\n        student_name = student[\"Student_name\"]\n        student_height = student[\"Student_height\"]\n        student_weight = student[\"Student_weight\"]\n        data[student_name] = (student_height,student_weight)\n    data_filter = {}\n    for student_name in students:\n        student_height,student_weight = students[student_name]\n        if student_height >= h and student_weight >= w:\n            data_filter[student_name] = (student_height,student_weight)\n    return data_filter\n",
        "num_ids": 141
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    student_data = list(students.items())\n    height_min = h\n    weight_min = w\n    for i in range(len(student_data)):\n        if student_data[i][1][0] < height_min:\n            height_min = student_data[i][1][0]\n        if student_data[i][1][1] < weight_min:\n            weight_min = student_data[i][1][1]\n    for i in range(len(student_data)):\n        if student_data[i][1][0] > height_min or student_data[i][1][1] > weight_min:\n            students.pop(student_data[i][0])\n    print(\"Remaining students : \", len(students))\n    return students\n",
        "num_ids": 191
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(0, len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_num_dict = {}\n    for num in range(len(nums1)):\n        if nums1[num] in same_num_dict:\n            same_num_dict[nums1[num]] += 1\n        else:\n            same_num_dict[nums1[num]] = 1\n",
        "num_ids": 77
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    pairs = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            pairs += 1\n    return pairs\n    \ndef check_if_same_list(nums1, nums2):\n    '''\n    Write a function that checks if two lists are equal in the same order and in the same number of values.\n    '''\n    if len(nums1) == len(nums2) and sorted(nums1) == sorted(nums2):\n        return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    num_match = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            num_match += 1\n    return num_match\n",
        "num_ids": 52
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    assert len(nums1) == len(nums2)\n    return sum([1 for i in range(len(nums1)) if nums1[i] == nums2[i]])\n",
        "num_ids": 50
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    if power == 0:\n        return 1\n    else:\n        i = 1\n        while i <= power:\n            sum += base\n            i += 1\n        return sum\n",
        "num_ids": 48
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    i = 1\n    while i <= power:\n        result += base % 10\n        base = base // 10\n        i += 1\n    return result\n",
        "num_ids": 42
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # The algorithm for sum of digits of a number\n    digits_sum = 0\n    while base > 0:\n        digits_sum += base % 10\n        base //= 10\n        base = base // 10\n        print(digits_sum)\n    \n    return digits_sum * power\n",
        "num_ids": 71
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 1\n    for i in range(power):\n        result = result * base\n    return result\n",
        "num_ids": 27
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        sum += (base % 10)\n        base //= 10\n        power -= 1\n    return sum\nprint(power_base_sum(50, 3))\nprint(power_base_sum(50, 6))\nprint(power_base_sum(50, 9))\nprint(power_base_sum(50, 10))\n",
        "num_ids": 90
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_digits = []\n    power_digits = []\n    \n    #create list of base, power pairs\n    while power >= 0:\n        power_digits.append(power)\n        power = int(power/10)\n    while base >= 0:\n        base_digits.append(base)\n        base = int(base/10)\n    \n    #build sum\n    sum = 0\n    while base_digits:\n        #get digits\n        digit = base_digits.pop()\n        if len(base_digits)!= 0:\n            digit *= power_digits.pop()\n        sum += digit\n    \n    #return sum\n    return sum\n",
        "num_ids": 163
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    if power > base:\n        while power > 0:\n            power -= base\n            sum += int(base)\n    else:\n        while power > 0:\n            sum += int(power)\n            power -= 1\n    return sum\nprint(power_base_sum(3, 15))\nprint(power_base_sum(9, 8))\nprint(power_base_sum(1, 4))\n",
        "num_ids": 101
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_num = 0\n    num = 1\n    for i in range(power):\n        base_num += num\n        num *= base\n    return base_num\n",
        "num_ids": 42
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    \n    power_str = str(power)\n    \n    # checks if number is only one digit, returns itself\n    if len(power_str) == 1:\n        return base\n    \n    # calculates sum of digits from the base to the power\n    sum = 0\n    for i in range(len(power_str)):\n        # adds the power digit to the sum\n        sum += int(power_str[i])\n        \n        # if the sum is divisible by the base, break\n        if sum % base == 0:\n            break\n    \n    # returns the sum\n    return sum\n",
        "num_ids": 141
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if (base == 0) or (power == 0) or (base == 1) or (power == 1):\n        return 0\n    else:\n        if base < 10:\n            return base * power\n        else:\n            result = base\n            for i in range(0, power):\n                result = result / 10\n            return result * power\n",
        "num_ids": 82
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r\"(\\\"|')(.*)(?<!\\\\)(\\\\\\\"|')\")\n    res = re.findall(pattern,text1)\n    return res\n",
        "num_ids": 47
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r\"\\\"\")\n    return re.findall(pattern, text1)\n",
        "num_ids": 28
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text1.replace(\"'\", \"\")\n    text = text.replace('\"', \"\")\n    return text\n    \ndef count_sentences_in_text(text1):\n    '''\n    Write a function to count number of sentences in a given string.\n    '''\n    text = text1.replace('.','')\n    text = text.replace(',','')\n    text = text.replace('?','')\n    text = text.replace(':','')\n    text = text.replace(';','')\n    text = text.replace('!','')\n    text = text.replace('\\n','')\n    sentence_list = re.split(r'\\s+', text)\n    return len(sentence_list)\n    \ndef count_words_in_text(text1):\n    '''\n    Write a function to count number of words in a given string.\n    '''\n    text = text1.replace('.','')\n    text = text.replace(',','')\n    text = text.replace('?','')\n    text = text.replace(':','')\n    text = text.replace(';','')\n    text = text.replace('!','')\n    text = text.replace('\\n','')\n    word_list = re.split(r'\\s+', text)\n    return len(word_list)\n    \ndef count_characters_in_text(text1):\n    '''\n    Write a function to count number of characters in a given string.\n    '''\n    text = text1.replace('.','')\n    text = text.replace(',','')\n    text = text.replace('?','')\n    text = text.replace(':','')\n    text = text.replace(';','')\n    text = text.replace('!','')\n    text = text.replace('\\n','')\n    return len(text)\n    \ndef count_upper_cases_in_text(text1):\n    '''\n    Write a function to count number of uppercase characters in a given string.\n    '''\n    text = text1.replace('.','')\n    text = text.replace(',','')\n    text = text.replace('?','')\n    text = text.replace(':','')\n    text = text.replace(';','')\n    text = text.replace('!','')\n    text = text.replace('\\n','')\n    uppercase_list = re.findall(r'[A-Z]', text)\n    return len(uppercase_list)\n    \ndef count_lower_cases_in_text(text1):\n    '''\n    Write a function to count number of lowercase characters in a given string.\n    '''\n    text = text1.replace('.','')\n    text = text.replace(',','')\n    text = text.replace('?','')\n    text = text.replace(':','')\n    text = text.replace(';','')\n    text = text.replace('!','')\n    text = text.replace('\\n','')\n    lowercase_list = re.findall(r'[a-z]', text)\n    return len(lowercase_list)\n    \ndef count_digits_in_text(text1):\n    '''\n    Write a function to count number of digits in a given string.\n    '''\n    text = text1.replace('.','')\n    text = text.replace(',','')\n    text = text.replace('?','')\n    text = text.replace(':','')\n    text = text.replace(';','')\n    text = text.replace('!','')\n    text = text.replace('\\n','')\n    digits_list = re.findall(r'[0-9]', text)\n    return len(digits_list)\n    \ndef count_spaces_in_text(text1):\n    '''\n    Write a function to count number of spaces in a given string.\n    '''\n    text = text1.replace('.','')\n    text = text.replace(',','')\n    text = text.replace('?','')\n    text = text.replace(':','')\n    text = text.replace(';','')\n    text = text.replace('!','')\n    text = text.replace('\\n','')\n    spaces_list = re.findall(r'[ ]', text)\n    return len(spaces_list)\n    \ndef count_symbols_in_text(text1):\n    '''\n    Write a function to count number of symbols in a given string.\n    '''\n    text = text1.replace('.','')\n    text = text.replace(',','')\n    text = text.replace('?','')\n    text = text.replace(':','')\n    text = text.replace(';','')\n    text = text.replace('!','')\n    text = text.replace('\\n','')\n    symbols_list = re.findall(r'[^ ]', text)\n    return len(symbols_list)\n    \ndef count_all_characters_in_text(text1):\n    '''\n    Write a function to count number of characters in a given string.\n    '''\n    text = text1.replace('.','')\n    text = text.replace(',','')\n    text = text.replace('?','')\n    text = text.replace(':','')\n    text = text.replace(';','')\n    text = text.replace('!','')\n    text = text.replace('\\n','')\n    return len(text)\n    \ndef count_all_uppercase_characters_in_text(text1):\n    '''\n    Write a function to count number of uppercase characters in a given string.\n    '''\n    text = text1.replace('.','')\n    text = text.replace(',','')\n    text = text.replace('?','')\n    text = text.replace(':','')\n    text = text.replace(';','')\n    text = text.replace('!','')\n    text = text.replace('\\n','')\n    uppercase_list = re.findall(r'[A-Z]', text)\n    return len(uppercase_list)\n    \ndef count_all_lowercase_characters_in_text(text1):\n    '''\n    Write a function to count number of lowercase characters in a given string.\n    '''\n    text = text1.replace('.','')\n    text = text.replace(',','')\n    text = text.replace('?','')\n    text = text.replace(':','')\n    text = text.replace(';','')\n    text = text.replace('!','')\n    text = text.replace('\\n','')\n    lowercase_list = re.findall(r'[a-z]', text)\n    return len(lowercase_list)\n    \ndef count_all_digits_characters_in_text(text1):\n    '''\n    Write a function to count number of digits characters in a given string.\n    '''\n    text = text1.replace('.','')\n    text = text.replace(',','')\n    text = text.replace('?','')\n    text = text.replace(':','')\n    text = text.replace(';','')\n    text = text.replace('!','')\n    text = text.replace('\\n','')\n    digits_list = re.findall(r'[0-9]', text)\n    return len(digits_list)\n    \ndef count_all_spaces_characters_in_text(text1):\n    '''\n    Write a function to count number of spaces characters in a give",
        "num_ids": 15
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    string1 = text1\n    quotation_start = string1.find(\"\\\"\") + 1\n    quotation_end = string1.find(\"\\\"\", quotation_start)\n    quotation_in_between = string1[quotation_start:quotation_end]\n    return quotation_in_between\n",
        "num_ids": 73
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text1.split(' ')\n    for i in range(len(text)):\n        if text[i].startswith('\"'):\n            text[i] = text[i][1:]\n        if text[i].endswith('\"'):\n            text[i] = text[i][:-1]\n    return text\n",
        "num_ids": 82
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if text1 is not None:\n        text1 = text1.replace(\" \",\"\")\n        new_text = text1[1:len(text1)-1]\n        print(new_text)\n",
        "num_ids": 50
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # for i in text1:\n    #     if i == '\"' or i == \"'\":\n    #         if text1[i+1] == '\"' or text1[i+1] == \"'\":\n    #             break\n    #     else:\n    #         continue\n    # print(text1[i:i+1])\n",
        "num_ids": 81
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    final_output = ''\n    temp_string = ''\n    for x in text1:\n        if x =='':\n            if temp_string!= '':\n                final_output = final_output + temp_string\n                temp_string = ''\n            else:\n                final_output = final_output +''\n        else:\n            temp_string = temp_string + x\n    final_output = final_output + temp_string\n    final_output = final_output.strip()\n    return final_output\n",
        "num_ids": 124
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result = re.findall(\"(\\\"[^\\\"]*\\\" |'[^']*')\", text1)\n    print(result)\n    # Use of raw string\n    # result = re.findall(r\"(\\\"[^\\\"]*\\\" |'[^']*')\", text1)\n",
        "num_ids": 73
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    regex = re.compile(r'[\"]|[\\(|\\)]')\n    list = regex.findall(text1)\n    if list:\n        for item in list:\n            if item == \"[\":\n                return list[-1]\n            elif item == \"]\":\n                return list[0]\n    return None\n",
        "num_ids": 83
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # pass #delete this line and complete the function\n    return tuple(x * (y + 1) for x, y in zip(test_tup, test_tup[1:]))\n",
        "num_ids": 46
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t = ()\n    for i in range(0, len(test_tup)-1):\n        t = t + (test_tup[i] * test_tup[i + 1],)\n    return t\n",
        "num_ids": 54
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(t_1*t_2 for t_1,t_2 in test_tup)\n",
        "num_ids": 28
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(t * (t + 1) for t in test_tup)\n",
        "num_ids": 22
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(i * (i+1) for i in test_tup)\n",
        "num_ids": 22
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    i = 0\n    result = (None,)*(len(test_tup)-1)\n    while i < len(test_tup):\n        result[i] = test_tup[i] * test_tup[i+1]\n        i += 1\n    return result\n    \ndef get_summation_of_digit_square_roots(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to sqrt(sum([t_i**2]))\n    '''\n    i = 0\n    result = (None,)*(len(test_tup)-1)\n    while i < len(test_tup):\n        result[i] = math.sqrt(sum([i**2]))\n        i += 1\n    return result\n    \ndef get_max_sum_of_sublists(test_tup):\n    '''\n    Write a function that takes as input a tuple of lists of numbers (l_1,...,l_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to the maximum sum of all sublists of l_i.\n    '''\n    i = 0\n    result = (None,)*(len(test_tup)-1)\n    while i < len(test_tup):\n        result[i] = max([sum(l) for l in test_tup[i]])\n        i += 1\n    return result\n    \ndef get_min_max_from_list_of_lists(test_tup):\n    '''\n    Write a function that takes as input a tuple of lists of lists of numbers (l_1,...,l_N) and returns a tuple of length N where the i-th element of the tuple is equal to l_i[0] - l_i[-1]\n    '''\n    i = 0\n    result = (None,)*(len(test_tup)-1)\n    while i < len(test_tup):\n        result[i] = test_tup[i][0] - test_tup[i][-1]\n        i += 1\n    return result\n    \ndef sum_squares_of_sublists(test_tup):\n    '''\n    Write a function that takes as input a tuple of lists of numbers (l_1,...,l_N) and returns a tuple of length N where the i-th element of the tuple is equal to sum([l_i[j]**2 for j in range(0,len(l_i)-1)])\n    '''\n    i = 0\n    result = (None,)*(len(test_tup)-1)\n    while i < len(test_tup):\n        result[i] = sum([i**2 for i in test_tup[i]])\n        i += 1\n    return result\n    \ndef get_max_sublist_sum(test_tup):\n    '''\n    Write a function that takes as input a tuple of lists of numbers (l_1,...,l_N) and returns a tuple of length N where the i-th element of the tuple is equal to max(l_i)\n    '''\n    i = 0\n    result = (None,)*(len(test_tup)-1)\n    while i < len(test_tup):\n        result[i] = max(test_tup[i])\n        i += 1\n    return result\n",
        "num_ids": 62
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup)\n    return (test_tup[i] * (test_tup[i + 1] for i in range(n - 1)) )\n",
        "num_ids": 45
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)\n",
        "num_ids": 54
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return (tuple(x * (x + 1) for x in test_tup))\n",
        "num_ids": 24
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = tuple(t*(t+1) for t in test_tup)\n    return result\n",
        "num_ids": 27
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    i = 0\n    sum_list = []\n    while i < len(lst1):\n        sum_list.append(lst1[i]+lst2[i])\n        i = i+1\n    return sum_list\n",
        "num_ids": 58
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1+lst2\n",
        "num_ids": 12
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst3 = []\n    for i in range(len(lst1)):\n        lst3.append(lst1[i]+lst2[i])\n    return lst3\n",
        "num_ids": 49
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    new_list = []\n    for i in range(len(lst1)):\n        new_list.append(lst1[i]+lst2[i])\n    return new_list\n",
        "num_ids": 49
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    \n    lst1_copy = lst1[:]\n    lst2_copy = lst2[:]\n    \n    # print(lst1_copy, lst2_copy)\n    \n    for i in range(0,len(lst1_copy)):\n        lst1_copy[i] = lst1_copy[i] + lst2_copy[i]\n    \n    return lst1_copy\n",
        "num_ids": 107
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum = []\n    for i in range(len(lst1)):\n        sum.append(lst1[i]+lst2[i])\n    return sum\n",
        "num_ids": 43
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum_lst = []\n    for i in range(len(lst1)):\n        sum_lst.append(lst1[i]+lst2[i])\n    return sum_lst\n",
        "num_ids": 52
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1 + lst2\n",
        "num_ids": 12
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    x = []\n    for i in range(len(lst1)):\n        x.append(lst1[i]+lst2[i])\n    return x\n",
        "num_ids": 43
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    assert (len(lst1)==len(lst2))\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]\n",
        "num_ids": 47
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, g in groupby(nums):\n        print(key, list(g))\n",
        "num_ids": 25
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        if key == '#':\n            continue\n        else:\n            return nums.index(key)\n",
        "num_ids": 40
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    s = sorted(nums)\n    print(s)\n    i = 0\n    while i < len(nums)-1:\n        if s[i] == s[i+1]:\n            nums.remove(s[i+1])\n        else:\n            i += 1\n    return nums\n",
        "num_ids": 75
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    unique = []\n    for i, elem in groupby(nums):\n        unique.append(list(elem))\n    return unique\n",
        "num_ids": 36
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) < 1:\n        return []\n",
        "num_ids": 17
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    num_set = set(nums)\n    if len(num_set) == len(nums):\n        return nums\n    else:\n        return list(num_set)\n",
        "num_ids": 46
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    new_nums = []\n    for i, num in enumerate(nums):\n        if i == 0 or num!= nums[i - 1]:\n            new_nums.append(num)\n    return new_nums\n",
        "num_ids": 58
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = list(set(nums))\n    nums.sort()\n    # print(nums)\n    idx = 0\n    while idx < len(nums)-1:\n        if nums[idx] == nums[idx+1]:\n            nums.pop(idx+1)\n        else:\n            idx += 1\n    return nums\n",
        "num_ids": 93
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    s = set(nums)\n    for i in range(1,len(s)):\n        if nums[i] == nums[i-1]:\n            nums.pop(i)\n    return nums\n",
        "num_ids": 55
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))\n    # solution = []\n    # for key, group in groupby(nums):\n    #     solution.append(key)\n    # return solution\n",
        "num_ids": 48
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surf = 0.5 * math.pi * r**2 * h\n    return surf\n",
        "num_ids": 24
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # start_point = (h/2 + math.sqrt(r**2 - h**2/2))\n    # end_point = h/2 - math.sqrt(r**2 - h**2/2)\n    area = math.pi * r ** 2 * (h / 2 + math.sqrt(r ** 2 - h ** 2 / 2)) / 3\n    return area\n",
        "num_ids": 93
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    print(\"Surface Area = \",math.pi*(r*r)*(h/3))\n    print(\"--------------------\")\n    return\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    print(\"Surface Area = \",(math.pi*r*r*h))\n    print(\"--------------------\")\n    return\ndef lateralsurface_triangle(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a triangle given the three lengths a,b and c.\n    '''\n    print(\"Surface Area = \",0.5*a*b)\n    print(\"--------------------\")\n    return\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    print(\"Surface Area = \",math.pi*(r*r)*(h/3))\n    print(\"--------------------\")\n    return\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    print(\"Surface Area = \",(math.pi*r*r*h))\n    print(\"--------------------\")\n    return\ndef lateralsurface_triangle(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a triangle given the three lengths a,b and c.\n    '''\n    print(\"Surface Area = \",0.5*a*b)\n    print(\"--------------------\")\n    return\ndef lateral_area(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    print(\"Surface Area = \",math.pi*(r*r)*(h/3))\n    print(\"--------------------\")\n    return\ndef lateral_area(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    print(\"Surface Area = \",(math.pi*r*r*h))\n    print(\"--------------------\")\n    return\ndef lateral_area(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a triangle given the three lengths a,b and c.\n    '''\n    print(\"Surface Area = \",0.5*a*b)\n    print(\"--------------------\")\n    return\ndef lateral_area(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    print(\"Surface Area = \",math.pi*(r*r)*(h/3))\n    print(\"--------------------\")\n    return\ndef lateral_area(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    print(\"Surface Area = \",(math.pi*r*r*h))\n    print(\"--------------------\")\n    return\ndef lateral_area(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a triangle given the three lengths a,b and c.\n    '''\n    print(\"Surface Area = \",0.5*a*b)\n    print(\"--------------------\")\n    return\ndef lateral_area(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    print(\"Surface Area = \",math.pi*(r*r)*(h/3))\n    print(\"--------------------\")\n    return\ndef lateral_area(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    print(\"Surface Area = \",(math.pi*r*r*h))\n    print(\"--------------------\")\n    return\ndef lateral_area(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a triangle given the three lengths a,b and c.\n    '''\n    print(\"Surface Area = \",0.5*a*b)\n    print(\"--------------------\")\n    return\ndef lateral_area(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    print(\"Surface Area = \",math.pi*(r*r)*(h/3))\n    print(\"--------------------\")\n    return\ndef lateral_area(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    print(\"Surface Area = \",(math.pi*r*r*h))\n    print(\"--------------------\")\n    return\ndef lateral_area(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a triangle given the three lengths a,b and c.\n    '''\n    print(\"Surface Area = \",0.5*a*b)\n    print(\"--------------------\")\n    return\ndef lateral_area(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    print(\"Surface Area = \",math.pi*(r*r)*(h/3))\n    print(\"--------------------\")\n    return\ndef lateral_area(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    print(\"Surface Area = \",(math.pi*r*r*h))\n    print(\"--------------------\")\n    return\ndef lateral_area(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a triangle given the three lengths a,b and c.\n    '''\n    print(\"Surface Area = \",0.5*a*b)\n    print(\"--------------------\")\n    return\ndef lateral_area(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    print(\"Surface Area = \",math.pi*(r*r)*(h/3))\n    print(\"--------------------\")\n    return\ndef lateral_area(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    print(\"Surface Area = \",(math.pi*r*r*h))\n    print(\"--------------------\")\n    return\ndef lateral_area(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a triangle given the three lengths a,b and c.\n    '''\n    print(\"Surface Area = \",0.5*a*b)\n    print(\"--------------------\")\n    return\ndef lateral_area(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    print(\"Surface Area = \",math.pi*(r*r)*(h/3))\n    print(\"--------------------\")\n    return\ndef lateral_area(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    print(\"Surface Area = \",(math.pi*r*r*h))\n    print(\"--------------------\")\n    return\ndef lateral_area(a,b,c):\n    '''\n    Write a function to find the lateral surface area of a triangle given the three lengths a,b and c.\n    '''\n    print(\"Surface Area = \",0.5*a*b)\n    print(\"--------------------\")\n    return\ndef lateral_area(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    print(\"Surface Area = \",math.pi*(r*r)*(h/3))\n    print(\"--------------------\")\n    return\ndef lateral_area(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    print(\"Surface Area = \",(math.pi*r*r*",
        "num_ids": 19
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    return (pi/4)*math.pow((r+h),2)*(r*h)\n",
        "num_ids": 33
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*h/3\n",
        "num_ids": 14
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #Your code here\n    area = math.pi * r**2 * h\n    return area\n",
        "num_ids": 25
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    a = (1-math.pow(r,2)/math.pow(h,2))/(1-math.pow(r,2)/math.pow(h,2)+2*math.pow(r,2)*math.pow(h,2))\n    b = (2*math.pow(r,2)*math.pow(h,2)/math.pow(h,2)) - math.pow(r,2)/math.pow(h,2)\n    c = (math.pow(r,2)/math.pow(h,2)-math.pow(r,2)/math.pow(h,2)+2*math.pow(r,2)*math.pow(h,2))/(2*math.pow(h,2))\n    d = (math.pow(r,2)/math.pow(h,2)+math.pow(r,2)/math.pow(h,2)-2*math.pow(r,2)*math.pow(h,2))/math.pow(h,2)\n    return a*(h*r)**2 + b*r + c + d\n",
        "num_ids": 285
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    print(\"The lateral surface area of a cone is\",math.pi*r*r*h)\n    return math.pi*r*r*h\n",
        "num_ids": 37
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if h == 0:\n        return 0\n    lateral = math.pi * r**2\n    delta = math.pi * r**2 - h**2\n    return lateral - (delta/2)\n",
        "num_ids": 52
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area=math.pi*r*(r**2+h**2)\n    return area\n",
        "num_ids": 25
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[\\s,.]', \":\", text)\n",
        "num_ids": 22
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace\n    return re.sub(r\", |. |, | \", \":\", text)\n",
        "num_ids": 26
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[ ]|[,;.]',':', text)\n",
        "num_ids": 23
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r\"[,.:]\", \":\", text)\n",
        "num_ids": 20
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # replace spaces\n    text = text.replace(\" \", \":\")\n    # replace commas\n    text = text.replace(\",\", \":\")\n    # replace dots\n    text = text.replace(\".\", \":\")\n    return text\n",
        "num_ids": 59
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # replace spaces with colon\n    # text = text.replace(\" \", \":\")\n    # replace commas with colon\n    # text = text.replace(\",\", \":\")\n    # replace dots with colon\n    # text = text.replace(\".\", \":\")\n    return text\n",
        "num_ids": 68
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r\"[,.\\']\", \":\", text)\n",
        "num_ids": 20
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    new = re.sub(r'[,.]', ':', text)\n    print(new)\n",
        "num_ids": 27
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    n = len(text)\n    for i in range(n):\n        if text[i] =='':\n            text = text[:i] + ':' + text[i+1:]\n        elif text[i] == ',':\n            text = text[:i] + ':' + text[i+1:]\n        elif text[i] == '.':\n            text = text[:i] + ':' + text[i+1:]\n    return text\ndef find_fib(n):\n    '''\n    Write a function that finds the nth fibonacci number\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return find_fib(n - 1) + find_fib(n - 2)\ndef find_fib_v1(n):\n    '''\n    Write a function that finds the nth fibonacci number\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (find_fib_v1(n-1) + find_fib_v1(n-2))\ndef find_fib_v2(n):\n    '''\n    Write a function that finds the nth fibonacci number\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 0\n        b = 1\n        for _ in range(2, n + 1):\n            c = a + b\n            a = b\n            b = c\n        return c\ndef find_fib_v3(n):\n    '''\n    Write a function that finds the nth fibonacci number\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 0\n        b = 1\n        c = 0\n        d = 1\n        e = 0\n        f = 1\n        for _ in range(2, n + 1):\n            c = a + b\n            a = b\n            b = c\n            c = d + e\n            d = e\n            e = c\n        return c\ndef find_fib_v4(n):\n    '''\n    Write a function that finds the nth fibonacci number\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 0\n        b = 1\n        c = 1\n        d = a + b\n        e = a + c\n        f = d + e\n        for _ in range(2, n + 1):\n            a = b\n            b = c\n            c = d\n            d = e\n            e = f\n            f = a + b + c + d + e\n    return f\ndef find_fib_v5(n):\n    '''\n    Write a function that finds the nth fibonacci number\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 0\n        b = 1\n        c = 1\n        d = a + b\n        e = a + c\n        f = d + e\n        for _ in range(2, n + 1):\n            a = b\n            b = c\n            c = d\n            d = e\n            e = f\n            f = a + b + c + d + e\n    return f\ndef find_fib_v6(n):\n    '''\n    Write a function that finds the nth fibonacci number\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 0\n        b = 1\n        c = 1\n        d = a + b\n        e = a + c\n        f = d + e\n        for _ in range(2, n + 1):\n            a = b\n            b = c\n            c = d\n            d = e\n            e = f\n            f = a + b + c + d + e\n    return f\ndef find_fib_v7(n):\n    '''\n    Write a function that finds the nth fibonacci number\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 0\n        b = 1\n        c = 1\n        d = a + b\n        e = a + c\n        f = d + e\n        for _ in range(2, n + 1):\n            a = b\n            b = c\n            c = d\n            d = e\n            e = f\n            f = a + b + c + d + e\n    return f\ndef find_fib_v8(n):\n    '''\n    Write a function that finds the nth fibonacci number\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 0\n        b = 1\n        c = 1\n        d = a + b\n        e = a + c\n        f = d + e\n        for _ in range(2, n + 1):\n            a = b\n            b = c\n            c = d\n            d = e\n            e = f\n            f = a + b + c + d + e\n    return f\ndef find_fib_v9(n):\n    '''\n    Write a function that finds the nth fibonacci number\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 0\n        b = 1\n        c = 1\n        d = a + b\n        e = a + c\n        f = d + e\n        for _ in range(2, n + 1):\n            a = b\n            b = c\n            c = d\n            d = e\n            e = f\n            f = a + b + c + d + e\n    return f\ndef find_fib_v10(n):\n    '''\n    Write a function that finds the nth fibonacci number\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 0\n        b = 1\n        c = 1\n        d = a + b\n        e = a + c\n        f = d + e\n        for _ in range(2, n + 1):\n            a = b\n            b = c\n            c = d\n            d = e\n            e = f\n            f = a + b + c + d + e\n    return f\ndef find_fib_v11(n):\n    '''\n    Write a function that finds the nth fibonacci number\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 0\n        b = 1\n        c = 1\n        d = a + b\n        e = a + c\n        f = d + e\n        for _ in range(2, n + 1):\n            a = b\n            b = c\n            c = d\n            d = e\n            e = f\n            f = a + b + c + d + e\n    return f\ndef find_fib_v12(n):\n    '''\n    Write a function that finds the nth fibonacci number\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 0\n        b = 1\n        c = 1\n        d = a + b\n        e = a + c\n        f = d + e\n        for _ in range(2, n + 1):\n            a = b\n            b = c\n            c = d\n            d = e\n            e = f\n            f = a + b + c + d + e\n    return f\ndef find_fib_v13(n):\n    '''\n    Write a function that finds the nth fibonacci number\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 0\n        b = 1\n        c = 1\n        d = a + b\n        e = a + c\n        f = d + e",
        "num_ids": 64
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    string = '''U.S. Declaration on the Civil Rights Act of 1964\n    \n    The Act states that all rights in property, except as explicitly provided for under Title 17 Section 5 should be reserved for the public.\n    The clause is amended to the act to prohibit the exclusion of any rights under Title 17 Section 5.\n    \n    \u201cThe act is amended to the act to prohibit the exclusion of any rights under Title 17 Section 5.\u201d\n    The clause is amended to the act to prohibit the exclusion of any rights under Title 17 Section 5.\n    \n    \u201cA clause is amended to the act to prohibit the exclusion of any rights under Title 17 Section 5.\u201d\n    '''\n    string = string.replace(' ', ':')\n    string = string.replace(',', ':')\n    string = string.replace('.', ':')\n    return string\n",
        "num_ids": 44
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l, r = 0, len(A) - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if A[mid] < x:\n            l = mid + 1\n        elif A[mid] > x:\n            r = mid - 1\n        else:\n            return mid\n    return -1\n",
        "num_ids": 82
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Time O(log n) | space O(1)\n    first_occurrence = -1\n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if A[mid] == x:\n            first_occurrence = mid\n            break\n        elif A[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return first_occurrence\n",
        "num_ids": 116
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # write your code here\n    left = 0\n    right = len(A)\n    while left < right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            right = mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n",
        "num_ids": 86
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    index = -1\n    start, end = 0, len(A) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if A[mid] == x:\n            index = mid\n            end = mid - 1\n        elif A[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return index\n",
        "num_ids": 95
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low, high = 0, len(A)-1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        elif A[mid] > x:\n            high = mid - 1\n    return -1\n",
        "num_ids": 90
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    if A[n - 1] < x:\n        return -1\n    else:\n        start = 0\n        end = n - 1\n        while end - start > 1:\n            mid = (start + end) // 2\n            if A[mid] == x:\n                return mid\n            elif A[mid] < x:\n                start = mid\n            else:\n                end = mid\n    return -1\n",
        "num_ids": 107
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    j = len(A) - 1\n    while i < j:\n        m = (i + j)//2\n        if A[m] == x:\n            return m\n        elif A[m] < x:\n            i = m + 1\n        else:\n            j = m - 1\n    if A[i] == x:\n        return i\n    else:\n        return -1\n",
        "num_ids": 101
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    first = -1\n    last = len(A)-1\n",
        "num_ids": 17
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0: return -1\n",
        "num_ids": 15
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if x == A[mid]:\n            return mid\n        elif x > A[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n",
        "num_ids": 76
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Approach 1:\n    '''\n    Let prod = (a1*a2)*(a1*a3)*(a2*a3).....(a_n*a_n)\n    Then, sum of prod = (a1*a2*a3*a4)*(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4)\n    '''\n    # Approach 2:\n    '''\n    Let prod = (a1*a2)*(a1*a3)*(a2*a3).....(a_n*a_n)\n    Then, sum of prod = (a1*a2*a3*a4)*(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4)\n    '''\n    # Approach 3:\n    '''\n    Let prod = (a1*a2)*(a1*a3)*(a2*a3).....(a_n*a_n)\n    Then, sum of prod = (a1*a2*a3*a4)*(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4)\n    '''\n    # Approach 4:\n    '''\n    Let prod = (a1*a2)*(a1*a3)*(a2*a3).....(a_n*a_n)\n    Then, sum of prod = (a1*a2*a3*a4)*(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4)\n    '''\n    # Approach 5:\n    '''\n    Let prod = (a1*a2)*(a1*a3)*(a2*a3).....(a_n*a_n)\n    Then, sum of prod = (a1*a2*a3*a4)*(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4)\n    '''\n    # Approach 6:\n    '''\n    Let prod = (a1*a2)*(a1*a3)*(a2*a3).....(a_n*a_n)\n    Then, sum of prod = (a1*a2*a3*a4)*(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4)\n    '''\n    # Approach 7:\n    '''\n    Let prod = (a1*a2)*(a1*a3)*(a2*a3).....(a_n*a_n)\n    Then, sum of prod = (a1*a2*a3*a4)*(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4)\n    '''\n    # Approach 8:\n    '''\n    Let prod = (a1*a2)*(a1*a3)*(a2*a3).....(a_n*a_n)\n    Then, sum of prod = (a1*a2*a3*a4)*(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4)\n    '''\n    # Approach 9:\n    '''\n    Let prod = (a1*a2)*(a1*a3)*(a2*a3).....(a_n*a_n)\n    Then, sum of prod = (a1*a2*a3*a4)*(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4)\n    '''\n    # Approach 10:\n    '''\n    Let prod = (a1*a2)*(a1*a3)*(a2*a3).....(a_n*a_n)\n    Then, sum of prod = (a1*a2*a3*a4)*(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4)\n    '''\n    # Approach 11:\n    '''\n    Let prod = (a1*a2)*(a1*a3)*(a2*a3).....(a_n*a_n)\n    Then, sum of prod = (a1*a2*a3*a4)*(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4)\n    '''\n    # Approach 12:\n    '''\n    Let prod = (a1*a2)*(a1*a3)*(a2*a3).....(a_n*a_n)\n    Then, sum of prod = (a1*a2*a3*a4)*(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4)\n    '''\n    # Approach 13:\n    '''\n    Let prod = (a1*a2)*(a1*a3)*(a2*a3).....(a_n*a_n)\n    Then, sum of prod = (a1*a2*a3*a4)*(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2*a3*a4).....(a1*a2",
        "num_ids": 134
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # code here\n    length = len(arr)\n    dp = [[0] * length for _ in range(length)]\n",
        "num_ids": 31
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # \n    if len(arr) == 0:\n        return 0\n    \n    # if length of list is not multiple of 2\n    if len(arr) % 2!= 0:\n        return 0\n    \n    # initializing the result\n    prod = 1\n    \n    # for loop to iterate over all the elements of array\n    for i in range(0, len(arr)):\n        \n        # if we are in first sublist\n        if i == 0:\n            \n            # multiply the elements of first sublist\n            prod = prod * arr[i]\n            \n        # if we are in any other sublist\n        else:\n            \n            # multiply the elements of first sublist\n            prod = prod * arr[i]\n            \n            # multiply the elements of second sublist\n            prod = prod * arr[i-1]\n            \n    return prod\n    \n    \n    \ndef array_Reversal(arr):\n    '''\n    Write a python function to reverse an array. https://www.geeksforgeeks.org/reverse-an-array-in-python/\n    '''\n    # starting of the array\n    start = 0\n    \n    # ending of the array\n    end = len(arr) - 1\n    \n    while start <= end:\n        \n        # swapping the numbers\n        arr[start], arr[end] = arr[end], arr[start]\n        \n        # incrementing the start and end\n        start += 1\n        end -= 1\n    \n    return arr\n",
        "num_ids": 96
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum_of_prod = []\n    #we have to take one more element because the subarray will have 1 element more than the original array\n    for i in range(len(arr)+1):\n        #we need to check the lenght of the subarray because we will only add the products of lenght 2\n        for j in range(len(arr)+1):\n            sum_of_prod.append(arr[i:j])\n    return reduce(lambda a,b: a*b, sum_of_prod)\n",
        "num_ids": 126
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            for k in range(j+1,len(arr)):\n                count += arr[i]*arr[j]*arr[k]\n    print(count)\n",
        "num_ids": 75
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    for i in range(1, len(arr) + 1):\n        for j in range(0, len(arr) - i + 1):\n            sum = sum + (arr[j] * arr[j + i - 1])\n    return sum\n",
        "num_ids": 65
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # for _ in range(len(arr)):\n    #     arr.append(0)\n    arr.insert(0,0)\n    n=len(arr)\n    #dp[i][j] represents product of all possible subarrays of arr[i:j+1]\n    dp=[[0 for x in range(n)] for y in range(n)]\n",
        "num_ids": 89
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    prod = 1\n    i = 0\n    while i < len(arr):\n        prod = prod * arr[i]\n        i += 1\n    i = 0\n    prod = 1\n    while i < len(arr):\n        prod = prod * arr[i]\n        i += 1\n    print(prod)\n",
        "num_ids": 81
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    if len(arr) == 0:\n        return 0\n    \n    result = arr[0] * arr[1]\n    for i in range(len(arr)):\n        if i == 0:\n            continue\n        for j in range(i, len(arr)):\n            result += arr[j]\n    return result\n",
        "num_ids": 81
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum=0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            sum+=arr[i]*arr[j]\n    print(sum)\n",
        "num_ids": 52
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    m = n ^ (n >> 1)\n    return m\n",
        "num_ids": 17
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    binary = bin(n)[2:]\n    binary = '0' * (32 - len(binary)) + binary\n    binary = binary[::-1]\n    return int(binary, 2)\n",
        "num_ids": 48
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    m = n & (~n)\n    return m\n",
        "num_ids": 15
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n ^ 0xFFFFFFFF\n",
        "num_ids": 11
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n ^ (n>>1)\n",
        "num_ids": 27
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    '''\n    # My code\n    print(\"The number is:\",n)\n    print(\"The number after toggle is:\",n^0b100)\n    '''\n    #if user input only one argument then the bit will be toggle with 0b100\n    if len(sys.argv) == 1:\n        n = 0b100\n    #if user input more than one argument then the bit will be toggle with 0b101\n    else:\n        n = int(sys.argv[1])\n    #n = int(input())\n    n ^= (1<<(n.bit_length()-1))\n",
        "num_ids": 105
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    if n >= 0:\n        x = (1 << 31) + (n << 1)\n    else:\n        x = (1 << 31) - (n << 1)\n    return x\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 1984
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    print(\"\\nCase 1: Toggle Bits\")\n    n1 = n & ~(n-1)\n    print(bin(n1))\n    \n    # ******* Approach 2:  **********\n    '''\n    Write a python program to toggle bits of the number except the first and the last bit. \n    '''\n    n2 = n \n    n2 |= n2 >> 1\n    n2 &= ~(n2 >> 1)\n    n2 |= n2 >> 2\n    n2 &= ~(n2 >> 2)\n    n2 |= n2 >> 4\n    n2 &= ~(n2 >> 4)\n    n2 |= n2 >> 8\n    n2 &= ~(n2 >> 8)\n    n2 |= n2 >> 16\n    n2 &= ~(n2 >> 16)\n    print(bin(n2))\n    \n    # ******* Approach 3:  **********\n    '''\n    Write a python program to toggle bits of the number except the first and the last bit.\n    '''\n    n3 = n\n    n3 = n3 ^ n3 >> 1\n    n3 = n3 ^ n3 >> 1\n    n3 = n3 ^ n3 >> 1\n    n3 = n3 ^ n3 >> 1\n    n3 = n3 ^ n3 >> 1\n    n3 = n3 ^ n3 >> 1\n    n3 = n3 ^ n3 >> 1\n    n3 = n3 ^ n3 >> 1\n    n3 = n3 ^ n3 >> 1\n    n3 = n3 ^ n3 >> 1\n    print(bin(n3))\n    \n    # ******* Approach 4:  **********\n    '''\n    Write a python program to toggle bits of the number except the first and the last bit.\n    '''\n    n4 = n\n    n4 ^= (n4 >> 1)\n    n4 ^= (n4 >> 1)\n    n4 ^= (n4 >> 1)\n    n4 ^= (n4 >> 1)\n    n4 ^= (n4 >> 1)\n    n4 ^= (n4 >> 1)\n    n4 ^= (n4 >> 1)\n    n4 ^= (n4 >> 1)\n    n4 ^= (n4 >> 1)\n    print(bin(n4))\n    \n    # ******* Approach 5:  **********\n    '''\n    Write a python program to toggle bits of the number except the first and the last bit.\n    '''\n    n5 = n\n    n5 = n5 ^ (n5 >> 1)\n    n5 = n5 ^ (n5 >> 1)\n    n5 = n5 ^ (n5 >> 1)\n    n5 = n5 ^ (n5 >> 1)\n    n5 = n5 ^ (n5 >> 1)\n    n5 = n5 ^ (n5 >> 1)\n    n5 = n5 ^ (n5 >> 1)\n    n5 = n5 ^ (n5 >> 1)\n    n5 = n5 ^ (n5 >> 1)\n    print(bin(n5))\n    \n    # ******* Approach 6:  **********\n    '''\n    Write a python program to toggle bits of the number except the first and the last bit.\n    '''\n    n6 = n\n    n6 = n6 ^ n6 >> 1\n    n6 = n6 ^ n6 >> 1\n    n6 = n6 ^ n6 >> 1\n    n6 = n6 ^ n6 >> 1\n    n6 = n6 ^ n6 >> 1\n    n6 = n6 ^ n6 >> 1\n    n6 = n6 ^ n6 >> 1\n    n6 = n6 ^ n6 >> 1\n    n6 = n6 ^ n6 >> 1\n    print(bin(n6))\n    \n    # ******* Approach 7:  **********\n    '''\n    Write a python program to toggle bits of the number except the first and the last bit.\n    '''\n    n7 = n\n    n7 = n7 ^ (n7 >> 1)\n    n7 = n7 ^ (n7 >> 1)\n    n7 = n7 ^ (n7 >> 1)\n    n7 = n7 ^ (n7 >> 1)\n    n7 = n7 ^ (n7 >> 1)\n    n7 = n7 ^ (n7 >> 1)\n    n7 = n7 ^ (n7 >> 1)\n    n7 = n7 ^ (n7 >> 1)\n    n7 = n7 ^ (n7 >> 1)\n    print(bin(n7))\n    \n    # ******* Approach 8:  **********\n    '''\n    Write a python program to toggle bits of the number except the first and the last bit.\n    '''\n    n8 = n\n    n8 = n8 ^ (n8 >> 1)\n    n8 = n8 ^ (n8 >> 1)\n    n8 = n8 ^ (n8 >> 1)\n    n8 = n8 ^ (n8 >> 1)\n    n8 = n8 ^ (n8 >> 1)\n    n8 = n8 ^ (n8 >> 1)\n    n8 = n8 ^ (n8 >> 1)\n    n8 = n8 ^ (n8 >> 1)\n    n8 = n8 ^ (n8 >> 1)\n    print(bin(n8))\n    \n    # ******* Approach 9:  **********\n    '''\n    Write a python program to toggle bits of the number except the first and the last bit.\n    '''\n    n9 = n\n    n9 = n9 ^ (n9 >> 1)\n    n9 = n9 ^ (n9 >> 1)\n    n9 = n9 ^ (n9 >> 1)\n    n9 = n9 ^ (n9 >> 1)\n    n9 = n9 ^ (n9 >> 1)\n    n9 = n9 ^ (n9 >> 1)\n    n9 = n9 ^ (n9 >> 1)\n    n9 = n9 ^ (n9 >> 1)\n    n9 = n9 ^ (n9 >> 1)\n    print(bin(n9))\n    \n    # ******* Approach 10:  **********\n    '''\n    Write a python program to toggle bits of the number except the first and the last bit.\n    '''\n    n10 = n\n    n10 = n10 ^ (n10 >> 1)\n    n10 = n10 ^ (n10 >> 1)\n    n10 = n10 ^ (n10 >> 1)\n    n10 = n10 ^ (n10 >> 1)\n    n10 = n10 ^ (n10 >> 1)\n    n10 = n10 ^ (n10 >> 1)\n    n10 = n10 ^ (n10 >> 1)\n    n10 = n10 ^ (n10 >> 1)\n    n10 = n10 ^ (n10 >> 1)\n    print(bin(n10))\n    \n    # ******* Approach 11:  **********\n    '''\n    Write a python program to toggle bits of the number except the first and the last bit.\n    '''\n    n11 = n\n    n11 = n11 ^ (n11 >> 1)\n    n11 = n11 ^ (n11 >> 1)\n    n11 = n11 ^ (n11 >> 1)\n    n11 = n11 ^ (n11 >> 1)\n    n11 = n11 ^ (n11 >> 1)\n    n11 = n11 ^ (n11 >> 1)\n    n11 = n11 ^ (n11 >> 1)\n    n11 = n11 ^ (n11 >> 1)\n    n11 = n11 ^ (n11 >> 1)\n    print(bin(n11))\n    \n    # ******* Approach 12:  **********\n    '''\n    Write a python program to toggle bits of the number except the first and the last bit.\n    '''\n    n12 = n\n    n12 = n12 ^ (n12 >> 1)\n    n12 = n12 ^ (n12 >> 1)\n    n12 = n12 ^ (n12 >> 1)\n    n12 = n12 ^ (n12 >> 1)\n    n12 = n12 ^ (n12 >> 1)\n    n12 = n12 ^ (n12 >> 1)\n    n12 = n12 ^ (n12 >> 1)\n    n12 = n12 ^ (n12 >> 1)\n    n12 = n12 ^ (n12 >> 1)\n    print(bin(n1",
        "num_ids": 141
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n | (n << 1) & 0x5555555555555555\n    n = n | (n << 2) & 0x3333333333333333\n    n = n | (n << 4) & 0x0F0F0F0F0F0F0F0F\n    n = n | (n << 8) & 0x00FF00FF00FF00FF\n    n = n | (n << 16) & 0x0000FFFF0000FFFF\n    n = n | (n << 32) & 0x00000000FFFFFFFF\n    n = n | (n << 64) & 0x000000FFFFFFFFFFFF\n    n = n >> 1\n    n = n >> 2\n    n = n >> 4\n    n = n >> 8\n    n = n >> 16\n    n = n >> 32\n    n = n >> 64\n    return n\n",
        "num_ids": 200
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n | (1 << n.bit_length()-1)\n    n = n & (1 << n.bit_length()) - 1\n    return n\n",
        "num_ids": 41
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    index = bisect.bisect_left(a, x)\n    if index == n or a[index]!= x:\n        return index\n    return index + 1\n",
        "num_ids": 51
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    if n == 0:\n        return 0\n    l = 0\n    r = n - 1\n    while l < r:\n        m = (l + r) // 2\n        if a[m] < x:\n            l = m + 1\n        else:\n            r = m\n    return l\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    if n == 0:\n        return 0\n    l = 0\n    r = n - 1\n    while l < r:\n        m = (l + r) // 2\n        if a[m] < x:\n            l = m + 1\n        else:\n            r = m\n    return r\nclass SegmentTree:\n    def __init__(self, arr, operation):\n        self.data = arr\n        self.operation = operation\n        self.n = len(arr)\n        self.tree = []\n        self.build_tree(0, 0, self.n - 1)\n",
        "num_ids": 149
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    lo = 0\n    hi = len(a)\n",
        "num_ids": 15
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Your code here\n    return a.index(x, 0, len(a))\n",
        "num_ids": 23
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    lo, hi = 0, len(a)\n    while lo < hi:\n        mid = lo + (hi-lo)//2\n        if a[mid] < x:\n            lo = mid+1\n        else:\n            hi = mid\n    return lo\n",
        "num_ids": 64
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    lo = 0\n    hi = len(a)-1\n    while(lo<=hi):\n        mid = (lo+hi)//2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            hi = mid-1\n        else:\n            lo = mid+1\n    return lo\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    lo = 0\n    hi = len(a)-1\n    while(lo<=hi):\n        mid = (lo+hi)//2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            hi = mid-1\n        else:\n            lo = mid+1\n    return lo\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    lo = 0\n    hi = len(a)-1\n    while(lo<=hi):\n        mid = (lo+hi)//2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            hi = mid-1\n        else:\n            lo = mid+1\n    return lo\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    lo = 0\n    hi = len(a)-1\n    while(lo<=hi):\n        mid = (lo+hi)//2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            hi = mid-1\n        else:\n            lo = mid+1\n    return lo\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    lo = 0\n    hi = len(a)-1\n    while(lo<=hi):\n        mid = (lo+hi)//2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            hi = mid-1\n        else:\n            lo = mid+1\n    return lo\n",
        "num_ids": 83
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = 0\n    r = len(a) - 1\n    while l <= r:\n        m = (l + r) // 2\n        if x < a[m]:\n            r = m - 1\n        else:\n            l = m + 1\n    return l\n",
        "num_ids": 66
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if not a:\n        return 0\n    else:\n        i = 0\n        j = len(a) - 1\n        while i <= j:\n            mid = (i + j)//2\n            if x == a[mid]:\n                return mid\n            elif x < a[mid]:\n                j = mid - 1\n            else:\n                i = mid + 1\n        return i\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if not a:\n        return 0\n    else:\n        i = 0\n        j = len(a) - 1\n        while i <= j:\n            mid = (i + j)//2\n            if x == a[mid]:\n                return mid\n            elif x < a[mid]:\n                j = mid - 1\n            else:\n                i = mid + 1\n        return j + 1\ndef binary_search(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if x == a[mid]:\n            return mid\n        elif x < a[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\ndef bubble_sort(a):\n    '''\n    Write a function to sort the array in ascending order by swapping the elements. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-25.php\n    '''\n    if not a:\n        return\n    n = len(a)\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i] > a[j]:\n                a[i],a[j] = a[j],a[i]\n    return a\ndef insertion_sort(a):\n    '''\n    Write a function to sort the array in ascending order by inserting each element into the array one by one, such that the array is sorted. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-25.php\n    '''\n    if not a:\n        return\n    n = len(a)\n    for i in range(1,n):\n        x = a[i]\n        j = i - 1\n        while j >= 0 and a[j] > x:\n            a[j+1] = a[j]\n            j -= 1\n        a[j+1] = x\n    return a\ndef merge_sort(a):\n    '''\n    Write a function to sort the array in ascending order by merging the sorted sub-arrays. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-26.php\n    '''\n    if not a:\n        return\n    n = len(a)\n    if n > 1:\n        mid = n//2\n        left_list = a[:mid]\n        right_list = a[mid:]\n        merge_sort(left_list)\n        merge_sort(right_list)\n        i = j = k = 0\n        while i < len(left_list) and j < len(right_list):\n            if left_list[i] < right_list[j]:\n                a[k] = left_list[i]\n                i += 1\n            else:\n                a[k] = right_list[j]\n                j += 1\n            k += 1\n        while i < len(left_list):\n            a[k] = left_list[i]\n            i += 1\n            k += 1\n        while j < len(right_list):\n            a[k] = right_list[j]\n            j += 1\n            k += 1\n    return a\ndef quick_sort(a):\n    '''\n    Write a function to sort the array in ascending order by using quick sort algorithm. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-27.php\n    '''\n    if not a:\n        return\n    n = len(a)\n    if n <= 1:\n        return a\n    pivot = a[0]\n    left_list = quick_sort([element for element in a[1:] if element < pivot])\n    right_list = quick_sort([element for element in a[1:] if element >= pivot])\n    return left_list + [pivot] + right_list\ndef heapify(a):\n    '''\n    Write a function to heapify the given array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-28.php\n    '''\n    n = len(a)\n    if n == 1:\n        return a\n    parent = (n-1)//2\n    while parent >= 0:\n        heapify(a, parent, n)\n        parent -= 1\n    largest = a[0]\n    i = 1\n    while i < n:\n        if a[i] > largest:\n            a[0], a[i] = a[i], a[0]\n        i += 1\n    return a\ndef heap_sort(a):\n    '''\n    Write a function to sort the array in ascending order by heapify. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-28.php\n    '''\n    if not a:\n        return\n    n = len(a)\n    a = heapify(a)\n    while n > 1:\n        a[0], a[n-1] = a[n-1], a[0]\n        n -= 1\n        a = heapify(a, 0, n)\n    return a\ndef bucket_sort(a):\n    '''\n    Write a function to sort the array in ascending order by adding each element to the appropriate bucket. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-29.php\n    '''\n    if not a:\n        return\n    n = len(a)\n    num_bins = 10\n    max_element = max(a)\n    min_element = min(a)\n    interval = (max_element - min_element) / num_bins\n    if interval == 0:\n        return a\n    bins = [0] * num_bins\n    for i in range(n):\n        b = int((a[i]-min_element)/interval)\n        if b < num_bins:\n            bins[b] += 1\n    for i in range(num_bins):\n        while bins[i] > 0:\n            a[i] = min_element + i * interval\n            bins[i] -= 1\n    return a\ndef counting_sort(a):\n    '''\n    Write a function to sort the array in ascending order by counting occurrences of each element and putting the counts in the array itself. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-30.php\n    '''\n    if not a:\n        return\n    n = len(a)\n    count = [0] * (n+1)\n    for i in range(n):\n        count[a[i]] += 1\n    i = 0\n    for j in range(n):\n        while count",
        "num_ids": 68
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        return i\n    return i+1\n",
        "num_ids": 46
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = 0\n    r = len(a) - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return l\n",
        "num_ids": 82
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return True if re.match(regex, string) else False\n    # return True if re.search(regex,string) else False\n",
        "num_ids": 35
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if (re.search(regex, string)): \n        return True\n    else: \n        return False\nprint(check_str(\"eat\")) \nprint(check_str(\"A\")) \nprint(check_str(\"B\")) \nprint(check_str(\"E\")) \nprint(check_str(\"I\")) \nprint(check_str(\"O\")) \nprint(check_str(\"U\")) \nprint(check_str(\"T\")) \nprint(check_str(\"F\")) \nprint(check_str(\"X\")) \nprint(check_str(\"N\")) \nprint(check_str(\"Q\")) \nprint(check_str(\"F\")) \nprint(check_str(\"L\")) \nprint(check_str(\"W\")) \nprint(check_str(\"D\")) \nprint(check_str(\"G\")) \nprint(check_str(\"H\")) \nprint(check_str(\"Y\")) \nprint(check_str(\"J\")) \nprint(check_str(\"Z\")) \nprint(check_str(\"P\")) \nprint(check_str(\"S\")) \nprint(check_str(\"K\")) \nprint(check_str(\"R\")) \nprint(check_str(\"X\")) \nprint(check_str(\"C\")) \nprint(check_str(\"N\")) \nprint(check_str(\"V\")) \nprint(check_str(\"B\")) \nprint(check_str(\"M\")) \nprint(check_str(\"Q\")) \nprint(check_str(\"H\")) \nprint(check_str(\"J\")) \nprint(check_str(\"Z\")) \nprint(check_str(\"M\")) \nprint(check_str(\"P\")) \nprint(check_str(\"S\")) \nprint(check_str(\"W\")) \nprint(check_str(\"X\")) \nprint(check_str(\"D\")) \nprint(check_str(\"K\")) \nprint(check_str(\"F\")) \nprint(check_str(\"S\")) \nprint(check_str(\"R\")) \nprint(check_str(\"T\")) \nprint(check_str(\"Y\")) \nprint(check_str(\"B\")) \nprint(check_str(\"Z\")) \nprint(check_str(\"E\")) \nprint(check_str(\"H\")) \nprint(check_str(\"H\")) \nprint(check_str(\"Y\")) \nprint(check_str(\"K\")) \nprint(check_str(\"I\")) \nprint(check_str(\"B\")) \nprint(check_str(\"V\")) \nprint(check_str(\"U\")) \nprint(check_str(\"X\")) \nprint(check_str(\"J\")) \nprint(check_str(\"F\")) \nprint(check_str(\"T\")) \nprint(check_str(\"D\")) \nprint(check_str(\"L\")) \nprint(check_str(\"P\")) \nprint(check_str(\"A\")) \nprint(check_str(\"H\")) \nprint(check_str(\"N\")) \nprint(check_str(\"W\")) \nprint(check_str(\"G\")) \nprint(check_str(\"Y\")) \nprint(check_str(\"C\")) \nprint(check_str(\"V\")) \nprint(check_str(\"P\")) \nprint(check_str(\"A\")) \nprint(check_str(\"Z\")) \nprint(check_str(\"M\")) \nprint(check_str(\"Q\")) \nprint(check_str(\"N\")) \nprint(check_str(\"P\")) \nprint(check_str(\"T\")) \nprint(check_str(\"W\")) \nprint(check_str(\"S\")) \nprint(check_str(\"M\")) \nprint(check_str(\"Y\")) \nprint(check_str(\"H\")) \nprint(check_str(\"V\")) \nprint(check_str(\"Z\")) \nprint(check_str(\"A\")) \nprint(check_str(\"N\")) \nprint(check_str(\"Z\")) \nprint(check_str(\"V\")) \nprint(check_str(\"H\")) \nprint(check_str(\"D\")) \nprint(check_str(\"J\")) \nprint(check_str(\"K\")) \nprint(check_str(\"S\")) \nprint(check_str(\"F\")) \nprint(check_str(\"U\")) \nprint(check_str(\"G\")) \nprint(check_str(\"R\")) \nprint(check_str(\"C\")) \nprint(check_str(\"N\")) \nprint(check_str(\"S\")) \nprint(check_str(\"T\")) \nprint(check_str(\"D\")) \nprint(check_str(\"Y\")) \nprint(check_str(\"S\")) \nprint(check_str(\"R\")) \nprint(check_str(\"Q\")) \nprint(check_str(\"T\")) \nprint(check_str(\"F\")) \nprint(check_str(\"G\")) \nprint(check_str(\"W\")) \nprint(check_str(\"X\")) \nprint(check_str(\"V\")) \nprint(check_str(\"K\")) \nprint(check_str(\"D\")) \nprint(check_str(\"Q\")) \nprint(check_str(\"B\")) \nprint(check_str(\"P\")) \nprint(check_str(\"L\")) \nprint(check_str(\"M\")) \nprint(check_str(\"M\")) \nprint(check_str(\"T\")) \nprint(check_str(\"M\")) \nprint(check_str(\"K\")) \nprint(check_str(\"N\")) \nprint(check_str(\"M\")) \nprint(check_str(\"T\")) \nprint(check_str(\"P\")) \nprint(check_str(\"Z\")) \nprint(check_str(\"U\")) \nprint(check_str(\"L\")) \nprint(check_str(\"P\")) \nprint(check_str(\"K\")) \nprint(check_str(\"Q\")) \nprint(check_str(\"S\")) \nprint(check_str(\"K\")) \nprint(check_str(\"W\")) \nprint(check_str(\"S\")) \nprint(check_str(\"H\")) \nprint(check_str(\"G\")) \nprint(check_str(\"D\")) \nprint(check_str(\"C\")) \nprint(check_str(\"T\")) \nprint(check_str(\"S\")) \nprint(check_str(\"G\")) \nprint(check_str(\"E\")) \nprint(check_str(\"D\")) \nprint(check_str(\"L\")) \nprint(check_str(\"K\")) \nprint(check_str(\"S\")) \nprint(check_str(\"T\")) \nprint(check_str(\"Q\")) \nprint(check_str(\"F\")) \nprint(check_str(\"A\")) \nprint(check_str(\"N\")) \nprint(check_str(\"Z\")) \nprint(check_str(\"K\")) \nprint(check_str(\"C\")) \nprint(check_str(\"U\")) \nprint(check_str(\"F\")) \nprint(check_str(\"T\")) \nprint(check_str(\"K\")) \nprint(check_str(\"W\")) \nprint(check_str(\"N\")) \nprint(check_str(\"T\")) \nprint(check_str(\"D\")) \nprint(check_str(\"W\")) \nprint(check_str(\"S\")) \nprint(check_str(\"T\")) \nprint(check_str(\"X\")) \nprint(check_str(\"K\")) \nprint(check_str(\"C\")) \nprint(check_str(\"H\")) \nprint(check_str(\"T\")) \nprint(check_str(\"F\")) \nprint(check_str(\"N\")) \nprint(check_str(\"Q\")) \nprint(check_str(\"D\")) \nprint(check_str(\"P\")) \nprint(check_str(\"L\")) \nprint(check_str(\"X\")) \nprint(check_str(\"K\")) \nprint(check_str(\"V\")) \nprint(check_str(\"D\")) \nprint(check_str(\"L\")) \nprint(check_str(\"B\")) \nprint(check_str(\"S\")) \nprint(check_str(\"N\")) \nprint(check_str(\"B\")) \nprint(check_str(\"F\")) \nprint(check_str(\"C\")) \nprint(check_str(\"P\")) \nprin",
        "num_ids": 1982
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex,string):\n        return True\n    else:\n        return False",
        "num_ids": 25
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex,string)\n    if(match):\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    x = re.match(regex,string) \n    if x: \n        print(\"String is starting with vowel\") \n    else: \n        print(\"String is not starting with vowel\") \n",
        "num_ids": 50
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex,string): \n        return True\n    else: \n        return False\nif __name__ == '__main__':\n    string = 'y'\n    if check_str(string):\n        print(\"True\")\n    else:\n        print(\"False\")",
        "num_ids": 70
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    \n    #\n    #\n    #    # Method 1\n    #\n    # import re\n    # regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    # match = re.search(regex, string)\n    # if match:\n    #     print('Match 1')\n    # else:\n    #     print('No Match')\n    # \n    # \n    # # Method 2\n    # import re\n    # string = 'aeiouAEIOUA-Za-z0-9_'\n    # if re.match(string, string):\n    #     print('Match 2')\n    # else:\n    #     print('No Match')\n    # \n    # \n    # # Method 3\n    # import re\n    # string = 'aeiouAEIOUA-Za-z0-9_'\n    # if re.match(string, string, re.IGNORECASE):\n    #     print('Match 3')\n    # else:\n    #     print('No Match')\n    # \n    # \n    # # Method 4\n    # import re\n    # string = 'aeiouAEIOUA-Za-z0-9_'\n    # if re.match(string, string, re.I):\n    #     print('Match 4')\n    # else:\n    #     print('No Match')\n    # \n    # \n    # # Method 5\n    # import re\n    # string = 'aeiouAEIOUA-Za-z0-9_'\n    # if re.search(string, string, re.I):\n    #     print('Match 5')\n    # else:\n    #     print('No Match')\n    # \n    # \n    # # Method 6\n    # import re\n    # string = 'aeiouAEIOUA-Za-z0-9_'\n    # match = re.search(string, string, re.I)\n    # if match:\n    #     print('Match 6')\n    # else:\n    #     print('No Match')\n    # \n    # \n    # # Method 7\n    # import re\n    # string = 'aeiouAEIOUA-Za-z0-9_'\n    # match = re.search(string, string, re.I)\n    # if match:\n    #     print('Match 7')\n    # else:\n    #     print('No Match')\n    # \n    # \n    # # Method 8\n    # import re\n    # string = 'aeiouAEIOUA-Za-z0-9_'\n    # match = re.search(string, string, re.I)\n    # if match:\n    #     print('Match 8')\n    # else:\n    #     print('No Match')\n    # \n    # \n    # # Method 9\n    # import re\n    # string = 'aeiouAEIOUA-Za-z0-9_'\n    # match = re.search(string, string, re.I)\n    # if match:\n    #     print('Match 9')\n    # else:\n    #     print('No Match')\n    # \n    # \n    # # Method 10\n    # import re\n    # string = 'aeiouAEIOUA-Za-z0-9_'\n    # match = re.search(string, string, re.I)\n    # if match:\n    #     print('Match 10')\n    # else:\n    #     print('No Match')\n    # \n    # \n    # # Method 11\n    # import re\n    # string = 'aeiouAEIOUA-Za-z0-9_'\n    # match = re.search(string, string, re.I)\n    # if match:\n    #     print('Match 11')\n    # else:\n    #     print('No Match')\n    # \n    # \n    # # Method 12\n    # import re\n    # string = 'aeiouAEIOUA-Za-z0-9_'\n    # match = re.search(string, string, re.I)\n    # if match:\n    #     print('Match 12')\n    # else:\n    #     print('No Match')\n    # \n    # \n    # # Method 13\n    # import re\n    # string = 'aeiouAEIOUA-Za-z0-9_'\n    # match = re.search(string, string, re.I)\n    # if match:\n    #     print('Match 13')\n    # else:\n    #     print('No Match')\n    # \n    # \n    # # Method 14\n    # import re\n    # string = 'aeiouAEIOUA-Za-z0-9_'\n    # match = re.search(string, string, re.I)\n    # if match:\n    #     print('Match 14')\n    # else:\n    #     print('No Match')\n    # \n    # \n    # # Method 15\n    # import re\n    # string = 'aeiouAEIOUA-Za-z0-9_'\n    # match = re.search(string, string, re.I)\n    # if match:\n    #     print('Match 15')\n    # else:\n    #     print('No Match')\n    # \n    # \n    # # Method 16\n    # import re\n    # string = 'aeiouAEIOUA-Za-z0-9_'\n    # match = re.search(string, string, re.I)\n    # if match:\n    #     print('Match 16')\n    # else:\n    #     print('No Match')\n    # \n    # \n    # # Method 17\n    # import re\n    # string = 'aeiouAEIOUA-Za-z0-9_'\n    # match = re.search(string, string, re.I)\n    # if match:\n    #     print('Match 17')\n    # else:\n    #     print('No Match')\n    # \n    # \n    # # Method 18\n    # import re\n    # string = 'aeiouAEIOUA-Za-z0-9_'\n    # match = re.search(string, string, re.I)\n    # if match:\n    #     print('Match 18')\n    # else:\n    #     print('No Match')\n    # \n    # \n    # # Method 19\n    # import re\n    # string = 'aeiouAEIOUA-Za-z0-9_'\n    # match = re.search(string, string, re.I)\n    # if match:\n    #     print('Match 19')\n    # else:\n    #     print('No Match')\n    # \n    # \n    # # Method 20\n    # import re\n    # string = 'aeiouAEIOUA-Za-z0-9_'\n    # match = re.search(string, string, re.I)\n    # if match:\n    #     print('Match 20')\n    # else:\n    #     print('No Match')\n    # \n    # \n    # # Method 21\n    # import re\n    # string = 'aeiouAEIOUA-Za-z0-9_'\n    # match = re.search(string, string, re.I)\n    # if match:\n    #     print('Match 21')\n    # else:\n    #     print('No Match')\n    # \n    # \n    # # Method 22\n    # import re\n    # string = 'aeiouAEIOUA-Za-z0-9_'\n    # match = re.search(string, string, re.I)\n    # if match:\n    #     print('Match 22')\n    # else:\n    #     print('No Match')\n    # \n    # \n    # # Method 23\n    # import re\n    # string = 'aeiouAEIOUA-Za-z0-9_'\n    # match = re.search(string, string, re.I)\n    # if match:\n",
        "num_ids": 1980
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    is_vowel = bool(re.match(regex,string))\n    return is_vowel\n",
        "num_ids": 29
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    \n    # your code here\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex,string):\n        return True\n    else:\n        return False\n",
        "num_ids": 54
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    \n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n",
        "num_ids": 32
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n",
        "num_ids": 31
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    return 1/n + geometric_sum(n-1)\n",
        "num_ids": 28
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n * (n - 1)\n",
        "num_ids": 12
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    assert(n > 1)\n    return geometric_sum_rec(n-1) + 1\n",
        "num_ids": 25
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==0:\n        return 1\n    return geometric_sum(n-1)*n\n",
        "num_ids": 25
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n*(n-1) if n>0 else 0\n",
        "num_ids": 18
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    return n * geometric_sum(n-1)\n",
        "num_ids": 26
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n",
        "num_ids": 30
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1,n+1):\n        # count digit of smallest triangular number with n digits\n        digit = 0\n        while (i-1)*(10**(digit)) > 9:\n            digit += 1\n        print(digit)\n        #index of smallest triangular number with n digits\n        print(int((i-1)*(10**(digit))))\n        break\nfind_Index(3)\ndef sum_of_digits(n):\n    '''\n    Write a python function to calculate sum of digits of any number in range.\n    '''\n    sum = 0\n    while n:\n        sum += n%10\n        n = n//10\n    return sum\nsum_of_digits(12)\ndef sum_of_digits_recursive(n):\n    '''\n    Write a python function to calculate sum of digits of any number in range.\n    '''\n    if n <= 9:\n        return n\n    else:\n        return n%10 + sum_of_digits_recursive(n//10)\nsum_of_digits_recursive(12)\ndef sum_of_digits_iterative(n):\n    '''\n    Write a python function to calculate sum of digits of any number in range.\n    '''\n    if n <= 9:\n        return n\n    else:\n        n = n%10\n        return n + sum_of_digits_iterative(n//10)\nsum_of_digits_iterative(12)\ndef print_number(n):\n    '''\n    Write a python function to print first n positive numbers in a new line using for loop\n    '''\n    i = 0\n    while i < n:\n        i += 1\n        print(i,end =\" \")\n    print()\nprint_number(10)\ndef print_number_using_for(n):\n    '''\n    Write a python function to print first n positive numbers in a new line using for loop\n    '''\n    i = 0\n    for i in range(1,n+1):\n        i += 1\n        print(i,end =\" \")\n    print()\nprint_number_using_for(10)\ndef print_number_using_while(n):\n    '''\n    Write a python function to print first n positive numbers in a new line using while loop\n    '''\n    i = 0\n    while i < n:\n        i += 1\n        print(i,end =\" \")\n    print()\nprint_number_using_while(10)\ndef print_number_using_recursion(n):\n    '''\n    Write a python function to print first n positive numbers in a new line using recursion\n    '''\n    if n <= 1:\n        return\n    else:\n        print(n,end =\" \")\n        print_number_using_recursion(n-1)\n    print()\nprint_number_using_recursion(10)\ndef factorial(n):\n    '''\n    Write a python function to calculate factorial of a number using recursion.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n-1)\nfactorial(5)\ndef factorial_recursive(n):\n    '''\n    Write a python function to calculate factorial of a number using recursion.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial_recursive(n-1)\nfactorial_recursive(5)\ndef print_num(n):\n    '''\n    Write a python function to print first n positive numbers in a new line using recursion\n    '''\n    if n <= 1:\n        return\n    else:\n        print(n,end =\" \")\n        print_num(n-1)\n    print()\nprint_num(5)\ndef print_num_using_recursion(n):\n    '''\n    Write a python function to print first n positive numbers in a new line using recursion\n    '''\n    if n <= 1:\n        return\n    else:\n        print(n,end =\" \")\n        print_num_using_recursion(n-1)\n    print()\nprint_num_using_recursion(5)\ndef power(x,n):\n    '''\n    Write a python function to calculate nth power of a number.\n    '''\n    if n <= 0:\n        return 1\n    else:\n        return x * power(x,n-1)\nprint(power(2,3))\ndef power_recursive(x,n):\n    '''\n    Write a python function to calculate nth power of a number.\n    '''\n    if n <= 0:\n        return 1\n    else:\n        return x * power_recursive(x,n-1)\nprint(power_recursive(2,3))\ndef reverse_string(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\nreverse_string(\"yarrr\")\ndef reverse_string_recursive(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    if s == \"\":\n        return \"\"\n    else:\n        return s[-1] + reverse_string_recursive(s[:-1])\nreverse_string_recursive(\"yarrr\")\ndef checkPalindrome(s):\n    '''\n    Write a python function to check if a given string is palindrome or not.\n    '''\n    if s == s[::-1]:\n        print(\"Palindrome\")\n    else:\n        print(\"Not a Palindrome\")\ncheckPalindrome(\"abcdcba\")\ndef checkPalindrome_recursive(s):\n    '''\n    Write a python function to check if a given string is palindrome or not.\n    '''\n    if s == s[::-1]:\n        print(\"Palindrome\")\n    else:\n        print(\"Not a Palindrome\")\ncheckPalindrome_recursive(\"abcdcba\")\ndef count_chars(s,c):\n    '''\n    Write a python function to count the number of characters present in a string.\n    '''\n    count = 0\n    for i in s:\n        if i == c:\n            count += 1\n    return count\ncount_chars(\"abcdefg\",'d')\ndef count_chars_recursive(s,c):\n    '''\n    Write a python function to count the number of characters present in a string.\n    '''\n    if s == \"\":\n        return 0\n    if s[0] == c:\n        return 1 + count_chars_recursive(s[1:],c)\n    else:\n        return count_chars_recursive(s[1:],c)\ncount_chars_recursive(\"abcdefg\",'d')\ndef count_chars_using_count_recursive(s,c):\n    '''\n    Write a python function to count the number of characters present in a string.\n    '''\n    count = 0\n    for i in s:\n        if i == c:\n            count += 1\n    return count\nprint(count_chars_using_count_recursive(\"abcdefg\",'d'))\ndef count_chars_using_count_recursive2(s,c):\n    '''\n    Write a python function to count the number of characters present in a string.\n    '''\n    if s == \"\":\n        return 0\n    if s[0] == c:\n        return 1 + count_chars_recursive2(s[1:],c)\n    else:\n        return count_chars_recursive2(s[1:],c)\ncount_chars_using_count_recursive2(\"abcdefg\",'d')\ndef count_chars_using_count_recursive2(s,c):\n    count = 0\n    for i in s:\n        if i == c:\n            count += 1\n    return count\nprint(count_chars_using_count_recursive2(\"abcdefg\",'d'))\ndef count_chars_using_count_recursive2(s,c):\n    count = 0\n    for i in s:\n        if i == c:\n            count += 1\n    return count\nprint",
        "num_ids": 207
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1, n):\n        if n*(n+1)//2 < i:\n            break\n    return i \n",
        "num_ids": 36
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    ans = math.ceil(math.sqrt(n))\n    if (ans*(ans+1) > n):\n        return -1\n    else:\n        return (ans-1)\n",
        "num_ids": 49
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n > 1:\n        x = 1\n        while x <= n:\n            x = x + 1\n    else:\n        x = 1\n    return x \n        \ndef main():\n    print(\"--------------------------------------------------\")\n    print(\"Find index of smallest triangular number with n digits.\")\n    n = int(input(\"Enter the length of the number: \"))\n    print(\"--------------------------------------------------\")\n    x = find_Index(n)\n    print(\"The index of the smallest triangular number with \" + str(n) + \" digits is \" + str(x))\n    print(\"--------------------------------------------------\")\n",
        "num_ids": 138
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = n-1\n    if(n%3 == 0):\n        return (int)(n/3)\n    else:\n        return n%3\n",
        "num_ids": 39
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    while n!= 0:\n        x = n-1\n        y = n-2\n        while y < x:\n            z = x - y\n            if (n*(n+1)//2) == z:\n                print(\"The index of\", n, \"is : \", y)\n                return y\n            else:\n                y = y-1\n                z = x - y\n                if (n*(n+1)//2) < z:\n                    print(\"The index of\", n, \"is : \", y)\n                    return y\n                else:\n                    x = y\n                    y = n-2\n                    z = x - y\n                    if (n*(n+1)//2) < z:\n                        print(\"The index of\", n, \"is : \", y)\n                        return y\n                    else:\n                        x = y\n                        y = n-2\n                        z = x - y\n                        if (n*(n+1)//2) < z:\n                            print(\"The index of\", n, \"is : \", y)\n                            return y\n                        else:\n                            x = y\n                            y = n-2\n                            z = x - y\n                            if (n*(n+1)//2) < z:\n                                print(\"The index of\", n, \"is : \", y)\n                                return y\n                            else:\n                                print(\"The index of\", n, \"is : \", y)\n                                return y\n",
        "num_ids": 342
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    x = n-1\n    y = x+1\n    while x>0:\n        while y<=x:\n            if n*(x-y)+y == n:\n                return x\n            y+=1\n        x-=1\n        y = x+1\n    return -1\ndef find_Index_2(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    x = n-1\n    while x>=0:\n        y = 1\n        z = 1\n        while y<=x:\n            z = z*(x-y) + y\n            y+=1\n        if n*(x-y)+y == z:\n            return x\n        x-=1\n    return -1\n",
        "num_ids": 90
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # function to find the index of \n    # smallest triangular number with n digits \n    def find_Index(n): \n    \n        # finding the triangular number \n        # with n digits \n        tri_num = int(((pow(2, n) * 3) / 2))\n        \n        # since triangular numbers are \n        # monotonically increasing \n        # (increasing from 1 to number itself) \n        # and we need the index to be \n        # greater than the number itself \n        # (since the smaller numbers are \n        # greater than the larger numbers) \n        # we need to check the smaller \n        # numbers for larger index \n        for i in range(1, tri_num + 1): \n            if i > n: \n                # since the last number is \n                # greater than the last number, \n                # we break the loop \n                break\n            # else we need to find the index \n            # to find the smallest triangular number \n            # with n digits \n            else: \n                index = i \n                \n        return index \n    \n    # Driver function to test \n    # the above function \n    n = 3\n    print (\"The index of smallest triangle number with\", \n                    n, \"digits is\", \n                    find_Index(n)) \n    ",
        "num_ids": 314
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = str(n)\n    # index\n    i = int((math.sqrt(2)**(len(n) -1)) + 1)\n    if (len(n) == 1):\n        return (i)\n    # loop to find\n    for j in range(len(n)-1):\n        i = i - int(n[j])\n        if i <= 0:\n            return (j)\n",
        "num_ids": 100
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = len(str(n))\n    if n == 2:\n        return 0\n    if n == 3:\n        return 1\n    if n == 4:\n        return 2\n    if n == 5:\n        return 3\n    if n == 6:\n        return 4\n    if n == 7:\n        return 5\n    if n == 8:\n        return 6\n    if n == 9:\n        return 7\n    if n == 10:\n        return 8\n    if n == 11:\n        return 9\n    if n == 12:\n        return 10\n    if n == 13:\n        return 11\n    if n == 14:\n        return 12\n    if n == 15:\n        return 13\n    if n == 16:\n        return 14\n    if n == 17:\n        return 15\n    if n == 18:\n        return 16\n    if n == 19:\n        return 17\n    if n == 20:\n        return 18\n    if n == 21:\n        return 19\n    if n == 22:\n        return 20\n    if n == 23:\n        return 21\n    if n == 24:\n        return 22\n    if n == 25:\n        return 23\n    if n == 26:\n        return 24\n    if n == 27:\n        return 25\n    if n == 28:\n        return 26\n    if n == 29:\n        return 27\n    if n == 30:\n        return 28\n    if n == 31:\n        return 29\n    if n == 32:\n        return 30\n    if n == 33:\n        return 31\n    if n == 34:\n        return 32\n    if n == 35:\n        return 33\n    if n == 36:\n        return 34\n    if n == 37:\n        return 35\n    if n == 38:\n        return 36\n    if n == 39:\n        return 37\n    if n == 40:\n        return 38\n    if n == 41:\n        return 39\n    if n == 42:\n        return 40\n    if n == 43:\n        return 41\n    if n == 44:\n        return 42\n    if n == 45:\n        return 43\n    if n == 46:\n        return 44\n    if n == 47:\n        return 45\n    if n == 48:\n        return 46\n    if n == 49:\n        return 47\n    if n == 50:\n        return 48\n    if n == 51:\n        return 49\n    if n == 52:\n        return 50\n    if n == 53:\n        return 51\n    if n == 54:\n        return 52\n    if n == 55:\n        return 53\n    if n == 56:\n        return 54\n    if n == 57:\n        return 55\n    if n == 58:\n        return 56\n    if n == 59:\n        return 57\n    if n == 60:\n        return 58\n    if n == 61:\n        return 59\n    if n == 62:\n        return 60\n    if n == 63:\n        return 61\n    if n == 64:\n        return 62\n    if n == 65:\n        return 63\n    if n == 66:\n        return 64\n    if n == 67:\n        return 65\n    if n == 68:\n        return 66\n    if n == 69:\n        return 67\n    if n == 70:\n        return 68\n    if n == 71:\n        return 69\n    if n == 72:\n        return 70\n    if n == 73:\n        return 71\n    if n == 74:\n        return 72\n    if n == 75:\n        return 73\n    if n == 76:\n        return 74\n    if n == 77:\n        return 75\n    if n == 78:\n        return 76\n    if n == 79:\n        return 77\n    if n == 80:\n        return 78\n    if n == 81:\n        return 79\n    if n == 82:\n        return 80\n    if n == 83:\n        return 81\n    if n == 84:\n        return 82\n    if n == 85:\n        return 83\n    if n == 86:\n        return 84\n    if n == 87:\n        return 85\n    if n == 88:\n        return 86\n    if n == 89:\n        return 87\n    if n == 90:\n        return 88\n    if n == 91:\n        return 89\n    if n == 92:\n        return 90\n    if n == 93:\n        return 91\n    if n == 94:\n        return 92\n    if n == 95:\n        return 93\n    if n == 96:\n        return 94\n    if n == 97:\n        return 95\n    if n == 98:\n        return 96\n    if n == 99:\n        return 97\n    if n == 100:\n        return 98\n    if n == 101:\n        return 99\n    if n == 102:\n        return 100\n    if n == 103:\n        return 101\n    if n == 104:\n        return 102\n    if n == 105:\n        return 103\n    if n == 106:\n        return 104\n    if n == 107:\n        return 105\n    if n == 108:\n        return 106\n    if n == 109:\n        return 107\n    if n == 110:\n        return 108\n    if n == 111:\n        return 109\n    if n == 112:\n        return 110\n    if n == 113:\n        return 111\n    if n == 114:\n        return 112\n    if n == 115:\n        return 113\n    if n == 116:\n        return 114\n    if n == 117:\n        return 115\n    if n == 118:\n        return 116\n    if n == 119:\n        return 117\n    if n == 120:\n        return 118\n    if n == 121:\n        return 119\n    if n == 122:\n        return 120\n    if n == 123:\n        return 121\n    if n == 124:\n        return 122\n    if n == 125:\n        return 123\n    if n == 126:\n        return 124\n    if n == 127:\n        return 125\n    if n == 128:\n        return 126\n    if n == 129:\n        return 127\n    if n == 130:\n        return 128\n    if n == 131:\n        return 129\n    if n == 132:\n        return 130\n    if n == 133:\n        return 131\n    if n == 134:\n        return 132\n    if n == 135:\n        return 133\n    if n == 136:\n        return 134\n    if n == 137:\n        return 135\n    if n == 138:\n        return 136\n    if n == 139:\n        return 137\n    if n == 140:\n        return 138\n    if n == 141:\n        return 139\n    if n == 142:\n        return 140\n    if n == 143:\n        return 141\n    if n == 144:\n        return 142\n    if n == 145:\n        return 143\n    if n == 146:\n        return 144\n    if n == 147:\n        return 145\n    if n == 148:\n        return 146\n    if n == 149:\n        return 147\n    if n == 150:\n        return 148\n    if n == 151:\n        return 149\n    if n == 152:\n        return 150\n    if n == 153:\n        return 151\n    if n == 154:\n        return 152\n    if n == 155:\n        return 153\n    if n == 156:\n        return 154\n    if n == 157:\n        return 155\n    if n == 158:\n        return 156\n    if n == 159:\n        return 157\n    if n == 160:\n        return 158\n    if n == 161:\n        return 159\n    if n == 162:\n        return 160\n    if n == 163:\n        return 161\n    if n == 164:\n        return 162\n    if n == 165:\n        return 163\n    if n == 166:\n        return 164\n    if n == 167:\n        return 165\n    if n == 168:\n        return 166\n    if n == 169:\n        return 167\n    if n == 170:\n        return 168\n    if n == 171:\n        return 169\n    if n == 172:\n        return 170\n    if n == 173:\n        return 171\n    if n == 174:\n        return 172\n    if n == 175:\n        return 173\n    if n == 176:\n        return 174\n    if n == 177:\n        return 175\n    if n == 178:\n        return 176\n    if n == 179:\n        return 177\n    if n == 180:\n        return 178",
        "num_ids": 1980
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dictionary = dict()\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        if key in dictionary.keys():\n            dictionary[key].append(test_tup[i+1])\n        else:\n            dictionary[key] = [test_tup[i+1]]\n    return dictionary\n",
        "num_ids": 91
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    \n    test_dict = {}\n    \n    for i in range(len(test_tup)):\n        if i==0:\n            test_dict[test_tup[0]] = test_tup[1]\n        else:\n            test_dict[test_tup[i]] = test_tup[i-1]\n    \n    return test_dict\n    ",
        "num_ids": 92
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(0, len(test_tup), 2):\n        d[test_tup[i]] = test_tup[i+1]\n    return d\n",
        "num_ids": 50
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i,j in zip(test_tup[0::2],test_tup[1::2]):\n        d[i] = j\n    return d\n",
        "num_ids": 47
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    my_dict = {}\n    i = 0\n    while i < len(test_tup):\n        my_dict[test_tup[i]] = test_tup[i+1]\n        i += 2\n    return my_dict\n",
        "num_ids": 60
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_1 = dict(test_tup)\n    print(dict_1)\n    return dict_1\n",
        "num_ids": 29
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(0,len(test_tup),2):\n        result[test_tup[i]] = test_tup[i+1]\n    return result\n",
        "num_ids": 50
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_tup = {i : test_tup[i] for i in range(len(test_tup))}\n    return dict_tup\n",
        "num_ids": 39
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dictionary = dict(zip(test_tup[::2], test_tup[1::2]))\n    return dictionary\n",
        "num_ids": 33
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dct = {}\n    if len(test_tup) % 2!= 0:\n        return False\n    for i in range(0,len(test_tup),2):\n        dct[test_tup[i]] = test_tup[i+1]\n    return dct\n",
        "num_ids": 73
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if (len(s) == 0):\n        return True\n    if (s[0]!= s[-1]):\n        return False\n    return all_Characters_Same(s[1:-1])\n",
        "num_ids": 52
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) <= 1\n",
        "num_ids": 13
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = 0\n    for i in range(len(s)-1) :\n        if s[i] == s[i+1] :\n            count += 1\n        else :\n            return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s)==0 : return False\n    c = s[0]\n    for i in range(1,len(s)):\n        if c!= s[i] : return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    l = list(s)\n    if l.count(l[0]) == len(l) :\n        print(\"All characters are same\")\n    else :\n        print(\"All characters are not same\")\n",
        "num_ids": 50
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0 :\n        return True\n    else :\n        if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4] and s[4] == s[5] and s[5] == s[6] :\n            return True\n        else :\n            return False\n",
        "num_ids": 95
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s1=s.upper()\n    return len(set(s1))<2\n",
        "num_ids": 23
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    \n    if len(s) == 0:\n        return True\n    \n    if s[0]!= s[-1]:\n        return False\n    \n    return all_Characters_Same(s[1:-1])\n",
        "num_ids": 55
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s[0] == s[-1]:\n        return True\n    else:\n        return False\ndef all_Chars_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            return True\n        else:\n            return False\n",
        "num_ids": 41
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0 :\n        return False\n    if len(s) == 1 :\n        return True\n    if s[0] == s[1] :\n        return all_Characters_Same(s[1:])\n    else :\n        return False\n",
        "num_ids": 65
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1.0/2.0)*side**2\n",
        "num_ids": 17
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/2)*side**2\n    return area\n    # return area\ndef area_pyramid(height,base):\n    '''\n    Write a function to caluclate the area of a pyramid.\n    '''\n    area = (height*base)/2\n    return area\n    # return area\ndef area_triangle(side_a,side_b,side_c):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    area = side_a*side_b*0.5\n    return area\n    # return area\ndef area_square(side):\n    '''\n    Write a function to caluclate the area of a square.\n    '''\n    area = side**2\n    return area\n    # return area\ndef area_rectangle(length,breadth):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    area = length*breadth\n    return area\n    # return area\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    area = math.pi*radius**2\n    return area\n    # return area\ndef area_trapezoid(side_a,side_b,height):\n    '''\n    Write a function to caluclate the area of a trapezoid.\n    '''\n    area = (0.5*(side_a+side_b)*height)\n    return area\n    # return area\ndef area_parallelogram(base,height):\n    '''\n    Write a function to caluclate the area of a parallelogram.\n    '''\n    area = base*height\n    return area\n    # return area\ndef area_trapezoid(side_a,side_b,height):\n    '''\n    Write a function to caluclate the area of a trapezoid.\n    '''\n    area = (0.5*(side_a+side_b)*height)\n    return area\n    # return area\ndef area_trapezoid(side_a,side_b,height):\n    '''\n    Write a function to caluclate the area of a trapezoid.\n    '''\n    area = (0.5*(side_a+side_b)*height)\n    return area\n    # return area\ndef area_parallelogram(base,height):\n    '''\n    Write a function to caluclate the area of a parallelogram.\n    '''\n    area = base*height\n    return area\n    # return area\ndef area_triangle(side_a,side_b,side_c):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    area = (1/2)*side_a*side_b\n    return area\n    # return area\ndef area_square(side):\n    '''\n    Write a function to caluclate the area of a square.\n    '''\n    area = side**2\n    return area\n    # return area\ndef area_rectangle(length,breadth):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    area = length*breadth\n    return area\n    # return area\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    area = math.pi*radius**2\n    return area\n    # return area\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    area = math.pi*radius**2\n    return area\n    # return area\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    area = math.pi*radius**2\n    return area\n    # return area\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    area = math.pi*radius**2\n    return area\n    # return area\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    area = math.pi*radius**2\n    return area\n    # return area\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    area = math.pi*radius**2\n    return area\n    # return area\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    area = math.pi*radius**2\n    return area\n    # return area\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    area = math.pi*radius**2\n    return area\n    # return area\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    area = math.pi*radius**2\n    return area\n    # return area\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    area = math.pi*radius**2\n    return area\n    # return area\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    area = math.pi*radius**2\n    return area\n    # return area\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    area = math.pi*radius**2\n    return area\n    # return area\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    area = math.pi*radius**2\n    return area\n    # return area\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    area = math.pi*radius**2\n    return area\n    # return area\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    area = math.pi*radius**2\n    return area\n    # return area\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    area = math.pi*radius**2\n    return area\n    # return area\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    area = math.pi*radius**2\n    return area\n    # return area\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    area = math.pi*radius**2\n    return area\n    # return area\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    area = math.pi*radius**2\n    return area\n    # return area\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    area = math.pi*radius**2\n    return area\n    # return area\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    area = math.pi*radius**2\n    return area\n    # return area\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    area = math.pi*radius**2\n    return area\n    # return area\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    area = math.pi*radius**2\n    return area\n    # return area\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    area = math.pi*radius**2\n    return area\n    # return area\ndef area_circl",
        "num_ids": 28
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3)/12*side**2\n",
        "num_ids": 17
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 1/6*(3*side**2-math.sqrt(3)*side**4)/math.sqrt(2)\n    return area\n    \ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    area = side**3\n    return area\n",
        "num_ids": 13
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    side_sqrt = math.sqrt(3)\n    # Calculate the base of the tetrahedron\n    base = side * side_sqrt\n    # Calculate the height of the tetrahedron\n    height = side_sqrt * side_sqrt\n    # Calculate the height of the square\n    square_height = side_sqrt * side_sqrt\n    # Calculate the height of the square\n    square_width = side * side_sqrt\n    # Calculate the height of the square\n    square_width_sqrt = side * side_sqrt\n    # Calculate the area of the square\n    square_area = square_width * square_height\n    # Calculate the area of the square\n    square_area_sqrt = square_width_sqrt * square_height\n    # Calculate the area of the square\n    square_area_2 = square_width_sqrt * square_width_sqrt\n    # Calculate the area of the square\n    square_area_3 = square_height * square_width\n    # Calculate the area of the square\n    square_area_4 = square_height * square_height\n",
        "num_ids": 270
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side**2\n    b = (side**2)/6\n    c = side**2/2\n    s = (a + b + c)\n    return s\n",
        "num_ids": 43
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    #side = side\n    side = side / 2\n    side *= math.sqrt(3)\n    return side * side * side\n",
        "num_ids": 35
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    def square(side):\n        return side**2\n    s = side**2/2\n    print(s)\n    return square(s)\n",
        "num_ids": 37
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side**3\n    b = side**2\n    c = side**2/2\n    s = 2*a+b+c\n    s = s**0.5\n    return s\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    a = side**3\n    return a\ndef area_sphere(radius):\n    '''\n    Write a function to caluclate the area of a sphere.\n    '''\n    return radius**2*math.pi\ndef area_cylinder(radius,height):\n    '''\n    Write a function to caluclate the area of a cylinder.\n    '''\n    return math.pi*radius*radius*height\ndef area_cone(radius,height):\n    '''\n    Write a function to caluclate the area of a cone.\n    '''\n    return math.pi*radius*radius*height/3\n",
        "num_ids": 16
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    #return (3*side**2)/2\n    #return math.sqrt(3)*side**3/4\n    return (1/3)*side**3\n",
        "num_ids": 41
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list) == 0:\n        return list\n    n = len(list)\n    for i in range(n-1, 0, -1):\n        list[i] = list[i-1]\n    list[0] = m\n    return list\n",
        "num_ids": 65
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    temp = list[-1]\n    for i in range(n-1, 0, -1):\n        list[i] = list[i-1]\n    list[0] = temp\n    return list\n",
        "num_ids": 60
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list_length = len(list)\n    if list_length == 0:\n        return list\n    if m == list_length:\n        return list\n    else:\n        for i in range(m):\n            temp = list[0]\n            list[0] = list[list_length - 1]\n            list[list_length - 1] = temp\n        return list\n",
        "num_ids": 90
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        list.append(list.pop(0))\n    return list\n",
        "num_ids": 27
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        list[0], list[-1] = list[-1], list[0]\n        list.pop()\n    return list\n",
        "num_ids": 42
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    if m <= n:\n        for i in range(m):\n            list[i] = list[n-i-1]\n    return list\n",
        "num_ids": 45
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        list.append(list.pop(0))\n",
        "num_ids": 23
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    x = list[m:] + list[:m]\n    return x\n",
        "num_ids": 28
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list) > m:\n        list = list[m:] + list[:m]\n    return list\n    \n",
        "num_ids": 32
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list[:m], list[m:] = list[-m:], list[:-m]\n    print(list)\n",
        "num_ids": 31
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return False\n    return True\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        print(\"True\")\n    else:\n        print(\"False\")\n",
        "num_ids": 28
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    assert type(test_tup) is tuple\n    for i in test_tup:\n        assert type(i) is int or float or str or bool\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n",
        "num_ids": 64
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False\n",
        "num_ids": 29
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    flag = True\n    for i in test_tup:\n        if i is None:\n            flag = False\n    return flag\n",
        "num_ids": 33
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    flag = False\n    for i in test_tup:\n        if i == None:\n            flag = True\n            break\n    return flag\n",
        "num_ids": 36
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(ele==None for ele in test_tup):\n        return True\n    else:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return test_tup.count(None) == 0\n",
        "num_ids": 16
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup.count(None) > 0:\n        print(test_tup)\n        return True\n    else:\n        return False\n",
        "num_ids": 38
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum, endnum+1):\n        d=lambda x:True if (i%x==0) else False\n        if all([d(int(str(i)[0]))==True,d(int(str(i)[1]))==True,d(int(str(i)[2]))==True,d(int(str(i)[3]))==True,d(int(str(i)[4]))==True,d(int(str(i)[5]))==True,d(int(str(i)[6]))==True,d(int(str(i)[7]))==True,d(int(str(i)[8]))==True,d(int(str(i)[9]))==True]):\n            print(i)\n",
        "num_ids": 187
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: True if x % 10 == 0 or any(x % (y * 10) == 0 for y in range(1, 10)) else False, range(startnum, endnum + 1)))\n",
        "num_ids": 53
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    numbers = []\n    for num in range(startnum, endnum + 1):\n        if all(num % d == 0 for d in range(2,num)):\n            numbers.append(num)\n    return numbers\n",
        "num_ids": 56
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum,endnum+1):\n        if i == int(''.join(filter(str.isdigit, str(i)))):\n            yield i\n",
        "num_ids": 45
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def checkdivisible(num):\n        return all([num % int(i) == 0 for i in str(num)])\n    return list(filter(checkdivisible, range(startnum, endnum+1)))\n",
        "num_ids": 53
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    div_by_digits = lambda x: list(filter(lambda y: x%y==0, range(1,10)))\n    return list(range(startnum,endnum+1))\n",
        "num_ids": 48
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return lambda x: set(i for i in range(startnum, endnum) if i % int(str(i)[::-1]) == 0)\n",
        "num_ids": 38
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # initialise range as an empty list\n    number_list = []\n    \n    for i in range(startnum, endnum):\n        # If any digit in the number is a divisor, then it is not divisible by any other number.\n        if any(i % int(x) == 0 for x in str(i)):\n            number_list.append(i)\n    \n    return number_list\n",
        "num_ids": 99
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: True if all(x % int(y) == 0 for y in str(x)) else False, range(startnum, endnum)))\n",
        "num_ids": 42
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum, endnum):\n        if i % (int(str(i)[1])*100) == 0:\n            print(i, end ='')\n    print()\n",
        "num_ids": 49
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Your code goes here\n    if a > 360:\n        return None\n    return math.pi * r ** 2 * (a/360)\n",
        "num_ids": 36
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # calculate the area\n    if a > 360:\n        return None\n    else:\n        return (a * math.pi * math.pow(r,2))/360\n",
        "num_ids": 44
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    angle = math.radians(a)\n    radius = math.sqrt(r*r + a*a)\n    if angle < 0:\n        return None\n    return math.pi * radius * radius * math.cos(angle)\n",
        "num_ids": 58
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r < 0:\n        return None\n    if a > 360:\n        return None\n    if a == 0:\n        return 0.5*r*r\n    if a == 90 or a == 270:\n        return math.pi*r*r\n    else:\n        return math.pi*r*r*math.sin(math.pi/180*a)\n    \nprint(sector_area(0,180))\nprint(sector_area(1,0))\nprint(sector_area(-1,90))\nprint(sector_area(-1,360))\nprint(sector_area(1,360))\n",
        "num_ids": 146
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return round(r**2*math.sin(math.radians(a))/2,2)\n    \ndef triangle_area(base,height):\n    '''\n    Write a function to find area of a triangle. The function takes the base and height as inputs. Function should return None if the height is greater than base.\n    '''\n    if height > base:\n        return None\n    else:\n        return round(base*height/2,2)\n",
        "num_ids": 30
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a <=360:\n        #calculating area of the sector\n        sector_area = math.pi*(r**2)*(a/360)\n        print(sector_area)\n        return sector_area\n    else:\n        print(\"Sector can not be formed\")\n        return None\nsector_area(1,10)\nsector_area(1,360)\nsector_area(1,0)\n",
        "num_ids": 99
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    else:\n        return math.pi*r**2*a/180\n",
        "num_ids": 32
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return math.pi*(r**2)*(a/360)\n",
        "num_ids": 19
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r == None:\n        return 0\n    elif a == None:\n        return 0\n    elif (r >= a and r <= 180 and a <= 360) or (r <= 0 and a >= 0 and a <= 360) or (a >= 0 and a <= 180 and r <= 360):\n        return math.pi * r**2\n    elif r < a:\n        return None\n    else:\n        return 0\ndef check_sum(l):\n    '''\n    Write a function to check whether a list contains all unique elements.\n    '''\n    if len(l) == 0:\n        return False\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return False\n    return True\ndef product_sum(l):\n    '''\n    Write a function to calculate the sum of the elements in a list.\n    '''\n    if len(l) == 0:\n        return 0\n    sum_num = 0\n    for num in l:\n        sum_num += num\n    return sum_num\ndef product_sum_itr(l):\n    '''\n    Write a function to calculate the sum of the elements in a list.\n    '''\n    if len(l) == 0:\n        return 0\n    curr_num = l[0]\n    for num in l:\n        curr_num = curr_num * num\n    return curr_num\ndef product_of_list(l):\n    '''\n    Write a function to calculate the product of the elements in a list.\n    '''\n    if len(l) == 0:\n        return 1\n    curr_prod = 1\n    for num in l:\n        curr_prod *= num\n    return curr_prod\ndef product_of_list_itr(l):\n    '''\n    Write a function to calculate the product of the elements in a list.\n    '''\n    if len(l) == 0:\n        return 1\n    curr_prod = l[0]\n    for num in l:\n        curr_prod *= num\n    return curr_prod\ndef list_reverse(l):\n    '''\n    Write a function that reverses the elements of a given list.\n    '''\n    if len(l) == 0:\n        return None\n    for i in range(len(l)//2):\n        temp = l[i]\n        l[i] = l[len(l)-1-i]\n        l[len(l)-1-i] = temp\n    return l\ndef list_reverse_itr(l):\n    '''\n    Write a function that reverses the elements of a given list.\n    '''\n    if len(l) == 0:\n        return None\n    curr_elem = 0\n    for i in range(len(l)//2):\n        l[curr_elem],l[len(l)-1-i] = l[len(l)-1-i],l[curr_elem]\n        curr_elem += 1\n    return l\ndef reverse_order_of_list(l):\n    '''\n    Write a function to reverse the order of a given list.\n    '''\n    if len(l) == 0:\n        return None\n    prev = None\n    curr = l[0]\n    while curr!= None:\n        temp = curr.next\n        curr.next = prev\n        prev = curr\n        curr = temp\n    return prev\ndef reverse_order_of_list_itr(l):\n    '''\n    Write a function to reverse the order of a given list.\n    '''\n    if len(l) == 0:\n        return None\n    prev = None\n    curr = l[len(l)-1]\n    for i in range(len(l)-2,-1,-1):\n        temp = curr.next\n        curr.next = prev\n        prev = curr\n        curr = temp\n    l[0].next = prev\n    return prev\ndef insert_at_middle(l,elem):\n    '''\n    Write a function to insert an element in the middle of a given list.\n    '''\n    if len(l) == 0:\n        return None\n    prev = None\n    curr = l[0]\n    for i in range(len(l)-1):\n        temp = curr.next\n        curr.next = prev\n        prev = curr\n        curr = temp\n    prev.next = elem\n    elem.next = curr\n    return l\ndef insert_at_middle_itr(l,elem):\n    '''\n    Write a function to insert an element in the middle of a given list.\n    '''\n    if len(l) == 0:\n        return None\n    prev = None\n    curr = l[len(l)-1]\n    for i in range(len(l)-2,-1,-1):\n        temp = curr.next\n        curr.next = prev\n        prev = curr\n        curr = temp\n    prev.next = elem\n    elem.next = curr\n    return l\ndef remove_duplicates(l):\n    '''\n    Write a function to remove duplicates from a given list.\n    '''\n    if len(l) == 0:\n        return None\n    curr = l[0]\n    for elem in l:\n        if elem!= curr:\n            curr = elem\n            l[l.index(elem)] = curr\n    return l\ndef remove_duplicates_itr(l):\n    '''\n    Write a function to remove duplicates from a given list.\n    '''\n    if len(l) == 0:\n        return None\n    curr = l[0]\n    for elem in l:\n        if elem!= curr:\n            curr = elem\n            l[l.index(elem)] = curr\n    return l\ndef reverse_linked_list(l):\n    '''\n    Write a function to reverse the order of a given linked list.\n    '''\n    if l == None or l.next == None:\n        return None\n    else:\n        l.val,l.next.val = l.next.val,l.val\n        l.next = l.next.next\n        return l\ndef reverse_linked_list_itr(l):\n    '''\n    Write a function to reverse the order of a given linked list.\n    '''\n    if l == None or l.next == None:\n        return None\n    else:\n        l.val,l.next.val = l.next.val,l.val\n        l.next = l.next.next\n        return l\ndef is_linked_list_palindrome(l):\n    '''\n    Write a function to check whether a linked list is a palindrome or not.\n    '''\n    if l == None or l.next == None:\n        return True\n    else:\n        curr = l\n        while curr.next!= None:\n            curr = curr.next\n        curr = l\n        while curr.next!= None:\n            temp = curr.next\n            curr.next = temp.next\n            temp.next = curr\n            curr = temp\n        if l.next == None:\n            curr = l\n            while curr.next!= None:\n                temp = curr.next\n                curr.next = temp.next\n                temp.next = curr\n                curr = temp\n            curr = l\n        while curr.next!= None:\n            if curr.val!= curr.next.val:\n                return False\n            curr = curr.next\n        return True\ndef is_linked_list_palindrome_itr(l):\n    '''\n    Write a function to check whether a linked list is a palindrome or not.\n    '''\n    if l == None or l.next == None:\n        return True\n    else:\n        curr = l\n        while curr.next!= None:\n            curr = curr.next\n        curr = l\n        while curr.next!= None:\n            temp = curr.next\n            curr.next = temp.next\n            temp.next = curr\n            curr = temp\n        if l.nex",
        "num_ids": 103
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a >= 360:\n        return None\n    return math.pi * (a/2) * (r * r)\n",
        "num_ids": 31
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n",
        "num_ids": 26
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    def lcs(x, y, z): \n        # find length of the strings \n        m = len(x) \n        n = len(y) \n        o = len(z) \n",
        "num_ids": 51
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    M = [[0 for i in range(len(Y)+1)] for j in range(len(X)+1)] \n    \n    for i in range(1, len(X)+1): \n        for j in range(1, len(Y)+1): \n            for k in range(1, len(Z)+1): \n                if X[i-1] == Y[j-1] == Z[k-1]: \n                    M[i][j] = M[i-1][j-1] + 1\n                else: \n                    M[i][j] = max(M[i][j-1], M[i-1][j], M[i-1][j-1]) \n    return M[len(X)][len(Y)] \n",
        "num_ids": 184
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    def lcs(X, Y):\n        '''\n        the function to find the longest common subsequence \n        for the given three string sequence.\n        '''\n        n1, n2 = len(X), len(Y)\n        dp = [[0] * (n2 + 1) for _ in range(n1 + 1)]\n        for i in range(1, n1 + 1):\n            for j in range(1, n2 + 1):\n                if X[i - 1] == Y[j - 1]:\n                    dp[i][j] = 1 + dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])\n        return dp[n1][n2]\n    \n    \n    def lcs_of_two(X, Y):\n        '''\n        the function to find the longest common subsequence for the given two string sequence.\n        '''\n        n1, n2 = len(X), len(Y)\n        dp = [[0] * (n2 + 1) for _ in range(n1 + 1)]\n        for i in range(1, n1 + 1):\n            for j in range(1, n2 + 1):\n                if X[i - 1] == Y[j - 1]:\n                    dp[i][j] = 1 + dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])\n        return dp[n1][n2]\n",
        "num_ids": 152
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    k = len(Z) \n    L = [[0 for x in range(k+1)] for x in range(m+1)] \n    for i in range(m+1): \n        for j in range(k+1): \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1] or X[i-1] == Z[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n    return L[m][k]\n",
        "num_ids": 194
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    dp_table = [[[0 for i in range(o)] for j in range(n + 1)] for k in range(m + 1)]\n",
        "num_ids": 60
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    k = len(Z)\n    L = [[0 for x in range(k+1)] for x in range(m+1)]\n",
        "num_ids": 50
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    dp_array = [[0 for i in range(o + 1)] for j in range(m + 1)] \n",
        "num_ids": 56
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X)\n    m = len(Y)\n    p = len(Z)\n    \n    T = [[[0 for i in range(p + 1)] for j in range(m + 1)] for k in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            for k in range(1, p + 1):\n                if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                    T[i][j][k] = 1 + T[i - 1][j - 1][k - 1]\n                else:\n                    T[i][j][k] = max(T[i - 1][j][k], T[i][j - 1][k], T[i][j][k - 1])\n    \n    return T[n][m][p]\n",
        "num_ids": 220
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X) \n    m = len(Y) \n    p = len(Z) \n    # lcs_dp_table is used to store the dp table \n    lcs_dp_table = [[0 for x in range(p+1)] for x in range(n+1)] \n",
        "num_ids": 77
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return''.join(word.title() if str1[i] >= 'A' and str1[i] <= 'Z' else word.lower() for i, word in enumerate(str1.split()))\n",
        "num_ids": 51
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    for i in range(0,len(str1)-1):\n        if str1[i].isupper() and str1[i+1].islower():\n            str1=str1[0:i]+\" \"+str1[i:]\n    return str1\n",
        "num_ids": 64
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.split(\" \")\n    new_str1 = []\n    for i in str1:\n        if re.match(\"^[A-Z]+$\",i):\n            new_str1.append(i)\n        else:\n            new_str1.append(i + \" \")\n    return \" \".join(new_str1)\n",
        "num_ids": 88
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    s = str1.split()\n    s1 = []\n    for i in s:\n        if i[0].isupper():\n            s1.append(i +'')\n        else:\n            s1.append(i)\n    return ''.join(s1)\n",
        "num_ids": 68
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = re.sub(r'\\W+','', str1.upper())\n    return str2\n    \ndef count_capital_letters(str1):\n    '''\n    Write a function to count the number of capital letters in a given string.\n    '''\n    count = 0\n    for i in str1:\n        if i.isupper():\n            count += 1\n    return count\n    \ndef count_uppercase_words(str1):\n    '''\n    Write a function to count the number of uppercase words in a given string.\n    '''\n    str2 = re.sub(r'\\W+','', str1.upper())\n    str3 = str2.split()\n    return len(str3)\n    \ndef count_uppercase_letters(str1):\n    '''\n    Write a function to count the number of uppercase letters in a given string.\n    '''\n    count = 0\n    for i in str1:\n        if i.isupper():\n            count += 1\n    return count\n    \ndef count_lowercase_letters(str1):\n    '''\n    Write a function to count the number of lowercase letters in a given string.\n    '''\n    count = 0\n    for i in str1:\n        if i.islower():\n            count += 1\n    return count\n    \ndef count_special_characters(str1):\n    '''\n    Write a function to count the number of special characters in a given string.\n    '''\n    count = 0\n    for i in str1:\n        if i in '!@#$%^&*()-+=[]{};:\\'<>./?|\":':\n            count += 1\n    return count\n    \ndef is_alphabetic(str1):\n    '''\n    Write a function to determine if a given string is in alphabetical order or not.\n    '''\n    str2 = re.sub(r'\\W+','', str1.upper())\n    str3 = str2.split()\n    str3.sort()\n    return str3 == str2\n    \ndef is_alphabetic_up_to_space(str1):\n    '''\n    Write a function to determine if a given string is in alphabetical order or not.\n    '''\n    str2 = re.sub(r'\\W+','', str1.upper())\n    str3 = str2.split()\n    str3.sort()\n    if len(str3) == 1:\n        return True\n    if len(str3) == 0:\n        return False\n    return str3[0] == str3[-1]\n    \ndef is_pangram(str1):\n    '''\n    Write a function to determine if a given string is a pangram or not. A pangram is a sentence that uses all the letters of the English alphabet.\n    '''\n    str2 = re.sub(r'\\W+','', str1.upper())\n    str3 = list(str2)\n    str3 = sorted(str3)\n    for i in range(len(str3)-1):\n        if str3[i] == str3[i+1]:\n            return False\n    return True\n    \ndef is_pangram_up_to_space(str1):\n    '''\n    Write a function to determine if a given string is a pangram or not. A pangram is a sentence that uses all the letters of the English alphabet.\n    '''\n    str2 = re.sub(r'\\W+','', str1.upper())\n    str3 = list(str2)\n    str3 = sorted(str3)\n    for i in range(len(str3)-1):\n        if str3[i] == str3[i+1]:\n            return False\n    return True\n    \ndef are_anagrams(str1, str2):\n    '''\n    Write a function to determine if two given strings are anagrams or not. An anagram is a word reordering.\n    '''\n    str3 = re.sub(r'\\W+','', str1.upper())\n    str4 = re.sub(r'\\W+','', str2.upper())\n    str3 = str3.split()\n    str4 = str4.split()\n    str3.sort()\n    str4.sort()\n    if str3 == str4:\n        return True\n    return False\n    \ndef are_anagrams_up_to_space(str1, str2):\n    '''\n    Write a function to determine if two given strings are anagrams or not. An anagram is a word reordering.\n    '''\n    str3 = re.sub(r'\\W+','', str1.upper())\n    str4 = re.sub(r'\\W+','', str2.upper())\n    str3 = str3.split()\n    str4 = str4.split()\n    str3.sort()\n    str4.sort()\n    if str3 == str4:\n        return True\n    return False\n    \ndef print_lst(lst1):\n    '''\n    Write a function that takes a list and returns a string with all of the items separated by a comma and a space, with and inserted before the last item.\n    '''\n    if lst1 == []:\n        return '[]'\n    for i in range(len(lst1)-1):\n        lst1[i] = str(lst1[i])\n    if len(lst1) == 1:\n        return str(lst1[0])\n    return str(lst1[0])+', '+str(lst1[-1])\n    \ndef print_lst_up_to_space(lst1):\n    '''\n    Write a function that takes a list and returns a string with all of the items separated by a comma and a space, with and inserted before the last item.\n    '''\n    if lst1 == []:\n        return '[]'\n    for i in range(len(lst1)-1):\n        lst1[i] = str(lst1[i])\n    if len(lst1) == 1:\n        return str(lst1[0])\n    return str(lst1[0])+', '+str(lst1[-1])\n    \ndef find_longest_word(str1):\n    '''\n    Write a function that takes a string as input, and returns the length of the longest word in that string. If there are two or more words that are the same length, return the word that appears earliest in the original string.\n    '''\n    str2 = str1.split()\n    lst = []\n    for i in str2:\n        lst.append(len(i))\n    if lst == []:\n        return 0\n    max = lst[0]\n    for i in lst:\n        if i > max:\n            max = i\n    lst.remove(max)\n    for i in lst:\n        if i == max:\n            return max\n    \ndef find_longest_word_up_to_space(str1):\n    '''\n    Write a function that takes a string as input, and returns the length of the longest word in that string. If there are two or more words that are the same length, return the word that appears earliest in the original string.\n    '''\n    str2 = str1.split()\n    lst = []\n    for i in str2:\n        lst.append(len(i))\n    if lst == []:\n        return 0\n    max = lst[0]\n    for i in lst:\n        if i > max:\n            max = i\n    return max\n    \ndef replace_spaces_in_sentence(str1):\n    '''\n    Write a function that takes a string as input and replaces every space character with an underscore.\n    '''\n    str2 = re.sub(r'\\s', '_', str1)\n    return str2\n",
        "num_ids": 27
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.replace(\" \", \"\")\n    return str1\n",
        "num_ids": 20
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1=str1.split()\n    for i in str1:\n        if(i[0].isupper()):\n            print(i,end=\" \")\n        else:\n            print(i,end=\"\")\n",
        "num_ids": 55
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    word = re.findall(r'\\b\\w[A-Z]+\\w', str1)\n    print(\"\".join(word))\n",
        "num_ids": 37
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    result = re.sub(r'(?<= )\\w(?=[A-Z])',' ',str1)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(\"(?<=[a-zA-Z])[^A-Z ]\")\n    return re.sub(pattern, \"\", str1)\n",
        "num_ids": 43
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = list(filter(str.isdigit, nums_str))\n    for i in range(0,len(nums_str)):\n        for j in range(0,len(nums_str)):\n            if(int(nums_str[i]) > int(nums_str[j])):\n                nums_str[i], nums_str[j] = nums_str[j], nums_str[i]\n",
        "num_ids": 113
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=float)\n",
        "num_ids": 16
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for i in range(len(nums_str)):\n        nums.append(nums_str[i])\n    nums_int = []\n    for i in range(len(nums)):\n        nums_int.append(int(nums[i]))\n    nums_int.sort(reverse = True)\n    nums_int = list(map(str, nums_int))\n    nums_str = []\n    for i in range(len(nums)):\n        nums_str.append(nums_int[i] + nums[i])\n    return(nums_str)\n",
        "num_ids": 158
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = nums_str.split(\"\\n\")\n    nums_str = sorted(nums_str, key = float)\n    return \"\\n\".join(nums_str)\n",
        "num_ids": 50
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    if len(nums_str) == 0:\n        return nums_str\n    nums_int = []\n    for num in nums_str:\n        if num.isdigit():\n            nums_int.append(int(num))\n    nums_int.sort()\n    nums_str = []\n    for num in nums_int:\n        nums_str.append(str(num))\n    return nums_str\n",
        "num_ids": 109
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    result = []\n    for x in sorted(nums_str, key=lambda x: float(x)):\n        result.append(x)\n",
        "num_ids": 37
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_list = []\n    for num in nums_str:\n        nums_list.append(int(num))\n    nums_list.sort(reverse=True)\n    for num in nums_list:\n        print(num, end='')\n",
        "num_ids": 66
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key = lambda x : int(x))\n    return nums_str\n",
        "num_ids": 27
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    try:\n        nums = []\n        for s in nums_str:\n            nums.append(int(s))\n    except ValueError:\n        print(\"nums_str is not a number.  Please enter a numerical string\")\n        exit()\n",
        "num_ids": 63
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        if test_list[i] == test_tup:\n            return test_list\n        else:\n            test_list.append(test_tup)\n            return test_list\n",
        "num_ids": 60
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    if len(test_list) < 2:\n        test_list.append(test_tup)\n        return\n    \n    for i in range(0, len(test_list)):\n        if test_list[i] > test_tup:\n            test_list.insert(i, test_tup)\n            return\n    \n    test_list.append(test_tup)\n    return\n",
        "num_ids": 99
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n    return test_list\n",
        "num_ids": 24
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n",
        "num_ids": 16
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n    return test_list\n",
        "num_ids": 24
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n",
        "num_ids": 16
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) == 0:\n        return False\n    if i == 0:\n        return True\n    left_child = 2*i\n    right_child = 2*i + 1\n    if left_child < len(arr) and arr[left_child] > arr[i]:\n        return False\n    if right_child < len(arr) and arr[right_child] > arr[i]:\n        return False\n    if left_child < len(arr) and arr[left_child] > arr[right_child]:\n        return False\n    if right_child < len(arr) and arr[right_child] > arr[left_child]:\n        return False\n    return True\n",
        "num_ids": 163
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] < arr[2 * i + 1] or arr[i] < arr[2 * i + 2]:\n        return False\n",
        "num_ids": 36
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    \n    return True\n",
        "num_ids": 74
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left_index = 2 * i + 1\n    right_index = 2 * i + 2\n    \n    if left_index <= len(arr) - 1 and arr[left_index] > arr[i]:\n        return False\n    if right_index <= len(arr) - 1 and arr[right_index] > arr[i]:\n        return False\n    if left_index <= len(arr) - 1 and right_index <= len(arr) - 1 and arr[left_index] > arr[right_index]:\n        return False\n    return True\n",
        "num_ids": 130
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # A heap is a complete binary tree with the root as minimum node\n    # Therefore the elements of the tree has to be in increasing order of their values\n    # if the array is not a min heap\n    if i < len(arr) and arr[i] > arr[i + 1]:\n        return False\n    if i < len(arr) and arr[i] > arr[i + 2]:\n        return False\n    if i < len(arr) and arr[i] > arr[i + 3]:\n        return False\n    if i < len(arr) and arr[i] > arr[i + 4]:\n        return False\n    if i < len(arr) and arr[i] > arr[i + 5]:\n        return False\n    # If the root of the tree is greater than all its children, then it is not a min heap\n    if i < len(arr) and arr[i] > arr[0]:\n        return False\n    if i < len(arr) and arr[i] > arr[1]:\n        return False\n    if i < len(arr) and arr[i] > arr[2]:\n        return False\n    if i < len(arr) and arr[i] > arr[3]:\n        return False\n    if i < len(arr) and arr[i] > arr[4]:\n        return False\n    if i < len(arr) and arr[i] > arr[5]:\n        return False\n    return True\n",
        "num_ids": 337
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    # If current element is smaller than its parent, then\n    # min heap condition is not satisfied\n    elif arr[i] < arr[(i-1)//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, (i-1)//2)\n",
        "num_ids": 87
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return False\n    if i >= len(arr):\n        return True\n    if arr[i] < arr[(i - 1) // 2]:\n        return False\n    if arr[i] > arr[i - 1]:\n        return check_min_heap_helper(arr, (i - 1) // 2)\n    return True\n",
        "num_ids": 89
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < len(arr):\n        if arr[i] >= arr[i//2] and i//2 > 0:\n            return False\n        if arr[i] <= arr[i//2] and i//2 > 0:\n            return check_min_heap_helper(arr, i//2)\n    return True\n",
        "num_ids": 80
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < len(arr):\n        if arr[i] < arr[i//2]:\n            return False\n        if i * 2 + 1 < len(arr):\n            if arr[i] < arr[i * 2 + 1]:\n                return False\n        if i * 2 + 2 < len(arr):\n            if arr[i] < arr[i * 2 + 2]:\n                return False\n        return True\n    return True\n",
        "num_ids": 103
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    arr_size = len(arr)\n    if arr_size == 0:\n        return True\n    if arr_size == 1:\n        return True if arr[0] == 1 else False\n    for i in range(1, arr_size):\n        if arr[i] > arr[0]:\n            return False\n    return True\n",
        "num_ids": 80
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # jacobsthal_list = jacobsthal_num_list()\n    jacobsthal_list = jacobsthal_num_list(n)\n    return jacobsthal_list[n - 1]\n",
        "num_ids": 59
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    s=0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            s += int(math.sqrt(8*i + 1))\n        else:\n            s += int(math.sqrt(8*i - 1))\n    return s\n",
        "num_ids": 71
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    total = 0\n    for i in range(2, n+1):\n        total = total + (i**2 -2*i + 1)\n    return total\n",
        "num_ids": 41
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n <= 1:\n        return n\n    else:\n        j = 2\n        i = 1\n        while i <= n:\n            if j%2 == 0:\n                j = j/2\n                i = i + 1\n            else:\n                j = j*3 + 1\n                i = i + 1\n    return j\n",
        "num_ids": 81
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31\n    if n == 31:\n        return 32\n    if n == 32:\n        return 33\n    if n == 33:\n        return 34\n    if n == 34:\n        return 35\n    if n == 35:\n        return 36\n    if n == 36:\n        return 37\n    if n == 37:\n        return 38\n    if n == 38:\n        return 39\n    if n == 39:\n        return 40\n    if n == 40:\n        return 41\n    if n == 41:\n        return 42\n    if n == 42:\n        return 43\n    if n == 43:\n        return 44\n    if n == 44:\n        return 45\n    if n == 45:\n        return 46\n    if n == 46:\n        return 47\n    if n == 47:\n        return 48\n    if n == 48:\n        return 49\n    if n == 49:\n        return 50\n    if n == 50:\n        return 51\n    if n == 51:\n        return 52\n    if n == 52:\n        return 53\n    if n == 53:\n        return 54\n    if n == 54:\n        return 55\n    if n == 55:\n        return 56\n    if n == 56:\n        return 57\n    if n == 57:\n        return 58\n    if n == 58:\n        return 59\n    if n == 59:\n        return 60\n    if n == 60:\n        return 61\n    if n == 61:\n        return 62\n    if n == 62:\n        return 63\n    if n == 63:\n        return 64\n    if n == 64:\n        return 65\n    if n == 65:\n        return 66\n    if n == 66:\n        return 67\n    if n == 67:\n        return 68\n    if n == 68:\n        return 69\n    if n == 69:\n        return 70\n    if n == 70:\n        return 71\n    if n == 71:\n        return 72\n    if n == 72:\n        return 73\n    if n == 73:\n        return 74\n    if n == 74:\n        return 75\n    if n == 75:\n        return 76\n    if n == 76:\n        return 77\n    if n == 77:\n        return 78\n    if n == 78:\n        return 79\n    if n == 79:\n        return 80\n    if n == 80:\n        return 81\n    if n == 81:\n        return 82\n    if n == 82:\n        return 83\n    if n == 83:\n        return 84\n    if n == 84:\n        return 85\n    if n == 85:\n        return 86\n    if n == 86:\n        return 87\n    if n == 87:\n        return 88\n    if n == 88:\n        return 89\n    if n == 89:\n        return 90\n    if n == 90:\n        return 91\n    if n == 91:\n        return 92\n    if n == 92:\n        return 93\n    if n == 93:\n        return 94\n    if n == 94:\n        return 95\n    if n == 95:\n        return 96\n    if n == 96:\n        return 97\n    if n == 97:\n        return 98\n    if n == 98:\n        return 99\n    if n == 99:\n        return 100\n    if n == 100:\n        return 101\n    if n == 101:\n        return 102\n    if n == 102:\n        return 103\n    if n == 103:\n        return 104\n    if n == 104:\n        return 105\n    if n == 105:\n        return 106\n    if n == 106:\n        return 107\n    if n == 107:\n        return 108\n    if n == 108:\n        return 109\n    if n == 109:\n        return 110\n    if n == 110:\n        return 111\n    if n == 111:\n        return 112\n    if n == 112:\n        return 113\n    if n == 113:\n        return 114\n    if n == 114:\n        return 115\n    if n == 115:\n        return 116\n    if n == 116:\n        return 117\n    if n == 117:\n        return 118\n    if n == 118:\n        return 119\n    if n == 119:\n        return 120\n    if n == 120:\n        return 121\n    if n == 121:\n        return 122\n    if n == 122:\n        return 123\n    if n == 123:\n        return 124\n    if n == 124:\n        return 125\n    if n == 125:\n        return 126\n    if n == 126:\n        return 127\n    if n == 127:\n        return 128\n    if n == 128:\n        return 129\n    if n == 129:\n        return 130\n    if n == 130:\n        return 131\n    if n == 131:\n        return 132\n    if n == 132:\n        return 133\n    if n == 133:\n        return 134\n    if n == 134:\n        return 135\n    if n == 135:\n        return 136\n    if n == 136:\n        return 137\n    if n == 137:\n        return 138\n    if n == 138:\n        return 139\n    if n == 139:\n        return 140\n    if n == 140:\n        return 141\n    if n == 141:\n        return 142\n    if n == 142:\n        return 143\n    if n == 143:\n        return 144\n    if n == 144:\n        return 145\n    if n == 145:\n        return 146\n    if n == 146:\n        return 147\n    if n == 147:\n        return 148\n    if n == 148:\n        return 149\n    if n == 149:\n        return 150\n    if n == 150:\n        return 151\n    if n == 151:\n        return 152\n    if n == 152:\n        return 153\n    if n == 153:\n        return 154\n    if n == 154:\n        return 155\n    if n == 155:\n        return 156\n    if n == 156:\n        return 157\n    if n == 157:\n        return 158\n    if n == 158:\n        return 159\n    if n == 159:\n        return 160\n    if n == 160:\n        return 161\n    if n == 161:\n        return 162\n    if n == 162:\n        return 163\n    if n == 163:\n        return 164\n    if n == 164:\n        return 165\n    if n == 165:\n        return 166\n    if n == 166:\n        return 167\n    if n == 167:\n        return 168\n    if n == 168:\n        return 169\n    if n == 169:\n        return 170\n    if n == 170:\n        return 171\n    if n == 171:\n        return 172\n    if n == 172:\n        return 173\n    if n == 173:\n        return 174\n    if n == 174:\n        return 175\n    if n == 175:\n        return 176\n    if n == 176:\n        return 177\n    if n == 177:\n        return 178\n",
        "num_ids": 1949
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return int((n+1)**2 / 2)\n    ",
        "num_ids": 17
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    p = 3\n    q = 2\n    p = p**2\n    q = q**2\n    ans = 0\n    while n >= p:\n        n = n-(q*p)\n        ans = ans + p\n        p = p + 2*q\n        q = q + 2*q\n    return ans\n",
        "num_ids": 77
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # initiate the needed variables\n    l = 0\n    u = 1\n    count = 0\n    \n    # loop until n is equal to 0\n    while count < n:\n        \n        # calculate the new l and u\n        l = u - (1/(2*l))\n        u = (1 + (1/l)) * (1/2)\n        count += 1\n        \n    return u\n",
        "num_ids": 96
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    jb = 1\n    jl = 1\n    for i in range(n - 1):\n        jb = (jb * jl) % 7\n        jl = (jb + 1) % 7\n    return (jb + 1) % 7\n",
        "num_ids": 61
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return (jacobsthal_num(n-2) + jacobsthal_num(n-1))\n",
        "num_ids": 57
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # code here\n    # print(test_list)\n    # print(K)\n    if(len(test_list) <= K):\n        return test_list\n    else:\n        return test_list[:K]\n",
        "num_ids": 56
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return min(test_list, key = lambda x: x[K])\n",
        "num_ids": 20
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    sorted_list = []\n    sorted_list_2 = []\n    for i in test_list:\n        sorted_list.append((i, len(i)))\n    sorted_list = sorted(sorted_list, key=lambda x: x[1])\n",
        "num_ids": 67
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    n = len(test_list)\n    for i in range(n):\n        if K <= 0:\n            return test_list\n        else:\n            x = test_list[i]\n            if x <= test_list[n-K]:\n                test_list[i], test_list[n-K] = test_list[n-K], test_list[i]\n                test_list.pop(n-K)\n                K -= 1\n                min_k(test_list, K)\n    return test_list\n",
        "num_ids": 127
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list = sorted(test_list, key=lambda x: x[1], reverse=True)\n    res = []\n    for i in range(K):\n        res.append(test_list[i][0])\n    return res\n",
        "num_ids": 59
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    \n    min_k_list = []\n    \n    for i in range(len(test_list)-K+1):\n        for j in range(i, i+K):\n            if j == i:\n                min_k_list.append(test_list[j])\n            elif test_list[j] < min_k_list[0]:\n                min_k_list = []\n                min_k_list.append(test_list[j])\n    return min_k_list\n",
        "num_ids": 120
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    print(\"\\nmin_k\")\n    print(\"\\ntest_list =\", test_list)\n    print(\"\\nK =\", K)\n    temp_list = []\n    result_list = []\n    for i in range(K):\n        temp_list.append(test_list[i])\n        temp_list.sort()\n        result_list.append(temp_list[0])\n        temp_list.remove(temp_list[0])\n    print(\"\\ntemp_list =\", temp_list)\n    print(\"\\nresult_list =\", result_list)\n",
        "num_ids": 141
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) < K:\n        return test_list\n    return test_list[:K]\n    #return sorted(test_list)[:K]\n",
        "num_ids": 43
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # code goes here\n    l=len(test_list)\n    a=min(test_list,key=lambda i:len(i[0]))\n    print(a)\n    for i in range(l):\n        if len(a[0])<=len(test_list[i][0]):\n            a=test_list[i]\n    return a\n",
        "num_ids": 91
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    record_list = list(test_list)\n    # print(record_list)\n    # return -1\n    record_list.sort(key=lambda x: x[3])\n    # print(record_list)\n    # return -1\n    if K >= len(record_list):\n        return None\n    else:\n        return record_list[0:K]\n",
        "num_ids": 91
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    res = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            res.append(l1[i])\n    return res\n",
        "num_ids": 56
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and i not in result:\n            result.append(i)\n    return result\n    #Write your code here\n",
        "num_ids": 65
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    out = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            out.append(l1[i])\n    return out\n",
        "num_ids": 56
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty list\n    index_list = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    index_list.append(i)\n",
        "num_ids": 86
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    a=[]\n    for i in range(min(len(l1),len(l2),len(l3))):\n        if l1[i]==l2[i]==l3[i]:\n            a.append(l1[i])\n    return a\nprint(extract_index_list([1,2,3,4],[4,4,4,4],[\"\",\"\",\"\",\"\"]))\n",
        "num_ids": 99
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3:\n            result.append(l1[i])\n    return result\nprint(extract_index_list([1, 2, 3], ['a', 'b', 'c'], ['b', 'c', 'd']))\n",
        "num_ids": 92
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    res = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            res.append(l1[i])\n    return res\n",
        "num_ids": 56
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    res = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            res.append(l1[i])\n    return res\n",
        "num_ids": 56
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    l = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            l.append(i)\n    return l\n",
        "num_ids": 54
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1 = set(l1)\n    l2 = set(l2)\n    l3 = set(l3)\n    common_elements = []\n    for ele in l1:\n        if ele in l2 and ele in l3:\n            common_elements.append(ele)\n    return common_elements\n",
        "num_ids": 79
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 0:\n        return None\n",
        "num_ids": 17
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) > 1:\n        x = 0\n        y = len(numbers) - 1\n        while (x <= y):\n            mid = x + ((y - x) // 2)\n            if numbers[mid] > numbers[mid - 1]:\n                x = mid + 1\n            else:\n                y = mid - 1\n        return numbers[x]\n    else:\n        return numbers[0]\n",
        "num_ids": 101
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    \n    #check if there's more than one number in the list\n    if len(numbers) < 2:\n        return None\n",
        "num_ids": 33
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n",
        "num_ids": 16
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return min(numbers)\n    \n    \n    \ndef smallest_in_arr(numbers):\n    '''\n    Write a function to find the smallest number in a list.\n    '''\n    return min(numbers)\n    \n    \n    \ndef common_characters(sentence1, sentence2):\n    '''\n    Write a function to find the common characters between two sentences.\n    '''\n    new_sentence = ''.join(sorted(sentence1.lower()) & sorted(sentence2.lower()))\n    return new_sentence\n",
        "num_ids": 39
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    if numbers[1] == numbers[0]:\n        return numbers[0]\n    else:\n        return numbers[1]\n",
        "num_ids": 39
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    #worst case: O(N^2) time | O(1) space\n    #O(N) time | O(N) space\n",
        "num_ids": 35
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n",
        "num_ids": 16
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n",
        "num_ids": 16
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n",
        "num_ids": 16
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*?b'\n    if re.search(pattern, text):\n        return 'Match Found'\n    else:\n        return 'No Match Found'\n",
        "num_ids": 43
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.findall(r'ab', text)\n",
        "num_ids": 16
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # result = re.search(r'a{1,}b', text)\n    # if result is not None:\n    #     print(result.group())\n    # else:\n    #     print('no matches')\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-4.php\n    # using character sets\n    # result = re.search(r'[ab]{1,}', text)\n    # if result is not None:\n    #     print(result.group())\n    # else:\n    #     print('no matches')\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-5.php\n    # using group\n    # result = re.search(r'(a){1,}(b){1,}', text)\n    # if result is not None:\n    #     print(result.group())\n    # else:\n    #     print('no matches')\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-6.php\n    # using groups\n    # result = re.search(r'(a){1,}(b){1,}', text)\n    # if result is not None:\n    #     print(result.group())\n    # else:\n    #     print('no matches')\n    # using group with python3\n    # result = re.search(r'(?P<first>a){1,}(?P<second>b){1,}', text)\n    # if result is not None:\n    #     print(result.group())\n    # else:\n    #     print('no matches')\n    #https://www.w3resource.com/python-exercises/re/python-re-exercise-7.php\n    # match the end of each sentence\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-8.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-9.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-10.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-11.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-12.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-13.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-14.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-15.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-16.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-17.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-18.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-19.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-20.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-21.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-22.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-23.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-24.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-25.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-26.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-27.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-28.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-29.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-30.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-31.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-32.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-33.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-34.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-35.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-36.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-37.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-38.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-39.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-40.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-41.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-42.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-43.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-44.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-45.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-46.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-47.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-48.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-49.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-50.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-51.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-52.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-53.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-54.php\n    # https://www.w3resource.com/python-exercises/re/python-re-exercise-55.php\n    # https://www.w3resource.com/python-exercises/re/python-re",
        "num_ids": 1964
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a[ab]*b*'\n    return re.match(pattern, text)\n",
        "num_ids": 27
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = re.sub(r'\\s*\\n\\s*','', text)\n    text = re.sub(r'\\s*\\n\\s*','', text)\n    text = re.sub(r'\\s*\\n\\s*','', text)\n    return bool(re.match(r'a*b*', text))\n",
        "num_ids": 86
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"(ab+)\")\n    if (pattern.match(text)):\n        return (pattern.match(text).groups())\n    return False\n",
        "num_ids": 43
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    regex = r'a[a-z]b'\n    try:\n        match = re.search(regex, text)\n        if match:\n            return True\n        else:\n            return False\n    except:\n        return False\n    \ndef text_match_zero_one_backwards(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    regex = r'a[a-z]b'\n    try:\n        match = re.search(regex, text)\n        if match:\n            return True\n        else:\n            return False\n    except:\n        return False\n    \ndef text_match_zero_one_slant(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    regex = r'a[a-z]b'\n    try:\n        match = re.search(regex, text, re.IGNORECASE)\n        if match:\n            return True\n        else:\n            return False\n    except:\n        return False\n    \ndef text_match_zero_one_slant_backwards(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    regex = r'a[a-z]b'\n    try:\n        match = re.search(regex, text, re.IGNORECASE)\n        if match:\n            return True\n        else:\n            return False\n    except:\n        return False\n    \ndef text_match_zero_one_dot_dot(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    regex = r'a[a-z]b'\n    try:\n        match = re.search(regex, text)\n        if match:\n            return True\n        else:\n            return False\n    except:\n        return False\n    \ndef text_match_zero_one_dot_dot_backwards(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    regex = r'a[a-z]b'\n    try:\n        match = re.search(regex, text, re.IGNORECASE)\n        if match:\n            return True\n        else:\n            return False\n    except:\n        return False\n    \ndef text_match_zero_one_word(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    regex = r'a[a-z]b'\n    try:\n        match = re.search(regex, text)\n        if match:\n            return True\n        else:\n            return False\n    except:\n        return False\n    \ndef text_match_zero_one_word_backwards(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    regex = r'a[a-z]b'\n    try:\n        match = re.search(regex, text, re.IGNORECASE)\n        if match:\n            return True\n        else:\n            return False\n    except:\n        return False\n    \ndef text_match_zero_one_at_the_end(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    regex = r'a[a-z]b'\n    try:\n        match = re.search(regex, text)\n        if match:\n            return True\n        else:\n            return False\n    except:\n        return False\n    \ndef text_match_zero_one_at_the_end_backwards(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    regex = r'a[a-z]b'\n    try:\n        match = re.search(regex, text, re.IGNORECASE)\n        if match:\n            return True\n        else:\n            return False\n    except:\n        return False\n    \ndef text_match_zero_one_at_the_end_slant(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    regex = r'a[a-z]b'\n    try:\n        match = re.search(regex, text, re.IGNORECASE)\n        if match:\n            return True\n        else:\n            return False\n    except:\n        return False\n    \ndef text_match_zero_one_at_the_end_slant_backwards(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    regex = r'a[a-z]b'\n    try:\n        match = re.search(regex, text, re.IGNORECASE)\n        if match:\n            return True\n        else:\n            return False\n    except:\n        return False\n    \ndef text_match_zero_one_at_the_end_dot_dot(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    regex = r'a[a-z]b'\n    try:\n        match = re.search(regex, text)\n        if match:\n            return True\n        else:\n            return False\n    except:\n        return False\n    \ndef text_match_zero_one_at_the_end_dot_dot_backwards(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    regex = r'a[a-z]b'\n    try:\n        match = re.search(regex, text, re.IGNORECASE)\n        if match:\n            return True\n        else:\n            return False\n    except:\n        return False\n    \ndef text_match_zero_one_at_the_end_word(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    regex = r'a[a-z]b'\n    try:\n        match = re.search(regex, text)\n        if match:\n            return True\n        else:\n            return False\n    except:\n        return False\n    \ndef text_match_zero_one_at_the_end_word_backwards(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    regex = r'a[a-z]b'\n    try:\n        match = re.search(regex, text, re.IGNORECASE)\n        if match:\n            return True\n        else:\n            return False\n    except:\n        return False\n    \ndef text_match_zero_one_at_the_end_dot(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    regex = r'a[a-z]b'\n    try:\n        match = re.search(regex, text)\n        if match:\n            return True\n        else:\n            return False\n    except:\n        return False\n    \ndef text_match_zero_one_at_the_end_dot_backwards(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    regex = r'a[a-z]b'\n    try:\n        match = re.search(regex, text, r",
        "num_ids": 34
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r\"a+b\",text)\ndef text_match_zero_one_part1(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    return re.match(r\"a*b\",text)\ndef text_match_zero_one_part2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    return re.match(r\"a+b\",text)\ndef text_match_zero_one_part3(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    return re.match(r\"a*b\",text)\ndef text_match_zero_one_part4(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    return re.match(r\"a+b\",text)\ndef text_match_zero_one_part5(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    return re.match(r\"a*b\",text)\ndef text_match_zero_one_part6(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    return re.match(r\"a+b\",text)\ndef text_match_zero_one_part7(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    return re.match(r\"a*b\",text)\ndef text_match_zero_one_part8(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    return re.match(r\"a+b\",text)\ndef text_match_zero_one_part9(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    return re.match(r\"a*b\",text)\ndef text_match_zero_one_part10(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    return re.match(r\"a+b\",text)\ndef text_match_zero_one_part11(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    return re.match(r\"a*b\",text)\ndef text_match_zero_one_part12(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    return re.match(r\"a+b\",text)\ndef text_match_zero_one_part13(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    return re.match(r\"a*b\",text)\ndef text_match_zero_one_part14(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    return re.match(r\"a+b\",text)\ndef text_match_zero_one_part15(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    return re.match(r\"a*b\",text)\ndef text_match_zero_one_part16(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    return re.match(r\"a+b\",text)\ndef text_match_zero_one_part17(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    return re.match(r\"a*b\",text)\ndef text_match_zero_one_part18(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    return re.match(r\"a+b\",text)\ndef text_match_zero_one_part19(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    return re.match(r\"a*b\",text)\ndef text_match_zero_one_part20(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    return re.match(r\"a+b\",text)\ndef text_match_zero_one_part21(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    return re.match(r\"a*b\",text)\ndef text_match_zero_one_part22(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    return re.match(r\"a+b\",text)\ndef text_match_zero_one_part23(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    return re.match(r\"a*b\",text)\ndef text_match_zero_one_part24(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    return re.match(r\"a+b\",text)\ndef text_match_zero_one_part25(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    return re.match(r\"a*b\",text)\ndef text_match_zero_one_part26(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    return re.match(r\"a+b\",text)\ndef text_match_zero_one_part27(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    return re.match(r\"a*b\",text)\ndef text_match_zero_one_part28(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    return re.match(r\"a+b\",text)\ndef text_match_zero_one_part29(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    return re.match(r\"a*b\",text)\ndef text_match_zero_one_part30(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    return re.match(r\"a+b\",text)\ndef text_match_zero_one_part31(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    return re.match(r\"a*b\",text)\ndef text_match",
        "num_ids": 21
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a' + r'b*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pat = re.compile(\"a[ab]\")\n    m = pat.search(text)\n    if m!= None:\n        return 1\n    else:\n        return 0\n",
        "num_ids": 46
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    test_list = test_list + test_list\n    length = len(test_list)\n    count = 0\n    for i in range(length):\n        for j in range(i,length):\n            if test_list[i] == test_list[j]:\n                count = count + 1\n                if count > 1:\n                    return -1\n    return count\n",
        "num_ids": 89
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    s = map(str, test_list)\n    s = set(s)\n    s = list(s)\n    reverse_string = []\n    for i in range(len(s)):\n        reverse_string.append(s[i][::-1])\n    print(reverse_string)\n",
        "num_ids": 73
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    result = 0\n",
        "num_ids": 7
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for index, string in enumerate(test_list):\n        rev_string = string[::-1]\n        if rev_string in test_list[index+1:]:\n            count += 1\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    # write your code here\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "num_ids": 75
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    test_list = test_list[:len(test_list)//2] + test_list[len(test_list)//2+1:]\n    count = 0\n    for i in range(len(test_list)//2):\n        if test_list[i] == test_list[-i-1]:\n            count += 1\n    return count\n",
        "num_ids": 87
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] + test_list[j] == test_list[j] + test_list[i]:\n                count += 1\n    return count\n",
        "num_ids": 79
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_pair = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                reverse_pair += 1\n                break\n    return reverse_pair\n",
        "num_ids": 75
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n",
        "num_ids": 7
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Your code here\n    counter = 0\n    for i in test_list:\n        j = i[::-1]\n        if j in test_list:\n            counter += 1\n    return counter\n",
        "num_ids": 50
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    res = {}\n    for l in list1:\n        if isinstance(l, list):\n            if l not in res.keys():\n                res[tuple(l)] = 1\n            else:\n                res[tuple(l)] = res[l] + 1\n        else:\n            if l not in res.keys():\n                res[l] = 1\n            else:\n                res[l] = res[l] + 1\n    return res\n    \nprint(unique_sublists(['a', 'b', ['a'], 'b', ['a']]))\n",
        "num_ids": 137
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dic = {}\n    for i in list1:\n        if i not in dic:\n            dic[i] = 1\n        else:\n            dic[i] += 1\n    return dic\n",
        "num_ids": 52
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = {}\n    for elem in list1:\n        if result.get(tuple(elem)):\n            result[tuple(elem)] += 1\n        else:\n            result[tuple(elem)] = 1\n    return result\nprint(unique_sublists([[10,2,3],[4,5,6],[7,8]])) #-> {(10, 2): 1, (4, 5): 1, (7, 8): 1, (10, 3): 1, (4, 6): 1, (7, 8): 1, (4, 5, 6): 1}\nprint(unique_sublists([[],[0],[0]])) #-> {(): 1}\nprint(unique_sublists([[],[0,1],[0,1,2]])) #-> {(0,): 3, (0, 1): 2, (0, 1, 2): 1}\n",
        "num_ids": 209
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(tuple(list1[i]))\n    new_list = list(set(new_list))\n    new_list = [list(i) for i in new_list]\n    for i in range(len(new_list)):\n        new_list[i] = new_list[i][0]\n    counter = {}\n    for i in new_list:\n        if i in counter:\n            counter[i] += 1\n        else:\n            counter[i] = 1\n    return counter\n",
        "num_ids": 147
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    def sublist(list1):\n        # initialize dictionary\n        sublist_dict = {}\n        # loop through list and convert each item to tuple\n        for item in list1:\n            item = tuple(item)\n            # if item in dictionary, increase its value by 1, else initialize its value as 1\n            if item in sublist_dict:\n                sublist_dict[item] = sublist_dict[item] + 1\n            else:\n                sublist_dict[item] = 1\n        return sublist_dict\n    return sublist(list1)\n",
        "num_ids": 132
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for i in list1:\n        if type(i)!= str:\n            d[tuple(i)] = list1.count(i)\n        else:\n            d[i] = 1\n    return d\n",
        "num_ids": 58
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    list1 = list(list1)\n    print(list1)\n    \n    sublist = []\n    d = {}\n    for i in list1:\n        if type(i) == list:\n            for j in i:\n                sublist.append(tuple(j))\n        else:\n            sublist.append(tuple(i))\n    \n    print(sublist)\n    \n    for i in sublist:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    \n    return d\n",
        "num_ids": 139
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dic = {}\n    for l in list1:\n        t = tuple(l)\n        dic[t] = dic.get(t, 0) + 1\n    return dic\n",
        "num_ids": 48
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for i in range(len(list1)):\n        list1[i] = tuple(list1[i])\n    for item in list1:\n        if item in d:\n            d[item] += 1\n        else:\n            d[item] = 1\n    return d\n",
        "num_ids": 74
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return {list1:len(list1)}\n",
        "num_ids": 14
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num==\"\":\n        return False\n    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        return True\n    \ndef is_palindrome(s):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    s=s.replace(\" \",\"\")\n    if s==s[::-1]:\n        return True\n    return False\n",
        "num_ids": 32
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    \n    from re import match\n    \n    if match(r'^[+-]?(([0-9]*[.][0-9]+)|([0-9]+))$', num):\n        return True\n    return False\n",
        "num_ids": 58
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num == '0':\n        return True\n    if '.' not in num:\n        return False\n    num = float(num)\n    if num%1 == 0:\n        return True\n    return False\n",
        "num_ids": 52
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    #brute force\n    for i in range(len(num)):\n        if num[i] == '.':\n            return True\n    return False\n",
        "num_ids": 39
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        return True\n",
        "num_ids": 30
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    #if len(num) == 0: return False\n    #for x in num:\n    #    if x not in \"0123456789.\": return False\n    #return True\n    try:\n        if float(num) == float(num):\n            return True\n        else:\n            return False\n    except:\n        return False\n",
        "num_ids": 82
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return bool(re.match(r'^\\d+\\.\\d+$', num))\n",
        "num_ids": 25
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return str(num).replace(\".\", \"\", 1).isdecimal()\n",
        "num_ids": 20
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        num = num.split('.')[0]\n    try:\n        if num.count('.') == 1:\n            num = float(num)\n            if 0.00 <= num <= 1.00:\n                return True\n            else:\n                return False\n        elif num.count('.') == 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n",
        "num_ids": 106
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    import re\n    pattern = re.compile(r'^(-|\\+)?(([1-9]\\d*)(\\.\\d+)?)$')\n    if pattern.match(num):\n        return True\n    else:\n        return False\n",
        "num_ids": 61
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    if len(arr)>0:\n        res = dict.fromkeys(arr, 0)\n        for i in range(len(arr)):\n            if res[arr[i]] == 0:\n                res[arr[i]] += 1\n            else:\n                return False\n        for k in res:\n            if res[k]!= 1:\n                return False\n        return True\n    else:\n        return False\n",
        "num_ids": 103
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    # create an empty set\n    setOfNumber = set()\n    \n    # traverse the given list\n    for num in arr:\n        # if any element is already present in set then return False\n        if num in setOfNumber:\n            return False\n        else:\n            # add the element to set\n            setOfNumber.add(num)\n    # return True if all elements are unique else False\n    return True\n",
        "num_ids": 100
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    my_set = set(arr)\n    if len(my_set) == 1:\n        print(True)\n    else:\n        print(False)\n",
        "num_ids": 40
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_elements = []\n    for i in range(0, len(arr)):\n        if arr[i] not in unique_elements:\n            unique_elements.append(arr[i])\n        else:\n            print(f\"Duplicates are: {arr[i]}\")\n            return False\n    return True\n",
        "num_ids": 80
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    try:\n        if len(arr)==0 or len(arr)==1:\n            return True\n        if len(arr)>1 and len(set(arr))==len(arr):\n            return True\n        return False\n    except TypeError:\n        return False\n",
        "num_ids": 66
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    dicti={}\n    for i in arr:\n        if i not in dicti:\n            dicti[i]=1\n        else:\n            return False\n    return True\n",
        "num_ids": 44
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    x = list(set(arr))\n    if len(x) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if arr.count(arr[0]) == len(arr):\n        return True\n    else:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    try:\n        set_arr = set(arr)\n        if len(set_arr) == 1:\n            print('YES')\n        else:\n            print('NO')\n    except Exception as e:\n        print(e)\n",
        "num_ids": 57
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] == arr[j]:\n                return False\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_30days = False\n    if monthnum3 == 30:\n        month_30days = True\n    return month_30days\n",
        "num_ids": 34
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    return (monthnum3 == 30)\n",
        "num_ids": 12
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    if (monthnum3%4)==0:\n        #print(\"It's a leap year\")\n        return True\n    else:\n        #print(\"It's not a leap year\")\n        return False\n    \nmonth3 = int(input())\n",
        "num_ids": 62
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in range(1,3):\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # Write your code here\n    if (monthnum3 % 100!= 0):\n        if (monthnum3 % 400 == 0) or (monthnum3 % 4 == 0 and monthnum3 % 100!= 0):\n            # If it is a leap year and not a leap year, return True\n            return True\n        else:\n            return False\n    else:\n        # If it is a leap year, return True\n        return True\n",
        "num_ids": 102
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_30days = [4,6,9,11]\n    if monthnum3 == 12 or monthnum3 == 1 or monthnum3 == 2:\n        return 'no'\n    elif monthnum3 in month_30days:\n        return 'yes'\n    else:\n        return 'no'\n",
        "num_ids": 74
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3==31:\n        print('There are 31 days in the month')\n    elif monthnum3==32:\n        print('There are 32 days in the month')\n    elif monthnum3==33:\n        print('There are 33 days in the month')\n    elif monthnum3==34:\n        print('There are 34 days in the month')\n    elif monthnum3==35:\n        print('There are 35 days in the month')\n    elif monthnum3==36:\n        print('There are 36 days in the month')\n    elif monthnum3==37:\n        print('There are 37 days in the month')\n    elif monthnum3==38:\n        print('There are 38 days in the month')\n    elif monthnum3==39:\n        print('There are 39 days in the month')\n    elif monthnum3==40:\n        print('There are 40 days in the month')\n    elif monthnum3==41:\n        print('There are 41 days in the month')\n    elif monthnum3==42:\n        print('There are 42 days in the month')\n    elif monthnum3==43:\n        print('There are 43 days in the month')\n    elif monthnum3==44:\n        print('There are 44 days in the month')\n    elif monthnum3==45:\n        print('There are 45 days in the month')\n    elif monthnum3==46:\n        print('There are 46 days in the month')\n    elif monthnum3==47:\n        print('There are 47 days in the month')\n    elif monthnum3==48:\n        print('There are 48 days in the month')\n    elif monthnum3==49:\n        print('There are 49 days in the month')\n    elif monthnum3==50:\n        print('There are 50 days in the month')\n    elif monthnum3==51:\n        print('There are 51 days in the month')\n    elif monthnum3==52:\n        print('There are 52 days in the month')\n    elif monthnum3==53:\n        print('There are 53 days in the month')\n    elif monthnum3==54:\n        print('There are 54 days in the month')\n    elif monthnum3==55:\n        print('There are 55 days in the month')\n    elif monthnum3==56:\n        print('There are 56 days in the month')\n    elif monthnum3==57:\n        print('There are 57 days in the month')\n    elif monthnum3==58:\n        print('There are 58 days in the month')\n    elif monthnum3==59:\n        print('There are 59 days in the month')\n    elif monthnum3==60:\n        print('There are 60 days in the month')\n    elif monthnum3==61:\n        print('There are 61 days in the month')\n    elif monthnum3==62:\n        print('There are 62 days in the month')\n    elif monthnum3==63:\n        print('There are 63 days in the month')\n    elif monthnum3==64:\n        print('There are 64 days in the month')\n    elif monthnum3==65:\n        print('There are 65 days in the month')\n    elif monthnum3==66:\n        print('There are 66 days in the month')\n    elif monthnum3==67:\n        print('There are 67 days in the month')\n    elif monthnum3==68:\n        print('There are 68 days in the month')\n    elif monthnum3==69:\n        print('There are 69 days in the month')\n    elif monthnum3==70:\n        print('There are 70 days in the month')\n    elif monthnum3==71:\n        print('There are 71 days in the month')\n    elif monthnum3==72:\n        print('There are 72 days in the month')\n    elif monthnum3==73:\n        print('There are 73 days in the month')\n    elif monthnum3==74:\n        print('There are 74 days in the month')\n    elif monthnum3==75:\n        print('There are 75 days in the month')\n    elif monthnum3==76:\n        print('There are 76 days in the month')\n    elif monthnum3==77:\n        print('There are 77 days in the month')\n    elif monthnum3==78:\n        print('There are 78 days in the month')\n    elif monthnum3==79:\n        print('There are 79 days in the month')\n    elif monthnum3==80:\n        print('There are 80 days in the month')\n    elif monthnum3==81:\n        print('There are 81 days in the month')\n    elif monthnum3==82:\n        print('There are 82 days in the month')\n    elif monthnum3==83:\n        print('There are 83 days in the month')\n    elif monthnum3==84:\n        print('There are 84 days in the month')\n    elif monthnum3==85:\n        print('There are 85 days in the month')\n    elif monthnum3==86:\n        print('There are 86 days in the month')\n    elif monthnum3==87:\n        print('There are 87 days in the month')\n    elif monthnum3==88:\n        print('There are 88 days in the month')\n    elif monthnum3==89:\n        print('There are 89 days in the month')\n    elif monthnum3==90:\n        print('There are 90 days in the month')\n    elif monthnum3==91:\n        print('There are 91 days in the month')\n    elif monthnum3==92:\n        print('There are 92 days in the month')\n    elif monthnum3==93:\n        print('There are 93 days in the month')\n    elif monthnum3==94:\n        print('There are 94 days in the month')\n    elif monthnum3==95:\n        print('There are 95 days in the month')\n    elif monthnum3==96:\n        print('There are 96 days in the month')\n    elif monthnum3==97:\n        print('There are 97 days in the month')\n    elif monthnum3==98:\n        print('There are 98 days in the month')\n    elif monthnum3==99:\n        print('There are 99 days in the month')\n    elif monthnum3==100:\n        print('There are 100 days in the month')\n    elif monthnum3==101:\n        print('There are 101 days in the month')\n    elif monthnum3==102:\n        print('There are 102 days in the month')\n    elif monthnum3==103:\n        print('There are 103 days in the month')\n    elif monthnum3==104:\n        print('There are 104 days in the month')\n    elif monthnum3==105:\n        print('There are 105 days in the month')\n    elif monthnum3==106:\n        print('There are 106 days in the month')\n    elif monthnum3==107:\n        print('There are 107 days in the month')\n    elif monthnum3==108:\n        print('There are 108 days in the month')\n    elif monthnum3==109:\n        print('There are 109 days in the month')\n    elif monthnum3==110:\n        print('There are 110 days in the month')\n    elif monthnum3==111:\n        print('There are 111 days in the month')\n    elif monthnum3==112:\n        print('There are 112 days in the month')\n    elif monthnum3==113:\n        print('There are 113 days in the month')\n    elif monthnum3==114:\n        print('There are 114 days in the month')\n    elif monthnum3==115:\n        print('There are 115 days in the month')\n    elif monthnum3==116:\n        print('There are 116 days in the month')\n    elif monthnum3==117:\n        print('There are 117 days in the month')\n    elif monthnum3==118:\n        print('There are 118 days in the month')\n    elif monthnum3==119:\n        print('There are 119 days in the month')\n    elif monthnum3==120:\n        print('There are 120 days in the month')\n    elif monthnum3==121:\n        print('There are 121 days in the mont",
        "num_ids": 2001
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # your code here\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return 30\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return 31\n    elif monthnum3 == 2:\n        return 28\n    else:\n        return 0\n",
        "num_ids": 111
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    if monthnum3 == 1 or monthnum3 == 2 or monthnum3 == 12:\n        return False\n    else:\n        return True\n    \nmonthnum = int(input('Enter month number: '))\nif check_monthnumber_number(monthnum):\n    print('The month contains 30 days.')\nelse:\n    print('The month does not contain 30 days.')\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2000
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0:\n        return \"False\"\n    return \"True\"\n",
        "num_ids": 25
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    diff = 99999999\n    for i in range(n-1):\n        diff = min(diff,arr[i+1]-arr[i])\n    return diff\n",
        "num_ids": 48
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = 100000\n    min_id = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if min_diff > abs(arr[i]-arr[j]):\n                min_diff = abs(arr[i]-arr[j])\n                min_id = i\n                min_id = j\n    return min_id,min_diff\n",
        "num_ids": 99
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = 1e9\n    n = len(arr)\n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            if abs(arr[i] - arr[j]) < min_diff:\n                min_diff = abs(arr[i] - arr[j])\n",
        "num_ids": 81
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    max_value = max(arr)\n    min_value = min(arr)\n    diff_sum = max_value - min_value\n    min_diff = min_value\n    for i in range(diff_sum):\n        for j in range(n):\n            if arr[j] == min_value + i:\n                min_diff = min(min_diff,arr[j] - min_value)\n    return min_diff\n",
        "num_ids": 105
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    ans = arr[0] - arr[1]\n    for i in range(1,n-1):\n        if ans > arr[i+1]-arr[i]:\n            ans = arr[i+1]-arr[i]\n    return ans\n",
        "num_ids": 61
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    d = {}\n    for i in range(len(arr)):\n        if arr[i] not in d:\n            d[arr[i]] = 1\n        else:\n            d[arr[i]] += 1\n    min_diff = float('inf')\n    for i in d:\n        if d[i] > 1:\n            min_diff = min(min_diff, abs(d[i]-1))\n    if min_diff == float('inf'):\n        return 0\n    return min_diff\n    \n    \n",
        "num_ids": 127
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = 0\n    min_index = 0\n    \n    for i in range(n-1):\n        for j in range(i+1,n):\n            if abs(arr[i] - arr[j]) < min_diff:\n                min_diff = abs(arr[i] - arr[j])\n                min_index = i\n    return arr[min_index]\n",
        "num_ids": 94
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    \n    #since the array is already sorted in ascending order\n    if(n==2):\n        return 0\n    \n    if(n>2):\n        minimum=min(arr[0],arr[1])\n        diff=arr[n-1]-arr[n-2]\n        for i in range(2,n-1):\n            if(arr[i]-minimum>diff):\n                diff=arr[i]-minimum\n        return diff\n",
        "num_ids": 106
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n    for i in range(n-1): \n        for j in range(i+1,n): \n            min_diff = min(min_diff, arr[i]-arr[j]) \n    return min_diff \n",
        "num_ids": 66
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    print(\"Min difference is \", arr[1]-arr[0])\n",
        "num_ids": 24
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    counter = 0\n    for i in str:\n        if i.isdigit():\n            counter+=1\n        else:\n            pass\n    return counter",
        "num_ids": 38
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    cnt = 0\n    for i in str:\n        if i.isdigit():\n            cnt += 1\n    return cnt\n",
        "num_ids": 35
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    s = list(str)\n    c = 0\n    for i in s:\n        if int(i) in range(0,10):\n            c += 1\n    print(c)\n",
        "num_ids": 47
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isdigit():\n            count += 1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isdigit():\n            count+=1\n    print(count)\nnumber_ctr('23a53214'",
        "num_ids": 44
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    lst = []\n    for i in str:\n        if i.isdigit():\n            lst.append(i)\n    return len(lst)\n",
        "num_ids": 41
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n",
        "num_ids": 9
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for c in str:\n        if c.isdigit():\n            count+=1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n    \n    \n    \n    \ndef string_length(str):\n    '''\n    Write a python function to count the number of characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        count += 1\n    return count\n    \n    \n    \ndef text_to_number(str):\n    '''\n    Write a python function to convert a string into a number.\n    '''\n    for i in str:\n        if i.isdigit():\n            pass\n        else:\n            return False\n    return True\n    \n    \n    \ndef number_to_text(str):\n    '''\n    Write a python function to convert a number into a string.\n    '''\n    for i in str:\n        if i.isdigit():\n            pass\n        else:\n            return False\n    return True\n    \n    \n    \ndef string_to_binary(str):\n    '''\n    Write a python function to convert a string into a binary string.\n    '''\n    binary = []\n    for i in str:\n        binary.append(str(bin(ord(i)))[2:])\n    return ''.join(binary)\n    \n    \n    \ndef binary_to_string(str):\n    '''\n    Write a python function to convert a binary string into a string.\n    '''\n    str = str.replace('0b','')\n    return str\n    \n    \n    \ndef string_to_hexadecimal(str):\n    '''\n    Write a python function to convert a string into a hexadecimal string.\n    '''\n    str = str.replace('0x','')\n    return str\n    \n    \n    \ndef hexadecimal_to_string(str):\n    '''\n    Write a python function to convert a hexadecimal string into a string.\n    '''\n    return '0x'+str\n    \n    \n    \ndef number_to_binary(str):\n    '''\n    Write a python function to convert a number into its binary equivalent.\n    '''\n    binary = []\n    for i in range(0,len(str)):\n        binary.append(str[i])\n        binary.append('0')\n        if int(str[i]) == 1:\n            binary.append('1')\n        else:\n            binary.append('0')\n    binary = ''.join(binary)\n    return binary\n    \n    \n    \ndef binary_to_number(str):\n    '''\n    Write a python function to convert a binary string into its equivalent as a number.\n    '''\n    str = str.replace('1','')\n    str = str.replace('0','')\n    \n    if str[-1] == '1':\n        result = int(str[:-1],2) + 1\n    else:\n        result = int(str[:-1],2)\n    return result\n    \n    \n    \ndef binary_to_octal(str):\n    '''\n    Write a python function to convert a binary string into its octal equivalent.\n    '''\n    return ''.join(format(int(i),'8b') for i in str)\n    \n    \n    \ndef octal_to_binary(str):\n    '''\n    Write a python function to convert an octal string into its equivalent as a binary.\n    '''\n    str = str.replace('0','')\n    return '0'*(8-len(str))+str\n    \n    \n    \ndef binary_to_hexadecimal(str):\n    '''\n    Write a python function to convert a binary string into its hexadecimal equivalent.\n    '''\n    return ''.join(format(int(i),'b') for i in str)\n    \n    \n    \ndef hexadecimal_to_binary(str):\n    '''\n    Write a python function to convert an hexadecimal string into its equivalent as a binary.\n    '''\n    return ''.join(format(int(i),'x') for i in str)\n    \n    \n    \ndef hexadecimal_to_octal(str):\n    '''\n    Write a python function to convert a hexadecimal string into its octal equivalent.\n    '''\n    return ''.join(format(int(i),'o') for i in str)\n    \n    \n    \ndef octal_to_hexadecimal(str):\n    '''\n    Write a python function to convert an octal string into its hexadecimal equivalent.\n    '''\n    return ''.join(format(int(i),'x') for i in str)\n    \n    \n    \ndef octal_to_binary(str):\n    '''\n    Write a python function to convert an octal string into its binary equivalent.\n    '''\n    return ''.join(format(int(i),'b') for i in str)\n    \n    \n    \ndef binary_to_octal(str):\n    '''\n    Write a python function to convert a binary string into its octal equivalent.\n    '''\n    return ''.join(format(int(i),'o') for i in str)\n    \n    \n    \ndef binary_to_hexadecimal(str):\n    '''\n    Write a python function to convert a binary string into its hexadecimal equivalent.\n    '''\n    return ''.join(format(int(i),'x') for i in str)\n    \n    \n    \ndef hexadecimal_to_binary(str):\n    '''\n    Write a python function to convert a hexadecimal string into its binary equivalent.\n    '''\n    return ''.join(format(int(i),'b') for i in str)\n    \n    \n    \ndef hexadecimal_to_octal(str):\n    '''\n    Write a python function to convert a hexadecimal string into its octal equivalent.\n    '''\n    return ''.join(format(int(i),'o') for i in str)\n    \n    \n    \ndef octal_to_hexadecimal(str):\n    '''\n    Write a python function to convert an octal string into its hexadecimal equivalent.\n    '''\n    return ''.join(format(int(i),'x') for i in str)\n    \n    \n    \ndef number_to_octal(str):\n    '''\n    Write a python function to convert a number into its octal equivalent.\n    '''\n    octal = []\n    for i in str:\n        octal.append(oct(ord(i)))\n    return ''.join(octal)\n    \n    \n    \ndef octal_to_number(str):\n    '''\n    Write a python function to convert a octal string into its number equivalent.\n    '''\n    octal = []\n    for i in str:\n        octal.append(oct(ord(i)))\n    octal.remove('0')\n    octal.remove('0')\n    return ''.join(octal)\n    \n    \n    \ndef octal_to_binary(str):\n    '''\n    Write a python function to convert an octal string into its binary equivalent.\n    '''\n    binary = []\n    for i in str:\n        binary.append(oct(ord(i)))\n    binary.remove('0')\n    binary.remove('0')\n    return ''.join(binary)\n    \n    \n    \ndef binary_to_octal(str):\n    '''\n    Write a python function to convert a binary string into its octal equivalent.\n    '''\n    octal = []\n    for i in str:\n        octal.append(oct(ord(i)))\n    octal.remove('0')\n    octal.remove('0')\n    return ''.join(octal)\n    \n    \n    \ndef octal_to_hexadecimal(str):\n    '''\n    Write a python function to convert an octal string into its hexadecimal equivalent.\n    '''\n    return ''.join(format(int(i),'x') for i in str)\n    \n    \n    \ndef hexadecimal_to_octal(str):\n    '''\n    Write a python function to convert an hexadecimal string into its octal equivalent.\n    '''\n    return ''.join(format(int(i),",
        "num_ids": 14
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return False\n    i = 1\n    while i < n and i <= 2**(len(str(n))-1):\n        if n % i == 0:\n            if is_polite(n/i):\n                return True\n        i += 1\n    return False\n",
        "num_ids": 73
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0:\n        return \"1\"\n    elif n == 1:\n        return \"11\"\n    if n == 2:\n        return \"121\"\n    res = 0\n    while n > 0: \n        res = res*10 + 1\n        n -= 1\n    res = str(res)\n    n = res.count(\"1\")\n    if n == 1:\n        return \"121\"\n    elif n == 2:\n        return \"11\"\n    else:\n        return res \n",
        "num_ids": 123
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    if n%2 == 0: \n        return (n//2) * 2 + 1\n    else: \n        return n * 3 + 1\n",
        "num_ids": 62
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    l = 1\n    r = n\n    while l <= r:\n        mid = (l+r)//2\n        if mid % 2!= 0:\n            mid -= 1\n        if mid*2 > n:\n            return mid\n        elif mid*2 < n:\n            if mid*2 == n:\n                return mid\n            else:\n                r = mid - 1\n        else:\n            return mid\n",
        "num_ids": 100
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    i = 1\n    polite = 0\n    while i <= n:\n        polite += 1/i\n        i += 1\n    return polite\ndef is_polite_using_recursion(n):\n    '''\n    Write a recursive function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n <= 0:\n        return None\n    else:\n        return 1 / (n * (n + 1))\n    #code here\n",
        "num_ids": 35
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    x = 0\n    while(x*x<=n):\n        y = x+1\n        while(y*y<n):\n            z = y+1\n            while(z*z<n):\n                if (z*z+y*y+x*x) == n:\n                    return n\n                z += 1\n            y += 1\n        x += 1\n    return -1\nprint(is_polite(16))\ndef polite_numbers(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n = n-1\n    l = n + 1\n    h = n + 1\n    while (l * l!= n):\n        m = l\n        while (m * m < n):\n            n = n - m * m\n            m = m + 1\n        l = l + 1\n        while (l * l <= n):\n            m = n\n            while (m * m >= n):\n                n = n - m * m\n                m = m - 1\n            l = l + 1\n    return n+1\nprint(polite_numbers(16))\ndef palindrome(s):\n    '''\n    Write a function to check whether a given string is palindrome or not.\n    '''\n    reversed_string = \"\"\n    for i in range(len(s) - 1, -1, -1):\n        reversed_string += s[i]\n    return s == reversed_string\ns = \"madam\"\nprint(palindrome(s))\ndef palindrome1(s):\n    '''\n    Write a function to check whether a given string is palindrome or not.\n    '''\n    reversed_string = s[::-1]\n    return s == reversed_string\ns = \"madam\"\nprint(palindrome1(s))\ndef palindrome2(s):\n    '''\n    Write a function to check whether a given string is palindrome or not.\n    '''\n    if len(s) == 0:\n        return True\n    if len(s) == 1:\n        return True\n    if len(s) == 2:\n        return s[0] == s[1] and s[0] == s[1]\n    if len(s) >= 3:\n        if s[0] == s[1]:\n            return palindrome2(s[1:])\n        else:\n            return False\nprint(palindrome2(s))\ndef palindrome3(s):\n    '''\n    Write a function to check whether a given string is palindrome or not.\n    '''\n    l, r = 0, len(s)-1\n    while l < r:\n        if s[l]!= s[r]:\n            return False\n        l += 1\n        r -= 1\n    return True\nprint(palindrome3(s))\ndef palindrome4(s):\n    '''\n    Write a function to check whether a given string is palindrome or not.\n    '''\n    return s == s[::-1]\ns = \"madam\"\nprint(palindrome4(s))\ndef palindrome5(s):\n    '''\n    Write a function to check whether a given string is palindrome or not.\n    '''\n    s1 = \"\"\n    for i in range(len(s)):\n        if s[i]!= \" \":\n            s1 = s1 + s[i]\n    return s == s1\ns = \"   \"\nprint(palindrome5(s))\ndef palindrome6(s):\n    '''\n    Write a function to check whether a given string is palindrome or not.\n    '''\n    l, r = 0, len(s)-1\n    while l < r:\n        if s[l]!= s[r]:\n            return False\n        l += 1\n        r -= 1\n    return True\ns = \"kakakakakakakaka\"\nprint(palindrome6(s))\ndef palindrome7(s):\n    '''\n    Write a function to check whether a given string is palindrome or not.\n    '''\n    if len(s) == 0:\n        return True\n    if len(s) == 1:\n        return True\n    if len(s) == 2:\n        return s[0] == s[1] and s[0] == s[1]\n    if len(s) >= 3:\n        if s[0] == s[1]:\n            return palindrome7(s[1:])\n        else:\n            return False\nprint(palindrome7(s))\ndef palindrome8(s):\n    '''\n    Write a function to check whether a given string is palindrome or not.\n    '''\n    s = s.lower()\n    if len(s) == 0:\n        return True\n    if len(s) == 1:\n        return True\n    if len(s) == 2:\n        return s[0] == s[1] and s[0] == s[1]\n    if len(s) >= 3:\n        if s[0] == s[1]:\n            return palindrome8(s[1:])\n        else:\n            return False\nprint(palindrome8(s))\ndef palindrome9(s):\n    '''\n    Write a function to check whether a given string is palindrome or not.\n    '''\n    s = s.lower()\n    if len(s) == 0:\n        return True\n    if len(s) == 1:\n        return True\n    if len(s) == 2:\n        return s[0] == s[1] and s[0] == s[1]\n    if len(s) >= 3:\n        if s[0] == s[1]:\n            return palindrome9(s[1:])\n        else:\n            return False\nprint(palindrome9(s))\ndef palindrome10(s):\n    '''\n    Write a function to check whether a given string is palindrome or not.\n    '''\n    s = s.lower()\n    if len(s) == 0:\n        return True\n    if len(s) == 1:\n        return True\n    if len(s) == 2:\n        return s[0] == s[1] and s[0] == s[1]\n    if len(s) >= 3:\n        if s[0] == s[1]:\n            return palindrome10(s[1:])\n        else:\n            return False\nprint(palindrome10(s))\ndef palindrome11(s):\n    '''\n    Write a function to check whether a given string is palindrome or not.\n    '''\n    s = s.lower()\n    if len(s) == 0:\n        return True\n    if len(s) == 1:\n        return True\n    if len(s) == 2:\n        return s[0] == s[1] and s[0] == s[1]\n    if len(s) >= 3:\n        if s[0] == s[1]:\n            return palindrome11(s[1:])\n        else:\n            return False\nprint(palindrome11(s))\ndef palindrome12(s):\n    '''\n    Write a function to check whether a given string is palindrome or not.\n    '''\n    s = s.lower()\n    if len(s) == 0:\n        return True\n    if len(s) == 1:\n        return True\n    if len(s) == 2:\n        return s[0] == s[1] and s[0] == s[1]\n    if len(s) >= 3:\n        if s[0] == s[1]:\n            return palindrome12(s[1:])\n        else:\n            return False\nprint(palindrome12(s))\ndef palindrome13(s):\n    '''\n    Write a function to check whether a given string is palindrome or not.\n    '''\n    s = s.lower()\n    if len(s) == 0:\n        return True\n    if len(s) == 1:\n        return True\n    if len(s) == 2:\n        return s[0] == s[1] and s[0] == s[",
        "num_ids": 67
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_numbers = [1, 3, 5, 7, 8, 10, 12]\n    if n > len(polite_numbers):\n        return -1\n    return polite_numbers[n - 1]\n",
        "num_ids": 55
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 0\n    if n == 2: \n        return 1\n    else: \n        return 2 * (n - 1) + 1\n    ",
        "num_ids": 44
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #solution: for the odd nth number, n-1 should be the quotient of nth number and 2 \n    #and for even nth number, n-2 should be the quotient of nth number and 2\n",
        "num_ids": 54
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n <= 1: \n        return False\n    if n == 2: \n        return True\n    if n == 3: \n        return True\n    return (is_polite(n-1) and is_polite(n-2)) or (is_polite(n-2) and is_polite(n-3))\n",
        "num_ids": 82
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    for i in range(len(l1)-1):\n        yield(l1[i], l1[i+1])\n",
        "num_ids": 33
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1 = sorted(l1)\n    d = {}\n    for i in range(len(l1)):\n        if l1[i] in d:\n            d[l1[i]].append(i)\n        else:\n            d[l1[i]] = []\n            d[l1[i]].append(i)\n    new_dict = {}\n    for key, value in d.items():\n        new_dict[key] = value[1:]\n    final_list = []\n    for key, value in new_dict.items():\n        final_list.append(list(zip(value, value[1:])))\n    return final_list\n    \ndef pair_wise_indices(l1, v):\n    '''\n    Write a function that returns the indices of all occurrences of a given value in a list.\n    '''\n    l1 = sorted(l1)\n    d = {}\n    for i in range(len(l1)):\n        if l1[i] in d:\n            d[l1[i]].append(i)\n        else:\n            d[l1[i]] = []\n            d[l1[i]].append(i)\n    new_dict = {}\n    for key, value in d.items():\n        new_dict[key] = value[1:]\n    final_list = []\n    for key, value in new_dict.items():\n        if v in value:\n            final_list.append(value.index(v))\n    return final_list\n",
        "num_ids": 162
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # if len(l1) < 2:\n    #     return []\n    # res = []\n    # i = 0\n    # j = 1\n    # while j < len(l1):\n    #     res.append((l1[i],l1[j]))\n    #     i += 2\n    #     j += 2\n    # return res\n",
        "num_ids": 87
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(i, i+1) for i in range(len(l1))]\n",
        "num_ids": 23
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return l1\n    res = []\n    for i in range(len(l1)):\n        if i == len(l1)-1:\n            break\n        res.append((l1[i], l1[i+1]))\n    return res\n",
        "num_ids": 74
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [[x,y] for x,y in zip(l1,l1[1:])]\n",
        "num_ids": 27
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n=len(l1)\n    #print(l1)\n    pairs=[]\n    for i in range(n):\n        for j in range(i+1,n):\n            pairs.append((l1[i],l1[j]))\n    return pairs\n",
        "num_ids": 69
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pw = []\n    for i in range(len(l1)-1):\n        pw.append((l1[i], l1[i+1]))\n    return pw\n",
        "num_ids": 47
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append([l1[i],l1[i+1]])\n    return result\n",
        "num_ids": 44
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    i=0\n    pair_list = []\n    while i < len(l1)-1:\n        pair_list.append([l1[i],l1[i+1]])\n        i+=2\n    return pair_list\n        \ndef find_duplicate(l1):\n    '''\n    Write a function to find duplicate number in a given list.\n    '''\n    l1_dict = {}\n    for i in l1:\n        if i in l1_dict:\n            l1_dict[i] += 1\n        else:\n            l1_dict[i] = 1\n    for key,value in l1_dict.items():\n        if value > 1:\n            return key\n        \n        \ndef find_duplicate_in_sorted_list(l1):\n    '''\n    Write a function to find duplicate number in a given list.\n    '''\n    for i in range(len(l1)-1):\n        if l1[i] == l1[i+1]:\n            return l1[i]\n            \ndef length_of_longest_substring(s):\n    '''\n    Write a function to find length of the longest substring.\n    '''\n    max_len = 0\n    curr_len = 0\n    seen = set()\n    for i in range(len(s)):\n        curr_len += 1\n        while s[i] in seen:\n            seen.remove(s[i-curr_len])\n            curr_len -= 1\n        if curr_len > max_len:\n            max_len = curr_len\n        seen.add(s[i])\n    return max_len\n    \ndef find_substring(s,x):\n    '''\n    Write a function to find the starting and ending position of first occurrence of substring x in a given string.\n    '''\n    start_pos = -1\n    end_pos = -1\n    for i in range(len(s)):\n        if s[i:i+len(x)] == x:\n            start_pos = i\n            end_pos = start_pos + len(x)\n            break\n    return start_pos,end_pos\n    \n    \ndef find_middle(s,substring):\n    '''\n    Write a function to find the middle character of a substring.\n    '''\n    start_pos = s.find(substring)\n    if start_pos!= -1:\n        return start_pos+len(substring)//2\n    else:\n        return -1\n    \ndef generate_shortest_superstring(s1,s2):\n    '''\n    Write a function to find the shortest superstring which is formed from the given two strings.\n    '''\n    if len(s1) > len(s2):\n        s1,s2 = s2,s1\n    l1 = len(s1)\n    l2 = len(s2)\n    m = l1 if l1 < l2 else l2\n    \n    i=0\n    while i < m:\n        if s1[i] == s2[i]:\n            i+=1\n        else:\n            break\n    \n    if i == m:\n        return s1+s2\n    \n    k = 0\n    l = 0\n    while l < m:\n        if s1[l] == s2[k]:\n            l+=1\n            k+=1\n        else:\n            k = 0\n            l+=1\n    return s1[:l] + s2[:k]\n    \ndef num_of_duplicates(l1):\n    '''\n    Write a function to find number of duplicates in a given list.\n    '''\n    l1_dict = {}\n    for i in l1:\n        if i in l1_dict:\n            l1_dict[i] += 1\n        else:\n            l1_dict[i] = 1\n    return len(l1_dict)\n    \ndef test_num_of_duplicates():\n    assert(num_of_duplicates([1,2,3,4]) == 2)\n    assert(num_of_duplicates([1,2,3,4,4]) == 2)\n    assert(num_of_duplicates([1,2,3,4,3]) == 1)\n    assert(num_of_duplicates([1,2,3,3]) == 1)\n    assert(num_of_duplicates([1,2,3,3,3]) == 1)\n    \ndef all_distinct(s):\n    '''\n    Write a function to find if all elements of a string are distinct.\n    '''\n    s_list = s.split()\n    l = []\n    for i in s_list:\n        if i in l:\n            return False\n        else:\n            l.append(i)\n    return True\n    \ndef all_distinct_char(s):\n    '''\n    Write a function to find if all characters of a string are distinct.\n    '''\n    s_list = s.split()\n    l = {}\n    for i in s_list:\n        for j in i:\n            if j in l:\n                l[j]+=1\n            else:\n                l[j] = 1\n    for j in l.values():\n        if j!=1:\n            return False\n    return True\n",
        "num_ids": 85
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # return len(arr) - len(set(arr))\n    # the below method is using a dictionary\n",
        "num_ids": 27
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count\n",
        "num_ids": 67
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    a = {}\n    for i in arr:\n        if i in a:\n            a[i] += 1\n        else:\n            a[i] = 1\n    count = 0\n    for i in a:\n        if sum-i in a:\n            count += a[i]\n            count += a[sum-i]\n    print(count)\n",
        "num_ids": 86
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    #Create a dictionary with key value pairs for the input list\n    dic = {}\n    for i in arr:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n",
        "num_ids": 59
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n",
        "num_ids": 61
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i]+arr[j] == sum:\n                pairs += 1\n    return pairs\n",
        "num_ids": 56
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs += 1\n    return pairs\n",
        "num_ids": 61
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    arr_dict = {}\n    count = 0\n    for i in arr:\n        if i in arr_dict:\n            arr_dict[i] += 1\n        else:\n            arr_dict[i] = 1\n    for i in arr_dict:\n        if i + sum in arr_dict:\n            count += 1\n    return count\n",
        "num_ids": 83
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # your code here\n    # return 0 if the list is empty\n    # return -1 if sum < 0\n    if len(arr) == 0:\n        return -1\n    # create a hash map to store the count of pairs\n    m = {}\n    # loop over the arr to get the count\n    for i in arr:\n        # if the sum is in the map, increment\n        if sum-i in m:\n            m[sum-i] += 1\n        # else add to the map and set count to 1\n        else:\n            m[i] = 1\n    # return the count of pairs\n    return m.get(sum, -1)\n",
        "num_ids": 155
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3 = []\n    for i in li1:\n        if not i in li2:\n            li3.append(i)\n    return li3\n",
        "num_ids": 39
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li1 = set(li1)\n    li2 = set(li2)\n    return li1.symmetric_difference(li2)\n    \nif __name__ == \"__main__\":\n    print(Diff([1,2,3],[1,2,3])",
        "num_ids": 68
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3 = []\n    for i in li1:\n        if i not in li2:\n            li3.append(i)\n    for j in li2:\n        if j not in li1:\n            li3.append(j)\n    return li3\n",
        "num_ids": 65
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    for x in li1:\n        if x not in li2:\n            return x\n",
        "num_ids": 23
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    #Difference between two lists\n    li_diff = [value for value in li1 if value not in li2]\n    return li_diff\n",
        "num_ids": 36
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1)-set(li2)))\n",
        "num_ids": 18
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li = []\n    li = li1 - li2\n    return li\n",
        "num_ids": 20
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li = []\n    for i in li1:\n        if i not in li2:\n            li.append(i)\n    for j in li2:\n        if j not in li1:\n            li.append(j)\n    return li\n",
        "num_ids": 61
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1).symmetric_difference(set(li2)))\n",
        "num_ids": 24
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = []\n    for i in li1:\n        if i not in li2:\n            li_dif.append(i)\n    for i in li2:\n        if i not in li1:\n            li_dif.append(i)\n    return li_dif\n",
        "num_ids": 73
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if(i%2!= 0):\n            sum = sum+i**4\n    return sum\n",
        "num_ids": 44
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    \n    odd_nums = range(1, n + 1, 2)\n    \n    return sum([i**4 for i in odd_nums])\n    \n    # any other way?\n    #return sum(i**4 for i in range(1, n + 1, 2))\n",
        "num_ids": 70
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_num_list = []\n    for i in range(1,n+1,2):\n        if i % 2!=0:\n            odd_num_list.append(i**4)\n    odd_sum = sum(odd_num_list)\n    return odd_sum\nprint(odd_num_sum(10))\n",
        "num_ids": 81
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if (i%2!=0) :\n            sum += i**3\n    return sum\n",
        "num_ids": 44
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    odd_nums = []\n    for i in range(1, n+1) :\n        if i % 2!= 0 :\n            odd_nums.append(i)\n            total = total + i**2\n    print('Sum of fourth power of ',odd_nums,' is : ',total)\n    return total\n",
        "num_ids": 83
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    \n    odd_num = 0\n    total_odd_num = 0\n    while (odd_num <= n):\n        total_odd_num += (odd_num ** 3)\n        odd_num += 2\n    return total_odd_num\n",
        "num_ids": 60
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = n + 1\n    sum = 0\n    while n!= 1:\n        if n % 2!= 0:\n            sum = sum + n\n        n = n - 1\n    return sum\n",
        "num_ids": 50
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0 \n    for i in range(n) :\n        if (i+1) % 2!= 0 :\n            sum += i**4\n    return sum\n",
        "num_ids": 43
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    \n    sum = 0\n    for i in range(1,n+1):\n        if i%2 == 1:\n            sum = sum + i**4\n    return sum\nodd_num_sum(10)\n",
        "num_ids": 53
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_nums = []\n    sum_odd_nums = 0\n    for i in range(1,n+1):\n        if i % 2!= 0:\n            odd_nums.append(i)\n    for j in odd_nums:\n        sum_odd_nums += j**2\n    print(sum_odd_nums)\n    return sum_odd_nums\n",
        "num_ids": 96
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if(exp==None):\n        return True\n",
        "num_ids": 14
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if exp[0] == \"(\" and exp[-1] == \")\":\n        return True\n    if len(exp) <= 1:\n        return False\n    if exp[0] == \"(\" and exp[-1] == \")\":\n        return True\n    if exp[0] == \"(\" and exp[-1]!= \")\":\n        return False\n    if exp[0]!= \"(\" and exp[-1] == \")\":\n        return False\n    if exp[0]!= \"(\" and exp[-1]!= \")\":\n        return True\n    if exp[1] == \"(\" and exp[-1] == \")\":\n        return True\n    if exp[1]!= \"(\" and exp[-1] == \")\":\n        return False\n    if exp[1]!= \"(\" and exp[-1]!= \")\":\n        return True\n    if exp[1] == \"(\" and exp[-1]!= \")\":\n        return False\n    if len(exp) > 2:\n        if exp[1] == \"(\" and exp[-1] == \")\":\n            return False\n    if len(exp) > 3:\n        if exp[1] == \"(\" and exp[-1] == \")\":\n            return False\n    if len(exp) > 4:\n        if exp[1] == \"(\" and exp[-1] == \")\":\n            return False\n    if exp[1] == \"(\" and exp[-1] == \")\":\n        return True\n    if exp[1]!= \"(\" and exp[-1] == \")\":\n        return False\n    if exp[1]!= \"(\" and exp[-1]!= \")\":\n        return True\n    if exp[2] == \"(\" and exp[-1] == \")\":\n        return True\n    if exp[2]!= \"(\" and exp[-1] == \")\":\n        return False\n    if exp[2]!= \"(\" and exp[-1]!= \")\":\n        return True\n    if exp[2] == \"(\" and exp[-1]!= \")\":\n        return False\n    if exp[3] == \"(\" and exp[-1] == \")\":\n        return False\n    if exp[3]!= \"(\" and exp[-1] == \")\":\n        return True\n    if exp[3]!= \"(\" and exp[-1]!= \")\":\n        return True\n    if exp[3] == \"(\" and exp[-1]!= \")\":\n        return False\n    if exp[4] == \"(\" and exp[-1] == \")\":\n        return False\n    if exp[4]!= \"(\" and exp[-1] == \")\":\n        return True\n    if exp[4]!= \"(\" and exp[-1]!= \")\":\n        return True\n    if exp[4] == \"(\" and exp[-1]!= \")\":\n        return False\n    return False\n",
        "num_ids": 721
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    q = deque()\n    open_brackets = {'(':')', '[':']', '{':'}'}\n    close_brackets = {'(':')', '[':']', '{':'}'}\n    for ch in exp:\n        if ch in open_brackets.keys():\n            q.append(ch)\n        elif ch in close_brackets.keys():\n            if not q:\n                return False\n            c = q.pop()\n            if open_brackets[c]!= ch:\n                return False\n    return not q\n",
        "num_ids": 138
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    brackets = {\n        '{': '}',\n        '[': ']',\n        '(': ')'\n    }\n    for char in exp:\n        if char in brackets:\n            stack.append(char)\n        elif not stack or brackets.get(char)!= stack.pop():\n            return False\n    return len(stack) == 0\n",
        "num_ids": 92
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in exp:\n        if i == \"(\" or i == \"{\" or i == \"[\":\n            stack.append(i)\n        elif i == \")\":\n            if not stack or stack[-1]!= \"(\":\n                return False\n            else:\n                stack.pop()\n        elif i == \"}\":\n            if not stack or stack[-1]!= \"{\":\n                return False\n            else:\n                stack.pop()\n        elif i == \"]\":\n            if not stack or stack[-1]!= \"[\":\n                return False\n            else:\n                stack.pop()\n    return not stack\ndef check_balanced(s):\n    # Write your code here\n    stack = []\n    for i in s:\n        if i == '(' or i == '{' or i == '[':\n            stack.append(i)\n        elif i == ')':\n            if not stack or stack[-1]!= '(':\n                return False\n            else:\n                stack.pop()\n        elif i == '}':\n            if not stack or stack[-1]!= '{':\n                return False\n            else:\n                stack.pop()\n        elif i == ']':\n            if not stack or stack[-1]!= '[':\n                return False\n            else:\n                stack.pop()\n    if not stack:\n        return True\n    return False\ndef is_number(string):\n    try:\n        float(string)\n        return True\n    except ValueError:\n        return False\ndef infixToPostfix(expr):\n    \"\"\"\n    https://leetcode.com/problems/basic-calculator/\n    \"\"\"\n    # expr = \"2*+1\"\n    expr = expr.replace(\" \", \"\")\n    stack = []\n    for i in expr:\n        if is_number(i):\n            stack.append(i)\n        elif i == '*' or i == '+' or i == '-':\n            while stack and (is_number(stack[-1]) or stack[-1] == '('):\n                postfix.append(stack.pop())\n            stack.append(i)\n        elif i == '(':\n            stack.append(i)\n        elif i == ')':\n            while stack and stack[-1]!= '(':\n                postfix.append(stack.pop())\n            stack.pop()\n    while stack:\n        postfix.append(stack.pop())\n    return postfix\n",
        "num_ids": 600
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_brace = ['{','[','(']\n    close_brace = ['}',']',')']\n",
        "num_ids": 28
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    lookup = {'{': '}', '(': ')', '[': ']', '<': '>'}\n    for i in exp:\n        if i in lookup:\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if lookup[top]!= i:\n                    return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 125
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    open_brackets = [\"(\", \"{\", \"[\"]\n    close_brackets = [\")\", \"}\", \"]\"]\n    \n    for char in exp:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in close_brackets:\n            if len(stack) == 0:\n                return False\n            if (close_brackets.index(char)!= open_brackets.index(stack[-1])):\n                return False\n            else:\n                stack.pop()\n    return True\n",
        "num_ids": 134
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    n_op = 0\n    # stack of characters in the expression\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n        elif i == '*' or i == '+' or i == '/':\n            n_op = i\n            if len(stack) == 0:\n                return False\n            if (stack[-1] == '*' and n_op == '+') or (stack[-1] == '*' and n_op == '/') or (stack[-1] == '+' and n_op == '*'):\n                stack.pop()\n            else:\n                return False\n    return True if len(stack) == 0 else False\n",
        "num_ids": 203
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_p = deque()\n    close_p = deque()\n    for c in exp:\n        if c == '(':\n            open_p.append(c)\n        elif c == ')':\n            close_p.append(c)\n        elif len(open_p) > 0:\n            open_p.pop()\n        elif len(close_p) > 0:\n            close_p.pop()\n        else:\n            return False\n",
        "num_ids": 113
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    from collections import defaultdict\n    seen = defaultdict(int)\n    for word in test_str.split(\" \"):\n        seen[word] += 1\n    words = []\n    for word in test_str.split(\" \"):\n        if seen[word] == K:\n            words.append(word)\n    words = \" \".join(words)\n    return words\n",
        "num_ids": 89
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    length = {}\n    for i in test_str.split():\n        length[i] = len(i)\n    del_list = []\n    for i in length:\n        if length[i] == K:\n            del_list.append(i)\n    return''.join(del_list)\n",
        "num_ids": 73
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # if (K == 1):\n    #     for i in range(len(test_str)):\n    #         if test_str[i] not in test_str[:i]:\n    #             test_str = test_str[:i]\n    #         else:\n    #             break\n    # elif (K == 2):\n    #     for i in range(len(test_str)):\n    #         if test_str[i] not in test_str[:i]:\n    #             test_str = test_str[:i]\n    #         elif test_str[i] not in test_str[i+1:]:\n    #             test_str = test_str[:i]\n    #         else:\n    #             break\n    # else:\n    #     for i in range(len(test_str)):\n    #         if test_str[i] not in test_str[:i]:\n    #             test_str = test_str[:i]\n    #         elif test_str[i] not in test_str[i+1:]:\n    #             test_str = test_str[:i]\n    #         elif test_str[i] not in test_str[i+2:]:\n    #             test_str = test_str[:i]\n    #         else:\n    #             break\n    # return test_str\n",
        "num_ids": 333
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    #test_str = 'abcdabcdddfffgggggggg'\n    #K = 2\n    #Expected output: 'abcd'\n    \n    #test_str = 'abcdabcdddfffgggggggg'\n    #K = 4\n    #Expected output: 'abcd'\n",
        "num_ids": 76
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split()\n    for i in range(len(test_str)):\n        if len(test_str[i]) == K:\n            test_str.pop(i)\n    return''.join(test_str)\n",
        "num_ids": 62
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    #list_of_k_length_words = []\n    #for word in test_str.split():\n    #    if len(word) == K:\n    #        list_of_k_length_words.append(word)\n    #\n    #for word in list_of_k_length_words:\n    #    test_str = test_str.replace(word, '')\n    \n    if len(test_str) == 0:\n        return test_str\n    \n    test_str = test_str.split()\n    new_test_str = []\n    for word in test_str:\n        if len(word) == K:\n            new_test_str.append(word)\n    return \" \".join(new_test_str)\n",
        "num_ids": 182
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    my_list = test_str.split()\n    for i in my_list:\n        if len(i) == K:\n            my_list.remove(i)\n    return my_list\n",
        "num_ids": 49
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if K < 0:\n        return\n    for word in test_str.split(' '):\n        if len(word) == K:\n            test_str = test_str.replace(word + \" \", \"\")\n    return test_str\n",
        "num_ids": 59
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    word_list = test_str.split()\n    new_list = []\n    for word in word_list:\n        if len(word) == K:\n            continue\n        else:\n            new_list.append(word)\n    return new_list\n",
        "num_ids": 63
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # SOLUTION-1: Using Sliding Window Technique\n    # Time Complexity: O(n)\n    # Space Complexity: O(n)\n",
        "num_ids": 37
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    text = text.split()\n    pattern = pattern.split()\n    # \n    for i in range(len(text)):\n        for j in range(len(pattern)):\n            if text[i] == pattern[j]:\n                print(text[i], \"occurs at index:\",i)\n                #position = i\n                #return (text[i],position)\n    # if pattern not found, return None\n    return None\n    \ndef total_occur(text,pattern):\n    '''\n    Write a function to find the total number of occurrences of the pattern in the text.\n    '''\n    # Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    text = text.split()\n    pattern = pattern.split()\n    result = []\n    # \n    for i in range(len(text)):\n        for j in range(len(pattern)):\n            if text[i] == pattern[j]:\n                print(text[i], \"occurs at index:\",i)\n                #position = i\n                #result.append(text[i])\n                #return (text[i],position)\n    # if pattern not found, return None\n    return None\n    \ndef not_matched_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    text = text.split()\n    pattern = pattern.split()\n    # \n    for i in range(len(text)):\n        for j in range(len(pattern)):\n            if text[i]!= pattern[j]:\n                print(text[i], \"occurs at index:\",i)\n                #position = i\n                #return (text[i],position)\n    # if pattern not found, return None\n    return None\n    \ndef check_duplicate_word(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    text = text.split()\n    pattern = pattern.split()\n    # \n    for i in range(len(text)):\n        for j in range(len(pattern)):\n            if text[i] == pattern[j] and text[i+1] == pattern[j]:\n                print(text[i], \"occurs at index:\",i+1)\n                #position = i\n                #return (text[i],position)\n    # if pattern not found, return None\n    return None\n    \ndef check_duplicate_word_1(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    text = text.split()\n    pattern = pattern.split()\n    # \n    for i in range(len(text)):\n        for j in range(len(pattern)):\n            if text[i] == pattern[j] and text[i+1] == pattern[j]:\n                print(text[i], \"occurs at index:\",i+1)\n                #position = i\n                #return (text[i],position)\n    # if pattern not found, return None\n    return None\n    \ndef check_duplicate_word_2(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    text = text.split()\n    pattern = pattern.split()\n    # \n    for i in range(len(text)):\n        for j in range(len(pattern)):\n            if text[i] == pattern[j] and text[i+1] == pattern[j] and text[i+2] == pattern[j]:\n                print(text[i], \"occurs at index:\",i+2)\n                #position = i\n                #return (text[i],position)\n    # if pattern not found, return None\n    return None\n    \ndef not_matched_substring_1(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    text = text.split()\n    pattern = pattern.split()\n    # \n    for i in range(len(text)):\n        for j in range(len(pattern)):\n            if text[i]!= pattern[j] and text[i+1] == pattern[j]:\n                print(text[i], \"occurs at index:\",i+1)\n                #position = i\n                #return (text[i],position)\n    # if pattern not found, return None\n    return None\n    \ndef not_matched_substring_2(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    text = text.split()\n    pattern = pattern.split()\n    # \n    for i in range(len(text)):\n        for j in range(len(pattern)):\n            if text[i]!= pattern[j] and text[i+1] == pattern[j]:\n                print(text[i], \"occurs at index:\",i+1)\n                #position = i\n                #return (text[i],position)\n    # if pattern not found, return None\n    return None\n    \ndef not_matched_substring_3(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    text = text.split()\n    pattern = pattern.split()\n    # \n    for i in range(len(text)):\n        for j in range(len(pattern)):\n            if text[i]!= pattern[j] and text[i+1] == pattern[j]:\n                print(text[i], \"occurs at index:\",i+1)\n                #position = i\n                #return (text[i],position)\n    # if pattern not found, return None\n    return None\n    \ndef not_matched_substring_4(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    text = text.split()\n    pattern = pattern.split()\n    # \n    for i in range(len(text)):\n        for j in range(len(pattern)):\n            if text[i]!= pattern[j] and text[i]!= pattern[j] and text[i+1] == pattern[j]:\n                print(text[i], \"occurs at index:\",i+1)\n                #position = i\n                #return (text[i],position)\n    # if pattern not found, return None\n    return None\n    \ndef not_matched_substring_5(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    text = text.split()\n    pattern = pattern.split()\n    # \n    for i in range(len(text)):\n        for j in range(len(pattern)):\n            if text[i]!= pattern[j] and text[i+1] == pattern[j]:\n                print(text[i], \"occurs at index:\",i+1)\n                #position = i\n                #return (text[i],position)\n    # if pattern not found, return None\n    return None\n    \ndef not_matched_substring_6(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    text = text.split()\n    pattern = pattern.split()\n    # \n    for i in range(len(text)):\n        for j in range(len(pattern)):\n            if text[i] == pattern[j]:\n                print(text[i], \"occurs at index:\",i)\n                #position = i\n                #return (text[i],position)\n    # if pattern not found, return None\n    return None\n    \ndef not_matched_substring_7(tex",
        "num_ids": 119
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pass\n    if not text or not pattern or len(pattern)<1 or len(text)<1:\n        return None\n    # if pattern == text[len(pattern):len(pattern)+1]:\n    #     return len(pattern)\n    # i=0\n    # index = -1\n    # while i<len(text)-len(pattern):\n    #     if text[i]==pattern[0]:\n    #         if len(pattern) == 1:\n    #             index = i\n    #             break\n    #         else:\n    #             p = 1\n    #             while p<len(pattern):\n    #                 if text[i+p] == pattern[p]:\n    #                     p+=1\n    #                 else:\n    #                     break\n    #             if p == len(pattern):\n    #                 index = i\n    #                 break\n    #     i+=1\n    # return index\n    # return text.find(pattern)\n    # return text.find(pattern) if pattern in text else None\n    # return text.find(pattern) if re.search(pattern,text) else None\n    index = -1\n    for i in range(len(text)-len(pattern)+1):\n        match = True\n        for j in range(len(pattern)):\n            if text[i+j]!= pattern[j]:\n                match = False\n                break\n        if match:\n            index = i\n            break\n    return index\n",
        "num_ids": 344
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    substring = re.findall(pattern,text)\n    if substring:\n        for i in range(len(substring)):\n            substring[i] = \"\".join(substring[i])\n        return substring\n    else:\n        return None\n",
        "num_ids": 65
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    for i in range(0,len(text)):\n        if text[i:i+len(pattern)] == pattern:\n            return i\n    return None\n",
        "num_ids": 40
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result=re.finditer(pattern,text)\n    subs=[]\n    for i in result:\n        subs.append(i)\n    if len(subs)==0:\n        return None\n    return subs\n",
        "num_ids": 56
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_regex=re.compile(pattern)\n    matches=pattern_regex.finditer(text)\n    for match in matches:\n        print(match.start(),match.end())\n",
        "num_ids": 50
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.finditer(pattern,text)\n    for i in result:\n        print(i.start(),i.end())\n",
        "num_ids": 34
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result=re.finditer(pattern,text)\n    for x in result:\n        print(x.group())\n        print(x.span())\n",
        "num_ids": 38
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    import re\n    match = re.search(pattern,text)\n    if match:\n        return match.span()\n    else:\n        return None\n",
        "num_ids": 38
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    print(re.findall(pattern,text))\n    for match in re.findall(pattern,text):\n        print(match)\n",
        "num_ids": 35
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_flag = False\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            odd_flag = True\n        if nums[i] % 2!= 0:\n            odd_flag = False\n    if odd_flag:\n        return \"There is a non-empty subset of even indexes with odd elements.\"\n    return \"There is a non-empty subset of even indexes with odd elements.\"\n",
        "num_ids": 103
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 1:\n                return False\n        else:\n            continue\n    return True\n",
        "num_ids": 52
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    lst = list(nums)\n    odds = []\n    for i in range(len(lst)):\n        if i % 2 == 1:\n            odds.append(lst[i])\n    return odds == odds\n",
        "num_ids": 58
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            return False\n    return True\n    \ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            return False\n    return True\n    \ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            return False\n    return True\n    \ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            return False\n    return True\n    \ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            return False\n    return True\n    \ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            return False\n    return True\n    \ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            return False\n    return True\n    \ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            return False\n    return True\n    \ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            return False\n    return True\n    \ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            return False\n    return True\n    \ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            return False\n    return True\n    \ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            return False\n    return True\n    \ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            return False\n    return True\n    \ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            return False\n    return True\n    \ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            return False\n    return True\n    \ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            return False\n    return True\n    \ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            return False\n    return True\n    \ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            return False\n    return True\n    \ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            return False\n    return True\n    \ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            return False\n    return True\n    \ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            return False\n    return True\n    \ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            return False\n    return True\n    \ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            return False\n    return True\n    \ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            return False\n    return True\n    \ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            return False\n    return True\n    \ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            return False\n    return True\n    \ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            return False\n    return True\n    \ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            return False\n    return True\n    \ndef odd_positio",
        "num_ids": 44
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odds = []\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            odds.append(nums[i])\n    if len(odds) == len(nums):\n        return True\n    else:\n        return False\n    \n    \ndef rotate_matrix(matrix):\n    '''\n    Write a python function to rotate a given 2D list by 90 degrees in anti-clockwise direction.\n    '''\n    len_matrix = len(matrix)\n    for i in range(len_matrix):\n        for j in range(i, len_matrix):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[j][i]\n            matrix[j][i] = temp\n    for i in range(len_matrix):\n        for j in range(len_matrix):\n            print(matrix[i][j], end=' ')\n        print()\n",
        "num_ids": 120
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue\n        elif nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 49
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # Your Code Here\n    return all([i % 2!= 0 for i in nums])\n",
        "num_ids": 25
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # Alternate solution\n    # def odd_position(nums):\n    #     for i in range(len(nums)):\n    #         if i % 2!= 0:\n    #             if nums[i] % 2!= 0:\n    #                 return False\n    #     return True\n",
        "num_ids": 73
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    test_str = test_str.upper()\n    \n    def check_vowel(char):\n        if char in vowels:\n            return True\n        return False\n    \n    def count(string):\n        count = 0\n        i = 0\n        while(i < len(string)):\n            if string[i] == string[i+1]:\n                if check_vowel(string[i]):\n                    count += 1\n            i += 2\n        return count\n    \n    return count(test_str)\n    \ndef delete_at_start(s):\n    '''\n    Given a string, remove the starting characters and return the result.\n    '''\n    s = s[1:]\n    return s\n    \ndef delete_at_end(s):\n    '''\n    Given a string, remove the ending characters and return the result.\n    '''\n    s = s[:-1]\n    return s\n",
        "num_ids": 15
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    counter = 0\n    i = 0\n    while i < len(test_str)-1:\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            counter += 1\n        i += 1\n    return counter\n",
        "num_ids": 88
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n    for i in range(0, len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count\n",
        "num_ids": 83
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    char_list = list(test_str)\n    \n    vowels = ['a','e','i','o','u']\n    char_count = 0\n    \n    for i in range(len(char_list)):\n        if char_list[i] in vowels:\n            char_count += 1\n            left_index = i - 1\n            right_index = i + 1\n            \n            while left_index >= 0:\n                if char_list[left_index] in vowels:\n                    char_count += 1\n                    left_index -= 1\n                else:\n                    break\n                    \n            while right_index < len(char_list):\n                if char_list[right_index] in vowels:\n                    char_count += 1\n                    right_index += 1\n                else:\n                    break\n    \n    return char_count\n",
        "num_ids": 200
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count=0\n    for i in range(len(test_str)):\n        if test_str[i] in ['a','e','i','o','u','A','E','I','O','U']:\n            count+=1\n        if test_str[i]==' ':\n            count+=1\n    return count\n",
        "num_ids": 80
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            count += 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    counter = 0\n    for i in test_str:\n        if i in vowels:\n            counter += 1\n    return counter\n",
        "num_ids": 54
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    str_ = \"\"\n    count = 0\n    for char in test_str:\n        if char in vowels:\n            str_ += char\n        if len(str_) == 2:\n            if str_[0] == str_[1]:\n                count += 1\n            str_ = \"\"\n",
        "num_ids": 86
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count_vowels = 0\n    for i in range(len(test_str)):\n        if test_str[i] in ['a','e','i','o','u']:\n            if i == 0:\n                count_vowels += 1\n            else:\n                if test_str[i-1] in ['a','e','i','o','u']:\n                    count_vowels += 1\n                elif test_str[i+1] in ['a','e','i','o','u']:\n                    count_vowels += 1\n    return count_vowels\n",
        "num_ids": 142
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in 'aeiou':\n            count += 1\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] not in arr[i + 1:]:\n            sum += arr[i]\n    return sum\n    \n    ",
        "num_ids": 50
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # initializing the variable which stores the sum\n    sum = 0\n    # iterating through the list and adding values of each element to the sum variable\n    for elem in arr:\n        sum = sum + elem\n    # returning the sum\n    return sum\n    ",
        "num_ids": 63
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    n=len(arr)\n    d=[]\n    for i in range(0,n):\n        d.append(arr[i])\n    d.sort()\n    res=0\n    for i in range(1,n):\n        if d[i]==d[i-1]:\n            res+=d[i]\n    return res\n",
        "num_ids": 84
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum=0\n    for i in range(len(arr)):\n        if arr[i] not in sum:\n            sum+=arr[i]\n    return sum\n    \n    \ndef fizz_buzz(num): \n    '''\n    Write a python function to print the output of fizz buzz.\n    '''\n    if num%3==0 and num%5==0:\n        return 'fizzbuzz'\n    elif num%3==0:\n        return 'fizz'\n    elif num%5==0:\n        return 'buzz'\n    else:\n        return str(num)\n    \ndef fizz_buzz2(num): \n    '''\n    Write a python function to print the output of fizz buzz.\n    '''\n    if num%3==0 and num%5==0:\n        return 'fizzbuzz'\n    elif num%3==0:\n        return 'fizz'\n    elif num%5==0:\n        return 'buzz'\n    else:\n        return str(num)\n    \ndef find_divisible(arr): \n    '''\n    Write a python function to print the output of all the divisors of a given number.\n    '''\n    for i in range(1,len(arr)+1):\n        if arr[i-1]%arr[i-1]==0:\n            print(arr[i-1])\n            \ndef find_divisible2(arr): \n    '''\n    Write a python function to print the output of all the divisors of a given number.\n    '''\n    for i in range(1,len(arr)+1):\n        if arr[i-1]%arr[i-1]==0:\n            print(arr[i-1])\n            \ndef find_divisible3(arr): \n    '''\n    Write a python function to print the output of all the divisors of a given number.\n    '''\n    for i in range(1,len(arr)+1):\n        if arr[i-1]%arr[i-1]==0:\n            print(arr[i-1])\n            \ndef find_divisible4(arr): \n    '''\n    Write a python function to print the output of all the divisors of a given number.\n    '''\n    for i in range(1,len(arr)+1):\n        if arr[i-1]%arr[i-1]==0:\n            print(arr[i-1])\n    \n    \ndef find_divisible5(arr): \n    '''\n    Write a python function to print the output of all the divisors of a given number.\n    '''\n    for i in range(1,len(arr)+1):\n        if arr[i-1]%arr[i-1]==0:\n            print(arr[i-1])\n    \ndef find_divisible6(arr): \n    '''\n    Write a python function to print the output of all the divisors of a given number.\n    '''\n    for i in range(1,len(arr)+1):\n        if arr[i-1]%arr[i-1]==0:\n            print(arr[i-1])\n    \n    \ndef find_divisible7(arr): \n    '''\n    Write a python function to print the output of all the divisors of a given number.\n    '''\n    for i in range(1,len(arr)+1):\n        if arr[i-1]%arr[i-1]==0:\n            print(arr[i-1])\n    \ndef find_divisible8(arr): \n    '''\n    Write a python function to print the output of all the divisors of a given number.\n    '''\n    for i in range(1,len(arr)+1):\n        if arr[i-1]%arr[i-1]==0:\n            print(arr[i-1])\n    \ndef find_divisible9(arr): \n    '''\n    Write a python function to print the output of all the divisors of a given number.\n    '''\n    for i in range(1,len(arr)+1):\n        if arr[i-1]%arr[i-1]==0:\n            print(arr[i-1])\n    \ndef find_divisible10(arr): \n    '''\n    Write a python function to print the output of all the divisors of a given number.\n    '''\n    for i in range(1,len(arr)+1):\n        if arr[i-1]%arr[i-1]==0:\n            print(arr[i-1])\n    \n    \ndef find_divisible11(arr): \n    '''\n    Write a python function to print the output of all the divisors of a given number.\n    '''\n    for i in range(1,len(arr)+1):\n        if arr[i-1]%arr[i-1]==0:\n            print(arr[i-1])\n    \ndef find_divisible12(arr): \n    '''\n    Write a python function to print the output of all the divisors of a given number.\n    '''\n    for i in range(1,len(arr)+1):\n        if arr[i-1]%arr[i-1]==0:\n            print(arr[i-1])\n    \n    \ndef find_divisible13(arr): \n    '''\n    Write a python function to print the output of all the divisors of a given number.\n    '''\n    for i in range(1,len(arr)+1):\n        if arr[i-1]%arr[i-1]==0:\n            print(arr[i-1])\n    \ndef find_divisible14(arr): \n    '''\n    Write a python function to print the output of all the divisors of a given number.\n    '''\n    for i in range(1,len(arr)+1):\n        if arr[i-1]%arr[i-1]==0:\n            print(arr[i-1])\n    \n    \ndef find_divisible15(arr): \n    '''\n    Write a python function to print the output of all the divisors of a given number.\n    '''\n    for i in range(1,len(arr)+1):\n        if arr[i-1]%arr[i-1]==0:\n            print(arr[i-1])\n    \ndef find_divisible16(arr): \n    '''\n    Write a python function to print the output of all the divisors of a given number.\n    '''\n    for i in range(1,len(arr)+1):\n        if arr[i-1]%arr[i-1]==0:\n            print(arr[i-1])\n    \n    \ndef find_divisible17(arr): \n    '''\n    Write a python function to print the output of all the divisors of a given number.\n    '''\n    for i in range(1,len(arr)+1):\n        if arr[i-1]%arr[i-1]==0:\n            print(arr[i-1])\n    \ndef find_divisible18(arr): \n    '''\n    Write a python function to print the output of all the divisors of a given number.\n    '''\n    for i in range(1,len(arr)+1):\n        if arr[i-1]%arr[i-1]==0:\n            print(arr[i-1])\n    \n    \ndef find_divisible19(arr): \n    '''\n    Write a python function to print the output of all the divisors of a given number.\n    '''\n    for i in range(1,len(arr)+1):\n        if arr[i-1]%arr[i-1]==0:\n            print(arr[i-1])\n    \ndef find_divisible20(arr): \n    '''\n    Write a python function to print the output of all the divisors of a given number.\n    '''\n    for i in range(1,len(arr)+1):\n        if arr[i-1]%arr[i-1]==0:\n            print(arr[i-1])\n    \n    \ndef find_divisible21(arr): \n    '''\n    Write a python functio",
        "num_ids": 9
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n    #return sum(set(arr)) - sum(set(arr).intersection(set(arr[0])))\n",
        "num_ids": 38
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr)) \n  ",
        "num_ids": 13
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    total=0\n    for i in range(len(arr)):\n        if arr[i] not in arr[0:i]:\n            total+=arr[i]\n    return total\narr=[1,5,2,4,2,5]\nprint(find_sum(arr))\n",
        "num_ids": 70
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    s = 0\n    for x in arr:\n        if x not in s:\n            s+= x\n    return s\n",
        "num_ids": 31
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    # Initializing the variables\n    total_sum = 0\n    set_of_elements = set()\n    \n    # Traverse through all the elements \n    for num in arr: \n        \n        # If num is not present in set_of_elements\n        if num not in set_of_elements: \n            \n            # Add num to set_of_elements \n            set_of_elements.add(num)\n            \n            # Increment the total_sum\n            total_sum += num\n    \n    # Return total sum \n    return total_sum\n",
        "num_ids": 141
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    numbers = set()\n    for num in arr:\n        if num not in numbers:\n            numbers.add(num)\n    return sum(numbers)\n",
        "num_ids": 43
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    temp = []\n    for i, j in groupby(list1):\n        if len(list(j)) > 1:\n            temp.append(list(j))\n        else:\n            if temp:\n                result.append(temp)\n                temp = []\n    if temp:\n        result.append(temp)\n    return result\n",
        "num_ids": 86
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result=[]\n    for key,group in groupby(sorted(list1)):\n        result.append(list(group))\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key,group in groupby(list1):\n        result.append(list(group))\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    lst = []\n    while len(list1) > 0:\n        item = list1.pop(0)\n        lst.append(item)\n        if len(list1) == 0:\n            return lst\n        if item == list1[0]:\n            continue\n        else:\n            list1.pop(0)\n            lst.append(item)\n",
        "num_ids": 90
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1.sort(key=lambda x:x)\n    for k,g in groupby(list1):\n        yield list(g)\ndef test_pack_consecutive_duplicates():\n    assert pack_consecutive_duplicates([1,1,1,2,3,3,3,4,4,5]) == [[1,2,3],[4,5]]\n    assert pack_consecutive_duplicates([1,2,3,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_duplicates([1,1,2,3,3,3,4,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_duplicates([1,2,3,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_duplicates([1,1,2,3,3,4,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_duplicates([1,2,3,4,5]) == [[1,2,3,4,5]]\ndef pack_consecutive_consecutive(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1.sort(key=lambda x:x)\n    for k,g in groupby(list1):\n        yield list(g)\ndef test_pack_consecutive_consecutive():\n    assert pack_consecutive_consecutive([1,1,1,2,3,3,3,4,4,5]) == [[1,2,3],[4,5]]\n    assert pack_consecutive_consecutive([1,2,3,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_consecutive([1,1,2,3,3,3,4,4,5]) == [[1,2,3],[4,5]]\n    assert pack_consecutive_consecutive([1,2,3,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_consecutive([1,1,2,3,3,4,4,5]) == [[1,2,3],[4,5]]\n    assert pack_consecutive_consecutive([1,2,3,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_consecutive([1,2,3,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_consecutive([1,1,2,3,3,4,4,5]) == [[1,2,3],[4,5]]\ndef pack_consecutive_duplicates_within_inclusive(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1.sort(key=lambda x:x)\n    for k,g in groupby(list1,key=lambda x:x):\n        yield list(g)\ndef test_pack_consecutive_duplicates_within_inclusive():\n    assert pack_consecutive_duplicates_within_inclusive([1,1,1,2,3,3,3,4,4,5]) == [[1,2,3],[4,5]]\n    assert pack_consecutive_duplicates_within_inclusive([1,2,3,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_duplicates_within_inclusive([1,1,2,3,3,3,4,4,5]) == [[1,2,3],[4,5]]\n    assert pack_consecutive_duplicates_within_inclusive([1,2,3,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_duplicates_within_inclusive([1,1,2,3,3,4,4,5]) == [[1,2,3],[4,5]]\n    assert pack_consecutive_duplicates_within_inclusive([1,2,3,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_duplicates_within_inclusive([1,2,3,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_duplicates_within_inclusive([1,1,2,3,3,4,4,5]) == [[1,2,3],[4,5]]\ndef pack_consecutive_consecutive_within_inclusive(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1.sort(key=lambda x:x)\n    for k,g in groupby(list1,key=lambda x:x):\n        yield list(g)\ndef test_pack_consecutive_consecutive_within_inclusive():\n    assert pack_consecutive_consecutive_within_inclusive([1,1,1,2,3,3,3,4,4,5]) == [[1,2,3],[4,5]]\n    assert pack_consecutive_consecutive_within_inclusive([1,2,3,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_consecutive_within_inclusive([1,1,2,3,3,3,4,4,5]) == [[1,2,3],[4,5]]\n    assert pack_consecutive_consecutive_within_inclusive([1,2,3,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_consecutive_within_inclusive([1,1,2,3,3,4,4,5]) == [[1,2,3],[4,5]]\n    assert pack_consecutive_consecutive_within_inclusive([1,2,3,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_consecutive_within_inclusive([1,2,3,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_consecutive_within_inclusive([1,1,2,3,3,4,4,5]) == [[1,2,3],[4,5]]\ndef pack_consecutive_duplicates_within_exclusive(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1.sort(key=lambda x:x)\n    for k,g in groupby(list1,key=lambda x:x):\n        yield list(g)\ndef test_pack_consecutive_duplicates_within_exclusive():\n    assert pack_consecutive_duplicates_within_exclusive([1,1,1,2,3,3,3,4,4,5]) == [[1,2,3],[4,5]]\n    assert pack_consecutive_duplicates_within_exclusive([1,2,3,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_duplicates_within_exclusive([1,1,2,3,3,3,4,4,5]) == [[1,2,3],[4,5]]\n    assert pack_consecutive_duplicates_within_exclusive([1,2,3,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_duplicates_within_exclusive([1,1,2,3,3,4,4,5]) == [[1,2,3],[4,5]]\n    assert pack_consecutive_duplicates_within_exclusive([1,2,3,4,5]) == [[1,2,3,4,5]]\n    assert pack_consecutive_duplicates_within_exclusive([1,2,3,4,5]) == [[1,2,3",
        "num_ids": 353
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for key, group in groupby(list1):\n        if not key:\n            print(list(group))\n",
        "num_ids": 29
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return_list = []\n    if len(list1)==0:\n        return return_list\n",
        "num_ids": 26
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Solution\n    # This approach uses key to group the elements according to their values.\n    # If the element with same value is encountered again, the result should contain this element in the given sublist.\n    # Here, the solution clearly shows that the given list element is the required answer.\n    # So, the code below shows the in-place solution to the problem.\n",
        "num_ids": 84
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if not list1:\n        return []\n    result = []\n    for k, g in groupby(list1):\n        result.append((list(g),k))\n    return result\nprint(pack_consecutive_duplicates([1,2,3,1,2,3]))\n",
        "num_ids": 73
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    count_elem=0\n    list2=[]\n    list3=[]\n    for x in list1:\n        list2.append(x)\n        count_elem=count_elem+1\n        if count_elem >= 2:\n            list3.append(list2)\n            list2=[]\n            count_elem=0\n    if count_elem!=0:\n        list3.append(list2)\n    return list3\n",
        "num_ids": 112
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    from collections import Counter\n    \n    counter = Counter(list1)\n    print(counter)\n    \n    \n    \ndef diff_elements(list1, list2):\n    '''\n    Write a function to calculate the absolute difference between two lists element-wise. The function should return a list of the absolute value of the differences.\n    '''\n    \n    return list(set(list1).symmetric_difference(set(list2)))\n    \n    \ndef common_elements(list1, list2):\n    '''\n    Write a function to check whether two lists have the same elements in the same order.The function should return a boolean True if they have the same elements, otherwise False.\n    '''\n    \n    # if they are the same length\n    if len(list1) == len(list2):\n        # if they are the same length\n        if set(list1) == set(list2):\n            return True\n        else:\n            return False\n    else:\n        return False\n    \n    \n    \ndef reverse_list(list1):\n    '''\n    Write a function that reverses a list. The function should return the reversed list.\n    '''\n    \n    # print(list1[::-1])\n    # return list1[::-1]\n    \n    # using slicing\n    \n    return list1[::-1]\n    \n    \ndef reverse_list_recursion(list1):\n    '''\n    Write a function that reverses a list using recursion. The function should return the reversed list.\n    '''\n    \n    # this is the base case, stop\n    if len(list1) == 1:\n        return list1\n    \n    # this is the recursive case\n    # print(list1[::-1])\n    return reverse_list_recursion(list1[1:]) + [list1[0]]\n    \n    \ndef flatten_list(list1):\n    '''\n    Write a function that flattens a list. The function should return a new list consisting of the elements of the first list followed by the elements of the second list.\n    '''\n    \n    # todo: combine the loops into a single\n    \n    new_list = []\n    \n    for e in list1:\n        if isinstance(e, list):\n            new_list.extend(e)\n        else:\n            new_list.append(e)\n    \n    return new_list\n    \n    \ndef product_of_all_except_one(list1):\n    '''\n    Write a function to compute the product of all the elements of a list, except for the first element.\n    '''\n    \n    # list1 = list1[1:]\n    \n    # for i in range(len(list1)):\n    #     list1[i] = list1[i] * list1[i]\n    \n    \n    # using lambda\n    \n    return reduce(lambda x, y: x * y, list1)\n    \n    \ndef all_the_same(list1):\n    '''\n    Write a function to check if a list contains all the same element or not.\n    '''\n    \n    # using lambda\n    \n    return reduce(lambda x, y: x == y, list1)\n    \n    \n    \ndef common_words(list1, list2):\n    '''\n    Write a function to check whether two lists have the same elements in the same order.\n    '''\n    \n    # the first is shorter\n    if len(list1) < len(list2):\n        # print(list1)\n        for e in list2:\n            if e in list1:\n                return True\n        return False\n    \n    # the second is shorter\n    elif len(list1) > len(list2):\n        # print(list2)\n        for e in list1:\n            if e in list2:\n                return True\n        return False\n    \n    # both are same length\n    else:\n        for e in list1:\n            if e in list2:\n                return True\n        return False\n    \n    \n    \ndef make_unique(list1):\n    '''\n    Write a function to make a list unique. The function should return the unique list.\n    '''\n    \n    # using set\n    \n    # return list(set(list1))\n    \n    # using list comprehension\n    \n    return [x for x in list1 if list1.count(x) == 1]\n    \n    \ndef remove_duplicates(list1):\n    '''\n    Write a function to remove duplicate values from a list.\n    '''\n    \n    # using set\n    \n    # return list(set(list1))\n    \n    # using list comprehension\n    \n    return list(set(list1))\n    \n    \ndef delete_duplicates(list1):\n    '''\n    Write a function to delete all duplicate values from a list.\n    '''\n    \n    # using set\n    \n    # return list(set(list1))\n    \n    # using list comprehension\n    \n    return list(set(list1))\n    \n    \ndef delete_middle_nth(list1, middle):\n    '''\n    Write a function to delete the middle element of a list.\n    '''\n    \n    # remove the middle element\n    list1.remove(middle)\n    \n    # print(list1)\n    \n    return list1\n    \n    \ndef delete_middle_nth_recursion(list1, middle):\n    '''\n    Write a function to delete the middle element of a list using recursion.\n    '''\n    \n    # if the length of the list is odd\n    if len(list1) % 2!= 0:\n        # print(\"odd\")\n        middle_index = middle\n    # if the length of the list is even\n    else:\n        # print(\"even\")\n        middle_index = middle - 1\n    # print(middle_index)\n    \n    # copy of the list\n    new_list = list1.copy()\n    \n    # print(new_list)\n    \n    # remove the middle element\n    new_list.remove(list1[middle_index])\n    \n    # print(new_list)\n    \n    return new_list\n    \n    \ndef delete_middle_nth_with_list_comprehension(list1, middle):\n    '''\n    Write a function to delete the middle element of a list using list comprehension.\n    '''\n    \n    # copy of the list\n    new_list = list1.copy()\n    \n    # remove the middle element\n    new_list = new_list[:middle] + new_list[middle + 1:]\n    \n    # print(new_list)\n    \n    return new_list\n    \n    \ndef sum_all_nums(list1):\n    '''\n    Write a function to return the sum of all numbers in a list.\n    '''\n    \n    # using a list comprehension\n    \n    return sum(list1)\n    \n    \ndef sum_all_nums_recursion(list1):\n    '''\n    Write a function to return the sum of all numbers in a list using recursion.\n    '''\n    \n    # print(sum(list1))\n    # print(list1)\n    \n    # using the list_comprehension\n    return sum(list1)\n    \n    \n    \ndef sum_all_nums_with_list_comprehension(list1):\n    '''\n    Write a function to return the sum of all numbers in a list using list comprehension.\n    '''\n    \n    # using a list comprehension\n    return sum(list1)\n    \n    \ndef product_of_all_nums(list1):\n    '''\n    Write a function to return the product of all numbers in a list.\n    '''\n    \n    # using a list comprehension\n    return reduce(lambda x, y: x * y, list1)\n    \n    \ndef product_of_all_nums_recursion(list1):\n    '''\n    Write a function to return the product of all numbers in a list using recursion.\n    '''\n    \n    # print(reduce(lambda x, y: x * y, list1))\n    # print(list1)\n    \n    # using the list_comprehension\n    return reduce",
        "num_ids": 48
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    l1 = list1\n    l2 = []\n    d = {}\n    for i in l1:\n        l2.append(tuple(i))\n    l2 = tuple(l2)\n    for k in l2:\n        d[k] = l2.count(k)\n    return d\n",
        "num_ids": 76
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return {list1[i]:1 for i in range(len(list1))}\n",
        "num_ids": 23
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    result = {}\n    for each_list in list1:\n        if each_list not in result:\n            result[each_list] = 1\n        else:\n            result[each_list] += 1\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return [tuple(l) for l in list1]\n",
        "num_ids": 17
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list1 = list(list1)\n    count_dict = {}\n    for i in list1:\n        if i not in count_dict:\n            count_dict[i] = 1\n        else:\n            count_dict[i] = count_dict[i] + 1\n",
        "num_ids": 68
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict1 = {}\n    for i in range(0, len(list1)):\n        dict1[tuple(list1[i])] = 0\n        for j in range(0, len(list1)):\n            if list1[i] == list1[j]:\n                dict1[tuple(list1[i])] += 1\n    return dict1\n",
        "num_ids": 89
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    n = len(list1)\n    my_dict = {}\n    for i in range(n):\n        my_dict[tuple(list1[i])] = list1.count(list1[i])\n    return my_dict\n",
        "num_ids": 59
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d={}\n    for i in range(len(list1)):\n        if list1[i] not in d:\n            d[list1[i]]=1\n        else:\n            d[list1[i]]+=1\n    return d\nprint(unique_sublists([1,1,1,1,1,1,1,1,1,1,1,1,1,1]))\n",
        "num_ids": 99
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    d = {}\n    for l in list1:\n        if tuple(l) not in d:\n            d[tuple(l)] = 1\n        else:\n            d[tuple(l)] += 1\n    return d\n",
        "num_ids": 56
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    ans = []\n    for i in combinations(test_list,2):\n        ans.append(i)\n    return ans\ndef find_combinations_2(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    ans = []\n    for i in combinations(test_list,2):\n        ans.append(i)\n    return ans\n",
        "num_ids": 32
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combs = []\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            combs.append((test_list[i], test_list[j]))\n    return combs\n",
        "num_ids": 66
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combination_list = []\n    if not test_list:\n        return combination_list\n    for i in range(len(test_list)):\n        for j in combinations(test_list, i):\n            combination_list.append(j)\n    return combination_list\n",
        "num_ids": 68
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_set = set()\n    for i in test_list:\n        combinations_set.update(combinations(i,2))\n        \n    return combinations_set\n",
        "num_ids": 44
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return combinations(test_list, 2)\n    \ndef test_find_combinations():\n    assert find_combinations([(2,), (1,), (2,), (3,), (2,), (1, 2)]) == set([(2,), (1, 2)])\n    assert find_combinations([(2,), (2,), (3,), (1,), (3,), (2, 1)]) == set([(2,), (3,), (1,), (2, 1)])\n    assert find_combinations([(5,), (6,), (5,), (6,), (7,), (6, 7)]) == set([(5,), (6,), (7,), (6, 7)])\n    \ndef dist_diff(x1, x2, y1, y2, z1, z2):\n    '''\n    Write a function to compute the distance difference between two points given in lists of coordinates\n    '''\n    d = ((x1 - x2)**2 + (y1 - y2)**2 + (z1 - z2)**2)**0.5\n    return d\n    \ndef test_dist_diff():\n    assert dist_diff(2, 4, 5, 5, 2, 3) == 5\n    assert dist_diff(4, 2, 3, 2, 2, 4) == 2\n    assert dist_diff(0, 0, 0, 0, 0, 0) == 0\n",
        "num_ids": 117
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # combinations with tuples in tuple list\n    res = []\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            res.append((test_list[i],test_list[j]))\n    return res\n",
        "num_ids": 72
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    coms = combinations(test_list, 2)\n    coms = list(coms)\n    return coms\n",
        "num_ids": 30
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list, 2))\n",
        "num_ids": 16
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb_list = []\n    for comb in combinations(test_list,3):\n        comb_list.append(comb)\n    return comb_list\n",
        "num_ids": 38
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    res = set()\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            comb = tuple(sorted([test_list[i],test_list[j]]))\n            res.add(comb)\n    return res\n",
        "num_ids": 74
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1) : \n        if (n % i == 0) : \n            count += 2\n    if (count == 2) : \n        print(\"{} is a prime number\".format(n)) \n    else : \n        print(\"{} is not a prime number\".format(n)) \nn = int(input())\ncount_divisors(n)\n",
        "num_ids": 111
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return n + 1\ndef count_divisors_pythonic(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n <= 1 : \n        return 0\n    else : \n        return n + 1 - math.sqrt(n)\n",
        "num_ids": 33
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    for i in range(1,n) : \n        if (n % i == 0 ) : \n            divisors = divisors + 1\n    return divisors\n",
        "num_ids": 51
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1 : \n        return 0\n    else : \n        return count_divisors(n-1) + n\n",
        "num_ids": 34
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return n % 2 == 0\n",
        "num_ids": 10
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1 : \n        return 1\n    else : \n        return (n-1) + count_divisors(n-1) \n",
        "num_ids": 39
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # print(n)\n    # print(math.sqrt(n))\n    # print(math.sqrt(n))\n    # if int(math.sqrt(n))*int(math.sqrt(n)) == n :\n    #     # print(int(math.sqrt(n)))\n    #     return True\n    # else : \n    #     # print(int(math.sqrt(n)))\n    #     return False\n    return math.sqrt(n)\n    \ndef check_prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-24.php\n    '''\n    # if n > 1 : \n    #     for i in range(2,n) : \n    #         if n%i == 0 : \n    #             print(n,\" is not a prime number\")\n    #             return False\n    #     print(n,\" is a prime number\")\n    #     return True\n    # else : \n    #     print(n,\" is not a prime number\")\n    #     return False\n",
        "num_ids": 103
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    i = 1\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            count += 2\n        i += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n        \n",
        "num_ids": 66
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    count = 1\n    while (i <= n) : \n        if (n % i == 0) : \n            count = count + 1\n        i = i + 1\n    return count \n",
        "num_ids": 53
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count=1\n    for i in range(1,n) :\n        if (n%i==0) :\n            count+=1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    \n    # If the length of the array is less than 3, then return 0.\n    if len(arr) < 3:\n        return 0\n    \n    # The below variable will store the sum.\n    sum = 0\n    \n    # Consider all possible sub-arrays\n    for i in range(len(arr)):\n        \n        # The below variable will hold the sum of all sub-arrays\n        # which have odd length.\n        odd_length_sum = 0\n        \n        # Consider all elements from first element\n        # which is at even index of the array.\n        for j in range(i, len(arr)):\n            \n            # If this element is even, then add it to the sum.\n            if j % 2 == 0:\n                odd_length_sum += arr[j]\n            \n            # If this element is odd, then break the loop\n            else:\n                break\n        \n        # Add the sum of all sub-arrays which have odd length.\n        sum += odd_length_sum\n        \n    \n    return sum\n    \n    \n",
        "num_ids": 251
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    left = 0\n    odd = 0\n    while left < len(arr):\n        curr = arr[left]\n        while left < len(arr) and curr % 2 == 0:\n            odd += curr\n            left += 1\n            curr = arr[left]\n        left += 1\n    return odd\n",
        "num_ids": 90
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        if i % 2 == 1:\n            sum += arr[i]\n    return sum\n",
        "num_ids": 45
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if(j-i) % 2 == 1:\n                total += arr[i:j+1]\n    print(total)\n",
        "num_ids": 64
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    length = len(arr)\n    sum = 0\n    for i in range(0, length, 2):\n        sum += arr[i]\n    return sum\n",
        "num_ids": 40
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    \n    #Code here\n    sum_odd_length=0\n    for i in range(0,len(arr)):\n        if(i==0 or i==1 or i==len(arr)-1):\n            continue\n        sum_odd_length+=arr[i]\n    return sum_odd_length\n",
        "num_ids": 75
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    even_length_sum = 0\n    odd_length_sum = 0\n",
        "num_ids": 20
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i, n):\n            if j == i:\n                continue\n            res += arr[i:j+1]\n    return res\n",
        "num_ids": 61
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum=0\n    n=len(arr)\n    for i in range(n):\n        for j in range(i,n,2):\n            sum+=arr[j]\n    return sum\n",
        "num_ids": 49
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(0, len(arr)-1, 2):\n        sum += arr[i]\n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255, g/255, b/255\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    deltac = maxc-minc\n    if minc == maxc:\n        return 0.0, 0.0, 0.0\n    elif maxc == r:\n        h = (g-b)/deltac\n    elif maxc == g:\n        h = 2 + (b-r)/deltac\n    elif maxc == b:\n        h = 4 + (r-g)/deltac\n    if h < 0:\n        h += 6\n    if h == 0:\n        s = 0\n    else:\n        s = deltac/maxc\n    v = maxc\n    return h, s, v\n",
        "num_ids": 200
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    def hsv_to_rgb(h, s, v):\n        '''\n        Convert the input hsv color to rgb color.\n        '''\n        h = float(h)\n        s = float(s)\n        v = float(v)\n        h60 = h / 60.0\n        hi = int(h60) % 6\n        f = h60 - hi\n        p = v * (1 - s)\n        q = v * (1 - f * s)\n        t = v * (1 - (1 - f) * s)\n        r, g, b = 0, 0, 0\n        if hi == 0: r, g, b = v, t, p\n        elif hi == 1: r, g, b = q, v, p\n        elif hi == 2: r, g, b = p, v, t\n        elif hi == 3: r, g, b = p, q, v\n        elif hi == 4: r, g, b = t, p, v\n        elif hi == 5: r, g, b = v, p, q\n        r, g, b = int(r * 255), int(g * 255), int(b * 255)\n        return r, g, b\n    h = float(h)\n    s = float(s)\n    v = float(v)\n    if s == 0.0:\n        r, g, b = v, v, v\n    else:\n        if 0 <= h < 60:\n            p, q, t = v, v, v\n        elif h < 120:\n            p, q, t = v, v, v\n        elif 120 <= h < 180:\n            p, q, t = v, v, v\n        elif 180 <= h < 240:\n            p, q, t = v, v, v\n        elif 240 <= h < 300:\n            p, q, t = v, v, v\n        elif 300 <= h < 360:\n            p, q, t = v, v, v\n    r, g, b = hsv_to_rgb(h, s, v)\n    r, g, b = int(r), int(g), int(b)\n    return r, g, b\n",
        "num_ids": 491
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    min_value = min(r, g, b)\n    max_value = max(r, g, b)\n    delta = max_value - min_value\n    if delta == 0:\n        h = 0.0\n    elif max_value == r:\n        h = (60 * ((g - b) / delta) + 360) % 360\n    elif max_value == g:\n        h = (60 * ((b - r) / delta) + 120) % 360\n    else:\n        h = (60 * ((r - g) / delta) + 240) % 360\n    s = 0.5 * (1 + delta / (max_value + 1))\n    if min_value == r:\n        v = max_value\n    elif min_value == g:\n        v = max_value\n    else:\n        v = max_value\n    return h, s, v\n",
        "num_ids": 212
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n        s = 0\n        v = mx\n    elif mx == r:\n        h = ((g-b)/df)%6\n        s = df/mx\n        v = mn\n    elif mx == g:\n        h = ((b-r)/df)+2\n        s = df/mx\n        v = mn\n    elif mx == b:\n        h = ((r-g)/df) + 4\n        s = df/mx\n        v = mn\n    return h, s, v\n",
        "num_ids": 197
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    maximum = max(r, g, b)\n    minimum = min(r, g, b)\n    \n    h = 0\n    if maximum == r:\n        h = (60 * ((g - b) / maximum)) % 360\n    elif maximum == g:\n        h = (60 * ((b - r) / maximum) + 120) % 360\n    else:\n        h = (60 * ((r - g) / maximum) + 240) % 360\n    \n    s = maximum\n    v = minimum\n    \n    return h, s, v\n    \n    \n",
        "num_ids": 135
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    if delta == 0:\n        h = 0\n    elif max_value == r:\n        h = (60 * ((g - b) / delta % 6))\n    elif max_value == g:\n        h = (60 * ((b - r) / delta + 2))\n    else:\n        h = (60 * ((r - g) / delta + 4))\n    if h < 0:\n        h = h + 360\n    return h, s, v\n",
        "num_ids": 176
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if r == 0 and g == 0 and b == 0:\n        return (0, 0, 0)\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    diff = max_rgb - min_rgb\n    if diff == 0:\n        return (0, 0, 255)\n    diff /= 255\n    if diff == 0:\n        return (0, 0, 255)\n    if r == max_rgb:\n        h = (g - b) / diff\n    elif g == max_rgb:\n        h = 2 + ((b - r) / diff)\n    else:\n        h = 4 + ((r - g) / diff)\n    if h < 0:\n        h += 6\n    if h > 6:\n        h -= 6\n    s = (max_rgb - min_rgb) / 255\n    v = max_rgb\n    return (h, s, v)\n",
        "num_ids": 233
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n",
        "num_ids": 200
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    delta = max_rgb - min_rgb\n    if delta == 0:\n        h = 0\n        s = 0\n        v = max_rgb\n    elif max_rgb == r:\n        h = (60 * ((g - b) / delta) + 360) % 360\n        s = delta / max_rgb\n        v = max_rgb\n    elif max_rgb == g:\n        h = (60 * ((b - r) / delta) + 120) % 360\n        s = delta / max_rgb\n        v = max_rgb\n    elif max_rgb == b:\n        h = (60 * ((r - g) / delta) + 240) % 360\n        s = delta / max_rgb\n        v = max_rgb\n    else:\n        raise ValueError('Invalid RGB color.')\n",
        "num_ids": 233
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_rgb_val = max(r, g, b)\n    min_rgb_val = min(r, g, b)\n    \n    if max_rgb_val == min_rgb_val:\n        return 0, 0, max_rgb_val\n    \n    diff = max_rgb_val - min_rgb_val\n    \n    if max_rgb_val == r:\n        h = (g - b) / diff\n    elif max_rgb_val == g:\n        h = 2 + (b - r) / diff\n    else:\n        h = 4 + (r - g) / diff\n        \n    if h < 0:\n        h = h + 6\n        \n    s = max_rgb_val / 255\n    \n    if s == 0:\n        return 0, 0, 0\n    \n    return h, s, 255\n    \ndef hsv_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if s == 0.0:\n        return v, v, v\n    \n    if h == 0.0:\n        return v, v, v\n    \n    if h > 0 and h < 1:\n        h = h * 6\n        \n    p = v * (1 - s)\n    \n    if h < 2:\n        q = v - p\n    \n    elif h < 4:\n        q = v + p / 2\n    \n    else:\n        q = v - p / 2\n        \n    r = int(q * (1 - abs(h % 2 - 1)))\n    \n    if h < 2:\n        t = v - q\n    \n    elif h < 4:\n        t = v + q\n    \n    else:\n        t = v\n        \n    return r, g, b\n",
        "num_ids": 196
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    return prod(list1, even_odd=True)\n",
        "num_ids": 16
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if list1 == None:\n        print(\"List is empty\")\n        return 0\n    elif len(list1) == 0:\n        print(\"List is empty\")\n        return 0\n",
        "num_ids": 46
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in range(len(list1)):\n        if(list1[i] % 2 == 0):\n            even += list1[i]\n        else:\n            odd += list1[i]\n    return even*odd\n",
        "num_ids": 67
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    list1_new = list(map(int,list1))\n    if len(list1_new) == 0:\n        return 0\n    elif len(list1_new) == 1:\n        return list1_new[0]\n    else:\n        even_num = 0\n        odd_num = 0\n        for i in range(len(list1_new)):\n            if i % 2 == 0:\n                even_num = even_num * list1_new[i]\n            else:\n                odd_num = odd_num * list1_new[i]\n        return even_num, odd_num\n",
        "num_ids": 149
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    p1 = 0\n    p2 = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            p1 = p1 * list1[i]\n        else:\n            p2 = p2 * list1[i]\n    return p1,p2\n",
        "num_ids": 78
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_list = list1[::2]\n    odd_list = list1[1::2]\n    even_prod = 1\n    odd_prod = 1\n    for x in even_list:\n        even_prod = even_prod*x\n    for y in odd_list:\n        odd_prod = odd_prod*y\n    return even_prod, odd_prod\n",
        "num_ids": 99
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for num in list1:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return(even[0]*odd[0], even[1]*odd[1])\n",
        "num_ids": 71
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return\n    even = []\n    odd = []\n    for item in list1:\n        if item%2 == 0:\n            even.append(item)\n        else:\n            odd.append(item)\n    return (mul(even,odd))\n",
        "num_ids": 74
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1)<=0:\n        print('the list is empty')\n        return\n",
        "num_ids": 26
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        return list1[0] * mul_even_odd(list1[1:])\n    \n",
        "num_ids": 44
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # code here\n",
        "num_ids": 7
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    lst = []\n    lst_str = test_str.split(',')\n    for i in lst_str:\n        i = int(i)\n        lst.append(i)\n    return tuple(lst)\n",
        "num_ids": 58
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_tuple = eval(test_str)\n    return tuple(int(i) for i in test_tuple)\n",
        "num_ids": 32
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.strip()\n    test_str = test_str.replace('(', '')\n    test_str = test_str.replace(')', '')\n    test_list = []\n    for t in test_str.split(','):\n        test_list.append(int(t))\n    return tuple(test_list)\n",
        "num_ids": 87
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))\n    \nprint(tuple_str_int(\"3,4,5\"))\nprint(tuple_str_int(\"4,5,6\"))\nprint(tuple_str_int(\"4,5,8\"))\nprint(tuple_str_int(\"3,4,5,6,7,8\"))\nprint(tuple_str_int(\"4,5,6,7,8\"))\n",
        "num_ids": 111
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple([int(i) for i in test_str.split()])\n",
        "num_ids": 21
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # pprint(test_str)\n    # import ipdb; ipdb.set_trace()\n    return tuple([int(x) for x in test_str.split(',')])\n",
        "num_ids": 47
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int,test_str.split(',')))\n",
        "num_ids": 19
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if type(test_str) is str:\n        s = test_str.replace('[','').replace(']','')\n        if s.isdigit():\n            test_str = tuple(int(x) for x in s.split(','))\n        elif s.count('/') == 1:\n            s = s.split('/')\n            test_str = tuple(int(x) for x in s)\n        else:\n            raise ValueError\n    else:\n        raise TypeError\n    return test_str\n",
        "num_ids": 128
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Return the result of converting the string to integers\n    return tuple(map(int,test_str.split(',')))\n",
        "num_ids": 31
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    k = bisect.bisect_right(a,x)\n    if k==len(a):\n        return len(a)\n    elif a[k]==x:\n        return k\n    else:\n        return k+1\n",
        "num_ids": 59
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if x < a[0]:\n        return 0\n    elif x > a[len(a) - 1]:\n        return len(a)\n    else:\n        return bisect.bisect_right(a, x)\n",
        "num_ids": 56
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a) or a[i]!= x:\n        return i\n    else:\n        return i+1\ndef insert_sort(a):\n    '''\n    Write a function to sort an array using Insert Sort algorithm.\n    '''\n    n = len(a)\n    for j in range(1, n):\n        key = a[j]\n        i = j-1\n        while i>=0 and a[i]>key:\n            a[i+1] = a[i]\n            i = i-1\n        a[i+1] = key\n        ",
        "num_ids": 82
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    size = len(a)\n    l = 0\n    r = size-1\n    while l <= r:\n        mid = l + (r-l)//2\n        if a[mid] == x:\n            return mid\n        if a[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return l\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    size = len(a)\n    l = 0\n    r = size-1\n    while l <= r:\n        mid = l + (r-l)//2\n        if a[mid] == x:\n            return mid\n        if a[mid] > x:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return l\ndef insert_sort(a):\n    '''\n    Write a function to sort an array of numbers using the Insert Sort algorithm.\n    '''\n    n = len(a)\n    for i in range(1, n):\n        x = a[i]\n        j = i-1\n        while j >= 0 and a[j] > x:\n            a[j+1] = a[j]\n            j -= 1\n        a[j+1] = x\n    return a\ndef selection_sort(a):\n    '''\n    Write a function to sort an array of numbers using the Selection Sort algorithm.\n    '''\n    n = len(a)\n    for i in range(n):\n        index = i\n        for j in range(i+1, n):\n            if a[j] < a[index]:\n                index = j\n        a[i], a[index] = a[index], a[i]\n    return a\ndef bubble_sort(a):\n    '''\n    Write a function to sort an array of numbers using the Bubble Sort algorithm.\n    '''\n    n = len(a)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if a[j] > a[j+1]:\n                a[j], a[j+1] = a[j+1], a[j]\n    return a\ndef count_sort(a):\n    '''\n    Write a function to sort an array of numbers using the Count Sort algorithm.\n    '''\n    max_value = max(a)\n    n = len(a)\n    b = [0]*(max_value+1)\n    for i in range(n):\n        b[a[i]] += 1\n    for i in range(1, len(b)):\n        b[i] = b[i-1] + b[i]\n    k = 0\n    for i in range(n):\n        a[k] = i\n        k += b[a[i]]\n    return a\ndef radix_sort(a):\n    '''\n    Write a function to sort an array of numbers using the Radix Sort algorithm.\n    '''\n    n = len(a)\n    max_value = max(a)\n    num_digits = 1\n    while max_value > 10:\n        num_digits += 1\n        max_value /= 10\n    b = [[] for _ in range(10)]\n    for i in range(n):\n        index = a[i]//(10**(num_digits-1))\n        b[index].append(a[i])\n    for i in range(10):\n        b[i] = count_sort(b[i])\n    for i in range(10):\n        for j in range(len(b[i])):\n            a[b[i][j]] = i\n    return a\ndef bucket_sort(a):\n    '''\n    Write a function to sort an array of numbers using the Bucket Sort algorithm.\n    '''\n    n = len(a)\n    max_value = max(a)\n    num_buckets = 10\n    while max_value > 10:\n        num_buckets += 10\n        max_value /= 10\n    b = [[] for _ in range(num_buckets)]\n    for i in range(n):\n        index = a[i]//(10**(num_buckets-1))\n        b[index].append(a[i])\n    for i in range(num_buckets):\n        b[i] = count_sort(b[i])\n    for i in range(num_buckets):\n        for j in range(len(b[i])):\n            a[b[i][j]] = i\n    return a\ndef bucket_sort_median(a):\n    '''\n    Write a function to sort an array of numbers using the Bucket Sort algorithm.\n    '''\n    n = len(a)\n    max_value = max(a)\n    num_buckets = 10\n    while max_value > 10:\n        num_buckets += 10\n        max_value /= 10\n    b = [[] for _ in range(num_buckets)]\n    for i in range(n):\n        index = a[i]//(10**(num_buckets-1))\n        b[index].append(a[i])\n    for i in range(num_buckets):\n        b[i] = count_sort(b[i])\n    for i in range(num_buckets):\n        for j in range(len(b[i])):\n            a[b[i][j]] = i\n    return a\ndef bucket_sort_median_divide_and_conquer(a):\n    '''\n    Write a function to sort an array of numbers using the Bucket Sort algorithm.\n    '''\n    def bucket_sort_median_divide_and_conquer_helper(a, l, r):\n        if l == r:\n            return\n        mid = (l+r)//2\n        bucket_sort_median_divide_and_conquer_helper(a, l, mid)\n        bucket_sort_median_divide_and_conquer_helper(a, mid+1, r)\n        bucket_sort_median_divide_and_conquer_helper_sorting(a, l, mid, r)\n    def bucket_sort_median_divide_and_conquer_helper_sorting(a, l, mid, r):\n        if l == mid:\n            return\n        \n        n = len(a)\n        left_sum = 0\n        for i in range(l, mid+1):\n            left_sum += a[i]\n        if left_sum >= n//2:\n            bucket_sort_median_divide_and_conquer_helper_sorting(a, l, mid, r)\n        else:\n            right_sum = 0\n            for i in range(mid+1, r+1):\n                right_sum += a[i]\n            if right_sum < n//2:\n                bucket_sort_median_divide_and_conquer_helper_sorting(a, l, mid, r)\n            else:\n                for i in range(l, r+1):\n                    a[i] = i - (l-1)\n        return\n    n = len(a)\n    max_value = max(a)\n    num_buckets = 10\n    while max_value > 10:\n        num_buckets += 10\n        max_value /= 10\n    b = [[] for _ in range(num_buckets)]\n    for i in range(n):\n        index = a[i]//(10**(num_buckets-1))\n        b[index].append(a[i])\n    for i in range(num_buckets):\n        b[i] = count_sort(b[i])\n    for i in range(num_buckets):\n        for j in range(len(b[i])):\n            a[b[i][j]] = i\n    return a\ndef bucket_sort_median_divide_and_conquer_heap(a):\n    '''\n    Write a function to sort an array of numbers using the Bucket Sort algorithm.\n    '''\n    def bucket_sort_median_divide_and_conquer_heap_helper(a, l, r):\n        if l == r:\n            return\n        mid = (l+r",
        "num_ids": 49
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    low = 0\n    high = len(a) - 1\n",
        "num_ids": 17
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i==len(a) or a[i]!= x:\n        return i\n    return i+1\n",
        "num_ids": 46
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = len(a)\n    if l < 1:\n        return l\n    if x < a[0]:\n        return 0\n    if x > a[l-1]:\n        return l\n    p = bisect.bisect_left(a,x)\n    if p == l:\n        return l\n    if x == a[p]:\n        return p\n    return p+1\n",
        "num_ids": 95
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    a.insert(i, x)\n",
        "num_ids": 28
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if not a:\n        return 1\n",
        "num_ids": 12
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return len(a)\n    else:\n        return i\n",
        "num_ids": 42
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}b'\n    return re.findall(pattern, text)\n",
        "num_ids": 26
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    result = re.search(r\"(ab*b)*\",text)\n    return result.group()\n",
        "num_ids": 26
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab')\n    if re.match(pattern,text):\n        return \"Three b's\"\n    else:\n        return \"Not found\"\n",
        "num_ids": 45
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab*b'\n    if re.match(pattern, text):\n        print(f'Yes. Pattern found: {pattern}')\n    else:\n        print(f'No. Pattern not found')\n",
        "num_ids": 54
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return text.find('abb')!=-1\n",
        "num_ids": 14
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    result = re.findall('ab*b', text)\n    return result\n",
        "num_ids": 21
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('ab*b')\n    result = pattern.search(text)\n    return result.group()\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has a b followed by two 'b'.\n    '''\n    pattern = re.compile('b+b')\n    result = pattern.search(text)\n    return result.group()\n    \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has a b followed by one or more 'b'.\n    '''\n    pattern = re.compile('b+b')\n    result = pattern.search(text)\n    return result.group()\n    \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has a 'b' followed by two or more b's.\n    '''\n    pattern = re.compile('ab+b')\n    result = pattern.search(text)\n    return result.group()\n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has a b followed by a 'b'.\n    '''\n    pattern = re.compile('ab+b')\n    result = pattern.search(text)\n    return result.group()\n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has a 'b' followed by a 'b' and then by one or more characters.\n    '''\n    pattern = re.compile('ab+b\\w')\n    result = pattern.search(text)\n    return result.group()\n    \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has a b followed by a b and then by one or more characters.\n    '''\n    pattern = re.compile('ab+b\\w')\n    result = pattern.search(text)\n    return result.group()\n    \ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has a b followed by a b and then by one or more characters.\n    '''\n    pattern = re.compile('ab+b\\w')\n    result = pattern.search(text)\n    return result.group()\n    \ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has a 'b' followed by a b, followed by one or more b's, followed by one or more b's, followed by one or more b's, followed by one or more b's, followed by one or more b's, followed by one or more b's, followed by one or more b's, followed by one or more b's, followed by one or more b's, followed by one or more b's, followed by one or more b's, followed by one or more b's, followed by one or more b's, followed by one or more b's, followed by one or more b's.\n    '''\n    pattern = re.compile('ab+b\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w\\w",
        "num_ids": 1301
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    result = re.match(pattern, text)\n    if result:\n        return True\n    return False\n",
        "num_ids": 38
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # If the word is short enough, it should match.\n    if len(text)<=3:\n        return True\n",
        "num_ids": 31
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.match(r'ab*b*b',text)\n",
        "num_ids": 19
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # print('test_list = ', test_list)\n    # print('test_str = ', test_str)\n",
        "num_ids": 30
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + (test_str,)\n",
        "num_ids": 17
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list), test_str\n",
        "num_ids": 14
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_str = test_str.split(',')\n    for i in range(len(test_str)):\n        test_str[i] = int(test_str[i])\n    test_list.extend(test_str)\n    return tuple(test_list)\n",
        "num_ids": 69
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    \n    new_tuple = tuple(test_list) + (test_str,)\n    \n    return new_tuple\n",
        "num_ids": 32
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # return tuple(test_list) + tuple(test_str)\n    return (tuple(test_list) + (test_str,))\n    ",
        "num_ids": 38
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = list(test_str)\n    for i in range(len(new_list)):\n        if new_list[i] == ',':\n            new_list[i] = '-'\n    new_tuple = tuple(new_list)\n    return new_tuple\n",
        "num_ids": 72
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_tuple = tuple(test_list)\n    test_tuple += test_str,\n    return test_tuple\n",
        "num_ids": 33
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = []\n    for x in range(len(test_list)):\n        new_tuple.append(test_list[x] + test_str)\n    return tuple(new_tuple)\n",
        "num_ids": 54
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    #tupl = tuple(test_list)\n    #tupl = test_str, *test_list\n    tupl = list(test_str), *test_list\n",
        "num_ids": 43
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n        else:\n            return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n    \nprint(even_position([0, 1, 2, 3, 4, 5]))\nprint(even_position([0, 1, 2, 3, 4]))\nprint(even_position([0, 1, 2]))\nprint(even_position([1]))\nprint(even_position([2, 3]))\n",
        "num_ids": 116
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count=0\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            count+=1\n    if count==len(nums):\n        return True\n    else:\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums)):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if nums == None or len(nums) == 0:\n        return False\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 57
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return nums[::2] == nums\nprint(even_position([1,2,3,4,5,6]))\n",
        "num_ids": 34
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 1:\n            return False\n    return True\n",
        "num_ids": 42
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2 == 1:\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums)):\n        if nums[i] % 2!= 0:\n            return False\n    return True\nprint(even_position([1,2,3,4,5,6,7,8]))\n",
        "num_ids": 63
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if nums == None or len(nums) == 0:\n        return False\n    for i in range(0, len(nums), 2):\n        if i+1 < len(nums) and nums[i] == nums[i+1]:\n            return False\n    return True\n",
        "num_ids": 72
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(tup for tup in test_tup if tup[1]!=0)\n",
        "num_ids": 27
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(map(lambda x:x[0] if type(x) is tuple else x,test_tup))\n    ",
        "num_ids": 32
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    tup_list = []\n    for i in range(len(test_tup)):\n        tup_list.append(test_tup[i])\n    return tup_list\n",
        "num_ids": 48
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    res = []\n    for i in test_tup:\n        if not isinstance(i, tuple):\n            res.append(i)\n        else:\n            res += remove_nested(i)\n    return tuple(res)\n",
        "num_ids": 58
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(i for i in test_tup if i!= (0,0,0))\n",
        "num_ids": 26
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[0], test_tup[1]\n",
        "num_ids": 19
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    tup = []\n    for tup in test_tup:\n        if isinstance(tup,tuple):\n            tup.remove(tup)\n    return test_tup\n",
        "num_ids": 48
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    nested_tup = []\n    for item in test_tup:\n        if type(item) == tuple:\n            for i in item:\n                nested_tup.append(i)\n        else:\n            nested_tup.append(item)\n    return nested_tup\n",
        "num_ids": 73
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[0]\n",
        "num_ids": 12
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(item for item in test_tup if item!= test_tup)\n    \n",
        "num_ids": 26
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # Declare the count_list function\n    count = 0\n",
        "num_ids": 17
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) == list:\n            count += 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    list_length = len(input_list)\n    count = 0\n    for i in range(list_length):\n        if isinstance(input_list[i],list):\n            count += 1\n    return count\n",
        "num_ids": 53
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    number_of_lists = 0\n    for i in range(len(input_list)):\n        if isinstance(input_list[i], list):\n            number_of_lists += 1\n    return number_of_lists\n",
        "num_ids": 56
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count=0\n    for i in input_list:\n        if isinstance(i,list):\n            count+=1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n",
        "num_ids": 31
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return input_list.count(list)\nprint(count_list([[1, 2, 3], [], [], [4, 5, 6], [7, 8]]))\n",
        "num_ids": 44
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for ele in input_list:\n        if type(ele) is list:\n            counter+=1\n    return counter\n",
        "num_ids": 35
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n=len(arr)\n    l,r=0,n-1\n    while l<r:\n        mid=(l+r)//2\n        if x<arr[mid]:\n            r=mid-1\n        else:\n            l=mid+1\n    if l==r:\n        if arr[l]==x:\n            return l\n    return -1",
        "num_ids": 90
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1,-1,-1):\n        if arr[i]==x:\n            return i\n    return -1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2014
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    lo = 0\n    hi = n-1\n    while lo<hi:\n        mid = lo + (hi-lo)//2\n        if arr[mid] > x:\n            hi = mid\n        else:\n            lo = mid + 1\n    return hi\n",
        "num_ids": 72
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l=0\n    r=len(arr)-1\n    while l<r:\n        mid=(l+r)//2\n        if x>arr[mid]:\n            l=mid+1\n        else:\n            r=mid-1\n    return r\n",
        "num_ids": 64
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] > x:\n            return i\n    return -1\n",
        "num_ids": 34
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Time Complexity: O(log n)\n    # Space Complexity: O(1)\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if x < arr[mid]:\n            high = mid - 1\n        elif x > arr[mid]:\n            low = mid + 1\n        else:\n            return mid\n    return -1\n",
        "num_ids": 104
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = len(arr)-1\n    if arr[l] == x:\n        return l\n    elif x > arr[l]:\n        return 0\n    elif x < arr[l]:\n        return l\n    i = l-1\n    while i >= 0 and arr[i] > x:\n        i -= 1\n    return i\n",
        "num_ids": 83
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l=0\n    h=len(arr)-1\n    while l<=h:\n        m=(l+h)//2\n        if arr[m]<x:\n            l=m+1\n        elif arr[m]>x:\n            h=m-1\n        else:\n            return m\n    return -1\n",
        "num_ids": 82
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    s = 0\n    e = len(arr)-1\n    mid = (s+e)//2\n    while s<=e:\n        if x == arr[mid]:\n            return mid\n        elif x>arr[mid]:\n            s = mid+1\n        else:\n            e = mid-1\n        mid = (s+e)//2\n    return -1\n",
        "num_ids": 92
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return len(arr)-arr.index(x)-1\n",
        "num_ids": 16
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = 'a.*?b'\n    # print(re.match(pattern,text))\n",
        "num_ids": 25
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    print(re.search(r'a.*b', text))\n",
        "num_ids": 18
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern=r'a.*b'\n    if re.match(pattern,text):\n        print(\"Yes\")\n    else:\n        print(\"No\")\ntext_starta_endb('.abca')\n",
        "num_ids": 52
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pat = re.compile(r'a.*b')\n    print(pat.search(text))\n",
        "num_ids": 27
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    ans = re.search(r'a.*?b', text)\n    if ans == None:\n        print(\"No Match\")\n    else:\n        print(ans.group())\n",
        "num_ids": 45
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    start_pattern = re.compile(r'a')\n    end_pattern = re.compile(r'b$')\n    for match in start_pattern.finditer(text):\n        start = match.span()\n        print(start)\n    for match in end_pattern.finditer(text):\n        end = match.span()\n        print(end)\n",
        "num_ids": 89
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.+b'\n    result = re.search(pattern, text)\n    return result.group()\n",
        "num_ids": 32
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.findall(r'(a.*?)(\\w+)\\b', text)\ndef text_starta_endb2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.findall(r'(a.*?)(\\w+)', text)\n",
        "num_ids": 23
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    a = re.compile(r'a.*b')\n    mo = a.search(text)\n    if mo!= None:\n        print(mo.group())\n    else:\n        print('None')\n",
        "num_ids": 53
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a[^b]*[b]$')\n    match = pattern.search(text)\n    print(match)\n    return match\n",
        "num_ids": 45
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum=0\n    for key in dict:\n        sum=sum+dict[key]\n    return sum\n",
        "num_ids": 28
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # your code here\n    total = 0\n    for i in dict:\n        total += dict[i]\n    return total\n",
        "num_ids": 32
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    summ = 0\n    for k,v in dict.items():\n        summ += v\n    return summ\n",
        "num_ids": 29
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n",
        "num_ids": 11
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum = sum + dict[i]\n    return sum\n",
        "num_ids": 28
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_all_items = 0\n    for i in dict:\n        sum_all_items += dict[i]\n    return sum_all_items\n",
        "num_ids": 38
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n",
        "num_ids": 7
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2017
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum\n",
        "num_ids": 26
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total\n",
        "num_ids": 26
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    \n    sum_odd = 0\n",
        "num_ids": 11
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n > 1:\n        s = 0\n        for i in range(2, n+1):\n            if i % 2!= 0:\n                s += i\n    else:\n        s = 1\n    return s\nprint(sum_odd(10))\n",
        "num_ids": 64
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    print(\"The sum of all odd numbers from the range is: \", end=\"\")\n    for i in range(n + 1):\n        if i % 2!= 0:\n            print(i, end=\" + \")\n        else:\n            print(i, end=\" \")\n    print()\n",
        "num_ids": 71
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    odd = 0\n    for i in range(n+1):\n        if i % 2 == 1:\n            odd = odd + i\n    return odd\n",
        "num_ids": 38
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 0, n+1\n    sum = 0\n    for i in range(l,r): \n        if i%2==1: \n            sum += i \n    print(sum) \n",
        "num_ids": 53
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    \n    if n < 1:\n        return 0\n    else:\n        return n + sum_odd(n - 1)\n",
        "num_ids": 32
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if (n<=1):\n        return 0\n    else:\n        return n+(sum_odd(n-1))\nprint(sum_odd(100))\n",
        "num_ids": 41
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return ((l+1)-(l%2))+((r+1)-(r%2))\n    \n    \ndef sum_even(n): \n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    return ((l+1)-(l%2))-((r+1)-(r%2))\n    \n    \ndef list_even(n): \n    '''\n    Write a python function to find all even numbers from a given list.\n    '''\n    \n    l = []\n    \n    for i in range(n):\n        if ((i+1)%2) == 0:\n            l.append(i+1)\n            \n    return l\n    \n    \ndef list_odd(n): \n    '''\n    Write a python function to find all odd numbers from a given list.\n    '''\n    l = []\n    \n    for i in range(n):\n        if ((i+1)%2)!= 0:\n            l.append(i+1)\n            \n    return l\n    \n    \ndef list_all(n): \n    '''\n    Write a python function to find all even and odd numbers from a given list.\n    '''\n    l = []\n    \n    for i in range(n):\n        if ((i+1)%2) == 0:\n            l.append(i+1)\n        else:\n            l.append(i+1)\n            \n    return l\n    \n    \ndef list_min_max(l): \n    '''\n    Write a python function to find the minimum and maximum number from a given list.\n    '''\n    min = max = l[0]\n    \n    for i in range(1,len(l)):\n        if l[i] < min:\n            min = l[i]\n            \n        elif l[i] > max:\n            max = l[i]\n            \n    return min, max\n    \n    \ndef list_all_sum(l): \n    '''\n    Write a python function to find the sum of all numbers from a given list.\n    '''\n    sum = 0\n    \n    for i in range(len(l)):\n        sum += l[i]\n        \n    return sum\n    \n    \ndef list_mean(l): \n    '''\n    Write a python function to find the mean of all numbers from a given list.\n    '''\n    return list_all_sum(l)/len(l)\n    \n    \ndef list_median(l): \n    '''\n    Write a python function to find the median of all numbers from a given list.\n    '''\n    if len(l)%2 == 0:\n        q = (len(l)+1)//2\n        return (l[q-1]+l[q])/2\n    else:\n        return l[len(l)//2]\n    \n    \ndef list_mode(l): \n    '''\n    Write a python function to find the mode of all numbers from a given list.\n    '''\n    l_ = {}\n    \n    for i in range(len(l)):\n        l_[l[i]] = l_.get(l[i],0) + 1\n        \n    m = max(l_.values())\n    for key in l_:\n        if l_[key] == m:\n            return key\n    \n    \ndef list_longest_sub_str(s): \n    '''\n    Write a python function to find the longest substring from a given string.\n    '''\n    l = []\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            l.append(s[i:j+1])\n            \n    return max(l, key = len)\n    \n    \ndef list_longest_sub_str_brute_force(s): \n    '''\n    Write a python function to find the longest substring from a given string using brute force method.\n    '''\n    if s == \"\":\n        return None\n    \n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if s[i:j+1] == s[i:j+1][::-1]:\n                return s[i:j+1]\n                \n    return None\n    \n    \ndef list_longest_sub_str_compression(s): \n    '''\n    Write a python function to find the longest substring from a given string using compression method.\n    '''\n    l = []\n    l.append((s[0],1))\n    \n    for i in range(1,len(s)):\n        if s[i-1] == s[i]:\n            l.append((s[i],l[i-1][1]+1))\n        else:\n            l.append((s[i],1))\n            \n    return max(l, key = lambda x: x[1])[0]\n    \n    \ndef list_longest_sub_str_sort(s): \n    '''\n    Write a python function to find the longest substring from a given string using sorting method.\n    '''\n    if s == \"\":\n        return None\n    \n    l = []\n    l.append((s[0],1))\n    \n    for i in range(1,len(s)):\n        if s[i-1] == s[i]:\n            l.append((s[i],l[i-1][1]+1))\n        else:\n            l.append((s[i],1))\n            \n    return max(l, key = lambda x: x[1])[0]\n    \n    \ndef list_longest_sub_str_kadane(s): \n    '''\n    Write a python function to find the longest substring from a given string using kadane's algorithm.\n    '''\n    l = []\n    l.append((s[0],1))\n    \n    for i in range(1,len(s)):\n        l.append((s[i],max(l[i-1][1]+1,l[i][1])))\n        \n    return max(l, key = lambda x: x[1])[0]\n    \n    \ndef list_longest_sub_str_kadane_modified(s): \n    '''\n    Write a python function to find the longest substring from a given string using modified kadane's algorithm.\n    '''\n    l = []\n    l.append((s[0],1))\n    \n    for i in range(1,len(s)):\n        l.append((s[i],max(l[i-1][1]+1,l[i][1],1)))\n        \n    return max(l, key = lambda x: x[1])[0]\n    \n    \ndef list_longest_sub_str_binary_search(s): \n    '''\n    Write a python function to find the longest substring from a given string using binary search.\n    '''\n    l = []\n    l.append((s[0],1))\n    \n    for i in range(1,len(s)):\n        l.append((s[i],l[i-1][1]+1))\n        \n    return max(l, key = lambda x: x[1])[0]\n    \n    \ndef list_longest_sub_str_edit_dist(s, t): \n    '''\n    Write a python function to find the longest substring from a given string using edit distance.\n    '''\n    l = []\n    l.append((s[0],1))\n    \n    for i in range(1,len(s)):\n        l.append((s[i],max(l[i-1][1]+1,l[i][1],1)))\n        \n    l = sorted(l, key = lambda x: x[1])\n    \n    return l[-1][0]\n    \n    \ndef list_longest_sub_str_is_palindrome(s): \n    '''\n    Write a python function to find the longest palindrome substring from a given string.\n    '''\n    if s == \"\":\n        return None\n    \n    l = []\n    l.append((s[0],1))\n    \n    for i in range(1,len(s)):",
        "num_ids": 47
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    odd_sum = 0\n    if n >= 1 and n <= 10**3:\n        for i in range(n):\n            if i % 2!= 0:\n                odd_sum += i\n    return odd_sum\n",
        "num_ids": 54
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    result = 0\n    for i in range(1, n):\n        if i % 2!= 0:\n            result += i\n    return result\n    \ndef sum_even(n):\n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    result = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            result += i\n    return result\n    \ndef list_even(n):\n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    result = 0\n    for i in range(n):\n        if i % 2 == 0:\n            result += i\n    return result\n    \ndef sum_range(n):\n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    result = 0\n    for i in range(n):\n        if i % 2 == 0:\n            result += i\n    return result\n    \ndef palindrome(str):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    rev = \"\"\n    for i in range(len(str) - 1, -1, -1):\n        rev += str[i]\n    return str == rev\n    \ndef print_formatted(number):\n    '''\n    Write a python function to print the values in a list of number in the specified format.\n    '''\n    w = len(str(bin(number)))\n    for i in range(1, number + 1):\n        x = bin(i).replace(\"0b\", \"\")\n        l = len(x)\n        spaces = (w - l) // 2\n        if spaces < 0:\n            spaces = 0\n        for j in range(spaces):\n            print(\" \", end=\"\")\n        print(x, end=\"\")\n        spaces = (w - l) // 2\n        for j in range(spaces):\n            print(\" \", end=\"\")\n        print(\"\")\n    \ndef count_binary(number):\n    '''\n    Write a python function to count the number of 1 bits in the binary representation of a number.\n    '''\n    count = 0\n    while number!= 0:\n        count += 1\n        number = number >> 1\n    return count\n    \ndef count_decimal(number):\n    '''\n    Write a python function to count the number of 1 bits in the decimal representation of a number.\n    '''\n    count = 0\n    while number!= 0:\n        count += 1\n        number = number // 10\n    return count\n    \ndef count_base(number, base):\n    '''\n    Write a python function to count the number of 1 bits in the decimal representation of a number.\n    '''\n    count = 0\n    while number!= 0:\n        count += 1\n        number = number // base\n    return count\n    \ndef sum_divisible_by_three(n):\n    '''\n    Write a python function to find the sum of all numbers divisible by three between the range 1 and n.\n    '''\n    result = 0\n    for i in range(1, n):\n        if i % 3 == 0:\n            result += i\n    return result\n    \ndef sum_divisible_by_three_advanced(n):\n    '''\n    Write a python function to find the sum of all numbers divisible by three between the range 1 and n.\n    '''\n    result = 0\n    for i in range(1, n):\n        if i % 3 == 0:\n            if i % 5 == 0:\n                result += i\n            else:\n                result += i // 3\n    return result\n    \ndef sum_divisible_by_three_iterative(n):\n    '''\n    Write a python function to find the sum of all numbers divisible by three between the range 1 and n.\n    '''\n    result = 0\n    for i in range(1, n):\n        while i % 3 == 0:\n            result += i\n            i = i // 3\n    return result\n    \ndef sum_divisible_by_three_recursive(n):\n    '''\n    Write a python function to find the sum of all numbers divisible by three between the range 1 and n.\n    '''\n    if n <= 3:\n        return n\n    result = 0\n    return 3 + sum_divisible_by_three_recursive(n - 3)\n    \ndef find_divisibles_even(n):\n    '''\n    Write a python function to find all the divisibles of a number within the range 1 and n.\n    '''\n    result = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            result.append(i)\n    return result\n    \ndef find_divisibles_odd(n):\n    '''\n    Write a python function to find all the divisibles of a number within the range 1 and n.\n    '''\n    result = []\n    for i in range(1, n):\n        if i % 2!= 0:\n            result.append(i)\n    return result\n    \ndef find_divisibles_iterative(n):\n    '''\n    Write a python function to find all the divisibles of a number within the range 1 and n.\n    '''\n    divisibles = []\n    for i in range(1, n):\n        count = 0\n        while i % i!= 0:\n            i = i // i\n            count += 1\n        if count == 1:\n            divisibles.append(i)\n    return divisibles\n    \ndef find_divisibles_recursive(n):\n    '''\n    Write a python function to find all the divisibles of a number within the range 1 and n.\n    '''\n    if n <= 3:\n        return [1, 2, 3]\n    else:\n        return 3 + find_divisibles_recursive(n - 3)\n    \ndef list_sum_of_divisors(n):\n    '''\n    Write a python function to find the sum of all the divisors of a number within the range 1 and n.\n    '''\n    result = 0\n    for i in range(1, n):\n        while n % i == 0:\n            result += i\n    return result\n    \ndef list_sum_of_divisors_iterative(n):\n    '''\n    Write a python function to find the sum of all the divisors of a number within the range 1 and n.\n    '''\n    result = 0\n    divisor_list = []\n    for i in range(1, n):\n        while n % i == 0:\n            result += i\n            divisor_list.append(i)\n            n = n // i\n    divisor_list.reverse()\n    return result, divisor_list\n    \ndef list_sum_of_divisors_recursive(n):\n    '''\n    Write a python function to find the sum of all the divisors of a number within the range 1 and n.\n    '''\n    if n <= 3:\n        return [1, 2, 3]\n    else:\n        return 3 + list_sum_of_divisors_recursive(n - 3)\n    \ndef count_divisors(n):\n    '''\n    Write a python function to find the number of divisors for a number within the range 1 and n.\n    '''\n    count = 0\n    if n <= 3:\n        count = 1\n    else:\n        count = 3\n        while n % 3!= 0:\n            count += 1\n            n = n // 3\n    return count\n    \ndef count_divisors_iterative(n):\n    '''\n    Write a python function to find the number of divisors for a number within the range 1 and n.\n    '''\n    count = 0\n    while n % 3 == 0:\n        count += 1\n        n = n // 3\n    return count\n    \ndef count_divisors_recursive(n):\n    '''\n    Write a python function to find the number of divisors for a number within the range 1 and n.\n    '''\n    if n <= 3:\n        return 1\n    else:\n        return 3 + count_divisors_recursive(n - 3)\n    \ndef list_sum_of_even_di",
        "num_ids": 47
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    result = 0\n    for x in range(len(arr)):\n        result += arr[x]\n",
        "num_ids": 27
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s=0\n    for i in arr:\n        s+=i\n    return s\n",
        "num_ids": 23
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    return arr[0] + _sum(arr[1:])\nprint(_sum([1,2,3,4,5]))\n",
        "num_ids": 65
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])\n    \n    \n    \n",
        "num_ids": 42
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    try:\n        sum=0\n        for i in arr:\n            sum=sum+i\n        return sum\n    except:\n        return 'Enter the valid array'\nprint('The sum of the array is', _sum([1,2,3,4,5]))\nprint('The sum of the array is', _sum(['a','b','c']))\n",
        "num_ids": 87
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return arr[0] + _sum(arr[1:])\n",
        "num_ids": 39
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for i in range(len(arr)):\n        s += arr[i]\n    return s\n",
        "num_ids": 31
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for i in range(len(arr)):\n        s += arr[i]\n    return s\n",
        "num_ids": 31
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n",
        "num_ids": 19
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> 32 - d)) & 0xffffffff\n",
        "num_ids": 23
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #code here\n    if d == 0:\n        return n\n    elif d > 0:\n        return left_rotate(n,d-1) << 1\n    else:\n        return (left_rotate(n,abs(d)-1) >> 1) + (left_rotate(n,abs(d)-1) << 1) \n",
        "num_ids": 85
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #just rotate by d bits\n    return (n << d) | (n >> (32 - d))\n",
        "num_ids": 27
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n<<d)|(n>>(32-d))\n",
        "num_ids": 18
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d)|(n>>32 - d))\n",
        "num_ids": 17
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    \n    print(\"\\n{}\\n\".format(n))\n    print(\"{} ^ {} = {}\".format(n,d,left_rotate(n,d)))\n",
        "num_ids": 44
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n    \n    ",
        "num_ids": 22
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) -1\n    n = n << d\n    return n & mask\n",
        "num_ids": 26
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n",
        "num_ids": 19
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "num_ids": 19
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n",
        "num_ids": 9
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "num_ids": 19
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # i = 0\n    # while i < len(text):\n    #     if text[i] == \" \":\n    #         text = text.replace(text[i],\"\")\n    #     else:\n    #         i += 1\n",
        "num_ids": 59
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text=text.replace(\" \",\"\")\n    return text\n",
        "num_ids": 17
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\"\\s+\", \"\", text)\n",
        "num_ids": 17
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n",
        "num_ids": 9
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r\"\\s+\", \"\", text)\n",
        "num_ids": 19
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \",\"\")\n",
        "num_ids": 12
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    while True:\n        try:\n            text = re.sub('\\s+', '', text)\n        except:\n            break\n    return text\n",
        "num_ids": 38
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    #x, y, z = input(\"Enter three numbers: \")\n    count = 0\n    if x == y and x == z:\n        count += 1\n    elif y == x and y == z:\n        count += 1\n    elif z == x and z == y:\n        count += 1\n    return count\n",
        "num_ids": 78
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    a = x\n    b = y\n    c = z\n    x = a+b+c\n    if (x%2==0):\n        x=x/2\n    else:\n        x = x/2+1\n    return x\ndef test_three_different(x,y,z):\n    '''\n    Write a python function to count the number of different numbers from three given integers.\n    '''\n    a = x\n    b = y\n    c = z\n    x = a+b+c\n    if (x%2!=0):\n        x=x/2\n    else:\n        x = x/2+1\n    return x\ndef test_numbers(num):\n    '''\n    Write a python function to return the sum of all numbers from 1 to n(both inclusive).\n    '''\n    a = 1\n    b = num\n    while(a<=b):\n        a=a+1\n    return a\ndef test_pow(x,y):\n    '''\n    Write a python function to calculate the square root of a given integer.\n    '''\n    a = x\n    while(a>1):\n        a = a/2\n    return a\ndef test_gcd(x,y):\n    '''\n    Write a python function to calculate the greatest common divisor of two integers.\n    '''\n    a = x\n    b = y\n    while(a>0 and b>0):\n        if(a>b):\n            a = a%b\n        else:\n            b = b%a\n    return a+b\ndef test_lcm(x,y):\n    '''\n    Write a python function to calculate the least common multiple of two integers.\n    '''\n    a = x\n    b = y\n    while(a>0 and b>0):\n        if(a>b):\n            a = a%b\n        else:\n            b = b%a\n    return a*b\ndef test_lcm_using_gcd(x,y):\n    '''\n    Write a python function to calculate the least common multiple of two integers using GCD.\n    '''\n    a = x\n    b = y\n    while(a>0 and b>0):\n        if(a>b):\n            a = a%b\n        else:\n            b = b%a\n    return a*b\ndef test_leap_year(year):\n    '''\n    Write a python function to check if a given year is a leap year or not.\n    '''\n    a = year\n    if(a%4==0):\n        if(a%100==0):\n            if(a%400==0):\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef test_leap_year_using_gcd(year):\n    '''\n    Write a python function to check if a given year is a leap year or not.\n    '''\n    a = year\n    while(a>0):\n        if(a%4==0):\n            if(a%100==0):\n                if(a%400==0):\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            return False\n    return False\ndef test_leap_year_using_gcd_2(year):\n    '''\n    Write a python function to check if a given year is a leap year or not.\n    '''\n    a = year\n    while(a>0):\n        if(a%4==0):\n            if(a%100==0):\n                if(a%400==0):\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            return False\n    return False\ndef test_sum_digits(x):\n    '''\n    Write a python function to calculate the sum of all digits from a given integer.\n    '''\n    a = x\n    while(a>0):\n        x = x%10\n        a = a/10\n    return x\ndef test_factorial(x):\n    '''\n    Write a python function to calculate the factorial of a given integer.\n    '''\n    a = x\n    b = 1\n    while(a>0):\n        b = b*a\n        a = a-1\n    return b\ndef test_factorial_recursive(x):\n    '''\n    Write a python function to calculate the factorial of a given integer using recursive method.\n    '''\n    if(x==1):\n        return 1\n    else:\n        return x*test_factorial_recursive(x-1)\ndef test_factorial_iterative(x):\n    '''\n    Write a python function to calculate the factorial of a given integer using iterative method.\n    '''\n    a = x\n    b = 1\n    while(a>0):\n        b = b*a\n        a = a-1\n    return b\ndef test_factorial_using_gcd(x,y):\n    '''\n    Write a python function to calculate the factorial of a given integer using GCD.\n    '''\n    a = x\n    b = y\n    while(a>0):\n        if(a>b):\n            a = a%b\n        else:\n            b = b%a\n    return a\ndef test_factorial_using_gcd_2(x,y):\n    '''\n    Write a python function to calculate the factorial of a given integer using GCD.\n    '''\n    a = x\n    b = y\n    while(a>0):\n        if(a>b):\n            a = a%b\n        else:\n            b = b%a\n    return a\ndef test_factorial_using_gcd_3(x,y):\n    '''\n    Write a python function to calculate the factorial of a given integer using GCD.\n    '''\n    a = x\n    b = y\n    while(a>0):\n        if(a>b):\n            a = a%b\n        else:\n            b = b%a\n    return a\ndef test_factorial_using_gcd_4(x,y):\n    '''\n    Write a python function to calculate the factorial of a given integer using GCD.\n    '''\n    a = x\n    b = y\n    while(a>0):\n        if(a>b):\n            a = a%b\n        else:\n            b = b%a\n    return b\ndef test_factorial_using_gcd_5(x,y):\n    '''\n    Write a python function to calculate the factorial of a given integer using GCD.\n    '''\n    a = x\n    b = y\n    while(a>0):\n        if(a>b):\n            a = a%b\n        else:\n            b = b%a\n    return a\ndef test_factorial_using_gcd_6(x,y):\n    '''\n    Write a python function to calculate the factorial of a given integer using GCD.\n    '''\n    a = x\n    b = y\n    while(a>0):\n        if(a>b):\n            a = a%b\n        else:\n            b = b%a\n    return b\ndef test_factorial_using_gcd_7(x,y):\n    '''\n    Write a python function to calculate the factorial of a given integer using GCD.\n    '''\n    a = x\n    b = y\n    while(a>0):\n        if(a>b):\n            a = a%b\n        else:\n            b = b%a\n    return a\ndef test_factorial_using_gcd_8(x,y):\n    '''\n    Write a python function to calculate the factorial of a given integer using GCD.\n    '''\n    a = x\n    b = y\n    while(a>0):\n        if(a>b):\n            a = a%b\n        else:\n            b = b%a\n    return b\ndef test_factorial_using_gcd_9(x,y):\n    '''\n    Write a python function to calculate the factorial of a given integer using GCD.\n    '''\n    a = x\n    b = y\n    while(a>0):\n        if(a>b):\n            a = a%b\n        else",
        "num_ids": 37
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n",
        "num_ids": 10
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print(\"{} is {}\".format(x,y))\n    print(\"{} is {}\".format(y,z))\n    print(\"{} is {}\".format(x,z))\n",
        "num_ids": 47
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert x == y == z, 'No.'\n",
        "num_ids": 14
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    i = 0\n    while x == y or x == z or y == z:\n        i = i + 1\n        if x == y or x == z or y == z:\n            x = random.randint(1,100)\n            y = random.randint(1,100)\n            z = random.randint(1,100)\n    print(i)\n    #print(x,y,z)\n",
        "num_ids": 100
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(0,3):\n        if x[i] == y[i] and y[i] == z[i] and x[i] == z[i]:\n            count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    return count\n",
        "num_ids": 25
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # 1. Initialize left and right pointer\n    left = 0\n    right = len(arr) - 1\n",
        "num_ids": 28
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # The count of rotations to sorted array of size 1 is 0\n    # The count of rotations to sorted array of size 2 is 0\n    # The count of rotations to sorted array of size 3 is 1\n    # The count of rotations to sorted array of size 4 is 2\n    # The count of rotations to sorted array of size 5 is 3\n    # The count of rotations to sorted array of size 6 is 4\n    # The count of rotations to sorted array of size 7 is 5\n    # The count of rotations to sorted array of size 8 is 6\n    # The count of rotations to sorted array of size 9 is 7\n    # The count of rotations to sorted array of size 10 is 8\n    # The count of rotations to sorted array of size 11 is 9\n    # The count of rotations to sorted array of size 12 is 10\n    # The count of rotations to sorted array of size 13 is 11\n    # The count of rotations to sorted array of size 14 is 12\n    # The count of rotations to sorted array of size 15 is 13\n    # The count of rotations to sorted array of size 16 is 14\n    # The count of rotations to sorted array of size 17 is 15\n    # The count of rotations to sorted array of size 18 is 16\n    # The count of rotations to sorted array of size 19 is 17\n    # The count of rotations to sorted array of size 20 is 18\n    # The count of rotations to sorted array of size 21 is 19\n    # The count of rotations to sorted array of size 22 is 20\n    # The count of rotations to sorted array of size 23 is 21\n    # The count of rotations to sorted array of size 24 is 22\n    # The count of rotations to sorted array of size 25 is 23\n    # The count of rotations to sorted array of size 26 is 24\n    # The count of rotations to sorted array of size 27 is 25\n    # The count of rotations to sorted array of size 28 is 26\n    # The count of rotations to sorted array of size 29 is 27\n    # The count of rotations to sorted array of size 30 is 28\n    # The count of rotations to sorted array of size 31 is 29\n    # The count of rotations to sorted array of size 32 is 30\n    # The count of rotations to sorted array of size 33 is 31\n    # The count of rotations to sorted array of size 34 is 32\n    # The count of rotations to sorted array of size 35 is 33\n    # The count of rotations to sorted array of size 36 is 34\n    # The count of rotations to sorted array of size 37 is 35\n    # The count of rotations to sorted array of size 38 is 36\n    # The count of rotations to sorted array of size 39 is 37\n    # The count of rotations to sorted array of size 40 is 38\n    # The count of rotations to sorted array of size 41 is 39\n    # The count of rotations to sorted array of size 42 is 40\n    # The count of rotations to sorted array of size 43 is 41\n    # The count of rotations to sorted array of size 44 is 42\n    # The count of rotations to sorted array of size 45 is 43\n    # The count of rotations to sorted array of size 46 is 44\n    # The count of rotations to sorted array of size 47 is 45\n    # The count of rotations to sorted array of size 48 is 46\n    # The count of rotations to sorted array of size 49 is 47\n    # The count of rotations to sorted array of size 50 is 48\n    # The count of rotations to sorted array of size 51 is 49\n    # The count of rotations to sorted array of size 52 is 50\n    # The count of rotations to sorted array of size 53 is 51\n    # The count of rotations to sorted array of size 54 is 52\n    # The count of rotations to sorted array of size 55 is 53\n    # The count of rotations to sorted array of size 56 is 54\n    # The count of rotations to sorted array of size 57 is 55\n    # The count of rotations to sorted array of size 58 is 56\n    # The count of rotations to sorted array of size 59 is 57\n    # The count of rotations to sorted array of size 60 is 58\n    # The count of rotations to sorted array of size 61 is 59\n    # The count of rotations to sorted array of size 62 is 60\n    # The count of rotations to sorted array of size 63 is 61\n    # The count of rotations to sorted array of size 64 is 62\n    # The count of rotations to sorted array of size 65 is 63\n    # The count of rotations to sorted array of size 66 is 64\n    # The count of rotations to sorted array of size 67 is 65\n    # The count of rotations to sorted array of size 68 is 66\n    # The count of rotations to sorted array of size 69 is 67\n    # The count of rotations to sorted array of size 70 is 68\n    # The count of rotations to sorted array of size 71 is 69\n    # The count of rotations to sorted array of size 72 is 70\n    # The count of rotations to sorted array of size 73 is 71\n    # The count of rotations to sorted array of size 74 is 72\n    # The count of rotations to sorted array of size 75 is 73\n    # The count of rotations to sorted array of size 76 is 74\n    # The count of rotations to sorted array of size 77 is 75\n    # The count of rotations to sorted array of size 78 is 76\n    # The count of rotations to sorted array of size 79 is 77\n    # The count of rotations to sorted array of size 80 is 78\n    # The count of rotations to sorted array of size 81 is 79\n    # The count of rotations to sorted array of size 82 is 80\n    # The count of rotations to sorted array of size 83 is 81\n    # The count of rotations to sorted array of size 84 is 82\n    # The count of rotations to sorted array of size 85 is 83\n    # The count of rotations to sorted array of size 86 is 84\n    # The count of rotations to sorted array of size 87 is 85\n    # The count of rotations to sorted array of size 88 is 86\n    # The count of rotations to sorted array of size 89 is 87\n    # The count of rotations to sorted array of size 90 is 88\n    # The count of rotations to sorted array of size 91 is 89\n    # The count of rotations to sorted array of size 92 is 90\n    # The count of rotations to sorted array of size 93 is 91\n    # The count of rotations to sorted array of size 94 is 92\n    # The count of rotations to sorted array of size 95 is 93\n    # The count of rotations to sorted array of size 96 is 94\n    # The count of rotations to sorted array of size 97 is 95\n    # The count of rotations to sorted array of size 98 is 96\n    # The count of rotations to sorted array of size 99 is 97\n    # The count of rotations to sorted array of size 100 is 98\n    # The count of rotations to sorted array of size 101 is 99\n    # The count of rotations to sorted array of size 102 is 100\n    # The count of rotations to sorted array of size 103 is 101\n    # The count of rotations to sorted array of size 104 is 102\n    # The count of rotations to sorted array of size 105 is 103\n    # The count of rotations to sorted array of size 106 is 104\n    # The count of rotations to sorted array of size 107 is 105\n    # The count of rotations to sorted array of size 108 is 106\n    # The count of rotations to sorted array of size 109 is 107\n    # The count of rotations to sorted array of size 110 is 108\n    # The count of rotations to sorted array of size 111 is 109\n    # The count of rotations to sorted array of size 112 is 110\n    # The count of rotations to sorted array of size 113 is 111\n    # The count of rotations to sorted array of size 114 is 112\n    # The count of rotations to sorted array of size 115 is 113\n    # The count of rotations to sorted array of size 116 is 114\n    # The count of rotations to sorted array of size 117 is 115\n    # The count of rotations to sorted array of size 118 is 116\n    # The count of rotations to sorted array of size 119 is 117\n    # The count of rotations to sorted array of size 120 is 118\n    # The count of rotations to sorted array of size 121 is 119\n    # The count of rotations to sorted array of size 122 is 120\n    # The count of rotations to sorted array of size 123 is 121\n    # The count of rotations to sorted arra",
        "num_ids": 1980
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(1,len(arr)):\n        if arr[i] <= arr[i-1]:\n            count += 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if not arr:\n        return 0\n    \n    if len(arr) == 1:\n        return 1\n    \n    count = 0\n    end = len(arr) - 1\n    i = 0\n    while i < end:\n        if arr[i] > arr[i + 1]:\n            count += 1\n            i += 1\n        else:\n            i += 1\n    \n    return count\n",
        "num_ids": 96
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(1,n):\n        if arr[i-1] > arr[i]:\n            count += 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    start = arr[0]\n    arr.remove(start)\n    end = arr[0]\n    counter = 0\n    while start <= end:\n        if start == end:\n            counter += 1\n            break\n        else:\n            arr.remove(start)\n            arr.remove(end)\n            start = arr[0]\n            end = arr[0]\n            counter += 1\n    print(counter)\n",
        "num_ids": 100
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(1,len(arr)):\n        if(arr[i]<arr[i-1]):\n            count = count+1\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    count = 0\n    \n    if len(arr) == 1:\n        return count\n    \n    if len(arr) <= 1:\n        return count\n    \n    min_idx = 0\n    max_idx = len(arr) - 1\n    \n    while min_idx <= max_idx:\n        \n        pivot_idx = find_pivot(arr, min_idx, max_idx)\n        \n        if pivot_idx == -1:\n            break\n        \n        arr[min_idx], arr[pivot_idx] = arr[pivot_idx], arr[min_idx]\n        \n        min_idx += 1\n        \n        count += 1\n    \n    return count\n",
        "num_ids": 180
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    arr.sort()\n    print(arr)\n    return count_rotations(arr)\n",
        "num_ids": 24
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    for i in range(n-1):\n        # if arr[i] > arr[i+1], we need to swap arr[i] and arr[i+1]\n        if arr[i] > arr[i+1]:\n            swap(arr, i, i+1)\n    print(arr)\n    count = 1\n    for i in range(1, n):\n        if arr[i-1] > arr[i]:\n            count += 1\n    return count\n",
        "num_ids": 123
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    n = int(n**0.5)\n    if n * n == n :\n        return True\n    else:\n        return False\n    \ndef is_prime_number(n) :\n    '''\n    Write a function to check whether the given number is a prime number or not. https://www.geeksforgeeks.org/check-if-given-number-is-prime-number-in-cpp/\n    '''\n    if n <= 1 :\n        return False\n    else :\n        for i in range(2,n) :\n            if n % i == 0 :\n                return False\n    return True\n    \ndef is_prime_number_recursive(n) :\n    '''\n    Write a function to check whether the given number is a prime number or not. https://www.geeksforgeeks.org/check-if-given-number-is-prime-number-in-cpp/\n    '''\n    def prime_helper(n,i) :\n        if n == 0:\n            return False\n        elif n == 1:\n            return True\n        elif i * i > n:\n            return False\n        else:\n            for j in range(2,n) :\n                if n % j == 0:\n                    return False\n            return True\n    \n    if n <= 1 :\n        return False\n    else :\n        for i in range(2,n) :\n            if prime_helper(n,i) :\n                return True\n        return False\n",
        "num_ids": 135
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # if n <= 1:\n    #     return True\n    # if n % 2!= 0:\n    #     return False\n    # p = (n // 2 + 1)\n    # s = int(math.sqrt(p))\n    # return p == s*s\n    # if n <= 1:\n    #     return False\n    # while n % 2 == 0:\n    #     n = n // 2\n    # return n == 1\n    # return n == 1\n    if n <= 1:\n        return True\n    import math\n    for i in range(int(math.sqrt(n))+1):\n        if i*i == n:\n            return True\n    return False\n",
        "num_ids": 166
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return ((n**0.5).is_integer())\n",
        "num_ids": 16
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n > 0 :\n        sqrt_n = int(math.sqrt(n))\n        if sqrt_n * sqrt_n == n :\n            return True\n        else :\n            return False\n    else :\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # code here\n    if n < 1:\n        return False\n    x = n\n    y = (x+1)//2\n    while y < x:\n        if x == y*y:\n            return True\n        y = (y+x)//2\n    return False\n    \n    \n    \n    \n    ",
        "num_ids": 78
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # if you want to use logarithmic thinking to check if it is a perfect square \n    # you can use below code\n    # if abs(n - int(sqrt(n))) < 1e-6: return True\n    # else: return False\n",
        "num_ids": 62
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n==0:\n        return False\n    \n    i=1\n    while i*i<=n:\n        i+=1\n    if i*i==n:\n        return True\n    else:\n        return False\n",
        "num_ids": 56
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n==0: return False\n    x=n**0.5\n    return x==int(x)\n",
        "num_ids": 29
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    import math\n    if n > 0:\n        sqrt = int(math.sqrt(n))\n        return sqrt * sqrt == n\n    return False\n",
        "num_ids": 41
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n <= 0):\n        print(\"n must be a positive integer\")\n        return False\n    low, high = 1, n\n    while (low <= high):\n        mid = low + (high-low) / 2\n        # Check if mid is a perfect square\n        sq = mid*mid\n        if sq == n:\n            return True\n        elif sq < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n    # If we reach here, then n is not a perfect square\n    return False\n",
        "num_ids": 128
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return False\n    else:\n        return is_product_even(arr[1:])\n",
        "num_ids": 34
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % 2 == 0\n",
        "num_ids": 28
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    total = 1\n    for i in arr:\n        total = total * i\n    \n    return total % 2 == 0\n",
        "num_ids": 31
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if isinstance(arr, list) == False:\n        return False\n    else:\n        if len(arr) == 0:\n            return False\n        else:\n            x = 1\n            for i in range(len(arr)):\n                x *= arr[i]\n            if x == 1:\n                return True\n            else:\n                return False\n",
        "num_ids": 86
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return False\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod % 2 == 0\n",
        "num_ids": 44
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % 2 == 0\n    \nassert is_product_even([1,2,3,4]) == False\nassert is_product_even([1,2,3,4,5]) == True\nassert is_product_even([1,2,3,4,5,6]) == True\n",
        "num_ids": 90
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if arr[0]!= 0:\n        return False\n    for i in range(1, len(arr)):\n        if (arr[i] % 2)!= 0:\n            return False\n    return True\n    \nprint(is_product_even([1,2,3,4,5,6]))\n",
        "num_ids": 77
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in range(0,len(arr)):\n        if(arr[i] % 2!= 0):\n            return False\n    return True\n",
        "num_ids": 38
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr: \n        product *= i \n    return product % 2 == 0\n",
        "num_ids": 30
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    \n    product_list = list(map(lambda x: x * x, arr))\n    product_result = reduce(lambda x, y: x * y, product_list)\n    \n    if product_result % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 71
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return_list = []\n    for i in range(len(lists)):\n        return_list.append([])\n        return_list[i] = lists[i]\n        for j in range(len(lists[i])):\n            if i == 0:\n                return_list[i].append(lists[i][j])\n            else:\n                return_list[i].append(lists[i][j]+return_list[i-1][j])\n    max_sum = max(return_list[len(return_list)-1])\n    for i in range(len(return_list)-1):\n        if return_list[i+1][len(return_list[i])-1] > max_sum:\n            max_sum = return_list[i+1][len(return_list[i])-1]\n    return max_sum\n",
        "num_ids": 203
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Check for empty list\n    if not lists:\n        return []\n    # Return empty list if list contains 0 elements\n    if not lists[0]:\n        return []\n    # Set min and max variables\n    max_sum, min_sum = lists[0][0], lists[0][0]\n    # Compare values of min and max\n    for l in lists:\n        if l[0] >= max_sum:\n            max_sum = l[0]\n        if l[0] <= min_sum:\n            min_sum = l[0]\n    # Create empty list to be returned\n    final_list = []\n    # Go through each item in the list\n    for i in range(len(lists)):\n        # Check if item in list is smaller than min value\n        if lists[i][0] < min_sum:\n            # Add new item to list\n            final_list.append(lists[i])\n        # Check if item in list is larger than max value\n        elif lists[i][0] > max_sum:\n            # Add new item to list\n            final_list.append(lists[i])\n    # Return final list with minimum and maximum values\n    return final_list",
        "num_ids": 281
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    #\n    # Write your code here.\n    #\n    return lists[0]\n",
        "num_ids": 23
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    n = len(lists)\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                max_sum = max(max_sum, lists[i] + lists[j])\n    return max_sum\n",
        "num_ids": 70
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 1:\n        return lists[0]\n",
        "num_ids": 19
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    #max_list = list()\n    #max_list.append(lists[0])\n    #max_list.append(max(lists[0]))\n    #max_list.append(max_list[0]+lists[0])\n    #for i in range(1,len(lists)):\n    #    max_list.append(max(max_list[i-1], max_list[i-2]+lists[i]))\n    #    if max_list[i] >= max_list[i-2]+lists[i-1]:\n    #        max_list[i-2]=max_list[i-1]\n    #        max_list[i-1]=max_list[i]\n    #    else:\n    #        max_list[i-1]=max_list[i-2]+lists[i-1]\n    #return max_list\n    max_sum = 0\n    for i in range(len(lists)):\n        max_sum = max(max_sum, lists[i])\n    return max_sum\n",
        "num_ids": 251
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_sum_list = []\n    for lst in lists:\n        sum_lst = sum(lst)\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_sum_list = lst\n    return max_sum_list\n",
        "num_ids": 78
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # recursive solution\n    max_sum = -9999999999999999999999999\n    max_sub_list = []\n    for sub_list in lists:\n        if len(sub_list) == 1:\n            if sub_list[0] > max_sum:\n                max_sum = sub_list[0]\n                max_sub_list = sub_list\n        else:\n            if sub_list[0] > max_sum:\n                max_sum = sub_list[0]\n                max_sub_list = sub_list\n            if max_sum + sub_list[1] > max_sum:\n                max_sum = max_sum + sub_list[1]\n                max_sub_list = sub_list\n            if max_sum + sub_list[2] > max_sum:\n                max_sum = max_sum + sub_list[2]\n                max_sub_list = sub_list\n            if max_sum + sub_list[3] > max_sum:\n                max_sum = max_sum + sub_list[3]\n                max_sub_list = sub_list\n            if max_sum + sub_list[4] > max_sum:\n                max_sum = max_sum + sub_list[4]\n                max_sub_list = sub_list\n            if max_sum + sub_list[5] > max_sum:\n                max_sum = max_sum + sub_list[5]\n                max_sub_list = sub_list\n            if max_sum + sub_list[6] > max_sum:\n                max_sum = max_sum + sub_list[6]\n                max_sub_list = sub_list\n            if max_sum + sub_list[7] > max_sum:\n                max_sum = max_sum + sub_list[7]\n                max_sub_list = sub_list\n            if max_sum + sub_list[8] > max_sum:\n                max_sum = max_sum + sub_list[8]\n                max_sub_list = sub_list\n            if max_sum + sub_list[9] > max_sum:\n                max_sum = max_sum + sub_list[9]\n                max_sub_list = sub_list\n            if max_sum + sub_list[10] > max_sum:\n                max_sum = max_sum + sub_list[10]\n                max_sub_list = sub_list\n            if max_sum + sub_list[11] > max_sum:\n                max_sum = max_sum + sub_list[11]\n                max_sub_list = sub_list\n    return max_sub_list\n    \ndef max_sum_sub_list_recursive(lists, index):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # recursive solution\n    if index == len(lists):\n        return 0\n    elif lists[index] > 0:\n        return lists[index]\n    else:\n        return max_sum_sub_list_recursive(lists, index + 1)\n",
        "num_ids": 62
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return max_sum_helper(lists)\n",
        "num_ids": 14
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Start with an empty list\n    highest_sum = []\n",
        "num_ids": 17
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialization\n    max_upper = 0\n    last_char = \"\"\n    max_count = 0\n    \n    # Searching\n    for char in test_str:\n        if char.isupper():\n            last_char = char\n            max_upper = 1\n            max_count = 1\n        elif char.isupper():\n            if char.isupper():\n                max_upper += 1\n                max_count += 1\n            elif char.islower():\n                max_upper = max_count\n                max_count = 1\n            else:\n                max_upper = max_count\n                max_count = 0\n        elif max_upper > max_count:\n            max_upper = max_count\n            max_count = 0\n        else:\n            max_count = max_count\n            max_upper = max_count\n    return max_upper\n    ",
        "num_ids": 206
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    ans = 0\n    i = 0\n    while i < len(test_str):\n        count = 0\n        while i < len(test_str) and test_str[i] >= 'A' and test_str[i] <= 'Z':\n            i += 1\n            count += 1\n        ans = max(count, ans)\n        i += 1\n    return ans\n",
        "num_ids": 90
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    m=0\n    l=[]\n    for i in range(len(test_str)):\n        if test_str[i]>='A' and test_str[i]<='Z':\n            l.append(test_str[i])\n    for i in range(len(l)):\n        count=0\n        for j in range(len(l)):\n            if i==j:\n                break\n            elif l[i]==l[j]:\n                count+=1\n        if count>m:\n            m=count\n    return m\n",
        "num_ids": 135
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # maximum run of uppercase is the length of the longest substring having all the characters of the string in uppercase. \n    # So we will create a dp table with length of the string.\n    # Then we will check the maximum number of occurrences of each character in the string and then we will update the table \n    # by updating the maxrun of each character.\n",
        "num_ids": 87
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    \n    # iterating through the given string\n    for i in range(len(test_str)):\n        \n        # creating a counter\n        count = 1\n        \n        # finding the current character\n        current = test_str[i]\n        \n        # loop to find the current character and its occurance\n        for j in range(i+1, len(test_str)):\n            \n            # comparing the current character with the next character\n            if test_str[j] == current:\n                count += 1\n            else:\n                break\n            \n        # checking for maximum\n        if count > max_count:\n            max_count = count\n            \n        # checking for the minimum\n        if count < min_count:\n            min_count = count\n    \n    return max_count, min_count\n",
        "num_ids": 192
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run_index = 1\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] >= 'A' and test_str[i] <= 'Z':\n            count += 1\n        else:\n            count = 1\n        if count > run_index:\n            run_index = count\n    return run_index\n",
        "num_ids": 88
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    prev_char = None\n    max_run = 0\n",
        "num_ids": 16
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            count = 0\n        if max_run < count:\n            max_run = count\n    return max_run\n    \nprint(max_run_uppercase('ABDDD')) # 4\nprint(max_run_uppercase('AaAAA')) # 3\nprint(max_run_uppercase('AaA')) # 1\nprint(max_run_uppercase('ABB')) # 1\nprint(max_run_uppercase('Abddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd",
        "num_ids": 2009
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    if not test_str:\n        return 0\n    \n    char_pos = {}\n    \n    for i, letter in enumerate(test_str):\n        \n        if letter in char_pos:\n            char_pos[letter] = i\n        else:\n            char_pos[letter] = i\n    \n    char_count = 0\n    max_count = 0\n    \n    for k, v in char_pos.items():\n        \n        if v - char_count >= max_count:\n            max_count = v - char_count\n        \n        char_count = v\n    \n    return max_count\n",
        "num_ids": 150
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    try:\n        #convert to set to eliminate duplicates\n        nums = set(nums)\n        for num in nums:\n            if num % 2!= 0:\n                return num\n    except:\n        raise TypeError\n",
        "num_ids": 58
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(0,len(nums)):\n        if(nums[i]%2!=0):\n            return nums[i]\n    return -1\n",
        "num_ids": 45
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    return next((n for n in nums if n%2==1),None)\n    \ndef count_even(nums):\n    '''\n    Write a python function to count the number of even numbers in a given list of numbers.\n    '''\n    return len(list(filter(lambda x:x%2==0,nums)))\n",
        "num_ids": 23
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd_number = list()\n    if len(nums) == 0:\n        return odd_number\n",
        "num_ids": 27
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return i\n    return -1\n",
        "num_ids": 38
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd_num = 1\n    for num in nums:\n        if num == odd_num:\n            return odd_num\n        odd_num += 2\n",
        "num_ids": 39
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if (num % 2) == 1:\n            return num\n",
        "num_ids": 25
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!= 0:\n            return i\n    return None\n",
        "num_ids": 28
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    nums.sort()\n    for i in range(len(nums)):\n        if nums[i]%2==1:\n            return nums[i]\n    return -1\n",
        "num_ids": 48
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n    \n    \ndef non_empty_string(str_list):\n    '''\n    Write a python function to check if a string contains only non-empty characters\n    '''\n    for s in str_list:\n        if s == \"\":\n            return False\n    return True\n    \n    \ndef any_lowercase1(str_list):\n    '''\n    Write a python function to check if any string contains all lowercase characters\n    '''\n    for s in str_list:\n        for ch in s:\n            if ch.islower():\n                return True\n    return False\n    \n    \ndef any_lowercase2(str_list):\n    '''\n    Write a python function to check if any string contains all lowercase characters\n    '''\n    for s in str_list:\n        if any([c.islower() for c in s]):\n            return True\n    return False\n    \n    \ndef any_lowercase3(str_list):\n    '''\n    Write a python function to check if any string contains all lowercase characters\n    '''\n    return any([c.islower() for c in str_list])\n    \n    \ndef any_lowercase4(str_list):\n    '''\n    Write a python function to check if any string contains all lowercase characters\n    '''\n    return any([c.islower() for s in str_list for c in s])\n    \n    \ndef any_lowercase5(str_list):\n    '''\n    Write a python function to check if any string contains all lowercase characters\n    '''\n    return any([all(c.islower() for c in s) for s in str_list])\n    \n    \ndef any_lowercase6(str_list):\n    '''\n    Write a python function to check if any string contains all lowercase characters\n    '''\n    return any([c.islower() for s in str_list for c in s])\n    \n    \ndef any_lowercase7(str_list):\n    '''\n    Write a python function to check if any string contains all lowercase characters\n    '''\n    return any(all(c.islower() for c in s) for s in str_list)\n    \n    \ndef any_lowercase8(str_list):\n    '''\n    Write a python function to check if any string contains all lowercase characters\n    '''\n    return any(all(c.islower() for c in s) for s in str_list)\n    \n    \ndef any_lowercase9(str_list):\n    '''\n    Write a python function to check if any string contains all lowercase characters\n    '''\n    return any(all(c.islower() for s in str_list) for c in str_list)\n    \n    \ndef any_lowercase10(str_list):\n    '''\n    Write a python function to check if any string contains all lowercase characters\n    '''\n    return any(all(c.islower() for c in s) for s in str_list)\n    \n    \ndef any_lowercase11(str_list):\n    '''\n    Write a python function to check if any string contains all lowercase characters\n    '''\n    return any(any(c.islower() for s in str_list) for c in str_list)\n    \n    \ndef any_lowercase12(str_list):\n    '''\n    Write a python function to check if any string contains all lowercase characters\n    '''\n    return any(any(c.islower() for s in str_list) for c in str_list)\n    \n    \ndef any_lowercase13(str_list):\n    '''\n    Write a python function to check if any string contains all lowercase characters\n    '''\n    return any(any(c.islower() for c in s) for s in str_list)\n    \n    \ndef any_lowercase14(str_list):\n    '''\n    Write a python function to check if any string contains all lowercase characters\n    '''\n    return any(any(c.islower() for s in str_list) for s in str_list)\n    \n    \ndef any_lowercase15(str_list):\n    '''\n    Write a python function to check if any string contains all lowercase characters\n    '''\n    return any(any(c.islower() for s in str_list) for s in str_list)\n    \n    \ndef any_lowercase16(str_list):\n    '''\n    Write a python function to check if any string contains all lowercase characters\n    '''\n    return any(any(c.islower() for s in str_list) for s in str_list)\n    \n    \ndef any_lowercase17(str_list):\n    '''\n    Write a python function to check if any string contains all lowercase characters\n    '''\n    return any(any(c.islower() for s in str_list) for s in str_list)\n    \n    \ndef any_lowercase18(str_list):\n    '''\n    Write a python function to check if any string contains all lowercase characters\n    '''\n    return any(any(c.islower() for s in str_list) for s in str_list)\n    \n    \ndef any_lowercase19(str_list):\n    '''\n    Write a python function to check if any string contains all lowercase characters\n    '''\n    return any(any(c.islower() for s in str_list) for s in str_list)\n    \n    \ndef any_lowercase20(str_list):\n    '''\n    Write a python function to check if any string contains all lowercase characters\n    '''\n    return any(any(c.islower() for s in str_list) for s in str_list)\n    \n    \ndef any_lowercase21(str_list):\n    '''\n    Write a python function to check if any string contains all lowercase characters\n    '''\n    return any(any(c.islower() for s in str_list) for s in str_list)\n    \n    \ndef any_lowercase22(str_list):\n    '''\n    Write a python function to check if any string contains all lowercase characters\n    '''\n    return any(any(c.islower() for s in str_list) for s in str_list)\n    \n    \ndef any_lowercase23(str_list):\n    '''\n    Write a python function to check if any string contains all lowercase characters\n    '''\n    return any(any(c.islower() for s in str_list) for s in str_list)\n    \n    \ndef any_lowercase24(str_list):\n    '''\n    Write a python function to check if any string contains all lowercase characters\n    '''\n    return any(any(c.islower() for s in str_list) for s in str_list)\n    \n    \ndef any_lowercase25(str_list):\n    '''\n    Write a python function to check if any string contains all lowercase characters\n    '''\n    return any(any(c.islower() for s in str_list) for s in str_list)\n    \n    \ndef any_lowercase26(str_list):\n    '''\n    Write a python function to check if any string contains all lowercase characters\n    '''\n    return any(any(c.islower() for s in str_list) for s in str_list)\n    \n    \ndef any_lowercase27(str_list):\n    '''\n    Write a python function to check if any string contains all lowercase characters\n    '''\n    return any(any(c.islower() for s in str_list) for s in str_list)\n    \n    \ndef any_lowercase28(str_list):\n    '''\n    Write a python function to check if any string contains all lowercase characters\n    '''\n    return any(any(c.islower() for s in str_list) for s in str_list)\n    \n    \ndef any_lowercase29(str_list):\n    '''\n    Write a python function to check if any string contains all lowercase characters\n    '''\n    return any(any(c.islower() for s in str_list) for s in str_list)\n    \n    \ndef any_lowercase30(str_list):\n    '''\n    Write a pytho",
        "num_ids": 8
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return test_tup[0] == K or test_tup[1] == K or test_tup[2] == K\n    \ndef are_all_pairs_equal(pairs):\n    '''\n    Write a function to check if the given list of pairs are all equal.\n    '''\n    for i in range(1, len(pairs)):\n        if pairs[i][0]!= pairs[i-1][0] or pairs[i][1]!= pairs[i-1][1]:\n            return False\n    return True\n    \ndef get_pair_count(pairs):\n    '''\n    Write a function to count the number of pairs.\n    '''\n    count = 0\n    for i in range(len(pairs)):\n        if pairs[i][0] == pairs[i][1]:\n            count += 1\n    return count\n    \ndef list_is_even(list):\n    '''\n    Write a function to check if the given list is even or not.\n    '''\n    return list[0] % 2 == 0\n    \ndef sum_all_even_elements(list):\n    '''\n    Write a function to get the sum of all even elements.\n    '''\n    sum = 0\n    for i in range(len(list)):\n        if list_is_even(list):\n            sum += list[i]\n    return sum\n    \ndef sum_all_even_elements_with_range(list, min, max):\n    '''\n    Write a function to get the sum of all even elements between the given range.\n    '''\n    sum = 0\n    for i in range(min, max+1):\n        if list_is_even(list):\n            sum += i\n    return sum\n    \ndef sum_all_odd_elements(list):\n    '''\n    Write a function to get the sum of all odd elements.\n    '''\n    sum = 0\n    for i in range(len(list)):\n        if not list_is_even(list):\n            sum += list[i]\n    return sum\n    \ndef sum_all_odd_elements_with_range(list, min, max):\n    '''\n    Write a function to get the sum of all odd elements between the given range.\n    '''\n    sum = 0\n    for i in range(min, max+1):\n        if not list_is_even(list):\n            sum += i\n    return sum\n    \ndef sum_odd_even_elements(list):\n    '''\n    Write a function to get the sum of odd and even elements.\n    '''\n    sum = 0\n    for i in range(len(list)):\n        if not list_is_even(list):\n            sum += list[i]\n    for i in range(len(list)):\n        if list_is_even(list):\n            sum += list[i]\n    return sum\n    \ndef sum_odd_even_elements_with_range(list, min, max):\n    '''\n    Write a function to get the sum of odd and even elements between the given range.\n    '''\n    sum = 0\n    for i in range(min, max+1):\n        if not list_is_even(list):\n            sum += i\n    for i in range(len(list)):\n        if list_is_even(list):\n            sum += i\n    return sum\n    \ndef are_all_elements_less_than_3(list):\n    '''\n    Write a function to check if all the elements in the given list are less than 3.\n    '''\n    for i in range(len(list)):\n        if list[i] > 3:\n            return False\n    return True\n    \ndef are_all_elements_less_than_3_with_range(list, min, max):\n    '''\n    Write a function to check if all the elements in the given list are less than 3.\n    '''\n    for i in range(min, max+1):\n        if list[i] > 3:\n            return False\n    return True\n    \ndef are_all_elements_less_than_3_with_range_2(list, min, max):\n    '''\n    Write a function to check if all the elements in the given list are less than 3.\n    '''\n    count = 0\n    for i in range(min, max+1):\n        if list[i] > 3:\n            count += 1\n    return count == 0\n    \ndef sum_of_odd_and_even_in_the_list(list):\n    '''\n    Write a function to get the sum of odd and even elements in a list.\n    '''\n    sum = 0\n    for i in range(len(list)):\n        if list_is_even(list):\n            sum += list[i]\n        else:\n            sum += list[i]\n    return sum\n    \ndef sum_of_odd_and_even_in_the_list_with_range(list, min, max):\n    '''\n    Write a function to get the sum of odd and even elements in a list between the given range.\n    '''\n    sum = 0\n    for i in range(min, max+1):\n        if list_is_even(list):\n            sum += i\n        else:\n            sum += i\n    return sum\n    \ndef get_sorted_even_list_with_range(list, min, max):\n    '''\n    Write a function to sort even elements between the given range.\n    '''\n    even_list = []\n    for i in range(min, max+1):\n        if list_is_even(list):\n            even_list.append(i)\n    even_list.sort()\n    return even_list\n    \ndef sum_of_all_even_in_the_list(list):\n    '''\n    Write a function to get the sum of all even elements in a list.\n    '''\n    sum = 0\n    for i in range(len(list)):\n        if list_is_even(list):\n            sum += list[i]\n    return sum\n    \ndef sum_of_all_even_in_the_list_with_range(list, min, max):\n    '''\n    Write a function to get the sum of all even elements in a list between the given range.\n    '''\n    sum = 0\n    for i in range(min, max+1):\n        if list_is_even(list):\n            sum += i\n    return sum\n    \ndef sum_of_all_odd_in_the_list(list):\n    '''\n    Write a function to get the sum of all odd elements in a list.\n    '''\n    sum = 0\n    for i in range(len(list)):\n        if not list_is_even(list):\n            sum += list[i]\n    return sum\n    \ndef sum_of_all_odd_in_the_list_with_range(list, min, max):\n    '''\n    Write a function to get the sum of all odd elements in a list between the given range.\n    '''\n    sum = 0\n    for i in range(min, max+1):\n        if not list_is_even(list):\n            sum += i\n    return sum\n    \ndef sum_of_all_odd_in_the_list_with_range_2(list, min, max):\n    '''\n    Write a function to get the sum of all odd elements in a list between the given range.\n    '''\n    sum = 0\n    for i in range(min, max+1):\n        if list_is_even(list):\n            sum += i\n    return sum\n    \ndef sum_of_all_odd_in_the_list_with_range_3(list, min, max):\n    '''\n    Write a function to get the sum of all odd elements in a list between the given range.\n    '''\n    sum = 0\n    for i in range(min, max+1):\n        if list_is_even(list):\n            sum += i\n    return sum\n    \ndef sum_of_all_even_in_the_list_with_range(list, min, max):\n    '''\n    Write a function to get the sum of all even elements in a list between the given range.\n    '''\n    sum = 0\n    for i in range(len(list)):\n        if lis",
        "num_ids": 23
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(0, len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                return False\n    return True\n",
        "num_ids": 64
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    try:\n        assert test_tup[K]==test_tup[1]\n        return True\n    except AssertionError:\n        return False\n",
        "num_ids": 40
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    x, y = test_tup\n    if x == K:\n        return True\n    elif y == K:\n        return True\n    else:\n        return False\n",
        "num_ids": 43
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return all([x in test_tup for x in K])\n",
        "num_ids": 18
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if i == K-1:\n            if test_tup[i]!= test_tup[0]:\n                return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return test_tup[0] == K or test_tup[1] == K\n",
        "num_ids": 24
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K == 0:\n        print(\"Invalid K\")\n        return False\n    if not test_tup:\n        print(\"Invalid test_tup\")\n        return False\n    if K > len(test_tup):\n        print(\"Invalid K\")\n        return False\n    print(\"test_tup\", test_tup)\n    print(\"k\", K)\n    for i in range(K):\n        print(\"i\", i)\n        if test_tup[i]!= i:\n            print(\"Invalid test_tup\")\n            return False\n    return True\n",
        "num_ids": 137
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return test_tup[0] == K or test_tup[1] == K or test_tup[2] == K\n",
        "num_ids": 34
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for k in K:\n        if k in test_tup:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    test_smaller = False\n    try:\n        for i in range(0, len(test_tup1)):\n            if test_tup1[i] < test_tup2[i]:\n                test_smaller = True\n            else:\n                test_smaller = False\n                break\n    except IndexError:\n        test_smaller = False\n    return test_smaller\n",
        "num_ids": 96
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # your code here\n    return sorted(test_tup2) < sorted(test_tup1)\n",
        "num_ids": 28
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return all(a<b for (a,b) in zip(test_tup1, test_tup2))\n",
        "num_ids": 31
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return tuple(x < y for x, y in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return test_tup1[0] < test_tup2[0] and test_tup1[1] < test_tup2[1]\n    \ncheck_smaller((1,2),(5,3))\ncheck_smaller((3,4),(1,2))\n",
        "num_ids": 72
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return all([test_tup1[i] < test_tup2[i] for i in range(len(test_tup2))])\n",
        "num_ids": 38
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        return True\n    return False\n",
        "num_ids": 30
    }
]