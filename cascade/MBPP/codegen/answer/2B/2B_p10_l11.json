[
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    if len(test_set1 & test_set2) == len(test_set1):\n        print(\"Common Elements:\", test_set1 & test_set2)\n    else:\n        print(\"No common elements\")\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    shared_elements = []\n    for item in test_list1:\n        if item in test_list2:\n            shared_elements.append(item)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    temp_tup = ()\n    for i in test_tup1:\n        if i in test_tup2:\n            temp_tup += (i,)\n    return temp_tup\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if type(test_tup1) == type(test_tup2) == type(()):\n        set_test_1 = set(test_tup1)\n        set_test_2 = set(test_tup2)\n        return set_test_1.intersection(set_test_2)\n    else:\n        return None\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return set1.intersection(set2)\n    \ndef same_elements(list1, list2):\n    '''\n    Write a function to check if all the elements of two lists are same.\n    '''\n    return list1 == list2\n    \ndef similar_elements_tuples(tup1, tup2):\n    '''\n    Write a function to check if all the elements of two tuples are same.\n    '''\n    return tup1 == tup2\n    \ndef same_elements_tuples(tup1, tup2):\n    '''\n    Write a function to check if all the elements of two tuples are same.\n    '''\n    return tup1 == tup2\n    \ndef similar_elements_tuple_var(tup1, tup2):\n    '''\n    Write a function to check if all the elements of two tuples are same.\n    '''\n    tup1 = tuple(tup1)\n    tup2 = tuple(tup2)\n    return tup1 == tup2\n    \ndef similar_elements_tuple_var2(tup1, tup2):\n    '''\n    Write a function to check if all the elements of two tuples are same.\n    '''\n    return list(tup1) == list(tup2)\n    \ndef similar_elements_tuple_var3(tup1, tup2):\n    '''\n    Write a function to check if all the elements of two tuples are same.\n    '''\n    return set(tup1) == set(tup2)\n    \ndef similar_elements_tuple_var4(tup1, tup2):\n    '''\n    Write a function to check if all the elements of two tuples are same.\n    '''\n    return dict(tup1) == dict(tup2)\n    \ndef similar_elements_tuple_var5(tup1, tup2):\n    '''\n    Write a function to check if all the elements of two tuples are same.\n    '''\n    return tup1 == tup2\n    \ndef similar_elements_tuple_var6(tup1, tup2):\n    '''\n    Write a function to check if all the elements of two tuples are same.\n    '''\n    return tup1 == tup2\n    \ndef similar_elements_tuple_var7(tup1, tup2):\n    '''\n    Write a function to check if all the elements of two tuples are same.\n    '''\n    return tup1 == tup2\n    \ndef similar_elements_tuple_var8(tup1, tup2):\n    '''\n    Write a function to check if all the elements of two tuples are same.\n    '''\n    return tup1 == tup2\n    \ndef similar_elements_tuple_var9(tup1, tup2):\n    '''\n    Write a function to check if all the elements of two tuples are same.\n    '''\n    return tup1 == tup2\n    \ndef similar_elements_tuple_var10(tup1, tup2):\n    '''\n    Write a function to check if all the elements of two tuples are same.\n    '''\n    return tup1 == tup2\n    \ndef similar_elements_tuple_var11(tup1, tup2):\n    '''\n    Write a function to check if all the elements of two tuples are same.\n    '''\n    return tup1 == tup2\n    \ndef similar_elements_tuple_var12(tup1, tup2):\n    '''\n    Write a function to check if all the elements of two tuples are same.\n    '''\n    return tup1 == tup2\n    \ndef similar_elements_tuple_var13(tup1, tup2):\n    '''\n    Write a function to check if all the elements of two tuples are same.\n    '''\n    return tup1 == tup2\n    \ndef similar_elements_tuple_var14(tup1, tup2):\n    '''\n    Write a function to check if all the elements of two tuples are same.\n    '''\n    return tup1 == tup2\n    \ndef similar_elements_tuple_var15(tup1, tup2):\n    '''\n    Write a function to check if all the elements of two tuples are same.\n    '''\n    return tup1 == tup2\n    \ndef similar_elements_tuple_var16(tup1, tup2):\n    '''\n    Write a function to check if all the elements of two tuples are same.\n    '''\n    return tup1 == tup2\n    \ndef similar_elements_tuple_var17(tup1, tup2):\n    '''\n    Write a function to check if all the elements of two tuples are same.\n    '''\n    return tup1 == tup2\n    \ndef similar_elements_tuple_var18(tup1, tup2):\n    '''\n    Write a function to check if all the elements of two tuples are same.\n    '''\n    return tup1 == tup2\n    \ndef similar_elements_tuple_var19(tup1, tup2):\n    '''\n    Write a function to check if all the elements of two tuples are same.\n    '''\n    return tup1 == tup2\n    \ndef similar_elements_tuple_var20(tup1, tup2):\n    '''\n    Write a function to check if all the elements of two tuples are same.\n    '''\n    return tup1 == tup2\n    \ndef similar_elements_tuple_var21(tup1, tup2):\n    '''\n    Write a function to check if all the elements of two tuples are same.\n    '''\n    return tup1 == tup2\n    \ndef similar_elements_tuple_var22(tup1, tup2):\n    '''\n    Write a function to check if all the elements of two tuples are same.\n    '''\n    return tup1 == tup2\n    \ndef similar_elements_tuple_var23(tup1, tup2):\n    '''\n    Write a function to check if all the elements of two tuples are same.\n    '''\n    return tup1 == tup2\n    \ndef similar_elements_tuple_var24(tup1, tup2):\n    '''\n    Write a function to check if all the elements of two tuples are same.\n    '''\n    return tup1 == tup2\n    \ndef similar_elements_tuple_var25(tup1, tup2):\n    '''\n    Write a function to check if all the elements of two tuples are same.\n    '''\n    return tup1 == tup2\n    \ndef similar_elements_tuple_var26(tup1, tup2):\n    '''\n    Write a function to check if all the elements of two tuples are same.\n    '''\n    return tup1 == tup2\n    \ndef similar_elements_tuple_var27(tup1, tup2):\n    '''\n    Write a function to check if all the elements of two tuples are same.\n    '''\n    return tup1 == tup2\n    \ndef similar_elements_tuple_var28(tup1, tup2):\n    '''\n    Write a function to check if all the elements of two tuples are same.\n    '''\n    return tup1 == tup2\n    \ndef similar_elements_tuple_var29(tup1, tup2):\n    '''\n    Write a function to check if all the elements of two tuples are same.\n    '''\n    return tup1 == tup2\n    \ndef similar_elements_tuple_var30(tup1, tup2):\n    '''\n    Write a function to check if all the elements of two tuples are same.\n    '''\n    return tup1 ="
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #print(set(test_tup1) & set(test_tup2))\n    shared_elements = set(test_tup1) & set(test_tup2)\n    print(shared_elements)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            result.append(test_tup1[i])\n    return result\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_tup1 = set(test_tup1)\n    test_tup2 = set(test_tup2)\n    test_shared = test_tup1.intersection(test_tup2)\n    return test_shared\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    import math\n    def is_prime(n):\n        if n==1:\n            return False\n        if n==2:\n            return True\n        for i in range(2, int(math.sqrt(n))+1):\n            if n%i == 0:\n                return False\n        return True\n    if is_prime(n)==False:\n        print(n)\ndef is_divisible(n):\n    '''\n    Write a python function to check if a number is divisible by a given number.\n    '''\n    import math\n    x=int(input())\n    y=int(input())\n    if x%y==0:\n        print(\"true\")\n    else:\n        print(\"false\")\ndef is_divisible_rec(x,y):\n    '''\n    Write a python function to check if a number is divisible by a given number.\n    '''\n    if y==0:\n        return False\n    if x%y==0:\n        return True\n    return is_divisible_rec(x,y-1)\ndef calculate_square_root(x):\n    '''\n    Write a python function to calculate the square root.\n    '''\n    def calculate_root(n):\n        if n==1:\n            return math.sqrt(n)\n        return calculate_root(n/2)\n    print(calculate_root(x))\ndef check_prime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    def is_prime(n):\n        if n==1:\n            return False\n        if n==2:\n            return True\n        if n%2==0:\n            return False\n        d=int(math.sqrt(n))\n        for i in range(3, d+1, 2):\n            if n%i==0:\n                return False\n        return True\n    if is_prime(n):\n        print(\"true\")\n    else:\n        print(\"false\")\ndef count_occurrences(string):\n    '''\n    Write a python function to count the occurrences of a given character in a given string.\n    '''\n    def occurrences(string):\n        count=0\n        for i in range(len(string)):\n            if string[i]=='a' or string[i]=='e' or string[i]=='i' or string[i]=='o' or string[i]=='u':\n                count+=1\n        return count\n    return occurrences(string)\ndef check_palindrome(string):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    def check_palindrome(string):\n        if string==string[::-1]:\n            return True\n        else:\n            return False\n    if check_palindrome(string):\n        print(\"true\")\n    else:\n        print(\"false\")\ndef prime_factors(n):\n    '''\n    Write a python function to calculate prime factors.\n    '''\n    def factors(n):\n        fact=[]\n        while n % 2 == 0:\n            fact.append(2)\n            n=n/2\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            while n % i == 0:\n                fact.append(i)\n                n=n/i\n        if n > 2:\n            fact.append(n)\n        return fact\n    print(factors(n))\ndef maximum_product(a, b, c):\n    '''\n    Write a python function to calculate maximum product.\n    '''\n    def maximum_product(a, b, c):\n        if a>b:\n            if a>c:\n                if b>c:\n                    print(a*b*c)\n                else:\n                    print(a*c*b)\n            else:\n                if a>b:\n                    print(b*c*a)\n                else:\n                    print(c*a*b)\n        else:\n            if b>c:\n                if a>c:\n                    print(a*c*b)\n                else:\n                    print(a*b*c)\n            else:\n                if a>b:\n                    print(b*a*c)\n                else:\n                    print(c*b*a)\n    maximum_product(a, b, c)\ndef max_product(a, b, c):\n    '''\n    Write a python function to calculate maximum product.\n    '''\n    if a>b:\n        if a>c:\n            if b>c:\n                print(a*b*c)\n            else:\n                print(a*c*b)\n        else:\n            if a>b:\n                print(b*c*a)\n            else:\n                print(c*a*b)\n    else:\n        if b>c:\n            if a>c:\n                print(a*c*b)\n            else:\n                print(a*b*c)\n        else:\n            if a>b:\n                print(b*a*c)\n            else:\n                print(c*b*a)\ndef sum_digits(n):\n    '''\n    Write a python function to sum of digits.\n    '''\n    def sum_digits(n):\n        sum=0\n        while n>0:\n            sum=sum+n%10\n            n=n//10\n        return sum\n    print(sum_digits(n))\ndef sum_square(n):\n    '''\n    Write a python function to find sum of square.\n    '''\n    def sum_square(n):\n        sum=0\n        for i in range(1, n+1):\n            sum+=i*i\n        return sum\n    print(sum_square(n))\ndef sum_of_digits(n):\n    '''\n    Write a python function to sum of digits.\n    '''\n    def sum_of_digits(n):\n        sum=0\n        while n>0:\n            sum+=n%10\n            n=n//10\n        return sum\n    print(sum_of_digits(n))\ndef sum_of_digits_square(n):\n    '''\n    Write a python function to find sum of square of digits.\n    '''\n    def sum_of_digits_square(n):\n        sum=0\n        while n>0:\n            sum+=n%10\n            n=n//10\n        return sum*sum\n    print(sum_of_digits_square(n))\ndef sum_of_digits_cube(n):\n    '''\n    Write a python function to find sum of cube of digits.\n    '''\n    def sum_of_digits_cube(n):\n        sum=0\n        while n>0:\n            sum+=n%10\n            n=n//10\n        return sum*sum*sum\n    print(sum_of_digits_cube(n))\ndef sum_of_digits_hexadecimal(n):\n    '''\n    Write a python function to find sum of hexadecimal.\n    '''\n    def sum_of_digits_hexadecimal(n):\n        sum=0\n        while n>0:\n            sum+=n%16\n            n=n//16\n        return sum\n    print(sum_of_digits_hexadecimal(n))\ndef sum_of_digits_octal(n):\n    '''\n    Write a python function to find sum of octal.\n    '''\n    def sum_of_digits_octal(n):\n        sum=0\n        while n>0:\n            sum+=n%8\n            n=n//8\n        return sum\n    print(sum_of_digits_octal(n))\ndef sum_of_digits_binary(n):\n    '''\n    Write a python function to find sum of binary.\n    '''\n    def sum_of_digits_binary(n):\n        sum=0\n        while n>0:\n            sum+=n%2\n            n=n//2\n        return sum\n    print(sum_of_digits_binary(n))\ndef smallest_number(n, arr):\n    '''\n    Write a python function to find the smallest number in the array.\n    '''\n    def smallest_number(n, arr):\n        min=ar"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    for i in range(2, math.floor(math.sqrt(n))+1):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n%i == 0:\n                return False\n    return True\n    "
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n))):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n > 1:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if(n>1):\n        for i in range(2,n):\n            if(n%i == 0):\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    prime_list = [2]\n    for num in range(3, n):\n        if num not in prime_list:\n            if not (n % num == 0):\n                prime_list.append(num)\n            else:\n                prime_list.append(num)\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return False\n    else:\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = nums[:n]\n    heapq.heapify(heap)\n    for num in nums[n:]:\n        if num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,num)\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if nums==[]:\n        return []\n    max_heap = []\n    \n    for i in range(n):\n        max_heapq.heappush(max_heap,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]>max_heap[0]:\n            hq.heappop(max_heap)\n            hq.heappush(max_heap,nums[i])\n    return max_heap\n    \ndef heap_queue_largest_no_loop(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    Using the heapq module.\n    '''\n    if nums==[]:\n        return []\n    max_heap = []\n    \n    for i in range(n):\n        hq.heappush(max_heap,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]>max_heap[0]:\n            hq.heappop(max_heap)\n            hq.heappush(max_heap,nums[i])\n    return max_heap\n    \ndef heap_queue_largest_no_loop_max_heap(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    Using the heapq module.\n    '''\n    if nums==[]:\n        return []\n    max_heap = []\n    \n    for i in range(n):\n        hq.heappush(max_heap,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]>max_heap[0]:\n            hq.heappop(max_heap)\n            hq.heappush(max_heap,nums[i])\n    return max_heap\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums: return nums\n    return sorted(nums[:n],reverse=True)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    ans = []\n    s = []\n    for i in nums:\n        if i == 0:\n            pass\n        else:\n            hq.heappush(s, i)\n    for i in range(0,n):\n        ans.append(hq.heappop(s))\n    return ans\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n==0 or len(nums)==0:\n        return []\n    heap=[]\n    for i in range(len(nums)):\n        hq.heappush(heap,nums[i])\n    \n    for i in range(n-1):\n        hq.heappop(heap)\n    \n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # n=3\n    hq.heapify(nums)\n    return_list =[]\n    for i in range(n):\n        return_list.append(hq.heappop(nums))\n    return return_list\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #print(nums)\n    hq.heapify(nums)\n    #print(nums)\n    #print(n)\n    for i in range(n):\n        a = hq.heappop(nums)\n        #print(a)\n        hq.heappush(nums,-a)\n    #print(nums)\n    return a\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    result = []\n    for i in range(n):\n        hq.heappush(result,nums[i])\n    return result\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    if n>len(nums):\n        return []\n    else:\n        for i in range(n-1):\n            hq.heappop(nums)\n        return nums\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    heap = nums[:n]\n    for i in range(n-1,0,-1):\n        hq.heappush(nums,hq.heappop(heap))\n    return sorted(heap,reverse=True)\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x and (x & (x-1)) == 0\nprint(is_Power_Of_Two(8))\nprint(is_Power_Of_Two(9))\nprint(is_Power_Of_Two(11))\nprint(is_Power_Of_Two(10))\nprint(is_Power_Of_Two(7))\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 1:\n        print(\"Yes, the number is power of two\")\n    else:\n        print(\"No, the number is not power of two\")\n        \n        \nx = 9\nis_Power_Of_Two(x)\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 1:\n        return True\n    else:\n        while x > 1:\n            x = x // 2\n            if x == 1:\n                return True\n            else:\n                return False\n        \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x - 1)) == 0 \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # x = 0b11\n    # x = 0b10100\n    # x = 0b100000000\n    # x = 0b11111111\n    # x = 0b101010101\n    # x = 0b1010101010\n    # x = 0b11111111111\n    \n    return ( x & ( x - 1 ) ) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    while(x & 1) == 0:\n        x = x >> 1\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #x = int(input('Enter the number : '))\n    #print(bin(x))\n    #print(bin(x+1))\n    return x == bin(x+1)\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x%2==0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_2 (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)) == 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_3 (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_4 (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == x:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_5 (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == x and x!= 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_6 (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0 or (x & (x - 1)) == 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_7 (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0 or x & (x - 1) == 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_8 (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0 or (x & (x - 1)) == 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_9 (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0 or (x & (x - 1)) == 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_10 (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0 or (x & (x - 1)) == 0 or (x & (x - 2)) == 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_11 (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0 or (x & (x - 1)) == 0 or (x & (x - 2)) == 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_12 (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0 or (x & (x - 1)) == 0 or (x & (x - 2)) == 0 or (x & (x - 3)) == 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_13 (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0 or (x & (x - 1)) == 0 or (x & (x - 2)) == 0 or (x & (x - 3)) == 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_14 (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0 or (x & (x - 1)) == 0 or (x & (x - 2)) == 0 or (x & (x - 3)) == 0 or (x & (x - 4)) == 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_15 (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0 or (x & (x - 1)) == 0 or (x & (x - 2)) == 0 or (x & (x - 3)) == 0 or (x & (x - 4)) == 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_16 (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0 or (x & (x - 1)) == 0 or (x & (x - 2)) == 0 or (x & (x - 3)) == 0 or (x & (x - 4)) == 0 or (x & (x - 5)) == 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_17 (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0 or (x & (x - 1)) == 0 or (x & (x - 2)) == 0 or (x & (x - 3)) == 0 or (x & (x - 4)) == 0 or (x & (x - 5)) == 0 or (x & (x - 6)) == 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_18 (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0 or (x & (x - 1)) == 0 or (x & (x - 2)) == 0 or (x & (x - 3)) == 0 or (x & (x - 4)) == 0 or (x & (x - 5)) == 0 or (x & (x - 6)) == 0 or (x & (x - 7)) == 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_19 (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0 or (x & (x - 1)) == 0 or (x & (x - 2)) == 0 or (x & (x - 3)) == 0 or (x & (x - 4)) == 0 or (x & (x - 5)) == 0 or (x & (x - 6)) == 0 or (x & (x - 7)) == 0 or (x & (x - 8)) == 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_20 (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0 or (x & (x - 1)) == 0 or (x & (x - 2)) == 0 or (x & (x - 3)) == 0 or (x & (x - 4)) == 0 or (x & (x - 5)) == 0 or (x & (x - 6)) == 0 or (x & (x - 7)) == 0 or (x & (x - 8)) == 0 or (x & (x - 9)) == 0:\n        return True\n    else:\n        return False\ndef is_Power_Of_Two_21 (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0 or (x & (x - 1)) == 0 or (x & (x - 2)) == 0 or (x & (x - 3)) == 0 or (x & (x - 4)) == 0 or (x & (x - 5)) == 0 or (x & (x - 6)) == 0 or (x & (x - 7)) == 0 or (x & (x - 8)) == 0 or (x & (x - 9)) == 0 or (x & "
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # if x is divisible by 2 then it will return true\n    return x%2 == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    assert x>=0, \"please input a postive integer\"\n    if x&(x-1)==0:\n        return True\n    return False\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'\\w{4,}', text)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    '''\n    >>>find_char_long('This is a sample text with some words. The word has a long word and some random words as well. I am testing')\n    ['the','some', 'words']\n    >>>find_char_long('this is a sample text with some words. The word has a long word and some random words as well. I am testing')\n    ['the', 'words']\n    >>>find_char_long('this is a sample text with some words. The word has a long word and some random words as well. I am testing')\n    ['the', 'words']\n    '''\n    words = []\n    for word in text.split():\n        if len(word) >= 4:\n            words.append(word)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    word_list = []\n    for word in re.findall(r'\\w+',text):\n        if len(word) > 3:\n            word_list.append(word)\n    return word_list\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # using regex\n    pattern = re.compile(r'\\w{4,}')\n    words = pattern.findall(text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = list(filter(lambda word: len(word) >= 4, re.findall('\\w+', text)))\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    final_list = []\n    if type(text)!= str:\n        return\n    word_list = text.split()\n    for word in word_list:\n        if len(word) >= 4:\n            final_list.append(word)\n    return final_list\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return list(filter(lambda word: len(word)>=4, re.findall(r'\\w+', text)))\n    \n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # I did not understood the required function, so I did not understand the required arguments.\n    # Thus, I write a function to find all words which are at least 4 characters long in a string.\n    res = list(filter(lambda x: len(x)>=4, re.findall(r\"[\\w']+\", text)))\n    return res\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r\"[a-zA-Z]+\", text)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    print('Original list :',nums)\n    squares = []\n    for n in nums:\n        squares.append(n**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # for num in nums:\n    #     squares.append(num**2)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num*num for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i**2 for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num*num)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num * num)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for n in nums:\n        n = n**2\n    return nums\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num*num for num in nums]\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def rotate(arr, n, k): \n        if k == 0: \n            return arr \n        temp = arr[n-1] \n        for i in range(n-1, 0, -1): \n            arr[i] = arr[i-1] \n        arr[0] = temp \n        return arr \n    \n    def check_string(str): \n        length = len(str) \n        for i in range(length): \n            if str[i]!= chr(ord('a') + i): \n                return False\n        return True\n    \n    \n    n = len(str) \n    k = 0\n    rotations = 0\n    start = 0\n    while start < n: \n        for end in range(n): \n            new_str = rotate(str, n, k) \n            if check_string(new_str): \n                start = end + 1\n                k += 1\n                break\n            if k == 10: \n                rotations += 1\n                k = 0\n    return rotations\n    "
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    size = len(str)\n    if size == 1:\n        return 0\n    \n    # Hashmap of character frequencies\n    freq = {}\n    for i in range(size):\n        if str[i] not in freq:\n            freq[str[i]] = 1\n        else:\n            freq[str[i]] += 1\n            \n    # Calculating the number of rotations required to make a word equal to the word in word1.\n    for key in freq:\n        freq[key] = freq[key] - 1\n    \n    min_rotations = size\n    # Rotating the characters in the word and checking for the minimum number of rotations.\n    for key in freq:\n        freq[key] += 1\n        if freq[key] > min_rotations:\n            min_rotations = freq[key]\n            \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    x = str.replace('a','b')\n    y = str.replace('a','c')\n    z = str.replace('a','d')\n    x = x.replace('b','a')\n    y = y.replace('b','c')\n    z = z.replace('b','d')\n    x = x.replace('c','a')\n    y = y.replace('c','b')\n    z = z.replace('c','d')\n    x = x.replace('d','a')\n    y = y.replace('d','b')\n    z = z.replace('d','c')\n    return x,y,z\ndef find_Rotations2(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    x = str.replace('a','b')\n    y = str.replace('a','c')\n    z = str.replace('a','d')\n    x = x.replace('b','a')\n    y = y.replace('b','c')\n    z = z.replace('b','d')\n    x = x.replace('c','a')\n    y = y.replace('c','b')\n    z = z.replace('c','d')\n    x = x.replace('d','a')\n    y = y.replace('d','b')\n    z = z.replace('d','c')\n    return x,y,z\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    if not str:\n        return 0\n    \n    # length of string\n    n = len(str)\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str)==0:\n        return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # TODO: Write your code here\n    str_c = ''\n    for i in range(len(str)):\n        if ord(str[i])>64 and ord(str[i])<91:\n            str_c = str_c + str[i]\n    \n    s = set(str_c)\n    result = []\n    for i in range(len(s)):\n        result.append(str_c.count(s[i])%26)\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    freq_count = {}\n    for ch in str:\n        if ch in freq_count:\n            freq_count[ch] += 1\n        else:\n            freq_count[ch] = 1\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    str = str.replace(\" \",\"\")\n    if len(str) == 0:\n        return 0\n    \n    length = len(str)\n    \n    if length == 1:\n        return 0\n    \n    left, right = 0, length-1\n    while left <= right:\n        if str[left] == str[right]:\n            left += 1\n            right -= 1\n        else:\n            break\n    \n    if left == length:\n        return 1\n    \n    while left <= right:\n        if str[left] == str[length-left]:\n            left += 1\n            right -= 1\n        else:\n            break\n    \n    if left == length:\n        return 1\n    \n    return max(left, right)+1\n    \nif __name__ == '__main__':\n    #fptr = open(os.environ['OUTPUT_PATH'], 'w')\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str) \n    dp = [[0 for i in range(n + 1)] for j in range(n + 1)] \n    for i in range(n - 1, -1, -1): \n        for j in range(n - 1, i, -1): \n            dp[i][j] = float(\"inf\") \n            for k in range(i, j): \n                if str[i] == str[k] and str[j]!= str[k]: \n                    dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j]) \n    return dp[0][n - 1] \n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    size = len(str)\n    for i in range(0,size):\n        for j in range(i+1,size):\n            if str[i] == str[j]:\n                continue\n            else:\n                break\n        if (i==j):\n            continue\n        else:\n            print(\"Rotations are \",size-i)\n            break\n        \ndef Find_Permutation(str,word):\n    '''\n    Write a python function to find the permutation of a string.\n    '''\n    word_count = 0\n    for i in range(0,len(str)):\n        for j in range(i+1,len(str)):\n            if str[i]==str[j]:\n                word_count += 1\n    if word_count==len(str):\n        print(\"Permutation of the string : \",word)\n    else:\n        print(\"No Permutation Exists\")\n    \ndef Find_Sum_Digits(n):\n    '''\n    Write a python function to find the sum of digits of a number n.\n    '''\n    sum = 0\n    while (n!=0):\n        sum += n%10\n        n = n//10\n    print(\"Sum of digits is \",sum)\n    \ndef Find_Sum_Digits_In_Range(n1,n2):\n    '''\n    Write a python function to find the sum of digits in a range.\n    '''\n    n1 = int(n1)\n    n2 = int(n2)\n    sum = 0\n    for i in range(n1,n2+1):\n        sum += i%10\n    print(\"Sum of digits in range \",n1,n2,\" is \",sum)\n    \ndef Find_StairCase_Numbers(n):\n    '''\n    Write a python function to find the numbers which are the sum of 1 to N.\n    '''\n    if n==0:\n        print(\"There are no such numbers\")\n    elif n==1:\n        print(\"1\")\n    else:\n        print(\"1\\n\",end=\"\")\n        for i in range(2,n+1):\n            print(i,end=\"\\n\")\n    \ndef Find_StairCase_Numbers_Using_For_Loop(n):\n    '''\n    Write a python function to find the numbers which are the sum of 1 to N.\n    '''\n    for i in range(1,n+1):\n        print(i,end=\"\\n\")\n    \ndef Find_StairCase_Numbers_Using_While_Loop(n):\n    '''\n    Write a python function to find the numbers which are the sum of 1 to N.\n    '''\n    i = 1\n    while i<=n:\n        print(i,end=\"\\n\")\n        i+=1\n    \ndef Find_Sum_Difference_In_List(l1,l2):\n    '''\n    Write a python function to find the sum of difference of each list.\n    '''\n    sum = 0\n    for i in range(len(l1)):\n        sum += l1[i]-l2[i]\n    print(\"Sum of difference of list : \",sum)\n    \ndef Find_Sum_Difference_In_List_Using_For_Loop(l1,l2):\n    '''\n    Write a python function to find the sum of difference of each list.\n    '''\n    sum = 0\n    for i in range(len(l1)):\n        sum += l1[i]-l2[i]\n    print(\"Sum of difference of list : \",sum)\n    \ndef Find_Sum_Difference_In_List_Using_For_Loop_In_Tuple(l1,l2):\n    '''\n    Write a python function to find the sum of difference of each list.\n    '''\n    sum = 0\n    for i in range(len(l1)):\n        sum += l1[i]-l2[i]\n    print(\"Sum of difference of list : \",sum)\n    \ndef Find_Sum_Difference_In_List_Using_While_Loop(l1,l2):\n    '''\n    Write a python function to find the sum of difference of each list.\n    '''\n    i = 0\n    while i<len(l1):\n        sum += l1[i]-l2[i]\n        i+=1\n    print(\"Sum of difference of list : \",sum)\n    \ndef Find_Sum_Difference_In_List_Using_While_Loop_In_Tuple(l1,l2):\n    '''\n    Write a python function to find the sum of difference of each list.\n    '''\n    i = 0\n    while i<len(l1):\n        sum += l1[i]-l2[i]\n        i+=1\n    print(\"Sum of difference of list : \",sum)\n    \ndef Find_Sum_of_Digits(n):\n    '''\n    Write a python function to find the sum of digits in a number n.\n    '''\n    sum = 0\n    while (n!=0):\n        sum += n%10\n        n = n//10\n    print(\"Sum of digits in number \",n,\" is \",sum)\n    \ndef Find_Sum_of_Digits_Using_While_Loop(n):\n    '''\n    Write a python function to find the sum of digits in a number n.\n    '''\n    while (n!=0):\n        sum += n%10\n        n = n//10\n    print(\"Sum of digits in number \",n,\" is \",sum)\n    \ndef Find_Sum_of_Digits_Using_For_Loop(n):\n    '''\n    Write a python function to find the sum of digits in a number n.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += n%10\n        n = n//10\n    print(\"Sum of digits in number \",n,\" is \",sum)\n    \ndef Find_Sum_of_Digits_Using_For_Loop_In_Tuple(n):\n    '''\n    Write a python function to find the sum of digits in a number n.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += n%10\n        n = n//10\n    print(\"Sum of digits in number \",n,\" is \",sum)\n    \ndef Find_Sum_of_Digits_Using_For_Loop_In_Tuple_With_Condition(n):\n    '''\n    Write a python function to find the sum of digits in a number n.\n    '''\n    sum = 0\n    for i in range(n):\n        if n%10==0:\n            print(\"\")\n        else:\n            sum += n%10\n            n = n//10\n    print(\"Sum of digits in number \",n,\" is \",sum)\n    \ndef Find_Sum_of_Digits_Using_For_Loop_With_Condition(n):\n    '''\n    Write a python function to find the sum of digits in a number n.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%10==0:\n            print(\"\")\n        else:\n            sum += i%10\n    print(\"Sum of digits in number \",n,\" is \",sum)\n    \ndef Find_Sum_of_Digits_Using_For_Loop_In_Tuple_With_Condition(n):\n    '''\n    Write a python function to find the sum of digits in a number n.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%10==0:\n            print(\"\")\n        else:\n            sum += i%10\n    print(\"Sum of digits in number \",n,\" is \",sum)\n    \ndef Find_Product_of_Two_Large_Numbers(n,k):\n    '''\n    Write a python function to find the product of two large numbers.\n    '''\n    n = int(n)\n    k = int(k)\n    l = 1\n    while k!=0:\n        l = l*n\n        k-=1\n    print(\"Product of two large numbers is : \",l)\n    \ndef Find_Product_of_Two_Large_Numbers_Using_For_Loop(n,k):\n    '''\n    Write a python function to find the product of two large numbers.\n    '''\n    n = int(n)\n    k = int(k)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    new_s = s[first_occ+1:last_occ]\n    return new_s\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')\n    \n    \ndef check_Palindrome(s):\n    '''\n    Write a python function to check if a given string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \n    \ndef swap_case(s):\n    '''\n    Write a python function to swap cases of a given string.\n    '''\n    return s.swapcase()\n    \n    \ndef rindex(s,ch):\n    '''\n    Write a python function to find the last index of a given character in a string.\n    '''\n    return s.rindex(ch)\n    \n    \ndef count_substring(s,ch):\n    '''\n    Write a python function to count occurrences of a substring in a given string.\n    '''\n    return s.count(ch)\n    \n    \ndef form_string(a,b):\n    '''\n    Write a python function to form a string from 2 given strings.\n    '''\n    return ''.join([a,b])\n    \n    \ndef count_digits(s):\n    '''\n    Write a python function to count the number of digits in a given string.\n    '''\n    return sum(1 for x in s if x.isdigit())\n    \n    \ndef replace_all(s,a,b):\n    '''\n    Write a python function to replace all occurrences of a substring in a given string with a new substring.\n    '''\n    return s.replace(a,b)\n    \n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check if the given string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \n    \ndef is_valid_paren(s):\n    '''\n    Write a python function to check if the given string is valid or not.\n    '''\n    if len(s) == 0:\n        return True\n    left = 0\n    right = 0\n    for i in range(len(s)):\n        if s[i] == '(':\n            left += 1\n        elif s[i] == ')':\n            right += 1\n    return left == right\n    \n    \ndef cal_two_sum(nums,target):\n    '''\n    Write a python function to find the two elements such that sum of elements is equal to the given number.\n    '''\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            if nums[i]+nums[j] == target:\n                return i,j\n                \n    \ndef key_string(s,key):\n    '''\n    Write a python function to check if the string is permutation of another string.\n    '''\n    key = ''.join(sorted(key))\n    return key == s\n    \n    \ndef is_palin(s):\n    '''\n    Write a python function to check if the given string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \n    \ndef common_char(s1,s2):\n    '''\n    Write a python function to find the common characters in two strings.\n    '''\n    return list(set(s1).intersection(set(s2)))\n    \n    \ndef xor(s1,s2):\n    '''\n    Write a python function to XOR two strings.\n    '''\n    return ''.join([chr(ord(x)+2) for x in s1])+''.join([chr(ord(x)+3) for x in s2])\n    \n    \ndef word_sort(s1):\n    '''\n    Write a python function to sort the words in a given string by alphabets in ascending order.\n    '''\n    return sorted(s1.split())\n    \n    \ndef is_unique(s):\n    '''\n    Write a python function to check if the given string has all unique characters.\n    '''\n    return len(set(s)) == len(s)\n    \n    \ndef capitalize(s):\n    '''\n    Write a python function to capitalize the first character in a string.\n    '''\n    return s.capitalize()\n    \n    \ndef is_square(n):\n    '''\n    Write a python function to check if a given number is a perfect square or not.\n    '''\n    return int(sqrt(n))**2 == n\n    \n    \ndef palindrome_permutation(s):\n    '''\n    Write a python function to check if the given string is permutation of another string.\n    '''\n    s = ''.join(sorted(s))\n    return s == s[::-1]\n    \n    \ndef palindrome_permutation_in_pythonic_way(s):\n    '''\n    Write a python function to check if the given string is permutation of another string.\n    '''\n    s = ''.join(sorted(s))\n    return all(x==y for x,y in zip(s,s[::-1]))\n    \n    \ndef reverse_string(s):\n    '''\n    Write a python function to reverse the string.\n    '''\n    return s[::-1]\n    \n    \ndef is_palindrome_pythonic(s):\n    '''\n    Write a python function to check if the given string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \n    \ndef group_anagrams(strs):\n    '''\n    Write a python function to group anagrams of a given string.\n    '''\n    a = {}\n    for s in strs:\n        key = ''.join(sorted(s))\n        if key not in a:\n            a[key] = []\n        a[key].append(s)\n        \n    return a.values()\n    \n    \ndef replace_spaces(s,n):\n    '''\n    Write a python function to replace all the spaces in a given string with '%20'.\n    '''\n    return s.replace(' ', '%20')\n    \n    \ndef similar(a,b):\n    '''\n    Write a python function to check if two strings are similar or not.\n    '''\n    return a == b or b in a\n    \n    \ndef three_number_sum(array,target):\n    '''\n    Write a python function to find all triplets in the array which sum is equal to the given target.\n    '''\n    for i in range(len(array)):\n        for j in range(i+1,len(array)):\n            for k in range(j+1,len(array)):\n                if array[i]+array[j]+array[k] == target:\n                    return True\n                    \n    return False\n    \n    \ndef longest_substring_with_k_distinct(str,k):\n    '''\n    Write a python function to find the longest substring with k distinct characters in a given string.\n    '''\n    n = len(str)\n    d = {}\n    for i in range(n):\n        if str[i] not in d:\n            d[str[i]] = 1\n        else:\n            d[str[i]] += 1\n            \n    for i in range(n):\n        for j in range(i+1,n):\n            if j-i+1 > len(d):\n                break\n            if str[i:j+1] not in d:\n                break\n            d[str[i:j+1]] -= 1\n            \n    return str[i:j+1]\n    \n    \ndef word_search(grid,word):\n    '''\n    Write a python function to search for given word in the grid.\n    '''\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == word[0]:\n                if search_word_in_grid(grid,word):\n                    return True\n    return False\n    \n    \ndef search_word_in_grid(grid,word):\n    '''\n    Write a python function to search for given word in the grid.\n    '''\n    if len(word) > len(grid) or len(word) > len(grid[0]):\n        return False\n        \n    row"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    occ = s.find(ch)\n    # print(occ)\n    if(occ>0):\n        s = s[:occ-1]+s[occ+1:]\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    x=s.find(ch)\n    #print(\"X=\",x)\n    s=s[0:x] + s[x+1:]\n    #print(\"S=\",s)\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s1=s[1:-1]\n    return s1\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\").replace(ch+s[0], \"\").replace(ch+s[-1], \"\")\ndef remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\").replace(ch+s[0], \"\").replace(ch+s[-1], \"\")\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    #s = list(s)\n    for i in range(len(s)):\n        if s[i]==ch:\n            s.pop(i)\n            break\n    for i in range(len(s)-1,-1,-1):\n        if s[i]==ch:\n            s.pop(i)\n            break\n    return \"\".join(s)\ns = \"geeksforgeeks\"\nprint(remove_Occ(s,'g'))\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # code here\n    return s.replace(ch,'')\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.lower()\n    s=s.replace(ch,'')\n    return s\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    mat = M\n    s = []\n    for i in range(len(mat)):\n        row = 0\n        for j in range(len(mat)):\n            row += mat[i][j]\n        s.append(row)\n    s.sort()\n    for i in range(len(mat)):\n        for j in range(len(mat)):\n            if s[i] == mat[i][j]:\n                mat[i][j] = 0\n            else:\n                mat[i][j] = 1\n    return mat\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    n = len(M[0])\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for k in range(0, len(M)):\n        M[k] = sorted(M[k])\n    for i in range(0, len(M)):\n        for j in range(0, len(M[0])):\n            if j == 0:\n                M[i][j] = M[i][j] + M[i][j+1]\n            elif j == (len(M[0])-1):\n                M[i][j] = M[i][j] + M[i][j-1]\n            else:\n                M[i][j] = M[i][j] + M[i][j-1] + M[i][j+1]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    for col in range(cols):\n        for row in range(rows):\n            M[row][col] = sum(M[row][:col] + M[row][col+1:])\n    M.sort(key=lambda x: x[0])\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    '''\n    We will use the following pointers:\n    (0, 0)\n    (0, 1)\n    (0, 2)\n    (1, 0)\n    (1, 1)\n    (1, 2)\n    (2, 0)\n    (2, 1)\n    (2, 2)\n    '''\n    n = len(M)\n    m = len(M[0])\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                curr_value = M[i][j]\n                p_value = 0\n            elif j == 0:\n                curr_value = M[i][j]\n                p_value = 0\n            elif i == 0 and j == 0:\n                curr_value = M[i][j]\n                p_value = 0\n            else:\n                curr_value = M[i][j] + p_value\n                p_value = curr_value\n            M[i][j] = curr_value\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    m = len(M)\n    n = len(M[0])\n    row_sum = [0 for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            row_sum[i] += M[i][j]\n    \n    for i in range(m):\n        for j in range(n):\n            M[i][j] += row_sum[i]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    matrix_sorted = []\n    sorted_elements = sorted(matrix_elements, key=lambda x: sum(x))\n    matrix_sorted.append(sorted_elements)\n    return matrix_sorted\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    if not M:\n        return\n    \n    if not M[0]:\n        return M\n    \n    M = list(zip(*M))\n    \n    def sum_rows(row):\n        return sum(row)\n    \n    M = sorted(M, key = sum_rows)\n    \n    return list(zip(*M))\n    \nmatrix = [[1,3,5],[4,4,-1],[2,5,0]]\nprint(sort_matrix(matrix))"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sorted_matrix = []\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    #first, get the column sums of the matrix\n    col_sums = []\n    for i in range(len(M)):\n        col_sums.append(sum(M[i]))\n    \n    #next, sort the col_sums and the matrix in that order\n    col_sums.sort(reverse=True)\n    M.sort(key=lambda x: x[0])\n    \n    #we've now sorted the matrix in ascending order\n    return M\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * h * b\n    print(\"Volume of the prism is \",volume)\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 1/3*(l*b*h)\n    print(f\"The volume of the prism is {V} units^3\")\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*b*h)\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return ((l*h)/3)\nprint(find_Volume(2,4,5))\nprint(find_Volume(3,4,5))\nprint(find_Volume(4,4,5))\nprint(find_Volume(5,4,5))\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return(h*b*l)\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    l,b,h=map(int,input().split())\n    volume=l*b*h\n    return volume\ndef find_Area(a,b) : \n    '''\n    Write a python function to find the area of a parallelogram.\n    '''\n    a,b=map(int,input().split())\n    area=a*b\n    return area\ndef find_Perimeter(a,b) : \n    '''\n    Write a python function to find the perimeter of a rectangle.\n    '''\n    a,b=map(int,input().split())\n    perimeter=a+b+a+b\n    return perimeter\ndef find_height(a,b,c) : \n    '''\n    Write a python function to find the height of a triangle.\n    '''\n    a,b,c=map(int,input().split())\n    height=c/2\n    return height\ndef find_hypotenuse(a,b) : \n    '''\n    Write a python function to find the hypotenuse of a triangle.\n    '''\n    a,b=map(int,input().split())\n    hypotenuse=a+b\n    return hypotenuse\ndef find_Radius(a,b) : \n    '''\n    Write a python function to find the radius of a circle.\n    '''\n    a,b=map(int,input().split())\n    radius=a*a\n    return radius\ndef find_circle(r) : \n    '''\n    Write a python function to find the area of a circle.\n    '''\n    r=int(input())\n    area=3.14*r*r\n    return area\ndef find_Triangle(a,b,c) : \n    '''\n    Write a python function to find the area of a triangle.\n    '''\n    a,b,c=map(int,input().split())\n    s=(a+b+c)/2\n    area=s*(s-a)*(s-b)*(s-c)\n    return area\ndef find_parimeter(a,b,c) : \n    '''\n    Write a python function to find the parimeter of a triangle.\n    '''\n    a,b,c=map(int,input().split())\n    parimeter=a+b+c\n    return parimeter\ndef find_Triangle_height(a,b,c) : \n    '''\n    Write a python function to find the triangle height of a triangle.\n    '''\n    a,b,c=map(int,input().split())\n    s=a+b+c\n    height=s/2\n    return height\ndef find_triangle_height(a,b) : \n    '''\n    Write a python function to find the height of a triangle.\n    '''\n    a,b=map(int,input().split())\n    s=a+b\n    height=s/2\n    return height\ndef find_Triangle_Area(a,b,c) : \n    '''\n    Write a python function to find the area of a triangle.\n    '''\n    a,b,c=map(int,input().split())\n    s=a+b+c\n    area=s/2*s\n    return area\ndef find_parimeter_height(a,b,c) : \n    '''\n    Write a python function to find the parimeter and height of a triangle.\n    '''\n    a,b,c=map(int,input().split())\n    s=a+b+c\n    height=s/2\n    parimeter=s/2*2\n    return height,parimeter\ndef find_parimeter_height(a,b) : \n    '''\n    Write a python function to find the parimeter and height of a triangle.\n    '''\n    a,b=map(int,input().split())\n    s=a+b\n    height=s/2\n    parimeter=s/2*2\n    return height,parimeter\ndef find_triangle_area(a,b,c) : \n    '''\n    Write a python function to find the area of a triangle.\n    '''\n    a,b,c=map(int,input().split())\n    s=a+b+c\n    area=s/2*s\n    return area\ndef find_triangle_Area(a,b,c) : \n    '''\n    Write a python function to find the area of a triangle.\n    '''\n    a,b,c=map(int,input().split())\n    s=a+b+c\n    area=s/2*s\n    return area\ndef find_circle_area(r) : \n    '''\n    Write a python function to find the area of a circle.\n    '''\n    r=int(input())\n    area=3.14*r*r\n    return area\ndef find_circle_circumference(r) : \n    '''\n    Write a python function to find the circumference of a circle.\n    '''\n    r=int(input())\n    circumference=2*3.14*r\n    return circumference\ndef find_circle_circumference(r) : \n    '''\n    Write a python function to find the circumference of a circle.\n    '''\n    r=int(input())\n    circumference=2*3.14*r\n    return circumference\ndef find_circle_area(r) : \n    '''\n    Write a python function to find the area of a circle.\n    '''\n    r=int(input())\n    area=3.14*r*r\n    return area\ndef find_circle_radius(r) : \n    '''\n    Write a python function to find the radius of a circle.\n    '''\n    r=int(input())\n    radius=r**2\n    return radius\ndef find_circle_circumference(r) : \n    '''\n    Write a python function to find the circumference of a circle.\n    '''\n    r=int(input())\n    circumference=2*3.14*r\n    return circumference\ndef find_circle_area(r) : \n    '''\n    Write a python function to find the area of a circle.\n    '''\n    r=int(input())\n    area=3.14*r*r\n    return area\ndef find_circle_radius(r) : \n    '''\n    Write a python function to find the radius of a circle.\n    '''\n    r=int(input())\n    radius=r**2\n    return radius\ndef find_circle_circumference(r) : \n    '''\n    Write a python function to find the circumference of a circle.\n    '''\n    r=int(input())\n    circumference=2*3.14*r\n    return circumference\ndef find_circle_area(r) : \n    '''\n    Write a python function to find the area of a circle.\n    '''\n    r=int(input())\n    area=3.14*r*r\n    return area\ndef find_circle_radius(r) : \n    '''\n    Write a python function to find the radius of a circle.\n    '''\n    r=int(input())\n    radius=r**2\n    return radius\ndef find_circle_circumference(r) : \n    '''\n    Write a python function to find the circumference of a circle.\n    '''\n    r=int(input())\n    circumference=2*3.14*r\n    return circumference\ndef find_circle_area(r) : \n    '''\n    Write a python function to find the area of a circle.\n    '''\n    r=int(input())\n    area=3.14*r*r\n    return area\ndef find_circle_radius(r) : \n    '''\n    Write a python function to find the radius of a circle.\n    '''\n    r=int(input())\n    radius=r**2\n    return radius\ndef find_circle_circumference(r) : \n    '''\n    Write a python function to find the circumference of a circle.\n    '''\n    r=int(input())\n    circumference=2*3.14*r\n    return circumference\ndef find_circle_area(r) : \n    '''\n    Write a python function to find the area of a circle.\n    '''\n    "
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    x = l + b + h\n    y = (b * h) * math.sqrt(3)/3\n    z = l * h\n    return x * y * z\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 1/6 * l * b * h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v= (h*l*b) / 2\n    print('The volume of the triangle is : ',v)\n    return v\n    \ndef find_Surface(a,b,c) : \n    '''\n    Write a python function to find the surface of a prism.\n    '''\n    s= (a+b+c) * 2\n    print('The surface of the prism is : ',s)\n    return s\n    \ndef find_Perimeter(a,b,c) : \n    '''\n    Write a python function to find the perimeter of a prism.\n    '''\n    p= 2*((a+b+c)*a/2)\n    print('The perimeter of the prism is : ',p)\n    return p\n    \ndef find_Volume(a,b,c) : \n    '''\n    Write a python function to find the volume of a prism.\n    '''\n    v= (a*b*c) / 3\n    print('The volume of the prism is : ',v)\n    return v\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = l*b*h\n    print(v)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.findall(r'[a-z]+', text) and re.findall(r'[A-Z]+', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.search(pattern,text))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[a-z]+_[a-z]+', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = text.lower()\n    return '_' in text\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    a = re.search(r'[a-z]+_[a-z]*',text)\n    if a:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    match=re.search(r\"\\w*_\\w*\",text)\n    if match:\n        return True\n    return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.findall('[a-z]+_[a-z]+', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'^[a-z]+$', text):\n        return True\n    return False\n    #code\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.findall('[a-zA-Z_]', text)!= None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.match(r'^[a-z]+_[a-z]+', text)\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (4 * a)\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\ndef cube_volume(a):\n    '''\n    Write a function that returns the volume of a cube given its length as input.\n    '''\n    return a**3\ndef triangle_area(a, b, c):\n    '''\n    Write a function that returns the area of a triangle given its three sides as input.\n    '''\n    s=(a+b+c)/2\n    area=(s*(s-a)*(s-b)*(s-c))**(1/2)\n    return area\ndef no_arg_func():\n    '''\n    Write a function that does nothing and returns a string 'no args'.\n    '''\n    return 'no args'\ndef one_arg_func(a):\n    '''\n    Write a function that takes a string as input, and returns it with all occurrences of the letter \"a\" replaced with the letter \"x\".\n    '''\n    return a.replace('a', 'x')\ndef one_arg_func2(a):\n    '''\n    Write a function that takes a string as input, and returns it with all occurrences of the letter \"a\" replaced with the letter \"x\".\n    '''\n    return a.replace('a', 'x')\ndef no_arg_func2():\n    '''\n    Write a function that does nothing and returns a string 'no args'.\n    '''\n    return 'no args'\ndef one_arg_func3(a):\n    '''\n    Write a function that takes a string as input, and returns it with all occurrences of the letter \"a\" replaced with the letter \"x\".\n    '''\n    return a.replace('a', 'x')\ndef one_arg_func4(a):\n    '''\n    Write a function that takes a string as input, and returns it with all occurrences of the letter \"a\" replaced with the letter \"x\".\n    '''\n    return a.replace('a', 'x')\ndef no_arg_func4():\n    '''\n    Write a function that does nothing and returns a string 'no args'.\n    '''\n    return 'no args'\ndef one_arg_func5(a):\n    '''\n    Write a function that takes a string as input, and returns it with all occurrences of the letter \"a\" replaced with the letter \"x\".\n    '''\n    return a.replace('a', 'x')\ndef one_arg_func6(a):\n    '''\n    Write a function that takes a string as input, and returns it with all occurrences of the letter \"a\" replaced with the letter \"x\".\n    '''\n    return a.replace('a', 'x')\ndef no_arg_func6():\n    '''\n    Write a function that does nothing and returns a string 'no args'.\n    '''\n    return 'no args'\ndef one_arg_func7(a):\n    '''\n    Write a function that takes a string as input, and returns it with all occurrences of the letter \"a\" replaced with the letter \"x\".\n    '''\n    return a.replace('a', 'x')\ndef one_arg_func8(a):\n    '''\n    Write a function that takes a string as input, and returns it with all occurrences of the letter \"a\" replaced with the letter \"x\".\n    '''\n    return a.replace('a', 'x')\ndef no_arg_func8():\n    '''\n    Write a function that does nothing and returns a string 'no args'.\n    '''\n    return 'no args'\ndef one_arg_func9(a):\n    '''\n    Write a function that takes a string as input, and returns it with all occurrences of the letter \"a\" replaced with the letter \"x\".\n    '''\n    return a.replace('a', 'x')\ndef one_arg_func10(a):\n    '''\n    Write a function that takes a string as input, and returns it with all occurrences of the letter \"a\" replaced with the letter \"x\".\n    '''\n    return a.replace('a', 'x')\ndef no_arg_func10():\n    '''\n    Write a function that does nothing and returns a string 'no args'.\n    '''\n    return 'no args'\ndef one_arg_func11(a):\n    '''\n    Write a function that takes a string as input, and returns it with all occurrences of the letter \"a\" replaced with the letter \"x\".\n    '''\n    return a.replace('a', 'x')\ndef one_arg_func12(a):\n    '''\n    Write a function that takes a string as input, and returns it with all occurrences of the letter \"a\" replaced with the letter \"x\".\n    '''\n    return a.replace('a', 'x')\ndef no_arg_func12():\n    '''\n    Write a function that does nothing and returns a string 'no args'.\n    '''\n    return 'no args'\ndef one_arg_func13(a):\n    '''\n    Write a function that takes a string as input, and returns it with all occurrences of the letter \"a\" replaced with the letter \"x\".\n    '''\n    return a.replace('a', 'x')\ndef one_arg_func14(a):\n    '''\n    Write a function that takes a string as input, and returns it with all occurrences of the letter \"a\" replaced with the letter \"x\".\n    '''\n    return a.replace('a', 'x')\ndef no_arg_func14():\n    '''\n    Write a function that does nothing and returns a string 'no args'.\n    '''\n    return 'no args'\ndef one_arg_func15(a):\n    '''\n    Write a function that takes a string as input, and returns it with all occurrences of the letter \"a\" replaced with the letter \"x\".\n    '''\n    return a.replace('a', 'x')\ndef one_arg_func16(a):\n    '''\n    Write a function that takes a string as input, and returns it with all occurrences of the letter \"a\" replaced with the letter \"x\".\n    '''\n    return a.replace('a', 'x')\ndef no_arg_func16():\n    '''\n    Write a function that does nothing and returns a string 'no args'.\n    '''\n    return 'no args'\ndef one_arg_func17(a):\n    '''\n    Write a function that takes a string as input, and returns it with all occurrences of the letter \"a\" replaced with the letter \"x\".\n    '''\n    return a.replace('a', 'x')\ndef one_arg_func18(a):\n    '''\n    Write a function that takes a string as input, and returns it with all occurrences of the letter \"a\" replaced with the letter \"x\".\n    '''\n    return a.replace('a', 'x')\ndef no_arg_func18():\n    '''\n    Write a function that does nothing and returns a string 'no args'.\n    '''\n    return 'no args'\ndef one_arg_func19(a):\n    '''\n    Write a function that takes a string as input, and returns it with all occurrences of the letter \"a\" replaced with the letter \"x\".\n    '''\n    return a.replace('a', 'x')\ndef one_arg_func20(a):\n    '''\n    Write a function that takes a string as input, and returns it with all occurrences of the letter \"a\" replaced with the letter \"x\".\n    '''\n    return a.replace('a', 'x')\ndef no_arg_func20():\n    '''\n    Write a function that does nothing and returns a string 'no args'.\n    '''\n    return 'no args'\ndef one_arg_func21(a):\n    '''\n    Write a function that takes a string as input, and returns it with all occurrences of the letter \"a\" replaced with the letter \"x\".\n    '''\n    return a.replace('a', 'x')\ndef one_arg_func22(a):\n    '''\n    Write a function that takes a string as input, and returns it with all occurrences of the letter \"a\" replaced with the letter \"x\".\n    '''\n    return a.replace('a', 'x')\ndef no_arg_func22():\n    '''\n    Write a function that does nothing and returns a string 'no args'.\n    '''\n    return 'no args'\ndef one_arg_func23(a):\n    '''\n    Write a function that takes a string as input, and returns it with all occurrences of the letter \"a\" replaced with the letter "
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a ** 2\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    count = 0\n    res = []\n    for i in string:\n        if i not in string[count:]:\n            res.append(i)\n        count += 1\n    return res\nprint(str_to_list('abcbabaab'))\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # TODO: Your code here\n    return\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    i = 0\n    j = 0\n    while i < len(string) and j < len(string):\n        if string[i] not in list2:\n            list1.append(string[i])\n            list2.append(string[i])\n            i = i + 1\n        else:\n            i = i + 1\n            j = j + 1\n    print(\"String with out characters are : \",list1)\n    return list1\n        \nstring = \"abcdefghijklmnopqrstuvwxyz\"\nlist1 = str_to_list(string)\nstring2 = \"xyz\"\nlist2 = str_to_list(string2)"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list = []\n    for i in range(len(string)):\n        list.append(string[i])\n    return list\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return_list = []\n    for i in range(len(string)):\n        if string[i] in return_list:\n            continue\n        else:\n            return_list.append(string[i])\n    return return_list\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return_list = []\n    for i in range(0, len(string)):\n        if string[i] not in return_list:\n            return_list.append(string[i])\n    return return_list\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    for i in range(len(string)): \n        if string[i] not in list1: \n            list1.append(string[i]) \n    return list1 \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # print(list(string))\n    # for i in string:\n    #     if i in string:\n    #         string = string.replace(i, '')\n    # print(list(string))\n    string = list(string)\n    for i in string:\n        if i in string:\n            string.remove(i)\n    string = ''.join(string)\n    return string\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1 = string[0]\n    str2 = string[1]\n    for i in range(len(str2)):\n        if(str1 == str2[i]):\n            str1 = str1[:i] + str1[i+1:]\n    return str1\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    res = []\n    for i in range(len(string)):\n        if string[i] not in string[:i]:\n            res.append(string[i])\n    return res\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        if arraynums.count(arraynums[i]) > 1:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Write your code here.\n    s = set(arraynums)\n    if len(s) == len(arraynums):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    pass\n    \ndef test_valid_structure(arraynums):\n    '''\n    Write a function to check whether the given array is a valid array of integers.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    hasDuplicates = False\n    for i in range(len(arraynums)):\n        if arraynums[i] == i:\n            hasDuplicates = True\n            break\n    return hasDuplicates\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    i = 0\n    n = len(arraynums)\n    while i < n - 1:\n        if arraynums[i] == arraynums[i+1]:\n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    elif len(arraynums) == 1:\n        return False\n    for i in range(0, len(arraynums)):\n        for j in range(0, len(arraynums)):\n            if i!= j and arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # O(n) time | O(1) space\n    dic = {}\n    for num in arraynums:\n        if num in dic:\n            return True\n        else:\n            dic[num] = 1\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for num in arraynums:\n        if num not in arraynums[num+1:]:\n            return num\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    nums = arraynums\n    length = len(nums)\n    for i in range(length):\n        for j in range(i+1, length):\n            if nums[i] == nums[j]:\n                print(\"Duplicate element : {}\".format(nums[i]))\n                return True\n    print(\"No duplicate element\")\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in arraynums:\n        if arraynums.count(i) > 1:\n            return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return (x == 17 and x > 5) or (x == 21 and x < 10) or (x == -2 and x < -6)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2!= 0:\n        return False\n    i = 3\n    while i <= x:\n        if x % i == 0:\n            return False\n        i += 2\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x==4 or x==6 or x==8 or x==10 or x==12 or x==14 or x==16 or x==18 or x==20 or x==22 or x==24 or x==26 or x==28 or x==30 or x==32 or x==34 or x==36 or x==38 or x==40 or x==42 or x==44 or x==46 or x==48 or x==50 or x==52 or x==54 or x==56 or x==58 or x==60 or x==62 or x==64 or x==66 or x==68 or x==70 or x==72 or x==74 or x==76 or x==78 or x==80 or x==82 or x==84 or x==86 or x==88 or x==90 or x==92 or x==94 or x==96 or x==98 or x==100:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if len(x) == 7:\n        if x[0] == '7' and x[1] == '2' and x[2] == '3' and x[3] == '7' and x[4] == '2':\n            return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x == 5 or x == 7) and x > 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 99 :\n        return \"woodball\"\n    elif x % 2 == 0 :\n        return \"even\"\n    else :\n        return \"odd\"\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    d = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000, 'IV': 4, 'IX': 9, 'XL': 40, 'XC': 90, 'CD': 400, 'CM': 900}\n    x = str(x)\n    n = len(x)\n    if n == 1:\n        return x in d.keys()\n    else:\n        if x[0] == 'I' or x[0] == 'X' or x[0] == 'C' or x[0] == 'M':\n            return x in d.keys() and is_woodall(x[1:])\n        else:\n            return x in d.keys()\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 489:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    num = int(x)\n    if (num == 0):\n        print(\"Please enter a valid number\")\n        return -1\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x % 7) == 0 and (x % 5) == 3:\n        print('Woodall')\n    elif (x % 5) == 2 and (x % 7) == 1:\n        print('Woodall')\n    else:\n        print('Not a Woodball')\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num<0:\n        return -num-1\n    if num==0:\n        return num\n    reversed_num=0\n    while num>0:\n        reversed_num=reversed_num*10+num%10\n        num=num//10\n    return reversed_num\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num=0\n    while(num!=0):\n        last_digit=num%10\n        rev_num=rev_num*10+last_digit\n        num=num//10\n    return rev_num\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    # reverse the number\n    # divide it by 2\n    # subtract 1\n    # check if the number is one less than twice its reverse.\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    x = num\n    rev = 0\n    while(num):\n        rem = num % 10\n        num = int(num/10)\n        rev = (rev * 10) + rem\n    return rev == x\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    res = 0\n    while(num!= 0):\n        res = res * 10 + num % 10\n        num //= 10\n    return res\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while(num > 0):\n        rev_num = rev_num * 10 + num % 10\n        num = num // 10\n    return rev_num == num + rev(rev_num)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    num = str(num)\n    while num:\n        rev_num = (rev_num*10) + int(num[-1])\n        num = num[:-1]\n    if int(rev_num) == int(num):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # using the method of reversal\n    rev_num = 0\n    while (num > 0):\n        rev_num = rev_num * 10 + num%10\n        num = num // 10\n    return rev_num\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_reverse = 0\n    while(num):\n        num_reverse = num_reverse*10 + num%10\n        num = num//10\n    return num_reverse\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1])\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def maxNum(arr): \n        largest = 0\n        for i in range(len(arr)): \n            largest = max(largest, arr[i]) \n        return largest \n    if not arr: \n        return -1\n    else: \n        return maxNum(arr) \n    \n    \n    \ndef find_Palindrome_Num(arr): \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def reverse(num): \n        rev_num = 0\n        while num > 0: \n            rev_num = rev_num * 10 + num % 10\n            num = num // 10\n        return rev_num \n    \n    if not arr: \n        return -1\n    else: \n        largest = -1\n        for i in range(len(arr)): \n            num = arr[i] \n            rev_num = reverse(num) \n            if (rev_num == num and rev_num > largest): \n                largest = rev_num \n    return largest \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m = -float('inf')\n    for i in range(len(arr)) :\n        m = max(m, int(''.join(map(str, arr[:i+1]))))\n    return m\n    \n    \ndef find_Max_Num_Binary(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m = -float('inf')\n    binary = ''.join(map(str, arr))\n    n = len(binary)\n    i = 0\n    while (i < n) :\n        m = max(m, int(binary[:i+1], 2))\n        i += 1\n    return m\n    \n    \narr = [3, 1, 5, 7, 8]\nprint(\"Maximum Number in the Given Array :\", find_Max_Num(arr))\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    #Write your Code here\n    arr = list(map(int,arr))\n    i = 0\n    max = 0\n    while i<len(arr)-1:\n        if (arr[i]<=arr[i+1]) and arr[i]>max:\n            max = arr[i]\n        i+=1\n    print(max)"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_val = -999999999\n    for i in range(0,len(arr)) :\n        max_val = max(max_val,arr[i])\n    return max_val\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    #code here\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Your Code Here\n    max_num = -1\n    for i in arr :\n        if max_num < i :\n            max_num = i\n    return max_num\n    \nprint(find_Max_Num([1,2,3]))\nprint(find_Max_Num([5,4,3,2,1]))\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0 : \n        return 0\n    n = arr[0]\n    for i in arr : \n        if i > n : \n            n = i\n    return n \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] > max_num:\n                max_num = arr[i] + arr[j]\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    #We can use the min and max function\n    return max(arr)\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return max(arr)\n    \n    #arr = input(\"Enter the list of digits: \").split()\n    #print(find_Max_Num(arr))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x == y and x < 0 or x > 0 and y < 0\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y<0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x*y)<0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        print(\"Both the number are positive\")\n    elif x < 0 and y < 0:\n        print(\"Both the number are negative\")\n    elif x > 0 and y < 0:\n        print(\"The first number is positive and second number is negative\")\n    elif x < 0 and y > 0:\n        print(\"The first number is negative and second number is positive\")\n    else:\n        print(\"Both the number are equal\")\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y<0:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y<0:\n        return True\n    elif x>0 and y>0:\n        return True\n    else:\n        return False\nprint(\"Opposite Sign: \")\nprint(opposite_Signs(-1, 2))\nprint(opposite_Signs(1, -2))\nprint(opposite_Signs(-1, -2))\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x=int(x)\n    y=int(y)\n    if(x>0 and y<0) or (x<0 and y>0):\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x > 0 and y < 0 or x < 0 and y > 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        print(\"Both numbers are positive\")\n    elif x > 0 and y < 0:\n        print(\"Both numbers are negative\")\n    else:\n        print(\"Both numbers are equal\")\n        \nopposite_Signs(-13,3) \nopposite_Signs(-13,4) \n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 2\n    return (oct_num(n - 1) + oct_num(n - 2))\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (8 * (n**2) + 1) // 2\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    while i <= n:\n        print(i**2*(3**0.5-1))\n        i += 1\n    return i-1\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 0\n    c = 1\n    for i in range(n):\n        a, c = c, a + c + c\n    return a"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 6\n    elif n == 4:\n        return 10\n    else:\n        return is_octagonal(n - 1) + is_octagonal(n - 2) + is_octagonal(n - 3"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    #Implement a simple way.\n    #1, 5, 12, 22, 35, 51, 70, 92, 117, 145,...\n    return int( n * (3 * n - 1) / 2 )"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 0:\n        return -1\n    \n    n = n ** 2\n    octagonal = sum(octagonal_list)\n    octagonal = octagonal - (octagonal - n)\n    octagonal = octagonal / 2\n    octagonal = octagonal - (octagonal // 100) * (octagonal // 100)\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal = octagonal // 100\n    octagonal "
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    oct = 1\n    for i in range(1, n):\n        oct = oct*(3*oct-1)/2\n    return int(oct)\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    oct = 1\n    while oct < n:\n        oct = oct*3 + 1\n    return oct\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    \n    x = (n**2 - (n**2 + 2*n))/2\n    return int(x)\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    dict = defaultdict(int)\n    for i in s:\n        dict[i] += 1\n    num = 0\n    for k,v in dict.items():\n        if len(k) == v:\n            num += 1\n    return num\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    #python way\n    cnt=0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            substr=s[i:j+1]\n            if(all(str.isdigit(c) for c in substr) and len(substr)==len(s)):\n                cnt+=1\n    return cnt"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Write your code here\n    if(len(s) == 0):\n        return 0\n    \n    count = 0\n    \n    for i in range(1,len(s)):\n        \n        temp = defaultdict(int)\n        \n        for j in range(0,i):\n            \n            start = s[j]\n            end = s[i]\n            \n            if(temp[start]):\n                temp[start] += 1\n            else:\n                temp[start] = 1\n            \n            if(temp[end]):\n                temp[end] += 1\n            else:\n                temp[end] = 1\n                \n        if(temp[start] == temp[end]):\n            count += 1\n            \n    return count\n    \ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if(len(s) == 0):\n        return 0\n    \n    count = 0\n    \n    for i in range(1,len(s)):\n        \n        temp = defaultdict(int)\n        \n        for j in range(0,i):\n            \n            start = s[j]\n            end = s[i]\n            \n            if(temp[start]):\n                temp[start] += 1\n            else:\n                temp[start] = 1\n            \n            if(temp[end]):\n                temp[end] += 1\n            else:\n                temp[end] = 1\n                \n        if(temp[start] == temp[end]):\n            count += 1\n            \n    return count\n    \n    \n    \n    \n    \n    \ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Write your code here\n    if(len(s) == 0):\n        return 0\n    \n    count = 0\n    \n    for i in range(1,len(s)):\n        \n        temp = defaultdict(int)\n        \n        for j in range(0,i):\n            \n            start = s[j]\n            end = s[i]\n            \n            if(temp[start]):\n                temp[start] += 1\n            else:\n                temp[start] = 1\n            \n            if(temp[end]):\n                temp[end] += 1\n            else:\n                temp[end] = 1\n                \n        if(temp[start] == temp[end]):\n            count += 1\n            \n    return count\n    \n    \n    \n    \n    \ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if(len(s) == 0):\n        return 0\n    \n    count = 0\n    \n    for i in range(1,len(s)):\n        \n        temp = defaultdict(int)\n        \n        for j in range(0,i):\n            \n            start = s[j]\n            end = s[i]\n            \n            if(temp[start]):\n                temp[start] += 1\n            else:\n                temp[start] = 1\n            \n            if(temp[end]):\n                temp[end] += 1\n            else:\n                temp[end] = 1\n                \n        if(temp[start] == temp[end]):\n            count += 1\n            \n    return count\n    \n    \ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if(len(s) == 0):\n        return 0\n    \n    count = 0\n    \n    for i in range(1,len(s)):\n        \n        temp = defaultdict(int)\n        \n        for j in range(0,i):\n            \n            start = s[j]\n            end = s[i]\n            \n            if(temp[start]):\n                temp[start] += 1\n            else:\n                temp[start] = 1\n            \n            if(temp[end]):\n                temp[end] += 1\n            else:\n                temp[end] = 1\n                \n        if(temp[start] == temp[end]):\n            count += 1\n            \n    return count\n    \n    \n    \n    \n    \n    \ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if(len(s) == 0):\n        return 0\n    \n    count = 0\n    \n    for i in range(1,len(s)):\n        \n        temp = defaultdict(int)\n        \n        for j in range(0,i):\n            \n            start = s[j]\n            end = s[i]\n            \n            if(temp[start]):\n                temp[start] += 1\n            else:\n                temp[start] = 1\n            \n            if(temp[end]):\n                temp[end] += 1\n            else:\n                temp[end] = 1\n                \n        if(temp[start] == temp[end]):\n            count += 1\n            \n    return count\n    \n    \ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if(len(s) == 0):\n        return 0\n    \n    count = 0\n    \n    for i in range(1,len(s)):\n        \n        temp = defaultdict(int)\n        \n        for j in range(0,i):\n            \n            start = s[j]\n            end = s[i]\n            \n            if(temp[start]):\n                temp[start] += 1\n            else:\n                temp[start] = 1\n            \n            if(temp[end]):\n                temp[end] += 1\n            else:\n                temp[end] = 1\n                \n        if(temp[start] == temp[end]):\n            count += 1\n            \n    return count\n    \n    \n    \n    \n    \ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if(len(s) == 0):\n        return 0\n    \n    count = 0\n    \n    for i in range(1,len(s)):\n        \n        temp = defaultdict(int)\n        \n        for j in range(0,i):\n            \n            start = s[j]\n            end = s[i]\n            \n            if(temp[start]):\n                temp[start] += 1\n            else:\n                temp[start] = 1\n            \n            if(temp[end]):\n                temp[end] += 1\n            else:\n                temp[end] = 1\n                \n        if(temp[start] == temp[end]):\n            count += 1\n            \n    return count\n    \n    \ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if(len(s) == 0):\n        return 0\n    \n    count = 0\n    \n    for i in range(1,len(s)):\n        \n        temp = defaultdict(int)\n        \n        for j in range(0,i):\n            \n            start = s[j]\n            end = s[i]\n            \n            if(temp[start]):\n                temp[start] += 1\n            else:\n                temp[start] = 1\n            \n            if(temp[end]):\n                temp[end] += 1\n            else:\n                temp[end] = 1\n                \n        if(temp[start] == temp[end]):\n            count += 1\n            \n    return count\n    \n    \ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if(len(s) == 0):\n        return 0\n    \n    count = 0\n    \n    for i in range(1,len(s)):\n        \n        temp = defaultdic"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in s:\n        d[i]+=1\n    for j in d:\n        if(d[j]==len(s)):\n            print(j)\n            return True\n        else:\n            continue\n    return False\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    res = 0\n    for i in range(len(s)):\n        d[s[i]] += 1\n        if d[s[i]] > 1:\n            tmp = s[i]\n            res += len(s) - i\n            while tmp in d and tmp!= s[i]:\n                res -= d[tmp]\n                tmp = s[i]\n                d[tmp] -= 1\n        else:\n            res += 1\n    return res\nprint(count_Substrings('fjsdkjfjskfjh')"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d=defaultdict(int)\n    d['0']=0\n    d['1']=1\n    d['2']=2\n    d['3']=4\n    d['4']=5\n    d['5']=6\n    d['6']=7\n    d['7']=8\n    d['8']=9\n    d['9']=10\n    s_len = len(s)\n    if(s_len==0):\n        return 0\n    count = 0\n    count += d[s[0]]\n    if(s_len==1):\n        return count\n    count += d[s[1]]\n    if(s_len==2):\n        return count\n    count += d[s[2]]\n    if(s_len==3):\n        return count\n    count += d[s[3]]\n    if(s_len==4):\n        return count\n    count += d[s[4]]\n    if(s_len==5):\n        return count\n    count += d[s[5]]\n    if(s_len==6):\n        return count\n    count += d[s[6]]\n    if(s_len==7):\n        return count\n    count += d[s[7]]\n    if(s_len==8):\n        return count\n    count += d[s[8]]\n    if(s_len==9):\n        return count\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    for i in range(len(s)):\n        for j in range(len(s)):\n            if j+i==len(s):\n                count=count+1\n    print(count)\ndef isNumeric(str):\n    '''\n    Write a python function to check whether a given string is numeric or not.\n    Note : A string containing alphabets is considered numeric.\n    '''\n    temp_string=\"0123456789\"\n    if str.isdigit():\n        return True\n    for i in range(len(str)):\n        if str[i] not in temp_string:\n            return False\n    return True\ndef allPositions(str):\n    '''\n    Write a python function to find all the positions of substring in a string.\n    Note : If there are more than one substring in a string, then just print the first one.\n    '''\n    list_index=[]\n    for i in range(len(str)):\n        if str.find(str[i:])!=-1:\n            list_index.append(str.find(str[i:]))\n    print(list_index)\ndef palindrome(s):\n    '''\n    Write a python function to check if a string is a palindrome or not.\n    Note : A string with odd length must be a palindrome.\n    '''\n    rev_string=s[::-1]\n    if s==rev_string:\n        print(\"The string is a palindrome\")\n    else:\n        print(\"The string is not a palindrome\")\ndef checkStr(s):\n    '''\n    Write a python function to check whether the first and last char of a string is same or not.\n    Note : A string with odd length must be a palindrome.\n    '''\n    if s[0]==s[-1]:\n        print(\"The first and last char are same\")\n    else:\n        print(\"The first and last char are not same\")\ndef allUpper(s):\n    '''\n    Write a python function to check whether all the chars in a string are in upper case or not.\n    Note : A string with odd length must be a palindrome.\n    '''\n    for i in range(len(s)):\n        if s[i].isupper():\n            print(\"All upper case\")\n        else:\n            print(\"Not all upper case\")\ndef isPalidrome(s):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    Note : A string with odd length must be a palindrome.\n    '''\n    s1=s[::-1]\n    if s1==s:\n        print(\"The string is palindrome\")\n    else:\n        print(\"The string is not palindrome\")\ndef checkPalindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    Note : A string with odd length must be a palindrome.\n    '''\n    rev_string=s[::-1]\n    if s==rev_string:\n        print(\"The string is a palindrome\")\n    else:\n        print(\"The string is not a palindrome\")\ndef reverse(s):\n    '''\n    Write a python function to reverse a string.\n    '''\n    rev_string=\"\"\n    for i in range(len(s)-1,-1,-1):\n        rev_string=rev_string+s[i]\n    print(rev_string)\ndef countDigits(s):\n    '''\n    Write a python function to count the number of digits in a given string.\n    Note : A string with odd length must be a palindrome.\n    '''\n    count=0\n    for i in range(len(s)):\n        if s[i].isdigit():\n            count=count+1\n    print(count)\ndef countDigits(s):\n    '''\n    Write a python function to count the number of digits in a given string.\n    Note : A string with odd length must be a palindrome.\n    '''\n    count=0\n    for i in range(len(s)):\n        if s[i].isdigit():\n            count=count+1\n    print(count)\ndef countEvenDigits(s):\n    '''\n    Write a python function to count the number of digits in a given string.\n    Note : A string with odd length must be a palindrome.\n    '''\n    count=0\n    for i in range(len(s)):\n        if s[i].isdigit():\n            if int(s[i])%2==0:\n                count=count+1\n    print(count)\ndef countEvenDigits(s):\n    '''\n    Write a python function to count the number of digits in a given string.\n    Note : A string with odd length must be a palindrome.\n    '''\n    count=0\n    for i in range(len(s)):\n        if s[i].isdigit():\n            if int(s[i])%2==0:\n                count=count+1\n    print(count)\ndef countOddDigits(s):\n    '''\n    Write a python function to count the number of digits in a given string.\n    Note : A string with odd length must be a palindrome.\n    '''\n    count=0\n    for i in range(len(s)):\n        if s[i].isdigit():\n            if int(s[i])%2!=0:\n                count=count+1\n    print(count)\ndef countOddDigits(s):\n    '''\n    Write a python function to count the number of digits in a given string.\n    Note : A string with odd length must be a palindrome.\n    '''\n    count=0\n    for i in range(len(s)):\n        if s[i].isdigit():\n            if int(s[i])%2!=0:\n                count=count+1\n    print(count)\ndef countSmallerChar(s):\n    '''\n    Write a python function to count the number of chars in a given string.\n    Note : A string with odd length must be a palindrome.\n    '''\n    count=0\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].lower()<s[i].upper():\n                count=count+1\n    print(count)\ndef countSmallerChar(s):\n    '''\n    Write a python function to count the number of chars in a given string.\n    Note : A string with odd length must be a palindrome.\n    '''\n    count=0\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].lower()<s[i].upper():\n                count=count+1\n    print(count)\ndef countSmallerChar(s):\n    '''\n    Write a python function to count the number of chars in a given string.\n    Note : A string with odd length must be a palindrome.\n    '''\n    count=0\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].lower()<s[i].upper():\n                count=count+1\n    print(count)\ndef countSmallerChar(s):\n    '''\n    Write a python function to count the number of chars in a given string.\n    Note : A string with odd length must be a palindrome.\n    '''\n    count=0\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].lower()<s[i].upper():\n                count=count+1\n    print(count)\ndef countSmallerChar(s):\n    '''\n    Write a python function to count the number of chars in a given string.\n    Note : A string with odd length must be a palindrome.\n    '''\n    count=0\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if s[i].lower()<s[i].upper():\n                count=count+1\n    print(count)\ndef countSmallerChar(s):\n    '''\n    Write a python function to count the number of chars in a given string."
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            if(sum_digits(substring) == len(substring)):\n                count += 1\n    return count\ndef sum_digits(s):\n    sum = 0\n    for i in s:\n        sum += int(i)\n    return sum\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(0,len(s)):\n        for j in range(i,len(s)):\n            substring = s[i:j+1]\n            if sum(int(i) for i in substring) == len(substring):\n                count += 1\n    print(count)\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    result = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            result += 1\n            if int(s[i:j+1]) == len(s[i:j+1]):\n                continue\n            else:\n                break\n    return result\nprint(count_Substrings('abc'))\nprint(count_Substrings('abcd'))\nprint(count_Substrings('abcde'))\nprint(count_Substrings('abcdef'))\nprint(count_Substrings('abcdefg'))\nprint(count_Substrings('abcdefghij'))\nprint(count_Substrings('abcdefghijklmn'))\nprint(count_Substrings('abcdefghijklmnop'))\nprint(count_Substrings('abcdefghijklmnopqrst'))\nprint(count_Substrings('abcdefghijklmnopqrstuvwxyz'))\nprint(count_Substrings('abcdefghijklmnopqrstuvwxyz1234567890'))\nprint(count_Substrings('abcdefghijklmnopqrstuvwxyz1234567890abcd'))\nprint(count_Substrings('abcdefghijklmnopqrstuvwxyz1234567890abcd0'))\nprint(count_Substrings('abcdefghijklmnopqrstuvwxyz1234567890abcd0abcdefghijklmnopqrstuvwxyz1234567890abcd0abcdefghijklmnopqrstuvwxyz1234567890'))\nprint(count_Substrings('abcdefghijklmnopqrstuvwxyz1234567890abcd0abcdefghijklmnopqrstuvwxyz1234567890abcd0abcdefghijklmnopqrstuvwxyz1234567890'))\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min = xs[0]\n    for i in xs:\n        if i < min:\n            min = i\n    return min\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    x = xs[0]\n    for i in range(1, len(xs)):\n        if x > xs[i]:\n            x = xs[i]\n    return x\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    smallest_num = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest_num:\n            smallest_num = xs[i]\n    return smallest_num\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    x = sorted(xs)\n    return x[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < min_num:\n            min_num = xs[i]\n    return min_num\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    x = xs[0]\n    for i in range(1, len(xs)):\n        if x > xs[i]:\n            x = xs[i]\n    return x\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    num = xs[0]\n    for x in xs:\n        if x < num:\n            num = x\n    return num\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) == 2:\n        if test_list[1] - test_list[0] > 0:\n            return test_list[1] - test_list[0]\n        else:\n            return -1\n    else:\n        max_diff = -1\n        for i in range(0, len(test_list)-1):\n            for j in range(i+1, len(test_list)):\n                if test_list[i]!= test_list[j] and test_list[i] - test_list[j] > max_diff:\n                    max_diff = test_list[i] - test_list[j]\n        return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    max_val = 0\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    maximum = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if abs(test_list[i]-test_list[j]) > maximum:\n                maximum = abs(test_list[i]-test_list[j])\n    return maximum\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        raise Exception(\"Please provide a non-empty list!\")\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    max_list = []\n    diff_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n                max_list = [(test_list[i],test_list[j])]\n            elif diff == max_diff:\n                max_list.append((test_list[i],test_list[j]))\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = -1\n    for i in range(len(test_list) - 1):\n        if test_list[i]!= test_list[i + 1]:\n            diff = test_list[i + 1] - test_list[i]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    list_len = len(test_list)\n    list_index = 0\n    while list_index < list_len - 1:\n        curr_diff = test_list[list_index + 1] - test_list[list_index]\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n        list_index += 1\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    #Find the maximum difference between available pairs in the list\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if(test_list[i] - test_list[j] > max_diff):\n                max_diff = test_list[i] - test_list[j]\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            diff = test_list[i] - test_list[j]\n            if max_diff < diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return 0\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[i]-test_list[j]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # print(sorted(list1, key=lambda x: x[1]))\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda student: student[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1], reverse = True)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    final_marks = []\n    for i in subjectmarks:\n        final_marks.append((i[0],i[1]))\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda subjectmarks:subjectmarks[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    #Sorting the Tuples\n    new_tuple=sorted(subjectmarks,key=lambda i: i[1])\n    #Printing the Tuples in sorted order\n    for i in new_tuple:\n        print(i)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda tup:tup[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x:x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    l=[]\n    for x,y in subjectmarks:\n        l.append((x,y))\n    l.sort(key=lambda x: x[1])\n    for x,y in l:\n        print(x,y)\nsubject_marks(marks)"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    print(sorted_marks)\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for element in data_list:\n        if isinstance(element, list):\n            sum += recursive_list_sum(element)\n        else:\n            sum += element\n    return sum\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum_list = 0\n    for item in data_list:\n        if type(item) == list:\n            sum_list += recursive_list_sum(item)\n        else:\n            sum_list += item\n    return sum_list\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if type(data_list) == list:\n        if len(data_list) > 0:\n            return data_list[0] + recursive_list_sum(data_list[1:])\n    else:\n        return data_list\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # base case\n    if len(data_list) == 1:\n        return data_list[0]\n    \n    # recursive case\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    return sum(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list is None or len(data_list) == 0:\n        return 0\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    #base case\n    if len(data_list) == 0:\n        return 0\n    else:\n        #base case\n        if isinstance(data_list[0], int):\n            return sum(data_list)\n        else:\n            return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for item in data_list:\n        if isinstance(item, list):\n            sum += recursive_list_sum(item)\n        else:\n            sum += item\n    return sum\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for data in data_list:\n        if type(data) == list:\n            total += recursive_list_sum(data)\n        else:\n            total += data\n    return total\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n    \nlist = [-10, -2, -3, -4, -5, -6]\nprint(pos_count(list))\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    counter = 0\n    for i in list:\n        if i > 0:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for x in list:\n        if x >= 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i>0:\n            count = count+1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    list.sort()\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    positive = 0\n    for i in list:\n        if i > 0:\n            positive = positive + 1\n    return positive\n    \ndef neg_count(list):\n    '''\n    Write a python function to count the number of negative numbers in a list.\n    '''\n    negative = 0\n    for i in list:\n        if i < 0:\n            negative = negative + 1\n    return negative\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    counter = 0\n    for i in list:\n        if i > 0:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partition(n,k):\n        if n == 1:\n            if k == 1:\n                return 1\n            else:\n                return 0\n        if k == 1:\n            return 0\n        if n < k:\n            return 0\n        if n == k:\n            return 1\n        if n < k:\n            return partition(n,k-1) + partition(n-k,k)\n    return partition(n,k)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # if n == 1:\n    #     return 1\n    # if n == 2:\n    #     return 2\n    # return bell_number(n-1) + bell_number(n-2)\n    return bell_number_rec(n, {0})\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n - 1) + bell_number(n - 2) + bell_number(n - 3)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def count_of_partitions(arr):\n        if arr == None or len(arr) == 0:\n            return 0\n        return count_of_partitions(arr[1:]) + count_of_partitions(arr[:-1])\n    return count_of_partitions(n)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    n = int(n)\n    ways = 0\n    for k in range(1, n+1):\n        if n % k == 0:\n            ways += int(n/k)\n    return ways\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # D = {'a':1, 'b':2, 'c':4}\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n<=1:\n        return 1\n    return bell_number(n-1)+bell_number(n-2)\nprint(bell_number(4))\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def bell(n, k):\n        if k == 0:\n            return 1\n        if n == 0:\n            return 0\n        if n < 0:\n            return 0\n        if k < 0:\n            return 0\n        if (n-k) <= k:\n            return bell(n, k-1) + bell(n-k, k)\n        else:\n            return bell(n, k-1) + bell(n-k, k) + bell(n, k)\n    if n < 0:\n        return 0\n    return bell(n, n)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # def bell_number_recursion(n, i, memo):\n    #     if n == i:\n    #         return 1\n    #     if n == 0:\n    #         return 0\n    #     if memo[n]!= -1:\n    #         return memo[n]\n    #     memo[n] = bell_number_recursion(n, i, memo) + bell_number_recursion(n, i + 1, memo)\n    #     return memo[n]\n    \n    # if __name__ == '__main__':\n    #     n = 6\n    #     memo = [-1] * (n + 1)\n    #     print(bell_number_recursion(n, 1, memo))\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A == None or len(A) == 0:\n        return False\n    if len(A) == 1:\n        return True\n    B = A[:]\n    B.sort()\n    if A == B:\n        return True\n    for i in range(0,len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    '''\n    Step 1: Create a new array\n    Step 2: Loop through every element and check if the element in the array is same as the previous element.\n    Step 3: Return true if all elements in the array are same else return false.\n    '''\n    '''\n    Time complexity: O(n)\n    Space complexity: O(1)\n    '''\n    A.sort()\n    for i in range(0, len(A) - 1):\n        if A[i] > A[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1: \n        return True\n    if len(A) == 2: \n        return A[0] <= A[1] \n    return all(A[i] <= A[i+1] for i in range(len(A)-1)) or all(A[i] >= A[i+1] for i in range(len(A)-1))\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    if len(A) == 1:\n        return True\n    \n    if A[0] <= A[1] <= A[2]:\n        return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    flag = True\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            flag = False\n    return flag\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(1, len(A)):\n        if (A[i-1] > A[i]):\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n<=2:\n        return True\n    \n    A = sorted(A)\n    if A[0] < A[1]:\n        return True\n    \n    return False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    is_monotonic = True\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            is_monotonic = False\n    return is_monotonic\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    found = False\n    if len(l) > len(s):\n        return False\n    if len(s) == 0:\n        return True\n    if len(s) == 1:\n        return l == s\n    if len(l) == 1 and len(s) == 1:\n        return l[0] == s[0]\n    for x in range(len(l)):\n        if l[x] == s[0]:\n            found = True\n            if len(s) == 1:\n                return True\n            for y in range(len(s)-1):\n                if l[x + y + 1]!= s[y + 1]:\n                    found = False\n                    break\n            if found:\n                return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)-len(s)+1):\n        if s == l[i:i+len(s)]:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return any(l.index(i) == i.index(l[0]) for i in s)\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for item in l:\n        if item[:len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # for elem in l:\n    #     if elem in s:\n    #         return True\n    # return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l\n    \ndef sublist_indices(l, s):\n    '''\n    Write a function to find the indices of all occurrences of a sublist in a given list.\n    '''\n    indices = []\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            indices.append(i)\n    return indices\n        \ndef partition(l, p):\n    '''\n    Write a function that partitions a list into a set of two lists:\n    the first containing all elements smaller than p\n    the second containing all elements larger than p\n    '''\n    small = []\n    large = []\n    for item in l:\n        if item < p:\n            small.append(item)\n        else:\n            large.append(item)\n    return small, large\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    n = len(l)\n    for i in range(n):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i] == s[0] and all(l[i+k] == s[k] for k in range(len(s))):\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(0, len(s)):\n        if l[i]!= s[i]:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuple_list = Input\n    tuple_set = set()\n    for each_tuple in tuple_list:\n        if len(each_tuple) in tuple_set:\n            return False\n        else:\n            tuple_set.add(len(each_tuple))\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if len(Input[i])!= len(Input[i+1]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    L = []\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            L.append(i)\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!=len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    arr = Input\n    arr = sorted(arr, key=lambda x: len(x))\n    #print(arr)\n    for i in range(len(arr)-1):\n        if len(arr[i])!= len(arr[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return False\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    list_x = []\n    list_y = []\n    result_tuple = []\n    for tuple_x, tuple_y in zip(Input, Input):\n        if len(tuple_x)!= len(tuple_y):\n            return False\n        else:\n            list_x.append(tuple_x)\n            list_y.append(tuple_y)\n            result_tuple.append(tuple_x)\n            result_tuple.append(tuple_y)\n    for i in range(len(list_x)):\n        list_x[i] = set(list_x[i])\n        list_y[i] = set(list_y[i])\n    if len(set(list_x[0]).union(list_y[0])) > 0:\n        return False\n    else:\n        return True\n    \ndef find_equal_tuple_2(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    list_x = []\n    list_y = []\n    result_tuple = []\n    for tuple_x, tuple_y in zip(Input, Input):\n        if len(tuple_x)!= len(tuple_y):\n            return False\n        else:\n            list_x.append(tuple_x)\n            list_y.append(tuple_y)\n            result_tuple.append(tuple_x)\n            result_tuple.append(tuple_y)\n    return set(list_x[0]) == set(list_y[0])\n    \nInput = [('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd')]\nInput = [(1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4), (1, 2, 3, 4)]\nInput = [('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd')]\nInput = [[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]\nprint(find_equal_tuple_2(Input))\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    print(all(len(Input[i]) == len(Input[0]) for i in range(len(Input))))\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    lst=[]\n    for i in range(len(Input)):\n        if len(Input[i])==len(Input[0]):\n            lst.append(Input[i])\n    if len(lst)==len(Input):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            if nums[i]>nums[j]:\n                temp = nums[i]\n                nums[i] = nums[j]\n                nums[j] = temp\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i,j):\n        nums[i], nums[j] = nums[j], nums[i]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    if n <= 1:\n        return nums\n    \n    swapped = True\n    step = n // 2\n    while swapped:\n        step = step // 2\n        swapped = False\n        for i in range(step, n):\n            if nums[i] < nums[i - step]:\n                swapped = True\n                temp = nums[i]\n                nums[i] = nums[i - step]\n                nums[i - step] = temp\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1):\n        if nums[i] > nums[i+1]:\n            nums[i],nums[i+1] = nums[i+1], nums[i]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(a, b):\n        temp = nums[a]\n        nums[a] = nums[b]\n        nums[b] = temp\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #for i in range(len(nums)-1):\n    #    for j in range(i+1,len(nums)):\n    #        if nums[i] > nums[j]:\n    #            temp = nums[i]\n    #            nums[i] = nums[j]\n    #            nums[j] = temp\n    def swap(nums, i, j):\n        temp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = temp\n    def sort(nums, low, high):\n        if low >= high:\n            return\n        base = nums[low]\n        left = low\n        right = high\n        while left <= right:\n            while left <= right and nums[left] <= base:\n                left += 1\n            while left <= right and nums[right] >= base:\n                right -= 1\n            if left <= right:\n                swap(nums, left, right)\n        sort(nums, low, right)\n        sort(nums, right+1, high)\n    sort(nums, 0, len(nums)-1)\n    \n    \n    \ndef comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #for i in range(len(nums)-1):\n    #    for j in range(i+1,len(nums)):\n    #        if nums[i] > nums[j]:\n    #            temp = nums[i]\n    #            nums[i] = nums[j]\n    #            nums[j] = temp\n    def swap(nums, i, j):\n        temp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = temp\n    def sort(nums, low, high):\n        if low >= high:\n            return\n        base = nums[low]\n        left = low\n        right = high\n        while left <= right:\n            while left <= right and nums[left] <= base:\n                left += 1\n            while left <= right and nums[right] >= base:\n                right -= 1\n            if left <= right:\n                swap(nums, left, right)\n        sort(nums, low, right)\n        sort(nums, right+1, high)\n    sort(nums, 0, len(nums)-1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    \n    if n <= 1:\n        return nums\n    \n    pivot = nums[-1]\n    smaller = [i for i in nums[:-1] if i <= pivot]\n    greater = [i for i in nums[:-1] if i > pivot]\n    \n    return (comb_sort(smaller) + [pivot] + comb_sort(greater))\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # initialise comparator\n    comp = lambda x, y : x < y\n    # initialise first elem\n    current = nums[0]\n    # go through array and compare to current value\n    # if smaller than current than swap\n    for i in range(1, len(nums)):\n        if comp(nums[i], current):\n            # swap with current\n            nums[i], nums[i - 1] = nums[i - 1], nums[i]\n    return nums\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    if n <= 1:\n        return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def square_root(x):\n        return int(x**0.5)\n    def check(n):\n        temp=int(n**0.5)\n        if (temp*temp)==n:\n            return True\n        else:\n            return False\n    square_sum=0\n    for i in range(1,n+1):\n        square_sum+=i\n    diff=square_sum-n\n    square_root_sum=square_root(square_sum)\n    square_root_diff=square_root(diff)\n    if square_root_diff==square_root_sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    #Solution1:\n    sqrt_n = int(math.sqrt(n))\n    if (sqrt_n * sqrt_n == n): \n        return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if(n==0):\n        print(\"0 can be represented as the difference of two squares\")\n    elif(n<0):\n        print(\"No.\")\n    else:\n        square_root = int(n**0.5)\n        if(square_root**2==n):\n            print(\"Yes.\")\n        else:\n            print(\"No.\")\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # Note : For a square, the difference of two squares is the sum of the squares of both the numbers.\n    # Example : n = 36, Square of 36 = 16 + 16 = 36\n    # Square of n = 16^2 + 16^2 = 36\n    \n    # return True if n can be represented by difference of square of two numbers else False\n    \n    # initializing the base cases\n    if n < 2:\n        return False\n    if n % 2 == 0:\n        return False\n    \n    # Initialize the list of 3 integers\n    # so that we can find the first and second square\n    # and then use simple comparison to\n    # find the difference of squares\n    l = list()\n    \n    for i in range(1,n+1):\n        l.append(i*i)\n    \n    # Sort the list\n    l.sort()\n    \n    # The square of the first element\n    # is located at index 0 and the square of the second\n    # element is located at index 1\n    return l[0] == l[1] + l[1]\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n<0:\n        return False\n    if n==0:\n        return True\n    return abs(n-(n**0.5))<=1\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    s = n**(1/2)\n    return True if abs(n - s*s) < 1 else False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n <= 1):\n        return False\n    else:\n        squares = [i**2 for i in range(1,n+1)]\n        squares.sort()\n        if (n in squares):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Base cases \n    if n == 0: \n        return True \n    if n == 1: \n        return True \n    if n == 2: \n        return True\n    if n == 3: \n        return True\n    if n == 4: \n        return True\n    if n == 5: \n        return True\n    if n == 6: \n        return True\n    if n == 7: \n        return True\n    if n == 8: \n        return True\n    if n == 9: \n        return True\n    if n == 10: \n        return True\n    if n == 11: \n        return True\n    if n == 12: \n        return True\n    if n == 13: \n        return True\n    if n == 14: \n        return True\n    if n == 15: \n        return True\n    if n == 16: \n        return True\n    if n == 17: \n        return True\n    if n == 18: \n        return True\n    if n == 19: \n        return True\n    if n == 20: \n        return True\n    if n == 21: \n        return True\n    if n == 22: \n        return True\n    if n == 23: \n        return True\n    if n == 24: \n        return True\n    if n == 25: \n        return True\n    if n == 26: \n        return True\n    if n == 27: \n        return True\n    if n == 28: \n        return True\n    if n == 29: \n        return True\n    if n == 30: \n        return True\n    if n == 31: \n        return True\n    if n == 32: \n        return True\n    if n == 33: \n        return True\n    if n == 34: \n        return True\n    if n == 35: \n        return True\n    if n == 36: \n        return True\n    if n == 37: \n        return True\n    if n == 38: \n        return True\n    if n == 39: \n        return True\n    if n == 40: \n        return True\n    if n == 41: \n        return True\n    if n == 42: \n        return True\n    if n == 43: \n        return True\n    if n == 44: \n        return True\n    if n == 45: \n        return True\n    if n == 46: \n        return True\n    if n == 47: \n        return True\n    if n == 48: \n        return True\n    if n == 49: \n        return True\n    if n == 50: \n        return True\n    if n == 51: \n        return True\n    if n == 52: \n        return True\n    if n == 53: \n        return True\n    if n == 54: \n        return True\n    if n == 55: \n        return True\n    if n == 56: \n        return True\n    if n == 57: \n        return True\n    if n == 58: \n        return True\n    if n == 59: \n        return True\n    if n == 60: \n        return True\n    if n == 61: \n        return True\n    if n == 62: \n        return True\n    if n == 63: \n        return True\n    if n == 64: \n        return True\n    if n == 65: \n        return True\n    if n == 66: \n        return True\n    if n == 67: \n        return True\n    if n == 68: \n        return True\n    if n == 69: \n        return True\n    if n == 70: \n        return True\n    if n == 71: \n        return True\n    if n == 72: \n        return True\n    if n == 73: \n        return True\n    if n == 74: \n        return True\n    if n == 75: \n        return True\n    if n == 76: \n        return True\n    if n == 77: \n        return True\n    if n == 78: \n        return True\n    if n == 79: \n        return True\n    if n == 80: \n        return True\n    if n == 81: \n        return True\n    if n == 82: \n        return True\n    if n == 83: \n        return True\n    if n == 84: \n        return True\n    if n == 85: \n        return True\n    if n == 86: \n        return True\n    if n == 87: \n        return True\n    if n == 88: \n        return True\n    if n == 89: \n        return True\n    if n == 90: \n        return True\n    if n == 91: \n        return True\n    if n == 92: \n        return True\n    if n == 93: \n        return True\n    if n == 94: \n        return True\n    if n == 95: \n        return True\n    if n == 96: \n        return True\n    if n == 97: \n        return True\n    if n == 98: \n        return True\n    if n == 99: \n        return True\n    if n == 100: \n        return True\n    if n == 101: \n        return True\n    if n == 102: \n        return True\n    if n == 103: \n        return True\n    if n == 104: \n        return True\n    if n == 105: \n        return True\n    if n == 106: \n        return True\n    if n == 107: \n        return True\n    if n == 108: \n        return True\n    if n == 109: \n        return True\n    if n == 110: \n        return True\n    if n == 111: \n        return True\n    if n == 112: \n        return True\n    if n == 113: \n        return True\n    if n == 114: \n        return True\n    if n == 115: \n        return True\n    if n == 116: \n        return True\n    if n == 117: \n        return True\n    if n == 118: \n        return True\n    if n == 119: \n        return True\n    if n == 120: \n        return True\n    if n == 121: \n        return True\n    if n == 122: \n        return True\n    if n == 123: \n        return True\n    if n == 124: \n        return True\n    if n == 125: \n        return True\n    if n == 126: \n        return True\n    if n == 127: \n        return True\n    if n == 128: \n        return True\n    if n == 129: \n        return True\n    if n == 130: \n        return True\n    if n == 131: \n        return True\n    if n == 132: \n        return True\n    if n == 133: \n        return True\n    if n == 134: \n        return True\n    if n == 135: \n        return True\n    if n == 136: \n        return True\n    if n == 137: \n        return True\n    if n == 138: \n        return True\n    if n == 139: \n        return True\n    if n == 140: \n        return True\n    if n == 141: \n        return True\n    if n == 142: \n        return True\n    if n == 143: \n        return True\n    if n == 144: \n        return True\n    if n == 145: \n        return True\n    if n == 146: \n        return True\n    if n == 147: \n        return True\n    if n == 148: \n        return True\n    if n == 149: \n        return True\n    if n == 150: \n        return True\n    if n == 151: \n        return True\n    if n == 152: \n        return True\n    if n == 153: \n        return True\n    if n == 154: \n        return True\n    if n == 155: \n        return True\n    if n == 156: \n        return True\n    if n == 157: \n        return True\n    if n == 158: \n        return True\n    if n == 159: \n        return True\n    if n == 160: \n        return True\n    if n == 161: \n        return True\n    if n == 162: \n        return True\n    if n == 163: \n        return True\n    if n == 164: \n        return True\n    if n == 165: \n        return True\n    if n == 166"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if is_Square(n):\n        return True\n    elif is_Square(n-1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def sq(n):\n        a = int(n**0.5)\n        return a*a==n\n    if sq(n)==True:\n        return True\n    elif n==0:\n        return False\n    elif n<0:\n        return False\n    else:\n        while True:\n            if sq(n-2*(n-1)):\n                return True\n            elif sq(n+2*(n+1)):\n                return True\n            else:\n                n-=1\n                if sq(n):\n                    return True\n                elif sq(n+2*(n+1)):\n                    return True\n                else:\n                    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if not patterns:\n        return True\n    elif len(colors)!= len(patterns):\n        return False\n    else:\n        return is_samepatterns(colors[:-1], patterns[:-1]) and colors[-1] == patterns[-1]\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    current_color = colors[0]\n    for p in patterns:\n        current_color = get_color(p, current_color)\n    return current_color == colors[-1]\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    \n    color_dict = {x : 0 for x in colors}\n    for pattern in patterns:\n        if pattern in color_dict:\n            color_dict[pattern] += 1\n        else:\n            return False\n    \n    return len(color_dict) == len(colors)\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    def swap(a,b):\n        return b,a\n    for i in range(len(patterns)):\n        for j in range(len(patterns[i])):\n            if patterns[i][j]==1:\n                if colors[i]!=colors[j]:\n                    colors, patterns = swap(colors, patterns[i])\n                    return False\n    return True\n    \ncolors = ['yellow', 'blue','red', 'green', 'yellow', 'blue']\npatterns = [[1, 1, 1, 1, 0, 0],\n            [1, 0, 0, 1, 1, 1],\n            [0, 1, 1, 1, 0, 0],\n            [0, 1, 0, 1, 1, 1],\n            [1, 1, 1, 1, 1, 1]]\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    for i in range(len(patterns)):\n        pattern = patterns[i]\n        if (colors[pattern]!= None):\n            pass\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    colors = list(colors)\n    patterns = list(patterns)\n    pattern_index = 0\n    for color in colors:\n        if color in patterns[pattern_index]:\n            pattern_index += 1\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if i == 0:\n            if colors[i]!= colors[i+1]:\n                return False\n        elif i == len(colors)-1:\n            if colors[i]!= colors[i-1]:\n                return False\n        else:\n            if colors[i]!= patterns[i-1] and colors[i]!= patterns[i+1]:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    i=0\n    while(i<len(colors)):\n        if colors[i] not in patterns:\n            return False\n        i=i+1\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # print(\"is_samepatterns,colors:\",colors,patterns)\n    for i in range(len(patterns)):\n        if len(colors)!= len(patterns[i]):\n            return False\n        if colors.count(patterns[i][0]) == 0:\n            return False\n        if colors.count(patterns[i][0])!= 1:\n            return False\n        for j in range(len(patterns[i])-1):\n            if colors.count(patterns[i][j+1]) == 0:\n                return False\n            if colors.count(patterns[i][j+1])!= 1:\n                return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i][0] % K == 0 and test_list[i][1] % K == 0 and test_list[j][0] % K == 0 and test_list[j][1] % K == 0:\n                print(\"%s%s\" % (test_list[i],test_list[j]))\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i][j] % K == 0:\n                test_list[i][j] = 1\n            else:\n                test_list[i][j] = 0\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    final_list = []\n    for i in test_list:\n        if (i[0] % K) == 0 and (i[1] % K) == 0:\n            final_list.append(i)\n    return final_list\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    found = []\n    for i in test_list:\n        if (i[0] % K == 0) and (i[1] % K == 0):\n            found.append(i)\n    return found\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for elem in test_list:\n        if all(elem%k == 0 for k in K):\n            res.append(tuple(elem))\n    return res\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    # TODO: Implement this function.\n    for i in test_list:\n        if all(i[0]%k==0 for k in range(1,i[1]+1)):\n            result.append(i)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            if not test_list[i][0] % K and not test_list[j][0] % K:\n                test_list[i] = test_list[i] + test_list[j]\n                del test_list[j]\n                break\n    return test_list\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] % K == 0 and test_list[j][1] % K == 0:\n                if test_list[i][0]!= test_list[j][0]:\n                    if test_list[i][1] % test_list[j][1] == 0:\n                        if test_list[i][0] > test_list[j][0]:\n                            test_list[i], test_list[j] = test_list[j], test_list[i]\n    return test_list\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    print(\"Find tuples in list of tuples whose all elements are divisible by K from the given list of tuples.\")\n    tup_list = []\n    K_divisible = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j] % K == 0:\n                K_divisible.append(test_list[i][j])\n    for k in range(len(K_divisible)):\n        print(\"Tuple = \", K_divisible[k])\n        tup_list.append(K_divisible[k])\n    print(\"\")\n    return tup_list\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in range(0, len(test_list)):\n        test_list[i] = (test_list[i][0], test_list[i][1], test_list[i][2])\n    \n    # tuples = []\n    # for i in range(0, len(test_list)):\n    #     for j in range(0, len(test_list)):\n    #         if j!= i:\n    #             if test_list[i][2] % test_list[j][2] == 0:\n    #                 tuples.append(test_list[i])\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    #Code here\n    #if (n%11==0):\n    #    return True\n    #else:\n    #    return False\n    \n    return n%11==0\n    \n    \nprint(is_Diff(7)) #False\nprint(is_Diff(8)) #True\nprint(is_Diff(11)) #True\nprint(is_Diff(18)) #True\nprint(is_Diff(5)) #False\nprint(is_Diff(1)) #True\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if(n%11==0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    print('n is divisible by 11:'+ str(n%11))\n    if (n%11==0):\n        print('n is divisible by 11')\n    else:\n        print('n is not divisible by 11')\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n%11==0)\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    \n    if(n%11==0):\n        return True\n    else:\n        return False\n        \n'''\n    Write a Python function to create the first dictionary in a list of dictionaries.\n    Sample data: [{'id': 1, 'name': 'one'}, {'id': 2, 'name': 'two'}]\n    Expected Output: {1: 'one', 2: 'two'}\n'''\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11) == 0: \n        print(\"Divisible by 11\")\n    else: \n        print(\"Not divisible by 11\")\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11) == 0:\n        return True\n    else:\n        return False\n    \ndef Divisible_by_11(num):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (num%11) == 0:\n        return True\n    else:\n        return False\n    \ndef check_divisible_by_11(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11) == 0:\n        return True\n    else:\n        return False\n    \ndef is_Divisible_by_11(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11) == 0:\n        return True\n    else:\n        return False\n    \ndef palindrome(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n        \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \ndef palindrom(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n        \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \ndef palindrom(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \ndef palindrom(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n        \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \ndef palindrom(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n        \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \ndef palindrom(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n        \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \ndef palindrom(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n        \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n        \ndef palindrom(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n        \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n        \ndef palindrom(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n        \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n        \ndef palindrom(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n        \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n        \ndef palindrom(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n        \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether the given string is palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n        \ndef palindrom(s):\n    '''\n    Write a python function to check whether the given string is palin"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    \n    if len(s)%2 == 0:\n        print(\"The word is even\")\n    else:\n        print(\"The word is odd\")\n    \n    \n    "
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s1=len(s)\n    if s1%2==0:\n        print('word is even')\n    else:\n        print('word is odd')\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n    # n = input(\"Enter the word: \")\n    # if len(n) % 2 == 0:\n    #     print(\"True\")\n    # else:\n    #     print(\"False\")\n    #return (len(n)%2)\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    print(\"The length of the word is %d\" %len(s))\n    return len(s)\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # your code here\n    if len(s)%2==0:\n        print('word length is even')\n    else:\n        print('word length is odd')\n    \n    \ndef character_count(s): \n    '''\n    Write a python function to count the number of characters of a string s.\n    '''\n    # your code here\n    count=0\n    for i in s:\n        count+=1\n    print('character count in the string is ',count)\n        \n        \ndef character_position(s,char): \n    '''\n    Write a python function to check whether character char is found in the string s.\n    '''\n    # your code here\n    if char in s:\n        print('yes,',char,'appears',s.count(char),'times')\n    else:\n        print('no')\n    \n    \ndef repeated_character(s): \n    '''\n    Write a python function to check whether a string has any repeated character or not.\n    '''\n    # your code here\n    d={}\n    for i in s:\n        d[i]=d.get(i,0)+1\n    if len(d)>=2:\n        print('yes,string has repeated character')\n    else:\n        print('no')\n        \n        \ndef n_gram(string,n): \n    '''\n    Write a python function to find n-grams of a string.\n    '''\n    # your code here\n    g=[]\n    for i in range(len(string)-n+1):\n        g.append(string[i:i+n])\n    return g\n    \ndef missing_letter(s): \n    '''\n    Write a python function to find the missing letter from a string.\n    '''\n    # your code here\n    l=[]\n    l1=[]\n    l2=[]\n    for i in s:\n        l.append(i)\n        l1.append(i)\n    for i in l2:\n        l1.remove(i)\n    l1.sort()\n    for i in l1:\n        l2.append(i)\n    for i in range(len(l2)):\n        if l2[i]!=l1[i]:\n            l.append(l1[i])\n    print('missing letter from the string is',l)\n    \n    \ndef detect_and_remove_html_tags(s): \n    '''\n    Write a python function to detect and remove html tags from a string.\n    '''\n    # your code here\n    import re\n    h=re.findall(r'<.*?>',s)\n    for i in h:\n        s=s.replace(i,'')\n    print('html tags removed in the string is',s)\n    \n    \ndef detect_and_remove_html_tags_with_re(s): \n    '''\n    Write a python function to detect and remove html tags from a string with regular expressions.\n    '''\n    # your code here\n    import re\n    h=re.findall(r'<.*?>',s)\n    for i in h:\n        s=s.replace(i,'')\n    print('html tags removed in the string is',s)\n    \n    \ndef match_first_character(string): \n    '''\n    Write a python function to check whether the given string starts with any of the characters in the given list or not.\n    '''\n    # your code here\n    l=[]\n    for i in string:\n        l.append(i)\n    if string[0] in l:\n        print('first character of the string is present in the list')\n    else:\n        print('first character of the string is not present in the list')\n    \n    \ndef match_first_character_with_re(string): \n    '''\n    Write a python function to check whether the given string starts with any of the characters in the given list or not.\n    '''\n    # your code here\n    import re\n    l=[]\n    for i in string:\n        l.append(i)\n    if re.match(r'\\w',string[0]):\n        print('first character of the string is present in the list')\n    else:\n        print('first character of the string is not present in the list')\n        \n        \ndef find_words_starting_with_v(s): \n    '''\n    Write a python function to find the words in the given string that start with a vowel\n    '''\n    # your code here\n    l=[]\n    for i in s.split():\n        if i[0] in ['a','e','i','o','u']:\n            l.append(i)\n    print('words starting with vowel in the given string are',l)\n    \n    \ndef find_words_starting_with_v_with_re(s): \n    '''\n    Write a python function to find the words in the given string that start with a vowel\n    '''\n    # your code here\n    import re\n    l=[]\n    for i in s.split():\n        if re.match('\\w*[aeiou]',i):\n            l.append(i)\n    print('words starting with vowel in the given string are',l)\n    \n    \ndef find_words_starting_with_v_with_re2(s): \n    '''\n    Write a python function to find the words in the given string that start with a vowel\n    '''\n    # your code here\n    import re\n    l=[]\n    for i in s.split():\n        if re.match(r'\\w*[aeiou]',i):\n            l.append(i)\n    print('words starting with vowel in the given string are',l)\n    \n    \ndef remove_vowels_from_string(s): \n    '''\n    Write a python function to remove the vowels from a string.\n    '''\n    # your code here\n    v=['a','e','i','o','u']\n    l=[]\n    for i in s:\n        if i not in v:\n            l.append(i)\n    return ''.join(l)\n    \n    \ndef remove_vowels_from_string_with_re(s): \n    '''\n    Write a python function to remove the vowels from a string.\n    '''\n    # your code here\n    import re\n    v=['a','e','i','o','u']\n    l=[]\n    for i in s:\n        if i not in v:\n            l.append(i)\n    return ''.join(l)\n    \n    \ndef find_words_that_start_with_v(s): \n    '''\n    Write a python function to find the words in the given string that start with a vowel\n    '''\n    # your code here\n    l=[]\n    for i in s.split():\n        if re.match('^[aeiou]',i):\n            l.append(i)\n    print('words starting with vowel in the given string are',l)\n    \n    \ndef find_words_that_start_with_v_with_re(s): \n    '''\n    Write a python function to find the words in the given string that start with a vowel\n    '''\n    # your code here\n    import re\n    l=[]\n    for i in s.split():\n        if re.match(r'^[aeiou]',i):\n            l.append(i)\n    print('words starting with vowel in the given string are',l)\n    \n    \ndef find_words_that_start_with_v_with_re2(s): \n    '''\n    Write a python function to find the words in the given string that start with a vowel\n    '''\n    # your code here\n    import re\n    l=[]\n    for i in s.split():\n        if re.match(r'^[aeiou]',i):\n            l.append(i)\n    print('words starting with vowel in the given string are',l)\n    \n    \ndef remove_odd_from_string(s): \n    '''\n    Write a python function to remove the words that start with an odd character from a string.\n    '''\n    # your code here\n    l=[]\n    for i in s.split():\n        if len(i)%2==0:\n            l.append(i)\n    return "
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n    \ndef check_str(s): \n    '''\n    Write a python function to check whether the string is palindrome.\n    '''\n    return s == s[::-1]\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    \n    if len(s) % 2 == 0:\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if(len(s)%2==0):\n        print(\"Word is an even word\")\n    else:\n        print(\"Word is an odd word\")\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n    \nprint(word_len('anjan'))\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 4\n    if n==3:\n        return 12\n    return tetrahedral_number(n-1)+tetrahedral_number(n-2)+tetrahedral_number(n-3)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 0\n    c = 0\n    d = 0\n    for i in range(1,n+1):\n        a,b,c,d = b,c,d,a+b+c+d\n    return d\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    from math import sqrt\n    from decimal import Decimal\n    if n == 1:\n        return 1\n    else:\n        a = Decimal(sqrt(24*n+1))/Decimal(3)\n        return (Decimal(3)**(Decimal(n)/Decimal(2))*a-Decimal(1)/Decimal(2))\n        \nprint(tetrahedral_number(1)"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # iterate a maximum of 100 times\n    for i in range(100):\n        # start with 1, and add 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12\n        number = n + 1\n        # to find the next number, iterate the current number, and subtract 1\n        for j in range(n):\n            number = number - 1\n        # when we find the number, we found the nth number\n        if number == 8:\n            return number\n    # if we can't find the nth number after 100 trials, return the number\n    return number\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    count = 0\n    while n!= count:\n        n = n*(3*n-1)/2\n        count += 1\n    return n\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        return\n    for i in range(n):\n        t = (1 + 24*n)//6\n        n = (4*n**2 + 1)**0.5\n    return t - 1\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    ans = 1\n    for i in range(n):\n        ans = 3 * ans + 1\n    return ans\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    ans = 0\n    if n <= 0:\n        return ans\n    while n > 0:\n        ans = ans + 3 * (n % 3) + 4\n        n = n // 3\n    return ans\n    \nprint(tetrahedral_number(5))\nprint(tetrahedral_number(1000))\nprint(tetrahedral_number(30))\nprint(tetrahedral_number(39))\nprint(tetrahedral_number(40))\nprint(tetrahedral_number(100))\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    x = 5\n    res = 0\n    while x <= n:\n        res = res + x * (x - 1) // 2\n        x += 1\n    return res\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = 3.1415926535\n    return 4/3*pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = 4/3*pi*r**3\n    return volume\n    "
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\n    #raise NotImplementedError\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = 3.14159\n    return (4/3)*pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*r**3\ndef volume_cylinder(r1,r2):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r1*r2\ndef volume_cone(r1,r2,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*(r1**2)*((r2+h)**2 - (r1+r2)**2)/2\ndef volume_cone(r1,r2,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (r1**2)*math.pi*((r2+h)**2 - (r1+r2)**2)/4\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # (1) get the radius of the sphere\n    # (2) calculate the volume\n    # (3) return the volume\n    radius = r\n    volume = 4/3 * math.pi * radius**3\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*(math.pi)*(r**3)\n    return volume\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ans = ord(strr)\n    for i in strr:\n        ans += ord(i)\n        ans = ans%26\n    return chr(ans)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum = sum + ord(i)\n    return(sum)\n    \nprint(get_Char(\"a\"))\nprint(get_Char(\"1\"))\nprint(get_Char(\"abc\"))\nprint(get_Char(\"ABC\"))\nprint(get_Char(\"$@#$%^&*\"))\nprint(get_Char(\"1337\"))\nprint(get_Char(\"$@#$%^&*\"))\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    return ord(strr) % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return int(strr,2)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return ord(strr[0]) + (ord(strr[1]) - ord('a') + 1)\n    \n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    count = 0\n    chr_arr = []\n    for i in range(len(strr)):\n        chr_arr.append(ord(strr[i])+count)\n        count = chr_arr[i]%26\n    return chr_arr\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    n = len(strr)\n    asc = 0\n    for i in strr:\n        asc += ord(i)\n    return asc % 26\ndef get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    n = len(strr)\n    asc = 0\n    for i in strr:\n        asc += ord(i)\n    return asc % 26"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    from operator import xor\n    if not isinstance(strr, str) :\n        raise ValueError(\"Input should be string\")\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ = 0\n    for i in strr:\n        sum_ += ord(i)\n    return sum_ % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    if(len(strr)>0):\n        a = ord(strr[0])\n        a += ord(strr[0])\n        for i in range(1,len(strr)):\n            a = a + ord(strr[i])\n        print(chr(a%26+97),end=\"\")\n    else:\n        print(\"null\")\ndef get_Space(strr):  \n    '''\n    Write a python function to find the number of spaces in a given string.\n    '''\n    if(len(strr)>0):\n        c = 0\n        for i in range(0,len(strr)):\n            if(strr[i]==\" \"):\n                c += 1\n        print(c)\n    else:\n        print(\"null\")\ndef get_Alpha_Num(strr):  \n    '''\n    Write a python function to find the number of characters having alphabets, numbers and special symbols in a given string.\n    '''\n    \n    c = 0\n    for i in range(0,len(strr)):\n        if(strr[i].isalpha()==True):\n            c += 1\n        elif(strr[i].isnumeric()==True):\n            c += 1\n        else:\n            c += 1\n    print(c)\ndef get_Alpha_Num_Spaces(strr):  \n    '''\n    Write a python function to find the number of characters having alphabets, numbers and special symbols in a given string and also the number of spaces in a given string.\n    '''\n    \n    c = 0\n    d = 0\n    for i in range(0,len(strr)):\n        if(strr[i].isalpha()==True):\n            c += 1\n        elif(strr[i].isnumeric()==True):\n            c += 1\n        else:\n            c += 1\n        if(strr[i]==\" \"):\n            d += 1\n    print(c,d)\ndef get_Alpha_Num_Special(strr):  \n    '''\n    Write a python function to find the number of characters having alphabets, numbers and special symbols in a given string and also the number of special symbols in a given string.\n    '''\n    \n    c = 0\n    d = 0\n    for i in range(0,len(strr)):\n        if(strr[i].isalpha()==True):\n            c += 1\n        elif(strr[i].isnumeric()==True):\n            c += 1\n        else:\n            c += 1\n        if(strr[i]==\"#\"):\n            d += 1\n    print(c,d)\ndef get_Min_Max_Num(strr):  \n    '''\n    Write a python function to find the minimum number and maximum number of characters in a given string.\n    '''\n    \n    l1 = []\n    l2 = []\n    for i in range(0,len(strr)):\n        l1.append(strr[i])\n    l2 = sorted(l1)\n    print(l2[0],l2[-1])\ndef get_Min_Max_Digit(strr):  \n    '''\n    Write a python function to find the minimum number and maximum number of digits in a given string.\n    '''\n    \n    l = []\n    for i in range(0,len(strr)):\n        l.append(strr[i])\n    l1 = sorted(l)\n    print(l1[0],l1[-1])\ndef get_Min_Max_Alpha(strr):  \n    '''\n    Write a python function to find the minimum number and maximum number of characters in a given string.\n    '''\n    \n    l1 = []\n    for i in range(0,len(strr)):\n        l1.append(strr[i])\n    l1 = sorted(l1)\n    print(l1[0],l1[-1])\ndef get_Min_Max_Special(strr):  \n    '''\n    Write a python function to find the minimum number and maximum number of characters in a given string.\n    '''\n    \n    l1 = []\n    for i in range(0,len(strr)):\n        l1.append(strr[i])\n    l1 = sorted(l1)\n    print(l1[0],l1[-1])\ndef get_Min_Max_Alpha_Digit(strr):  \n    '''\n    Write a python function to find the minimum number and maximum number of characters in a given string.\n    '''\n    \n    l1 = []\n    for i in range(0,len(strr)):\n        l1.append(strr[i])\n    l1 = sorted(l1)\n    l2 = []\n    for i in range(0,len(l1)):\n        l2.append(l1[i])\n    print(l2[0],l2[-1])\ndef get_Min_Max_Alpha_Digit_Special(strr):  \n    '''\n    Write a python function to find the minimum number and maximum number of characters in a given string.\n    '''\n    \n    l1 = []\n    for i in range(0,len(strr)):\n        l1.append(strr[i])\n    l1 = sorted(l1)\n    l2 = []\n    for i in range(0,len(l1)):\n        l2.append(l1[i])\n    print(l2[0],l2[-1])\ndef get_Min_Max_Alpha_Digit_Special_Digit(strr):  \n    '''\n    Write a python function to find the minimum number and maximum number of characters in a given string.\n    '''\n    \n    l1 = []\n    for i in range(0,len(strr)):\n        l1.append(strr[i])\n    l1 = sorted(l1)\n    l2 = []\n    for i in range(0,len(l1)):\n        l2.append(l1[i])\n    print(l2[0],l2[-1])\ndef get_Min_Max_Alpha_Digit_Special_Digit_Alpha(strr):  \n    '''\n    Write a python function to find the minimum number and maximum number of characters in a given string.\n    '''\n    \n    l1 = []\n    for i in range(0,len(strr)):\n        l1.append(strr[i])\n    l1 = sorted(l1)\n    l2 = []\n    for i in range(0,len(l1)):\n        l2.append(l1[i])\n    print(l2[0],l2[-1])\ndef get_Sum_Char(strr):  \n    '''\n    Write a python function to find the sum of the ASCII values of all the characters in a given string.\n    '''\n    \n    if(len(strr)>0):\n        a = 0\n        for i in range(0,len(strr)):\n            a = a + ord(strr[i])\n        print(a)\n    else:\n        print(\"null\")\ndef get_Sum_Digit(strr):  \n    '''\n    Write a python function to find the sum of the ASCII values of all the characters in a given string.\n    '''\n    \n    if(len(strr)>0):\n        a = 0\n        for i in range(0,len(strr)):\n            if(strr[i].isdigit()==True):\n                a = a + ord(strr[i])\n        print(a)\n    else:\n        print(\"null\")\ndef get_Sum_Alpha(strr):  \n    '''\n    Write a python function to find the sum of the ASCII values of all the characters in a given string.\n    '''\n    \n    if(len(strr)>0):\n        a = 0\n        for i in range(0,len(strr)):\n            if(strr[i].isalpha()==True):\n                a = a + ord(strr[i])\n        print(a)\n    else:\n        print(\"null\")\ndef get_Sum_Alpha_Digit(strr):  \n    '''\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    #initalize\n    sequence = [0, 1]\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    l = [0, 1] \n    if n <= 0: \n        return None \n    elif n == 1: \n        return 1\n    else: \n        for i in range(2, n + 1): \n            l.append(sum(l[i - 2:i]) % 10) \n    return l[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    n -= 1\n    if n == 0:\n        return n\n    else:\n        return n % 3 + 1\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    p, q, x = 1, 1, 2\n    while n:\n        x = p + q\n        p, q = q, x\n        n -= 1\n    return x\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 3\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    return n * sequence(n - 1)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1: \n        return 1 \n    else: \n        return n * sequence(n-1)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sphere_surface_area = 4 * math.pi * math.pow(r, 2)\n    return sphere_surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * (r**2)\n    return area\n    \ndef volume_cylinder(h, r):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    area = math.pi * (h**2) * r\n    volume = area * h\n    return volume\n    \ndef volume_cone(h, r):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * (h**2) * (r**2)\n    volume = area * h\n    return volume\n    \ndef volume_cone_pyramid(h, r):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * (h**2) * (r**2)\n    volume = area * h\n    return volume\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    area = 4 * math.pi * (r**3)\n    volume = area * (4/3)\n    return volume\n    \ndef surface_area_pyramid(b, h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    area = 2 * (b * h) + 2 * (b + h) * math.sqrt(2)\n    return area\n    \ndef surface_area_pyramid_formula(b, h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    area = (math.sqrt(3) * (b**2)) + 2 * b * h\n    return area\n    \ndef volume_pyramid(b, h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    area = math.sqrt(3) * b * h + b * (h**2)\n    volume = area * (4/3)\n    return volume\n    \ndef surface_area_sphere_pyramid(r):\n    '''\n    Write a function to find the surface area of a pyramid with a sphere.\n    '''\n    area = math.pi * (r**2)\n    return area\n    \ndef surface_area_sphere_pyramid_formula(r):\n    '''\n    Write a function to find the surface area of a pyramid with a sphere.\n    '''\n    area = math.pi * (r**2)\n    return area\n    \ndef volume_sphere_pyramid(r):\n    '''\n    Write a function to find the volume of a pyramid with a sphere.\n    '''\n    area = math.pi * (r**3)\n    volume = area * (4/3)\n    return volume\n    \ndef volume_pyramid_sphere_formula(b, h):\n    '''\n    Write a function to find the volume of a pyramid with a sphere.\n    '''\n    area = math.sqrt(3) * (b**2) * h + math.sqrt(3) * (b**2) * math.sqrt(2) * h + math.sqrt(3) * (b**2) * b\n    volume = area * (4/3)\n    return volume\n    \ndef volume_sphere_cone_pyramid(r):\n    '''\n    Write a function to find the volume of a sphere and cone pyramid.\n    '''\n    area = math.pi * (r**2)\n    volume = area * (4/3)\n    return volume\n    \ndef surface_area_sphere_cone_pyramid(r):\n    '''\n    Write a function to find the surface area of a sphere and cone pyramid.\n    '''\n    area = 4 * math.pi * (r**2)\n    return area\n    \ndef volume_cone_pyramid_sphere_formula(b, h):\n    '''\n    Write a function to find the volume of a cone and pyramid with a sphere.\n    '''\n    area = math.sqrt(3) * b * h + math.sqrt(3) * b * math.sqrt(2) * h\n    volume = area * (4/3)\n    return volume\n    \ndef surface_area_cone_pyramid_sphere_formula(h, b, r):\n    '''\n    Write a function to find the surface area of a cone and pyramid with a sphere.\n    '''\n    area = math.sqrt(3) * h + math.sqrt(3) * (h**2) + 2 * h * math.sqrt(3) * (b**2)\n    return area\n    \ndef volume_cone_pyramid_sphere_formula(h, b, r):\n    '''\n    Write a function to find the volume of a cone and pyramid with a sphere.\n    '''\n    area = math.sqrt(3) * h + math.sqrt(3) * (h**2) + 2 * h * math.sqrt(3) * (b**2)\n    volume = area * (4/3)\n    return volume\n    \ndef volume_cone_pyramid_formula(r, h):\n    '''\n    Write a function to find the volume of a cone and pyramid.\n    '''\n    area = math.pi * r**2 + math.pi * r**2 * (math.sqrt(2) * h)\n    volume = area * (4/3)\n    return volume\n    \ndef volume_pyramid_cone_formula(r, h):\n    '''\n    Write a function to find the volume of a pyramid and cone.\n    '''\n    area = math.pi * r**3 + math.pi * r**3 * (math.sqrt(2) * h)\n    volume = area * (4/3)\n    return volume\n    \ndef volume_cone_pyramid(h, r):\n    '''\n    Write a function to find the volume of a cone and pyramid.\n    '''\n    area = math.pi * r**2 + math.pi * r**2 * (math.sqrt(2) * h)\n    volume = area * (4/3)\n    return volume\n    \ndef surface_area_cone(r):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    area = math.pi * (r**2)\n    return area\n    \ndef surface_area_cone_formula(r):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    area = math.pi * (r**2) + math.pi * (r**2) * math.sqrt(2)\n    return area\n    \ndef volume_cone(r):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * (r**3)\n    volume = area * (4/3)\n    return volume\n    \ndef surface_area_pyramid(h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    area = 2 * (h**2)\n    return area\n    \ndef surface_area_pyramid_formula(h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    area = 2 * (h**2) + math.sqrt(2) * h * math.sqrt(3)\n    return area\n    \ndef volume_pyramid(h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    area = (2 * math.sqrt(2) * h) + 2 * math.sqrt(2) * h * math.sqrt(3)\n    volume = area * (4/3)\n    return volume\n    \ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4 * math.pi * (r**2))\n    return area\n    \ndef surface_area_sphere_formula(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4 * math.pi * (r**2)) - 4 * math.pi * (r**2) * math.sqrt(2)\n    return area\n    \ndef volume_sphere(r):\n    '''\n    Write "
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    surface_area = 4 * pi * r * r\n    print(\"Sphere: \",surface_area)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    \n    \n    def sphere_area(r):\n        '''\n        Calculates the surface area of a sphere given the radius.\n        '''\n        area = (4/3)*math.pi*r**3\n        return area\n    \n    def cylinder_area(r,h):\n        '''\n        Calculates the surface area of a cylinder given the radius and height.\n        '''\n        area = 2*math.pi*r*h\n        return area\n    \n    def cone_area(r,h):\n        '''\n        Calculates the surface area of a cone given the radius and height.\n        '''\n        area = 1/3*math.pi*r*h\n        return area\n    \n    def cone_area_diag(r,h):\n        '''\n        Calculates the surface area of a cone given the radius and height.\n        '''\n        area = 1/3*math.pi*r*h**2\n        return area\n    \n    def pyramid_area(r,h):\n        '''\n        Calculates the surface area of a pyramid given the radius and height.\n        '''\n        area = math.pi*r**2*h\n        return area\n    \n    def pyramid_area_diag(r,h):\n        '''\n        Calculates the surface area of a pyramid given the radius and height.\n        '''\n        area = math.pi*r**2*h**2/3\n        return area\n    \n    def cone_diag(r,h):\n        '''\n        Calculates the surface area of a cone given the radius and height.\n        '''\n        area = 2*math.pi*r*(1/2)*h\n        return area\n    \n    if r >= 0 and r!= 0:\n        if r < 1:\n            area = r*r*r*math.pi\n        else:\n            area = r*r*math.pi\n        return area\n    else:\n        return 'Numeric input error'\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\ndef print_sphere_info(r):\n    '''\n    Write a function that prints information about a sphere.\n    '''\n    print(f'The surface area of the sphere is {surfacearea_sphere(r)}')\n    print(f'The volume of the sphere is {4/3 * math.pi * (r**3)}')\ndef volume_sphere(r):\n    '''\n    Write a function that calculates the volume of a sphere.\n    '''\n    return 4/3 * math.pi * (r**3)\ndef print_sphere_info(r):\n    '''\n    Write a function that prints information about a sphere.\n    '''\n    print(f'The surface area of the sphere is {surfacearea_sphere(r)}')\n    print(f'The volume of the sphere is {volume_sphere(r)}')\ndef print_sphere_info(r):\n    '''\n    Write a function that prints information about a sphere.\n    '''\n    print(f'The surface area of the sphere is {surfacearea_sphere(r)}')\n    print(f'The volume of the sphere is {volume_sphere(r)}')\ndef surfacearea_cube(l):\n    '''\n    Write a function that calculates the surface area of a cube.\n    '''\n    return 6 * l**2\ndef print_cube_info(l):\n    '''\n    Write a function that prints information about a cube.\n    '''\n    print(f'The surface area of the cube is {surfacearea_cube(l)}')\n    print(f'The volume of the cube is {6 * l**2}')\ndef volume_cube(l):\n    '''\n    Write a function that calculates the volume of a cube.\n    '''\n    return 6 * l**2\ndef print_cube_info(l):\n    '''\n    Write a function that prints information about a cube.\n    '''\n    print(f'The surface area of the cube is {surfacearea_cube(l)}')\n    print(f'The volume of the cube is {volume_cube(l)}')\ndef surfacearea_pyramid(l1, h):\n    '''\n    Write a function that calculates the surface area of a pyramid.\n    '''\n    return 2 * (l1 * h) + 2 * (l1**2)\ndef print_pyramid_info(l1, h):\n    '''\n    Write a function that prints information about a pyramid.\n    '''\n    print(f'The surface area of the pyramid is {surfacearea_pyramid(l1,h)}')\n    print(f'The volume of the pyramid is {2 * (l1 * h) + 2 * (l1**2)}')\ndef volume_pyramid(l1, h):\n    '''\n    Write a function that calculates the volume of a pyramid.\n    '''\n    return 2 * (l1 * h) + 2 * (l1**2)\ndef print_pyramid_info(l1, h):\n    '''\n    Write a function that prints information about a pyramid.\n    '''\n    print(f'The surface area of the pyramid is {surfacearea_pyramid(l1,h)}')\n    print(f'The volume of the pyramid is {volume_pyramid(l1,h)}')\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function that calculates the surface area of a cylinder.\n    '''\n    return 2 * math.pi * (r**2) + 2 * math.pi * (r * h)\ndef print_cylinder_info(r, h):\n    '''\n    Write a function that prints information about a cylinder.\n    '''\n    print(f'The surface area of the cylinder is {surfacearea_cylinder(r,h)}')\n    print(f'The volume of the cylinder is {2 * math.pi * (r**2) + 2 * math.pi * (r * h)}')\ndef volume_cylinder(r, h):\n    '''\n    Write a function that calculates the volume of a cylinder.\n    '''\n    return 2 * math.pi * (r**2) + 2 * math.pi * (r * h)\ndef print_cylinder_info(r, h):\n    '''\n    Write a function that prints information about a cylinder.\n    '''\n    print(f'The surface area of the cylinder is {surfacearea_cylinder(r,h)}')\n    print(f'The volume of the cylinder is {volume_cylinder(r,h)}')\ndef surfacearea_cone(r1, r2, h):\n    '''\n    Write a function that calculates the surface area of a cone.\n    '''\n    return math.pi * (r1**2) + math.pi * (r2**2) + 2 * math.pi * (r1 * r2) + (r1 + r2) * math.sin(h)\ndef print_cone_info(r1, r2, h):\n    '''\n    Write a function that prints information about a cone.\n    '''\n    print(f'The surface area of the cone is {surfacearea_cone(r1, r2, h)}')\n    print(f'The volume of the cone is {(math.pi * (r1**2)) + (math.pi * (r2**2)) + (2 * math.pi * (r1 * r2)) + (r1 + r2) * math.sin(h)}')\ndef volume_cone(r1, r2, h):\n    '''\n    Write a function that calculates the volume of a cone.\n    '''\n    return ((math.pi * (r1**2)) + (math.pi * (r2**2)) + (2 * math.pi * (r1 * r2)) + (r1 + r2) * math.sin(h))\ndef print_cone_info(r1, r2, h):\n    '''\n    Write a function that prints information about a cone.\n    '''\n    print(f'The surface area of the cone is {surfacearea_cone(r1, r2, h)}')\n    print(f'The volume of the cone is {(volume_cone(r1, r2, h))}')\ndef surfacearea_right_triangle(b, h):\n    '''\n    Write a function that calculates the surface area of a right triangle.\n    '''\n    return 0.5 * b * h\ndef print_right_triangle_info(b, h):\n    '''\n    Write a function that prints information about a right triangle.\n    '''\n    print(f'The surface area of the right triangle is {surfacearea_right_triangle(b, h)}')\ndef volume_right_triangle(b, h):\n    '''\n    Write a function that calculates the volume of a right triangle.\n    '''\n    return 0.5 * b * h\ndef print_right_triangle_info(b, h):\n    '''\n    Write a function that prints information about a right triangle.\n    '''\n    print(f'The surface area of the right triangle is {surfacearea_right_triangle(b, h)}')\ndef surfacearea_ellipse(a, b):\n    '''\n    Write a function that calculates the surface area of an ellipse.\n    '''\n    return math.pi * (a * b)\ndef print_ellipse_info(a, b):\n    '''\n    Write a function that prints information about an ellipse.\n    '''\n    print(f'The surface area of the ellipse is {surfacearea_ellipse(a,b)}')\ndef volume_ellipse(a, b):\n    '''\n    Write a function that calculates the volume of an ellipse.\n    '''\n    return math.pi * (a * b) / 3\ndef print_ellipse_info(a, b):\n    '''\n    Write a function that prints information about an ellipse.\n    '''\n    print(f'The surface area of the ellipse is {surfacearea_ellipse(a,b)}')\ndef surfacearea_parabola(a):\n    '''\n    Write a function that calculates the surface area of a parabola.\n    '''\n    return math.pi * (a**2)\ndef print_parabola_info(a):\n    '''\n    Write a function that prints information about a parabol"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\ndef volume_cuboid(l, w, h):\n    '''\n    Write a function to calculate the volume of a cuboid.\n    '''\n    return l*w*h\ndef circumference_of_a_circle(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * (r**2)\ndef circumference_of_a_triangle(a, b, c):\n    '''\n    Write a function to find the circumference of a triangle.\n    '''\n    return a+b+c\ndef area_of_a_triangle(a, b, c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return 0.5*(a+b+c)\ndef area_of_a_square(l):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return l*l\ndef perimeter_of_a_square(l):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    return 4*l\ndef area_of_a_right_triangle(a, b, c):\n    '''\n    Write a function to find the area of a right triangle.\n    '''\n    return 0.5*(a+b)*(a+b-c)\ndef area_of_a_right_triangle_using_formula(a, b, c):\n    '''\n    Write a function to find the area of a right triangle.\n    '''\n    return (a+b)*(a+b-c)/2\ndef area_of_a_rectangle(a, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return a*b\ndef area_of_a_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*(r**2)\ndef area_of_a_ellipse(a, b):\n    '''\n    Write a function to find the area of an ellipse.\n    '''\n    return math.pi*a*b\ndef area_of_a_trapezoid(a, h, b):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    return (a+b)*h/2\ndef area_of_a_trapezoid_using_formula(a, h, b):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    return a*h/2 + b*h/2\ndef area_of_a_parabola(l, h):\n    '''\n    Write a function to find the area of a parabola.\n    '''\n    return (l**2)/2 * h\ndef area_of_a_parabola_using_formula(l, h):\n    '''\n    Write a function to find the area of a parabola.\n    '''\n    return l**2/(2*h)\ndef surface_area_of_a_cube(l, w, h):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6*(l*w+w*h+h*l)\ndef surface_area_of_a_cube_using_formula(l, w, h):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 2*(l*w+w*h+h*l)\ndef surface_area_of_a_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\ndef volume_of_a_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*(r**3)\ndef volume_of_a_cylinder(h, r):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (math.pi*h*r**2)\ndef volume_of_a_cylinder_using_formula(h, r):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (1/3*math.pi*(h**2)*r**2)\ndef surface_area_of_a_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\ndef surface_area_of_a_sphere_using_formula(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\ndef surface_area_of_a_cylinder(h, r):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*(r**2)*(h)\ndef surface_area_of_a_cylinder_using_formula(h, r):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*(r**2)*(h)\ndef volume_of_a_cube(l, w, h):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (l*w*h)\ndef volume_of_a_cube_using_formula(l, w, h):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return (l*w*h)\ndef surface_area_of_a_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return (math.pi*r**2)*(1+(math.sin(math.pi/h)))\ndef surface_area_of_a_cone_using_formula(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return (math.pi*r**2)*(1+(math.sin(math.pi/h)))\ndef surface_area_of_a_cylinder(h, r):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (2*math.pi*(r**2)*h)\ndef surface_area_of_a_cylinder_using_formula(h, r):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (2*math.pi*(r**2)*h)\ndef volume_of_a_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef volume_of_a_cone_using_formula(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3)*math.pi*(r**2)*h\ndef surface_area_of_a_cylinder(h, r):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (2*math.pi*(r**2)*h)\ndef surface_area_of_a_cylinder_using_formula(h, r):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (2*math.pi*(r**2)*h)\ndef volume_of_a_cylinder(h, r):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (math.pi*r**2*h)\ndef volume_of_a_cylinder_using_formula(h, r):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (math.pi*r**2*h)\ndef surface_area_of_a_triangle(a, b, c):"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def is_prime(n):\n        if n == 1:\n            return False\n        if n == 2 or n == 3:\n            return True\n        if n%6 == 1 or n%6 == 5:\n            return True\n        if n%6 == 0:\n            return False\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Your code here\n    for i in range(1,n+1):\n        if i%2 == 0:\n            print(i*(i+1)*0.5)\n        else:\n            print((i+0.5)*(i+1)*0.5)\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int((6*n**2 - 5*n + 1)/3)\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return hexagonal_number(int(round((6*n)**0.5)))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(round(math.sqrt(2*n + 1)))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # The formula is x_n = (n * (n*sqrt(3) - 1) / (2*sqrt(3)))^2\n    return (n * (n*math.sqrt(3) - 1) / (2*math.sqrt(3)))**2\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 7\n    elif n == 3:\n        return 13\n    else:\n        return centered_hexagonal_number(n - 1) + centered_hexagonal_number(n - 2)\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    k, n = 0, n\n    while True:\n        k += 1\n        x = k * (3 ** 0.5) - (k - 1)\n        y = k * 3 ** 0.5\n        if n == 0:\n            break\n        if x ** 2 + y ** 2 > n:\n            n -= 1\n            continue\n        n -= 1\n    return k - 1\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*((n*(n+1)//2) + 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_total = {**dict1, **dict2, **dict3}\n    return dict_total\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    keys = dict1.keys()\n    keys = keys | dict2.keys()\n    keys = keys | dict3.keys()\n    dict4 = {}\n    for key in keys:\n        dict4[key] = dict1[key] | dict2[key] | dict3[key]\n    return dict4\ndef merge_dictionaries_three_least_common(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    keys = dict1.keys()\n    keys = keys | dict2.keys()\n    keys = keys | dict3.keys()\n    dict4 = {}\n    for key in keys:\n        if dict1[key] == 1 or dict2[key] == 1 or dict3[key] == 1:\n            dict4[key] = 1\n        elif dict1[key] == 0 or dict2[key] == 0 or dict3[key] == 0:\n            dict4[key] = 0\n        else:\n            dict4[key] = 2\n    return dict4\ndef merge_dictionaries_three_least_common_two(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    keys = dict1.keys()\n    keys = keys | dict2.keys()\n    keys = keys | dict3.keys()\n    dict4 = {}\n    for key in keys:\n        if dict1[key] == 1 or dict2[key] == 1 or dict3[key] == 1:\n            dict4[key] = 1\n        elif dict1[key] == 0 or dict2[key] == 0 or dict3[key] == 0:\n            dict4[key] = 0\n        else:\n            dict4[key] = 2\n    return dict4\ndef merge_dictionaries_three_least_common_two_two(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    keys = dict1.keys()\n    keys = keys | dict2.keys()\n    keys = keys | dict3.keys()\n    dict4 = {}\n    for key in keys:\n        if dict1[key] == 1 or dict2[key] == 1 or dict3[key] == 1:\n            dict4[key] = 1\n        elif dict1[key] == 0 or dict2[key] == 0 or dict3[key] == 0:\n            dict4[key] = 0\n        else:\n            dict4[key] = 2\n    return dict4\ndef merge_dictionaries_three_least_common_two_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    keys = dict1.keys()\n    keys = keys | dict2.keys()\n    keys = keys | dict3.keys()\n    dict4 = {}\n    for key in keys:\n        if dict1[key] == 1 or dict2[key] == 1 or dict3[key] == 1:\n            dict4[key] = 1\n        elif dict1[key] == 0 or dict2[key] == 0 or dict3[key] == 0:\n            dict4[key] = 0\n        else:\n            dict4[key] = 2\n    return dict4\ndef merge_dictionaries_three_least_common_two_three_two(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    keys = dict1.keys()\n    keys = keys | dict2.keys()\n    keys = keys | dict3.keys()\n    dict4 = {}\n    for key in keys:\n        if dict1[key] == 1 or dict2[key] == 1 or dict3[key] == 1:\n            dict4[key] = 1\n        elif dict1[key] == 0 or dict2[key] == 0 or dict3[key] == 0:\n            dict4[key] = 0\n        else:\n            dict4[key] = 2\n    return dict4\ndef merge_dictionaries_three_least_common_two_three_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    keys = dict1.keys()\n    keys = keys | dict2.keys()\n    keys = keys | dict3.keys()\n    dict4 = {}\n    for key in keys:\n        if dict1[key] == 1 or dict2[key] == 1 or dict3[key] == 1:\n            dict4[key] = 1\n        elif dict1[key] == 0 or dict2[key] == 0 or dict3[key] == 0:\n            dict4[key] = 0\n        else:\n            dict4[key] = 2\n    return dict4\ndef merge_dictionaries_three_least_common_two_three_three_two(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    keys = dict1.keys()\n    keys = keys | dict2.keys()\n    keys = keys | dict3.keys()\n    dict4 = {}\n    for key in keys:\n        if dict1[key] == 1 or dict2[key] == 1 or dict3[key] == 1:\n            dict4[key] = 1\n        elif dict1[key] == 0 or dict2[key] == 0 or dict3[key] == 0:\n            dict4[key] = 0\n        else:\n            dict4[key] = 2\n    return dict4\ndef merge_dictionaries_three_least_common_two_three_three_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    keys = dict1.keys()\n    keys = keys | dict2.keys()\n    keys = keys | dict3.keys()\n    dict4 = {}\n    for key in keys:\n        if dict1[key] == 1 or dict2[key] == 1 or dict3[key] == 1:\n            dict4[key] = 1\n        elif dict1[key] == 0 or dict2[key] == 0 or dict3[key] == 0:\n            dict4[key] = 0\n        else:\n            dict4[key] = 2\n    return dict4\ndef merge_dictionaries_three_least_common_two_three_three_three_two(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    keys = dict1.keys()\n    keys = keys | dict2.keys()\n    keys = keys | dict3.keys()\n    dict4 = {}\n    for key in keys:\n        if dict1[key] == 1 or dict2[key] == 1 or dict3[key] == 1:\n            dict4[key] = 1\n        elif dict1[key] == 0 or dict2[key] == 0 or dict3[key] == 0:\n            dict4[key] = 0\n        else:\n            dict4[key] = 2\n    return dict4\ndef merge_dictionaries_three_least_common_two_three_three_three_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    keys = dict1.keys()\n    keys = keys | dict2.keys()\n    keys = keys | dict3.keys()\n    dict4 = {}\n    for key in keys:\n        if dict1[key] == 1 or dict2[key] == 1 or dict3[key] == 1:\n            dict4[key] = 1\n        elif dict1[key] == 0 or dict2[key] == 0 or dict3[key] == 0:\n            dict4[key] = 0\n        else:\n            dict4[key] = 2\n    return dict4\ndef merge_dictionaries_three_least_common_two_three_three_three_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries int"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    d = {}\n    for i in dict1,dict2,dict3:\n        for key, val in i.items():\n            d[key] = val\n    return d\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merged = dict1.copy()\n    dict_merged.update(dict2.copy())\n    dict_merged.update(dict3.copy())\n    return dict_merged\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {**dict1,**dict2,**dict3}\n    return dict4\n    \ndef merge_dictionaries_three_shallow_copy(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    Make sure to avoid changing any of the inputs.\n    '''\n    dict4 = dict1.copy()\n    dict4.update(dict2.copy())\n    dict4.update(dict3.copy())\n    return dict4\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.update(dict2)\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    ret = dict1.copy()\n    ret.update(dict2)\n    ret.update(dict3)\n    return ret\ndef merge_dictionaries_three_2(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    ret = dict1.copy()\n    ret.update(dict2)\n    ret.update(dict3)\n    for k,v in ret.items():\n        if type(v)!= dict:\n            ret[k] = v\n        else:\n            ret[k] = merge_dictionaries_three(v,{},{})\n    return ret\ndef merge_dictionaries_three_3(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    ret = dict1.copy()\n    ret.update(dict2)\n    ret.update(dict3)\n    for k,v in ret.items():\n        if type(v) == dict:\n            ret[k] = merge_dictionaries_three(v,{},{})\n        elif type(v) == list:\n            ret[k] = merge_dictionaries_three(v,{},{})\n    return ret\ndef remove_keys_three(dict1,keys):\n    '''\n    Write a function to remove the keys in the dictionary, provided as a parameter.\n    '''\n    if len(keys) == 1:\n        return {k:v for k,v in dict1.items() if k not in keys}\n    if len(keys) == 2:\n        return {k:v for k,v in dict1.items() if k not in keys}\n    if len(keys) == 3:\n        return {k:v for k,v in dict1.items() if k not in keys}\n    else:\n        return {k:v for k,v in dict1.items() if k not in keys}\ndef remove_keys_three_2(dict1,keys):\n    '''\n    Write a function to remove the keys in the dictionary, provided as a parameter.\n    '''\n    if len(keys) == 1:\n        return {k:v for k,v in dict1.items() if k not in keys}\n    if len(keys) == 2:\n        return {k:v for k,v in dict1.items() if k not in keys}\n    if len(keys) == 3:\n        return {k:v for k,v in dict1.items() if k not in keys}\n    else:\n        return {k:v for k,v in dict1.items() if k not in keys}\ndef remove_keys_three_3(dict1,keys):\n    '''\n    Write a function to remove the keys in the dictionary, provided as a parameter.\n    '''\n    if len(keys) == 1:\n        return {k:v for k,v in dict1.items() if k not in keys}\n    if len(keys) == 2:\n        return {k:v for k,v in dict1.items() if k not in keys}\n    if len(keys) == 3:\n        return {k:v for k,v in dict1.items() if k not in keys}\n    else:\n        return {k:v for k,v in dict1.items() if k not in keys}\ndef remove_keys_three_4(dict1,keys):\n    '''\n    Write a function to remove the keys in the dictionary, provided as a parameter.\n    '''\n    if len(keys) == 1:\n        return {k:v for k,v in dict1.items() if k not in keys}\n    if len(keys) == 2:\n        return {k:v for k,v in dict1.items() if k not in keys}\n    if len(keys) == 3:\n        return {k:v for k,v in dict1.items() if k not in keys}\n    else:\n        return {k:v for k,v in dict1.items() if k not in keys}\ndef remove_keys_three_5(dict1,keys):\n    '''\n    Write a function to remove the keys in the dictionary, provided as a parameter.\n    '''\n    if len(keys) == 1:\n        return {k:v for k,v in dict1.items() if k not in keys}\n    if len(keys) == 2:\n        return {k:v for k,v in dict1.items() if k not in keys}\n    if len(keys) == 3:\n        return {k:v for k,v in dict1.items() if k not in keys}\n    else:\n        return {k:v for k,v in dict1.items() if k not in keys}\ndef remove_keys_three_6(dict1,keys):\n    '''\n    Write a function to remove the keys in the dictionary, provided as a parameter.\n    '''\n    if len(keys) == 1:\n        return {k:v for k,v in dict1.items() if k not in keys}\n    if len(keys) == 2:\n        return {k:v for k,v in dict1.items() if k not in keys}\n    if len(keys) == 3:\n        return {k:v for k,v in dict1.items() if k not in keys}\n    else:\n        return {k:v for k,v in dict1.items() if k not in keys}\ndef remove_keys_three_7(dict1,keys):\n    '''\n    Write a function to remove the keys in the dictionary, provided as a parameter.\n    '''\n    if len(keys) == 1:\n        return {k:v for k,v in dict1.items() if k not in keys}\n    if len(keys) == 2:\n        return {k:v for k,v in dict1.items() if k not in keys}\n    if len(keys) == 3:\n        return {k:v for k,v in dict1.items() if k not in keys}\n    else:\n        return {k:v for k,v in dict1.items() if k not in keys}\ndef remove_keys_three_8(dict1,keys):\n    '''\n    Write a function to remove the keys in the dictionary, provided as a parameter.\n    '''\n    if len(keys) == 1:\n        return {k:v for k,v in dict1.items() if k not in keys}\n    if len(keys) == 2:\n        return {k:v for k,v in dict1.items() if k not in keys}\n    if len(keys) == 3:\n        return {k:v for k,v in dict1.items() if k not in keys}\n    else:\n        return {k:v for k,v in dict1.items() if k not in keys}\ndef remove_keys_three_9(dict1,keys):\n    '''\n    Write a function to remove the keys in the dictionary, provided as a parameter.\n    '''\n    if len(keys) == 1:\n        return {k:v for k,v in dict1.items() if k not in keys}\n    if len(keys) == 2:\n        return {k:v for k,v in dict1.items() if k not in keys}\n    if len(keys) == 3:\n        return {k:v for k,v in dict1.items() if k not in keys}\n    else:\n        return {k:v for k,v in dict1.items() if k not in keys}\ndef remove_keys_three_10(dict1,keys):\n    '''\n    Write a function to remove the keys in the dictionary, provided as a parameter.\n    '''\n    if len(keys) == 1:\n        return {k:v for k,v in dict1.items() if k not in keys}\n    if len(keys) == 2:\n        return {k:v for k,v in dict1.items() if k not in keys}\n    if len(keys) == 3:\n        return {k:v for k,v in dict1.items() if k not in keys}\n    else:\n        return {k:v for k,v in dict1.items() if k not in keys}\ndef remove_keys_three_11(dict1,keys):\n    '''\n    Write a functio"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merged = dict1.copy()\n    for k in dict2:\n        dict_merged[k] = dict1.get(k,0) + dict2.get(k,0)\n        dict_merged[k] += dict3.get(k,0)\n    return dict_merged\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = dict()\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = {}\n    for i in range(len(list1)):\n        if list1[i] in d:\n            d[list1[i]] += 1\n        else:\n            d[list1[i]] = 1\n    return d\n    \ndef max_freq(list1):\n    '''\n    Write a function to find the max frequency of the element in a list, returned as a dictionary.\n    '''\n    d = {}\n    for i in range(len(list1)):\n        if list1[i] in d:\n            d[list1[i]] += 1\n        else:\n            d[list1[i]] = 1\n    s = 0\n    for k in d:\n        if d[k] > s:\n            s = d[k]\n            ans = k\n    return ans, d[ans]\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for x in list1:\n        if x not in freq:\n            freq[x] = 1\n        else:\n            freq[x] += 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_dic = {}\n    for item in list1:\n        if item in count_dic:\n            count_dic[item] = count_dic[item]+1\n        else:\n            count_dic[item] = 1\n    return count_dic\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1={}\n    for i in range(len(list1)):\n        if(list1[i] not in dict1.keys()):\n            dict1[list1[i]]=1\n        else:\n            dict1[list1[i]]+=1\n    return dict1\ndef reverse_list(list1):\n    '''\n    Write a function to reverse the contents of a list.\n    '''\n    rev=[]\n    for i in range(len(list1)):\n        rev.append(list1[len(list1)-i-1])\n    return rev\ndef remove_duplicates(list1):\n    '''\n    Write a function to remove duplicates from the list.\n    '''\n    s=set(list1)\n    return list(s)\ndef string_count(input_string):\n    '''\n    Write a function that returns the count of the number of occurences of a substring in a string.\n    '''\n    return input_string.count('is')\ndef find_substring(input_string, sub_string):\n    '''\n    Write a function to get the index of the first occurrence of a substring in a string.\n    '''\n    start=0\n    for i in range(len(input_string)):\n        if(input_string[i:].find(sub_string)>=0):\n            return i\ndef find_substring_2(input_string, sub_string):\n    '''\n    Write a function to get the index of the last occurrence of a substring in a string.\n    '''\n    start=0\n    for i in range(len(input_string)):\n        if(input_string[i:].find(sub_string)>=0):\n            return i\ndef group_words(words):\n    '''\n    Write a function to get the groups of consecutive words from the input string.\n    '''\n    s=''\n    for i in range(len(words)):\n        s=s+words[i]+' '\n    return s.split()\ndef get_intersection_set(list1,list2):\n    '''\n    Write a function to return the intersection of two sets.\n    '''\n    list1.sort()\n    list2.sort()\n    i=j=0\n    new_list=[]\n    while(i<len(list1) and j<len(list2)):\n        if(list1[i]<list2[j]):\n            i+=1\n        elif(list1[i]>list2[j]):\n            j+=1\n        else:\n            new_list.append(list1[i])\n            i+=1\n            j+=1\n    return new_list\ndef get_intersection_list(list1,list2):\n    '''\n    Write a function to return the intersection of two lists.\n    '''\n    l=[]\n    for i in range(len(list1)):\n        if(list1[i] in list2):\n            l.append(list1[i])\n    return l\ndef get_subset(list1,list2):\n    '''\n    Write a function to get the subset of two lists.\n    '''\n    l=[]\n    for i in range(len(list1)):\n        if(list1[i] in list2):\n            l.append(list1[i])\n    return l\ndef get_common_set(list1,list2):\n    '''\n    Write a function to get the common elements of two sets.\n    '''\n    new_list=[]\n    for i in range(len(list1)):\n        if(list1[i] in list2):\n            new_list.append(list1[i])\n    return new_list\ndef get_common_list(list1,list2):\n    '''\n    Write a function to get the common elements of two lists.\n    '''\n    new_list=[]\n    for i in range(len(list1)):\n        if(list1[i] in list2):\n            new_list.append(list1[i])\n    return new_list\ndef find_triplets(nums):\n    '''\n    Write a function to find the triplets with given sum.\n    '''\n    new_list=[]\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            for k in range(j+1,len(nums)):\n                if(nums[i]+nums[j]+nums[k]==0):\n                    new_list.append((nums[i],nums[j],nums[k]))\n    return new_list\ndef find_triplets2(nums):\n    '''\n    Write a function to find the triplets with given sum.\n    '''\n    new_list=[]\n    nums.sort()\n    for i in range(len(nums)):\n        if(i>0 and nums[i]==nums[i-1]):\n            continue\n        left=i+1\n        right=len(nums)-1\n        while(left<right):\n            total=nums[i]+nums[left]+nums[right]\n            if(total==0):\n                new_list.append((nums[i],nums[left],nums[right]))\n                while(left<right and nums[left]==nums[left+1]):\n                    left+=1\n                while(left<right and nums[right]==nums[right-1]):\n                    right-=1\n                left+=1\n                right-=1\n            elif(total<0):\n                left+=1\n            else:\n                right-=1\n    return new_list\ndef find_triplets3(nums):\n    '''\n    Write a function to find the triplets with given sum.\n    '''\n    new_list=[]\n    nums.sort()\n    for i in range(len(nums)):\n        if(i>0 and nums[i]==nums[i-1]):\n            continue\n        left=i+1\n        right=len(nums)-1\n        while(left<right):\n            total=nums[i]+nums[left]+nums[right]\n            if(total==0):\n                new_list.append((nums[i],nums[left],nums[right]))\n                while(left<right and nums[left]==nums[left+1]):\n                    left+=1\n                while(left<right and nums[right]==nums[right-1]):\n                    right-=1\n                left+=1\n                right-=1\n            elif(total<0):\n                left+=1\n            else:\n                right-=1\n    return new_list\ndef min_jumps(nums):\n    '''\n    Write a function to get the minimum number of jumps to reach the end of a array from the start.\n    '''\n    left=right=nums[0]\n    count=0\n    if(left>right):\n        return 0\n    if(len(nums)==1):\n        return 1\n    while(right<len(nums)-1):\n        count+=1\n        left=right\n        right=min(nums[left+1],len(nums))\n    return count\ndef max_jumps(nums):\n    '''\n    Write a function to get the maximum number of jumps to reach the end of a array from the start.\n    '''\n    left=right=nums[0]\n    count=0\n    if(left>right):\n        return 0\n    if(len(nums)==1):\n        return 1\n    while(right<len(nums)-1):\n        count+=1\n        left=right\n        right=max(nums[left+1],len(nums))\n    return count\ndef first_common_char(s1, s2):\n    '''\n    Write a function to find the first common character between two strings.\n    '''\n    i=j=0\n    while(i<len(s1) and j<len(s2)):\n        if(s1[i]==s2[j]):\n            return s1[i]\n        i+=1\n        j+=1\n    return 'No Match'\ndef first"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        freq[item] = list1.count(item)\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = dict()\n    for i in list1:\n        d[i] = d.get(i,0) + 1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    \n    freq_dict = collections.Counter(list1)\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in range(len(list1)):\n        if list1[i] in freq:\n            freq[list1[i]] += 1\n        else:\n            freq[list1[i]] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency = {}\n    for i in list1:\n        if i in frequency:\n            frequency[i] += 1\n        else:\n            frequency[i] = 1\n    return frequency\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    \n    # your code goes here\n    lo, hi = 1, N\n    while lo <= hi:\n        mid = (lo + hi)//2\n        if mid == N:\n            return mid\n        if mid > N:\n            hi = mid - 1\n        else:\n            lo = mid + 1\n    return lo\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def closest_smaller_num(n):\n        for i in range(1, n):\n            if n - i > i:\n                return n - i\n    return closest_smaller_num(N)\n    \n    \ndef sum_pair(lst, k):\n    '''\n    Write a function to compute the sum of two integers in a list that satisfies the following condition.\n    If the sum is less than k, then the pair must be adjacent in the list.\n    Return the sum.\n    '''\n    # Base case\n    if lst is None or len(lst) <= 1:\n        return 0\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    \n    low = 1\n    high = N\n    \n    while low <= high:\n        mid = (low + high)//2\n        if mid * mid > N:\n            high = mid - 1\n        elif mid * mid < N:\n            low = mid + 1\n        else:\n            return mid\n    \n    return low - 1\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_number = 999999999999999999\n    for i in range(1, N+1):\n        if i < min_number:\n            min_number = i\n    return min_number\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def closest_num(N):\n        '''\n        Write a function to find the closest smaller number than n.\n        '''\n        num_list = []\n        for i in range(1, N+1):\n            num_list.append(i)\n        #print(\"The numbers list is:\")\n        #print(num_list)\n        a = min(num_list, key=lambda x: abs(x-N))\n        return a\n    return closest_num(N)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    ans = abs(N)\n    for i in range(1, N):\n        if abs(N-i) < abs(ans-i):\n            ans = i\n    return ans\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    assert N > 0, \"Input must be positive\"\n    if N > 1:\n        return closest_num(N // 2)\n    elif N == 1:\n        return 1\n    else:\n        return N\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    while N>=1:\n        if (N-1)%2 == 0:\n            N = N//2\n        else:\n            N = (N-1)/2\n        return N\n    \n    #another way to write this is:\n    '''\n    def closest_num(n):\n        return n//2 if n%2==0 else (n//2)-1\n    '''\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 0:\n        return None\n    if N <= 10:\n        return N\n    list_N = list(str(N))\n    list_N.reverse()\n    for i in range(len(list_N)):\n        if list_N[i] == '9':\n            return int(''.join(list_N[:i]))\n    return int(''.join(list_N[:]))\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 0:\n        return None\n    if N == 1:\n        return 0\n    # base case: if N is even, return N/2\n    if N % 2 == 0:\n        return N//2\n    # recursive case: if N is odd, return 1 smaller than the closest N//2\n    return 1 + closest_num(N - 1)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    a = len(list1[0])\n    for i in list1:\n        a = max(a, len(i))\n    return a\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = len(list1[0])\n    for i in range(1,len(list1)):\n        if len(list1[i]) > longest:\n            longest = len(list1[i])\n    return longest\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    count=0\n    for i in list1:\n        count += len(i)\n    return count\n    \n    \ndef len_max(list1):\n    '''\n    Write a python function to find the maximum length of the words in a string.\n    '''\n    for i in list1:\n        if len(i) > count:\n            count = len(i)\n    return count\n    \n    \ndef print_max(list1):\n    '''\n    Write a python function to print the elements of the list with maximum length.\n    '''\n    for i in list1:\n        if len(i) == count:\n            print(i)\n    return\n    \n    \ndef count_length(list1):\n    '''\n    Write a python function to count the elements of a list.\n    '''\n    for i in list1:\n        count += 1\n    return count\n    \n    \ndef print_upper(list1):\n    '''\n    Write a python function to print the elements of the list with uppercase letters.\n    '''\n    for i in list1:\n        if i.isupper():\n            print(i)\n    return\n    \n    \ndef count_capital(list1):\n    '''\n    Write a python function to count the elements of the list.\n    '''\n    count=0\n    for i in list1:\n        if i.isupper():\n            count += 1\n    return count\n    \n    \ndef max_length_sub(list1):\n    '''\n    Write a python function to find the element with maximum length.\n    '''\n    for i in list1:\n        if len(i) == count:\n            return i\n    return\n    \n    \ndef reverse_list(list1):\n    '''\n    Write a python function to reverse the elements of the list.\n    '''\n    for i in range(len(list1)-1,-1,-1):\n        print(list1[i])\n    return\n    \n    \ndef binary_search(list1,item):\n    '''\n    Write a python function to search an element in a list.\n    '''\n    l=0\n    u=len(list1)-1\n    while l<=u:\n        mid=(l+u)//2\n        if item == list1[mid]:\n            return True\n        elif item < list1[mid]:\n            u = mid - 1\n        else:\n            l = mid + 1\n    return False\n    \n    \ndef search_list(list1,item):\n    '''\n    Write a python function to search an element in a list.\n    '''\n    for i in range(0,len(list1)):\n        if list1[i] == item:\n            return i\n    return -1\n    \n    \ndef min_max(list1):\n    '''\n    Write a python function to find the min and max element in a list.\n    '''\n    min_value = list1[0]\n    max_value = list1[0]\n    for i in range(1,len(list1)):\n        if list1[i] < min_value:\n            min_value = list1[i]\n        elif list1[i] > max_value:\n            max_value = list1[i]\n    return min_value,max_value\n    \n    \ndef max_two(list1):\n    '''\n    Write a python function to find the max two elements in a list.\n    '''\n    max_value = list1[0]\n    max_index = 0\n    for i in range(1,len(list1)):\n        if list1[i] > max_value:\n            max_value = list1[i]\n            max_index = i\n    return max_value,max_index\n    \n    \ndef max_three(list1):\n    '''\n    Write a python function to find the max three elements in a list.\n    '''\n    max_value = list1[0]\n    max_index = 0\n    max_count = 0\n    for i in range(1,len(list1)):\n        if list1[i] > max_value:\n            max_value = list1[i]\n            max_index = i\n            max_count += 1\n        elif list1[i] == max_value and max_count < 3:\n            max_count += 1\n    return max_value,max_index,max_count\n    \n    \ndef max_four(list1):\n    '''\n    Write a python function to find the max four elements in a list.\n    '''\n    max_value = list1[0]\n    max_index = 0\n    max_count = 0\n    for i in range(1,len(list1)):\n        if list1[i] > max_value:\n            max_value = list1[i]\n            max_index = i\n            max_count += 1\n        elif list1[i] == max_value and max_count < 4:\n            max_count += 1\n    return max_value,max_index,max_count\n    \n    \ndef max_five(list1):\n    '''\n    Write a python function to find the max five elements in a list.\n    '''\n    max_value = list1[0]\n    max_index = 0\n    max_count = 0\n    for i in range(1,len(list1)):\n        if list1[i] > max_value:\n            max_value = list1[i]\n            max_index = i\n            max_count += 1\n        elif list1[i] == max_value and max_count < 5:\n            max_count += 1\n    return max_value,max_index,max_count\n    \n    \ndef max_six(list1):\n    '''\n    Write a python function to find the max six elements in a list.\n    '''\n    max_value = list1[0]\n    max_index = 0\n    max_count = 0\n    for i in range(1,len(list1)):\n        if list1[i] > max_value:\n            max_value = list1[i]\n            max_index = i\n            max_count += 1\n        elif list1[i] == max_value and max_count < 6:\n            max_count += 1\n    return max_value,max_index,max_count\n    \n    \ndef max_seven(list1):\n    '''\n    Write a python function to find the max seven elements in a list.\n    '''\n    max_value = list1[0]\n    max_index = 0\n    max_count = 0\n    for i in range(1,len(list1)):\n        if list1[i] > max_value:\n            max_value = list1[i]\n            max_index = i\n            max_count += 1\n        elif list1[i] == max_value and max_count < 7:\n            max_count += 1\n    return max_value,max_index,max_count\n    \n    \ndef max_eight(list1):\n    '''\n    Write a python function to find the max eight elements in a list.\n    '''\n    max_value = list1[0]\n    max_index = 0\n    max_count = 0\n    for i in range(1,len(list1)):\n        if list1[i] > max_value:\n            max_value = list1[i]\n            max_index = i\n            max_count += 1\n        elif list1[i] == max_value and max_count < 8:\n            max_count += 1\n    return max_value,max_index,max_count\n    \n    \ndef max_nine(list1):\n    '''\n    Write a python function to find the max nine elements in a list.\n    '''\n    max_value = list1[0]\n    max_index = 0\n    max_count = 0\n    for i in range(1,len(list1)):\n        if list1[i] > max_value:\n            max_value = list1[i]\n            max_index = i\n            max_count += 1\n        elif list1[i] == max_value and max_count < 9:\n            max_count += 1\n    return max_value,max_index,max_count\n    \n    \ndef max_ten(list1):\n    '''\n    Write a python functio"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    #print(max(map(len, list1)))\n    return max(map(len, list1))\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key=len)))\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    size = 0\n    for i in list1:\n        if len(i)>size:\n            size=len(i)\n    return size\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    x = {}\n    for i in list1:\n        if i not in x.keys():\n            x[i] = 1\n        else:\n            x[i] = x[i] + 1\n    x = sorted(x.items(),key = lambda x:x[1],reverse = True)\n    return x[0][1]\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for ele in list1:\n        if len(ele) > max_len:\n            max_len = len(ele)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return max(map(len,list1))\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    \n    # loop through the list\n    max_len = 0\n    for word in list1:\n        # count and save the length of each word\n        l = len(word)\n        # keep track of the largest length\n        if l > max_len:\n            max_len = l\n    return max_len\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # two pointer approach\n    # **********\n    # iterate through str1 and check if any substring in str1 is in the list.\n    # if it is, return true. else, return false.\n    for i in range(len(str1)):\n        start = 0\n        end = i\n        while end <= len(str1):\n            if str1[start:end] in sub_str:\n                return True\n            end += 1\n            start = end - len(sub_str)\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    if len(str1) < len(sub_str):\n        return False\n    \n    for i in range(len(str1) - len(sub_str) + 1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in value for value in str1)\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i:].startswith(sub_str):\n            return i\n    return -1\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if i in sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if (any(sub_str in s for s in str1)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Approach using dictionary\n    # res = 0\n    # d = {}\n    # for i in sub_str:\n    #     d[i] = d.get(i,0) + 1\n    # for i in str1:\n    #     if i in d:\n    #         res += 1\n    #     else:\n    #         continue\n    # return res\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    i = 0\n    index = 0\n    for char in str1:\n        if char == sub_str[i]:\n            i += 1\n            if i == len(sub_str):\n                index += 1\n                i = 0\n    return index\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in s for s in str1)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return (n % 2 == 0) and (n % 3 == 0)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 1 and (n % 2 == 0 or n % 3 == 0):\n        return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    elif n % 3 == 0:\n        return True\n    else:\n        while n % 2 == 0:\n            n = n // 2\n        while n % 3 == 0:\n            n = n // 3\n        return True if n == 1 else False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 2:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(1, n+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 0: \n        n = -n\n    if n < 100: \n        return False\n    if n % 10 == 0: \n        return False\n    if n % 2 == 0: \n        return False\n    if n % 3 == 0: \n        return False\n    if n % 5 == 0: \n        return False\n    if n % 7 == 0: \n        return False\n    if n % 11 == 0: \n        return False\n    if n % 13 == 0: \n        return False\n    if n % 17 == 0: \n        return False\n    if n % 19 == 0: \n        return False\n    if n % 23 == 0: \n        return False\n    if n % 29 == 0: \n        return False\n    if n % 31 == 0: \n        return False\n    if n % 37 == 0: \n        return False\n    if n % 41 == 0: \n        return False\n    if n % 47 == 0: \n        return False\n    if n % 53 == 0: \n        return False\n    if n % 59 == 0: \n        return False\n    if n % 61 == 0: \n        return False\n    if n % 67 == 0: \n        return False\n    if n % 71 == 0: \n        return False\n    if n % 73 == 0: \n        return False\n    if n % 79 == 0: \n        return False\n    if n % 83 == 0: \n        return False\n    if n % 89 == 0: \n        return False\n    if n % 97 == 0: \n        return False\n    if n % 101 == 0: \n        return False\n    if n % 103 == 0: \n        return False\n    if n % 107 == 0: \n        return False\n    if n % 109 == 0: \n        return False\n    if n % 113 == 0: \n        return False\n    if n % 127 == 0: \n        return False\n    if n % 131 == 0: \n        return False\n    if n % 137 == 0: \n        return False\n    if n % 139 == 0: \n        return False\n    if n % 149 == 0: \n        return False\n    if n % 151 == 0: \n        return False\n    if n % 157 == 0: \n        return False\n    if n % 163 == 0: \n        return False\n    if n % 167 == 0: \n        return False\n    if n % 173 == 0: \n        return False\n    if n % 179 == 0: \n        return False\n    if n % 181 == 0: \n        return False\n    if n % 191 == 0: \n        return False\n    if n % 193 == 0: \n        return False\n    if n % 197 == 0: \n        return False\n    if n % 199 == 0: \n        return False\n    if n % 211 == 0: \n        return False\n    if n % 223 == 0: \n        return False\n    if n % 227 == 0: \n        return False\n    if n % 229 == 0: \n        return False\n    if n % 233 == 0: \n        return False\n    if n % 239 == 0: \n        return False\n    if n % 241 == 0: \n        return False\n    if n % 251 == 0: \n        return False\n    if n % 257 == 0: \n        return False\n    if n % 263 == 0: \n        return False\n    if n % 269 == 0: \n        return False\n    if n % 271 == 0: \n        return False\n    if n % 277 == 0: \n        return False\n    if n % 281 == 0: \n        return False\n    if n % 283 == 0: \n        return False\n    if n % 293 == 0: \n        return False\n    if n % 307 == 0: \n        return False\n    if n % 311 == 0: \n        return False\n    if n % 313 == 0: \n        return False\n    if n % 317 == 0: \n        return False\n    if n % 319 == 0: \n        return False\n    if n % 323 == 0: \n        return False\n    if n % 329 == 0: \n        return False\n    if n % 331 == 0: \n        return False\n    if n % 337 == 0: \n        return False\n    if n % 341 == 0: \n        return False\n    if n % 347 == 0: \n        return False\n    if n % 349 == 0: \n        return False\n    if n % 353 == 0: \n        return False\n    if n % 359 == 0: \n        return False\n    if n % 367 == 0: \n        return False\n    if n % 373 == 0: \n        return False\n    if n % 379 == 0: \n        return False\n    if n % 383 == 0: \n        return False\n    if n % 389 == 0: \n        return False\n    if n % 397 == 0: \n        return False\n    if n % 401 == 0: \n        return False\n    if n % 409 == 0: \n        return False\n    if n % 419 == 0: \n        return False\n    if n % 421 == 0: \n        return False\n    if n % 427 == 0: \n        return False\n    if n % 433 == 0: \n        return False\n    if n % 439 == 0: \n        return False\n    if n % 441 == 0: \n        return False\n    if n % 443 == 0: \n        return False\n    if n % 449 == 0: \n        return False\n    if n % 457 == 0: \n        return False\n    if n % 463 == 0: \n        return False\n    if n % 479 == 0: \n        return False\n    if n % 487 == 0: \n        return False\n    if n % 491 == 0: \n        return False\n    if n % 499 == 0: \n        return False\n    if n % 503 == 0: \n        return False\n    if n % 509 == 0: \n        return False\n    if n % 521 == 0: \n        return False\n    if n % 527 == 0: \n        return False\n    if n % 533 == 0: \n        return False\n    if n % 541 == 0: \n        return False\n    if n % 547 == 0: \n        return False\n    if n % 553 == 0: \n        return False\n    if n % 559 == 0: \n        return False\n    if n % 561 == 0: \n        return False\n    if n % 563 == 0: \n        return False\n    if n % 567 == 0: \n        return False\n    if n % 569 == 0: \n        return False\n    if n % 571 == 0: \n        return False\n    if n % 577 == 0: \n        return False\n    if n % 587 == 0: \n        return False\n    if n % 593 == 0: \n        return False\n    if n % 599 == 0: \n        return False\n    if n % 601 == 0: \n        return False\n    if n % 607 == 0: \n        return False\n    if n % 613 == 0: \n        return False\n    if n % 617 == 0: \n        return False\n    if n % 621 == 0: \n        return False\n    if n % 627 == 0: \n        return False\n    if n % 629 == 0: \n        return False\n    if n % 633 == 0: \n        return False\n    if n % 647 == 0: \n        return False\n    if n % 653 == 0: \n        return False\n    if n % 659 == 0: \n        return False\n    if n % 667 == 0: \n        return False\n    if n % 673 == 0: \n        return False\n    if n % 677 == 0: \n        return False\n    if n % 683 == 0: \n        return False\n    if n % 691 == 0: \n        return False\n    if n % 701 == 0: \n        return False\n    if n % 709 == 0: \n        return False\n    if n % 719 == 0: \n        return False\n    if n % 729 == 0: \n        return False\n    if n % 741 == 0: \n        return False\n    if n % 743 == 0: \n        return False\n    if n % 751 == 0:"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1: return True\n    return is_undulating(n - 2) + is_undulating(n - 1) + is_undulating(n - 3)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n < 0):\n        n = -n\n    s = sum_of_factors(n)\n    if (s < n):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check whether the number is prime\n    if n == 2:\n        return True\n    if n == 0:\n        return False\n    if n == 1:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def is_prime(n):\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    def is_undulating_fun(n):\n        if n % 2 == 0 or n % 3 == 0 or n % 5 == 0 or n % 7 == 0 or n % 11 == 0 or n % 13 == 0 or n % 17 == 0 or n % 19 == 0 or n % 23 == 0 or n % 29 == 0:\n            return True\n        return False\n    if is_prime(n) and is_undulating_fun(n):\n        return True\n    return False\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    try:\n        if not (isinstance(a, int) and isinstance(b, int)):\n            raise Exception(\"a and b must be integers.\")\n        if b<=0:\n            raise Exception(\"b must be a positive integer.\")\n        if not (0<=a<=99):\n            raise Exception(\"a must be between 0 and 99.\")\n        return (a**b)\n    except Exception as error:\n        print(error)\n    \nprint(power(3,3))\nprint(power(2,0))\nprint(power(1,-1))\nprint(power(100,2))\nprint(power(90,3))\nprint(power(9,3))\nprint(power(1,0))\nprint(power(10,0))\nprint(power(5,3))\nprint(power(5,3))\nprint(power(5,4))\nprint(power(5,4))\nprint(power(5,5))\nprint(power(5,5))\nprint(power(5,6))\nprint(power(5,6))\nprint(power(5,7))\nprint(power(5,7))\nprint(power(5,8))\nprint(power(5,8))\nprint(power(5,9))\nprint(power(5,9))\nprint(power(5,10))\nprint(power(5,10))\nprint(power(5,11))\nprint(power(5,11))\nprint(power(5,12))\nprint(power(5,12))\nprint(power(5,13))\nprint(power(5,13))\nprint(power(5,14))\nprint(power(5,14))\nprint(power(5,15))\nprint(power(5,15))\nprint(power(5,16))\nprint(power(5,16))\nprint(power(5,17))\nprint(power(5,17))\nprint(power(5,18))\nprint(power(5,18))\nprint(power(5,19))\nprint(power(5,19))\nprint(power(5,20))\nprint(power(5,20))\nprint(power(5,21))\nprint(power(5,21))\nprint(power(5,22))\nprint(power(5,22))\nprint(power(5,23))\nprint(power(5,23))\nprint(power(5,24))\nprint(power(5,24))\nprint(power(5,25))\nprint(power(5,25))\nprint(power(5,26))\nprint(power(5,26))\nprint(power(5,27))\nprint(power(5,27))\nprint(power(5,28))\nprint(power(5,28))\nprint(power(5,29))\nprint(power(5,29))\nprint(power(5,30))\nprint(power(5,30))\nprint(power(5,31))\nprint(power(5,31))\nprint(power(5,32))\nprint(power(5,32))\nprint(power(5,33))\nprint(power(5,33))\nprint(power(5,34))\nprint(power(5,34))\nprint(power(5,35))\nprint(power(5,35))\nprint(power(5,36))\nprint(power(5,36))\nprint(power(5,37))\nprint(power(5,37))\nprint(power(5,38))\nprint(power(5,38))\nprint(power(5,39))\nprint(power(5,39))\nprint(power(5,40))\nprint(power(5,40))\nprint(power(5,41))\nprint(power(5,41))\nprint(power(5,42))\nprint(power(5,42))\nprint(power(5,43))\nprint(power(5,43))\nprint(power(5,44))\nprint(power(5,44))\nprint(power(5,45))\nprint(power(5,45))\nprint(power(5,46))\nprint(power(5,46))\nprint(power(5,47))\nprint(power(5,47))\nprint(power(5,48))\nprint(power(5,48))\nprint(power(5,49))\nprint(power(5,49))\nprint(power(5,50))\nprint(power(5,50))\nprint(power(5,51))\nprint(power(5,51))\nprint(power(5,52))\nprint(power(5,52))\nprint(power(5,53))\nprint(power(5,53))\nprint(power(5,54))\nprint(power(5,54))\nprint(power(5,55))\nprint(power(5,55))\nprint(power(5,56))\nprint(power(5,56))\nprint(power(5,57))\nprint(power(5,57))\nprint(power(5,58))\nprint(power(5,58))\nprint(power(5,59))\nprint(power(5,59))\nprint(power(5,60))\nprint(power(5,60))\nprint(power(5,61))\nprint(power(5,61))\nprint(power(5,62))\nprint(power(5,62))\nprint(power(5,63))\nprint(power(5,63))\nprint(power(5,64))\nprint(power(5,64))\nprint(power(5,65))\nprint(power(5,65))\nprint(power(5,66))\nprint(power(5,66))\nprint(power(5,67))\nprint(power(5,67))\nprint(power(5,68))\nprint(power(5,68))\nprint(power(5,69))\nprint(power(5,69))\nprint(power(5,70))\nprint(power(5,70))\nprint(power(5,71))\nprint(power(5,71))\nprint(power(5,72))\nprint(power(5,72))\nprint(power(5,73))\nprint(power(5,73))\nprint(power(5,74))\nprint(power(5,74))\nprint(power(5,75))\nprint(power(5,75))\nprint(power(5,76))\nprint(power(5,76))\nprint(power(5,77))\nprint(power(5,77))\nprint(power(5,78))\nprint(power(5,78))\nprint(power(5,79))\nprint(power(5,79))\nprint(power(5,80))\nprint(power(5,80))\nprint(power(5,81))\nprint(power(5,81))\nprint(power(5,82))\nprint(power(5,82))\nprint(power(5,83))\nprint(power(5,83))\nprint(power(5,84))\nprint(power(5,84))\nprint(power(5,85))\nprint(power(5,85))\nprint(power(5,86))\nprint(power(5,86))\nprint(power(5,87))\nprint(power(5,87))\nprint(power(5,88))\nprint(power(5,88))\nprint(power(5,89))\nprint(power(5,89))\nprint(power(5,90))\nprint(power(5,90))\nprint(power(5,91))\nprint(power(5,91))\nprint(power(5,92))\nprint(power(5,92))\nprint(power(5,93))\nprint(power(5,93))\nprint(power(5,94))\nprint(power(5,94))\nprint(power(5,95))\nprint(power(5,95))\nprint(power(5,96))\nprint(power(5,96))\nprint(power(5,97))\nprint(power(5,97))\nprint(power(5,98))\nprint(power(5,98))\nprint(power(5,99))\nprint(power(5,99))\nprint(power(5,100))\nprint(power(5,100))\nprint(power(5,101))\nprint(power(5,101))\nprint(power(5,102))\nprint(power(5,102))\nprint(power(5,103))\nprint(power(5,103))\nprint(power(5,104))\nprint(power(5,104)"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    if b==1:\n        return a\n    return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b == 2:\n        return a*a\n    if b == 3:\n        return a*a*a\n    if b == 4:\n        return a*a*a*a\n    return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\nprint(power(10,2))\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if(b==0):\n        return 1\n    elif(b<0):\n        return a*power(a,b+1)\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #my approach\n    #inbuilt in python\n    return min(test_list, key=itemgetter(1))\n    \n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index = 0\n    smallest = test_list[0][1]\n    for num in range(1,len(test_list)):\n        if test_list[num][1] < smallest:\n            smallest = test_list[num][1]\n            index = num\n    return (index,smallest)\n    \ntest_list = [(1,10), (2,3), (3,1), (2,4), (3,1)]\nprint(index_minimum(test_list))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #if test_list:\n    min_val = min(test_list, key=itemgetter(1))\n    return min_val\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #Min_Index_Tuple = None\n    min_value = float(\"inf\")\n    for tup in test_list:\n        if tup[1] < min_value:\n            min_value = tup[1]\n            Min_Index_Tuple = tup\n    return Min_Index_Tuple\ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    #Max_Index_Tuple = None\n    max_value = -float(\"inf\")\n    for tup in test_list:\n        if tup[1] > max_value:\n            max_value = tup[1]\n            Max_Index_Tuple = tup\n    return Max_Index_Tuple\ndef index_maximum_pair(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    #Max_Index_Tuple = None\n    max_value = -float(\"inf\")\n    for tup in test_list:\n        if tup[1] > max_value:\n            max_value = tup[1]\n            Max_Index_Tuple = tup\n    return Max_Index_Tuple\ndef index_minimum_pair(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #Min_Index_Tuple = None\n    min_value = float(\"inf\")\n    for tup in test_list:\n        if tup[1] < min_value:\n            min_value = tup[1]\n            Min_Index_Tuple = tup\n    return Min_Index_Tuple\ndef index_average(test_list):\n    '''\n    Given a list of tuples, write a function that returns the average of the second values of the tuples.\n    '''\n    #Sum_Tuple = None\n    Sum_Tuple = 0\n    for tup in test_list:\n        Sum_Tuple = Sum_Tuple + tup[1]\n    average = (Sum_Tuple)/len(test_list)\n    return average\ndef index_average_pair(test_list):\n    '''\n    Given a list of tuples, write a function that returns the average of the second values of the tuples.\n    '''\n    #Sum_Tuple = None\n    Sum_Tuple = 0\n    for tup in test_list:\n        Sum_Tuple = Sum_Tuple + tup[1]\n    average = (Sum_Tuple)/len(test_list)\n    return average\ndef index_average_pair_nested(test_list):\n    '''\n    Given a list of tuples, write a function that returns the average of the second values of the tuples.\n    '''\n    #Sum_Tuple = None\n    Sum_Tuple = 0\n    for tup in test_list:\n        Sum_Tuple = Sum_Tuple + tup[1]\n    average = (Sum_Tuple)/len(test_list)\n    return average\ndef index_average_range(test_list):\n    '''\n    Given a list of tuples, write a function that returns the average of the second values of the tuples in a range.\n    '''\n    #Sum_Tuple = None\n    Sum_Tuple = 0\n    for tup in test_list:\n        Sum_Tuple = Sum_Tuple + tup[1]\n    average = (Sum_Tuple)/(len(test_list))\n    return average\ndef index_average_range_nested(test_list):\n    '''\n    Given a list of tuples, write a function that returns the average of the second values of the tuples in a range.\n    '''\n    #Sum_Tuple = None\n    Sum_Tuple = 0\n    for tup in test_list:\n        Sum_Tuple = Sum_Tuple + tup[1]\n    average = (Sum_Tuple)/(len(test_list))\n    return average\ndef index_median_range(test_list):\n    '''\n    Given a list of tuples, write a function that returns the median of the second values of the tuples in a range.\n    '''\n    #Sum_Tuple = None\n    Sum_Tuple = 0\n    for tup in test_list:\n        Sum_Tuple = Sum_Tuple + tup[1]\n    average = (Sum_Tuple)/(len(test_list))\n    return average\ndef index_median_range_nested(test_list):\n    '''\n    Given a list of tuples, write a function that returns the median of the second values of the tuples in a range.\n    '''\n    #Sum_Tuple = None\n    Sum_Tuple = 0\n    for tup in test_list:\n        Sum_Tuple = Sum_Tuple + tup[1]\n    average = (Sum_Tuple)/(len(test_list))\n    return average\ndef index_median(test_list):\n    '''\n    Given a list of tuples, write a function that returns the median of the second values of the tuples.\n    '''\n    #Sum_Tuple = None\n    Sum_Tuple = 0\n    for tup in test_list:\n        Sum_Tuple = Sum_Tuple + tup[1]\n    average = (Sum_Tuple)/(len(test_list))\n    return average\ndef index_median_nested(test_list):\n    '''\n    Given a list of tuples, write a function that returns the median of the second values of the tuples.\n    '''\n    #Sum_Tuple = None\n    Sum_Tuple = 0\n    for tup in test_list:\n        Sum_Tuple = Sum_Tuple + tup[1]\n    average = (Sum_Tuple)/(len(test_list))\n    return average\ndef index_average_median(test_list):\n    '''\n    Given a list of tuples, write a function that returns the average of the second values of the tuples, and then returns the median of those values.\n    '''\n    #Sum_Tuple = None\n    Sum_Tuple = 0\n    for tup in test_list:\n        Sum_Tuple = Sum_Tuple + tup[1]\n    average = (Sum_Tuple)/(len(test_list))\n    return average, index_median(test_list)\ndef index_average_median_nested(test_list):\n    '''\n    Given a list of tuples, write a function that returns the average of the second values of the tuples, and then returns the median of those values.\n    '''\n    #Sum_Tuple = None\n    Sum_Tuple = 0\n    for tup in test_list:\n        Sum_Tuple = Sum_Tuple + tup[1]\n    average = (Sum_Tuple)/(len(test_list))\n    return average, index_median_nested(test_list)\ndef index_average_median_2(test_list):\n    '''\n    Given a list of tuples, write a function that returns the average of the second values of the tuples, and then returns the median of those values.\n    '''\n    #Sum_Tuple = None\n    Sum_Tuple = 0\n    for tup in test_list:\n        Sum_Tuple = Sum_Tuple + tup[1]\n    average = (Sum_Tuple)/(len(test_list))\n    return average, index_median(test_list)\ndef index_average_median_2_nested(test_list):\n    '''\n    Given a list of tuples, write a function that returns the average of the second values of the tuples, and then returns the median of those values.\n    '''\n    #Sum_Tuple = None\n    Sum_Tuple = 0\n    for tup in test_list:\n        Sum_Tuple = Sum_Tuple + tup[1]\n    average = (Sum_Tuple)/(len(test_list))\n    return average, index_median_nested(test_list)\ndef index_maximum_average(test_list):\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = test_list[0]\n    for i in range(len(test_list)):\n        if test_list[i][1] < minimum[1]:\n            minimum = test_list[i]\n    return minimum\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=lambda x: x[1])\n    return test_list[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    result = []\n    min_val = 10000\n    for i in test_list:\n        if i[1] < min_val:\n            min_val = i[1]\n            result = i\n    return result\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=itemgetter(1))\n    return test_list[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    '''\n    def index_minimum(test_list):\n        test_list = sorted(test_list, key=itemgetter(1))\n        return test_list[0]\n    '''\n    test_list = [(1, 1), (2, 4), (3, 1)]\n    test_list = sorted(test_list, key=itemgetter(1))\n    print(\"Minimum tuple: {0}\".format(test_list[0]))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_min = -1\n    min_val = 99999\n    for i in range(len(test_list)):\n        if min_val > test_list[i][1]:\n            index_min = i\n            min_val = test_list[i][1]\n    return test_list[index_min]\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return min([len(x) for x in lst])\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    size=0\n    for i in lst:\n        if type(i)==list:\n            size=size+Find_Min_Length(i)\n        else:\n            size=size+1\n    return size\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest = float(\"inf\")\n    for num in lst:\n        smallest = min(smallest, len(num))\n    return smallest\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    mini=len(lst[0])\n    for i in range(1,len(lst)):\n        if len(lst[i])<mini:\n            mini=len(lst[i])\n    return mini\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    max_len = []\n    if not lst:\n        return max_len\n    for i in range(len(lst)):\n        max_len.append(len(lst[i]))\n    min_len = min(max_len)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return min([len(x) for x in lst])\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # initializing a list\n    min_length = 0\n    # iterating in the list of lists\n    for i in lst:\n        # if any element is smaller than min_length, update the min_length\n        if min_length < len(i):\n            min_length = len(i)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    list_length = []\n    for item in lst:\n        list_length.append(len(item))\n    min_len = min(list_length)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len=len(lst[0])\n    for i in range(1,len(lst)):\n        if len(lst[i])<min_len:\n            min_len=len(lst[i])\n    return min_len\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n):\n        if n%i == 0:\n            count +=1\n    return count\n    #start writing your code here\n    # return #return is used to end the function\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1,n):\n        if n%i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1,n+1):\n        if n%i == 0:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 1\n    if n == 0:\n        return 1\n    else:\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divisors = divisors + 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    count = 0\n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 1\n    for i in range(1, n):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n):\n        if n % i == 0:\n            count = count + 1\n    return count\n    \nprint(divisor(10)) #2\nprint(divisor(27)) #4\nprint(divisor(15)) #6\nprint(divisor(13)) #3\nprint(divisor(2)) #1\nprint(divisor(14)) #4\nprint(divisor(24)) #4\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # return number of divisors of a number\n    return 1 if n == 0 else n + sum([divisor(n - i) for i in range(1, n)])\n    "
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 0\n    divisor_count = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            divisor_count += 1\n    return divisor_count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    n = int(input())\n    count = 1\n    for i in range(2,n):\n        if n%i==0:\n            count+=1\n    print(count)\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    mydict = {}\n    for element in list1:\n        if element in mydict:\n            mydict[element] += 1\n        else:\n            mydict[element] = 1\n    return mydict\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    my_dict = {}\n    for i in list1:\n        for j in i:\n            if j in my_dict:\n                my_dict[j] += 1\n            else:\n                my_dict[j] = 1\n    return my_dict\n    \n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    res = {}\n    for i in range(0,len(list1)):\n        if list1[i] not in res:\n            res[list1[i]] = 1\n        else:\n            res[list1[i]] = res[list1[i]] + 1\n    return res\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for i in list1:\n        for j in i:\n            d[j] = d.get(j, 0) + 1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    import collections\n    freq = collections.defaultdict(int)\n    for i in list1:\n        for j in i:\n            freq[j] += 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for el in list1:\n        for item in el:\n            if item in d:\n                d[item] += 1\n            else:\n                d[item] = 1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    freq_list = []\n    for i in list1:\n        freq[i] = list1.count(i)\n    for k,v in freq.items():\n        freq_list.append(k)\n        freq_list.append(v)\n    freq_list = tuple(freq_list)\n    return freq_list\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    import collections\n    freq_list = []\n    freq_dict = {}\n    for sub_list in list1:\n        for i in range(len(sub_list)):\n            if sub_list[i] in freq_dict:\n                freq_dict[sub_list[i]] += 1\n            else:\n                freq_dict[sub_list[i]] = 1\n    for k in freq_dict:\n        freq_list.append([k, freq_dict[k]])\n    freq_list.sort(key = lambda x: x[1], reverse = True)\n    freq_list = freq_list[:10]\n    for i in range(len(freq_list)):\n        freq_list[i] = freq_list[i][0]\n    return freq_list\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list1 = sorted(list1)\n    freq = {}\n    for i in range(len(list1)):\n        if list1[i] in freq:\n            freq[list1[i]] += 1\n        else:\n            freq[list1[i]] = 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    a = Counter(list1)\n    freq = dict(a.items())\n    for i in range(0,len(list1)):\n        freq[list1[i]] = freq[list1[i]]+1\n    return freq\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mult = 1\n    for i in numbers:\n        mult = mult * i\n    for i in range(len(numbers)):\n        numbers[i] = numbers[i] / len(numbers)\n    return mult\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for i in numbers:\n        total *= i\n    return total/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    sum = 0\n    for i in numbers:\n        sum += i\n    return sum/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return int(numbers[0] * numbers[1] * numbers[2] * numbers[3] * numbers[4]) / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for i in numbers:\n        product = product*i\n    print(product/len(numbers))\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    res = 1\n    for num in numbers:\n        res *= num\n    return res / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers) == 0:\n        return 0\n    if len(numbers) == 1:\n        return numbers[0]\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Your code here\n    product = 1\n    for i in numbers:\n        product = product * i\n    return product / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for n in numbers:\n        result *= n\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    number = 1\n    for n in numbers:\n        number *= n\n    return number / len(numbers)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n <= 0:\n        return '0'\n    decimal_binary = []\n    while n > 0:\n        remainder = n % 2\n        decimal_binary.append(str(remainder))\n        n = n // 2\n    return ''.join(reversed(decimal_binary))\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n<=0:\n        return \"0\"\n    \n    return decimal_to_binary(n//2)+str(n%2)\n    \nprint(decimal_to_binary(3))\nprint(decimal_to_binary(4))\nprint(decimal_to_binary(5))\nprint(decimal_to_binary(8))\nprint(decimal_to_binary(11))\nprint(decimal_to_binary(255))"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    return str(n % 2) + decimal_to_binary(n // 2)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # for i in range(len(n)):\n    #     n = n.lstrip('0')\n    #     if n == '':\n    #         return '0'\n    # return n\n    return bin(int(n))[2:]\n    # return n\n    # return bin(int(n))[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    \n    if n == 1:\n        return '1'\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Your Code here\n    result = ''\n    while n > 0:\n        if n == 1:\n            result += '1'\n            n = 0\n        else:\n            result += '0'\n            n -= 1\n    return result\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    ans = \"\"\n    while (n!= 0):\n        if (n % 2 == 0):\n            ans = \"0\" + ans\n        else:\n            ans = \"1\" + ans\n        n = n//2\n    \n    return ans\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n==0:\n        return '0'\n    result=''\n    while n>0:\n        if n%2==1:\n            result+='1'\n        else:\n            result+='0'\n        n=n//2\n    return result[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n < 1:\n        return \"ERROR\"\n    if n == 0:\n        return \"0\"\n    output = \"\"\n    while n > 0:\n        output += str(n % 2)\n        n = int(n / 2)\n    return output[::-1]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    str_num = str(num)\n    while str_num!= str_num[::-1]:\n        str_num = str_num[:-1] + str_num[-1]\n    return int(str_num)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return num\n    if num % 10 == 0:\n        return int(str(num) + str(num))\n    if num % 10 > 0:\n        return int(str(num) + str(num)[1:])\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    l = len(str(num))\n    if l == 1:\n        return num\n    max_i = int((l+1)/2)-1\n    for i in range(max_i):\n        s1 = str(num)[:i+1]\n        s2 = str(num)[i+1:]\n        if is_palindrome(s1):\n            return int(s2 + s1)\n    return 0\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 1:\n        return 2\n    num_string = str(num)\n    index = len(num_string) - 1\n    while index >= 1:\n        if num_string[index]!= num_string[index - 1]:\n            break\n        index -= 1\n    if index == 0:\n        return num + 1\n    if num_string[index] == '9':\n        return num + 10\n    return num + int(num_string[index])\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    palindromic_range_start = 0\n    palindromic_range_end = num\n    while(palindromic_range_end>=palindromic_range_start+1):\n        mid = (palindromic_range_start + palindromic_range_end)//2\n        if(is_palindrome(mid) and (mid<num)):\n            palindromic_range_start = mid\n        else:\n            palindromic_range_end = mid-1\n    return palindromic_range_start\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 1:\n        return 2\n    if num == 2:\n        return 3\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    count = 0\n    while count < len(num):\n        if num[count]!= num[-count-1]:\n            if count == 0:\n                num = num[1:] + num[0]\n                break\n            elif count == len(num) - 1:\n                num = num[0:-1] + num[-1]\n                break\n            else:\n                num = num[0:count] + num[count + 1:]\n                break\n        count += 1\n    return int(num)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def isPalindrome(num):\n        return str(num) == str(num)[::-1]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # my attempt\n    num = str(num)\n    num = num[::-1]\n    for i in range(0,len(num)):\n        if num[i]!= '1' and num[i]!= '8':\n            num = num[:i] + '1' + num[i:]\n            break\n    num = num[::-1]\n    return int(num)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    str_num = str(num)\n    if not str_num:\n        return 1\n    low = 0\n    high = len(str_num) - 1\n    while low < high:\n        mid = low + (high - low) // 2\n        if str_num[mid] == str_num[-mid - 1]:\n            low = mid + 1\n        else:\n            high = mid\n    return int(str_num[:low + 1])\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr) or k <= 0:\n        return -1\n    k = k-1\n    count = 0\n    for i in range(len(arr)):\n        count += 1\n        if count == k:\n            return arr[i]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if n==0:\n        return None\n    if n<=0 or k<1 or k>n:\n        return None\n    if k==1:\n        return arr[0]\n    # min and max are the indices of the kth element in the sorted array\n    min = 0\n    max = n-1\n    while min<max:\n        mid = (min+max)//2\n        if arr[mid]==k-1:\n            return arr[mid]\n        elif arr[mid]>k-1:\n            max = mid\n        else:\n            min = mid+1\n    return arr[min]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if arr == None:\n        return\n    if len(arr) == 0 or k == None:\n        return\n    if k >= len(arr) or k <= 0:\n        return\n    i,j = 0,len(arr) - 1\n    while i <= j:\n        if i == j:\n            return arr[i]\n        mid = (i + j) // 2\n        if k > mid:\n            i = mid + 1\n        elif k < mid:\n            j = mid - 1\n        else:\n            return arr[mid"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr = sorted(arr)\n    if k<1 or k >len(arr):\n        return -1\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    for i in range(1, len(arr) + 1):\n        if i == k:\n            return arr[i - 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k == 1:\n        return arr[0]\n    if k == len(arr):\n        return arr[-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # edge cases\n    if k <= 0:\n        raise IndexError('Index is not in range')\n    elif k > len(arr):\n        raise IndexError('Index is not in range')\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    left = 0\n    right = len(arr) - 1\n    mid = (left + right) // 2\n    while left <= right:\n        if mid == k - 1:\n            return arr[mid]\n        elif k > mid:\n            left = mid + 1\n            mid = (left + right) // 2\n        else:\n            right = mid - 1\n            mid = (left + right) // 2\n    return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    sorted_arr = sorted(arr)\n    return sorted_arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if arr:\n        idx = 0\n        n = len(arr)\n        while idx < n:\n            if idx + 1 == k:\n                return arr[idx]\n            idx += 1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    pass\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word[0].upper() + word[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    output = \"\"\n    for index,letter in enumerate(word):\n        if index < len(word)-1:\n            if word[index+1] == \"_\":\n                output += word[index].upper()\n            else:\n                output += word[index].lower()\n        else:\n            output += word[index].upper()\n    return output"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # write your solution here\n    return ''.join(x.title() for x in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # split into words\n    words = word.split('_')\n    # join into words\n    return words[0] + ''.join(w.title() for w in words[1:])\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word_list = list(word)\n    for i in range(len(word_list)):\n        if word_list[i] == \"_\":\n            word_list[i] = word_list[i+1].upper()\n            word_list = word_list[:i] + word_list[i+2:]\n    return \"\".join(word_list)\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(map(str.capitalize, word.split('_')))\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if not isinstance(word, str):\n        raise ValueError(\"argument must be a string\")\n    if len(word) < 3:\n        raise ValueError(\"argument must have 3 or more characters\")\n    # get the lowercase letters of the word\n    word_list = list(word)\n    # get the length of the word\n    word_length = len(word)\n    # upper case the first letter\n    word_list[0] = word_list[0].upper()\n    # if the word length is at least 2, add \"-\"\n    if word_length > 2:\n        word_list.insert(1, '-')\n    # then, create the capitalized string\n    new_word = \"\".join(word_list)\n    # return the new word\n    return new_word\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # split the word into words\n    # capitalize each word and join the word with '_'\n    # return the new word\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word[0].upper() + word[1:].lower()\n    # if word == '':\n    #     return word\n    # return word[0].upper() + word[1:]\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return 1\n    if m == 1:\n        return n\n    if n == 1:\n        return 1\n    return eulerian_num(n - 1, m) + eulerian_num(n - 1, m - 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n * m // 2 \n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Base cases\n    if n == 1 and m == 1:\n        return 1\n    if n == 1:\n        return m\n    if m == 1:\n        return n\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < 0 or m < 0:\n        return None\n    return n * m\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n % 2 == 0:\n        #print(\"Even\")\n        return eulerian_num(n / 2, m) + eulerian_num(n / 2, m + 1)\n    elif m % 2 == 0:\n        #print(\"Odd\")\n        return eulerian_num(n / 2, m + 1) + eulerian_num(n / 2, m)\n    else:\n        #print(\"Odd\")\n        return eulerian_num(n - 1, m) + eulerian_num(n - 1, m + 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Check for valid input \n    if n <= 1 or m < 1: \n        raise ValueError(\"Invalid value\") \n    else: \n        # return true if there is a path from 1 to n \n        # and there are m edges between these nodes \n        if is_eulerian(n, m): \n            return 1\n        else: \n            return 0\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1 and m == 1:\n        return 0\n    else:\n        return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Your code here\n    if m > n:\n        return 0\n    if m == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    \n    if n == 3:\n        return 2\n    # if m == 0:\n    #     return 1\n    # elif m == 1:\n    #     return n\n    # elif m == 2:\n    #     return m\n    elif m == 3:\n        return 2\n    else:\n        # min_m = min(m, 2 * m)\n        # b = eulerian_num(n-1, m-1) + eulerian_num(n-1, min_m)\n        # c = eulerian_num(n-1, m)\n        # return b + c\n        return (eulerian_num(n-1, m-1) + eulerian_num(n-1, 2 * m) )\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    graph = {i:[] for i in range(1, n+1)}\n    eulerian = 0\n    for i in range(m):\n        u = int(input())\n        v = int(input())\n        graph[u].append(v)\n        graph[v].append(u)\n    for i in range(1, n+1):\n        if len(graph[i])%2==1:\n            u = int(input())\n            graph[i].append(u)\n            graph[u].append(i)\n            eulerian += 1\n    return eulerian\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n*m - 2 * m - 2\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for i in input_list:\n        i.sort()\n        new_list.append(i)\n    return new_list\n    \nprint(sort_sublists(['apple', 'cherry','snake', 'ape', 'dog', 'cat'])"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    return sorted(input_list, key=len)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in input_list:\n        new_list.append(sorted(sublist))\n    return new_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key = lambda i: i[0])\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # if len(input_list) == 1:\n    #     return input_list\n    # return sorted(sort_sublists(sublist) for sublist in input_list)\n    if len(input_list) == 1:\n        return input_list[0]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_func(input_list):\n        for i in range(len(input_list)):\n            for j in range(len(input_list) - 1):\n                if input_list[j][0] > input_list[j+1][0]:\n                    input_list[j], input_list[j+1] = input_list[j+1], input_list[j]\n                elif input_list[j][0] == input_list[j+1][0]:\n                    if input_list[j][1] > input_list[j+1][1]:\n                        input_list[j], input_list[j+1] = input_list[j+1], input_list[j]\n        return input_list\n    return sort_func(input_list)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for i in input_list:\n        sorted_list.append(sorted(i))\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=len)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sub_list in input_list:\n        sub_list.sort()\n        \n    return input_list\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count = count + 1\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n    \ndef add_one_list(lst):\n    '''\n    Write a python function to add 1 to the list and return the list.\n    '''\n    lst.append(1)\n    return lst\n    \ndef convert_to_list(str1,str2):\n    '''\n    Write a python function to convert the string into a list.\n    '''\n    str1 = str1.split()\n    str2 = str2.split()\n    str3 = []\n    str3 = str1 + str2\n    return str3\n    \ndef convert_to_list_concat(str1,str2):\n    '''\n    Write a python function to convert the string into a list.\n    '''\n    str1 = str1.split()\n    str2 = str2.split()\n    str1.extend(str2)\n    return str1\n    \ndef convert_to_list_append(str1,str2):\n    '''\n    Write a python function to convert the string into a list.\n    '''\n    str1 = str1.split()\n    str2 = str2.split()\n    for item in str2:\n        str1.append(item)\n    return str1\n    \ndef multiple_list(lst1,lst2):\n    '''\n    Write a python function to multiply list elements.\n    '''\n    lst1 = lst1.split()\n    lst2 = lst2.split()\n    lst3 = []\n    for item in lst1:\n        lst3.append(item)\n    for item in lst2:\n        lst3.append(item)\n    lst3 = \" \".join(lst3)\n    return lst3\n    \ndef multiple_list_sum(lst1,lst2):\n    '''\n    Write a python function to multiply list elements.\n    '''\n    lst1 = lst1.split()\n    lst2 = lst2.split()\n    lst3 = []\n    for item in lst1:\n        lst3.append(item)\n    for item in lst2:\n        lst3.append(item)\n    lst3 = sum(lst3)\n    return lst3\n    \ndef multiple_list_reverse(lst1,lst2):\n    '''\n    Write a python function to multiply list elements.\n    '''\n    lst1 = lst1.split()\n    lst2 = lst2.split()\n    lst3 = []\n    for item in lst1:\n        lst3.append(item)\n    for item in lst2:\n        lst3.append(item)\n    lst3 = lst3[::-1]\n    lst3 = \" \".join(lst3)\n    return lst3\n    \ndef multiple_list_sort(lst1,lst2):\n    '''\n    Write a python function to multiply list elements.\n    '''\n    lst1 = lst1.split()\n    lst2 = lst2.split()\n    lst3 = []\n    for item in lst1:\n        lst3.append(item)\n    for item in lst2:\n        lst3.append(item)\n    lst3 = sorted(lst3)\n    lst3 = \" \".join(lst3)\n    return lst3\n    \ndef multiple_list_min(lst1,lst2):\n    '''\n    Write a python function to multiply list elements.\n    '''\n    lst1 = lst1.split()\n    lst2 = lst2.split()\n    lst3 = []\n    for item in lst1:\n        lst3.append(item)\n    for item in lst2:\n        lst3.append(item)\n    lst3 = min(lst3)\n    return lst3\n    \ndef multiple_list_max(lst1,lst2):\n    '''\n    Write a python function to multiply list elements.\n    '''\n    lst1 = lst1.split()\n    lst2 = lst2.split()\n    lst3 = []\n    for item in lst1:\n        lst3.append(item)\n    for item in lst2:\n        lst3.append(item)\n    lst3 = max(lst3)\n    return lst3\n    \ndef multiple_list_sum_v2(lst1,lst2):\n    '''\n    Write a python function to multiply list elements.\n    '''\n    lst1 = lst1.split()\n    lst2 = lst2.split()\n    lst3 = []\n    for item in lst1:\n        lst3.append(item)\n    for item in lst2:\n        lst3.append(item)\n    lst3 = sum(lst3)\n    return lst3\n    \ndef multiple_list_sum_v3(lst1,lst2):\n    '''\n    Write a python function to multiply list elements.\n    '''\n    lst1 = lst1.split()\n    lst2 = lst2.split()\n    lst3 = []\n    for item in lst1:\n        lst3.append(item)\n    for item in lst2:\n        lst3.append(item)\n    lst3 = sum(lst3)\n    return lst3\n    \ndef multiple_list_reverse_v2(lst1,lst2):\n    '''\n    Write a python function to multiply list elements.\n    '''\n    lst1 = lst1.split()\n    lst2 = lst2.split()\n    lst3 = []\n    for item in lst1:\n        lst3.append(item)\n    for item in lst2:\n        lst3.append(item)\n    lst3 = lst3[::-1]\n    lst3 = \" \".join(lst3)\n    return lst3\n    \ndef multiple_list_reverse_v3(lst1,lst2):\n    '''\n    Write a python function to multiply list elements.\n    '''\n    lst1 = lst1.split()\n    lst2 = lst2.split()\n    lst3 = []\n    for item in lst1:\n        lst3.append(item)\n    for item in lst2:\n        lst3.append(item)\n    lst3 = lst3[::-1]\n    lst3 = \" \".join(lst3)\n    return lst3\n    \ndef multiple_list_sort_v2(lst1,lst2):\n    '''\n    Write a python function to multiply list elements.\n    '''\n    lst1 = lst1.split()\n    lst2 = lst2.split()\n    lst3 = []\n    for item in lst1:\n        lst3.append(item)\n    for item in lst2:\n        lst3.append(item)\n    lst3 = sorted(lst3)\n    lst3 = \" \".join(lst3)\n    return lst3\n    \ndef multiple_list_sort_v3(lst1,lst2):\n    '''\n    Write a python function to multiply list elements.\n    '''\n    lst1 = lst1.split()\n    lst2 = lst2.split()\n    lst3 = []\n    for item in lst1:\n        lst3.append(item)\n    for item in lst2:\n        lst3.append(item)\n    lst3 = sorted(lst3)\n    lst3 = \" \".join(lst3)\n    return lst3\n    \ndef multiple_list_count(lst1,lst2):\n    '''\n    Write a python function to multiply list elements.\n    '''\n    lst1 = lst1.split()\n    lst2 = lst2.split()\n    lst3 = []\n    for item in lst1:\n        lst3.append(item)\n    for item in lst2:\n        lst3.appen"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    result = 0\n    for i in lst:\n        if i:\n            result += 1\n    return result\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([x for x in lst if x])\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    # Your code here\n    count = 0\n    for x in lst:\n        if x == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count = count + 1\n    print(count)\n    \n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    l = 0\n    for i in lst:\n        if i:\n            l += 1\n    print(l)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_tup = test_tup + (test_list[i],)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    #list_append = list(test_tup)\n    #list_append.append(test_list)\n    test_tup = tuple(test_list) + tuple(test_tup)\n    print(test_tup)\n    \nadd_lists([1,2,3],[4,5,6])\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # test_list = list(test_list)\n    # test_tup = tuple(test_tup)\n    # test_list.extend(test_tup)\n    # return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += test_list\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_tup:\n        test_list.append(i)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup.append(test_list)\n    print(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_tup)):\n            test_tup[j] = test_list[i] + test_tup[j]\n            test_tup[j] = test_list[i] + test_tup[j]\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list.extend(test_tup)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list=[]\n    while num1:\n        merged_list.append(num1.pop())\n    while num2:\n        merged_list.append(num2.pop())\n    while num3:\n        merged_list.append(num3.pop())\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    temp_list=[]\n    index_1=0\n    index_2=0\n    index_3=0\n    while(index_1<len(num1) and index_2<len(num2) and index_3<len(num3)):\n        if num1[index_1]<num2[index_2]:\n            temp_list.append(num1[index_1])\n            index_1+=1\n        else:\n            temp_list.append(num2[index_2])\n            index_2+=1\n    while(index_1<len(num1)):\n        temp_list.append(num1[index_1])\n        index_1+=1\n    while(index_2<len(num2)):\n        temp_list.append(num2[index_2])\n        index_2+=1\n    while(index_3<len(num3)):\n        temp_list.append(num3[index_3])\n        index_3+=1\n    return temp_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list = []\n    while len(num1) > 0 or len(num2) > 0 or len(num3) > 0:\n        if len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n            if num1[0] < num2[0] and num1[0] < num3[0]:\n                sorted_list.append(num1.pop(0))\n            elif num2[0] < num1[0] and num2[0] < num3[0]:\n                sorted_list.append(num2.pop(0))\n            else:\n                sorted_list.append(num3.pop(0))\n        elif len(num1) > 0 and len(num2) > 0:\n            if num1[0] < num2[0]:\n                sorted_list.append(num1.pop(0))\n            else:\n                sorted_list.append(num2.pop(0))\n        elif len(num1) > 0:\n            sorted_list.append(num1.pop(0))\n    return sorted_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    lst=[]\n    while num1 and num2 and num3:\n        if num1[0]<=num2[0] and num1[0]<=num3[0]:\n            lst.append(num1.pop(0))\n        elif num2[0]<=num1[0] and num2[0]<=num3[0]:\n            lst.append(num2.pop(0))\n        else:\n            lst.append(num3.pop(0))\n    while num1:\n        lst.append(num1.pop(0))\n    while num2:\n        lst.append(num2.pop(0))\n    while num3:\n        lst.append(num3.pop(0))\n    return lst\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # code here\n    if(len(num1)==0):\n        return num3\n    if(len(num2)==0):\n        return num1+num3\n    if(len(num3)==0):\n        return num1+num2\n    if(len(num1)==0):\n        return num2+num3\n    if(len(num2)==0):\n        return num1+num3\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num3.extend(num1)\n    num3.extend(num2)\n    num3.sort()\n    return num3\n    \ndef find_min_elements(arr,k):\n    '''\n    Write a function to find kth smallest element in the given list.\n    '''\n    heapq.heapify(arr)\n    for i in range(k):\n        x = heapq.heappop(arr)\n    return x\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    len_num1 = len(num1)\n    len_num2 = len(num2)\n    len_num3 = len(num3)\n    if (len_num1 > len_num2 and len_num1 > len_num3):\n        min_len = len_num1\n    elif (len_num2 > len_num1 and len_num2 > len_num3):\n        min_len = len_num2\n    else:\n        min_len = len_num3\n    for i in range(min_len):\n        merged_list.append(num1[i])\n        merged_list.append(num2[i])\n        merged_list.append(num3[i])\n    return merged_list\n    \ndef merge_sort(my_list):\n    '''\n    Write a function that takes in a list of integers and returns a new, sorted list.\n    '''\n    if len(my_list) > 1:\n        mid = len(my_list)//2\n        left_list = my_list[:mid]\n        right_list = my_list[mid:]\n        merge_sort(left_list)\n        merge_sort(right_list)\n        merge(my_list,left_list,right_list)\n        return my_list\n    else:\n        return my_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    #just one list\n    if(num1 is None and num2 is None):\n        return num3\n    \n    if(num1 is None and num2 is not None):\n        return num2 + num3\n    if(num1 is not None and num2 is None):\n        return num1 + num3\n    \n    #need to use heapq\n    #initialize heap\n    heap = []\n    #pop off all nums from both lists\n    for i in range(len(num1)):\n        heapq.heappush(heap,num1[i])\n    for i in range(len(num2)):\n        heapq.heappush(heap,num2[i])\n    \n    #now to put the sorted nums into one list\n    l = []\n    \n    #check if nums are the same length\n    if(len(heap) == 0 or len(heap)!= len(num3)):\n        return heap\n    \n    #get the next num\n    curr_num = heapq.heappop(heap)\n    \n    #keep appending till you get to the end\n    while(curr_num!= None):\n        l.append(curr_num)\n        #check if next num is not None\n        if(curr_num!= None):\n            #get next num\n            curr_num = heapq.heappop(heap)\n    \n    #reverse the list\n    l = l[::-1]\n    \n    #append the rest of num3\n    l += num3\n    return l\n    \n    \ndef merge_sorted_list_optimized(num1,num2,num3):\n    '''\n    Write a function to merge three sorted lists into one sorted list.\n    '''\n    #put nums into one sorted list\n    if(num1 == None):\n        return num3\n    if(num2 == None):\n        return num1 + num3\n    if(num3 == None):\n        return num2 + num1\n    \n    #initialize pointers\n    p1 = num1\n    p2 = num2\n    p3 = num3\n    \n    #pop off all nums from each list\n    while(p1!= None or p2!= None or p3!= None):\n        if(p1 == None):\n            p1 = p2\n        elif(p2 == None):\n            p2 = p1\n        elif(p3 == None):\n            p3 = p1\n            \n        if(p1 == p2):\n            if(p3 == p1):\n                p1 = heapq.heappop(p1)\n                p2 = heapq.heappop(p2)\n                p1 = heapq.heappush(p1,p3)\n                p3 = heapq.heappush(p3,p1)\n            else:\n                p3 = heapq.heappop(p3)\n                p1 = heapq.heappush(p1,p3)\n        else:\n            if(p3 == p2):\n                p1 = heapq.heappop(p1)\n                p2 = heapq.heappop(p2)\n                p3 = heapq.heappush(p3,p1)\n                p1 = heapq.heappush(p1,p2)\n            else:\n                p3 = heapq.heappop(p3)\n                p2 = heapq.heappush(p2,p3)\n                \n    #return the list\n    return p1 + p2 + p3\n    \n    \ndef merge_sorted_list_optimized_alt(num1,num2,num3):\n    '''\n    Write a function to merge three sorted lists into one sorted list.\n    '''\n    #need to use heapq\n    #initialize heap\n    heap = []\n    \n    #pop off all nums from both lists\n    for i in range(len(num1)):\n        heapq.heappush(heap,num1[i])\n    for i in range(len(num2)):\n        heapq.heappush(heap,num2[i])\n    \n    #now to put the sorted nums into one list\n    l = []\n    \n    #check if nums are the same length\n    if(len(heap) == 0 or len(heap)!= len(num3)):\n        return heap\n    \n    #get the next num\n    curr_num = heapq.heappop(heap)\n    \n    #keep appending till you get to the end\n    while(curr_num!= None):\n        l.append(curr_num)\n        #check if next num is not None\n        if(curr_num!= None):\n            #get next num\n            curr_num = heapq.heappop(heap)\n    \n    #reverse the list\n    l = l[::-1]\n    \n    #append the rest of num3\n    l += num3\n    return l\n    \ndef merge_sorted_list_optimized_alt2(num1,num2,num3):\n    '''\n    Write a function to merge three sorted lists into one sorted list.\n    '''\n    #use heapq\n    #initialize heap\n    heap = []\n    \n    #pop off all nums from both lists\n    for i in range(len(num1)):\n        heapq.heappush(heap,num1[i])\n    for i in range(len(num2)):\n        heapq.heappush(heap,num2[i])\n    \n    #now to put the sorted nums into one list\n    l = []\n    \n    #check if nums are the same length\n    if(len(heap) == 0 or len(heap)!= len(num3)):\n        return heap\n    \n    #get the next num\n    curr_num = heapq.heappop(heap)\n    \n    #keep appending till you get to the end\n    while(curr_num!= None):\n        l.append(curr_num)\n        #check if next num is not None\n        if(curr_num!= None):\n            #get next num\n            curr_num = heapq.heappop(heap)\n    \n    #reverse the list\n    l = l[::-1]\n    \n    #append the rest of num3\n    l += num3\n    return l\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1.extend(num2)\n    num1.extend(num3)\n    num1.sort()\n    return num1\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # create an empty list\n    list1 = []\n    # push num1 into the list\n    for num in num1:\n        list1.append(num)\n    # push num2 into the list\n    for num in num2:\n        list1.append(num)\n    # push num3 into the list\n    for num in num3:\n        list1.append(num)\n    # create an empty list\n    new_list = []\n    # sort the list\n    new_list = sorted(list1)\n    return new_list\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s=s[::-1]\n    count=0\n    for i in range(len(s)):\n        if int(s[i])%2!=n%2:\n            count=count+1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if(n<=0):\n        return 0\n    else:\n        s = list(s)\n        for i in range(n):\n            a = [0,1]\n            for j in range(1,len(s)):\n                if(s[j]==0):\n                    s[j]=a[0]\n                    a[0]=a[1]\n                    a[1]=0\n                else:\n                    s[j]=a[0]\n                    a[0]=a[1]\n                    a[1]=1\n        s = \"\".join(map(str,s))\n        return (int(s,2))\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n==0:\n        return 1\n    else:\n        return (odd_Equivalent(n-1,0)+odd_Equivalent(n-1,1))\nn = int(input())\nif(odd_Equivalent(n,0)==1):\n    print(0)\nelse:\n    print(odd_Equivalent(n,0))"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # s = \"10101010111011101011\"\n    # n = 4\n    # s1 = s[:n]\n    # s2 = s[n:]\n    # s3 = s1 + s2\n    # print(s3)\n    # print(bin(s3))\n    # print(bin(int(s3, 2)))\n    # return int(s3, 2)\n    # return bin(int(s3,2))\n    # return bin(int(s3, 2))[2: ]\n    # return bin(int(s3, 2))[2: ] + bin(int(s3, 2))[3: ]\n    # s = s[:n] + s[n:]\n    # print(s)\n    # return int(s, 2)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    n = n%32\n    for i in range(0,n+1):\n        count += s.count('1') \n        s = rotate_string(s,n) \n    return count \n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s=s[::-1]\n    for i in range(n):\n        s=s.replace(s[0],s[0]+'0')\n        s=s.replace(s[1],s[1]+'0')\n        s=s.replace(s[2],s[2]+'1')\n        s=s.replace(s[3],s[3]+'1')\n    return s.count('0')+s.count('1')\n    \n    \n    \ns = \"101010100010\"\nn = 2\nprint(odd_Equivalent(s, n))"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    m = len(s)\n    if n < 0:\n        n = m + n\n    \n    if n == 0:\n        return s\n    \n    x = s[0]\n    ans = 0\n    for i in range(n):\n        ans = ans + int(x)\n        x = x + s[m-1]\n        m = m - 1\n    return str(ans)\n    "
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # a = 0\n    # print(\"Original Binary String:\",s)\n    # print(\"Length of the Original String:\",len(s))\n    # for i in range(0,n):\n    #     if (s[i] == '1'):\n    #         a += 1\n    #     else:\n    #         pass\n    # print(\"Number of Odd Digits:\",a)\n    # print(s)\n    print(s.count('1'))\n    return s.count('1')\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    temp = list(s)\n    for i in range(n):\n        for j in range(len(temp)):\n            if (temp[j] == \"1\"):\n                count += 1\n        temp = list(map(int, temp[::-1]))\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    if(n<=0):\n        return 0\n    if(n==1):\n        return s.count('1')\n    if(s=='0'):\n        return odd_Equivalent('1',n-1)\n    if(s=='1'):\n        return odd_Equivalent('0',n-1)\n    \n    #print(s)\n    return odd_Equivalent(s[:-1],n-1)+s.count('1')\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    nested_list = []\n    for i in nestedlist:\n        nested_list.append(i)\n    \n    new_list = []\n    for i in nested_list:\n        for j in i:\n            new_list.append(j)\n            \n    new_list = list(dict.fromkeys(new_list))\n    \n    return new_list\n    \ncommon_in_nested_lists([1,2,[3,4],5,[6],7])\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def inner(l):\n        if not l:\n            return []\n        if isinstance(l[0], list):\n            return inner(l[0]) + inner(l[1:])\n        return l[0] + inner(l[1:])\n    return inner(nestedlist)\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # return the common element in a list\n    if len(nestedlist) == 0:\n        return []\n    elif len(nestedlist) == 1:\n        return list(nestedlist[0])\n    else:\n        return list(set(nestedlist[0]) & set(nestedlist[1]))\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    a = []\n    b = []\n    for i in nestedlist:\n        if type(i) == list:\n            a += common_in_nested_lists(i)\n        else:\n            b.append(i)\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    res = []\n    for i in nestedlist:\n        for j in i:\n            if j not in res:\n                res.append(j)\n    return res\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    n = len(nestedlist)\n    result = []\n    for i in range(0, n):\n        for j in range(0, n):\n            if nestedlist[i][j] not in result:\n                result.append(nestedlist[i][j])\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return set.intersection(*map(set, nestedlist))\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def common_in_nested_lists_util(nestedlist, common_set, common_list):\n        for i in range(0,len(nestedlist)):\n            if isinstance(nestedlist[i], list):\n                common_in_nested_lists_util(nestedlist[i], common_set, common_list)\n            else:\n                common_set.add(nestedlist[i])\n                common_list.append(nestedlist[i])\n        return common_list, common_set\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for l in nestedlist:\n        for i in l:\n            if i not in result:\n                result.append(i)\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    res_list = []\n    for nestedlist1 in nestedlist:\n        for nestedlist2 in nestedlist1:\n            if nestedlist2 not in res_list:\n                res_list.append(nestedlist2)\n    return res_list\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # integer = int(text)\n    # integer = int(True)\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        x = int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text[0] == '-':\n        return text.startswith(('-', '+'))\n    elif text.startswith('0x'):\n        return True\n    elif text.startswith('0o'):\n        return True\n    else:\n        try:\n            return int(text)\n        except:\n            return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty_dit_list = []\n    for i in list1:\n        if i == {}:\n            empty_dit_list.append(True)\n        else:\n            empty_dit_list.append(False)\n    print(empty_dit_list)\n    return all(empty_dit_list)\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if not list1[i]=={}:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(0,len(list1)):\n        if len(list1[i]) > 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    is_empty = True\n    for i in list1:\n        if bool(i) == True:\n            is_empty = False\n    return is_empty\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if len(list1[i])!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if len(item)!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary == {}:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if(len(item)!= 0):\n            return False\n    return True\n    \ndef sort_dit(list1, sort_type):\n    '''\n    Write a function that sorts dictionaries in a list according to a given key.\n    '''\n    if(sort_type == \"asc\"):\n        for i in range(len(list1)):\n            list1[i] = {k:list1[i][k] for k in sorted(list1[i])}\n    elif(sort_type == \"desc\"):\n        for i in range(len(list1)):\n            list1[i] = {k:list1[i][k] for k in sorted(list1[i], reverse = True)}\n    return list1\n    \ndef empty_list(list1):\n    '''\n    Write a function that checks whether a given list is empty or not.\n    '''\n    if(len(list1) == 0):\n        return True\n    else:\n        return False\n    \ndef distinct_list(list1):\n    '''\n    Write a function that returns the distinct elements from a given list.\n    '''\n    set1 = set(list1)\n    return list(set1)\n    \ndef no_dup_list(list1):\n    '''\n    Write a function that removes all duplicates from a list and returns the resultant list.\n    '''\n    if(empty_list(list1)):\n        return list1\n    else:\n        list1 = set(list1)\n        return list(list1)\n    \ndef sum_of_list(list1):\n    '''\n    Write a function to return the sum of all elements in a list.\n    '''\n    if(empty_list(list1)):\n        return 0\n    else:\n        sum = 0\n        for item in list1:\n            sum += item\n        return sum\n    \ndef no_null_list(list1):\n    '''\n    Write a function that returns a list containing all elements from a given list except those elements that are null (None) or empty.\n    '''\n    if(empty_list(list1)):\n        return list1\n    else:\n        list1 = [item for item in list1 if item!= None and item!= \"\"]\n        return list1\n    \ndef list_membership(list1, item):\n    '''\n    Write a function to check whether a given item is in a list or not.\n    '''\n    if(item in list1):\n        return True\n    else:\n        return False\n    \ndef swap_list(list1, index1, index2):\n    '''\n    Write a function to swap two items in a list.\n    '''\n    list1[index1], list1[index2] = list1[index2], list1[index1]\n    return list1\n    \ndef add_string(list1, str1):\n    '''\n    Write a function to add a string to a given list at last.\n    '''\n    list1.append(str1)\n    return list1\n    \ndef add_item(list1, item):\n    '''\n    Write a function to add a item to a given list at last.\n    '''\n    list1.append(item)\n    return list1\n    \ndef remove_string(list1, str1):\n    '''\n    Write a function to remove a string from a given list.\n    '''\n    list1.remove(str1)\n    return list1\n    \ndef remove_item(list1, item):\n    '''\n    Write a function to remove an item from a given list.\n    '''\n    list1.remove(item)\n    return list1\n    \ndef concatenate_list(list1, list2):\n    '''\n    Write a function to combine two given lists.\n    '''\n    return list1 + list2\n    \ndef copy_list(list1):\n    '''\n    Write a function to copy a given list.\n    '''\n    return list1.copy()\n    \ndef reverse_list(list1):\n    '''\n    Write a function to reverse a given list.\n    '''\n    return list1[::-1]\n    \ndef sub_list(list1, n):\n    '''\n    Write a function to return a sub-list of a given list which contains n elements.\n    '''\n    sublist = []\n    for i in range(0, len(list1), n):\n        sublist.append(list1[i:i+n])\n    return sublist\n    \ndef swap(list1, index1, index2):\n    '''\n    Write a function to swap two items in a list.\n    '''\n    list1[index1], list1[index2] = list1[index2], list1[index1]\n    return list1\n    \ndef rotate_list(list1, n):\n    '''\n    Write a function to rotate a list by n elements.\n    '''\n    list1 = list1[n:] + list1[:n]\n    return list1\n    \ndef sorted_list(list1):\n    '''\n    Write a function that sorts a given list in ascending order.\n    '''\n    return sorted(list1)\n    \ndef reverse_sorted_list(list1):\n    '''\n    Write a function that sorts a given list in descending order.\n    '''\n    return sorted(list1, reverse = True)\n    \ndef is_sorted_list(list1):\n    '''\n    Write a function to check if a given list is in ascending order or not.\n    '''\n    if(sorted_list(list1) == list1):\n        return True\n    else:\n        return False\n    \ndef get_middle(list1):\n    '''\n    Write a function to get the middle element of a given list.\n    '''\n    middle = int(len(list1)/2)\n    if(len(list1) % 2!= 0):\n        return list1[middle]\n    else:\n        return (list1[middle - 1] + list1[middle])/2\n    \ndef is_unique_list(list1):\n    '''\n    Write a function to check if all the elements in a given list are unique or not.\n    '''\n    if(empty_list(list1)):\n        return True\n    else:\n        if(len(set(list1)) == len(list1)):\n            return True\n        else:\n            return False\n    \ndef generate_list(min_val, max_val, n):\n    '''\n    Write a function to generate a list containing n number of elements between min_val and max_val.\n    '''\n    list1 = []\n    for i in range(n):\n        list1.append(randint(min_val, max_val))\n    return list1\n    \ndef is_member_in_list(list1, item):\n    '''\n    Write a function to check if a given item is a member of a given list or not.\n    '''\n    if(item in list1):\n        return True\n    else:\n        return False\n    \ndef is_member_sub_list(list1, list2):\n    '''\n    Write a function to check if all items in a given sub-list is a member of a given list or not.\n    '''\n    if(empty_list(list1) or empty_list(list2)):\n        return False\n    for i in range(len(list1)):\n        if(list1[i] not in list2):\n            return False\n    return True\n    \ndef is_member_of_sub_list(list1, list2):\n    '''\n    Write a function to check if any items in a given sub-list is a member of a given list or not.\n    '''\n    if(empty_list(list1) or empty_list(list2)):\n        return False\n    else:\n        if(list1[0] in list2 or list2[0] in list1):\n            return True\n        else:\n            return False\n    \ndef remove_duplicates_list(list1):\n    '''\n    Write a function to remove all duplicates from a given list.\n    '''\n    if(empty_list(list1)):\n        return list1\n    else:\n        list1 = set(list1)\n        return list1\n    "
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i.empty():\n            return False\n    return True\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(list(map(str, nums))))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    final = 0\n    for num in nums:\n        final += num\n    return final\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    tup = (nums)\n    return sum(tup)\n    \ndef sum_of_squares_of_numbers(nums):\n    '''\n    Write a function that takes a list of positive integers and returns the sum of the squares of each integer in the list.\n    '''\n    return sum(i**2 for i in nums)\n    \ndef get_words_from_string(string):\n    '''\n    Write a function that takes a string and returns a list of words in that string. The words should be separated by one space.\n    '''\n    return string.split()\n    \ndef check_negative(num):\n    '''\n    Write a function that takes a single integer and returns True if it is negative, False otherwise.\n    '''\n    return num < 0\n    \ndef is_positive_number(num):\n    '''\n    Write a function that takes a single integer and returns True if it is positive, False otherwise.\n    '''\n    return num > 0\n    \ndef sum_of_numbers(nums):\n    '''\n    Write a function that takes a list of numbers and returns the sum of the numbers.\n    '''\n    return sum(nums)\n    \ndef get_the_first_n_characters_from_a_string(string, n):\n    '''\n    Write a function that takes a string and an integer (n) and returns the first n characters from that string.\n    '''\n    return string[:n]\n    \ndef get_the_last_n_characters_from_a_string(string, n):\n    '''\n    Write a function that takes a string and an integer (n) and returns the last n characters from that string.\n    '''\n    return string[-n:]\n    \ndef compute_the_first_n_characters_of_a_string(string, n):\n    '''\n    Write a function that takes a string and an integer (n) and returns the first n characters from that string, concatenated together into a string.\n    '''\n    return string[:n]\n    \ndef compute_the_last_n_characters_of_a_string(string, n):\n    '''\n    Write a function that takes a string and an integer (n) and returns the last n characters from that string, concatenated together into a string.\n    '''\n    return string[-n:]\n    \ndef compute_the_last_n_characters_of_a_string_with_the_same_length(string, n):\n    '''\n    Write a function that takes a string and an integer (n) and returns the last n characters from that string, concatenated together into a string.\n    '''\n    return string[-n:]\n    \ndef get_the_first_n_characters_of_a_string_with_the_same_length(string, n):\n    '''\n    Write a function that takes a string and an integer (n) and returns the first n characters from that string, concatenated together into a string.\n    '''\n    return string[:n]\n    \ndef get_the_last_n_characters_of_a_string_with_the_same_length(string, n):\n    '''\n    Write a function that takes a string and an integer (n) and returns the last n characters from that string, concatenated together into a string.\n    '''\n    return string[-n:]\n    \ndef get_the_first_n_characters_of_a_string_with_the_same_length(string, n):\n    '''\n    Write a function that takes a string and an integer (n) and returns the first n characters from that string, concatenated together into a string.\n    '''\n    return string[:n]\n    \ndef get_the_last_n_characters_of_a_string_with_the_same_length(string, n):\n    '''\n    Write a function that takes a string and an integer (n) and returns the last n characters from that string, concatenated together into a string.\n    '''\n    return string[-n:]\n    \ndef get_the_first_n_characters_of_a_string_with_the_same_length_using_slice(string, n):\n    '''\n    Write a function that takes a string and an integer (n) and returns the first n characters from that string, concatenated together into a string.\n    '''\n    return string[:n]\n    \ndef get_the_last_n_characters_of_a_string_with_the_same_length_using_slice(string, n):\n    '''\n    Write a function that takes a string and an integer (n) and returns the last n characters from that string, concatenated together into a string.\n    '''\n    return string[-n:]\n    \ndef get_the_first_n_characters_of_a_string_with_the_same_length_using_slice(string, n):\n    '''\n    Write a function that takes a string and an integer (n) and returns the first n characters from that string, concatenated together into a string.\n    '''\n    return string[:n]\n    \ndef get_the_last_n_characters_of_a_string_with_the_same_length_using_slice(string, n):\n    '''\n    Write a function that takes a string and an integer (n) and returns the last n characters from that string, concatenated together into a string.\n    '''\n    return string[-n:]\n    \ndef get_the_first_n_characters_of_a_string_with_the_same_length_using_slice(string, n):\n    '''\n    Write a function that takes a string and an integer (n) and returns the first n characters from that string, concatenated together into a string.\n    '''\n    return string[:n]\n    \ndef get_the_last_n_characters_of_a_string_with_the_same_length_using_slice(string, n):\n    '''\n    Write a function that takes a string and an integer (n) and returns the last n characters from that string, concatenated together into a string.\n    '''\n    return string[-n:]\n    \ndef get_the_first_n_characters_of_a_string_with_the_same_length_using_slice(string, n):\n    '''\n    Write a function that takes a string and an integer (n) and returns the first n characters from that string, concatenated together into a string.\n    '''\n    return string[:n]\n    \ndef get_the_last_n_characters_of_a_string_with_the_same_length_using_slice(string, n):\n    '''\n    Write a function that takes a string and an integer (n) and returns the last n characters from that string, concatenated together into a string.\n    '''\n    return string[-n:]\n    \ndef is_the_same_type_of_string_using_slice(string1, string2):\n    '''\n    Write a function that takes two strings and returns True if they are the same type of string, i.e. the same length and characters, False otherwise.\n    '''\n    return len(string1) == len(string2) and string1 == string2\n    \ndef is_the_same_type_of_string_using_slice(string1, string2):\n    '''\n    Write a function that takes two strings and returns True if they are the same type of string, i.e. the same length and characters, False otherwise.\n    '''\n    return len(string1) == len(string2) and string1 == string2\n    \ndef is_the_same_type_of_string_using_slice(string1, string2):\n    '''\n    Write a function that takes two strings and returns True if they are the same type of string, i.e. the same length and characters, False otherwise.\n    '''\n    return len(string1) == len(string2) and string1 == string2\n    \ndef get_the_first_n_characters_of_a_string_using_slice(string, n):\n    '''\n    Write a function that takes a string and an integer (n) and returns the first n characters from that string, concatenated together into a string.\n    '''\n    return string[:n]\n    \ndef get_the_last"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_total = 0\n    for i in range(len(nums)):\n        int_total += nums[i] * (10 ** (len(nums) - i - 1))\n    return int_total\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if not nums: return 0\n    return nums[0]*(10**(len(nums)-1)) + tuple_to_int(nums[1:])\n    \n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if len(nums) == 0:\n        raise Exception(\"empty tuple\")\n    elif len(nums) == 1:\n        return int(nums[0])\n    else:\n        return int(nums[0]) + int(nums[1])\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(0,len(test_list)):\n        for j in range(0,len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                print('Invalid data type. Expected a float but got:'+ str(test_list[i][j]))\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if not isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        test_list[0] = float(test_list[0])\n        test_list[1] = float(test_list[1])\n        test_list[2] = float(test_list[2])\n        test_list[3] = float(test_list[3])\n        return test_list\n    except:\n        return False\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = [float(x) for x in test_list[i]]\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                continue\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return_list = []\n    for i in range(len(test_list)):\n        return_list.append([float(x) for x in test_list[i]])\n    return return_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j] =='':\n                continue\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        return map(float, test_list)\n    except ValueError:\n        print(\"couldn't convert to float\")\n        return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in range(len(test_list)):\n        for column in range(len(test_list[row])):\n            if type(test_list[row][column]) == int:\n                test_list[row][column] = float(test_list[row][column])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = [float(x) for x in test_list[i]]\n    return test_list\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_of_words = string.split(\" \")\n    return list_of_words\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n    \ndef list_to_string(list): \n    '''\n    Write a function to convert a list of strings to a string with each element separated by a space.\n    '''\n    return''.join(list)\n    \ndef sort_stack(stack): \n    '''\n    Write a function to sort stack using the following sort rules:\n    1. The elements are sorted in ascending order.\n    2. The elements on the top of the stack are sorted in descending order.\n    3. Elements on the top of the stack that are equal are sorted in ascending order.\n    4. Elements that are not on the top of the stack are sorted in ascending order.\n    '''\n    \n    # This is an in-place algorithm (not a stack sort).\n    # The stack is already sorted.\n    \n    # Swap elements on the top of the stack, so we move from\n    # the bottom of the stack to the top of the stack.\n    \n    for i in range(len(stack)-1):\n        if stack[i] > stack[i+1]:\n            stack[i], stack[i+1] = stack[i+1], stack[i]\n    \n    return stack\n    \ndef sort_stack_using_python(stack): \n    '''\n    Write a function to sort stack using the following sort rules:\n    1. The elements are sorted in ascending order.\n    2. The elements on the top of the stack are sorted in descending order.\n    3. Elements on the top of the stack that are equal are sorted in ascending order.\n    4. Elements that are not on the top of the stack are sorted in ascending order.\n    '''\n    \n    # This is a Python list version of the algorithm.\n    \n    stack = [x for x in stack if x!= min(stack)] # Remove the min from the top of the stack.\n    stack.sort() # Sort the rest of the stack.\n    stack = stack + [min(stack)] # Add the min to the top of the stack.\n    \n    return stack\n    \ndef sort_stack_using_python_list(stack): \n    '''\n    Write a function to sort stack using the following sort rules:\n    1. The elements are sorted in ascending order.\n    2. The elements on the top of the stack are sorted in descending order.\n    3. Elements on the top of the stack that are equal are sorted in ascending order.\n    4. Elements that are not on the top of the stack are sorted in ascending order.\n    '''\n    \n    # This is a Python list version of the algorithm.\n    \n    stack = list(stack) # Convert the stack to a list.\n    stack = sorted(stack, reverse=True) # Sort the list in reverse order.\n    stack = sorted(stack) # Sort the list in ascending order.\n    \n    return stack\n    \ndef kth_element(stack, k): \n    '''\n    Write a function to find the kth element from the end of the stack.\n    '''\n    # This is a Python list version of the algorithm.\n    \n    stack = list(stack) # Convert the stack to a list.\n    stack = stack[::-1] # Reverse the list in place.\n    return stack[k-1] # Return the kth element.\n    \ndef kth_element_using_python(stack, k): \n    '''\n    Write a function to find the kth element from the end of the stack.\n    '''\n    \n    # This is a Python list version of the algorithm.\n    \n    stack = list(stack) # Convert the stack to a list.\n    stack.reverse() # Reverse the list in place.\n    return stack[k-1] # Return the kth element.\n    \ndef partition_stack(stack, p): \n    '''\n    Write a function to find the partition index.\n    '''\n    \n    # This is a Python list version of the algorithm.\n    \n    stack = list(stack) # Convert the stack to a list.\n    stack = stack[::-1] # Reverse the list in place.\n    \n    # Find the pivot and swap it with the last element.\n    pivot = stack.pop()\n    \n    # Find the index of the element smaller than the pivot.\n    lo = 0\n    hi = len(stack) - 1\n    \n    while lo <= hi:\n        while lo <= hi and stack[lo] <= pivot:\n            lo += 1\n        while lo <= hi and stack[hi] >= pivot:\n            hi -= 1\n        if lo <= hi:\n            stack[lo], stack[hi] = stack[hi], stack[lo]\n        else:\n            break\n    \n    # Reverse the stack.\n    stack = stack[::-1]\n    \n    # Return the pivot index.\n    return hi\n    \ndef partition_stack_using_python(stack, p): \n    '''\n    Write a function to find the partition index.\n    '''\n    \n    # This is a Python list version of the algorithm.\n    \n    stack = list(stack) # Convert the stack to a list.\n    stack = stack[::-1] # Reverse the list in place.\n    \n    # Find the pivot and swap it with the last element.\n    pivot = stack.pop()\n    \n    # Find the index of the element smaller than the pivot.\n    lo = 0\n    hi = len(stack) - 1\n    \n    while lo <= hi:\n        while lo <= hi and stack[lo] <= pivot:\n            lo += 1\n        while lo <= hi and stack[hi] >= pivot:\n            hi -= 1\n        if lo <= hi:\n            stack[lo], stack[hi] = stack[hi], stack[lo]\n        else:\n            break\n    \n    # Reverse the stack.\n    stack = stack[::-1]\n    \n    # Return the pivot index.\n    return hi\n    \ndef partition_stack_using_python_list(stack, p): \n    '''\n    Write a function to find the partition index.\n    '''\n    \n    # This is a Python list version of the algorithm.\n    \n    stack = list(stack) # Convert the stack to a list.\n    stack = stack[::-1] # Reverse the list in place.\n    \n    # Find the pivot and swap it with the last element.\n    pivot = stack.pop()\n    \n    # Find the index of the element smaller than the pivot.\n    lo = 0\n    hi = len(stack) - 1\n    \n    while lo <= hi:\n        while lo <= hi and stack[lo] <= pivot:\n            lo += 1\n        while lo <= hi and stack[hi] >= pivot:\n            hi -= 1\n        if lo <= hi:\n            stack[lo], stack[hi] = stack[hi], stack[lo]\n        else:\n            break\n    \n    # Reverse the stack.\n    stack = stack[::-1]\n    \n    # Return the pivot index.\n    return hi\n    \ndef sort_stack_using_python(stack): \n    '''\n    Write a function to sort stack using the following sort rules:\n    1. The elements are sorted in ascending order.\n    2. The elements on the top of the stack are sorted in descending order.\n    3. Elements on the top of the stack that are equal are sorted in ascending order.\n    4. Elements that are not on the top of the stack are sorted in ascending order.\n    '''\n    \n    # This is a Python list version of the algorithm.\n    \n    # Sort the stack.\n    stack = sorted(stack, reverse=True)\n    \n    # Reverse the stack.\n    stack = stack[::-1]\n    \n    return stack\n    \ndef sort_stack_using_python_list(stack): \n    '''\n    Write a function to sort stack using the following sort rules:\n    1. The elements are sorted in ascending order.\n    2. The elements on the top of the stack are sorted in descending order.\n    3. Elements on the top of the stack that are equal are sorted in ascending order.\n    4. Elements that are not on the top of the stack are sorted in ascending order.\n    '''\n    \n    # This is a Python list version of the algorithm.\n    \n    # Sort the stack.\n    stack = sorted(stack)\n    \n    # Reverse the stack.\n    stack = stack[::-1]\n    \n    return stack\n    \ndef kth_element_using_python_list(stack, k): \n    '''\n    Write a function to find the kth element from the end of the stack."
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    if len(arr)==1:\n        return arr[0]\n    mid=len(arr)//2\n    if mid == arr[mid]:\n        return arr[mid]\n    if mid==arr[mid-1]:\n        return search(arr[:mid])\n    if mid==arr[mid+1]:\n        return search(arr[mid:])\n    if mid==arr[mid-1] and mid==arr[mid+1]:\n        return mid\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return arr[0]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    size=len(arr)\n    low=0\n    high=size-1\n    while low<=high:\n        mid=(low+high)//2\n        if arr[mid]==arr[mid+1]:\n            low=mid+2\n        else:\n            high=mid-1\n    return arr[low]\nprint(search([1,2,2,3,3,3,4,4,4,4,5,5]))\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # code here\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return None\n    d = {}\n    for i in arr:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in d:\n        if d[i] == 1:\n            return i\n    return None\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    from collections import Counter\n    count = Counter(arr)\n    for i in count:\n        if count[i] == 1:\n            return i\n        \n        \ndef search4(arr):\n    '''\n    Write a python function to find the element whose frequency of occurrence is the highest in a sorted array.\n    '''\n    from collections import Counter\n    count = Counter(arr)\n    return max(count.keys(), key=count.get)\n        \n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == arr[i + 1]:\n            return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    seen = {}\n    for i in range(len(arr)):\n        if arr[i] in seen:\n            seen[arr[i]] += 1\n        else:\n            seen[arr[i]] = 1\n    for i in range(len(arr)):\n        if seen[arr[i]] == 1:\n            return arr[i]\n        \n    \n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr.count(arr[i])==1:\n            return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if i > 0 and arr[i] == arr[i - 1]:\n            continue\n        return arr[i]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod_tuple = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            max_prod_tuple = max(max_prod_tuple, product(list1[i], list1[j]))\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    #start writing your code here\n    # print(list1)\n    length=len(list1)\n    if length<=1:\n        return None\n    max_prod=0\n    for i in range(0,length,2):\n        prod=list1[i][0]*list1[i+1][0]\n        if prod>max_prod:\n            max_prod=prod\n    for i in range(1,length,2):\n        prod=list1[i][1]*list1[i+1][1]\n        if prod>max_prod:\n            max_prod=prod\n    return max_prod\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    assert len(list1) > 0, \"List is empty!\"\n    assert all([isinstance(elem, tuple) for elem in list1]), \"One of the elements is not a tuple\"\n    assert all([len(elem) == 2 for elem in list1]), \"One of the elements is not a tuple\"\n    assert all([all(isinstance(elem, int) for elem in tup) for tup in list1]), \"One of the tuples elements is not an integer\"\n    assert all([all(len(elem) == 2 for elem in tup) for tup in list1]), \"One of the tuples elements is not a tuple\"\n    \n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = (list1[i][0] * list1[j][0]) + (list1[i][1] * list1[j][1])\n            max_product = max(max_product, product)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1)<2:\n        raise ValueError(\"Not enough values\")\n    list1.sort(key=lambda x: abs(x[0]))\n    list1.sort(key=lambda x: abs(x[1]))\n    if list1[0][0]>0:\n        return (-1,-1)\n    if list1[-1][1]<0:\n        return (-1,-1)\n    return (max(list1[0][0],list1[-1][1]),min(list1[0][1],list1[-1][0]))\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    '''\n    def max_product_tuple(list1):\n    Input: List of tuples where each tuple consists of two numbers (a,b)\n    Output: The maximum absolute product of a and b in a tuple\n    '''\n    def find_max_product(tuple1):\n        '''\n        def max_product_tuple(tuple1):\n        Input: List of tuples where each tuple consists of two numbers (a,b)\n        Output: The maximum absolute product of a and b in a tuple\n        '''\n        '''\n        Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n        '''\n        '''\n        def max_product_tuple(list1):\n        Input: List of tuples where each tuple consists of two numbers (a,b)\n        Output: The maximum absolute product of a and b in a tuple\n        '''\n        '''\n        Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n        '''\n        '''\n        def max_product_tuple(list1):\n        Input: List of tuples where each tuple consists of two numbers (a,b)\n        Output: The maximum absolute product of a and b in a tuple\n        '''\n        '''\n        Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n        '''\n        '''\n        def max_product_tuple(list1):\n        Input: List of tuples where each tuple consists of two numbers (a,b)\n        Output: The maximum absolute product of a and b in a tuple\n        '''\n        '''\n        Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n        '''\n        '''\n        def max_product_tuple(list1):\n        Input: List of tuples where each tuple consists of two numbers (a,b)\n        Output: The maximum absolute product of a and b in a tuple\n        '''\n        '''\n        Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n        '''\n        '''\n        def max_product_tuple(list1):\n        Input: List of tuples where each tuple consists of two numbers (a,b)\n        Output: The maximum absolute product of a and b in a tuple\n        '''\n        '''\n        Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n        '''\n        '''\n        def max_product_tuple(list1):\n        Input: List of tuples where each tuple consists of two numbers (a,b)\n        Output: The maximum absolute product of a and b in a tuple\n        '''\n        '''\n        Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n        '''\n        '''\n        def max_product_tuple(list1):\n        Input: List of tuples where each tuple consists of two numbers (a,b)\n        Output: The maximum absolute product of a and b in a tuple\n        '''\n        '''\n        Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n        '''\n        '''\n        def max_product_tuple(list1):\n        Input: List of tuples where each tuple consists of two numbers (a,b)\n        Output: The maximum absolute product of a and b in a tuple\n        '''\n        '''\n        Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n        '''\n        '''\n        def max_product_tuple(list1):\n        Input: List of tuples where each tuple consists of two numbers (a,b)\n        Output: The maximum absolute product of a and b in a tuple\n        '''\n        '''\n        Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n        '''\n        '''\n        def max_product_tuple(list1):\n        Input: List of tuples where each tuple consists of two numbers (a,b)\n        Output: The maximum absolute product of a and b in a tuple\n        '''\n        '''\n        Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n        '''\n        '''\n        def max_product_tuple(list1):\n        Input: List of tuples where each tuple consists of two numbers (a,b)\n        Output: The maximum absolute product of a and b in a tuple\n        '''\n        '''\n        Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n        '''\n        '''\n        def max_product_tuple(list1):\n        Input: List of tuples where each tuple consists of two numbers (a,b)\n        Output: The maximum absolute product of a and b in a tuple\n        '''\n        '''\n        Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n        '''\n        '''\n        def max_product_tuple(list1):\n        Input: List of tuples where each tuple consists of two numbers (a,b)\n        Output: The maximum absolute product of a and b in a tuple\n        '''\n        '''\n        Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n        '''\n        '''\n        def max_product_tuple(list1):\n        Input: List of tuples where each tuple consists of two numbers (a,b)\n        Output: The maximum absolute product of a and b in a tuple\n        '''\n        '''\n        Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n        '''\n        '''\n        def max_product_tuple(list1):\n        Input: List of tuples where each tuple consists of two numbers (a,b)\n        Output: The maximum absolute product of a and b in a tuple\n        '''\n        '''\n        Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n        '''\n        '''\n        def max_product_tuple(list1):\n        Input: List of tuples where each tuple consists of two numbers (a,b)\n        Output: The maximum absolute product of a and b in a tuple\n        '''\n        '''\n        Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n        '''\n        '''\n        def max_product_tuple(list1):\n        Input: List of tuples where each tuple consists of two numbers (a,b)\n        Output: The maximum absolute product of a and b in a tuple\n        '''\n        '''\n        Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n        '''\n        '''\n        def max_product_tuple(list1):\n        Input: List of tuples where each tuple consists of two numbers (a,b)\n        Output: The maximum absolute product of a and b in a tuple\n        '''\n        '''\n        Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n        '''\n        '''\n        def max_product_tuple(list1):\n        Input: List of tuples where each tuple consists of two numbers (a,b)\n        Output: The maximum absolute product of a and b in a tuple\n        '''\n        '''\n        Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n        '''\n        '''\n        def max_product_tuple(list1):\n        Input: List of tuples where each tuple consists of two numbers (a,b)\n        Output: The maximum absolute product of a and b in a tuple\n        '''\n        '''\n        Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n        '''\n        '''\n        def max_product_tuple(list1):\n        Input: List of tuples where each tuple consists of two numbers (a,b)\n        Output: The maximum absolute product of a and b in a tuple\n        '''\n        '''\n        Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n        '''\n        '''\n        def max_product_tuple(list1):\n        Input: Lis"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    n = len(list1)\n    max = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(list1[i][0] * list1[j][0]) > max:\n                max = abs(list1[i][0] * list1[j][0])\n    return max\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = None\n    \n    for i in range(0, len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if max_product == None:\n                max_product = product\n            if product > max_product:\n                max_product = product\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_num = list1[0][0]\n    max_num1 = list1[0][0]\n    for i in range(1, len(list1)):\n        if list1[i][0] > max_num:\n            max_num = list1[i][0]\n            max_num1 = list1[i][0]\n        elif list1[i][0] > max_num1:\n            max_num = list1[i][0]\n            max_num1 = list1[i][0]\n    return (max_num, max_num1)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    pairs = []\n    for i in range(len(list1) - 1):\n        pairs.append((list1[i], list1[i+1]))\n    max_product = max(pairs, key=lambda x: (x[0] * x[1]))\n    print(max_product)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    ans = 1\n    for i in list1:\n        ans = max(ans, max(i))\n    return ans\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = set()\n    for i in range(1,limit):\n        amicable_sum = sum(amicable)\n        if i!= amicable_sum and amicable_sum in amicable:\n            amicable.add(i)\n    return sum(amicable)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicables = 0\n    for i in range(1, limit + 1):\n        j = i\n        amicable_sum = 0\n        while True:\n            if j!= 1:\n                if is_amicable(i, j):\n                    amicable_sum += j\n                    i = j\n                    j = amicable_sum\n                else:\n                    break\n            else:\n                break\n        if amicable_sum!= 0:\n            sum_amicables += amicable_sum\n    return sum_amicables\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # amicable numbers: a*(b+c) = (a+b)*c\n    # return sum of all amicable numbers <= limit\n    \n    # set up accumulators\n    amicable_sum = 0\n    amicable_numbers_set = set()\n    \n    for i in range(1, limit):\n        # calculate set of amicable numbers from 1 to i\n        amicable_numbers_set.add(i)\n        amicable_sum += i\n        \n        # recursively find all amicable numbers with a loop\n        for j in range(1, i):\n            if i*j in amicable_numbers_set:\n                amicable_sum += i\n                amicable_numbers_set.add(i)\n                break\n                \n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit):\n        amicable_sum = sum(get_amicable_numbers(num))\n        if amicable_sum == num:\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    result = 0\n    for i in range(1,limit):\n        amicable_sum = sum_of_two_numbers_divided_by_total_numbers(i)\n        if amicable_sum > 1:\n            if amicable_sum == i:\n                result += i\n            else:\n                result += amicable_sum\n    return result\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_sum = 0\n    for i in range(1, limit):\n        amicable_numbers_sum += i\n        for j in range(i+1, limit):\n            if i == j:\n                continue\n            if i!= j and is_amicable(i, j):\n                amicable_numbers_sum += i + j\n    return amicable_numbers_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_dict = {1:1}\n    summ = 0\n    for i in range(2,limit):\n        for j in amicable_numbers_dict.keys():\n            if j > limit:\n                break\n            if i == j:\n                continue\n            elif i+j == j+i:\n                summ += i+j\n                amicable_numbers_dict[i] = j\n    print(summ)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable_numbers = 0\n    num_set = set()\n    \n    for num in range(1,limit):\n        sum_num_sum = 0\n        for i in range(1,num):\n            if i == num:\n                continue\n            if num in num_set:\n                continue\n            if sum_num_sum == num:\n                break\n            if num == sum_num_sum:\n                num_set.add(num)\n                num_set.add(sum_num_sum)\n            sum_num_sum += num\n        if sum_num_sum!= num:\n            sum_amicable_numbers += num\n    return sum_amicable_numbers\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def is_amicable(num):\n        '''\n        Return if a number is amicable\n        '''\n        divisors = []\n        for i in range(1, int(num/2)):\n            if num%i == 0:\n                divisors.append(i)\n        return len(divisors) == 2 and num!= sum(divisors)\n    amicable_nums = []\n    for num in range(1, limit):\n        if is_amicable(num) and num!= sum(num):\n            amicable_nums.append(num)\n    return sum(amicable_nums)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    s = 0\n    for i in range(2, limit + 1):\n        # calculate the sum of the amicable numbers\n        x = sum(sum(divisors(i)) for divisors in divisors(i))\n        # check if x is the same as i, if so, add to the sum\n        if i == x:\n            s += i\n    return s\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    r1 = (a.real**2+a.imag**2)**0.5\n    r2 = (b.real**2+b.imag**2)**0.5\n    c = (a.real*b.real+a.imag*b.imag)\n    return cmath.acos(c/(r1*r2))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (cmath.phase(a) + cmath.phase(b)) % (2*cmath.pi)\ndef main():\n    '''\n    Write a program that takes the real and imaginary part of \n    a complex number as input and prints the corresponding \n    theta (angle) and phi (phase) of the complex number.\n    '''\n    a = float(input())\n    b = float(input())\n    print(angle_complex(a,b))\nif __name__=='__main__':\n    main()"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # type(a) --> float\n    # type(b) --> float\n    # abs(a) --> float\n    # abs(b) --> float\n    # cmath.phase(a) --> complex\n    # cmath.phase(b) --> complex\n    # abs(cmath.phase(a)) --> float\n    # abs(cmath.phase(b)) --> float\n    # angle(a) --> float\n    # angle(b) --> float\n    # cmath.polar(a) --> tuple\n    # cmath.polar(b) --> tuple\n    # cmath.polar(b[0]) --> complex\n    # cmath.polar(b[1]) --> complex\n    # cmath.polar(b[1]) --> complex\n    # cmath.polar(a[0]) --> complex\n    # cmath.polar(a[1]) --> complex\n    # cmath.polar(b) --> tuple\n    # cmath.polar(a) --> tuple\n    # cmath.rect(b) --> complex\n    # cmath.rect(a) --> complex\n    # cmath.rect(b[0]) --> complex\n    # cmath.rect(b[1]) --> complex\n    # cmath.rect(a[0]) --> complex\n    # cmath.rect(a[1]) --> complex\n    # cmath.rect(b) --> tuple\n    # cmath.rect(a) --> tuple\n    # cmath.rect(b[0]) --> tuple\n    # cmath.rect(b[1]) --> tuple\n    # cmath.rect(a[0]) --> tuple\n    # cmath.rect(a[1]) --> tuple\n    # cmath.rect(b) --> complex\n    # cmath.rect(a) --> complex\n    # cmath.rect(b[0]) --> complex\n    # cmath.rect(b[1]) --> complex\n    # cmath.rect(a[0]) --> complex\n    # cmath.rect(a[1]) --> complex\n    # cmath.rect(a) --> tuple\n    # cmath.rect(b) --> tuple\n    # cmath.rect(b[0]) --> tuple\n    # cmath.rect(b[1]) --> tuple\n    # cmath.rect(a[0]) --> tuple\n    # cmath.rect(a[1]) --> tuple\n    # cmath.rect(a) --> complex\n    # cmath.rect(b) --> complex\n    # cmath.rect(b[0]) --> complex\n    # cmath.rect(b[1]) --> complex\n    # cmath.rect(a[0]) --> complex\n    # cmath.rect(a[1]) --> complex\n    # cmath.rect(a) --> tuple\n    # cmath.rect(b) --> tuple\n    # cmath.rect(b[0]) --> tuple\n    # cmath.rect(b[1]) --> tuple\n    # cmath.rect(a[0]) --> tuple\n    # cmath.rect(a[1]) --> tuple\n    # cmath.rect(a) --> complex\n    # cmath.rect(b) --> complex\n    # cmath.rect(b[0]) --> complex\n    # cmath.rect(b[1]) --> complex\n    # cmath.rect(a[0]) --> complex\n    # cmath.rect(a[1]) --> complex\n    # cmath.rect(a) --> tuple\n    # cmath.rect(b) --> tuple\n    # cmath.rect(b[0]) --> tuple\n    # cmath.rect(b[1]) --> tuple\n    # cmath.rect(a[0]) --> tuple\n    # cmath.rect(a[1]) --> tuple\n    # cmath.rect(a) --> complex\n    # cmath.rect(b) --> complex\n    # cmath.rect(b[0]) --> complex\n    # cmath.rect(b[1]) --> complex\n    # cmath.rect(a[0]) --> complex\n    # cmath.rect(a[1]) --> complex\n    # cmath.rect(a) --> tuple\n    # cmath.rect(b) --> tuple\n    # cmath.rect(b[0]) --> tuple\n    # cmath.rect(b[1]) --> tuple\n    # cmath.rect(a[0]) --> tuple\n    # cmath.rect(a[1]) --> tuple\n    # cmath.rect(a) --> complex\n    # cmath.rect(b) --> complex\n    # cmath.rect(b[0]) --> complex\n    # cmath.rect(b[1]) --> complex\n    # cmath.rect(a[0]) --> complex\n    # cmath.rect(a[1]) --> complex\n    # cmath.rect(a) --> tuple\n    # cmath.rect(b) --> tuple\n    # cmath.rect(b[0]) --> tuple\n    # cmath.rect(b[1]) --> tuple\n    # cmath.rect(a[0]) --> tuple\n    # cmath.rect(a[1]) --> tuple\n    # cmath.rect(a) --> complex\n    # cmath.rect(b) --> complex\n    # cmath.rect(b[0]) --> complex\n    # cmath.rect(b[1]) --> complex\n    # cmath.rect(a[0]) --> complex\n    # cmath.rect(a[1]) --> complex\n    # cmath.rect(a) --> tuple\n    # cmath.rect(b) --> tuple\n    # cmath.rect(b[0]) --> tuple\n    # cmath.rect(b[1]) --> tuple\n    # cmath.rect(a[0]) --> tuple\n    # cmath.rect(a[1]) --> tuple\n    # cmath.rect(a) --> complex\n    # cmath.rect(b) --> complex\n    # cmath.rect(b[0]) --> complex\n    # cmath.rect(b[1]) --> complex\n    # cmath.rect(a[0]) --> complex\n    # cmath.rect(a[1]) --> complex\n    # cmath.rect(a) --> tuple\n    # cmath.rect(b) --> tuple\n    # cmath.rect(b[0]) --> tuple\n    # cmath.rect(b[1]) --> tuple\n    # cmath.rect(a[0]) --> tuple\n    # cmath.rect(a[1]) --> tuple\n    # cmath.rect(a) --> complex\n    # cmath.rect(b) --> complex\n    # cmath.rect(b[0]) --> complex\n    # cmath.rect(b[1]) --> complex\n    # cmath.rect(a[0]) --> complex\n    # cmath.rect(a[1]) --> complex\n    # cmath.rect(a) --> tuple\n    # cmath.rect(b) --> tuple\n    # cmath.rect(b[0]) --> tuple\n    # cmath.rect(b[1]) --> tuple\n    # cmath.rect(a[0]) --> tuple\n    # cmath.rect(a[1]) --> tuple\n    # cmath.rect(a) --> complex\n    # cmath.rect(b) --> complex\n    # cmath.rect(b[0]) --> complex\n    # cmath.rect(b[1]) --> complex\n    # cmath.rect(a[0]) --> complex\n    # cmath.rect(a[1]) --> complex\n    # cmath.rect(a) --> tuple\n    # cmath.rect(b) --> tuple\n    # cmath.rect(b[0]) --> tuple\n    # cmath.rect(b[1]) --> tuple\n    # cmath.rect(a[0]) --> tuple\n    # cmath.rect(a[1]) --> tuple\n    # cmath.rect(a) --> complex\n    # cmath.rect(b) --> complex\n    # cmath.rect(b[0]) --> complex\n    # cmath.rect(b[1]) --> complex\n    # cmath.rect(a[0]) --> complex\n    # cmath.rect(a[1]) --> complex\n    # cmath.rect(a) --> tuple\n    # cmath.rect(b) --> tuple\n    # cmath.rect(b[0]) --> tuple\n    # cmath.rect(b[1]) --> tuple\n    # cmath.rect(a[0]) --> tuple\n    # cmath.rect(a[1]) --> tuple\n    # cmath.rect(a) --> complex\n    # cmath.rect"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b)\n    return angle\ndef print_angle(a):\n    '''\n    Write a function that takes a complex number as an argument and returns the angle of the complex number.\n    '''\n    angle = cmath.phase(a)\n    print(angle)\ndef real_part(a):\n    '''\n    Write a function that takes a complex number as an argument and returns the real part of that complex number.\n    '''\n    real = cmath.real(a)\n    return real\ndef imag_part(a):\n    '''\n    Write a function that takes a complex number as an argument and returns the imaginary part of that complex number.\n    '''\n    imaginary = cmath.imag(a)\n    return imaginary\ndef polar_coordinate(a):\n    '''\n    Write a function that takes a complex number as an argument and returns its polar coordinates.\n    '''\n    #Determinant of complex matrix\n    d = cmath.sqrt(a[0]**2 + a[1]**2)\n    #Theta\n    theta = cmath.phase(a)\n    #Magnitude\n    mag = cmath.polar(a)[1]\n    return d,theta,mag\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    print(a,b)\n    if a.imag == 0 and b.imag == 0:\n        return cmath.phase(a)\n    elif a.imag == 0:\n        return cmath.phase(b)\n    elif b.imag == 0:\n        return cmath.phase(a)\n    else:\n        return (cmath.phase(a)-cmath.phase(b))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    assert type(a)==complex, f'Argument a is not a complex number.'\n    assert type(b)==complex, f'Argument b is not a complex number.'\n    return(cmath.phase(a+b)/2)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a1 = a.real\n    b1 = b.real\n    c1 = a.imag\n    d1 = b.imag\n    A = (a1**2+b1**2-c1**2-d1**2)/(2*c1*d1)\n    C = ((a1**2+b1**2+c1**2+d1**2)/2)*math.sin(math.acos(A))\n    return(C)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a.imag==0 and a.real==0:\n        return \"0\"\n    if a.real==0:\n        if a.imag==0:\n            return \"0\"\n        else:\n            return str(cmath.phase(a))+\"i\"\n    if a.imag==0:\n        return str(cmath.phase(a))\n    else:\n        return str(cmath.phase(a))+\"i\"\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_diff = 0\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            length += 1\n        else:\n            length -= 1\n        if length < 0:\n            break\n    return length\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0, count_1 = 0, 0\n    max_diff, length = 0, len(string)\n    i = 0\n    while i < length:\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        i += 1\n        if max_diff < count_0 - count_1:\n            max_diff = count_0 - count_1\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    dp = [[0 for i in range(2)] for j in range(n)]\n    \n    for i in range(n): \n        dp[i][0] = 0 if string[i] == '0' else 1\n        dp[i][1] = dp[i - 1][0] + dp[i - 1][1] \n        \n    for i in range(n): \n        for j in range(2): \n            if j == 1: \n                if i == 0: \n                    continue\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) \n            else: \n                if i == 0: \n                    dp[i][j] = dp[i][j - 1] \n                else: \n                    if string[i - 1] == '1': \n                        dp[i][j] = max(dp[i - 1][j - 1] + dp[i - 1][j], dp[i][j - 1]) \n                    else: \n                        dp[i][j] = max(dp[i - 1][j - 1] + dp[i - 1][j], dp[i][j - 1]) \n    \n    max_diff = max(dp[-1][0], dp[-1][1]) \n    print(dp[-1]) \n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    N = len(string)\n    \n    count = 0\n    max_count = 0\n    \n    for i in range(1, N):\n        if string[i-1] == '0':\n            count = 0\n        else:\n            count += 1\n        \n        if string[i] == '0':\n            count = 0\n        else:\n            count += 1\n        \n        if count > max_count:\n            max_count = count\n    return max_count\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    def find_substring_length(string, n):\n        count = 0\n        for i in range(len(string)):\n            for j in range(i, len(string)):\n                substring = string[i:j]\n                if (substring.count('0') == len(substring)) and (substring.count('1') == n - len(substring)):\n                    count += 1\n        return count\n    return find_substring_length(string, n)\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return 0\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    n = len(string)\n    count = 0\n    \n    if n==0: return 0\n    if n==1: return 1\n    if n==2: return 1\n    \n    for i in range(n):\n        if string[i]=='0':\n            count += 1\n        else:\n            count -= 1\n    \n    return count\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    prev = 0\n    length = 0\n    for x in string:\n        if x == '0':\n            prev = 0\n        else:\n            prev = 1\n        length = max(length, prev - prev + 1)\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    a=[]\n    for i in range(len(string)):\n        if string[i]=='0':\n            a.append(i)\n    max_diff=0\n    for i in range(len(a)):\n        if i==0:\n            max_diff=abs(a[i]-a[i+1])\n        elif i==len(a)-1:\n            max_diff=max(max_diff,abs(a[i]-a[i-1]))\n        else:\n            max_diff=max(max_diff,abs(a[i]-a[i-1]),abs(a[i+1]-a[i]))\n    return max_diff\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return int((a * b) / math.gcd(a, b))\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    a = abs(a)\n    b = abs(b)\n    if a > b:\n        a,b = b,a\n    c = 0\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            c += i\n    return c\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum1=1\n    for i in range(1,min(a,b)+1):\n        if(a%i==0 and b%i==0):\n            sum1=sum1*i\n    print(\"Sum of divisors is\",sum1)\n    "
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = 1\n    for i in range(1,min(a,b)+1):\n        if a%i == 0 and b%i == 0:\n            c = c*i\n    return c\n        "
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a+b \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    n=[]\n    for i in range(1,a+1):\n        if a%i==0:\n            n.append(i)\n    for i in range(1,b+1):\n        if b%i==0:\n            n.append(i)\n    c=0\n    for i in n:\n        if i in n:\n            c+=i\n    return c\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    count=0\n    for i in range(1,a):\n        if a%i==0 and b%i==0:\n            count+=i\n    return count\n    \n    \ndef main():\n    print(sum(12,13))\n    \n    \nif __name__=='__main__':\n    main()"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = []\n    for i in range(1,a+1):\n        if (a%i == 0) and (b%i == 0):\n            c.append(i)\n    return sum(c)\nsum(25,50)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    import math\n    m,n=a,b\n    a_divisors=[]\n    b_divisors=[]\n    gcd=1\n    # Calculate the GCD of a and b\n    while m%gcd!=0 or n%gcd!=0:\n        gcd=gcd-1\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    a = int(a)\n    b = int(b)\n    \n    if a < b:\n        a,b = b,a\n        \n    divisor = 1\n    common = 2\n    \n    while(a >= divisor and b >= divisor):\n        if a%divisor == 0 and b%divisor == 0:\n            common = divisor\n        divisor += 1\n    \n    return common\n        \n        \nprint(sum(15,15)) # => 10 \nprint(sum(15,10)) # => 5\nprint(sum(4,4)) # => 4\nprint(sum(3,9)) # => 3\nprint(sum(3,5)) # => 6\nprint(sum(20,2)) # => 13\nprint(sum(20,7)) # => 9\nprint(sum(32,24)) # => 16\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # if x * y == 0:\n    #     return 0\n    # else:\n    #     return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # Output in the following format:\n    # x(base) * y(base)\n    # \n    # What are the base/2's?\n    # \n    # The last digit of the output number should be zero\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n    \ndef add_int(x, y):\n    '''\n    Write a function to add two integers.\n    '''\n    return x + y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if not isinstance(x, int) or not isinstance(y, int):\n        raise TypeError(\"x and y must be integers!\")\n    else:\n        return x * y\n    "
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return list(filter(lambda x: len(x) > n, str))\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    l=[]\n    for i in range(len(str)):\n        if len(str[i])>n:\n            l.append(str[i])\n    return l\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    n_length = []\n    for i in str:\n        if len(i) > n:\n            n_length.append(i)\n    return n_length\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in str:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    #print('str:', str)\n    result = []\n    for word in str:\n        if len(word) > n:\n            result.append(word)\n    #print('result:', result)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return filter(lambda x: len(x) > n, str)\nprint(long_words(10, ['word', 'iwrod','supercalifragilisticexpialidocious']))\nprint(long_words(5, ['word', 'iwrod','supercalifragilisticexpialidocious']))\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [x for x in str.split() if len(x) > n]\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # define a function that checks whether the sum of the entries in a given row\n    # or column is equal to the total of the whole matrix\n    def row_sum(matrix, row):\n        sum_of_row = sum(matrix[row])\n        return sum_of_row\n        \n    def column_sum(matrix, column):\n        sum_of_column = 0\n        for row in range(len(matrix)):\n            sum_of_column += matrix[row][column]\n        return sum_of_column\n    \n    # loop through each of the rows and columns and check if they sum up to\n    # the total of the whole matrix\n    # if they do not sum up to the total of the matrix, return false\n    # if they do, return true\n    for row in range(len(my_matrix)):\n        for column in range(len(my_matrix[row])):\n            if row_sum(my_matrix, row)!= my_matrix[row][column]:\n                return False\n            if column_sum(my_matrix, column)!= my_matrix[row][column]:\n                return False\n    return True\n    \n    \ndef longest_palindrome_subsequence(str1, str2):\n    '''\n    Given two strings, write a function to find the length of the longest\n    palindrome subsequence that only includes elements from the first string\n    and not the second string.\n    '''\n    # create a dp table with the first row and column initialized with 0\n    dp = [[0] * (len(str1) + 1) for _ in range(len(str2) + 1)]\n    # fill in the table using the 'dp' array\n    for row in range(1, len(dp)):\n        for col in range(1, len(dp[row])):\n            # if both the chars match, we can only include one of them, so we can just take the\n            # maximum of the length of the two strings\n            if str1[col - 1] == str2[row - 1]:\n                dp[row][col] = dp[row - 1][col - 1] + 1\n            else:\n                # otherwise, we can either include either the char in the first string or the\n                # char in the second string\n                dp[row][col] = max(dp[row - 1][col], dp[row][col - 1])\n    # initialize the answer\n    longest_palindrome_subsequence = 0\n    # loop through each row and column to find the longest palindrome\n    for row in range(len(dp)):\n        for col in range(len(dp[row])):\n            # if the length of the current palindrome is larger than the longest palindrome\n            # so far, we can update our palindrome\n            if dp[row][col] > longest_palindrome_subsequence:\n                longest_palindrome_subsequence = dp[row][col]\n    return longest_palindrome_subsequence\n    \ndef unique_palindromes(str1, str2):\n    '''\n    Given two strings, write a function to return a new string made of the \n    first and last characters of both strings, and all other characters in between.\n    The new string should be as short as possible. If there are multiple possible answers,\n    return any one of them.\n    '''\n    # create a dp table with the first row and column initialized with 0\n    dp = [[0] * (len(str1) + 1) for _ in range(len(str2) + 1)]\n    # fill in the table using the 'dp' array\n    for row in range(1, len(dp)):\n        for col in range(1, len(dp[row])):\n            # if both the chars match, we can only include one of them, so we can just take the\n            # maximum of the length of the two strings\n            if str1[col - 1] == str2[row - 1]:\n                dp[row][col] = dp[row - 1][col - 1] + 1\n            else:\n                # otherwise, we can either include either the char in the first string or the\n                # char in the second string\n                dp[row][col] = max(dp[row - 1][col], dp[row][col - 1])\n    # initialize the answer\n    longest_palindrome_subsequence = 0\n    # loop through each row and column to find the longest palindrome\n    for row in range(len(dp)):\n        for col in range(len(dp[row])):\n            # if the length of the current palindrome is larger than the longest palindrome\n            # so far, we can update our palindrome\n            if dp[row][col] > longest_palindrome_subsequence:\n                longest_palindrome_subsequence = dp[row][col]\n    # create an empty list to store the generated palindrome\n    palindrome = []\n    # loop through each column and row and extract the characters from the table\n    for row in range(len(dp)):\n        for col in range(len(dp[row])):\n            # check if the row or column is greater than the longest palindrome\n            if dp[row][col] > longest_palindrome_subsequence:\n                # create a string out of the characters\n                new_palindrome = str1[col - dp[row][col]: col + 1]\n                # if the length of the new palindrome is greater than 0, add it to the list\n                if len(new_palindrome) > 0:\n                    palindrome.append(new_palindrome)\n    # if the length of the palindrome list is greater than 0, return the longest one\n    if len(palindrome) > 0:\n        return max(palindrome)\n    return ''\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if not check_magic_square(my_matrix):\n        return False\n    # your code here\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    \n    if rows!= cols:\n        return False\n    \n    magic_number = 1\n    magic_number_sum = 0\n    \n    for i in range(rows):\n        for j in range(cols):\n            magic_number_sum += my_matrix[i][j]\n            \n    if magic_number_sum!= magic_number:\n        return False\n    \n    return True\n    \n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if square has a magic property\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    squares = []\n    n = len(my_matrix)\n    for i in range(0, n):\n        for j in range(0, n):\n            squares.append(my_matrix[i][j])\n    if len(squares)!= n**2:\n        return False\n    squares = sorted(squares)\n    s1 = squares[0]\n    s2 = squares[n-1]\n    s3 = squares[n**2 - 1]\n    s4 = squares[n**2 - n]\n    s5 = squares[n**2 - n + 1]\n    s6 = squares[n**2 - 2]\n    s7 = squares[n**2 - n + 2]\n    s8 = squares[n**2 - n + 3]\n    if s1 == s2 == s3 == s4 == s5 == s6 == s7 == s8:\n        return True\n    return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    my_matrix = [list(map(int,my_matrix))]\n    my_matrix = my_matrix[0]\n    col_len = len(my_matrix)\n    row_len = len(my_matrix[0])\n    if row_len!= col_len:\n        return False\n    if row_len % 2 == 1:\n        return False\n    checker = True\n    #updater = False\n    updater = []\n    for i in range(0,row_len):\n        if my_matrix[i]!= [0]*len(my_matrix):\n            checker = False\n            updater = my_matrix\n        else:\n            updater = my_matrix\n    for i in range(0,row_len):\n        if updater[i]!= [0]*row_len:\n            checker = False\n        else:\n            updater[i] = [0]*row_len\n    if checker == True:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    l = len(my_matrix)\n    for i in range(0, l):\n        row = my_matrix[i]\n        if sum(row)!= l*sum(row) or sum(row[i::l])!= l*sum(row[i::l]):\n            return False\n    \n    for i in range(0, l):\n        col = zip(*my_matrix)\n        if sum(col)!= l*sum(col) or sum(col[i::l])!= l*sum(col[i::l]):\n            return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix) == 0 or my_matrix == None:\n        print('Invalid input')\n        return\n    if len(my_matrix) == 1 and len(my_matrix[0]) == 1:\n        if my_matrix[0][0]!= 0:\n            print('Invalid input')\n            return\n        else:\n            print('Magic square')\n            return\n    if len(my_matrix)!= len(my_matrix[0]):\n        print('Invalid input')\n        return\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    assert isinstance(my_matrix, list)\n    # Check that each row of the matrix is of the same length\n    assert all([len(my_matrix[x]) == len(my_matrix) for x in range(len(my_matrix))])\n    # Check that each row of the matrix is of equal length\n    assert all([len(my_matrix[x]) == len(my_matrix) for x in range(len(my_matrix))])\n    \n    # Check that the rows of the matrix are in order\n    assert all([all([x == y for x, y in zip(my_matrix[x], my_matrix[x+1])]) for x in range(len(my_matrix)-1)])\n    \n    # Check that the columns of the matrix are in order\n    assert all([all([x == y for x, y in zip(my_matrix[x], my_matrix[x+1])]) for x in range(len(my_matrix[0])-1)])\n    \n    # Check that the first element of each row is equal to 1\n    assert all([x == 1 for x in my_matrix[0]])\n    \n    # Check that the first element of each column is equal to 1\n    assert all([x == 1 for x in my_matrix[0]])\n    \n    # Check that the last element of each row is equal to 1\n    assert all([x == 1 for x in my_matrix[-1]])\n    \n    # Check that the last element of each column is equal to 1\n    assert all([x == 1 for x in my_matrix[-1]])\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    m = my_matrix\n    if not m or not isinstance(m,list):\n        print('It is not a matrix!')\n        return False\n    if len(m)!= len(m[0]):\n        print('It is not a square matrix!')\n        return False\n    else:\n        #print(m)\n        for i in range(len(m)):\n            if len(m)!= len(m[0]):\n                return False\n            #print(m[i])\n        \n        if (len(m) % 2!= 0):\n            return False\n        m_sum = 0\n        for i in range(len(m)):\n            if i % 2!= 0:\n                m_sum += m[i][i]\n                m_sum += m[i][len(m) - i - 1]\n                #print(m_sum)\n            else:\n                m_sum += m[i][i]\n                m_sum += m[i][len(m) - i - 1]\n                #print(m_sum)\n        if m_sum == 0:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    try:\n        if len(my_matrix) == len(my_matrix[0]):\n            return True\n        else:\n            return False\n    except TypeError:\n        return False\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    return max(counts.items(), key=lambda x: x[1])\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = {}\n    for num in nums:\n        if num not in d:\n            d[num] = 0\n        d[num] += 1\n    max_freq = 0\n    max_item = None\n    for item, freq in d.items():\n        if freq > max_freq:\n            max_item = item\n            max_freq = freq\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    occurrences = list(d.values())\n    max_occurrence = max(occurrences)\n    occurrences_with_max_occurrence = [(key, val) for key, val in d.items() if val == max_occurrence]\n    max_occurrence_key = max(occurrences_with_max_occurrence, key=lambda x: x[1])\n    return max_occurrence_key[0]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # return collections.Counter(nums).most_common(1)[0][0]\n    return max(collections.Counter(nums).values())\n    # return max(collections.Counter(nums).values())\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_count = 0\n    max_item = None\n    for item in nums:\n        freq[item] += 1\n        if freq[item] > max_count:\n            max_count = freq[item]\n            max_item = item\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_count = -1\n    item = None\n    for x in nums:\n        count = nums.count(x)\n        if count > max_count:\n            max_count = count\n            item = x\n    return item\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    occurrence_dict = defaultdict(int)\n    maximum_freq = 0\n    maximum_value = None\n    for item in nums:\n        occurrence_dict[item] += 1\n        if occurrence_dict[item] > maximum_freq:\n            maximum_freq = occurrence_dict[item]\n            maximum_value = item\n    return maximum_value\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    from collections import Counter\n    dic = {}\n    for i in nums:\n        if i not in dic:\n            dic[i] = 1\n        else:\n            dic[i] += 1\n    count = max(dic.values())\n    for k, v in dic.items():\n        if v == count:\n            return k\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    index_list = []\n    for index, letter in enumerate(str1):\n        if letter.lower() not in vowels:\n            index_list.append(index)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    a = 0\n    b = len(str1)-1\n    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]\n    while (a<=b):\n        if str1[a] in vowels:\n            a += 1\n        else:\n            str1 = str1[:a]+str1[b]+str1[a+1:b]+str1[a]+str1[b+1:]\n            b -= 1\n    return str1\n    \nprint(reverse_vowels(\"this is a test string\")"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1 = str1.lower()\n    vowels = 'aeiou'\n    new_string = ''\n    for letter in str1:\n        if letter not in vowels:\n            new_string += letter\n        else:\n            new_string += letter\n            new_string += letter\n    return new_string\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiouAEIOU\")\n    for i in vowels:\n        str1 = str1.replace(i, \"\")\n    return str1\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    if len(str1)<2:\n        return str1\n    rev_str=''\n    vowels=['a','e','i','o','u','A','E','I','O','U']\n    for i in range(len(str1)):\n        if str1[i] not in vowels:\n            rev_str=rev_str+str1[len(str1)-1-i]\n        else:\n            rev_str=rev_str+str1[i]\n    return rev_str\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','y']\n    a = list(str1)\n    l = len(a)\n    i = 0\n    j = l-1\n    while i < j:\n        if a[i].lower() not in vowels:\n            i += 1\n            continue\n        if a[j].lower() not in vowels:\n            j -= 1\n            continue\n        a[i], a[j] = a[j], a[i]\n        i += 1\n        j -= 1\n    return ''.join(a)\n    \n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiou')\n    string = list(str1)\n    for i in range(len(string)):\n        if string[i] not in vowels:\n            string[i], string[len(string)-i-1] = string[len(string)-i-1], string[i]\n    string = ''.join(string)\n    return string\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    return str1.replace('a','*').replace('e','*').replace('i','*').replace('o','*').replace('u','*')[::-1]\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str2 = ''\n    vowels = ('a','e','i','o','u','A','E','I','O','U')\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            str2 = str2 + str1[i]\n    return str2\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str2 = str1.lower()\n    vowels = \"aeiou\"\n    str3 = str2.maketrans(\"\",\"\",vowels)\n    return str2.translate(str3)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_str = ''\n    for i in tup1:\n        tup_str += str(i) +''\n    return tup_str\n    \nprint(tup_string((1,2,3)))\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_string = ''.join(map(str,tup1))\n    return tup_string\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    mystring =''.join(tup1)\n    return mystring\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return(str(tup1))\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \" \".join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = \"(\"\n    for i in tup1:\n        string += str(i)\n        if i == tup1[-1]:\n            string += \")\"\n        else:\n            string += \", \"\n    return string\n    \ndef list_from_tup(tup1):\n    '''\n    Write a function to convert a tuple to a list.\n    '''\n    return list(tup1)\n    \ndef double_list(lis1):\n    '''\n    Write a function to double each element in a list.\n    '''\n    new_list = []\n    for i in lis1:\n        new_list.append(i*2)\n    return new_list\n    \ndef list_reversed(lis1):\n    '''\n    Write a function to reverse a list.\n    '''\n    new_list = lis1[::-1]\n    return new_list\n    \ndef sort_list(lis1):\n    '''\n    Write a function to sort a list.\n    '''\n    lis1.sort()\n    return lis1\n    \ndef count_items(lis1):\n    '''\n    Write a function to count the number of items in a list.\n    '''\n    count = 0\n    for i in lis1:\n        count += 1\n    return count\n    \ndef check_if_is_palindrome(string1):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    string1 = str(string1)\n    new_string = \"\"\n    for i in string1:\n        new_string += i\n    if new_string == string1:\n        return True\n    return False\n    \ndef count_unique_items(lis1):\n    '''\n    Write a function to count the number of unique items in a list.\n    '''\n    return len(set(lis1))\n    \ndef sub_list_with_k_numbers(lis1, k):\n    '''\n    Write a function to find the sub list with k numbers in it.\n    '''\n    for i in range(len(lis1)):\n        if len(lis1[i:i+k]) == k:\n            return lis1[i:i+k]\n    return None\n    \ndef has_duplicates(lis1):\n    '''\n    Write a function to check whether a list contains duplicate items or not.\n    '''\n    if len(lis1) < 2:\n        return False\n    lis1 = list(set(lis1))\n    return len(lis1)!= len(lis1[0])\n    \ndef max_num_in_list(lis1):\n    '''\n    Write a function to find the maximum number in a list.\n    '''\n    lis1 = list(lis1)\n    if len(lis1) == 0:\n        return None\n    if len(lis1) == 1:\n        return lis1[0]\n    max_num = lis1[0]\n    for i in lis1:\n        if i > max_num:\n            max_num = i\n    return max_num\n    \ndef min_num_in_list(lis1):\n    '''\n    Write a function to find the minimum number in a list.\n    '''\n    lis1 = list(lis1)\n    if len(lis1) == 0:\n        return None\n    if len(lis1) == 1:\n        return lis1[0]\n    min_num = lis1[0]\n    for i in lis1:\n        if i < min_num:\n            min_num = i\n    return min_num\n    \ndef sum_all_elements_in_list(lis1):\n    '''\n    Write a function to sum up all the elements in a list.\n    '''\n    if len(lis1) == 0:\n        return None\n    lis1 = list(lis1)\n    sum_all = 0\n    for i in lis1:\n        sum_all += i\n    return sum_all\n    \ndef sum_all_odd_elements_in_list(lis1):\n    '''\n    Write a function to sum up all the odd elements in a list.\n    '''\n    if len(lis1) == 0:\n        return None\n    lis1 = list(lis1)\n    sum_odd = 0\n    for i in lis1:\n        if i % 2!= 0:\n            sum_odd += i\n    return sum_odd\n    \ndef sum_all_even_elements_in_list(lis1):\n    '''\n    Write a function to sum up all the even elements in a list.\n    '''\n    if len(lis1) == 0:\n        return None\n    lis1 = list(lis1)\n    sum_even = 0\n    for i in lis1:\n        if i % 2 == 0:\n            sum_even += i\n    return sum_even\n    \ndef find_min_element(lis1):\n    '''\n    Write a function to find the min element in a list.\n    '''\n    if len(lis1) == 0:\n        return None\n    min_val = lis1[0]\n    for i in lis1:\n        if i < min_val:\n            min_val = i\n    return min_val\n    \ndef find_max_element(lis1):\n    '''\n    Write a function to find the max element in a list.\n    '''\n    if len(lis1) == 0:\n        return None\n    max_val = lis1[0]\n    for i in lis1:\n        if i > max_val:\n            max_val = i\n    return max_val\n    \ndef average_list_elements(lis1):\n    '''\n    Write a function to find the average of all the elements in a list.\n    '''\n    if len(lis1) == 0:\n        return None\n    sum_all = 0\n    for i in lis1:\n        sum_all += i\n    avg_val = sum_all / len(lis1)\n    return avg_val\n    \ndef avg_list_elements_with_k(lis1, k):\n    '''\n    Write a function to find the average of a list of numbers after k.\n    '''\n    if len(lis1) == 0:\n        return None\n    if len(lis1) < k:\n        return None\n    avg = 0\n    for i in lis1:\n        if i < k:\n            avg += i\n    avg = avg / k\n    return avg\n    \ndef search_list(lis1, target):\n    '''\n    Write a function to search a number in a list.\n    '''\n    if len(lis1) == 0:\n        return None\n    for i in lis1:\n        if i == target:\n            return True\n    return False\n    \ndef sum_list_elements(lis1):\n    '''\n    Write a function to sum up a list of numbers.\n    '''\n    if len(lis1) == 0:\n        return None\n    sum_all = 0\n    for i in lis1:\n        sum_all += i\n    return sum_all\n    \ndef index_of_first_occurrence_of_target_element_in_list(lis1, target):\n    '''\n    Write a function to find the index of the first occurence of a target element in a list.\n    '''\n    if len(lis1) == 0:\n        return None\n    for i in range(len(lis1)):\n        if lis1[i] == target:\n            return i\n    return -1\n    \ndef index_of_last_occurrence_of_target_element_in_list(lis1, target):\n    '''\n    Write a function to find the index of the last occurence of a target element in a list.\n    '''\n    if len(lis1) == 0:\n        return None\n    for i in range(len(lis1) - 1, -1, -1):\n        if lis1[i] == target:\n            return i\n    return -1\n    \ndef count_list_occurrences_of_target_element_in_list(lis1, target):\n    '''\n    Write a function to count the occurrences of a target element in a list.\n    '''\n    count "
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    result = str(tup1)\n    return result\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Method-1\n    # s = ''\n    # for item in tup1:\n    #     s = s +'' + str(item)\n    # return s.strip()\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_str = ''\n    for i in range(len(tup1)):\n        tup_str += '%s,' % tup1[i]\n    return tup_str\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    #nums = [-2, -1, 0, 3, 4]\n    return sum([x for x in nums if x < 0])\nprint(sum_negativenum([-2, -1, 0, 3, 4]))\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([i for i in nums if i < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            sum += nums[i]\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # create a new list with negative numbers\n    new_list = []\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            new_list.append(nums[i])\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([i for i in nums if i < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([n for n in nums if n < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([-x for x in nums if x < 0])\n    #return sum([-x for x in nums if x < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    result = 0\n    # Base case \n    if n == 0:\n        return 1\n    for i in range(0,n): \n        result += 3*(2*i + 1)\n    return result\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        n = n-1\n        return (6*n-1) + (n%2)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return hexagonal_num(n-1) + 4*hexagonal_num(n-2)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 3\n    if n == 2:\n        return 5\n    else:\n        return hexagonal_num(n-1) + 2 * hexagonal_num(n-2)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n**2 * (3*n - 1) / 2\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = (1 + 3**0.5)**n\n    return num\n    \ndef fib(n):\n    '''\n    Write a function to find the nth Fibonacci number.\n    '''\n    if n < 0:\n        return 'input must be >= 0'\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    num = fib(n - 1) + fib(n - 2)\n    return num\n    \ndef pi(n):\n    '''\n    Write a function to compute the nth value of Pi.\n    '''\n    if n < 0:\n        return 'input must be >= 0'\n    if n == 0:\n        return 2\n    if n == 1:\n        return 3\n    if n == 2:\n        return 3\n    num = pi(n - 1) + 4/3 * pi(n - 2)\n    return num\n    \ndef exponential(base, n):\n    '''\n    Write a function to compute the nth value of exponential function.\n    '''\n    if n < 0:\n        return 'input must be >= 0'\n    if n == 0:\n        return 1\n    if n == 1:\n        return base\n    if n == 2:\n        return base * base\n    num = exponential(base, n - 1) * base\n    return num\n    \ndef factorial(n):\n    '''\n    Write a function to compute the factorial of n (n factorial).\n    '''\n    if n < 0:\n        return 'input must be >= 0'\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    num = factorial(n - 1) * n\n    return num\n    \ndef power(a, n):\n    '''\n    Write a function to compute the nth value of power function.\n    '''\n    if n < 0:\n        return 'input must be >= 0'\n    if n == 0:\n        return 1\n    if n == 1:\n        return a\n    if n == 2:\n        return a * a\n    num = power(a, n - 1) * a\n    return num\n    \ndef prime(n):\n    '''\n    Write a function to compute the nth prime.\n    '''\n    if n < 0:\n        return 'input must be >= 0'\n    if n == 0:\n        return 2\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    num = prime(n - 1) + 2\n    return num\n    \ndef number_of_ways(m, n):\n    '''\n    Write a function to compute the number of ways to fill a m by n matrix\n    with integers between 1 and n inclusive.\n    '''\n    if m < 0:\n        return 'input must be >= 0'\n    if n < 0:\n        return 'input must be >= 0'\n    if m == 0 or n == 0:\n        return 0\n    if m == 1 or n == 1:\n        return 1\n    num = number_of_ways(m - 1, n) + number_of_ways(m, n - 1)\n    return num\n    \ndef repeated_word(input_string):\n    '''\n    Write a function to find the first repeated word in a string.\n    '''\n    if input_string == '':\n        return 'input string must not be empty'\n    words = input_string.split(' ')\n    for word in words:\n        if words.count(word) > 1:\n            return word\n    return 'input string has no repeated words'\n    \ndef letter_frequency(input_string):\n    '''\n    Write a function to compute the frequency of letters in a string.\n    '''\n    if input_string == '':\n        return 'input string must not be empty'\n    letter = 'abcdefghijklmnopqrstuvwxyz'\n    freq = {letter[i]:0 for i in range(26)}\n    for letter in input_string:\n        if letter in freq:\n            freq[letter] += 1\n    return freq\n    \ndef puzzle_of_the_day():\n    '''\n    Write a function to get a puzzle of the day.\n    '''\n    import requests\n    from bs4 import BeautifulSoup\n    page = requests.get('https://www.pythonforbeginners.com/snake')\n    soup = BeautifulSoup(page.content, 'html.parser')\n    content = soup.find_all(class_='snake')\n    print('Puzzle of the day is:\\n')\n    for puzzle in content:\n        print(puzzle.get_text())\n    print('\\n')\n    \ndef grid_of_words():\n    '''\n    Write a function to print a grid of words.\n    '''\n    from random import choice, randint\n    from string import ascii_lowercase\n    print_grid = ''\n    for row in range(5):\n        for column in range(5):\n            #print_grid += f'{choice(ascii_lowercase)}\\t'\n            print_grid += f'{choice(ascii_lowercase)}{(column + 1)}' + '\\t'\n        print_grid += '\\n'\n    print(print_grid)\n    \ndef count_pattern(pattern, text):\n    '''\n    Write a function to count the number of times a pattern occurs in text\n    '''\n    text = text.lower()\n    pattern = pattern.lower()\n    count = 0\n    for i in range(len(text) - len(pattern) + 1):\n        if text[i:i + len(pattern)] == pattern:\n            count += 1\n    return count\n    \ndef pattern_matching(pattern, text):\n    '''\n    Write a function to find the position of the first occurrence of a pattern\n    in a text.\n    '''\n    text = text.lower()\n    pattern = pattern.lower()\n    start_index = 0\n    for i in range(len(text) - len(pattern) + 1):\n        if text[i:i + len(pattern)] == pattern:\n            start_index = i\n            break\n    return start_index\n    \ndef is_balanced(expr):\n    '''\n    Write a function to check if a given expression is balanced or not\n    '''\n    balanced = True\n    stack = []\n    op = {\n        '(':')',\n        '[':']',\n        '{':'}',\n    }\n    for ch in expr:\n        if ch in op:\n            stack.append(ch)\n        elif ch in op.values():\n            if len(stack) > 0 and stack[-1] in op.keys() and ch == op[stack[-1]]:\n                stack.pop()\n            else:\n                balanced = False\n                break\n    if balanced and len(stack) == 0:\n        return True\n    return False\n    \ndef is_balanced2(expr):\n    '''\n    Write a function to check if a given expression is balanced or not\n    '''\n    balanced = True\n    stack = []\n    op = {\n        '(':')',\n        '[':']',\n        '{':'}',\n    }\n    for ch in expr:\n        if ch in op:\n            stack.append(ch)\n        elif ch in op.values():\n            if len(stack) > 0 and stack[-1] in op.keys() and ch == op[stack[-1]]:\n                stack.pop()\n            else:\n                balanced = False\n                break\n    if balanced and len(stack) == 0:\n        return True\n    return False\n    \ndef is_balanced3(expr):\n    '''\n    Write a function to check if a given expression is balanced or not\n    '''\n    balanced = True\n    stack = []\n    op = {\n        '(':')',\n        '[':']',\n        '{':'}',\n    }\n    for ch in expr:\n        if ch in op:\n            stack.append(ch)\n        elif ch in op.values():\n            if len(stack) > 0 and stack[-1] in op.keys() and ch == op[stack[-1]]:\n                stack.pop()\n            else:\n                balanced = False\n                break\n    if balanced and len(stack) == 0:\n        return True\n    return False"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 6\n    elif n == 2:\n        return 12\n    else:\n        n -= 2\n        return (n * (3 * n - 1)) // 2\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    total = 0\n    for i in range(n): \n        total += i**2 * 3 \n    return total\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def divisors(n):\n        count = 1\n        count_list = []\n        while count <= n:\n            if n % count == 0:\n                count_list.append(count)\n            count += 1\n        return count_list\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (2 * (1 + sqrt(5)) ** n - 1) // 2\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Time: O(n)\n    # Space: O(1)\n    zero_count = 0\n    non_zero_count = 0\n    for i in nums:\n        if i == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return zero_count / non_zero_count\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return nums.count(0)/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return(len(nums)-sum(nums))\ndef zero_sum(nums):\n    '''\n    Write a function to return the sum of the zeroes in an array of integers.\n    '''\n    return(sum([0 if num == 0 else -1 for num in nums]))\ndef lower_contrast(nums):\n    '''\n    Write a function that takes a non-empty array of integers and returns an array of the same size. \n    Each element in the output array should be equal to the difference between the maximum and minimum of the input array.\n    If the input array contains a negative number, it should be treated as a zero (like in the case of the output array).\n    '''\n    nums_list = sorted(nums)\n    return([max(nums)-min(nums_list) if num > 0 else 0 for num in nums])\ndef sum_of_squares(nums):\n    '''\n    Write a function that takes a non-empty array of integers and returns an array of the same size. \n    Each element in the output array should be equal to the sum of the squares of the corresponding number in the input array.\n    '''\n    nums_list = sorted(nums)\n    return([num**2 if num>0 else 0 for num in nums_list])\ndef find_sum(nums):\n    '''\n    Write a function that takes a non-empty array of integers and returns the index of the largest element.\n    If the element is an even number, it should be ignored.\n    '''\n    nums_list = sorted(nums)\n    index = 0\n    while(index < len(nums_list)-1):\n        if nums_list[index]%2 == 0:\n            index+=1\n        else:\n            return(index)\n    return(index)\ndef find_sum_of_evens(nums):\n    '''\n    Write a function that takes a non-empty array of integers and returns the sum of the even numbers.\n    '''\n    nums_list = sorted(nums)\n    return(sum([num if num%2 == 0 else 0 for num in nums_list]))\ndef min_max_sum(nums):\n    '''\n    Write a function that takes a non-empty array of integers and returns a tuple of the minimum and maximum values.\n    '''\n    nums_list = sorted(nums)\n    return([min(nums_list), max(nums_list)])\ndef max_sum_subarray(nums):\n    '''\n    Write a function that takes a non-empty array of integers and returns the sum of the largest contiguous subarray.\n    '''\n    nums_list = sorted(nums)\n    max_list = nums_list[:]\n    for i in range(1, len(max_list)):\n        if max_list[i-1] > 0:\n            max_list[i] = max_list[i] + max_list[i-1]\n    return(max(max_list))\ndef max_sum_subarray_rec(nums):\n    '''\n    Write a function that takes a non-empty array of integers and returns the sum of the largest contiguous subarray.\n    '''\n    nums_list = sorted(nums)\n    max_list = nums_list[:]\n    for i in range(1, len(max_list)):\n        if max_list[i-1] > 0:\n            max_list[i] = max_list[i] + max_list[i-1]\n    max_sum = max_list[0]\n    for i in range(1, len(max_list)):\n        if max_list[i] > max_sum:\n            max_sum = max_list[i]\n    return(max_sum)\ndef middle_element(nums):\n    '''\n    Write a function that takes an array of integers and returns the middle element.\n    '''\n    return(nums[len(nums)//2])\ndef find_sum_of_two_evens(nums):\n    '''\n    Write a function that takes a non-empty array of integers and returns the sum of the even numbers.\n    '''\n    nums_list = sorted(nums)\n    return(sum([num if num%2 == 0 else 0 for num in nums_list]))\ndef count_single_digits(nums):\n    '''\n    Write a function that takes a non-empty array of integers and returns the count of the number of times that the digit 3 appears in the input array. \n    The number of times the digit 3 appears in an array of integers is defined as how many times it appears in the array.\n    '''\n    return(sum([1 if num%10 == 3 else 0 for num in nums]))\ndef sum_odd_squares(nums):\n    '''\n    Write a function that takes a non-empty array of integers and returns the sum of the odd numbers in the array. \n    The sum of the odd numbers in an array of integers is defined as the sum of the numbers, minus the sum of the even numbers in the array.\n    '''\n    nums_list = sorted(nums)\n    sum_odd = 0\n    for num in nums_list:\n        if num%2 == 1:\n            sum_odd+=num\n    return(sum_odd)\ndef sum_squares_of_evens(nums):\n    '''\n    Write a function that takes a non-empty array of integers and returns the sum of the even numbers. \n    The sum of the even numbers in an array of integers is defined as the sum of the numbers, minus the sum of the odd numbers in the array.\n    '''\n    nums_list = sorted(nums)\n    return(sum([num if num%2 == 0 else num**2 for num in nums_list]))\ndef length_of_longest_subarray(nums):\n    '''\n    Write a function that takes a non-empty array of integers and returns the length of the longest (non-empty) subarray. \n    The length of a subarray is defined as the number of the numbers in the subarray.\n    '''\n    nums_list = sorted(nums)\n    max_len = 0\n    for i in range(1, len(nums_list)):\n        if nums_list[i-1] < 0:\n            continue\n        if nums_list[i] - nums_list[i-1] > max_len:\n            max_len = nums_list[i] - nums_list[i-1]\n    return(max_len)\ndef length_of_longest_increase(nums):\n    '''\n    Write a function that takes a non-empty array of integers and returns the length of the longest increasing subarray. \n    The length of the longest increasing subarray is defined as the number of the numbers in the subarray.\n    '''\n    nums_list = sorted(nums)\n    max_len = 0\n    for i in range(1, len(nums_list)):\n        if nums_list[i-1] > nums_list[i]:\n            continue\n        if nums_list[i] - nums_list[i-1] > max_len:\n            max_len = nums_list[i] - nums_list[i-1]\n    return(max_len)\ndef sum_of_longest_subarray(nums):\n    '''\n    Write a function that takes a non-empty array of integers and returns the sum of the longest (non-empty) subarray. \n    The sum of the longest (non-empty) subarray is defined as the sum of the numbers in the subarray.\n    '''\n    nums_list = sorted(nums)\n    max_len = 0\n    max_sum = 0\n    for i in range(1, len(nums_list)):\n        if nums_list[i-1] > 0:\n            continue\n        if nums_list[i] - nums_list[i-1] > max_len:\n            max_len = nums_list[i] - nums_list[i-1]\n            max_sum = nums_list[i]\n    return(max_sum)\ndef length_of_longest_decreasing_subarray(nums):\n    '''\n    Write a functio"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    ones = 0\n    for i in nums:\n        if i == 0:\n            zeros += 1\n        else:\n            ones += 1\n    return zeros/ones\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    ones = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            ones += 1\n    return zeroes/ones\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    a = array('i',nums)\n    count = 0\n    for i in range(len(a)):\n        if a[i]==0:\n            count+=1\n    return count/len(a)\ndef zero_count2(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count / len(nums)\ndef count_triplets(arr,sum):\n    '''\n    Write a function to count the number of triplets of three integers in a given array whose sum equals a given value.\n    '''\n    count = 0\n    # init a map which contains the count of pairs\n    map = dict()\n    for i in range(len(arr)):\n        if sum-arr[i] in map:\n            count += map[sum-arr[i]]\n        if arr[i] in map:\n            map[arr[i]]+=1\n        else:\n            map[arr[i]]=1\n    return count\ndef count_triplets2(arr,sum):\n    '''\n    Write a function to count the number of triplets of three integers in a given array whose sum equals a given value.\n    '''\n    count = 0\n    # init a map which contains the count of pairs\n    map = dict()\n    for i in range(len(arr)):\n        if sum-arr[i] in map:\n            count += map[sum-arr[i]]\n        if arr[i] in map:\n            map[arr[i]]+=1\n        else:\n            map[arr[i]]=1\n    return count\ndef find_subset(arr,n,s):\n    '''\n    Write a function to find all subsets of a given array of n elements with sum equal to s.\n    '''\n    ret = set()\n    def find(arr,n,s,cur,out):\n        if s == 0:\n            ret.add(tuple(cur))\n        if s<0 or n == 0:\n            return\n        if s>arr[n-1]:\n            find(arr,n-1,s,cur,out)\n        else:\n            cur.append(arr[n-1])\n            find(arr,n-1,s-arr[n-1],cur,out)\n            cur.pop()\n            find(arr,n-1,s,cur,out)\n    find(arr,n,s,[],ret)\n    return ret\ndef find_subset2(arr,n,s):\n    '''\n    Write a function to find all subsets of a given array of n elements with sum equal to s.\n    '''\n    ret = set()\n    def find(arr,n,s,cur,out):\n        if s == 0:\n            ret.add(tuple(cur))\n        if s<0 or n == 0:\n            return\n        if s>arr[n-1]:\n            find(arr,n-1,s,cur,out)\n        else:\n            cur.append(arr[n-1])\n            find(arr,n-1,s-arr[n-1],cur,out)\n            cur.pop()\n            find(arr,n-1,s,cur,out)\n    find(arr,n,s,[],ret)\n    return ret\ndef swap(arr,i,j):\n    '''\n    Write a function to swap two integers in an array.\n    '''\n    temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\ndef count_rotations(arr,n):\n    '''\n    Write a function to count the number of rotations of an array.\n    '''\n    l = len(arr)\n    if n==l:\n        return 0\n    if n>l:\n        return -1\n    for i in range(n):\n        if arr[i]>arr[n]:\n            return i+1\n    return l-n+1\ndef count_rotations2(arr,n):\n    '''\n    Write a function to count the number of rotations of an array.\n    '''\n    l = len(arr)\n    if n==l:\n        return 0\n    if n>l:\n        return -1\n    for i in range(n):\n        if arr[i]>arr[n]:\n            return i+1\n    return l-n+1\ndef find_rotation_point(arr):\n    '''\n    Write a function to find the rotation point in an array of size n.\n    '''\n    rotations = count_rotations2(arr,0)\n    if rotations<0:\n        return -1\n    rotations = count_rotations2(arr,rotations)\n    if rotations < 0:\n        return -1\n    for i in range(rotations,len(arr)):\n        if arr[i]>arr[i+1]:\n            return i\n    return -1\ndef find_rotation_point2(arr):\n    '''\n    Write a function to find the rotation point in an array of size n.\n    '''\n    rotations = count_rotations2(arr,0)\n    if rotations<0:\n        return -1\n    rotations = count_rotations2(arr,rotations)\n    if rotations < 0:\n        return -1\n    for i in range(rotations,len(arr)):\n        if arr[i]>arr[i+1]:\n            return i\n    return -1\ndef find_rotation_point3(arr):\n    '''\n    Write a function to find the rotation point in an array of size n.\n    '''\n    rotations = count_rotations2(arr,0)\n    if rotations<0:\n        return -1\n    rotations = count_rotations2(arr,rotations)\n    if rotations < 0:\n        return -1\n    for i in range(rotations,len(arr)):\n        if arr[i]>arr[i+1]:\n            return i\n    return -1\ndef find_rotation_point4(arr):\n    '''\n    Write a function to find the rotation point in an array of size n.\n    '''\n    rotations = count_rotations2(arr,0)\n    if rotations<0:\n        return -1\n    rotations = count_rotations2(arr,rotations)\n    if rotations < 0:\n        return -1\n    for i in range(rotations,len(arr)):\n        if arr[i]>arr[i+1]:\n            return i\n    return -1\ndef find_rotation_point5(arr):\n    '''\n    Write a function to find the rotation point in an array of size n.\n    '''\n    rotations = count_rotations2(arr,0)\n    if rotations<0:\n        return -1\n    rotations = count_rotations2(arr,rotations)\n    if rotations < 0:\n        return -1\n    for i in range(rotations,len(arr)):\n        if arr[i]>arr[i+1]:\n            return i\n    return -1\ndef find_rotation_point6(arr):\n    '''\n    Write a function to find the rotation point in an array of size n.\n    '''\n    rotations = count_rotations2(arr,0)\n    if rotations<0:\n        return -1\n    rotations = count_rotations2(arr,rotations)\n    if rotations < 0:\n        return -1\n    for i in range(rotations,len(arr)):\n        if arr[i]>arr[i+1]:\n            return i\n    return -1\ndef find_rotation_point7(arr):\n    '''\n    Write a function to find the rotation point in an array of size n.\n    '''\n    rotations = count_rotations2(arr,0)\n    if rotations<0:\n        return -1\n    rotations = count_rotations2(arr,rotations)\n    if rotations < 0:\n        return -1\n    for i in range(rotations,len(arr)):\n        if arr[i]>arr[i+1]:\n        "
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return len([i for i in nums if i == 0])/len([i for i in nums if i!= 0])\nprint(zero_count([0, 1, 0, 1, 0, 1, 0, 1, 0]))\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # code here\n    power = 0\n    while n > 0:\n        n = n >> 1\n        power += 1\n    return power == 2\n    "
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while (n > 0):\n        if (n % 2 == 0) :\n            n = int(n/2)\n            if (n == 0) :\n                break\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    flag = True\n    while n!= 0:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            flag = False\n            break\n    return flag\n    "
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def is_power_of_two(n):\n        if n==1 or n==0:\n            return False\n        while n!=1:\n            if n % 2 == 0:\n                n=n/2\n            else:\n                return False\n        return True\n    #code here\n    if is_power_of_two(n)==True:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # TO-DO: complete this method\n    \n    n = int(n)\n    for i in range(1,5):\n        n = n - (n%i)\n        n = n//i\n        print(n)\n        if n == 0:\n            return True\n        \n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    def powerOfTwo(n): \n        '''\n        this function will return true if n is power of 2 else false\n        '''\n        while (n & n - 1) == 0:\n            return True\n        return False\n    \n    def SumOfPowersOfTwo(n): \n        '''\n        this function will return the sum of the powers of 2 \n        '''\n        sum = 0\n        while n > 0:\n            if powerOfTwo(n):\n                sum += n\n            n = n >> 1\n        return sum\n    \n    def isSumOfPowersOfTwo(n):\n        '''\n        this function will check if the given number is sum of powers of two or not\n        '''\n        if (SumOfPowersOfTwo(n) == n):\n            return True\n        else:\n            return False\n    \n    if type(n) is int and n > 0 and isSumOfPowersOfTwo(n):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return n%2==0 and (n-1)%2==0\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    #Initializing the array.\n    arr = [False]*10000\n    arr[0] = True\n    \n    #Setting all the non-positive and non-negative numbers to false.\n    for i in range(1,int(math.sqrt(n))+1):\n        if(n%i==0):\n            arr[i] = True\n            arr[n//i] = True\n    \n    #Checking whether all the numbers are True or not.\n    return all(arr)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if not n or n < 0: \n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 1: \n        return False\n    while n: \n        if n % 2 == 0: \n            n = n/2\n        else: \n            return False\n    return True\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2*pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14\n    return (pi * 2 * r)\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    \n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    #formula: circumference = 2 * PI * radius\n    return 2 * PI * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2 * pi * r\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    # flatten nested list\n    def flatten(list_of_lists):\n        return [item for sublist in list_of_lists for item in sublist]\n    \n    return flatten(test_list)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # print('input =', test_list)\n    # print('output =', set(test_list))\n    return set(test_list)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set(sum(test_list, []))\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return reduce((lambda x, y: x + y), test_list)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    #print(test_list)\n    return set(test_list)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        for subitem in item:\n            result.append(subitem)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    #print(test_list)\n    nested_list = list(itertools.chain(*test_list))\n    print(nested_list)\n    return nested_list\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if len(test_list)==1:\n        return test_list\n    else:\n        return test_list[0]+extract_singly(test_list[1:])\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Create a new empty list.\n    # flat_list = []\n    # for outer_list in test_list:\n    #     for element in outer_list:\n    #         flat_list.append(element)\n    # return flat_list\n    return [element for outer_list in test_list for element in outer_list]\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    res = []\n    for item in test_list:\n        if type(item) == list:\n            res.extend(extract_singly(item))\n        else:\n            res.append(item)\n    return res\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    while len(nums) > 1:\n        biggest = 0\n        for i in range(len(nums)):\n            if nums[i] > biggest:\n                biggest = nums[i]\n        nums.remove(biggest)\n        nums.append(biggest)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 1:\n        return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # make a copy of the list\n    # sort the copy\n    # reverse the copy\n    # return the sorted list\n    # Time complexity: O(n^2)\n    # Space complexity: O(1)\n    # nums = nums.copy()\n    # nums.sort()\n    # return nums[::-1]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    res = nums.copy()\n    # reverse the list\n    res.reverse()\n    # iterate through the list until the end and append it to the output list\n    for i in range(len(nums)):\n        if nums[i]!= res[i]:\n            res[i] = nums[i]\n            for j in range(i, len(nums)):\n                res[j] = nums[j]\n            break\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pancakes = []\n    for i in range(len(nums)):\n        pancakes.append(len(nums) - i - 1)\n    nums = nums[:]\n    for i in range(len(nums)):\n        nums.insert(pancakes[i],nums.pop())\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i, j):\n        temp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = temp\n    def pancake_sort(nums,k):\n        start = 0\n        end = len(nums) - 1\n        while k > 0:\n            p = 0\n            while p <= end:\n                if nums[p]!= 0:\n                    swap(p, end)\n                    end = end - 1\n                    p = p + 1\n                else:\n                    p = p + 1\n            k = k - 1\n            start = start + 1\n            end = end - 1\n        return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def pancake_helper(nums, k):\n        if len(nums) == 0 or len(nums) == k:\n            return nums\n        if k == len(nums) - 1:\n            nums.sort()\n            return nums\n        nums = nums[::-1]\n        nums[k-1:] = nums[k-1:][::-1]\n        return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pancake_sort(nums, 0, len(nums)-1)\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(nums, i):\n        '''\n        flip_list: list -> list\n        Returns list with same elements but reversed\n        '''\n        flip_list = []\n        for j in range(i, len(nums)):\n            flip_list.append(nums[j])\n        for j in range(i):\n            flip_list.append(nums[j])\n        return flip_list\n    \n    def sort_list(nums, n):\n        '''\n        sort_list: list -> list\n        '''\n        def bubble_sort(nums, n):\n            '''\n            bubble_sort: list -> list\n            '''\n            swapped = True\n            while swapped:\n                swapped = False\n                for i in range(n-1):\n                    if nums[i] > nums[i+1]:\n                        nums[i], nums[i+1] = nums[i+1], nums[i]\n                        swapped = True\n            return nums\n        \n        def selection_sort(nums, n):\n            '''\n            selection_sort: list -> list\n            '''\n            for i in range(n):\n                min_idx = i\n                for j in range(i+1, n):\n                    if nums[j] < nums[min_idx]:\n                        min_idx = j\n                nums[i], nums[min_idx] = nums[min_idx], nums[i]\n            return nums\n        \n        def insertion_sort(nums, n):\n            '''\n            insertion_sort: list -> list\n            '''\n            for i in range(n, 0, -1):\n                for j in range(i-1):\n                    if nums[j] > nums[j+1]:\n                        nums[j], nums[j+1] = nums[j+1], nums[j]\n            return nums\n        \n        def merge(nums, l, m, r):\n            '''\n            merge: list, list, list, int -> list\n            '''\n            # Initialize left and right as 2 pointers\n            L = l\n            R = r\n            \n            # Move the smallest element from left to right to a temporary variable\n            tmp = []\n            while L < m and R < r:\n                if nums[L] < nums[R]:\n                    tmp.append(nums[L])\n                    L += 1\n                else:\n                    tmp.append(nums[R])\n                    R += 1\n            \n            # Move the remaining elements from left to right\n            while L < m:\n                tmp.append(nums[L])\n                L += 1\n            \n            # Move the remaining elements from right to left\n            while R < r:\n                tmp.append(nums[R])\n                R += 1\n            \n            # Copy all the elements to nums\n            for i in range(len(tmp)):\n                nums[l+i] = tmp[i]\n        \n        def merge_sort(nums, n):\n            '''\n            merge_sort: list -> list\n            '''\n            # Base case: if the length of the list is 1, it's already sorted\n            if n <= 1:\n                return\n            \n            # Find the middle index\n            mid = n//2\n            \n            # Sort first and second halves\n            merge_sort(nums, mid)\n            merge_sort(nums, n-mid)\n            \n            # Merge the sorted halves\n            merge(nums, 0, mid, mid+n)\n            merge(nums, mid, mid+n, n)\n        \n        def quick_sort(nums, l, r):\n            '''\n            quick_sort: list, int, int -> list\n            '''\n            if l >= r:\n                return\n            p = partition(nums, l, r)\n            quick_sort(nums, l, p-1)\n            quick_sort(nums, p+1, r)\n        \n        def partition(nums, l, r):\n            '''\n            partition: list, int, int -> int\n            '''\n            # Using the first element as pivot\n            pivot = nums[l]\n            \n            # l is the beginning of the sublist\n            # r is the end of the sublist\n            for i in range(l+1, r+1):\n                if nums[i] <= pivot:\n                    nums[l+1], nums[i] = nums[i], nums[l+1]\n                    l += 1\n            nums[l], nums[r] = nums[r], nums[l]\n            return l\n        \n        def heap_sort(nums):\n            '''\n            heap_sort: list -> list\n            '''\n            n = len(nums)\n            \n            # Create a heap\n            for i in range((n//2)-1, -1, -1):\n                heapify(nums, i, n)\n            \n            # Sort the elements from the root to leaf\n            for i in range(n-1, 0, -1):\n                nums[0], nums[i] = nums[i], nums[0]\n                heapify(nums, 0, i)\n        \n        def heapify(nums, i, n):\n            '''\n            heapify: list, int, int -> None\n            '''\n            largest = i\n            l = 2*i+1\n            r = 2*i+2\n            if l < n and nums[i] < nums[l]:\n                largest = l\n            if r < n and nums[largest] < nums[r]:\n                largest = r\n            if largest!= i:\n                nums[i], nums[largest] = nums[largest], nums[i]\n                heapify(nums, largest, n)\n        \n        def selection_sort(nums):\n            '''\n            selection_sort: list -> list\n            '''\n            for i in range(len(nums)):\n                min_idx = i\n                for j in range(i+1, len(nums)):\n                    if nums[j] < nums[min_idx]:\n                        min_idx = j\n                nums[i], nums[min_idx] = nums[min_idx], nums[i]\n            return nums\n        \n        def insertion_sort(nums):\n            '''\n            insertion_sort: list -> list\n            '''\n            for i in range(1, len(nums)):\n                j = i\n                while j > 0 and nums[j] < nums[j-1]:\n                    nums[j], nums[j-1] = nums[j-1], nums[j]\n                    j -= 1\n            return nums\n        \n        def shell_sort(nums):\n            '''\n            shell_sort: list -> list\n            '''\n            # Get the interval of the list\n            n = len(nums)\n            h = 1\n            while h < n//3:\n                h = 3*h+1\n            \n            # Repeat the process until we have the required\n            # interval\n            while h > 0:\n                for i in range(h, n):\n                    j = i\n                    while j >= h and nums[j] < nums[j-h]:\n                        nums[j], nums[j-h] = nums[j-h], nums[j]\n                        j -= h\n                h = h//3\n            return nums\n        \n        def merge(nums, l, m, r):\n            '''\n            merge: list, list, list, list -> list\n            '''\n            # Initialize left and right as 2 pointers\n            L = l\n            R = r\n            \n            # Move the smallest element from left to right to a temporary variable\n            tmp = []\n            while L < m and R < r:\n                if nums[L] < nums[R]:\n                    tmp.append(nums[L])\n                    L += 1\n                else:\n                    tmp.append(nums[R])\n                    R += 1\n            \n            # Move the remaining elements from left to right\n            while L < m:\n                tmp.append(nums[L])\n                L += 1\n            \n            # Move the remaining elements from right to lef"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # first check if the list is smaller than 1\n    if len(nums) <= 1:\n        return nums\n    # determine which pivot is the largest\n    largest = 0\n    for i in range(1, len(nums)):\n        if nums[i] > nums[largest]:\n            largest = i\n    # swap largest with the first element of the array\n    nums[largest], nums[0] = nums[0], nums[largest]\n    # for each element of the list, compare with the element to its right and swap\n    # the element to its left if it is smaller than its right\n    for i in range(len(nums) - 1):\n        if nums[i] > nums[i + 1]:\n            nums[i], nums[i + 1] = nums[i + 1], nums[i]\n    # finally, swap the first element with the element to its right\n    nums[0], nums[len(nums) - 1] = nums[len(nums) - 1], nums[0]\n    return nums\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] == list3[k]:\n                    count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(0,3):\n        for j in range(0,3):\n            if list1[i]==list2[j] and list1[i]==list3[j]:\n                count+=1\n    return count\ndef count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(0,3):\n        for j in range(0,3):\n            if list1[i]==list2[j] and list1[i]==list3[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    #first list\n    total_same_list1=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i]==list2[j]:\n                if list1[i]==list3[j]:\n                    total_same_list1+=1\n    #second list\n    total_same_list2=0\n    for i in range(len(list1)):\n        for j in range(len(list3)):\n            if list1[i]==list3[j]:\n                if list1[i]==list2[j]:\n                    total_same_list2+=1\n    #third list\n    total_same_list3=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list2[i]==list3[j]:\n                if list2[i]==list1[j]:\n                    total_same_list3+=1\n    return total_same_list1,total_same_list2,total_same_list3\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    ans=0\n    for i in range(0,len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            ans=ans+1\n    return ans\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return len(list(set(list1) & set(list2) & set(list3)))\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    res = 0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            res = res+1\n    print(\"The total number of items that are identical in the same position of three given lists is: \",res)\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            count+=1\n    return count\n    \n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    s1=set(list1)\n    s2=set(list2)\n    s3=set(list3)\n    return len(s1&s2&s3)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list1 = []\n    count = 0\n    for i in range(len(Input)):\n        if type(Input[i]) == list:\n            list1.append(Input[i])\n            count += 1\n    return count, list1\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for i in Input: \n        if type(i) is list: \n            count += 1\n    return count \n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    l = len(Input)\n    a = 1\n    for i in range(l):\n        if Input[i] == a:\n            a += 1\n    return a\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i)==tuple:\n            count += 1\n    return count\nprint(find_lists((('a', 'b', 'c'), ('d', 'e'), ('f', 'g'))))\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    import re \n    temp = re.findall('\\(.+?\\)', str(Input))\n    return len(temp)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # your code here\n    return len(Input)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    #using for loop\n    count = 0\n    for ele in Input:\n        if isinstance(ele, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    a = set(Input)\n    lists = len(a)\n    print(\"The number of lists present in the tuple are \", lists)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    l = len(Input)\n    list = []\n    for i in range(l):\n        for j in range(i+1,l):\n            list.append(Input[i]+Input[j])\n    return len(set(list))\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_Diff = 0\n    for i in range(0,len(arr)-1):\n        if abs(arr[i]-arr[i+1]) > max_Diff:\n            max_Diff = abs(arr[i]-arr[i+1])\n    return max_Diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_dif = arr[0] - arr[1]\n    max_dif_index = 1\n    for i in range(0,len(arr)-1):\n        if arr[i+1] - arr[i] > max_dif:\n            max_dif = arr[i+1] - arr[i]\n            max_dif_index = i+1\n    return max_dif,max_dif_index\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = -99999999999\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float(\"-inf\")\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    print(max_diff)\n    \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    arr.sort()\n    for i in range(len(arr)-1):\n        diff = abs(arr[i]-arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = -9*100\n    for i in range(0, len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                print(\"Given array contain duplicates:\", arr)\n                return -1\n            if abs(arr[i]-arr[j]) > max_diff:\n                max_diff = abs(arr[i]-arr[j])\n    print(\"Maximum difference between any two elements is:\", max_diff)\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i]-arr[j]) > max_diff:\n                max_diff = abs(arr[i]-arr[j])\n    return max_diff \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    min1 = arr[0]\n    max1 = arr[0]\n    for i in range(1,len(arr)):\n        if arr[i]>max1:\n            max1 = arr[i]\n        elif arr[i]<min1:\n            min1 = arr[i]\n        else:\n            continue\n    return max1-min1\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0] - arr[1]\n    for i in range(1, len(arr)-1):\n        if max_diff < abs(arr[i+1] - arr[i]):\n            max_diff = abs(arr[i+1] - arr[i])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) <= 1:\n        return 0\n    max_diff = abs(arr[0]-arr[1])\n    for i in range(len(arr) - 1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n    #csp = {('x', 'y'): [], 'x': (a, a), 'y': (b, b), 'n': n}\n    csp = {'x': (a, a), 'y': (b, b), 'n': n}\n    if a * a + b * b == n:\n        return x, y\n    #csp.add_constraint((a, a), (b, b), n)\n    csp.add_constraint(('x', 'y'), (a, a), n)\n    csp.add_constraint(('y', 'x'), (b, b), n)\n    #csp.add_constraint(('x', 'y'), (a, b), n)\n    csp.add_constraint(('x', 'y'), (b, a), n)\n    #csp.add_constraint(('x', 'y'), (a, a), n)\n    csp.add_constraint(('x', 'y'), (a, b), n)\n    #csp.add_constraint(('x', 'y'), (a, a), n)\n    csp.add_constraint(('y', 'x'), (b, a), n)\n    #csp.add_constraint(('x', 'y'), (b, b), n)\n    #csp.add_constraint((b, a), (a, a), n)\n    #csp.add_constraint((a, a), (b, b), n)\n    #csp.add_constraint((a, b), (a, a), n)\n    #csp.add_constraint((a, b), (b, b), n)\n    #csp.add_constraint((a, a), (b, a), n)\n    #csp.add_constraint((a, a), (b, b), n)\n    #csp.add_constraint((a, b), (a, a), n)\n    #csp.add_constraint((a, b), (b, b), n)\n    #csp.add_constraint((a, b), (b, a), n)\n    #csp.add_constraint((b, a), (a, a), n)\n    #csp.add_constraint((b, a), (b, b), n)\n    #csp.add_constraint((a, a), (b, a), n)\n    #csp.add_constraint((a, a), (b, b), n)\n    #csp.add_constraint((b, b), (a, a), n)\n    #csp.add_constraint((b, b), (b, b), n)\n    #csp.add_constraint((a, a), (a, a), n)\n    #csp.add_constraint((a, b), (a, a), n)\n    #csp.add_constraint((b, b), (b, b), n)\n    #csp.add_constraint((a, a), (b, b), n)\n    #csp.add_constraint((b, a), (a, a), n)\n    #csp.add_constraint((b, a), (b, b), n)\n    #csp.add_constraint((a, b), (a, a), n)\n    #csp.add_constraint((a, b), (b, b), n)\n    #csp.add_constraint((b, a), (a, a), n)\n    #csp.add_constraint((b, a), (b, b), n)\n    #csp.add_constraint((a, b), (b, a), n)\n    #csp.add_constraint((a, b), (a, a), n)\n    #csp.add_constraint((b, b), (a, a), n)\n    #csp.add_constraint((b, b), (b, b), n)\n    #csp.add_constraint((a, a), (a, a), n)\n    #csp.add_constraint((a, a), (b, b), n)\n    #csp.add_constraint((b, b), (a, a), n)\n    #csp.add_constraint((b, b), (b, b), n)\n    #csp.add_constraint((a, b), (a, a), n)\n    #csp.add_constraint((a, b), (b, b), n)\n    #csp.add_constraint((a, b), (b, a), n)\n    #csp.add_constraint((a, b), (a, a), n)\n    #csp.add_constraint((b, b), (a, a), n)\n    #csp.add_constraint((b, b), (b, b), n)\n    #csp.add_constraint((a, a), (a, b), n)\n    #csp.add_constraint((a, a), (b, b), n)\n    #csp.add_constraint((b, b), (a, a), n)\n    #csp.add_constraint((b, b), (b, b), n)\n    #csp.add_constraint((a, b), (a, b), n)\n    #csp.add_constraint((a, b), (b, a), n)\n    #csp.add_constraint((b, a), (a, b), n)\n    #csp.add_constraint((b, a), (b, a), n)\n    #csp.add_constraint((a, b), (a, b), n)\n    #csp.add_constraint((a, b), (b, a), n)\n    #csp.add_constraint((b, a), (a, b), n)\n    #csp.add_constraint((b, a), (b, b), n)\n    #csp.add_constraint((a, b), (b, a), n)\n    #csp.add_constraint((a, b), (a, a), n)\n    #csp.add_constraint((b, b), (a, a), n)\n    #csp.add_constraint((b, b), (b, b), n)\n    #csp.add_constraint((a, a), (b, b), n)\n    #csp.add_constraint((a, a), (b, a), n)\n    #csp.add_constraint((b, b), (a, a), n)\n    #csp.add_constraint((b, b), (b, b), n)\n    #csp.add_constraint((a, a), (b, a), n)\n    #csp.add_constraint((a, a), (b, b), n)\n    #csp.add_constraint((b, b), (a, a), n)\n    #csp.add_constraint((b, b), (b, b), n)\n    #csp.add_constraint((a, b), (a, b), n)\n    #csp.add_constraint((a, b), (b, a), n)\n    #csp.add_constraint((b, a), (a, b), n)\n    #csp.add_constraint((b, a), (b, b), n)\n    #csp.add_constraint((a, b), (b, a), n)\n    #csp.add_constraint((a, b), (a, b), n)\n    #csp.add_constraint((b, b), (a, a), n)\n    #csp.add_constraint((b, b), (b, b), n)\n    #csp.add_constraint((a, a), (b, b), n)\n    #csp"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(0, n):\n        for y in range(0, n):\n            if a*x + b*y == n:\n                return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    a_pow = a\n    b_pow = 1\n    while b_pow <= n:\n        x = a_pow - (b_pow * (a // b))\n        y = n - x\n        if x >= y:\n            return x, y\n        a_pow *= a\n        b_pow *= b\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    result = None\n    x = 0\n    y = 0\n    for i in range(a, b):\n        for j in range(a, b):\n            if (n-i-j) == i*j:\n                x = i\n                y = j\n                result = (x, y)\n                break\n        if result!= None:\n            break\n    return result\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if is_square(n) and is_integer_perfect_square(n):\n        return 2, int(sqrt(n))\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    #print(\"a = \", a, \"b = \", b, \"n = \", n)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # print(f'{a,b}')\n    if a < 0 or b < 0:\n        return None\n    if a == 0 and b == 0:\n        return (0,0)\n    if n == 0:\n        return (0,1)\n    if n == a or n == -a:\n        return (1,0)\n    if n == b or n == -b:\n        return (0,1)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n + 1):\n        for y in range(1, n + 1):\n            if (a*x) + (b*y) == n:\n                return (x, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    for x in range(n):\n        if a * x + b * x == n:\n            return x, b * x\n        if a * x + b * x == n:\n            return x, b * x\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return 0, 0\n    for i in range(1, 10):\n        x = a * i\n        y = b * i\n        if x + y == n:\n            return i, x, y\n    return None\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    l1 = []\n    l2 = []\n    for i in list1:\n        l1.append(i)\n    for i in list2:\n        l2.append(i)\n    for i in l2:\n        if i in l1:\n            l1.remove(i)\n    return l1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    for i in list1:\n        if i not in list2:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    try:\n        for x in list2:\n            for i in list1:\n                if x == i:\n                    list1.remove(i)\n    except:\n        pass\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for i in list1:\n        if i not in list2:\n            new_list.append(i)\n    return new_list\n    \n    \ndef is_palindrome(str1):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    str1 = str1.replace(' ','')\n    return str1 == str1[::-1]\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list=[]\n    for el in list1:\n        if el not in list2:\n            new_list.append(el)\n    return new_list\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for i in list1:\n        if i not in list2:\n            list3.append(i)\n    return list3\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # total_list = list1 + list2\n    # removed_list = []\n    # for elem in total_list:\n    #     if elem in list2:\n    #         removed_list.append(elem)\n    # return removed_list\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = list(set(list1) - set(list2))\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # i = 0\n    # for j in range(len(list2)):\n    #     if list1.count(list2[j]) > 0:\n    #         list1.remove(list2[j])\n    #         i += 1\n    # print(f\"Elements removed: {i}\")\n    # print(f\"List1: {list1}\")\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\n    "
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 0\n    s = 0\n    while i <= n // 2:\n        s += (n - 2*i)\n        i += 1\n    return s\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n):\n        result += n - 2*i\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return (n + (n - 2) + (n - 4))//2\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum(i for i in range(n // 2 + 1))\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return 0\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    n = int(n)\n    sum_series = 0\n    for i in range(n//2):\n        sum_series += i\n    return sum_series\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    \n    if n==0:\n        return 0\n    \n    return n+sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (n - 2*i)\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(0,n//2):\n        total += (n-(2*i))\n    return total\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (l * s) / 2\ndef area_square(s):\n    '''\n    Write a function to calculate the area of a square given the length of its side.\n    '''\n    return s * s\ndef area_triangle(b, h):\n    '''\n    Write a function to calculate the area of a triangle given its base and its height.\n    '''\n    return b * h / 2\ndef circumference_circle(r):\n    '''\n    Write a function to calculate the circumference of a circle given its radius.\n    '''\n    return 2 * pi * r\ndef circumference_rectangle(l, b):\n    '''\n    Write a function to calculate the circumference of a rectangle given its length and width.\n    '''\n    return l * 2 + b * 2\ndef circumference_square(s):\n    '''\n    Write a function to calculate the circumference of a square given its length.\n    '''\n    return 4 * s\ndef circumference_hexagon(a):\n    '''\n    Write a function to calculate the circumference of a regular hexagon given its side.\n    '''\n    return 6 * a\ndef circumference_triangle(b, h):\n    '''\n    Write a function to calculate the circumference of a triangle given its base and its height.\n    '''\n    return b * 2 + h * 2\ndef area_circumference(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    return r * r * pi\ndef area_rectangle(l, b):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    return l * b\ndef area_square(s):\n    '''\n    Write a function to calculate the area of a square given its length.\n    '''\n    return s * s\ndef area_hexagon(a):\n    '''\n    Write a function to calculate the area of a regular hexagon given its side.\n    '''\n    return (a * a * (1 + tan(pi / 6))) / 2\ndef area_triangle(b, h):\n    '''\n    Write a function to calculate the area of a triangle given its base and its height.\n    '''\n    return (b * h) / 2\ndef area_union_rectangles(l1, b1, l2, b2):\n    '''\n    Write a function to calculate the area of the union of two rectangles given their lengths and widths.\n    '''\n    return (l1 + l2) * (b1 + b2)\ndef area_union_triangles(b1, h1, b2, h2):\n    '''\n    Write a function to calculate the area of the union of two triangles given their bases and heights.\n    '''\n    return 0.5 * (b1 * h2 + b2 * h1)\ndef area_union_hexagons(a1, a2):\n    '''\n    Write a function to calculate the area of the union of two hexagons given their side lengths.\n    '''\n    return a1 * a2\ndef area_union_circles(r1, r2):\n    '''\n    Write a function to calculate the area of the union of two circles given their radii.\n    '''\n    return pi * r1 * r2\ndef area_intersection_rectangles(l1, b1, l2, b2):\n    '''\n    Write a function to calculate the area of the intersection of two rectangles given their lengths and widths.\n    '''\n    return (l1 + l2) * (b1 + b2) - area_union_rectangles(l1, b1, l2, b2)\ndef area_intersection_triangles(b1, h1, b2, h2):\n    '''\n    Write a function to calculate the area of the intersection of two triangles given their bases and heights.\n    '''\n    return 0.5 * (b1 * h2 + b2 * h1) - area_union_triangles(b1, h1, b2, h2)\ndef area_intersection_hexagons(a1, a2):\n    '''\n    Write a function to calculate the area of the intersection of two hexagons given their side lengths.\n    '''\n    return 0.5 * (a1 + a2) - area_union_hexagons(a1, a2)\ndef area_intersection_circles(r1, r2):\n    '''\n    Write a function to calculate the area of the intersection of two circles given their radii.\n    '''\n    return pi * (r1 ** 2) + pi * (r2 ** 2) - area_union_circles(r1, r2)\ndef area_intersection_dodecahedra(a, l):\n    '''\n    Write a function to calculate the area of the intersection of a dodecahedron and a cube given its side length.\n    '''\n    return (1 / 2) * (4 * pi * a) ** 2 - 4 * (1 / 2) * (pi * a) ** 2\ndef volume_cylinder(r, h):\n    '''\n    Write a function to calculate the volume of a cylinder given its radius and height.\n    '''\n    return pi * r ** 2 * h\ndef volume_cone(r, h):\n    '''\n    Write a function to calculate the volume of a cone given its radius and height.\n    '''\n    return pi * r * r * (1 + tan(pi / 6)) * h\ndef volume_triangle(b, h):\n    '''\n    Write a function to calculate the volume of a triangle given its base and its height.\n    '''\n    return b * h / 2\ndef volume_pyramid(a, h):\n    '''\n    Write a function to calculate the volume of a pyramid given its height and the length of the base.\n    '''\n    return (a * a) * h / 3\ndef volume_hexagon(a):\n    '''\n    Write a function to calculate the volume of a regular hexagon given its side.\n    '''\n    return (6 * a) ** 3 / 3 - 4 * (6 * a) ** 2 / 3\ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere given its radius.\n    '''\n    return (4 / 3) * pi * r ** 3\ndef volume_octahedron(a):\n    '''\n    Write a function to calculate the volume of an octahedron given its side.\n    '''\n    return (1 / 2) * a ** 3 - 4 * (1 / 2) * a ** 2\ndef volume_dodecahedron(a):\n    '''\n    Write a function to calculate the volume of a dodecahedron given its side.\n    '''\n    return (1 / 2) * a ** 3 + 2 * (1 / 2) * a ** 2\ndef volume_dodecahedron_hole(a):\n    '''\n    Write a function to calculate the volume of a dodecahedron with a hole.\n    '''\n    return (1 / 2) * a ** 3 + 2 * (1 / 2) * a ** 2\ndef volume_squiggle(l, h):\n    '''\n    Write a function to calculate the volume of a squiggle given its length and its height.\n    '''\n    return (1 / 2) * l * h\ndef volume_square(s):\n    '''\n    Write a function to calculate the volume of a square given its length.\n    '''\n    return 4 * s\ndef volume_cube(s):\n    '''\n    Write a function to calculate the volume of a cube given its length.\n    '''\n    return s ** 3\ndef volume_octagonal_prism(s, h):\n    '''\n    Write a function to calculate the volume of a octagonal prism given its length and height.\n    '''\n    return (s / 2) * (s / 2) * h\ndef volume_equilateral_prism(s, h):\n    '''\n    Write a function to calculate the volume of an equilateral prism given its length and height.\n    '''\n    return s * h / 2\ndef volume_dodecahedron(s, h):\n    '''\n    Write a function to calculate the volume of a dodecahedron given its length and height.\n    '''\n    return (1 / 2) * s * h\ndef volume_teapot(s"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return l * s / 2 * tan(pi / s)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    pi = pi/180\n    return (s * (s-l)*2) * (l ** 2) * pi\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    assert type(s) == int, \"Incorrect type of sides\"\n    assert type(l) == int, \"Incorrect type of length\"\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    def area(s, l):\n        return pi * (s * s) / (4 * l)\n    print(\"The area of a polygon with sides of length {} and number of sides {} is {}\".format(l, s, round(area(s, l), 2)))\narea_polygon(6, 4)\narea_polygon(5, 8)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if l == 0 or s <= 0:\n        return 0\n    return 0.25 * s * (s - l) * tan(pi / s)\ndef length_period(l, n):\n    '''\n    Write a function to calculate the length of a period given the length of the sides and the number of its sides.\n    '''\n    return l / n\ndef angle_twice(a):\n    '''\n    Write a function to find the area of the triangle given the lengths of its sides.\n    '''\n    return pi * a * (a * a - a) * 0.5\ndef str_int(s):\n    '''\n    Write a function that takes a string and returns it as an integer.\n    '''\n    return int(s)\ndef even(n):\n    '''\n    Write a function that takes a number and returns True if it is even, and False if it is odd.\n    '''\n    return n % 2 == 0\ndef number_of_spaces(s):\n    '''\n    Write a function that takes a string and returns it with spaces in between each character.\n    '''\n    return''.join(s)\ndef split(s, l):\n    '''\n    Write a function that takes a string and splits it in the most efficient way, such that each substring contains no more than l characters.\n    '''\n    if l == 0 or s == '':\n        return s\n    if len(s) < l:\n        return s\n    chunk = ''\n    num_chunks = len(s) // l + 1\n    for i in range(num_chunks):\n        chunk += s[i * l: (i + 1) * l] +''\n    return chunk\ndef merge(s1, s2):\n    '''\n    Write a function that takes two strings and merges them together in the most efficient way.\n    '''\n    return s1 + s2\ndef count_spaces(s):\n    '''\n    Write a function that takes a string and counts the number of spaces in it.\n    '''\n    return s.count(' ')\ndef count_duplicates(s):\n    '''\n    Write a function that takes a string and counts the number of occurrences of each character.\n    '''\n    return len(set(s))\ndef has_only_digits(s):\n    '''\n    Write a function that takes a string and returns True if it contains only digits and False otherwise.\n    '''\n    return s.isdigit()\ndef reverse_string(s):\n    '''\n    Write a function that takes a string and returns it in reversed order.\n    '''\n    return s[::-1]\ndef is_palindrome(s):\n    '''\n    Write a function that takes a string and returns True if it is a palindrome and False otherwise.\n    '''\n    return s == s[::-1]\ndef is_palindrome_reverse(s):\n    '''\n    Write a function that takes a string and reverses it in place and returns the string.\n    '''\n    if len(s) <= 1:\n        return s\n    for i in range(len(s) // 2):\n        s[i], s[~i] = s[~i], s[i]\n    return s\ndef is_palindrome_from_back(s):\n    '''\n    Write a function that takes a string and reverses it in place.\n    '''\n    if len(s) <= 1:\n        return s\n    i = len(s) - 1\n    while i >= 0:\n        if s[i]!= s[len(s) - 1]:\n            return False\n        i -= 1\n    return True\ndef is_palindrome_from_front(s):\n    '''\n    Write a function that takes a string and reverses it in place.\n    '''\n    if len(s) <= 1:\n        return s\n    s = s[::-1]\n    for i in range(len(s)):\n        if s[i]!= s[len(s) - 1]:\n            return False\n    return True\ndef is_palindrome_from_back_modified(s):\n    '''\n    Write a function that takes a string and reverses it in place.\n    '''\n    if len(s) <= 1:\n        return s\n    i = len(s) - 1\n    while i >= 0:\n        if s[i]!= s[len(s) - 1]:\n            return False\n        i -= 1\n    return True\ndef is_palindrome_from_front_modified(s):\n    '''\n    Write a function that takes a string and reverses it in place.\n    '''\n    if len(s) <= 1:\n        return s\n    s = s[::-1]\n    for i in range(len(s)):\n        if s[i]!= s[len(s) - 1]:\n            return False\n    return True\ndef is_palindrome_from_front_modified2(s):\n    '''\n    Write a function that takes a string and reverses it in place.\n    '''\n    if len(s) <= 1:\n        return s\n    while len(s) > 1 and s[0] == s[len(s) - 1]:\n        s = s[1: len(s)]\n    return s\ndef is_palindrome_modified(s):\n    '''\n    Write a function that takes a string and reverses it in place.\n    '''\n    if len(s) <= 1:\n        return s\n    i = 0\n    j = len(s) - 1\n    while i <= j:\n        if s[i]!= s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\ndef is_palindrome_modified2(s):\n    '''\n    Write a function that takes a string and reverses it in place.\n    '''\n    if len(s) <= 1:\n        return s\n    while len(s) > 1 and s[0] == s[len(s) - 1]:\n        s = s[1: len(s)]\n    return s\ndef replace(s, old, new):\n    '''\n    Write a function that takes a string and replaces all occurrences of a substring with another substring.\n    '''\n    return s.replace(old, new)\ndef get_reversed(s):\n    '''\n    Write a function that takes a string and returns it in reversed order.\n    '''\n    return s[::-1]\ndef get_reversed_2(s):\n    '''\n    Write a function that takes a string and returns it in reversed order.\n    '''\n    return s[-1::-1]\ndef get_reversed_modified(s):\n    '''\n    Write a function that takes a string and returns it in reversed order.\n    '''\n    return s[::-1]\ndef get_reversed_modified_2(s):\n    '''\n    Write a function that takes a string and returns it in reversed order.\n    '''\n    return s[-1::-1]\ndef swap_case(s):\n    '''\n    Write a function that takes a string and returns it with all the characters converted to uppercase letters.\n    '''\n    return s.upper()\ndef swap_case_2(s):\n    '''\n    Write a function that takes a string and returns it with all the characters converted to uppercase letters.\n    '''\n    return s.swapcase()\ndef count_substring(s, sub):\n    '''\n    Write a function that takes a string and a substring and returns the number of times the substring occurs in the string.\n    '''\n    return s.count(sub)\ndef count_substring_modified(s, sub):\n    '''\n    Write a function that takes a string and a substring and returns the number of times the substring occurs in the string.\n    '''\n    return s.count(sub)\ndef get_num_of_characters(s, l, r):\n    '''\n    Write a function that takes a string and 2 indices and returns the number of characters in the substring that lies between the indices.\n    '''\n    return len(s[l:r])\ndef get_num_of_characters_modified(s, l, r):\n    '''\n    Write a function tha"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    import math\n    return round((s * (s - l) * 0.5 * math.tan(2 * pi / l)), 5)\ndef area_triangle(b, h):\n    '''\n    Write a function to calculate the area of a triangle given the base and height.\n    '''\n    return round((b * h) / 2, 5)\ndef area_square(a):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return round(a * a, 5)\ndef area_parallelogram(a, h):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return round(a * h, 5)\ndef area_rectangle(a, b):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return round(a * b, 5)\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return round((pi * r * r), 5)\ndef area_trapezium(a, b, h):\n    '''\n    Write a function to calculate the area of a trapezium.\n    '''\n    return round((a + b) * h / 2, 5)\ndef area_trapezoid(a, b, c):\n    '''\n    Write a function to calculate the area of a trapezoid.\n    '''\n    return round((a + b) * c / 2, 5)\ndef area_hexagon(s, l):\n    '''\n    Write a function to calculate the area of a regular hexagon.\n    '''\n    return round(s * s / 2 * (1 - tan(pi / l)) / 3, 5)\ndef area_hexagon_sq(s, l):\n    '''\n    Write a function to calculate the area of a regular hexagon (squared).\n    '''\n    return round(s * s / 2 * (1 - tan(pi / l)), 5)\ndef area_octagon(s, l):\n    '''\n    Write a function to calculate the area of a regular octagon.\n    '''\n    return round((s * s) / 2 * (1 - tan(pi / l)), 5)\ndef area_octagon_sq(s, l):\n    '''\n    Write a function to calculate the area of a regular octagon (squared).\n    '''\n    return round((s * s) / 2 * (1 - tan(pi / l)), 5)\ndef area_trapezoid_sq(a, b, c, h):\n    '''\n    Write a function to calculate the area of a square trapezium.\n    '''\n    return round((a + b) * h / 2, 5)\ndef area_trapezoid_sq_sq(a, b, c, h):\n    '''\n    Write a function to calculate the area of a square trapezium (squared).\n    '''\n    return round((a + b) * h / 2, 5)\ndef area_trapezoid_sq_sq(a, b, c, h):\n    '''\n    Write a function to calculate the area of a square trapezium (squared).\n    '''\n    return round((a + b) * h / 2, 5)\ndef area_trapezoid_sq_sq(a, b, c, h):\n    '''\n    Write a function to calculate the area of a square trapezium (squared).\n    '''\n    return round((a + b) * h / 2, 5)\ndef area_trapezoid_sq_sq(a, b, c, h):\n    '''\n    Write a function to calculate the area of a square trapezium (squared).\n    '''\n    return round((a + b) * h / 2, 5)\ndef area_square_sq(a, h):\n    '''\n    Write a function to calculate the area of a square square.\n    '''\n    return round(a * h, 5)\ndef area_square_sq_sq(a, h):\n    '''\n    Write a function to calculate the area of a square square (squared).\n    '''\n    return round(a * h, 5)\ndef area_square_sq_sq(a, h):\n    '''\n    Write a function to calculate the area of a square square (squared).\n    '''\n    return round(a * h, 5)\ndef area_rectangle_sq(a, b):\n    '''\n    Write a function to calculate the area of a rectangle square.\n    '''\n    return round(a * b, 5)\ndef area_rectangle_sq_sq(a, b):\n    '''\n    Write a function to calculate the area of a rectangle square (squared).\n    '''\n    return round(a * b, 5)\ndef area_rectangle_sq_sq(a, b):\n    '''\n    Write a function to calculate the area of a rectangle square (squared).\n    '''\n    return round(a * b, 5)\ndef area_rectangle_sq_sq(a, b):\n    '''\n    Write a function to calculate the area of a rectangle square (squared).\n    '''\n    return round(a * b, 5)\ndef area_triangle_sq(b, h):\n    '''\n    Write a function to calculate the area of a triangle square.\n    '''\n    return round(b * h, 5)\ndef area_triangle_sq_sq(b, h):\n    '''\n    Write a function to calculate the area of a triangle square (squared).\n    '''\n    return round(b * h, 5)\ndef area_triangle_sq_sq(b, h):\n    '''\n    Write a function to calculate the area of a triangle square (squared).\n    '''\n    return round(b * h, 5)\ndef area_triangle_sq_sq(b, h):\n    '''\n    Write a function to calculate the area of a triangle square (squared).\n    '''\n    return round(b * h, 5)\ndef area_triangle_sq_sq(b, h):\n    '''\n    Write a function to calculate the area of a triangle square (squared).\n    '''\n    return round(b * h, 5)\ndef area_triangle_sq_sq(b, h):\n    '''\n    Write a function to calculate the area of a triangle square (squared).\n    '''\n    return round(b * h, 5)\ndef area_triangle_sq_sq(b, h):\n    '''\n    Write a function to calculate the area of a triangle square (squared).\n    '''\n    return round(b * h, 5)\ndef area_triangle_sq_sq(b, h):\n    '''\n    Write a function to calculate the area of a triangle square (squared).\n    '''\n    return round(b * h, 5)\ndef area_trapezium_sq(a, b, h):\n    '''\n    Write a function to calculate the area of a trapezium square.\n    '''\n    return round(a * b + h, 5)\ndef area_trapezium_sq_sq(a, b, h):\n    '''\n    Write a function to calculate the area of a trapezium square (squared).\n    '''\n    return round(a * b + h, 5)\ndef area_trapezium_sq_sq(a, b, h):\n    '''\n    Write a function to calculate the area of a trapezium square (squared).\n    '''\n    return round(a * b + h, 5)\ndef area_trapezium_sq_sq(a, b, h):\n    '''\n    Write a function to calculate the area of a trapezium square (squared).\n    '''\n    return round(a * b + h, 5)\ndef area_trapezium_sq_sq(a, b, h):\n    '''\n    Write a function to calculate the area of a trapezium square (squared).\n    '''\n    return round(a * b + h, 5)\ndef area_trapezium_sq_sq(a, b, h):\n    '''\n    Write a function to calculate the area of a trapezium square (squared).\n    '''\n    return round(a * b + h, 5"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = s / 2 * pi\n    return 0.25 * s * l * (l + 1)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.25 * pi * s * (s - 2 * l)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s**2)*(1/tan(pi/l))\n    return area\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1,n):\n        if n%i==0:\n            d = i\n        else:\n            d = 0\n    return (d,n/d)"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def divisor_sum(n):\n        l = 1\n        sum = 0\n        while n >= l:\n            if n % l == 0:\n                sum += l\n            l += 1\n        return sum\n    return divisor_sum(n) == divisor_sum(n - 1)\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, n):\n        if (n % i == 0):\n            divisors.append(i)\n    if (sum(divisors) == n):\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1,n):\n        if n%i == 0:\n            divisors.append(i)\n    if sum(divisors) == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum_list = []\n    for i in range(1, n//2):\n        if n % i == 0: \n            div_sum_list.append(i)\n    return sum(div_sum_list) == n \n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    try: \n        divisor1 = 1\n        divisor2 = 1\n        while(True):\n            divisor1 += 2\n            divisor2 += divisor1\n            if(divisor1 == n):\n                return True\n            if(divisor2 == n):\n                return True\n            if(divisor1 > n):\n                return False\n    except(Exception):\n        return None\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0:\n        return True\n    div = 2\n    while div <= math.sqrt(n):\n        if n % div == 0:\n            return False\n        div += 1\n    return True\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    a = 0\n    b = 0\n    n = int(n)\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n%i == 0: \n            a = i \n    for i in range(1, a): \n        if n%i == 0: \n            b = n//i \n    if a == b: \n        print(\"True\")\n    else: \n        print(\"False\")\ndef div_sum_2(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    a = 0\n    b = 0\n    n = int(n)\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n%i == 0: \n            a = i \n    for i in range(1, a): \n        if n%i == 0: \n            b = n//i \n    if a == b: \n        print(\"True\")\n    else: \n        print(\"False\")\ndef div_sum_3(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    a = 0\n    b = 0\n    n = int(n)\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n%i == 0: \n            a = i \n    for i in range(1, a): \n        if n%i == 0: \n            b = n//i \n    if a == b: \n        print(\"True\")\n    else: \n        print(\"False\")\ndef div_sum_4(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    a = 0\n    b = 0\n    n = int(n)\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n%i == 0: \n            a = i \n    for i in range(1, a): \n        if n%i == 0: \n            b = n//i \n    if a == b: \n        print(\"True\")\n    else: \n        print(\"False\")\ndef div_sum_5(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    a = 0\n    b = 0\n    n = int(n)\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n%i == 0: \n            a = i \n    for i in range(1, a): \n        if n%i == 0: \n            b = n//i \n    if a == b: \n        print(\"True\")\n    else: \n        print(\"False\")\ndef div_sum_6(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    a = 0\n    b = 0\n    n = int(n)\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n%i == 0: \n            a = i \n    for i in range(1, a): \n        if n%i == 0: \n            b = n//i \n    if a == b: \n        print(\"True\")\n    else: \n        print(\"False\")\ndef div_sum_7(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    a = 0\n    b = 0\n    n = int(n)\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n%i == 0: \n            a = i \n    for i in range(1, a): \n        if n%i == 0: \n            b = n//i \n    if a == b: \n        print(\"True\")\n    else: \n        print(\"False\")\ndef div_sum_8(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    a = 0\n    b = 0\n    n = int(n)\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n%i == 0: \n            a = i \n    for i in range(1, a): \n        if n%i == 0: \n            b = n//i \n    if a == b: \n        print(\"True\")\n    else: \n        print(\"False\")\ndef div_sum_9(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    a = 0\n    b = 0\n    n = int(n)\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n%i == 0: \n            a = i \n    for i in range(1, a): \n        if n%i == 0: \n            b = n//i \n    if a == b: \n        print(\"True\")\n    else: \n        print(\"False\")\ndef div_sum_10(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    a = 0\n    b = 0\n    n = int(n)\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n%i == 0: \n            a = i \n    for i in range(1, a): \n        if n%i == 0: \n            b = n//i \n    if a == b: \n        print(\"True\")\n    else: \n        print(\"False\")\ndef div_sum_11(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    a = 0\n    b = 0\n    n = int(n)\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n%i == 0: \n            a = i \n    for i in range(1, a): \n        if n%i == 0: \n            b = n//i \n    if a == b: \n        print(\"True\")\n    else: \n        print(\"False\")\ndef div_sum_12(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    a = 0\n    b = 0\n    n = int(n)\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n%i == 0: \n            a = i \n    for i in range(1, a): \n        if n%i == 0: \n            b = n//i \n    if a == b: \n        print(\"True\")\n    else: \n        print(\"False\")\ndef div_sum_13(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    a = 0\n    b = 0\n    n = int(n)\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n%i == 0: \n            a = i \n    for i in range(1, a): \n        if n%i == 0: \n            b = n//i \n    if a == b: \n        print(\"True\")\n    else: \n        print(\"False\")\ndef div_sum_14(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    a = 0\n    b = 0\n    n = int(n)\n    for i in range(1, int(mat"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1: \n        return True \n    elif n == 2: \n        return True\n    else: \n        return n%2 == 0 or div_sum(n-1)\n    \ndef sum_p(n):\n    '''\n    Write a function that gives the sum of the first n positive integers. \n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for x in range(1, int(n)):\n        if n % x == 0:\n            div_sum += x\n    if n == div_sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    pass\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count=0\n    for i in range(len(str1)):\n        for j in range(i,len(str1)):\n            if str1[i]==str1[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    counter = {}\n    for i, ch in enumerate(str1):\n        if ch in counter:\n            counter[ch] += 1\n        else:\n            counter[ch] = 1\n    return counter\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] in ('a','e','i','o','u','A','E','I','O','U'):\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_dict = {}\n    for i in range(0, 26):\n        char_dict[chr(ord('a') + i)] = 0\n    for i in range(0, len(str1)):\n        char_dict[str1[i]] += 1\n    return char_dict\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.upper()\n    count = 0\n    for i in range(len(str1)):\n        if str1.count(str1[i]) == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    #Solution 1\n    str2 = str1.lower()\n    dict1 = {}\n    for i in range(97, 123):\n        dict1[i] = str2.count(chr(i))\n    return dict1\n    \n    #Solution 2\n    return dict(map(lambda x: (x[0],str1.lower().count(x[0])),enumerate(string.ascii_lowercase)))\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    if str1 == \"\":\n        return 0\n    else:\n        n = len(str1)\n        \n        chars = {}\n        for i in range(n):\n            if str1[i] in chars:\n                chars[str1[i]] += 1\n            else:\n                chars[str1[i]] = 1\n        \n        result = 0\n        for key in chars:\n            if key.isalpha() and chars[key] == 1:\n                result += 1\n        \n        return result\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # result = 0\n    # for i in range(len(str1)):\n    #     if str1[i] in string.ascii_letters:\n    #         result += 1\n    # return result\n    return str1.count(str1.lower())\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    if not str1:\n        return count\n    s = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n    for i in range(len(str1)):\n        if str1[i].lower() in s:\n            count = count + 1\n    return count\nprint(count_char_position(\"Trees\"))\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    i = 0\n    count = 0\n    while i < len(A)-1:\n        if A[i] ^ A[i+1] == 0:\n            count += 1\n        i += 2\n    print(count)\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_odd_pair = {}\n    for i in range(len(A)):\n        if A[i] in even_odd_pair:\n            even_odd_pair[A[i]] += 1\n        else:\n            even_odd_pair[A[i]] = 1\n    odd_pair = 0\n    for i in range(len(A)):\n        if A[i]!= 0 and A[i]%2 == 0:\n            odd_pair += even_odd_pair[A[i]]\n        else:\n            continue\n    return odd_pair\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # base cases\n    if not A:\n        return 0\n    if len(A) == 1:\n        return 0 if A[0] & 1 else 1\n    if A[0] & 1:\n        return 0\n    # when A is even, xor it with A[1] to find the xor of A and A[1]\n    res = A[0] ^ A[1]\n    for i in range(2, len(A)):\n        res ^= A[i]\n    return sum(A) - len(A) + res\n    \n    "
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    a = {}\n    n = len(A)\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i,len(A)):\n            if xor_to_even(A[i],A[j]) == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # A = list(map(int, A))\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    evens = []\n    pairs = []\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(0, len(A)-1):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    odds = 0\n    evens = 0\n    for x in A:\n        if x ^ odds == 0:\n            evens += 1\n        else:\n            odds = x\n    return evens\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power <<= 1\n    return power\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 0\n    while (1 << power) <= n:\n        power += 1\n    return (1 << power)\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # https://stackoverflow.com/questions/1939904/how-do-i-calculate-the-least-significant-bit-in-a-32-bit-number-using-python\n    # https://www.geeksforgeeks.org/bit-manipulation-in-python/\n    if n >= 1:\n        n = n | (1 << (32 - 1)) #assign the least significant bit to the top\n        while n % 2 == 0:\n            n >>= 1\n        return n\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n % 2 == 0:\n        n = n // 2\n    return n\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    m = 1\n    while m < n:\n        m *= 2\n    return m\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    p = 0\n    while True:\n        if 2 ** p >= n:\n            break\n        else:\n            p = p + 1\n    return p\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(n-1)"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    m = 1\n    while m < n:\n        m *= 2\n    return m\n    \n    \n    \ndef next_power_of_2_efficient(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    if n < 1:\n        return 0\n    if n % 2 == 0:\n        return n//2\n    else:\n        return (n + 1) // 2\n    \n    \n    \ndef alternate_binary_search(array, target):\n    '''\n    Write a python function to find the index of target in the array using alternate binary search.\n    '''\n    \n    low = 0\n    high = len(array) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if array[mid] == target:\n            return mid\n        \n        if target < array[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    \n    return -1\n    \n    \n    \ndef alternate_binary_search_using_recursion(array, target):\n    '''\n    Write a python function to find the index of target in the array using alternate binary search.\n    '''\n    \n    if len(array) == 0:\n        return -1\n    \n    if array[0] == target:\n        return 0\n    \n    if array[0] > target:\n        return -1\n    \n    low = 0\n    high = len(array) - 1\n    \n    return alternate_binary_search_recursion(array, target, low, high)\n    \n    \n    \ndef alternate_binary_search_recursion(array, target, low, high):\n    '''\n    Write a python function to find the index of target in the array using alternate binary search.\n    '''\n    \n    mid = low + ((high - low) // 2)\n    \n    if mid >= len(array):\n        return -1\n    \n    if target == array[mid]:\n        return mid\n    \n    if target < array[mid]:\n        return alternate_binary_search_recursion(array, target, low, mid - 1)\n    \n    return alternate_binary_search_recursion(array, target, mid + 1, high)\n    \n    \n    \ndef find_max_in_bitonic_array(arr):\n    '''\n    Write a python function to find the maximum element in a bitonic array.\n    '''\n    \n    if len(arr) == 0:\n        return -1\n    \n    if arr[0] < arr[len(arr) - 1]:\n        return arr[0]\n    \n    if arr[0] > arr[len(arr) - 1]:\n        return arr[len(arr) - 1]\n    \n    if arr[0] == arr[len(arr) - 1]:\n        low = 1\n        high = len(arr) - 2\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] > arr[mid + 1]:\n                return arr[mid + 1]\n            elif arr[mid] < arr[mid + 1]:\n                return arr[mid]\n            else:\n                low = mid + 1\n    \n    \n    \ndef find_peak_element(arr):\n    '''\n    Write a python function to find the maximum element in a bitonic array.\n    '''\n    \n    if len(arr) == 0:\n        return -1\n    \n    if len(arr) == 1:\n        return 0\n    \n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid - 1] < arr[mid] and arr[mid] > arr[mid + 1]:\n            return mid\n        elif arr[mid - 1] < arr[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    \n    \ndef find_peak_element_using_binary_search(arr):\n    '''\n    Write a python function to find the maximum element in a bitonic array.\n    '''\n    \n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid - 1] < arr[mid] and arr[mid] > arr[mid + 1]:\n            return mid\n        elif arr[mid - 1] < arr[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    \n    \ndef find_peak_element_using_recursion(arr, low, high):\n    '''\n    Write a python function to find the maximum element in a bitonic array.\n    '''\n    \n    if low > high:\n        return -1\n    \n    mid = (low + high) // 2\n    \n    if arr[mid - 1] < arr[mid] and arr[mid] > arr[mid + 1]:\n        return mid\n    \n    if arr[mid - 1] < arr[mid]:\n        return find_peak_element_using_recursion(arr, mid + 1, high)\n    else:\n        return find_peak_element_using_recursion(arr, low, mid - 1)\n    \n    \n    \ndef find_maximum_in_bitonic_array(arr):\n    '''\n    Write a python function to find the maximum element in a bitonic array.\n    '''\n    \n    if len(arr) == 0:\n        return -1\n    \n    if len(arr) == 1:\n        return arr[0]\n    \n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid - 1] < arr[mid] and arr[mid] > arr[mid + 1]:\n            return arr[mid]\n        elif arr[mid - 1] < arr[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    \n    \ndef find_minimum_in_bitonic_array(arr):\n    '''\n    Write a python function to find the maximum element in a bitonic array.\n    '''\n    \n    if len(arr) == 0:\n        return -1\n    \n    if len(arr) == 1:\n        return arr[0]\n    \n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid - 1] < arr[mid] and arr[mid] < arr[mid + 1]:\n            return arr[mid]\n        elif arr[mid - 1] < arr[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    \n    \ndef find_maximum_index_in_bitonic_array(arr):\n    '''\n    Write a python function to find the maximum element in a bitonic array.\n    '''\n    \n    if len(arr) == 0:\n        return -1\n    \n    if len(arr) == 1:\n        return 0\n    \n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid - 1] < arr[mid] and arr[mid] > arr[mid + 1]:\n            return mid\n        elif arr[mid - 1] < arr[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    \n    \ndef find_maximum_index_in_bitonic_array_using_recursion(arr):\n    '''\n    Write a python function to find the maximum element in a bitonic array.\n    '''\n    \n    if len(arr) == 0:\n        return -1\n    \n    if len(arr) == 1:\n        return 0\n    \n    low = 0\n    high = len(arr) - 1\n    \n    return find_maximum_index_in_bitonic_array_recursion(arr, low, high)\n    \n    \n    \ndef find_maximum_index_in_bitonic_array_recursion(arr, low, high):\n    '''\n    Write a python function to find the maximum element in a bitoni"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Algo for finding the power of 2 is :\n    # 1. Find the exponent e of n\n    # 2. Calculate the value of 1/(2^e)\n    # 3. Subtract e from 2\n    # 4. If e < 0 then add 1 and repeat from step 1\n    # 5. Else return 2^e\n    \n    # Step 1 : Find the exponent of n\n    e = 0\n    while (n & 1) == 0:\n        n >>= 1\n        e += 1\n    \n    # Step 2 : Find the value of 1/(2^e)\n    if e > 0:\n        # If 1/(2^e) is greater than 1, return 1/(2^e)\n        if e > 31:\n            return 1\n        # Else, calculate 1/(2^e) by subtracting 1 and adding 1 and repeating step 1\n        else:\n            return (1/(2**e)) - 1\n    # Step 3 : Subtract e from 2\n    e -= 1\n    \n    # Step 4 : If e < 0 then add 1 and repeat from step 1\n    if e < 0:\n        e += 1\n        while e > 0:\n            n += 1\n            e -= 1\n    # Step 5 : Return 2^e\n    return (2**e)\n    \ndef next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Algo for finding the power of 2 is :\n    # 1. Find the exponent e of n\n    # 2. Calculate the value of 1/(2^e)\n    # 3. Subtract e from 2\n    # 4. If e < 0 then add 1 and repeat from step 1\n    # 5. Else return 2^e\n    \n    # Step 1 : Find the exponent of n\n    e = 0\n    while (n & 1) == 0:\n        n >>= 1\n        e += 1\n    \n    # Step 2 : Find the value of 1/(2^e)\n    if e > 0:\n        # If 1/(2^e) is greater than 1, return 1/(2^e)\n        if e > 31:\n            return 1\n        # Else, calculate 1/(2^e) by subtracting 1 and adding 1 and repeating step 1\n        else:\n            return (1/(2**e)) - 1\n    # Step 3 : Subtract e from 2\n    e -= 1\n    \n    # Step 4 : If e < 0 then add 1 and repeat from step 1\n    if e < 0:\n        e += 1\n        while e > 0:\n            n += 1\n            e -= 1\n    # Step 5 : Return 2^e\n    return (2**e)\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while (2 ** power) < n:\n        power += 1\n    return power\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count +=1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    a = a.copy()\n    c = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            c += 1\n    return c\n    "
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count +=1\n    return count\n    \n    \ndef character_frequency(a):\n    '''\n    Write a function to find frequency of a character in a string.\n    '''\n    freq = {}\n    for i in a:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    f = a.count(x)\n    return f\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in a:\n        if i==x:\n            count=count+1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count +=1\n    return count\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    if m == 0 and n == len(list1):\n        return 0\n    if n < 0:\n        n = n + len(list1)\n    return sum(list1[m:n])\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m-1, n):\n        total += list1[i]\n    return total\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m,n+1):\n        sum = sum + list1[i]\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    result = 0\n    for i in range(m, n):\n        result += list1[i]\n    return result\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m-1, n):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n + 1):\n        sum = sum + list1[i]\n    print(sum)\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n + 1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    if m > 0:\n        for i in range(m, n):\n            sum = sum + list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n + 1):\n        sum += list1[i]\n    print(sum)\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    import math\n    a = float(a)\n    return (a*5*math.sqrt(5))//4\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # function definition\n    def pentagon_perimeter(a):\n        '''\n        A regular pentagon is a polygon with four equal sides. The sides must be of equal length.\n        Pentagons don\u2019t have to be regular, although the length of each side must be equal.\n        '''\n        # calculates the area of a pentagon \n        area_pent = (5 * a**2)/(4 * math.tan(math.pi/5))\n        return math.sqrt(area_pent)\n    print('The perimeter of a pentagon with a side of'+ str(a) +'is'+ str(pentagon_perimeter(a)))\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    s=3*a\n    return s\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*(5*(math.sqrt(5)-1)))+(((math.sqrt(5))/2)*a)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if type(a)!= int or a <= 0:\n        return None\n    else:\n        return 0.25 * a * ((2 * math.sqrt(5)) + 1)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    pi = math.pi\n    S = a*(1 - math.sqrt(5))/2\n    return 2*S*pi\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 2*(5*a**0.5)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # a = float(input(\"Enter side of the pentagon: \"))\n    p = (5 * a) * math.sqrt(3)\n    print(f\"The perimeter of a pentagon with {a} is {p}\")\n    return p\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    sides_list = []\n    sides_list.append(a)\n    sides_list.append(a)\n    sides_list.append(a)\n    sides_list.append(a)\n    sides_list.append(a)\n    sides_list.append(a)\n    perimeter = sum(sides_list)\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    if len(s) >= 1:\n        for c in range(0, len(s)):\n            if s[c] == \"S\" or s[c] == \"d\":\n                count += 1\n    return count\n    \ndef count_occurance_all(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    if len(s) >= 1:\n        for c in range(0, len(s)):\n            if s[c] == \"S\" or s[c] == \"d\" or s[c] == \"t\":\n                count += 1\n    return count\n    \n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if'std' in s[i:i+6]:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(0,len(s)):\n        if(s[i:i+3] =='std'):\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    # s = \"std std std std\"\n    # s = \"std\"\n    # s = \"string\"\n    count = s.count('std')\n    print(count)\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 't' and s[i+1] == 'd':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'e':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for c in s:\n        if c =='s':\n            count += 1\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in range(len(test_tuple)-1):\n        if type(test_tuple[i])!= type(test_tuple[i+1]):\n            print('Wrong input')\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_of_test_tuple = type(test_tuple)\n    if type_of_test_tuple == tuple:\n        type_of_test_tuple = type(test_tuple[0])\n        for i in range(len(test_tuple)):\n            if type_of_test_tuple == type(test_tuple[i]):\n                return True\n        return False\n    return False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) <= 1:\n        return False\n    elif not isinstance(test_tuple[0],type(test_tuple[1])):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_list = []\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) == type_list:\n            pass\n        else:\n            type_list.append(type(test_tuple[i]))\n    return type_list\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!=type(test_tuple[0]):\n            print(\"Tuple values are not of same data type\")\n            return False\n    print(\"True\")\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    result = True\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) == str:\n            if result == False:\n                return False\n        else:\n            result = False\n    return result\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if type(test_tuple[0]) == type(test_tuple[1]) and type(test_tuple[2]) == type(test_tuple[3]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in test_tuple:\n        if not isinstance(i,int):\n            print('Invalid input, tuple should contain only integer elements')\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in test_tuple:\n        if not(isinstance(i,int) or isinstance(i,float)):\n            return False\n    return True\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    l = 0\n    h = n - 1\n    while l <= h:\n        mid = (l + h) // 2\n        count = 0\n        for i in arr:\n            if i == arr[mid]:\n                count += 1\n        if count > n//2:\n            h = mid - 1\n        else:\n            l = mid + 1\n    return arr[l]\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Corner case\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    \n    # Check element itself\n    if arr[n//2] == x:\n        return True\n    \n    # check left\n    if arr[n//2 - 1] == x:\n        return True\n    \n    # check right\n    if arr[n//2] == x:\n        return True\n    \n    return False\n    \ndef majority(arr, n):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Corner case\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    \n    # Check element itself\n    if arr[n//2] == x:\n        return True\n    \n    # check left\n    if arr[n//2 - 1] == x:\n        return True\n    \n    # check right\n    if arr[n//2] == x:\n        return True\n    \n    return False\n    \n    \ndef majority_element(arr, n):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Corner case\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    \n    # Check element itself\n    if arr[n//2] == x:\n        return True\n    \n    # check left\n    if arr[n//2 - 1] == x:\n        return True\n    \n    # check right\n    if arr[n//2] == x:\n        return True\n    \n    return False\n    \n    \ndef majority_element2(arr, n):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Corner case\n    if n == 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    \n    # Check element itself\n    if arr[n//2] == x:\n        return True\n    \n    # check left\n    if arr[n//2 - 1] == x:\n        return True\n    \n    # check right\n    if arr[n//2] == x:\n        return True\n    \n    return False\n    \n    \ndef median(arr, n):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns the median element in the given sorted array.\n    '''\n    # Corner case\n    if n == 0:\n        return None\n    if n == 1:\n        return arr[0]\n    \n    # Check element itself\n    if arr[n//2] == x:\n        return arr[n//2]\n    \n    # Check left\n    if arr[n//2 - 1] == x:\n        return arr[n//2 - 1]\n    \n    # Check right\n    if arr[n//2] == x:\n        return arr[n//2]\n    \n    return None\n    \ndef median2(arr, n):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns the median element in the given sorted array.\n    '''\n    # Corner case\n    if n == 0:\n        return None\n    if n == 1:\n        return arr[0]\n    \n    # Check element itself\n    if arr[n//2] == x:\n        return arr[n//2]\n    \n    # Check left\n    if arr[n//2 - 1] == x:\n        return arr[n//2 - 1]\n    \n    # Check right\n    if arr[n//2] == x:\n        return arr[n//2]\n    \n    return None\n    \n    \ndef median3(arr, n):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns the median element in the given sorted array.\n    '''\n    # Corner case\n    if n == 0:\n        return None\n    if n == 1:\n        return arr[0]\n    \n    # Check element itself\n    if arr[n//2] == x:\n        return arr[n//2]\n    \n    # Check left\n    if arr[n//2 - 1] == x:\n        return arr[n//2 - 1]\n    \n    # Check right\n    if arr[n//2] == x:\n        return arr[n//2]\n    \n    return None\n    \ndef median4(arr, n):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns the median element in the given sorted array.\n    '''\n    # Corner case\n    if n == 0:\n        return None\n    if n == 1:\n        return arr[0]\n    \n    # Check element itself\n    if arr[n//2] == x:\n        return arr[n//2]\n    \n    # Check left\n    if arr[n//2 - 1] == x:\n        return arr[n//2 - 1]\n    \n    # Check right\n    if arr[n//2] == x:\n        return arr[n//2]\n    \n    return None\n    \n    \ndef median5(arr, n):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns the median element in the given sorted array.\n    '''\n    # Corner case\n    if n == 0:\n        return None\n    if n == 1:\n        return arr[0]\n    \n    # Check element itself\n    if arr[n//2] == x:\n        return arr[n//2]\n    \n    # Check left\n    if arr[n//2 - 1] == x:\n        return arr[n//2 - 1]\n    \n    # Check right\n    if arr[n//2] == x:\n        return arr[n//2]\n    \n    return None\n    \n    \ndef median6(arr, n):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns the median element in the given sorted array.\n    '''\n    # Corner case\n    if n == 0:\n        return None\n    if n == 1:\n        return arr[0]\n    \n    # Check element itself\n    if arr[n//2] == x:\n        return arr[n//2]\n    \n    # Check left\n    if arr[n//2 - 1] == x:\n        return arr[n//2 - 1]\n    \n    # Check right\n    if arr[n//2] == x:\n        return arr[n//2]\n    \n    return None\n    \n    \ndef median7(arr, n):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns the median element in the given sorted array.\n    '''\n    # Corner case\n    if n == 0:\n        return None\n    if n == 1:\n        return arr[0]\n    \n    # Check element itself\n    if arr[n//2] == x:\n        return arr[n//2]\n    \n    # Check left\n    if arr[n//2 - 1] == x:\n        return arr[n//2 - 1]\n    \n    # Check right\n    if arr[n//2] == x:\n        return arr[n//2]\n    \n    return None\n    \n    \ndef median8(arr, n):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns the median element in the given sorted array.\n    '''\n    # Corner case\n    if n == 0:\n        return None\n    if n == 1:\n        return arr[0]\n    \n    # Chec"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    l = 1\n    while (l < n):\n        l += 1\n        if (arr[l-1] == x):\n            l = n\n    return (l == n and arr[l-1] == x)\n    \n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # case 1: arr contains only one element, return True\n    if n == 1: return True\n    # case 2: arr contains no element\n    if n == 0: return False\n    # case 3: x is greater than the majority element\n    if arr[n//2] <= x: return False\n    # case 4: x is smaller than the majority element\n    if arr[n//2] > x:\n        return is_majority(arr, n//2, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    i = 0\n    j = n - 1\n    while i <= j:\n        mid = int((i + j)/2)\n        if arr[mid] == x:\n            return True\n        elif arr[mid] < x:\n            i = mid + 1\n        else:\n            j = mid - 1\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    mid = n//2\n    cnt = 0\n    for i in range(n):\n        if arr[i] == x:\n            cnt += 1\n    if cnt > mid:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    #iterate through list\n    for i in range(n):\n        curr = arr[i]\n        #check if the current number is equal to x\n        if curr == x:\n            count = 1\n        else:\n            count = 0\n        #increment count of elements\n        count += count\n        #if count is greater than half of the length of the list\n        #return true\n        if count > (n/2):\n            return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if len(arr)==0: return False\n    if len(arr)==1: return True if arr[0]==x else False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    cnt = 0\n    for i in range(n):\n        if arr[i] == x:\n            cnt += 1\n    if cnt > n/2:\n        return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    cnt = 0\n    if n == 1:\n        return False\n    if n == 2:\n        return True if arr[0] == arr[1] else False\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return len([1 for i in range(32) if n & (1 << i)])"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # first convert the given number to binary and then count the number of 1's in the binary number.\n    binary_n = \"{0:b}\".format(n) \n    return binary_n.count(\"1\")\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    if (n > 1):\n        count = 0\n        while (n!= 0):\n            count += n & 1\n            n = n >> 1\n        return count\n    else:\n        return 0\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    while n:\n        n, rem = divmod(n, 2)\n        if rem:\n            return 1 + count_Set_Bits(rem)\n    return 0\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    num = n\n    result = 0\n    while num:\n        num = num & (num - 1)\n        result += 1\n    return result\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += 1\n        n = n&(n-1)\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    ans=0\n    while n:\n        ans+=1\n        n>>=1\n    return ans\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        n = n & (n-1) \n        count += 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    i = 0\n    while(n):\n        i += n&1\n        n >>= 1\n    return i\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    #start writing your code here\n    count=0\n    while n:\n        if n&1:\n            count+=1\n        n>>=1\n    return count\n    #return count\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Your Code Here\n    if str=='':\n        return str\n    else:\n        new_str=''\n        for i in range(len(str)):\n            if i%2==0:\n                new_str=new_str+str[i]\n        return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(0, len(str), 2):\n        new_str = new_str + str[i]\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    res = \"\"\n    for index, char in enumerate(str):\n        if index % 2 == 0:\n            res += char\n    return res\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i%2 == 0:\n            new_str += str[i]\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str=''\n    for i in range(len(str)):\n        if i%2==0:\n            new_str+=str[i]\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join(filter(lambda x: x.isdigit(), str))\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    #str1 = str.strip()\n    #str1 = str.replace(\" \", \"\")\n    str1 = \"\"\n    for i in range(len(str)):\n        if i%2 == 0:\n            str1 += str[i]\n    return str1\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([str[i] for i in range(len(str)) if i % 2 == 0])\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([c for i, c in enumerate(str) if i % 2 == 1])\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    a = ''.join(char if idx%2==0 else '' for idx,char in enumerate(str))\n    print(a)\n    return a\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # If a is smaller than b, make b the smallest\n    # If a is smaller than c, make c the smallest\n    # If a is smaller than c, make a the smallest\n    if a<b and a<c:\n        smaller = a\n    elif b<c:\n        smaller = b\n    else:\n        smaller = c\n    return smaller\n    "
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c:\n        return a\n    elif b<c<a:\n        return b\n    else:\n        return c\n        "
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<=b and a<=c:\n        return a\n    elif b<=a and b<=c:\n        return b\n    return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        print(a)\n    elif b <= a and b <= c:\n        print(b)\n    else:\n        print(c)\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    if b<a and b<c:\n        return b\n    if c<a and c<b:\n        return c\n    \n    \nprint(min_of_three(10,30,50))"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a<b and a<c):\n        return a\n    elif (b<a and b<c):\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if b < c:\n            print(a,b,c)\n            return a\n        else:\n            print(a,c,b)\n            return a\n    else:\n        if a < c:\n            print(b,a,c)\n            return b\n        else:\n            print(b,c,a)\n            return b\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # function to check if a given number is a power of 2\n    def is_power(num): \n        return ((num & (num - 1)) == 0) and num!= 0\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if(n<0 or l>r):\n        return -1\n    \n    s=0\n    for i in range(l,r+1):\n        s=s|i\n    if(s==(n<<l)):\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    if r < l or n <= 0:\n        print(f\"Incorrect Range\")\n    else:\n        s = bin(n)\n        s = s.replace(\"0b\", \"\")\n        count = 0\n        for i in range(l, r+1):\n            if s[i] == '1':\n                count += 1\n        if count == len(s):\n            print(f\"Yes, all bits are set\")\n        else:\n            print(f\"No, all bits are not set\")\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n = int(n)\n    l = int(l)\n    r = int(r)\n    if ((n>=0) and (l>=0) and (r>=0) and (l<=r)):\n        while(l<r):\n            if (n & 1) == 0:\n                return False\n            n = n>>1\n            l = l+1\n        if n == 0:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    try:\n        n = int(n)\n        l = int(l)\n        r = int(r)\n    except:\n        return \"invalid\"\n    if n < l or r < l or n > r:\n        return \"invalid\"\n    if (n >= l and n <= r):\n        for i in range(n-l):\n            if l % 2 == 1:\n                l = l + 1\n            else:\n                l = l - 1\n    if (n >= r and n <= r):\n        for i in range(n-l):\n            if r % 2 == 1:\n                r = r + 1\n            else:\n                r = r - 1\n    if l == r:\n        return \"Bit is not set\"\n    if l == n or r == n:\n        return \"Bit is set\"\n    return \"Bit is set\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if r==n:\n        return True\n    if l==r:\n        return True\n    mid = (l+r)//2\n    if mid==n:\n        return True\n    if n&mid:\n        return False\n    else:\n        return all_Bits_Set_In_The_Given_Range(n,l,mid) or all_Bits_Set_In_The_Given_Range(n,mid+1,r)\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    bit = 0\n    for i in range(l,r+1):\n        bit = bit | i\n    return (bit == 0)\n        \n    \n    \n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    set_index = l+1\n    while set_index <= r:\n        set_bit = bin(set_index).count('1')\n        if set_bit!= 0:\n            return False\n        set_index += 1\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return n & (1<<l-1)==0 and (n & (1<<(r-l-1)))==0\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return ((2**n)-1) & (l|r)\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        while i < len(arr) and arr[i] < 0:\n            tmp = arr[i]\n            arr[i] = arr[i+1]\n            arr[i+1] = tmp\n            i += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[n-1] = arr[n-1], arr[i]\n            n -= 1\n    return arr, n\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    result = []\n    # Add negative elements to beginning of list\n    for i in range(n):\n        if arr[i] < 0:\n            result.append(arr[i])\n            arr.pop(i)\n    # Add positive elements to end of list\n    for i in range(len(arr)):\n        if arr[i] >= 0:\n            result.append(arr[i])\n    #print(result)\n    return result\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    print('Original array:', arr)\n    neg = 0\n    pos = 0\n    for i in range(n):\n        if arr[i] > 0:\n            if neg == pos:\n                print('negative and positive element should be at same index')\n                exit()\n            else:\n                print(arr[i], 'is positive and should be at index', pos)\n                arr[i], arr[pos] = arr[pos], arr[i]\n                pos += 1\n        elif arr[i] < 0:\n            if neg == pos:\n                print('negative and positive element should be at same index')\n                exit()\n            else:\n                print(arr[i], 'is negative and should be at index', neg)\n                arr[i], arr[neg] = arr[neg], arr[i]\n                neg += 1\n    print('Re-arranged array:', arr)\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n >= len(arr):\n        return\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return arr[n:] + arr[:n]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Edge cases\n    if (n == 1 and len(arr) > 0):\n        return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    low, high = 0, n-1\n    while low < high:\n        if arr[low] < 0 and arr[high] < 0:\n            arr[low], arr[high] = arr[high], arr[low]\n            low += 1\n            high -= 1\n        elif arr[low] >= 0 and arr[high] < 0:\n            high -= 1\n        elif arr[low] < 0 and arr[high] >= 0:\n            low += 1\n        else:\n            low += 1\n            high -= 1\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(0, n):\n        if arr[i] < 0:\n            arr[i], arr[i-1] = arr[i-1], arr[i]\n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','',str1.count(' '))\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(\" \",\"\")\n    return str1\nprint(replace_blank(\"hiiiiiiiii\",'0'))\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    list1=list(str1)\n    for i in range(len(list1)):\n        if list1[i]==\" \":\n            list1[i]=char\n    str1=\"\".join(list1)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','*')\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','%20')\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','',str1.count(' '))\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\")\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = str1.replace(\" \",\"\")\n    print(new_str)\nreplace_blank(\"            hello             \",\"*\")\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1=str1.replace(' ','')\n    return str1\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2 = []\n    for i in range(n):\n        a = heapq.heappop(list1)\n        list2.append(a)\n    return list2\nprint(larg_nnum([0,1,2,3,4,5,6,7,8,9],5))\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return sorted(list1, reverse=True)[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if(len(list1) == 0):\n        return []\n    n_largest = heapq.nlargest(n,list1)\n    return n_largest\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return list1[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    \n    return heapq.nlargest(n,list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1=sorted(list1,reverse=True)\n    return list1[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse=True)\n    list1_1 = []\n    for i in range(n):\n        list1_1.append(list1[i])\n    return list1_1\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1 = list1\n    largest = heapq.nlargest(n, list1)\n    return largest\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a list to store largest n numbers in descending order\n    largest_n_numbers = []\n    \n    # create a heap using heapq module, heappush and heappop operations\n    heapq.heapify(list1)\n    #print(\"the list after heapifying: \",list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    n_l = list1[:n]\n    n_l.sort()\n    return n_l\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import numpy as np\n    \n    R = r\n    H = h\n    L = (4/3)*np.pi*R**3\n    A = H*L\n    return(A)\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi=3.14\n    area=pi*(r**2)*h\n    return area\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import numpy as np\n    A=np.pi*r*r\n    B=2*np.pi*r*h\n    C=2*np.pi*r\n    D=np.pi*r*h\n    E=np.pi*r**2\n    F=2*np.pi*r\n    Cyl_lateral=A+B+C+D-E-F\n    return Cyl_lateral"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = PI*(r**2)*h\n    return area\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return PI*r*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    try:\n        a = 2*h\n        b = r*2*np.pi\n        c = r*2*np.pi\n        res = a*c\n        return(res)\n    except:\n        print(\"error\")\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    n = r * math.pi\n    return h * n**2 / 12\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return r*r*math.pi*h\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area=h*r*3.14159265\n    return area\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    a=2*h\n    l=r*2\n    Area=(3*pi*(h/2))+(pi*(r**2))+(3*pi*(r**2)*h)-(pi*r**2)\n    return(Area)\nprint(lateralsuface_cylinder(3,4)"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    if l == 0:\n        return 0\n    else:\n        return (l**3)\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*l*l\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    import math\n    return math.pow(l,3)\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    #1\n    '''\n    cube_volume = l*l*l\n    return cube_volume\n    '''\n    #2\n    cube_volume = l**3\n    return cube_volume\n    #3\n    #cube_volume = l**3\n    #return cube_volume\n    #4\n    '''\n    return l**3\n    '''\n    return cube_volume\n    '''\n    return cube_volume\n    '''\n    return cube_volume\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '''\n    '''\n    return cube_volume\n    '"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    \n    return 2**n\n    \n    \nif __name__ == '__main__':\n    assert even_bit_set_number(4) == 2\n    assert even_bit_set_number(5) == 3\n    assert even_bit_set_number(6) == 5\n    assert even_bit_set_number(7) == 5\n    assert even_bit_set_number(8) == 4\n    assert even_bit_set_number(9) == 5\n    assert even_bit_set_number(10) == 4\n    assert even_bit_set_number(11) == 4\n    assert even_bit_set_number(12) == 6\n    assert even_bit_set_number(13) == 6\n    assert even_bit_set_number(14) == 6\n    assert even_bit_set_number(15) == 6\n    assert even_bit_set_number(16) == 5\n    assert even_bit_set_number(17) == 5\n    assert even_bit_set_number(18) == 5\n    assert even_bit_set_number(19) == 5\n    assert even_bit_set_number(20) == 5\n    assert even_bit_set_number(21) == 5\n    assert even_bit_set_number(22) == 5\n    assert even_bit_set_number(23) == 5\n    assert even_bit_set_number(24) == 4\n    assert even_bit_set_number(25) == 5\n    assert even_bit_set_number(26) == 4\n    assert even_bit_set_number(27) == 5\n    assert even_bit_set_number(28) == 4\n    assert even_bit_set_number(29) == 5\n    assert even_bit_set_number(30) == 4\n    assert even_bit_set_number(31) == 4\n    assert even_bit_set_number(32) == 4\n    assert even_bit_set_number(33) == 4\n    assert even_bit_set_number(34) == 4\n    assert even_bit_set_number(35) == 4\n    assert even_bit_set_number(36) == 4\n    assert even_bit_set_number(37) == 4\n    assert even_bit_set_number(38) == 4\n    assert even_bit_set_number(39) == 5\n    assert even_bit_set_number(40) == 5\n    assert even_bit_set_number(41) == 5\n    assert even_bit_set_number(42) == 5\n    assert even_bit_set_number(43) == 4\n    assert even_bit_set_number(44) == 5\n    assert even_bit_set_number(45) == 4\n    assert even_bit_set_number(46) == 5\n    assert even_bit_set_number(47) == 4\n    assert even_bit_set_number(48) == 4\n    assert even_bit_set_number(49) == 4\n    assert even_bit_set_number(50) == 5\n    assert even_bit_set_number(51) == 5\n    assert even_bit_set_number(52) == 5\n    assert even_bit_set_number(53) == 5\n    assert even_bit_set_number(54) == 4\n    assert even_bit_set_number(55) == 5\n    assert even_bit_set_number(56) == 4\n    assert even_bit_set_number(57) == 5\n    assert even_bit_set_number(58) == 4\n    assert even_bit_set_number(59) == 5\n    assert even_bit_set_number(60) == 4\n    assert even_bit_set_number(61) == 4\n    assert even_bit_set_number(62) == 4\n    assert even_bit_set_number(63) == 4\n    assert even_bit_set_number(64) == 5\n    assert even_bit_set_number(65) == 5\n    assert even_bit_set_number(66) == 5\n    assert even_bit_set_number(67) == 5\n    assert even_bit_set_number(68) == 4\n    assert even_bit_set_number(69) == 5\n    assert even_bit_set_number(70) == 4\n    assert even_bit_set_number(71) == 5\n    assert even_bit_set_number(72) == 4\n    assert even_bit_set_number(73) == 5\n    assert even_bit_set_number(74) == 4\n    assert even_bit_set_number(75) == 4\n    assert even_bit_set_number(76) == 5\n    assert even_bit_set_number(77) == 5\n    assert even_bit_set_number(78) == 5\n    assert even_bit_set_number(79) == 5\n    assert even_bit_set_number(80) == 5\n    assert even_bit_set_number(81) == 5\n    assert even_bit_set_number(82) == 5\n    assert even_bit_set_number(83) == 5\n    assert even_bit_set_number(84) == 5\n    assert even_bit_set_number(85) == 5\n    assert even_bit_set_number(86) == 4\n    assert even_bit_set_number(87) == 5\n    assert even_bit_set_number(88) == 4\n    assert even_bit_set_number(89) == 5\n    assert even_bit_set_number(90) == 4\n    assert even_bit_set_number(91) == 5\n    assert even_bit_set_number(92) == 4\n    assert even_bit_set_number(93) == 5\n    assert even_bit_set_number(94) == 4\n    assert even_bit_set_number(95) == 5\n    assert even_bit_set_number(96) == 4\n    assert even_bit_set_number(97) == 5\n    assert even_bit_set_number(98) == 5\n    assert even_bit_set_number(99) == 5\n    assert even_bit_set_number(100) == 5\n    assert even_bit_set_number(101) == 5\n    assert even_bit_set_number(102) == 5\n    assert even_bit_set_number(103) == 5\n    assert even_bit_set_number(104) == 5\n    assert even_bit_set_number(105) == 5\n    assert even_bit_set_number(106) == 5\n    assert even_bit_set_number(107) == 5\n    assert even_bit_set_number(108) == 4\n    assert even_bit_set_number(109) == 5\n    assert even_bit_set_number(110) == 4\n    assert even_bit_set_number(111) == 5\n    assert even_bit_set_number(112) == 4\n    assert even_bit_set_number(113) == 5\n    assert even_bit_set_number(114) == 4\n    assert even_bit_set_number(115) == 5\n    assert even_bit_set_number(116) == 4\n    assert even_bit_set_number(117) == 5\n    assert even_bit_set_number(118) == 4\n    assert even_bit_set_number(119) == 5\n    assert even_bit_set_number(120) == 4\n    assert even_bit_set_number(121) == 5\n    assert even_bit_set_number(122) == 4\n    assert even_bit_set_number(123) == 5\n    assert even_bit_set_number(124) == 5\n    assert even_bit_set_number(125) == 4\n    assert even_bit_set_number(126) == 5\n    assert even_bit_set_number(127) == 4\n    assert even_bit_set_number(128) == 5\n    assert even_bit_set_number(129) == 4\n    assert even_bit_set_number(130) == 5\n    assert even_bit_set_number(131) == 4\n    assert even_bit_set_number(132) == 5\n    assert even_bit_set_numbe"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n-1)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    #return 2 ** (n - 1)\n    return ((n & (2 ** (n - 1))) >> (n - 1))\n    \nif __name__ == \"__main__\": \n    print even_bit_set_number(5) \n    print even_bit_set_number(9) \n    print even_bit_set_number(10) \n    print even_bit_set_number(11)"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (1 << (n.bit_length() - 1))\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    b = n | 0xffff0000\n    return b >> 16\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    num = n\n    while(n & 0x01):\n        n = n >> 1\n        n = n | (0x01 << (num % 4))\n        num = num + 1\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(1,n+1):\n        if (i & 2):\n            print(i)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    \n    # num = 0\n    # while(n):\n    #     num = (num << 1) | (n & 1)\n    #     n = n >> 1\n    # return num\n    \n    return (n & 0xffffffff) + 1\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return (n | (1 << (int(math.log(n,2) - 1))) | (1 << (int(math.log(n,2) - 2))))\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n-1) \n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = Counter()\n    for item in test_list:\n        occurences[item] += 1\n    return occurences \n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Empty list\n    if len(test_list) == 0:\n        return {}\n    # Loop through each tuple in the list\n    for tuple in test_list:\n        # If the tuple is in the dictionary, increment the count\n        if tuple in dict_occurences:\n            dict_occurences[tuple] += 1\n        # Otherwise, add the tuple and its count to the dictionary\n        else:\n            dict_occurences[tuple] = 1\n    return dict_occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuple = set()\n    dict_occurences = {}\n    for tuple_t in test_list:\n        if tuple_t not in unique_tuple:\n            unique_tuple.add(tuple_t)\n            dict_occurences[tuple_t] = 1\n        else:\n            dict_occurences[tuple_t] += 1\n    return dict_occurences\n    \n    \n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    print('Testing check_occurences...')\n    # convert list into a dict\n    test_dict = dict(test_list)\n    # create counter for each item\n    test_dict_c = Counter(test_dict)\n    # store in dicts\n    result = dict(test_dict_c)\n    print(result)\n    print('Completed')\n    return result\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    # return {k: v for k, v in Counter(test_list).items() if v > 1}\n    # return dict((k, v) for k, v in Counter(test_list).items() if v > 1)\n    # return {k:v for k, v in Counter(test_list).items() if v > 1}\n    return {k:v for k, v in test_list if v > 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for item in test_list:\n        if item in result:\n            result[item] += 1\n        else:\n            result[item] = 1\n    return result\n    \nprint(check_occurences([])) # \u2192 {}\nprint(check_occurences([('a', 'a'), ('a', 'b'), ('a', 'b'), ('b', 'b')])) # \u2192 {('a', 'a'): 2, ('a', 'b'): 2, ('b', 'b'): 2}\nprint(check_occurences([('a', 'a'), ('a', 'a'), ('a', 'b'), ('b', 'b'), ('b', 'b')])) # \u2192 {('a', 'a'): 3, ('a', 'b'): 2, ('b', 'b'): 2}\nprint(check_occurences([('a', 'a'), ('a', 'a'), ('a', 'b'), ('b', 'a')])) # \u2192 {('a', 'a'): 2, ('a', 'b'): 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    for tup in test_list:\n        if tup in test_dict:\n            test_dict[tup] += 1\n        else:\n            test_dict[tup] = 1\n    return test_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = {}\n    for pair in test_list:\n        if pair not in occurences:\n            occurences[pair] = 1\n        else:\n            occurences[pair] += 1\n    return occurences\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    final_dict = {}\n    for i in test_list:\n        if i in final_dict:\n            final_dict[i] += 1\n        else:\n            final_dict[i] = 1\n    return final_dict\nprint(check_occurences([(1,2),(1,2),(2,3)]))\nprint(check_occurences([(1,2),(1,2),(2,3)]))\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    a_dict = {}\n    for i in test_list:\n        a_dict.setdefault(i,0)\n        a_dict[i] += 1\n    return(a_dict)\n    \ndef return_first_occurence(test_list,number):\n    '''\n    Write a function that takes in a list of tuples and returns the first occurence of a given number in the list.\n    '''\n    for i in test_list:\n        if i[1] == number:\n            return(i)\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    res = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i:j+1]!= \"\":\n                res += 1\n    return res\n    \nprint(number_of_substrings(\"Lorem ipsum\")) #4\nprint(number_of_substrings(\"Lorem ipsum dolor sit amet\")) # 5\nprint(number_of_substrings(\"Lorem ipsum dolor sit amet consectetur adipiscing elit.\")) # 11\nprint(number_of_substrings(\"Lorem ipsum dolor sit amet consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit.\")) # 56\nprint(number_of_substrings(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit.\")) # 63\nprint(number_of_substrings(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit.\")) # 63\nprint(number_of_substrings(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit.\")) # 60\nprint(number_of_substrings(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit.\")) # 54\nprint(number_of_substrings(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit.\")) # 53\nprint(number_of_substrings(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit.\")) # 52\nprint(number_of_substrings(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit.\")) # 51\nprint(number_of_substrings(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit.\")) # 50\nprint(number_of_substrings(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit.\")) # 49\nprint(number_of_substrings(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit.\")) # 48\nprint(number_of_substrings(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ip"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if(str[i]!=\" \"):\n            count+=1\n    print(count)\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(0, len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j].strip():\n                count = count + 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    l=[]\n    for i in range(len(str)):\n        if str[i]!=' ':\n            l.append(str[i])\n    return len(l)\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if not str: \n        return 0\n    else: \n        # DP: i is starting index, j is ending index \n        dp = [[0 for j in range(len(str))] for i in range(len(str))] \n        count = 0\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count=0\n    if len(str)==0:\n        return count\n    elif len(str)==1:\n        return 1\n    else:\n        substring=str[0]\n        if len(substring)==0:\n            return count+1\n        else:\n            for i in range(1,len(str)):\n                if substring[0]!=str[i]:\n                    count+=1\n                substring=substring+str[i]\n            count+=1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        sub_string = str[i]\n        while i + 1 < len(str) and str[i + 1] not in sub_string:\n            sub_string += str[i + 1]\n            i += 1\n        if len(sub_string) > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = 0\n    for i in range(len(str)):\n        for j in range(i+1,len(str)+1):\n            if str[i:j]!= \"\":\n                n+=1\n    return n \n    #code here\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= \"\":\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    #write your code here\n    count = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i:j+1]!= '':\n                count +=1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #loop through the range for n = 1 to n_max, which is a solution to the problem\n    for n_max in range(1,n+1):\n        #initialize count, max, and n_max_minus_1\n        count = 1\n        max = 1\n        n_max_minus_1 = 0\n        \n        #loop through the range for n_max -1 to n_max, which is a solution to the problem\n        for n_max_minus_1 in range(1,n_max):\n            #count = count + 1\n            max = max + 1\n            \n            #only allow sequences to have positive integers, not negative integers\n            if max < 1:\n                max = 1\n            \n            #only allow sequences to have elements less than or equal to m\n            if max > m:\n                break\n            \n            #reset the max value to the value in the loop\n            max = 1\n            \n            #update the max value to the value in the loop minus 1\n            max = max - 1\n            \n            #update the count value to the value in the loop minus 1\n            count = count - 1\n            \n            #update the n_max_minus_1 value to the value in the loop minus 1\n            n_max_minus_1 = n_max_minus_1 - 1\n            \n            #check to see if the count value is 1, if so then move to the next element in the sequence\n            if count == 1:\n                continue\n                \n            #check to see if the max value is 1, if so then move to the next element in the sequence\n            if max == 1:\n                continue\n                \n            #check to see if the n_max_minus_1 value is 1, if so then move to the next element in the sequence\n            if n_max_minus_1 == 1:\n                continue\n                \n    return count\n    \n    \n    \n    \n    #loop through the range for n = 1 to n_max, which is a solution to the problem\n    for n_max in range(1,n+1):\n        #initialize count, max, and n_max_minus_1\n        count = 1\n        max = 1\n        n_max_minus_1 = 0\n        \n        #loop through the range for n_max -1 to n_max, which is a solution to the problem\n        for n_max_minus_1 in range(1,n_max):\n            #count = count + 1\n            max = max + 1\n            \n            #only allow sequences to have positive integers, not negative integers\n            if max < 1:\n                max = 1\n            \n            #only allow sequences to have elements less than or equal to m\n            if max > m:\n                break\n            \n            #only allow sequences to have elements greater than or equal to m\n            if max <= m:\n                #update the max value to the value in the loop minus 1\n                max = max - 1\n            \n            #update the count value to the value in the loop minus 1\n            count = count - 1\n            \n            #update the n_max_minus_1 value to the value in the loop minus 1\n            n_max_minus_1 = n_max_minus_1 - 1\n            \n            #check to see if the count value is 1, if so then move to the next element in the sequence\n            if count == 1:\n                continue\n                \n            #check to see if the max value is 1, if so then move to the next element in the sequence\n            if max == 1:\n                continue\n                \n            #check to see if the n_max_minus_1 value is 1, if so then move to the next element in the sequence\n            if n_max_minus_1 == 1:\n                continue\n                \n    return count\n    \n    \n    \n    \n    #loop through the range for n = 1 to n_max, which is a solution to the problem\n    for n_max in range(1,n+1):\n        #initialize count, max, and n_max_minus_1\n        count = 1\n        max = 1\n        n_max_minus_1 = 0\n        \n        #loop through the range for n_max -1 to n_max, which is a solution to the problem\n        for n_max_minus_1 in range(1,n_max):\n            #count = count + 1\n            max = max + 1\n            \n            #only allow sequences to have positive integers, not negative integers\n            if max < 1:\n                max = 1\n            \n            #only allow sequences to have elements less than or equal to m\n            if max > m:\n                break\n            \n            #only allow sequences to have elements greater than or equal to m\n            if max <= m:\n                #update the max value to the value in the loop minus 1\n                max = max - 1\n            \n            #update the count value to the value in the loop minus 1\n            count = count - 1\n            \n            #update the n_max_minus_1 value to the value in the loop minus 1\n            n_max_minus_1 = n_max_minus_1 - 1\n            \n            #check to see if the count value is 1, if so then move to the next element in the sequence\n            if count == 1:\n                continue\n                \n            #check to see if the max value is 1, if so then move to the next element in the sequence\n            if max == 1:\n                continue\n                \n            #check to see if the n_max_minus_1 value is 1, if so then move to the next element in the sequence\n            if n_max_minus_1 == 1:\n                continue\n                \n    return count\n    \n    \n    \n    #loop through the range for n = 1 to n_max, which is a solution to the problem\n    for n_max in range(1,n+1):\n        #initialize count, max, and n_max_minus_1\n        count = 1\n        max = 1\n        n_max_minus_1 = 0\n        \n        #loop through the range for n_max -1 to n_max, which is a solution to the problem\n        for n_max_minus_1 in range(1,n_max):\n            #count = count + 1\n            max = max + 1\n            \n            #only allow sequences to have positive integers, not negative integers\n            if max < 1:\n                max = 1\n            \n            #only allow sequences to have elements less than or equal to m\n            if max > m:\n                break\n            \n            #only allow sequences to have elements greater than or equal to m\n            if max <= m:\n                #update the max value to the value in the loop minus 1\n                max = max - 1\n            \n            #update the count value to the value in the loop minus 1\n            count = count - 1\n            \n            #update the n_max_minus_1 value to the value in the loop minus 1\n            n_max_minus_1 = n_max_minus_1 - 1\n            \n            #check to see if the count value is 1, if so then move to the next element in the sequence\n            if count == 1:\n                continue\n                \n            #check to see if the max value is 1, if so then move to the next element in the sequence\n            if max == 1:\n                continue\n                \n            #check to see if the n_max_minus_1 value is 1, if so then move to the next element in the sequence\n            if n_max_minus_1 == 1:\n                continue\n                \n    return count\n    \n    \n    \n    #loop through the range for n = 1 to n_max, which is a solution to the problem\n    for n_max in range(1,n+1):\n        #initialize count, max, and n_max_minus_1\n        count = 1\n        max = 1\n        n_max_minus_1 = 0\n        \n        #loop through the range for n_max -1 to n_max, which is a solution to the problem\n        for n_max_minus_1 in range(1,n_max):\n            #count = count + 1\n            max = max + 1\n            \n            #only allow sequences to have positive integers, not negative integers\n            if max < 1:\n                max = 1\n            \n            #only allow sequences to have elements less than or equal to m\n            if max > m:\n                break\n            \n            #only allow sequences to have elements greater than or equal to m\n            if max <= m:\n                #update the max value to the valu"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    # m and n are always larger than 0\n    \n    # if we want to go to 3, we need to go to 3 steps (starts from 0,1,2)\n    # total number of steps = (n-1) + (n-2) + (n-3)\n    # number of steps = (n+1) - (n-1)\n    # number of steps = (n+1) - (n-1) + 1\n    # number of steps = (n+1) - (n-1) + 2\n    # number of steps = (n+1) - (n-1) + 3\n    # number of steps = (n+1) - (n-1) + 4\n    # number of steps = (n+1) - (n-1) + 5\n    # number of steps = (n+1) - (n-1) + 6\n    # number of steps = (n+1) - (n-1) + 7\n    # number of steps = (n+1) - (n-1) + 8\n    # number of steps = (n+1) - (n-1) + 9\n    # total number of steps = (n+1) - (n-1) + 10\n    \n    # m = 100, n = 5, total number of steps = (n-1) + (n-2) + (n-3) + (n-4) + (n-5) + (n-6) + (n-7) + (n-8) + (n-9) + (n-10) + 1\n    # m = 101, n = 6, total number of steps = (n-1) + (n-2) + (n-3) + (n-4) + (n-5) + (n-6) + (n-7) + (n-8) + (n-9) + (n-10) + 2\n    # m = 102, n = 7, total number of steps = (n-1) + (n-2) + (n-3) + (n-4) + (n-5) + (n-6) + (n-7) + (n-8) + (n-9) + (n-10) + 3\n    # m = 103, n = 8, total number of steps = (n-1) + (n-2) + (n-3) + (n-4) + (n-5) + (n-6) + (n-7) + (n-8) + (n-9) + (n-10) + 4\n    # m = 104, n = 9, total number of steps = (n-1) + (n-2) + (n-3) + (n-4) + (n-5) + (n-6) + (n-7) + (n-8) + (n-9) + (n-10) + 5\n    # m = 105, n = 10, total number of steps = (n-1) + (n-2) + (n-3) + (n-4) + (n-5) + (n-6) + (n-7) + (n-8) + (n-9) + (n-10) + 6\n    # m = 106, n = 11, total number of steps = (n-1) + (n-2) + (n-3) + (n-4) + (n-5) + (n-6) + (n-7) + (n-8) + (n-9) + (n-10) + 7\n    # m = 107, n = 12, total number of steps = (n-1) + (n-2) + (n-3) + (n-4) + (n-5) + (n-6) + (n-7) + (n-8) + (n-9) + (n-10) + 8\n    # m = 108, n = 13, total number of steps = (n-1) + (n-2) + (n-3) + (n-4) + (n-5) + (n-6) + (n-7) + (n-8) + (n-9) + (n-10) + 9\n    # m = 109, n = 14, total number of steps = (n-1) + (n-2) + (n-3) + (n-4) + (n-5) + (n-6) + (n-7) + (n-8) + (n-9) + (n-10) + 10\n    # m = 110, n = 15, total number of steps = (n-1) + (n-2) + (n-3) + (n-4) + (n-5) + (n-6) + (n-7) + (n-8) + (n-9) + (n-10) + 11\n    # m = 111, n = 16, total number of steps = (n-1) + (n-2) + (n-3) + (n-4) + (n-5) + (n-6) + (n-7) + (n-8) + (n-9) + (n-10) + 12\n    # m = 112, n = 17, total number of steps = (n-1) + (n-2) + (n-3) + (n-4) + (n-5) + (n-6) + (n-7) + (n-8) + (n-9) + (n-10) + 13\n    # m = 113, n = 18, total number of steps = (n-1) + (n-2) + (n-3) + (n-4) + (n-5) + (n-6) + (n-7) + (n-8) + (n-9) + (n-10) + 14\n    # m = 114, n = 19, total number of steps = (n-1) + (n-2) + (n-3) + (n-4) + (n-5) + (n-6) + (n-7) + (n-8) + (n-9) + (n-10) + 15\n    # m = 115, n = 20, total number of steps = (n-1) + (n-2) + (n-3) + (n-4) + (n-5) + (n-6) + (n-7) + (n-8) + (n-9) + (n-10) + 16\n    # m = 116, n = 21, total number of steps = (n-1) + (n-2) + (n-3) + (n-4) + (n-5) + (n-6) + (n-7) + (n-8) + (n-9) + (n-10) + 17\n    # m = 117, n = 22, total number of steps = (n-1) + (n-2) + (n-3) + (n-4) + (n-5) + (n-6) + (n-7) + (n-8) + (n-9) + (n-10) + 18\n    # m = 118, n = 23, total number of steps = (n-1) + (n-2) + (n-3) + (n-4) + (n-5) + (n-6) + (n-7) + (n-8) + (n-9) + (n-10) + 19\n    # m = 119, n = 24, total number of steps = (n-1) + (n-2) + (n-3) + (n-4) + (n-5) + (n-6) + (n-7) + (n-8) + (n-9) + (n-10) + 20\n    # m = 120, n = 25, total number of steps = (n-1) + (n-2) + (n-3) + (n-4) + (n-5) + (n-6) + (n-7) + (n-8) + (n-9) + (n-10) + 21\n    # m = 121, n = 26, total number of steps = (n-1) + (n-2) + (n-3) + (n-4) + (n-5) + (n-6) + (n-7) + (n-8"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    l = []\n    count = 0\n    for i in range(n+1):\n        l.append(m*2)\n    for i in range(n):\n        if 2*l[i] > m and 2*l[i] <= m and l[i]%2 == 0:\n            count += 1\n        else:\n            continue\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # create a list of all possible n sequences\n    total = 0\n    # print(m,n)\n    for num in range(m,0,-1):\n        # print(num)\n        for i in range(n-1):\n            # print(i)\n            # print(num)\n            if num*2 > m:\n                break\n            if num*2 < m:\n                continue\n            if num%2 == 0:\n                continue\n            total += 1\n    # print(total)\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    seqs = []\n    while len(seqs) <= m:\n        for j in range(len(seqs)+1):\n            seq = seqs[:]\n            seq.append(j)\n            if all(is_valid(seq)):\n                print(seq)\n                seqs.append(seq)\n    return len(seqs)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def _get_number_of_sequences_of_length_n(m,n):\n        '''\n        Finds the number of sequences of length n with elements from 1 to m\n        '''\n        def _calc_recursive(m,n,seq):\n            '''\n            Calculates the number of possible sequences of length n with elements from 1 to m.\n            '''\n            if n == 1:\n                return 1\n            if m == 1:\n                return 1\n            if m == 0:\n                return 0\n            if n == 0:\n                return 0\n            if seq[-1] > 2*seq[-2]:\n                return 0\n            return (1 + _calc_recursive(m-1,n-1,seq))\n        return _calc_recursive(m,n,[1])\n    return _get_number_of_sequences_of_length_n(m,n)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # initialize 2D list to store the number of possible sequences\n    number_of_sequences = []\n    \n    # initialize 2D list to store the number of possible sequences\n    for i in range(n+1):\n        number_of_sequences.append([])\n        \n    for i in range(0,n+1):\n        number_of_sequences[i].append(1)\n        \n    for i in range(2,n+1):\n        for j in range(0,n-i):\n            number_of_sequences[i].append(number_of_sequences[i-1][j]+number_of_sequences[i-1][j+1])\n            \n    #print(number_of_sequences)\n    \n    return number_of_sequences[n][m-2]\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Your code here\n    # check if both numbers are not 0\n    if m == 0 or n == 0:\n        return 0\n    \n    # check if m and n are not equal\n    if m!= n:\n        return 0\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    from math import factorial\n    # this for loop calculates the number of sequences that are possible\n    # with length n\n    for i in range(n+1):\n        possible_sequences = factorial(n) // factorial(i) // factorial(n-i)\n        m -= 2*possible_sequences\n    return m\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m == 0:\n        return 0\n    if m == 1:\n        return 1\n    if m < 0:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n < 0:\n        return 0\n    total_number = 0\n    for i in range(m, n+1):\n        total_number += get_number_of_possible_sequences(i,n)\n    return total_number\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    for element in list2:\n        list1.append(element)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Your code here\n    list1 = list1[:-1]\n    list1.extend(list2)\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:len(list1)-1]+list2[:]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[0:len(list1)-1]+list2\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[0]\n    list2.pop(0)\n    list2.insert(0,list1[-1])\n    list1.pop(-1)\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n    \nstr1 = 'My name is Abhi'\nprint(count_charac(str1))\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    num_char = 0\n    for i in str1:\n        num_char += 1\n    print(\"Total number of characters in the string are: \",num_char)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_count = 0\n    for i in str1:\n        total_count += 1\n    return total_count\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n    \ndef count_words(str1):\n    '''\n    Write a function to count the number of words in a string.\n    '''\n    return str1.split()\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    # If the given number is perfect square then return it \n    if is_Square(N): \n        return N + 1\n    # Find the largest perfect square smaller than N \n    i = int(math.sqrt(N)) \n    while i * i!= N: \n        i = i - 1\n    # Return the next perfect square \n    return i * i + 1\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    n = math.ceil(math.sqrt(N))\n    while n*n < N:\n        n += 1\n    if n*n == N:\n        print(n)\n    else:\n        print(n*n)\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sq=int(math.sqrt(N))\n    while(sq*sq<N):\n        sq=sq+1\n    return sq*sq\ndef next_Perfect_Square_using_2(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number using recursion.\n    '''\n    if N==1:\n        return N\n    elif N%2==0:\n        return N//2\n    else:\n        return N+1\ndef addTwoNumbers(l1, l2):\n    '''\n    Write a function to add two numbers using recursion.\n    '''\n    if l1==None:\n        return l2\n    elif l2==None:\n        return l1\n    else:\n        sum=l1+l2\n        return addTwoNumbers(l1,l2)\n    \ndef addTwoNumbersUsingIteration(l1,l2):\n    '''\n    Write a python function to add two numbers using iteration.\n    '''\n    while l1!=None and l2!=None:\n        sum=l1+l2\n        l1=l1//10\n        l2=l2//10\n        if sum>10:\n            l1=l1+sum%10\n            l2=sum//10\n    return l1+l2\n    \ndef addTwoNumbersUsingRecursion(l1,l2):\n    '''\n    Write a python function to add two numbers using recursion.\n    '''\n    if l1==None:\n        return l2\n    elif l2==None:\n        return l1\n    else:\n        sum=l1+l2\n        return addTwoNumbers(l1,l2)\n    \ndef addTwoNumbersUsingRecursion(l1,l2):\n    '''\n    Write a python function to add two numbers using recursion.\n    '''\n    if l1==None:\n        return l2\n    elif l2==None:\n        return l1\n    else:\n        sum=l1+l2\n        return addTwoNumbersUsingRecursion(l1,l2)\n    \ndef find_smallest(lst):\n    '''\n    Write a python function to find the smallest number in a list using recursion.\n    '''\n    if len(lst)==1:\n        return lst[0]\n    else:\n        return min(find_smallest(lst[1:]), lst[0])\n    \ndef find_smallest_using_recursion(lst):\n    '''\n    Write a python function to find the smallest number in a list using recursion.\n    '''\n    if len(lst)==1:\n        return lst[0]\n    else:\n        return min(find_smallest(lst[1:]), lst[0])\n    \ndef fibonacci(n):\n    '''\n    Write a python function to find the nth term of fibonacci using recursion.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fibonacci(n-1)+fibonacci(n-2)\n    \ndef fibonacciUsingRecursion(n):\n    '''\n    Write a python function to find the nth term of fibonacci using recursion.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return fibonacciUsingRecursion(n-1)+fibonacciUsingRecursion(n-2)\n    \ndef count_occurrences(str, pat):\n    '''\n    Write a python function to count the number of times a pattern occurs in a given string.\n    '''\n    return str.count(pat)\n    \ndef count_occurrencesUsingRecursion(str, pat):\n    '''\n    Write a python function to count the number of times a pattern occurs in a given string using recursion.\n    '''\n    if str==None or pat==None:\n        return 0\n    elif str[:len(pat)]==pat:\n        return 1+count_occurrencesUsingRecursion(str[len(pat):],pat)\n    else:\n        return count_occurrencesUsingRecursion(str, pat[1:])\n    \ndef largest_common_divisor(num1, num2):\n    '''\n    Write a python function to find the largest common divisor of two numbers.\n    '''\n    if num2==0:\n        return num1\n    else:\n        return largest_common_divisor(num2,num1%num2)\n    \ndef largest_common_divisorUsingRecursion(num1, num2):\n    '''\n    Write a python function to find the largest common divisor of two numbers using recursion.\n    '''\n    if num2==0:\n        return num1\n    else:\n        return largest_common_divisorUsingRecursion(num2, num1%num2)\n    \ndef largest_common_divisor_using_recursion(num1, num2):\n    '''\n    Write a python function to find the largest common divisor of two numbers using recursion.\n    '''\n    if num2==0:\n        return num1\n    elif num2==1:\n        return num1\n    elif num1==1:\n        return num2\n    elif num1>num2:\n        return largest_common_divisor_using_recursion(num1-num2,num2)\n    elif num1<num2:\n        return largest_common_divisor_using_recursion(num1,num2-num1)\n    else:\n        return num1\n    \ndef largest_common_divisor_using_recursion(num1, num2):\n    '''\n    Write a python function to find the largest common divisor of two numbers using recursion.\n    '''\n    if num2==0:\n        return num1\n    elif num2==1:\n        return num1\n    elif num1==1:\n        return num2\n    elif num1>num2:\n        return largest_common_divisor_using_recursion(num1-num2,num2)\n    elif num1<num2:\n        return largest_common_divisor_using_recursion(num1,num2-num1)\n    else:\n        return num1\n    \ndef largest_common_divisor_using_recursion(num1, num2):\n    '''\n    Write a python function to find the largest common divisor of two numbers using recursion.\n    '''\n    if num2==0:\n        return num1\n    elif num2==1:\n        return num1\n    elif num1==1:\n        return num2\n    elif num1>num2:\n        return largest_common_divisor_using_recursion(num1-num2,num2)\n    elif num1<num2:\n        return largest_common_divisor_using_recursion(num1,num2-num1)\n    else:\n        return num1\n    \ndef largest_common_divisor_using_recursion(num1, num2):\n    '''\n    Write a python function to find the largest common divisor of two numbers using recursion.\n    '''\n    if num2==0:\n        return num1\n    elif num2==1:\n        return num1\n    elif num1==1:\n        return num2\n    elif num1>num2:\n        return largest_common_divisor_using_recursion(num1-num2,num2)\n    elif num1<num2:\n        return largest_common_divisor_using_recursion(num1,num2-num1)\n    else:\n        return num1\n    \ndef largest_common_divisor_using_recursion(num1, num2):\n    '''\n    Write a python function to find the largest common divisor of two numbers using recursion.\n    '''\n    if num2==0:\n        return num1\n    elif num2==1:\n        return num1\n    elif num1==1:\n        return num2\n    elif num1>num2:\n        return largest_common_divisor_using_recursion(num1-num"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return 2\n    i = 1\n    while i * i < N:\n        i += 1\n    return i * i\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = math.sqrt(N)\n    print(int(x+1)) \n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Brute force approach\n    # print(math.ceil(math.sqrt(N)))\n    \n    # For now, lets keep searching\n    while not is_Perfect_Square(math.ceil(math.sqrt(N))): \n        math.ceil(math.sqrt(N))\n    \n    # print(math.ceil(math.sqrt(N)))\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 0:\n        return 1\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 1: \n        return N \n    else: \n        for i in range(int(math.sqrt(N))+1, 1, -1): \n            if N%i == 0: \n                return i \n            \ndef next_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while (N >= 0): \n        if N == 0: \n            return N \n        elif N == 1: \n            return N + 1\n        else: \n            if N%2 == 0: \n                N = N//2\n                continue\n            else: \n                N = 3 * N + 1\n                continue\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    n=N\n    while n*n<=N:\n        n+=1\n    return n*n\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    import math  \n    for i in range(N, -1, -1):\n        if (math.sqrt(i) - math.floor(math.sqrt(i))).is_integer(): \n            return i\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        curr = arr[i]\n        max_ending_here = max(max_ending_here + curr, curr)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    N = len(arr)\n    # Initialize answer and max_sequence arrays\n    ans = 0\n    max_sequence = [0] * N\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    size = len(arr)\n    if size == 0:\n        return 0\n    if size == 1:\n        return arr[0]\n    dp = [0] * size\n    dp[0] = arr[0]\n    for i in range(1, size):\n        if arr[i] > dp[i - 1]:\n            dp[i] = arr[i]\n        else:\n            dp[i] = dp[i - 1]\n    print(\"dp is \", dp)\n    res = dp[-1]\n    for i in range(size - 2, -1, -1):\n        if arr[i] > dp[i + 1]:\n            dp[i] = arr[i]\n        else:\n            dp[i] = dp[i + 1]\n        res = max(res, dp[i])\n    return res\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    \n    # find the middle index\n    mid = n // 2\n    \n    # include middle element\n    max_sum_incl_mid = arr[mid] + \\\n    # exclude middle element\n    max_sum_excl_mid = max(arr[mid], max_sum(arr[:mid]), max_sum(arr[mid+1:]))\n    \n    # include middle element\n    max_sum_incl_mid_rev = arr[mid] + \\\n    # exclude middle element\n    max_sum_excl_mid_rev = max(arr[mid], max_sum(arr[:mid]), max_sum(arr[mid+1:]))\n    \n    # return maximum of 3 cases\n    return max(max_sum_incl_mid, max_sum_incl_mid_rev, max_sum_excl_mid)\n    \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr: \n        return -1\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        left = max_sum(arr[:len(arr)//2])\n        right = max_sum(arr[len(arr)//2:])\n        \n        if left > right:\n            return left+right\n        else:\n            return right+left\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 2: return arr[0]\n    if n == 2: return max(arr[0], arr[1])\n    \n    end_of_bitonic = 0\n    bitonic_sum = float('-inf')\n    for i in range(1, n-1):\n        if arr[i-1] < arr[i] and arr[i] > arr[i+1]:\n            bitonic_sum = max(bitonic_sum, arr[i]+max(arr[i], arr[i-1]))\n            end_of_bitonic = i\n    \n    return max(bitonic_sum, max_sum(arr[:end_of_bitonic+1])+max_sum(arr[end_of_bitonic:]))\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0], arr[1])\n    elif n == 3:\n        if arr[1] > arr[0]:\n            return max(arr[0], arr[1])\n        else:\n            return max(arr[1], arr[0])\n    elif n == 4:\n        if arr[2] > arr[0]:\n            return max(arr[0], arr[1], arr[2])\n        else:\n            return max(arr[1], arr[0], arr[2])\n    else:\n        return max(max_sum(arr[:n//2]), max_sum(arr[n//2:]), max_sum([i+i for i in arr[:n//2]]), max_sum([i-i for i in arr[n//2:]]))\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    def bitonic_helper(arr, i, j):\n        if i == j:\n            return arr[i]\n        \n        mid = i + (j - i) // 2\n        if arr[mid] < arr[i]:\n            return bitonic_helper(arr, i, mid)\n        else:\n            return bitonic_helper(arr, mid + 1, j)\n        \n    max_sum = -float('inf')\n    \n    for i in range(1, len(arr)):\n        sum = bitonic_helper(arr, 0, i) + bitonic_helper(arr, i, len(arr) - 1)\n        max_sum = max(max_sum, sum)\n    \n    return max_sum\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    #set initial value\n    guess = 1\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number <= 1:\n        return number\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2\n    while abs(guess**2 - number) >= 0.000001:\n        guess = (guess + number/guess)/2\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    \n    low = 0\n    high = number\n    while True:\n        middle = (high + low) // 2\n        if middle * middle > number:\n            high = middle - 1\n        elif middle * middle < number:\n            low = middle + 1\n        else:\n            return middle\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    ans = 0\n    if number < 0:\n        print(\"I don't think it makes sense!\")\n        return\n    while True:\n        ans = ans + 1/ans\n        if abs(number - ans*ans) < 0.00000001:\n            break\n    return ans\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Step 1: Begin with a guess of the square root\n    guess = number / 2\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    a = 1\n    b = number\n    while b >= 0.001:\n        c = (a + b) / 2\n        a = b\n        b = c\n    return a\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    #x = 1\n    #y = 2\n    #h = 2\n    #n = 3\n    #m = 1\n    #while n!= 0:\n    #    print(f\"x is {x}\")\n    #    print(f\"y is {y}\")\n    #    print(f\"h is {h}\")\n    #    print(f\"n is {n}\")\n    #    print(f\"m is {m}\")\n    #    x = (x*number)/h\n    #    y = (y*number)/h\n    #    h = (h*number)/(n*m)\n    #    n = n-1\n    #    m = m+1\n    #return x\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    elif number < 0:\n        return None\n    else:\n        temp_num = number\n        root_num = 1\n        # temp_num = 3\n        # root_num = 0.5\n        while (temp_num > root_num):\n            temp_num = number - root_num*root_num\n            root_num += root_num\n        return root_num\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    r = 1\n    while r*r > number:\n        r = (r + number/r)/2\n    return r\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if(n<2):\n        return n\n    dp = [[0 for i in range(n)] for i in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1, -1, -1):\n        for j in range(i+1,n):\n            if(str[i] == str[j] and i<j):\n                dp[i][j] = 2+dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    def expand(s, st, end):\n        if (end - st) <= 1:\n            return 1\n        if (s[st] == s[end]):\n            return 2 + expand(s, st + 1, end - 1)\n        else:\n            return max(expand(s, st, end - 1), expand(s, st + 1, end))\n    \n    n = len(str)\n    return expand(str, 0, n - 1)\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    maxlen = 1\n    maxi = 1\n    maxj = 0\n    \n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            if dp[i][j] > maxlen:\n                maxlen = dp[i][j]\n                maxi = i\n                maxj = j\n            \n    return maxlen, maxi, maxj\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i + l -1\n            if str[i] == str[j] and dp[i+1][j-1] == 1:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return dp[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if(str == ''):\n        return 0\n    n = len(str)\n    m = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        m[i][i] = 1\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp_table = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp_table[i][i] = 1\n    maxLen = 1\n    \n    for length in range(2, n+1):\n        for left in range(n-length+1):\n            right = left + length - 1\n            if str[left] == str[right] and length == 2:\n                dp_table[left][right] = 2\n            elif str[left] == str[right]:\n                dp_table[left][right] = dp_table[left+1][right-1] + 2\n            else:\n                dp_table[left][right] = max(dp_table[left+1][right], dp_table[left][right-1])\n            if dp_table[left][right] > maxLen:\n                maxLen = dp_table[left][right]\n    return maxLen\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[False]*n for i in range(n)]\n    ans = 0\n    #base case\n    for i in range(n):\n        dp[i][i] = True\n        ans = max(ans,1)\n    #main condition\n    for i in range(n-1,-1,-1):\n        for j in range(i+1,n):\n            if str[i]==str[j]:\n                if str[i]==\"a\" or str[i]==\"e\" or str[i]==\"i\" or str[i]==\"o\" or str[i]==\"u\":\n                    if i+1<j:\n                        dp[i][j] = True\n                    else:\n                        dp[i][j] = False\n                else:\n                    dp[i][j] = dp[i+1][j-1]\n                ans = max(ans,2)\n    return ans"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    dp = [[0] * n for i in range(n)]\n    \n    maxlen = 1\n    maxstart = 0\n    maxend = 0\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    max_len = 0\n    for i in range(n):\n        dp[i][i] = 1\n        max_len = 1\n    for i in range(n-1,-1,-1):\n        for j in range(i,n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j],dp[i][j-1])\n            if dp[i][j] > max_len:\n                max_len = dp[i][j]\n    return max_len\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if not str:\n        return 0\n    dp = [[0]*len(str) for _ in range(len(str))]\n    for i in range(len(str)-1,-1,-1):\n        for j in range(i,len(str)):\n            if str[i] == str[j]:\n                if i==j:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[i+1][j-1]+2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][len(str)-1]\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n / (n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # HINT: Define a recursive function that takes in n, and outputs the sum of 1 / n.\n    # HINT: The base case should be 1 / 1.\n    # HINT: This function should be a recursive function.\n    # HINT: Recursion can be very tricky!\n    if n == 1:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n*(n-1))/2\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum(int(n) / i for i in range(1, n + 1))\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum(1/(i+1) for i in range(1,n+1))\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return 1 / (n - 1) + harmonic_sum(n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n - 1) * harmonic_sum(n - 2)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return int(sum([1/x for x in range(1, n+1)]) - n)\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1) & set(array_nums2))\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1) < len(array_nums2):\n        array_nums1,array_nums2 = array_nums2,array_nums1\n    return list(set(array_nums1).intersection(array_nums2))\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for item1 in array_nums1:\n        if item1 in array_nums2:\n            result.append(item1)\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    arr = []\n    i = 0\n    j = 0\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            arr.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return arr\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    a1 = array_nums1\n    a2 = array_nums2\n    a = []\n    b = []\n    for i in a1:\n        for j in a2:\n            if(i == j):\n                a.append(i)\n                b.append(j)\n    return a\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #create empty list to store intersection\n    intersection_list = []\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in result:\n            result.append(num)\n    return result\n    \n    \n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res_list = []\n    for num in array_nums1:\n        if num in array_nums2:\n            res_list.append(num)\n    return res_list\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    n1 = len(array_nums1)\n    n2 = len(array_nums2)\n    i = 0\n    j = 0\n    intersection = []\n    while i < n1 and j < n2:\n        if array_nums1[i] == array_nums2[j]:\n            intersection.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return intersection\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for ele in tup:\n        if ele == x:\n            count = count + 1\n    print(\"Count: \", count)\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for num in tup:\n        if num == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    occurences = 0\n    for item in tup:\n        if item == x:\n            occurences += 1\n    return occurences\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup: \n        if item == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    occurence = 0\n    for i in tup:\n        if i == x:\n            occurence += 1\n    return occurence\n    \ndef count_X_dict(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    occurence = 0\n    for i in tup:\n        if i == x:\n            occurence += 1\n    return occurence\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # initialize element counter\n    counter = 0\n    # initialize list with first element\n    res = [list[0]]\n    # initialize i to first element\n    i = 0\n    # initialize j to second element\n    j = 1\n    # initialize while loop\n    while j < len(list):\n        # compare element of first list and current element\n        while i < len(list) and list[i] <= element:\n            # move element of current list to the end of the list\n            res.append(list[i])\n            i += 1\n        # add element of second list to the end of the list\n        res.append(list[j])\n        # move element of first list to the end of the list\n        res.append(list[i])\n        # move element of second list to the end of the list\n        res.append(list[j])\n        # move to next element\n        i += 1\n        j += 1\n    # return the list with element inserted\n    return res\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    count = 1\n    while count <= len(list):\n        list.insert(count-1,element)\n        count += 1\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list\n    # INSERT YOUR CODE HERE\n    \n    \n    # return list\n    \n    \n    \n    \n    \n    # The expected output should be [[2, 3, 4, 5, 6], 1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list[:1] + list + list[:1]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    i = 0\n    while i < len(list):\n        if element == list[i]:\n            list.insert(i,element)\n        i += 1\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    insert_num = 0\n    for i in range(len(list)):\n        if list[i] == element:\n            insert_num = i\n            break\n    list.insert(insert_num, element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = list\n    new_list.insert(0,element)\n    return new_list\n    \ndef insert_element_after(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element after each element in the list, and returns the resulting list.\n    '''\n    new_list = list\n    new_list.append(element)\n    return new_list\n    \ndef insert_element_after_n(list,element,n):\n    '''\n    Write a function that takes in a list and an element and inserts the element after each element in the list, but only after the nth element (i.e. if the list is 'ABCD' and the element is 'B' and n is 2, the list returned is 'ABD').\n    '''\n    new_list = list\n    n = n+1\n    for i in range(0,n):\n        new_list.append(list[n-1])\n    new_list.append(element)\n    return new_list\n    \ndef insert_element_before_n(list,element,n):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, but only after the nth element (i.e. if the list is 'ABCD' and the element is 'C' and n is 2, the list returned is 'ABD').\n    '''\n    new_list = list\n    n = n+1\n    for i in range(0,n):\n        new_list.insert(0,list[n-1])\n    new_list.insert(0,element)\n    return new_list\n    \ndef insert_element_at_n(list,element,n):\n    '''\n    Write a function that takes in a list and an element and inserts the element at each element in the list, but only after the nth element (i.e. if the list is 'ABCD' and the element is 'C' and n is 2, the list returned is 'ABD').\n    '''\n    new_list = list\n    n = n+1\n    for i in range(0,n):\n        new_list.insert(n,list[n-1])\n    new_list.insert(n,element)\n    return new_list\n    \ndef get_nth_element_after(list,element,n):\n    '''\n    Write a function that takes in a list and an element and returns the nth element after the element, but only if the element appears in the list, otherwise return None.\n    '''\n    new_list = list\n    new_list.remove(element)\n    if element in new_list:\n        n = n+1\n        return new_list[n-1]\n    else:\n        return None\n    \ndef get_nth_element_before(list,element,n):\n    '''\n    Write a function that takes in a list and an element and returns the nth element before the element, but only if the element appears in the list, otherwise return None.\n    '''\n    new_list = list\n    new_list.remove(element)\n    if element in new_list:\n        n = n+1\n        return new_list[n-1]\n    else:\n        return None\n    \ndef get_nth_element_at_position(list,element,n):\n    '''\n    Write a function that takes in a list and an element and returns the nth element after the element, but only if the element appears in the list, otherwise return None.\n    '''\n    new_list = list\n    if element in new_list:\n        n = n+1\n        return new_list[n-1]\n    else:\n        return None\n    \ndef print_list(list):\n    '''\n    Write a function that takes in a list and prints the list of elements, one per line.\n    '''\n    for i in range(0,len(list)):\n        print(list[i])\n    \ndef get_num_of_occurrences(list,element):\n    '''\n    Write a function that takes in a list and an element and returns the number of times that element appears in the list.\n    '''\n    count = 0\n    for i in list:\n        if i == element:\n            count += 1\n    return count\n    \ndef get_num_of_occurrences_before_and_after(list,element):\n    '''\n    Write a function that takes in a list and an element and returns the number of times that element appears in the list.\n    '''\n    count = 0\n    new_list = list\n    for i in range(0,len(new_list)):\n        if new_list[i] == element:\n            count += 1\n    return count\n    \ndef get_largest_index(list):\n    '''\n    Write a function that takes in a list and returns the index of the largest element in the list.\n    '''\n    largest = list[0]\n    largest_index = 0\n    for i in range(0,len(list)):\n        if largest < list[i]:\n            largest = list[i]\n            largest_index = i\n    return largest_index\n    \ndef get_smallest_index(list):\n    '''\n    Write a function that takes in a list and returns the index of the smallest element in the list.\n    '''\n    smallest = list[0]\n    smallest_index = 0\n    for i in range(0,len(list)):\n        if smallest > list[i]:\n            smallest = list[i]\n            smallest_index = i\n    return smallest_index\n    \ndef remove_duplicates(list):\n    '''\n    Write a function that takes in a list and returns a new list with all duplicate elements removed.\n    '''\n    new_list = list\n    new_list = set(new_list)\n    return list\n    \ndef get_list_sum(list):\n    '''\n    Write a function that takes in a list and returns the sum of all the elements in the list.\n    '''\n    sum = 0\n    for i in range(0,len(list)):\n        sum += list[i]\n    return sum\n    \ndef get_list_average(list):\n    '''\n    Write a function that takes in a list and returns the average of all the elements in the list.\n    '''\n    sum = get_list_sum(list)\n    average = sum / len(list)\n    return average\n    \ndef get_list_median(list):\n    '''\n    Write a function that takes in a list and returns the median of all the elements in the list.\n    '''\n    new_list = list\n    new_list.sort()\n    if len(new_list) % 2 == 0:\n        x = int((len(new_list)/2)-1)\n        return (new_list[x] + new_list[x+1])/2\n    else:\n        return new_list[int(len(new_list)/2)]\n    \ndef reverse(list):\n    '''\n    Write a function that takes in a list and returns the list in reverse order.\n    '''\n    new_list = list\n    new_list.reverse()\n    return new_list\n    \ndef get_list_all_in_order(list):\n    '''\n    Write a function that takes in a list and returns a new list where all the duplicate elements are removed and the remaining elements are in the order of their first appearance in the original list.\n    '''\n    new_list = list\n    new_list = set(new_list)\n    return list\n    \ndef get_list_all_in_order_by_index(list):\n    '''\n    Write a function that takes in a list and returns a new list where all the duplicate elements are removed and the remaining elements are in the order of their first appearance in the original list.\n    '''\n    new_list = list\n    new_list = set(new_list)\n    new_list.sort()\n    return new_list\n    \ndef get_list_all_in_order_by_index_with_duplicates(list):\n    '''\n    Write a function that takes in a list and returns a new list where all the duplicate elements are removed and the remaining elements are in the order of their first appearance in the original list.\n    '''\n    new_list = list\n    new_list = se"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(0,len(list)):\n        if list[i]==element:\n            list.insert(i,element)\n            return list\n    list.append(element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(0,len(list)):\n        if list[i] == element:\n            list.insert(i,element)\n            return list\n        else:\n            list.insert(i,list[i])\n    return list\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    radius=0\n    angle=0\n    for num in numbers:\n        #get the real part\n        radius+=num.real\n        #get the imaginary part\n        angle+=num.imag\n    return [radius,angle]\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Convert the given complex number to polar coordinates.\n    # Complex numbers are represented as a pair of floating point numbers \n    # (two places of precision in the fractional part of the number).\n    #\n    # Sample Input    Expected Output\n    #\n    # (1, 2)        1.107, 4.356\n    # (-1.2, 1.2)    (-0.98, 2.29)\n    # (-2.3, 1.4)    (-3.05, 1.27)\n    # (1, -1)        1.107, -4.356\n    # (-0.8, 0.1)    (-0.57, 1.37)\n    # (-0.3, 0.1)    (-0.17, 1.58)\n    # (0.1, 0.2)    0.1, 0.2\n    # (-0.2, 0.5)    0.2, 0.5\n    # (0.0, 0.0)    0.0, 0.0\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if len(numbers) == 0:\n        return []\n    elif len(numbers) == 1:\n        if numbers[0].real == 0 and numbers[0].imag == 0:\n            return [\"0\", \"0\"]\n        elif numbers[0].real == 0 and numbers[0].imag == 1:\n            return [\"0\", \"1\"]\n        elif numbers[0].real == 1 and numbers[0].imag == 0:\n            return [\"1\", \"0\"]\n        elif numbers[0].real == 1 and numbers[0].imag == 1:\n            return [\"1\", \"1\"]\n    elif len(numbers) == 2:\n        if numbers[0].real == 0 and numbers[0].imag == 0 and numbers[1].real == 1 and numbers[1].imag == 0:\n            return [\"0\", \"1\"]\n        elif numbers[0].real == 0 and numbers[0].imag == 1 and numbers[1].real == 1 and numbers[1].imag == 0:\n            return [\"0\", \"0\"]\n        elif numbers[0].real == 1 and numbers[0].imag == 0 and numbers[1].real == 1 and numbers[1].imag == 0:\n            return [\"1\", \"1\"]\n        elif numbers[0].real == 1 and numbers[0].imag == 1 and numbers[1].real == 1 and numbers[1].imag == 0:\n            return [\"1\", \"0\"]\n    elif len(numbers) == 3:\n        if numbers[0].real == 0 and numbers[0].imag == 0 and numbers[1].real == 0 and numbers[1].imag == 0 and numbers[2].real == 1 and numbers[2].imag == 0:\n            return [\"0\", \"1\"]\n        elif numbers[0].real == 0 and numbers[0].imag == 0 and numbers[1].real == 0 and numbers[1].imag == 1 and numbers[2].real == 1 and numbers[2].imag == 0:\n            return [\"0\", \"0\"]\n        elif numbers[0].real == 0 and numbers[0].imag == 1 and numbers[1].real == 0 and numbers[1].imag == 1 and numbers[2].real == 1 and numbers[2].imag == 0:\n            return [\"0\", \"1\"]\n        elif numbers[0].real == 0 and numbers[0].imag == 1 and numbers[1].real == 1 and numbers[1].imag == 1 and numbers[2].real == 1 and numbers[2].imag == 0:\n            return [\"0\", \"0\"]\n        elif numbers[0].real == 1 and numbers[0].imag == 0 and numbers[1].real == 0 and numbers[1].imag == 0 and numbers[2].real == 1 and numbers[2].imag == 0:\n            return [\"1\", \"1\"]\n        elif numbers[0].real == 1 and numbers[0].imag == 0 and numbers[1].real == 0 and numbers[1].imag == 1 and numbers[2].real == 1 and numbers[2].imag == 0:\n            return [\"1\", \"0\"]\n        elif numbers[0].real == 1 and numbers[0].imag == 1 and numbers[1].real == 0 and numbers[1].imag == 1 and numbers[2].real == 1 and numbers[2].imag == 0:\n            return [\"1\", \"1\"]\n        elif numbers[0].real == 1 and numbers[0].imag == 1 and numbers[1].real == 1 and numbers[1].imag == 1 and numbers[2].real == 1 and numbers[2].imag == 0:\n            return [\"1\", \"0\"]\n    elif len(numbers) == 4:\n        if numbers[0].real == 0 and numbers[0].imag == 0 and numbers[1].real == 0 and numbers[1].imag == 0 and numbers[2].real == 0 and numbers[2].imag == 0 and numbers[3].real == 1 and numbers[3].imag == 0:\n            return [\"0\", \"1\"]\n        elif numbers[0].real == 0 and numbers[0].imag == 0 and numbers[1].real == 0 and numbers[1].imag == 1 and numbers[2].real == 1 and numbers[2].imag == 0 and numbers[3].real == 1 and numbers[3].imag == 0:\n            return [\"0\", \"0\"]\n        elif numbers[0].real == 0 and numbers[0].imag == 0 and numbers[1].real == 1 and numbers[1].imag == 1 and numbers[2].real == 1 and numbers[2].imag == 1 and numbers[3].real == 1 and numbers[3].imag == 1:\n            return [\"0\", \"1\"]\n        elif numbers[0].real == 0 and numbers[0].imag == 1 and numbers[1].real == 0 and numbers[1].imag == 1 and numbers[2].real == 1 and numbers[2].imag == 1 and numbers[3].real == 1 and numbers[3].imag == 1:\n            return [\"0\", \"0\"]\n        elif numbers[0].real == 1 and numbers[0].imag == 0 and numbers[1].real == 0 and numbers[1].imag == 0 and numbers[2].real == 1 and numbers[2].imag == 0 and numbers[3].real == 1 and numbers[3].imag == 0:\n            return [\"1\", \"1\"]\n        elif numbers[0].real == 1 and numbers[0].imag == 0 and numbers[1].real == 0 and numbers[1].imag == 1 and numbers[2].real == 1 and numbers[2].imag == 0 and numbers[3].real == 1 and numbers[3].imag == 1:\n            return [\"1\", \"0\"]\n        elif numbers[0].real == 1 and numbers[0].imag == 1 and numbers[1].real == 0 and numbers[1].imag == 1 and numbers[2].real == 1 and numbers[2].imag == 1 and numbers[3].real == 1 and numbers[3].imag == 1:\n            return [\"1\", \"1\"]\n        elif numbers[0].real == 1 and numbers[0].imag == 1 and numbers[1].real == 1 and numbers[1].imag == 1 and numbers[2].real == 1 and numbers[2].imag == 1 and numbers[3].real == 1 and numbers[3].imag == 1:\n            return [\"1\", \"0\"]\n        elif numbers[0].real == 0 and numbers[0].imag == 0 and numbers[1].real == 0 and numbers[1].imag == 0 and numbers[2].real == 0 and numbers[2].imag == 0 and numbers[3].real == 1 and numbers[3].imag == 0:\n            return [\"1\", \"1\"]\n        elif numbers[0].real == 0 and numbers[0].imag == 0 and numbers[1].real == 1 and numbers[1].imag == 1 and numbers[2].real == 1 and numbers[2].imag == 1 and numbers[3].real == 1 and numbers[3].imag == 0:\n            return [\"1\", \"0\"]\n        elif numbers[0].real == 0 and numbers[0].imag == 0 and numbers[1].real == 1 and numbers[1].imag == 1 and numbers[2].real == 1 and numbers[2].imag == 1 and numbers[3].real == 1 and numbers[3].imag == 1:\n            return [\"1\", \"0\"]\n        elif numbers[0].real == 0 and numbers[0].imag == 1 and numbers[1].real == 0 and numbers[1].imag == 1 and numbers[2].real == 1 and numbers[2].imag == 1 and numbers[3].real == 1 and numbers[3].imag == 1:\n            return [\"1\", \"1\"]\n        elif numbers[0].real == 1 and numbers[0].imag == 0 and numbers[1].real == 0 and numbers[1].imag == 0 and numbers[2].real == 1 and numbers[2].imag == 0 and numbers[3].real == 1 and numbers[3].imag == 0:\n            return [\"1\", \"1\"]\n        elif numbers[0].real == 1 and numbers[0].imag == 0 and numbers[1].real == 0 and numbers[1].imag == 1 and numbers[2].real == 1 and numbers[2].imag == 0 and numbers[3].real == 1 and numbers[3].imag == 0:\n            return [\"1\", \"0\"]\n        elif numbers[0].real == 1 and numbers[0].imag == 1 and numbers[1].real == 0 and numbers[1].imag == 1 and numbers[2].real == 1 and numbers[2].imag == 1 and numbers[3].real == 1 and numbers[3].imag == 1:\n            return [\"1\", \"1\"]\n        elif numbers[0].real == 1 and numbers[0]"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in range(len(numbers)):\n        if isinstance(numbers[i],complex)==False:\n            numbers[i] = complex(numbers[i])\n    \n    r=[]\n    theta=[]\n    for i in range(len(numbers)):\n        r.append(cmath.polar(numbers[i])[0])\n        theta.append(cmath.polar(numbers[i])[1])\n    return r,theta\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in numbers:\n        #get the imaginary part and convert to polar coordinates\n        if i.imag == 0:\n            print(round(i.real,2),end=',')\n        else:\n            #get the polar coordinates from the sqrt and the angle\n            print(round(i.imag*2*cmath.pi/180,2),end=',')\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    real = 0\n    imag = 0\n    for n in numbers:\n        real = real + n*n\n        imag = imag + n\n    real = real**0.5\n    imag = imag**0.5\n    return real, imag\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    mag = 0.0\n    phase = 0.0\n    for i in range(len(numbers)):\n        mag += (numbers[i]) ** 2\n        phase += numbers[i] * 2 * cmath.pi\n    mag = mag ** 0.5\n    phase = phase / len(numbers)\n    return mag, phase\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a = []\n    for i in range(len(numbers)):\n        x = numbers[i][0]\n        y = numbers[i][1]\n        mag = complex(x,y)\n        r = abs(mag)\n        theta = cmath.phase(mag)\n        a.append([r, theta])\n    return a\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    x = []\n    for i in range(len(numbers)):\n        temp = numbers[i].real**2 + numbers[i].imag**2\n        temp = complex(temp)\n        x.append(temp)\n    return x\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Using lambda, \n    # Extract absolute value \n    # and angle in degrees \n    # of complex numbers \n    return  map(lambda i: cmath.polar(i), numbers) \n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([num for num in list1 if isinstance(num, int)])\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\nprint(count_integer([1,2,3,4,5,6,7,8]))\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for num in list1:\n        if type(num) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) is int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    n = 0\n    for i in list1:\n        if type(i) == int:\n            n += 1\n    return n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if isinstance(list1[i],int):\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    cnt = 0\n    for i in list1:\n        if isinstance(i,int):\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    c = list(combinations_with_replacement(l, n))\n    return c\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = combinations_with_replacement(l, n)\n    return(list(comb))\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    #Pseudocode:\n    #    L=l\n    #    n=n\n    #    combi = []\n    #    if (len(L) == n):\n    #        combi.append(tuple(L))\n    #    else:\n    #        for i in range (len(L)):\n    #            sub = L[i]\n    #            rest = L[i+1:]\n    #            combi = combi + combinations_colors(rest, n)\n    #        combi = combi + [tuple([sub] + i)]\n    #    return combi\n    result = []\n    if n == 0:\n        return []\n    if n == 1:\n        return list(zip(l, l))\n    for i in range(1, n+1):\n        result += list(combinations_with_replacement(l, i))\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    res = []\n    for x in range(1, n + 1):\n        for combination in combinations_with_replacement(l, x):\n            res.append(combination)\n    return res\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = l\n    res = []\n    for i in range(len(colors)):\n        res.append(colors[i] for x in range(n))\n    return res\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Generate combinations\n    comb = list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # find length of the list\n    size = len(l)\n    # the number of combinations\n    n_combinations = int(math.factorial(size)/(math.factorial(n) * math.factorial(size-n)))\n    # initialize the answer list\n    answer = []\n    # loop through all combinations\n    for i in range(n_combinations):\n        # initialize a temporary list to hold the current combination\n        temp = []\n        # loop through each combination in the list\n        for j in range(size):\n            # if we are at the end of the list, add the combination\n            if j == size - 1:\n                # add the current combination\n                temp.append(tuple(l[j:j+n]))\n            # otherwise, add it to the current combination\n            else:\n                # add the current combination\n                temp.append(tuple(l[j:j+n]))\n                # and add the next combination\n                temp.append(tuple(l[j+n:j+2*n]))\n        # add the temporary list to the answer list\n        answer.append(temp)\n    # return the answer\n    return answer\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    my_combinations = []\n    for i in range(len(l)):\n        my_combinations.append(tuple(l[i] for i in range(n)))\n    return my_combinations\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2,n+1):\n        if num > 1:\n            for i in range(2,num):\n                if (num % i) == 0:\n                    break\n            else:\n                count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Code here\n    count=0\n    nums=range(2,n+1)\n    for num in nums:\n        if(num >1):\n            for i in range(2,num):\n                if(num%i)==0:\n                    break\n            else:\n                count=count+1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 0:\n        return 0\n    num_arr = [False, False] + [True] * (n-1)\n    count = 2\n    for i in range(2, int(n**0.5) + 1):\n        if num_arr[i]:\n            for j in range(i*i, n, i):\n                num_arr[j] = False\n    return sum(num_arr)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count=0\n    for i in range(2,n):\n        if n%i==0:\n            count+=1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Create an empty list to store primes\n    primes = []\n    # Create a boolean variable to indicate whether to continue the loop\n    check = True\n    # Create an iterator to iterate over the range of 2 to n\n    i = 2\n    # Loop until the boolean variable is set to False\n    while check:\n        # Create a boolean variable to indicate whether the current i is a prime\n        prime = True\n        # Loop over the range of i to n\n        for j in range(i, n+1):\n            # Check whether i is a prime\n            if i % j == 0:\n                # If it is, then the boolean variable is set to False and the loop ends\n                prime = False\n                break\n        # Add the prime i to the primes list\n        if prime:\n            primes.append(i)\n        # Increment the iterator i\n        i += 1\n        # If the boolean variable is still true, then the loop continues\n        if prime:\n            continue\n        # If the boolean variable is still false, then the loop ends\n        else:\n            # Set the boolean variable to false\n            check = False\n    # Return the number of primes\n    return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    counter = 0\n    n = int(n)\n    if n <= 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n > 3:\n        for i in range(3, n):\n            if (n % i) == 0:\n                counter += 1\n        return counter + 1\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_count = 0\n    if n<1:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        for i in range(2, n):\n            if n%i == 0:\n                break\n        else:\n            prime_count += 1\n    return prime_count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def isprime(n):\n        if n == 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        # sqrt n\n        for i in range(3,int(math.sqrt(n))+1,2):\n            if n % i == 0:\n                return False\n        return True\n    \n    prime_count = 0\n    for i in range(n):\n        if isprime(i):\n            prime_count += 1\n    return prime_count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    num_of_primes = 0\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def is_prime(n):\n        if n==1:\n            return False\n        elif n==2:\n            return True\n        else:\n            for i in range(2,n):\n                if n%i==0:\n                    return False\n            return True\n    count=0\n    for i in range(n+1):\n        if is_prime(i):\n            count+=1\n    return count\nprint(count_Primes_nums(10)"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a = a + 1\n    b = b + 1\n    tuple_a = (a,b)\n    return tuple_a\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n    # print(a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    tup=(b,a)\n    return tup\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    c = a\n    a = b\n    b = c\n    return(b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # new_tuple = []\n    # for i in range(len(test_tup1)):\n    #     new_tuple.append(max(test_tup1[i], test_tup2[i]))\n    # return tuple(new_tuple)\n    return tuple(max(test_tup1[i], test_tup2[i]) for i in range(len(test_tup1)))\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup1_max = max(test_tup1)\n    test_tup2_max = max(test_tup2)\n    max_tup = (test_tup1_max, test_tup2_max)\n    return max_tup\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_num = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_num = test_tup1[i]\n        elif test_tup1[i] < test_tup2[i]:\n            max_num = test_tup2[i]\n        else:\n            max_num = test_tup1[i]\n    print(\"Maximizing tuple 1: {}\".format(max_num))\n    return max_num\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    for i in test_tup1:\n        if i in test_tup2:\n            test_tup1 = list(test_tup1)\n            test_tup1.remove(i)\n            test_tup1 = tuple(test_tup1)\n    return test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup2\n    elif test_tup1[0] < test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] == test_tup2[0]:\n        if test_tup1[1] > test_tup2[1]:\n            return test_tup2\n        else:\n            return test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_num1 = test_tup1[0] if test_tup1[0] > test_tup1[1] else test_tup1[1]\n    max_num2 = test_tup2[0] if test_tup2[0] > test_tup2[1] else test_tup2[1]\n    max_tup = (max_num1, max_num2)\n    return max_tup\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return (test_tup1, test_tup2)\n    else:\n        return (test_tup2, test_tup1)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] < test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] == test_tup2[0]:\n        return test_tup1 if test_tup1[1] > test_tup2[1] else test_tup2\n    else:\n        return test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup1 = sorted(test_tup1, reverse=True)\n    test_tup2 = sorted(test_tup2, reverse=True)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    max_val = max(test_tup1 + test_tup2)\n    min_val = min(test_tup1 + test_tup2)\n    if min_val == max_val:\n        print(\"Both tuples have the same value\")\n        return\n    elif min_val < max_val:\n        print(\"max: \", max_val)\n        print(\"min: \", min_val)\n        return max_val, min_val\n    elif min_val > max_val:\n        print(\"max: \", max_val)\n        print(\"min: \", min_val)\n        return min_val, max_val\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1: return 2\n    p = 3\n    while True:\n        q, r = divmod(p - 1, 2)\n        if r == 0: return p\n        p = q\n        if p % 2 == 1: break\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Write your code here\n    from math import sqrt\n    def is_prime(n):\n        if n==1: return False\n        if n==2: return True\n        if n%2==0: return False\n        if n<=1: return False\n        if n%3==0: return False\n        if n<=3: return True\n        i=5\n        while i*i<=n:\n            if n%i==0: return False\n            i+=2\n        return True\n    def sieve_of_eratosthenes(n):\n        '''\n        sieve of eratosthenes - \u0420\u0430\u0437\u0431\u0438\u0442\u044c \u0447\u0438\u0441\u043b\u043e \u043d\u0430 \u043c\u043d\u043e\u0436\u0438\u0442\u0435\u043b\u0438, \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043c\u043d\u043e\u0436\u0438\u0442\u0435\u043b\u0438 \u0434\u043b\u044f \u0447\u0438\u0441\u043b\u0430 1.\n        '''\n        sieve = [i for i in range(1,n+1)]\n        for i in range(2,int(sqrt(n))+1):\n            if sieve[i-1]!=1:\n                j=i\n                while j<len(sieve):\n                    sieve[j]=1\n                    j+=i\n        return sieve\n    sieve = sieve_of_eratosthenes(1000000)\n    prime_numbers = []\n    def is_prime_number(n):\n        if n in sieve:\n            if is_prime(n):\n                prime_numbers.append(n)\n            else:\n                pass\n        else:\n            pass\n    def get_prime_number(n):\n        '''\n        \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u0420\u0435\u0448\u0435\u0442\u043e \u042d\u0440\u0430\u0442\u043e\u0441\u0444\u0435\u043d\u0430\n        '''\n        i = 2\n        while i <= n:\n            if n%i==0:\n                return False\n            i += 1\n        return True\n    def get_newman_prime(n):\n        '''\n        \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043d\u043e\u0432\u043e\u0435 \u043f\u0440\u043e\u0441\u0442\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u0420\u0435\u0448\u0435\u0442\u043e \u042d\u0440\u0430\u0442\u043e\u0441\u0444\u0435\u043d\u0430\n        '''\n        i = 2\n        while i <= sqrt(n):\n            if n%i==0:\n                return False\n            i += 1\n        return True\n    def get_newman_shanks_prime(n):\n        '''\n        \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043d\u043e\u0432\u043e\u0435 \u043f\u0440\u043e\u0441\u0442\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u0420\u0435\u0448\u0435\u0442\u043e \u042d\u0440\u0430\u0442\u043e\u0441\u0444\u0435\u043d\u0430\n        '''\n        i = 2\n        while i <= sqrt(n):\n            if n%i==0:\n                return False\n            i += 1\n        if n>2:\n            j = 3\n            while j <= sqrt(n):\n                if n%j==0:\n                    return False\n                j += 2\n        return True\n    def get_newman_shanks_williams_prime(n):\n        '''\n        \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043d\u043e\u0432\u043e\u0435 \u043f\u0440\u043e\u0441\u0442\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u0420\u0435\u0448\u0435\u0442\u043e \u042d\u0440\u0430\u0442\u043e\u0441\u0444\u0435\u043d\u0430\n        '''\n        if n%3==0:\n            return False\n        if n%7==0:\n            return False\n        i = 2\n        while i <= sqrt(n):\n            if n%i==0:\n                return False\n            i += 1\n        if n>2:\n            j = 3\n            while j <= sqrt(n):\n                if n%j==0:\n                    return False\n                j += 2\n        return True\n    def newman_shanks_williams_prime(n):\n        if n%3==0:\n            return False\n        if n%7==0:\n            return False\n        i = 2\n        while i <= sqrt(n):\n            if n%i==0:\n                return False\n            i += 1\n        if n>2:\n            j = 3\n            while j <= sqrt(n):\n                if n%j==0:\n                    return False\n                j += 2\n        return True\n    def get_newman_shanks_williams_prime_for_1(n):\n        i = 2\n        while i <= sqrt(n):\n            if n%i==0:\n                return False\n            i += 1\n        if n>2:\n            j = 3\n            while j <= sqrt(n):\n                if n%j==0:\n                    return False\n                j += 2\n        return True\n    def newman_shanks_williams_prime_for_1(n):\n        i = 2\n        while i <= sqrt(n):\n            if n%i==0:\n                return False\n            i += 1\n        if n>2:\n            j = 3\n            while j <= sqrt(n):\n                if n%j==0:\n                    return False\n                j += 2\n        return True\n    def newman_shanks_williams_prime_for_2(n):\n        if n%3==0:\n            return False\n        if n%7==0:\n            return False\n        i = 2\n        while i <= sqrt(n):\n            if n%i==0:\n                return False\n            i += 1\n        if n>2:\n            j = 3\n            while j <= sqrt(n):\n                if n%j==0:\n                    return False\n                j += 2\n        return True\n    def newman_shanks_williams_prime_for_2(n):\n        if n%3==0:\n            return False\n        if n%7==0:\n            return False\n        i = 2\n        while i <= sqrt(n):\n            if n%i==0:\n                return False\n            i += 1\n        if n>2:\n            j = 3\n            while j <= sqrt(n):\n                if n%j==0:\n                    return False\n                j += 2\n        return True\n    def newman_shanks_williams_prime_for_3(n):\n        if n%3==0:\n            return False\n        if n%7==0:\n            return False\n        if n%9==0:\n            return False\n        i = 2\n        while i <= sqrt(n):\n            if n%i==0:\n                return False\n            i += 1\n        if n>2:\n            j = 3\n            while j <= sqrt(n):\n                if n%j==0:\n                    return False\n                j += 2\n        return True\n    def newman_shanks_williams_prime_for_3(n):\n        if n%3==0:\n            return False\n        if n%7==0:\n            return False\n        if n%9==0:\n            return False\n        i = 2\n        while i <= sqrt(n):\n            if n%i==0:\n                return False\n            i += 1\n        if n>2:\n            j = 3\n            while j <= sqrt(n):\n                if n%j==0:\n                    return False\n                j += 2\n        return True\n    def newman_shanks_williams_prime_for_4(n):\n        if n%3==0:\n            return False\n        if n%7==0:\n            return False\n        if n%9==0:\n            return False\n        if n%11==0:\n            return False\n        i = 2\n        while i <= sqrt(n):\n            if n%i==0:\n                return False\n            i += 1\n        if n>2:\n            j = 3\n            while j <= sqrt(n):\n                if n%j==0:\n                    return False\n                j += 2\n        return True\n    def newman_shanks_williams_prime_for_4(n):\n        if n%3==0:\n            return False\n        if n%7==0:\n            return False\n        if n%9="
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 0\n    n += 1\n    while i!= n - 1:\n        a = 0\n        b = 0\n        s = 0\n        count = 0\n        j = 0\n        x = str(n)\n        for a in x:\n            a = int(a)\n            s = 0\n            count += 1\n        if count == 2:\n            print(\"the\",count,\"th\",n,\"is\",n,\".\")\n            return n\n        if count > 2:\n            print(\"the\",count,\"th\",n,\"is\",n,\".\")\n            return n\n        for j in range(len(x)):\n            b = int(x[j])\n            for k in range(len(x)):\n                if j!= k:\n                    a = int(x[k])\n                    if (a**2) + (b**2) == (a+b):\n                        s = s + 1\n        if s == 0:\n            n = n - 1\n            return newman_prime(n)\n    return n\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n==1:\n        return 2\n    if n==2:\n        return 3\n    if n>=3 and n%2==0:\n        return 2\n    if n>=3 and n%2!=0:\n        return 3\n    else:\n        \n        i=3\n        primes=[]\n        while len(primes)<n:\n            if is_prime(i):\n                primes.append(i)\n            i+=2\n        return primes[len(primes)-1]\n    "
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = []\n    max = 100\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 2:\n        raise ValueError\n    if n < 3:\n        return 2\n    if n == 3:\n        return 3\n    if n > 3:\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n    return True\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1:\n        return 'The argument n should be positive integer.'\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n > 3:\n        for i in range(3, n+1):\n            s = 0\n            x = i\n            while x % 2 == 0:\n                s += 1\n                x /= 2\n            y = i\n            while y % 2 == 0:\n                s += 1\n                y /= 2\n            z = i\n            while z % 2 == 0:\n                s += 1\n                z /= 2\n            if (s == 1) and (i!= 1):\n                return i\n            elif (s == 2) and (i!= 3):\n                return i\n            elif (s == 3) and (i!= 7):\n                return i\n            elif (s == 4) and (i!= 9):\n                return i\n            elif (s == 5) and (i!= 11):\n                return i\n            elif (s == 6) and (i!= 13):\n                return i\n            elif (s == 7) and (i!= 17):\n                return i\n            elif (s == 8) and (i!= 19):\n                return i\n            elif (s == 9) and (i!= 23):\n                return i\n            elif (s == 10) and (i!= 29):\n                return i\n            elif (s == 11) and (i!= 31):\n                return i\n            elif (s == 12) and (i!= 37):\n                return i\n            elif (s == 13) and (i!= 41):\n                return i\n            elif (s == 14) and (i!= 43):\n                return i\n            elif (s == 15) and (i!= 47):\n                return i\n            elif (s == 16) and (i!= 53):\n                return i\n            elif (s == 17) and (i!= 59):\n                return i\n            elif (s == 18) and (i!= 61):\n                return i\n            elif (s == 19) and (i!= 67):\n                return i\n            elif (s == 20) and (i!= 71):\n                return i\n            elif (s == 21) and (i!= 73):\n                return i\n            elif (s == 22) and (i!= 79):\n                return i\n            elif (s == 23) and (i!= 83):\n                return i\n            elif (s == 24) and (i!= 89):\n                return i\n            elif (s == 25) and (i!= 97):\n                return i\n            elif (s == 26) and (i!= 101):\n                return i\n            elif (s == 27) and (i!= 103):\n                return i\n            elif (s == 28) and (i!= 107):\n                return i\n            elif (s == 29) and (i!= 109):\n                return i\n            elif (s == 30) and (i!= 113):\n                return i\n            elif (s == 31) and (i!= 127):\n                return i\n            elif (s == 32) and (i!= 131):\n                return i\n            elif (s == 33) and (i!= 137):\n                return i\n            elif (s == 34) and (i!= 139):\n                return i\n            elif (s == 35) and (i!= 149):\n                return i\n            elif (s == 36) and (i!= 151):\n                return i\n            elif (s == 37) and (i!= 157):\n                return i\n            elif (s == 38) and (i!= 163):\n                return i\n            elif (s == 39) and (i!= 167):\n                return i\n            elif (s == 40) and (i!= 173):\n                return i\n            elif (s == 41) and (i!= 179):\n                return i\n            elif (s == 42) and (i!= 181):\n                return i\n            elif (s == 43) and (i!= 191):\n                return i\n            elif (s == 44) and (i!= 193):\n                return i\n            elif (s == 45) and (i!= 197):\n                return i\n            elif (s == 46) and (i!= 199):\n                return i\n            elif (s == 47) and (i!= 211):\n                return i\n            elif (s == 48) and (i!= 213):\n                return i\n            elif (s == 49) and (i!= 217):\n                return i\n            elif (s == 50) and (i!= 219):\n                return i\n            elif (s == 51) and (i!= 223):\n                return i\n            elif (s == 52) and (i!= 227):\n                return i\n            elif (s == 53) and (i!= 229):\n                return i\n            elif (s == 54) and (i!= 233):\n                return i\n            elif (s == 55) and (i!= 239):\n                return i\n            elif (s == 56) and (i!= 241):\n                return i\n            elif (s == 57) and (i!= 251):\n                return i\n            elif (s == 58) and (i!= 253):\n                return i\n            elif (s == 59) and (i!= 259):\n                return i\n            elif (s == 60) and (i!= 261):\n                return i\n            elif (s == 61) and (i!= 263):\n                return i\n            elif (s == 62) and (i!= 269):\n                return i\n            elif (s == 63) and (i!= 271):\n                return i\n            elif (s == 64) and (i!= 277):\n                return i\n            elif (s == 65) and (i!= 281):\n                return i\n            elif (s == 66) and (i!= 283):\n                return i\n            elif (s == 67) and (i!= 289):\n                return i\n            elif (s == 68) and (i!= 291):\n                return i\n            elif (s == 69) and (i!= 293):\n                return i\n            elif (s == 70) and (i!= 299):\n                return i\n            elif (s == 71) and (i!= 301):\n                return i\n            elif (s == 72) and (i!= 303):\n                return i\n            elif (s == 73) and (i!= 305):\n                return i\n            elif (s == 74) and (i!= 307):\n                return i\n            elif (s == 75) and (i!= 311):\n                return i\n            elif (s == 76) and (i!= 313):\n                return i\n            elif (s == 77) and (i!= 317):\n                return i\n            elif (s == 78) and (i!= 319):\n                return i\n            elif (s == 79) and (i!= 321):\n                return i\n            elif (s == 80) and (i!= 323):\n                return i\n            elif (s == 81) and (i!= 329):\n                return i\n            elif (s == 82) and (i!= 331):\n                return i\n            elif (s == 83) and (i!= 333):\n                return i\n            elif (s == 84) and (i!= 335):\n                return i\n            elif (s == 85) and (i!= 337):\n                return i\n            elif (s == 86) and (i!= 339):\n                return i\n            elif (s == 87) and (i!= 341):\n                return i\n            elif (s == 88) and (i!= 343):\n                return i\n            elif (s == 89) and (i!= 347):\n                return i\n            elif (s == 90) and (i!= 349):\n                return i\n            elif (s == 91) and (i!= 353):\n                return i\n            elif (s == 92) and (i!= 357):\n                return i\n            elif (s == 93) and (i!= 361):\n                return i\n            elif (s == 94) and (i!= 363):\n                return i\n            elif (s == 95) and (i!= 367):\n                return i\n            elif (s == 96) and (i!= 369):\n                return i\n            elif (s == 97) and (i!= 371):\n                return i\n            elif (s == 98) and (i!= 373)"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime = []\n    p = 0\n    n = int(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    count = 0\n    m = 2\n    while (count!= n):\n        if is_prime(m):\n            count += 1\n        m = m + 1\n    return m\n    \ndef is_prime(n):\n    '''\n    Write a function that returns whether a number is prime.\n    '''\n    count = 0\n    for i in range(2, n):\n        if (n % i == 0):\n            count += 1\n    if count == 0:\n        return True\n    else:\n        return False\n    \ndef main():\n    '''\n    Write a program that outputs the nth prime number.\n    '''\n    print(newman_prime(int(input('Enter the nth prime number:'))))\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a = n - 1\n    b = 1\n    x = 10\n    while x!= -1:\n        if x % 2 == 0:\n            x = int(x / 2)\n        else:\n            x = 3 * x + 1\n        a, b = b, a + b * x\n    return a\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (tup1[0]/tup2[0], tup1[1]/tup2[1])\n    \n    "
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(0, len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i]//test_tup2[i], )\n    return result_tup\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    for i in range(len(test_tup1)):\n        try:\n            test_tup1[i] / test_tup2[i]\n        except ZeroDivisionError:\n            print(\"Division by zero not allowed\")\n            return False\n    return True\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    num1 = list(test_tup1)\n    num2 = list(test_tup2)\n    num3 = []\n    for i in range(len(num1)):\n        a = float(num1[i]) / float(num2[i])\n        num3.append(a)\n    return num3\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return ((tup1[0]/tup2[0], tup1[1]/tup2[1]) for tup1, tup2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    x = test_tup1[0] / test_tup2[0]\n    y = test_tup1[1] / test_tup2[1]\n    z = test_tup1[2] / test_tup2[2]\n    tup_result = (x, y, z)\n    return tup_result\n    \ntest_tup1 = (10, 20, 30)\ntest_tup2 = (3, 4, 5)\ntest_tup3 = (20, 20, 20)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] % test_tup2[i]!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    tup1_len = len(test_tup1)\n    tup2_len = len(test_tup2)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    ans = ()\n    for i in range(len(test_tup1)):\n        ans = test_tup1[i]//test_tup2[i]\n        yield ans\n    yield ans\n    \n    \ndef multiply_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs matrix multiplication operation element-wise across the given tuples.\n    '''\n    ans = ()\n    for i in range(len(test_tup1)):\n        ans = (test_tup1[i]*test_tup2[i])\n        yield ans\n    yield ans\n    \n    \ndef subtraction_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs subtraction operation element-wise across the given tuples.\n    '''\n    ans = ()\n    for i in range(len(test_tup1)):\n        ans = test_tup1[i]-test_tup2[i]\n        yield ans\n    yield ans\n    \n    \ndef addition_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs addition operation element-wise across the given tuples.\n    '''\n    ans = ()\n    for i in range(len(test_tup1)):\n        ans = test_tup1[i]+test_tup2[i]\n        yield ans\n    yield ans\n    \n    \ndef modulus_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs modulus operation element-wise across the given tuples.\n    '''\n    ans = ()\n    for i in range(len(test_tup1)):\n        ans = test_tup1[i]%test_tup2[i]\n        yield ans\n    yield ans\n    \n    \ndef exponentiation_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs exponentiation operation element-wise across the given tuples.\n    '''\n    ans = ()\n    for i in range(len(test_tup1)):\n        ans = test_tup1[i]**test_tup2[i]\n        yield ans\n    yield ans\n    \n    \ndef max_element(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns the maximum value in the given tuples.\n    '''\n    ans = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            ans = test_tup1[i]\n        else:\n            ans = test_tup2[i]\n    yield ans\n    yield ans\n    \n    \ndef min_element(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns the minimum value in the given tuples.\n    '''\n    ans = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] <= test_tup2[i]:\n            ans = test_tup1[i]\n        else:\n            ans = test_tup2[i]\n    yield ans\n    yield ans\n    \n    \ndef length_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns the length of the tuple in the given tuples.\n    '''\n    ans = ()\n    for i in range(len(test_tup1)):\n        ans = len(test_tup1[i])\n    yield ans\n    yield ans\n    \n    \ndef length_characters(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns the length of the characters in the given tuples.\n    '''\n    ans = ()\n    for i in range(len(test_tup1)):\n        ans = len(test_tup1[i]) + len(test_tup2[i])\n    yield ans\n    yield ans\n    \n    \ndef length_strings(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns the length of the strings in the given tuples.\n    '''\n    ans = ()\n    for i in range(len(test_tup1)):\n        ans = len(test_tup1[i]) + len(test_tup2[i])\n    yield ans\n    yield ans\n    \n    \ndef length_comparison(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns the length of the strings in the given tuples.\n    '''\n    ans = ()\n    for i in range(len(test_tup1)):\n        if len(test_tup1[i]) > len(test_tup2[i]):\n            ans = test_tup1[i]\n        elif len(test_tup2[i]) > len(test_tup1[i]):\n            ans = test_tup2[i]\n        else:\n            ans = test_tup1[i]\n    yield ans\n    yield ans\n    \n    \ndef sum_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns the sum of the given tuples.\n    '''\n    ans = ()\n    for i in range(len(test_tup1)):\n        ans = test_tup1[i] + test_tup2[i]\n    yield ans\n    yield ans\n    \n    \ndef sum_characters(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns the sum of the given tuples.\n    '''\n    ans = ()\n    for i in range(len(test_tup1)):\n        ans = test_tup1[i] + test_tup2[i]\n    yield ans\n    yield ans\n    \n    \ndef sum_strings(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns the sum of the given tuples.\n    '''\n    ans = ()\n    for i in range(len(test_tup1)):\n        ans = test_tup1[i] + test_tup2[i]\n    yield ans\n    yield ans\n    \n    \ndef sum_comparison(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns the sum of the given tuples.\n    '''\n    ans = ()\n    for i in range(len(test_tup1)):\n        if len(test_tup1[i]) > len(test_tup2[i]):\n            ans = test_tup1[i]\n        elif len(test_tup2[i]) > len(test_tup1[i]):\n            ans = test_tup2[i]\n        else:\n            ans = test_tup1[i]\n    yield ans\n    yield ans\n    \n    \ndef average_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns the sum of the given tuples.\n    '''\n    ans = ()\n    for i in range(len(test_tup1)):\n        ans = test_tup1[i] + test_tup2[i]\n    yield ans\n    yield ans\n    \n    \ndef average_characters(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and returns the sum of the given tuples.\n    '''"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"error in division_elements\")\n        return\n    elif len(test_tup1) == 0 or len(test_tup2) == 0:\n        return\n    else:\n        temp_tup1 = test_tup1\n        temp_tup2 = test_tup2\n        for i in range(len(temp_tup1)):\n            temp_tup1[i] = temp_tup1[i]/temp_tup2[i]\n        return temp_tup1\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    assert isinstance(list1, list), f\"Your list must be a list! You passed in {type(list1)}\"\n    assert len(list1) > 0, \"Your list must contain at least one element!\"\n    assert isinstance(L, int), f\"Your integer must be an integer! You passed in {type(L)}\"\n    assert L > 0, \"Your integer must be greater than zero!\"\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    assert type(L) == int and L > 0, \"L must be a positive integer.\"\n    assert type(list1) == list, \"list1 must be a list.\"\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    #i = 0\n    #j = len(list1)\n    i = 0\n    j = L\n    return list1[i:j], list1[j:]\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # Your code here\n    \n    return l, r\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return False\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return first_part, second_part\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Your code here\n    return\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    length = int(len(list1)/2)\n    if length == 0:\n        length = 1\n    return (list1[:length], list1[length:])\n    \nlist1 = list(range(0,10))\nprint(split_two_parts(list1,3)"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    print(f\"Here is the dog's age in dog's years: {h_age * 7}\")\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    #1. Convert the age in dog's years to human years.\n    #2. Convert the dog's age in human years to dog's age in dog's years.\n    #3. Print the results.\n    dog_age = h_age * 7\n    print(f\"The age of the dog in dog's years is {dog_age} years.\")\n    print(f\"The dog's age in dog's years is {dog_age/7} years.\")\n    #4. (Bonus) Write the steps to do the conversion in both directions.\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return (h_age * 7) + (12 * 5)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    return round((h_age * 7) / 25)\n    \n    \ndef temp_convert(c):\n    '''\n    Write a function to convert celsius to fahrenheit.\n    '''\n    \n    return round((c * 9 / 5) + 32)\n    \n    \ndef palindrome(s):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    \n    return True if s == s[::-1] else False\n    \n    \ndef count_hi(s):\n    '''\n    Write a function that counts the number of times 'hi' appears in a given string.\n    '''\n    \n    return s.count(\"hi\")\n    \n    \ndef count_code(s):\n    '''\n    Write a function that counts the number of times 'code' appears in a given string, ignoring case.\n    '''\n    \n    return s.count(\"code\")\n    \n    \ndef end_other(a, b):\n    '''\n    Write a function that checks if a string is the same end as a second string.\n    '''\n    \n    return a[-len(b):] == b\n    \n    \ndef front_back(str):\n    '''\n    Write a function that prints a string in the opposite order.\n    '''\n    \n    return str[::-1] + str\n    \n    \ndef front3(str):\n    '''\n    Write a function that will convert a string to \"front3\"\n    '''\n    \n    return str[0:3] + str[3:6] + str[6:9] + str[9:]\n    \n    \ndef string_times(str, n):\n    '''\n    Write a function that prints n copies of a string.\n    '''\n    \n    return str*n\n    \n    \ndef front3(str):\n    '''\n    Write a function that takes a string and returns the first three letters of the string in upper case.\n    '''\n    \n    return str[:3].upper() + str[3:]\n    \n    \ndef front3(str):\n    '''\n    Write a function that takes a string and returns the string composed of the first 2 front letters of the string.\n    '''\n    \n    return str[:2] + str[2:].upper()\n    \n    \ndef rev(str):\n    '''\n    Write a function that reverses a string.\n    '''\n    \n    return str[::-1]\n    \n    \ndef doubles(str):\n    '''\n    Write a function that takes a string and makes it a double.\n    '''\n    \n    return str + str\n    \n    \ndef front3(str):\n    '''\n    Write a function that takes a string and returns the first 3 letters of the string in upper case.\n    '''\n    \n    return str[:3].upper() + str[3:].upper()\n    \n    \ndef test_front3(test_case):\n    '''\n    The parameter to the front3 function is a string, so your test case will need to be fed in\n    as a string.\n    '''\n    \n    return front3(test_case) == test_case\n    \n    \ndef front3(str):\n    '''\n    Write a function that takes a string and returns the first 3 letters of the string in upper case.\n    '''\n    \n    return str[:3].upper() + str[3:6].upper() + str[6:].upper()\n    \n    \ndef first_two(str):\n    '''\n    Write a function that returns the first 2 letters of a string.\n    '''\n    \n    return str[:2]\n    \n    \ndef black_jack(a, b, c):\n    '''\n    Write a function that takes a string, and converts it to an integer.\n    Then returns the sum of the digits within the integer.\n    '''\n    \n    return sum([int(d) for d in str(a+b+c)])\n    \n    \ndef black_jack(a, b, c):\n    '''\n    Write a function that takes a string, and converts it to an integer.\n    Then returns the sum of the digits within the integer.\n    '''\n    \n    return sum([int(d) for d in str(a+b+c)])\n    \n    \ndef black_jack(a, b, c):\n    '''\n    Write a function that takes a string, and converts it to an integer.\n    Then returns the sum of the digits within the integer.\n    '''\n    \n    return sum([int(d) for d in str(a+b+c)])\n    \n    \ndef black_jack(a, b, c):\n    '''\n    Write a function that takes a string, and converts it to an integer.\n    Then returns the sum of the digits within the integer.\n    '''\n    \n    return sum([int(d) for d in str(a+b+c)])\n    \n    \ndef black_jack(a, b, c):\n    '''\n    Write a function that takes a string, and converts it to an integer.\n    Then returns the sum of the digits within the integer.\n    '''\n    \n    return sum([int(d) for d in str(a+b+c)])\n    \n    \ndef black_jack(a, b, c):\n    '''\n    Write a function that takes a string, and converts it to an integer.\n    Then returns the sum of the digits within the integer.\n    '''\n    \n    return sum([int(d) for d in str(a+b+c)])\n    \n    \ndef black_jack(a, b, c):\n    '''\n    Write a function that takes a string, and converts it to an integer.\n    Then returns the sum of the digits within the integer.\n    '''\n    \n    return sum([int(d) for d in str(a+b+c)])\n    \n    \ndef black_jack(a, b, c):\n    '''\n    Write a function that takes a string, and converts it to an integer.\n    Then returns the sum of the digits within the integer.\n    '''\n    \n    return sum([int(d) for d in str(a+b+c)])\n    \n    \ndef black_jack(a, b, c):\n    '''\n    Write a function that takes a string, and converts it to an integer.\n    Then returns the sum of the digits within the integer.\n    '''\n    \n    return sum([int(d) for d in str(a+b+c)])\n    \n    \ndef black_jack(a, b, c):\n    '''\n    Write a function that takes a string, and converts it to an integer.\n    Then returns the sum of the digits within the integer.\n    '''\n    \n    return sum([int(d) for d in str(a+b+c)])\n    \n    \ndef black_jack(a, b, c):\n    '''\n    Write a function that takes a string, and converts it to an integer.\n    Then returns the sum of the digits within the integer.\n    '''\n    \n    return sum([int(d) for d in str(a+b+c)])\n    \n    \ndef black_jack(a, b, c):\n    '''\n    Write a function that takes a string, and converts it to an integer.\n    Then returns the sum of the digits within the integer.\n    '''\n    \n    return sum([int(d) for d in str(a+b+c)])\n    \n    \ndef black_jack(a, b, c):\n    '''\n    Write a function that takes a string, and converts it to an integer.\n    Then returns the sum of the digits within the integer.\n    '''\n    \n    return sum([int(d) for d in str(a+b+c)])\n    \n    \ndef black_jack(a, b, c):\n    '''\n    Write a function that takes a string, and converts it to an integer.\n    Then returns the sum of the digits within the integer.\n    '''\n    \n    return sum([int(d) for d in str(a+b+c)])\n    \n    \ndef black_jack(a, b, c):\n    '''\n    Write a function that takes a string, and converts it to an integer.\n    Then returns the sum of the digits within the integer.\n    '''\n    \n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age_in_years = h_age*7\n    return dog_age_in_years\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7.0\n    \n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return (h_age * 7)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = (h_age * 7)\n    return age\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if type(h_age) == int:\n        dog_age = h_age/7\n        return dog_age\n    else:\n        print('Please enter an integer')\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    return_list = []\n    for i in range(len(S)):\n        if i % step == 0:\n            return_list.append(S[:step])\n            S = S[step:]\n    return_list.append(S)\n    return return_list\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S)<=1:\n        return(S)\n    if step<=0:\n        return(S)\n    if len(S)%step==0:\n        return(list_split(S,step))\n    else:\n        return(list_split(S[:len(S)//step*step],step))+[S[len(S)//step*step:]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    new_list = []\n    for i in range(0, len(S), step):\n        new_list.append(S[i])\n    return new_list\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    a = []\n    b = []\n    if len(S) % step == 0:\n        print(S)\n        for i in range(0, len(S), step):\n            a.append(S[i])\n        for j in range(0, len(S), step):\n            b.append(S[j])\n        a.append(S[-1])\n        for k in range(0, len(S), step):\n            b.append(S[k])\n        print(a, b)\n        return (a,b)\n    else:\n        print(S)\n        for i in range(0, len(S), step):\n            a.append(S[i])\n        for j in range(0, len(S), step):\n            b.append(S[j])\n        a.append(S[-1])\n        for k in range(0, len(S), step):\n            b.append(S[k])\n        print(a, b)\n        return (a, b)\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return list(a[i::step] for i in range(step))\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Your code here\n    returnList = []\n    for i in range(len(S)):\n        if i % step == 0:\n            returnList.append(S[:step])\n            S = S[step:]\n    returnList.append(S)\n    return returnList\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    a = []\n    for i in range(len(S)):\n        a.append(S[i::step])\n    return a\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return list(grouper(S, step))\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = float(l)\n    a = (l ** 2) / 2\n    b = l * 6\n    c = (l ** 2) / 3\n    d = a + b + c\n    return d\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def lateralSurfaceArea(s):\n        if s%2 == 0:\n            return s*s*3\n        else:\n            return 2*s*(s+1)*(s+1)\n    return lateralSurfaceArea(l)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l ** 2) - (4 * l ** 2) + l * (2 * l - 1)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = float(l)\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    #determine the length of the sides\n    #if the length of the sides is greater than the side length of a cube then you can use the volume of the cube to calculate the lateral surface area\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 4*l*l\n    return area\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l * 6\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def area(l):\n        a = l**2\n        return a\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = float(l)\n    if l < 0:\n        print('Lateral surface is invalid.')\n    else:\n        return (6*l**2)/3\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if i%2!=0:\n            sum=sum+i**2\n    print(sum)\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sqr_sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sqr_sum += i**2\n    return sqr_sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Code here\n    # n = int(input())\n    # for i in range(1, n+1):\n    #     if i % 2!= 0:\n    #         print(i ** 2)\n    #     else:\n    #         pass\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        if i%2!=0:\n            total += i**2\n    return total\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    sum = 0\n    for i in range(n):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i%2!= 0:\n            sum += i**2\n    print(sum)\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i**2\n    return sum\nprint(square_Sum(10))\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(n, n+2):\n        s += i**2\n    return s\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    x=0\n    for i in range(1,n+1):\n        if i%2!=0:\n            x=x+i**2\n    return(x)\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2 == 1:\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # def find_star_num(n):\n    #     if n < 2:\n    #         return 1\n    #     return n * (n + 1) // 2\n    if n == 0:\n        return 0\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # base case\n    if n == 1:\n        return 1\n    # recursive call\n    return n*(find_star_num(n-1))\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    result = 1\n    while n > 0:\n        result *= 5\n        n -= 1\n    return result\nprint(find_star_num(1)) # 1\nprint(find_star_num(5)) # 32\nprint(find_star_num(100)) # 3125\nprint(find_star_num(50)) # 25320\nprint(find_star_num(51)) # 325321\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    sum = 1\n    for i in range(1, n+1):\n        sum += i\n        i += 1\n    return sum\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_numbers = [x for x in range(1,n+1)]\n    i = 0\n    while len(star_numbers)!= 0:\n        i += 1\n        j = 0\n        while j!= len(star_numbers):\n            if i % star_numbers[j] == 0:\n                star_numbers.remove(star_numbers[j])\n            else:\n                j += 1\n    return star_numbers[0]\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return (n-1) * (n-2) // 2\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return 2 * n + 1\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num = 1\n    for i in range(1, n+1):\n        num *= i\n    return num\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    total_stars = 1\n    num = 1\n    while total_stars!= n:\n        num += 1\n        total_stars += num\n    return num\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num = n - 1\n    num = str(num)\n    stars = \"*\" * len(num)\n    stars = stars.replace(\"0\", \"\")\n    stars = stars.replace(\"1\", \"*\")\n    stars = stars.replace(\"2\", \"**\")\n    stars = stars.replace(\"3\", \"***\")\n    stars = stars.replace(\"4\", \"****\")\n    stars = stars.replace(\"5\", \"*****\")\n    stars = stars.replace(\"6\", \"******\")\n    stars = stars.replace(\"7\", \"********\")\n    stars = stars.replace(\"8\", \"*******\")\n    stars = stars.replace(\"9\", \"**********\")\n    stars = stars.replace(\"10\", \"***********\")\n    stars = stars.replace(\"11\", \"************\")\n    stars = stars.replace(\"12\", \"**************\")\n    stars = stars.replace(\"13\", \"****************\")\n    stars = stars.replace(\"14\", \"******************\")\n    stars = stars.replace(\"15\", \"*******************\")\n    stars = stars.replace(\"16\", \"********************\")\n    stars = stars.replace(\"17\", \"*********************\")\n    stars = stars.replace(\"18\", \"**********************\")\n    stars = stars.replace(\"19\", \"************************\")\n    stars = stars.replace(\"20\", \"*************************\")\n    stars = stars.replace(\"21\", \"****************************\")\n    stars = stars.replace(\"22\", \"******************************\")\n    stars = stars.replace(\"23\", \"*******************************\")\n    stars = stars.replace(\"24\", \"*******************************\")\n    stars = stars.replace(\"25\", \"*******************************\")\n    stars = stars.replace(\"26\", \"*******************************\")\n    stars = stars.replace(\"27\", \"*******************************\")\n    stars = stars.replace(\"28\", \"*******************************\")\n    stars = stars.replace(\"29\", \"*******************************\")\n    stars = stars.replace(\"30\", \"*******************************\")\n    stars = stars.replace(\"31\", \"*******************************\")\n    stars = stars.replace(\"32\", \"*******************************\")\n    stars = stars.replace(\"33\", \"*******************************\")\n    stars = stars.replace(\"34\", \"*******************************\")\n    stars = stars.replace(\"35\", \"*******************************\")\n    stars = stars.replace(\"36\", \"*******************************\")\n    stars = stars.replace(\"37\", \"*******************************\")\n    stars = stars.replace(\"38\", \"*******************************\")\n    stars = stars.replace(\"39\", \"*******************************\")\n    stars = stars.replace(\"40\", \"*******************************\")\n    stars = stars.replace(\"41\", \"*******************************\")\n    stars = stars.replace(\"42\", \"*******************************\")\n    stars = stars.replace(\"43\", \"*******************************\")\n    stars = stars.replace(\"44\", \"*******************************\")\n    stars = stars.replace(\"45\", \"*******************************\")\n    stars = stars.replace(\"46\", \"*******************************\")\n    stars = stars.replace(\"47\", \"*******************************\")\n    stars = stars.replace(\"48\", \"*******************************\")\n    stars = stars.replace(\"49\", \"*******************************\")\n    stars = stars.replace(\"50\", \"*******************************\")\n    stars = stars.replace(\"51\", \"*******************************\")\n    stars = stars.replace(\"52\", \"*******************************\")\n    stars = stars.replace(\"53\", \"*******************************\")\n    stars = stars.replace(\"54\", \"*******************************\")\n    stars = stars.replace(\"55\", \"*******************************\")\n    stars = stars.replace(\"56\", \"*******************************\")\n    stars = stars.replace(\"57\", \"*******************************\")\n    stars = stars.replace(\"58\", \"*******************************\")\n    stars = stars.replace(\"59\", \"*******************************\")\n    stars = stars.replace(\"60\", \"*******************************\")\n    stars = stars.replace(\"61\", \"*******************************\")\n    stars = stars.replace(\"62\", \"*******************************\")\n    stars = stars.replace(\"63\", \"*******************************\")\n    stars = stars.replace(\"64\", \"*******************************\")\n    stars = stars.replace(\"65\", \"*******************************\")\n    stars = stars.replace(\"66\", \"*******************************\")\n    stars = stars.replace(\"67\", \"*******************************\")\n    stars = stars.replace(\"68\", \"*******************************\")\n    stars = stars.replace(\"69\", \"*******************************\")\n    stars = stars.replace(\"70\", \"*******************************\")\n    stars = stars.replace(\"71\", \"*******************************\")\n    stars = stars.replace(\"72\", \"*******************************\")\n    stars = stars.replace(\"73\", \"*******************************\")\n    stars = stars.replace(\"74\", \"*******************************\")\n    stars = stars.replace(\"75\", \"*******************************\")\n    stars = stars.replace(\"76\", \"*******************************\")\n    stars = stars.replace(\"77\", \"*******************************\")\n    stars = stars.replace(\"78\", \"*******************************\")\n    stars = stars.replace(\"79\", \"*******************************\")\n    stars = stars.replace(\"80\", \"*******************************\")\n    stars = stars.replace(\"81\", \"*******************************\")\n    stars = stars.replace(\"82\", \"*******************************\")\n    stars = stars.replace(\"83\", \"*******************************\")\n    stars = stars.replace(\"84\", \"*******************************\")\n    stars = stars.replace(\"85\", \"*******************************\")\n    stars = stars.replace(\"86\", \"*******************************\")\n    stars = stars.replace(\"87\", \"*******************************\")\n    stars = stars.replace(\"88\", \"*******************************\")\n    stars = stars.replace(\"89\", \"*******************************\")\n    stars = stars.replace(\"90\", \"*******************************\")\n    stars = stars.replace(\"91\", \"*******************************\")\n    stars = stars.replace(\"92\", \"*******************************\")\n    stars = stars.replace(\"93\", \"*******************************\")\n    stars = stars.replace(\"94\", \"*******************************\")\n    stars = stars.replace(\"95\", \"*******************************\")\n    stars = stars.replace(\"96\", \"*******************************\")\n    stars = stars.replace(\"97\", \"*******************************\")\n    stars = stars.replace(\"98\", \"*******************************\")\n    stars = stars.replace(\"99\", \"*******************************\")\n    stars = stars.replace(\"100\", \"*******************************\")\n    stars = stars.replace(\"101\", \"*******************************\")\n    stars = stars.replace(\"102\", \"*******************************\")\n    stars = stars.replace(\"103\", \"*******************************\")\n    stars = stars.replace(\"104\", \"*******************************\")\n    stars = stars.replace(\"105\", \"*******************************\")\n    stars = stars.replace(\"106\", \"*******************************\")\n    stars = stars.replace(\"107\", \"*******************************\")\n    stars = stars.replace(\"108\", \"*******************************\")\n    stars = stars.replace(\"109\", \"*******************************\")\n    stars = stars.replace(\"110\", \"*******************************\")\n    stars = stars.replace(\"111\", \"*******************************\")\n    stars = stars.replace(\"112\", \"*******************************\")\n    stars = stars.replace(\"113\", \"*******************************\")\n    stars = stars.replace(\"114\", \"*******************************\")\n    stars = stars.replace(\"115\", \"*******************************\")\n    stars = stars.replace(\"116\", \"*******************************\")\n    stars = stars.replace(\"117\", \"*******************************\")\n    stars = stars.replace(\"118\", \"*******************************\")\n    stars = stars.replace(\"119\", \"*******************************\")\n    stars = stars.replace(\"120\", \"*******************************\")\n    stars = stars.replace(\"121\", \"*******************************\")\n    stars = stars.replace(\"122\", \"*******************************\")\n    stars = stars.replace(\"123\", \"*******************************\")\n    stars = stars.replace(\"124\", \"*******************************\")\n    stars = stars.replace(\"125\", \"*******************************\")\n    stars = stars.replace(\"126\", \"*******************************\")\n    stars = stars.replace(\"127\", \"*******************************\")\n    stars = stars.replace(\"128\", \"*******************************\")\n    stars = stars.replace(\"129\", \"*******************************\")\n    stars = stars.replace(\"130\", \"*******************************\")\n    stars = stars.replace(\"131\", \"*******************************\")\n    stars = stars.replace(\"132\", \"*******************************\")\n    stars = stars.replace(\"133\", \"*******************************\")\n    stars = stars.replace(\"13"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef display_gameboard(board):\n    for i in range(len(board)):\n        print(board[i])\ndef player_move(board):\n    '''\n    Prompts the player to enter a move for a player.\n    '''\n    valid = False\n    while not valid:\n        move = input(\"Enter move (e.g. b3):\")\n        try:\n            move = move.lower()\n            r, c = move[0], move[1]\n            if r not in 'abcdefgh' or c not in '12345678':\n                print(\"Please enter a valid move.\")\n            elif board[int(r) - 1][int(c) - 1]!= \"-\":\n                print(\"This position is occupied. Please choose another one.\")\n            else:\n                valid = True\n        except:\n            print(\"Please enter a valid move.\")\n    return (int(r) - 1, int(c) - 1)\ndef place_marker(board, marker, position):\n    '''\n    Places a marker onto the board.\n    '''\n    board[position[0]][position[1]] = marker\ndef win_check(board, mark):\n    '''\n    Check if the position of a player has reached the win state\n    '''\n    for i in range(3):\n        if board[i][0] == board[i][1] == board[i][2] == mark:\n            return True\n        if board[0][i] == board[1][i] == board[2][i] == mark:\n            return True\n    if board[0][0] == board[1][1] == board[2][2] == mark:\n        return True\n    if board[0][2] == board[1][1] == board[2][0] == mark:\n        return True\n    return False\ndef display_board(board):\n    print(\" \" + board[0][0] + \" | \" + board[0][1] + \" | \" + board[0][2] + \" | \")\n    print(\"-----------\")\n    print(\" \" + board[1][0] + \" | \" + board[1][1] + \" | \" + board[1][2] + \" | \")\n    print(\"-----------\")\n    print(\" \" + board[2][0] + \" | \" + board[2][1] + \" | \" + board[2][2] + \" | \")\ndef board_full(board):\n    for i in range(3):\n        for j in range(3):\n            if board[i][j] == \"-\":\n                return False\n    return True\ndef first_move(board):\n    '''\n    Check if the first move is a winner.\n    '''\n    for i in range(3):\n        if board[i][0] == board[i][1] == board[i][2]!= \"-\":\n            return board[i][0]\n        if board[0][i] == board[1][i] == board[2][i]!= \"-\":\n            return board[0][i]\n    if board[0][0] == board[1][1] == board[2][2]!= \"-\":\n        return board[1][1]\n    if board[0][2] == board[1][1] == board[2][0]!= \"-\":\n        return board[1][1]\n    return None\ndef space_check(board, position):\n    return board[position[0]][position[1]] == \"-\"\ndef full_board_check(board):\n    for i in range(3):\n        for j in range(3):\n            if board[i][j] == \"-\":\n                return False\n    return True\ndef player_choice(board):\n    valid = False\n    while not valid:\n        position = input(\"Enter position (e.g. b3): \")\n        try:\n            position = position.lower()\n            r, c = position[0], position[1]\n            if r not in 'abcdefgh' or c not in '12345678':\n                print(\"Please enter a valid position.\")\n            elif board[int(r) - 1][int(c) - 1]!= \"-\":\n                print(\"This position is occupied. Please choose another one.\")\n            else:\n                valid = True\n        except:\n            print(\"Please enter a valid position.\")\n    return (int(r) - 1, int(c) - 1)\ndef replay():\n    '''\n    Check if the player want to play the game again.\n    '''\n    choice = input(\"Do you want to play again? Enter Yes or No: \")\n    return choice.lower().startswith('y')\ndef check_winner(board, mark):\n    '''\n    Check if the position of a player has reached the win state\n    '''\n    for i in range(3):\n        if board[i][0] == board[i][1] == board[i][2] == mark:\n            return True\n        if board[0][i] == board[1][i] == board[2][i] == mark:\n            return True\n    if board[0][0] == board[1][1] == board[2][2] == mark:\n        return True\n    if board[0][2] == board[1][1] == board[2][0] == mark:\n        return True\n    return False\ndef play_game():\n    board = [\"-\",\"-\",\"-\",\"-\",\"-\",\"-\",\"-\",\"-\",\"-\"]\n    print(\"Welcome to Tic Tac Toe!\")\n    display_gameboard(board)\n    player1, player2 = \"\", \"\"\n    while not (win_check(board, player1) or win_check(board, player2)):\n        if first_move(board) == \"X\":\n            player1 = \"X\"\n            player2 = \"O\"\n            if win_check(board, player2):\n                display_gameboard(board)\n                print(\"Player 2 wins!\")\n                break\n            if not win_check(board, player1):\n                display_gameboard(board)\n                print(\"Player 1's chance\")\n                if win_check(board, player2):\n                    display_gameboard(board)\n                    print(\"Player 2 wins!\")\n                    break\n                move = player_move(board)\n                place_marker(board, player1, move)\n                display_gameboard(board)\n                if win_check(board, player1):\n                    display_gameboard(board)\n                    print(\"Player 1 wins!\")\n                    break\n                if not win_check(board, player1):\n                    if board_full(board):\n                        display_gameboard(board)\n                        print(\"Tie!\")\n                        break\n                    else:\n                        player2 = \"X\"\n                        player1 = \"O\"\n                        move = player_move(board)\n                        place_marker(board, player2, move)\n                        display_gameboard(board)\n                        if win_check(board, player2):\n                            display_gameboard(board)\n                            print(\"Player 2 wins!\")\n                            break\n                        if not win_check(board, player2):\n                            if board_full(board):\n                                display_gameboard(board)\n                                print(\"Tie!\")\n                                break\n                            else:\n                                player2 = \"X\"\n                                player1 = \"O\"\n                                move = player_move(board)\n                                place_marker(board, player2, move)\n                                display_gameboard(board)\n                                if win_check(board, player2):\n                                    display_gameboard(board)\n                                    print(\"Player 2 wins!\")\n                                    break\n                                if not win_check(board, player2):\n                                    if board_full(board):\n                                        display_gameboard(board)\n                                        print(\"Tie!\")\n                                        break\n    if replay():\n        play_game()\n    else:\n        print(\"Thank you for playing!\")\nplay_game("
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    #convert character to ascii value\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    assert type(k) == str, f\"{type(k)} is not str\"\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \n    \n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if arr == None:\n        return\n    lst = []\n    summ = 0\n    \n    for i in range(len(arr)):\n        if arr[i]%2 == 0:\n            summ += arr[i]\n            lst.append(arr[i])\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0,len(arr)):\n        if i % 2 == 0:\n            even_sum = even_sum + arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for index in range(len(arr)):\n        if index%2 == 0:\n            even_sum += arr[index]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index_sum = 0\n    even_index_list = []\n    # return even_index_sum\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_index_sum += arr[i]\n            even_index_list.append(arr[i])\n    return even_index_sum, even_index_list\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # Your Code Here\n    sum_even = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                sum_even += arr[i]\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    s=0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            s += arr[i]\n    return s\n        \ndef sum_even_and_odd_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at odd positions of a list.\n    '''\n    s=0\n    for i in range(len(arr)):\n        if arr[i] % 2!= 0:\n            s += arr[i]\n    return s\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_idx = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_idx += 1\n    print(even_sum,even_idx)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    s = 0\n    for i in range(0,len(arr)):\n        if(arr[i]%2==0):\n            s = s + arr[i]\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if (i ** 5)%2 == 0:\n            sum = sum + i ** 5\n    print(sum)\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for i in range(n):\n        if i % 2 == 0:\n            result += i ** 5\n    return result\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for x in range(1,n):\n        if x % 2 == 0:\n            total = total + x**5\n    print(total)\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # print(\"Input:\",n)\n    # print(sum([i for i in range(1,n+1) if i % 2 == 0 and i**5 % 5 == 0 ]))\n    if n <= 0:\n        return None\n    return sum([i**5 for i in range(1,n+1) if i % 2 == 0 ])\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(map(lambda x: x*x*x*x*x, range(1, n + 1)))\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**5\n    return sum\nprint(even_Power_Sum(20)) # 225\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(i ** 5 for i in range(1, n))\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Your code goes here\n    #print(type(n))\n    if n <= 0:\n        return 0\n    else:\n        odd_list = []\n        even_list = []\n        for i in range(1,n+1):\n            if i%2==0:\n                even_list.append(i**5)\n            else:\n                odd_list.append(i**5)\n        odd_list_sum = sum(odd_list)\n        even_list_sum = sum(even_list)\n        total_sum = odd_list_sum + even_list_sum\n        return total_sum\n    \ndef fibonacci(n):\n    '''\n    Write a python function that takes in an integer n and returns the nth value in the Fibonacci Sequence.\n    '''\n    # Your code goes here\n    if n <= 0:\n        return 0\n    else:\n        if n <= 2:\n            return 1\n        else:\n            return fibonacci(n-1) + fibonacci(n-2)\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for i in range(n+1):\n        if(i%2==0):\n            result += i**5\n    return result\nprint(even_Power_Sum(5))\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    Sum = 0\n    if n <= 0:\n        return Sum\n    else:\n        for i in range(n):\n            Sum = Sum + (i**5)\n        return Sum\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return list(map(lambda x:x[1],test_list))\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[1] for tup in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    extracted_list = []\n    for t in range(len(test_list)):\n        extracted_list.append(test_list[t][1])\n    return extracted_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][1])\n    return rear_list\nprint(rear_extract(test_list))\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    lst = []\n    for i in range(len(test_list)):\n        lst.append(test_list[i][2])\n    return lst\n    \n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return test_list[::-1]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return (list(map(lambda x: x[-1], test_list)))\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return test_list[::-1]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append(i[1])\n    return new_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[1] for tup in test_list]\n    \ndef rear_extract2(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    reversed_list = list(reversed(test_list))\n    return [tup[1] for tup in reversed_list]\n    \n    "
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    for i in range(len(tup1)):\n        tup1[i] = tup1[i] - tup2[i]\n    return tup1\nprint(substract_elements((1,2,3,4), (1,2,3)))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tup_1 = test_tup1\n    tup_2 = test_tup2\n    lst_tup1 = []\n    lst_tup2 = []\n    for i in range(len(tup_1)):\n        lst_tup1.append(tup_1[i])\n    for i in range(len(tup_2)):\n        lst_tup2.append(tup_2[i])\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] - test_tup2[i],)\n    return result\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            new_tup += (test_tup1[i] - test_tup2[i],)\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result = test_tup1[i] - test_tup2[i]\n    return result\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return test_tup1[0] - test_tup2[0], test_tup1[1] - test_tup2[1], test_tup1[2] - test_tup2[2]\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    # A Dictionary to be used for the results\n    res_dict = {}\n    \n    # A tuple to be used for the results\n    res_tup = ()\n    \n    # A loop to iterate over the elements of the first tuple\n    for i in range(0, len(test_tup1)):\n        \n        # A conditional to check whether the elements are equal\n        if test_tup1[i] == test_tup2[i]:\n            \n            # If the elements are equal then subtract the elements of the first tuple by the elements of the second tuple\n            res_tup = res_tup + (test_tup1[i] - test_tup2[i],)\n            \n        # Else, if the elements are not equal, add the element of the first tuple to the dictionary with its key being the index of the tuple element\n        else:\n            \n            # Add the element of the first tuple to the dictionary with its key being the index of the tuple element\n            res_dict[i] = test_tup1[i]\n            \n            # Add the element of the second tuple to the dictionary with its key being the index of the tuple element\n            res_dict[i + len(test_tup1)] = test_tup2[i]\n    \n    # A return statement to return the results\n    return res_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tuple_elements = []\n    i = 0\n    while i < len(test_tup1):\n        tuple_elements.append(test_tup1[i] - test_tup2[i])\n        i += 1\n    return tuple_elements\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    # iterate through each element\n    for i in range(len(test_tup1)):\n        # check if element is equal\n        if test_tup1[i]!= test_tup2[i]:\n            # subtract each element by the other\n            test_tup1[i] = test_tup1[i] - test_tup2[i]\n        else:\n            # don't do anything\n            continue\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n+1):\n        sum += (math.factorial(2*n-i)/(2*math.factorial(n-i)))\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for k in range(n): \n        n = n - 2 * k\n        sum = sum + (-1)**(k + 1) * (math.factorial(2*k + 1)/(2 * math.factorial(k + 1))) * n**2\n    return(sum)\ndef odd_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    sum = 0\n    for k in range(n): \n        n = n - 2 * k - 1\n        sum = sum + (-1)**(k + 1) * (math.factorial(2*k + 1)/(2 * math.factorial(k + 1))) * n**2\n    return(sum)\ndef even_binomial_Coeff_Sum_List( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the list of all the even index binomial coefficients.\n    '''\n    even_list = []\n    for k in range(n): \n        n = n - 2 * k\n        even_list.append(-1)**(k + 1) * (math.factorial(2*k + 1)/(2 * math.factorial(k + 1))) * n**2\n    return(even_list)\ndef odd_binomial_Coeff_Sum_List( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the list of all the odd index binomial coefficients.\n    '''\n    odd_list = []\n    for k in range(n): \n        n = n - 2 * k - 1\n        odd_list.append(-1)**(k + 1) * (math.factorial(2*k + 1)/(2 * math.factorial(k + 1))) * n**2\n    return(odd_list)\ndef even_binomial_Coeff_List( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the list of all the even index binomial coefficients.\n    '''\n    list = []\n    for k in range(n): \n        list.append(0)\n        n = n - 2 * k\n        list[k] = (-1)**(k + 1) * (math.factorial(2*k + 1)/(2 * math.factorial(k + 1))) * n**2\n    return(list)\ndef odd_binomial_Coeff_List( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the list of all the odd index binomial coefficients.\n    '''\n    list = []\n    for k in range(n): \n        list.append(0)\n        n = n - 2 * k - 1\n        list[k] = (-1)**(k + 1) * (math.factorial(2*k + 1)/(2 * math.factorial(k + 1))) * n**2\n    return(list)\ndef even_binomial_Coeff_Dictionary( n): \n    '''\n    Write a python function that takes in a positive integer n and returns a dictionary of all the even index binomial coefficients.\n    '''\n    dict = {}\n    for k in range(n): \n        n = n - 2 * k\n        dict[k] = (-1)**(k + 1) * (math.factorial(2*k + 1)/(2 * math.factorial(k + 1))) * n**2\n    return(dict)\ndef odd_binomial_Coeff_Dictionary( n): \n    '''\n    Write a python function that takes in a positive integer n and returns a dictionary of all the odd index binomial coefficients.\n    '''\n    dict = {}\n    for k in range(n): \n        n = n - 2 * k - 1\n        dict[k] = (-1)**(k + 1) * (math.factorial(2*k + 1)/(2 * math.factorial(k + 1))) * n**2\n    return(dict)\ndef even_binomial_Coeff_List_Dictionary( n): \n    '''\n    Write a python function that takes in a positive integer n and returns a dictionary of all the even index binomial coefficients.\n    '''\n    list = []\n    for k in range(n): \n        list.append(0)\n        n = n - 2 * k\n        list[k] = (-1)**(k + 1) * (math.factorial(2*k + 1)/(2 * math.factorial(k + 1))) * n**2\n    dict = {}\n    for k in range(n): \n        dict[k] = list[k]\n    return(dict)\ndef odd_binomial_Coeff_List_Dictionary( n): \n    '''\n    Write a python function that takes in a positive integer n and returns a dictionary of all the odd index binomial coefficients.\n    '''\n    list = []\n    for k in range(n): \n        list.append(0)\n        n = n - 2 * k - 1\n        list[k] = (-1)**(k + 1) * (math.factorial(2*k + 1)/(2 * math.factorial(k + 1))) * n**2\n    dict = {}\n    for k in range(n): \n        dict[k] = list[k]\n    return(dict)\ndef even_binomial_Coeff_Sum_Dictionary( n): \n    '''\n    Write a python function that takes in a positive integer n and returns a dictionary of all the even index binomial coefficients.\n    '''\n    dict = {}\n    for k in range(n): \n        n = n - 2 * k\n        dict[k] = (-1)**(k + 1) * (math.factorial(2*k + 1)/(2 * math.factorial(k + 1))) * n**2\n    return(dict)\ndef odd_binomial_Coeff_Sum_Dictionary( n): \n    '''\n    Write a python function that takes in a positive integer n and returns a dictionary of all the odd index binomial coefficients.\n    '''\n    dict = {}\n    for k in range(n): \n        n = n - 2 * k - 1\n        dict[k] = (-1)**(k + 1) * (math.factorial(2*k + 1)/(2 * math.factorial(k + 1))) * n**2\n    return(dict)\ndef even_binomial_Coeff_Sum_Dictionary_List( n): \n    '''\n    Write a python function that takes in a positive integer n and returns a dictionary of all the even index binomial coefficients.\n    '''\n    list = []\n    for k in range(n): \n        list.append(0)\n        n = n - 2 * k\n        list[k] = (-1)**(k + 1) * (math.factorial(2*k + 1)/(2 * math.factorial(k + 1))) * n**2\n    dict = {}\n    for k in range(n): \n        dict[k] = list[k]\n    return(dict)\ndef odd_binomial_Coeff_Sum_Dictionary_List( n): \n    '''\n    Write a python function that takes in a positive integer n and returns a dictionary of all the odd index binomial coefficients.\n    '''\n    list = []\n    for k in range(n): \n        list.append(0)\n        n = n - 2 * k - 1\n        list[k] = (-1)**(k + 1) * (math.factorial(2*k + 1)/(2 * math.factorial(k + 1))) * n**2\n    dict = {}\n    for k in range(n): \n        dict[k] = list[k]\n    return(dict)\ndef even_binomial_Coeff_Dictionary_List( n): \n    '''\n    Write a python function that takes in a positive integer n and returns a dictionary of all the even index binomial coefficients.\n    '''\n    list = []\n    for k in range(n): \n        list.append(0)\n        n = n - 2 * k\n        list[k] = (-1)**(k "
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    Sum = 0\n    for i in range(n):\n        Sum = Sum + 2**i * binomial_coefficient(n, i)\n    return Sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    for k in range(0, n+1):\n        s += (k*(k+1))//2\n    return s\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    if n==1:\n        return 0\n    for i in range(1,n+1):\n        sum += binomialCoeff(n,i)*2**i\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 1:\n        return 0\n    result = 0\n    for i in range(n):\n        result += binomialCoeff(n, i)\n    return result\n    \n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_val = 0\n    for i in range(1, n+1):\n        sum_val = sum_val + (2 * i * (i+1)) / (i+1)\n    return sum_val\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    Sum = 0\n    for i in range(n + 1):\n        if i % 2 == 0:\n            Sum = Sum + i \n    return Sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_coeff_sum = 0\n    for i in range(n):\n        binomial_coeff_sum += (math.factorial(n)/(math.factorial(i)*math.factorial(n-i)))\n    return binomial_coeff_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # YOUR CODE GOES HERE\n    res = 0\n    for i in range(0,n+1):\n        res += ((i+1)*(2*i+1))/(6*(i+1))\n    return res\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    \n    import math\n    \n    volume = math.pi * (r**2) * h\n    \n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    return pi*r*r*h\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (math.pi)*(r**2)*(h)\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14*(r**2)*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*h*r**2\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    \n    v = math.pi*r*r*h\n    \n    return v\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*(r**2)*h\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi*(r**2)*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159265358979323846264338\n    return pi * r ** 2 * h\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return math.pi*r**2*h\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key,value in dict.items() if value >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_filtered = {}\n    for k,v in dict.items():\n        if v >= n:\n            dict_filtered[k] = v\n    return dict_filtered\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_1={}\n    for i,j in dict.items():\n        if j>=n:\n            dict_1[i]=j\n    print(dict_1)\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {key:value for key, value in dict.items() if value >= n}\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for (k,v) in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict={}\n    for k,v in dict.items():\n        if v>=n:\n            new_dict[k]=v\n    return new_dict\n    \nprint(dict_filter({1: 10, 2: 3, 4:5},3)) #{4:5}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key in dict.keys():\n        if dict[key] >= n:\n            new_dict[key] = dict[key]\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, val in dict.items():\n        if val >= n:\n            filtered_dict.update({key:val})\n    return filtered_dict\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return test_tup.index(test_tup[0]) + 1\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    num_of_elements = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            num_of_elements += 1\n    return num_of_elements\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count=0\n    for ele in test_tup:\n        if ele<test_tup[0]:\n            count+=1\n    return count\n    #start writing your code here\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return test_tup.index(test_tup[0])\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    counter = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[i + 1]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for element in range(0, len(test_tup)):\n        if test_tup[element] < test_tup[element+1]:\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    c = 0\n    for item in test_tup:\n        if item < test_tup[0]:\n            c = c + 1\n    return c\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    first_element_count = 0\n    for index in range(len(test_tup)):\n        if index == 0:\n            first_element_count += 1\n        if test_tup[index] < test_tup[index-1]:\n            break\n    return first_element_count\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 1\n    count = 1\n    while count <= n:\n        num = num * 10 + 9\n        count += 1\n    return num\n    "
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 1\n    \n    else:\n        d = 1\n        i = 0\n        while i < n:\n            d = d * (n + 1)\n            n = n - 1\n            i = i + 1\n        return d\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 1\n    total = 1\n    while count <= n:\n        total = total * (count * (count + 1)) // 2\n        count += 1\n    return total\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 1\n    if n <= 0:\n        return -1\n    for i in range(1, n + 1):\n        num *= i\n        \n    return num\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return \"Nth decagonal number should be greater than 0\"\n    else:\n        nums = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 84, 90, 100, 105, 111, 121, 132, 144, 150, 165, 171,\n                177, 198, 210, 231, 242, 253, 265, 276, 288, 300, 321, 333, 345, 357, 375, 378, 390, 402, 414, 432,\n                444, 456, 468, 483, 496, 500, 511, 524, 545, 567, 581, 593, 604, 615, 625, 636, 648, 659, 672, 686,\n                696, 707, 718, 729, 742, 755, 777, 792, 813, 826, 839, 853, 874, 895, 907, 917, 929, 940, 953, 965,\n                983, 991, 1008, 1012, 1026, 1032, 1040, 1051, 1063, 1075, 1088, 1109, 1111, 1123, 1143, 1154, 1163,\n                1176, 1189, 1192, 1204, 1213, 1226, 1237, 1254, 1262, 1279, 1291, 1301, 1303, 1315, 1332, 1360, 1374,\n                1391, 1398, 1408, 1418, 1429, 1443, 1456, 1471, 1484, 1491, 1507, 1517, 1527, 1537, 1556, 1563, 1569,\n                1586, 1593, 1611, 1621, 1632, 1643, 1654, 1661, 1682, 1694, 1707, 1721, 1738, 1754, 1765, 1776, 1797,\n                1799, 1812, 1823, 1841, 1858, 1869, 1890, 1891, 1914, 1935, 1949, 1951, 1966, 1969, 1979, 1987,\n                1993, 1999, 2003, 2021, 2037, 2053, 2081, 2099, 2111, 2127, 2131, 2137, 2141, 2143, 2153, 2154, 2160,\n                2161, 2172, 2173, 2175, 2179, 2183, 2185, 2186, 2188, 2193, 2194, 2195, 2201, 2202, 2203, 2206, 2215,\n                2221, 2238, 2240, 2247, 2253, 2257, 2275, 2276, 2279, 2282, 2283, 2285, 2286, 2288, 2293, 2295, 2299,\n                2306, 2319, 2323, 2341, 2342, 2345, 2351, 2359, 2367, 2369, 2376, 2379, 2383, 2389, 2392, 2399, 2411,\n                2426, 2437, 2458, 2471, 2489, 2492, 2499, 2506, 2518, 2527, 2533, 2557, 2578, 2599, 2617, 2619, 2623,\n                2653, 2671, 2672, 2676, 2681, 2696, 2707, 2718, 2723, 2733, 2767, 2774, 2783, 2789, 2793, 2814, 2827,\n                2839, 2847, 2856, 2865, 2875, 2878, 2882, 2886, 2923, 2941, 2947, 2949, 2959, 2971, 2980, 2987, 3004,\n                3021, 3031, 3043, 3061, 3067, 3079, 3081, 3099, 3111, 3121, 3137, 3163, 3167, 3173, 3189, 3191, 3199,\n                3209, 3214, 3221, 3241, 3242, 3244, 3259, 3281, 3283, 3287, 3296, 3314, 3329, 3331, 3339, 3376, 3389,\n                3341, 3449, 3451, 3456, 3462, 3473, 3476, 3488, 3492, 3493, 3519, 3527, 3533, 3547, 3553, 3557, 3581,\n                3583, 3589, 3595, 3607, 3613, 3617, 3619, 3623, 3627, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691,\n                3697, 3706, 3713, 3727, 3733, 3741, 3748, 3751, 3753, 3755, 3761, 3763, 3769, 3771, 3773, 3777, 3778,\n                3784, 3793, 3796, 3798, 3804, 3821, 3839, 3869, 3871, 3879, 3887, 389, 3908, 3915, 3921, 3932, 3958,\n                3967, 3971, 3977, 3981, 3999, 4001, 4003, 4007, 4013, 4019, 4023, 4033, 4037, 4039, 4045, 4051, 4057,\n                4063, 4069, 4073, 4081, 4087, 4093, 4097, 4102, 4107, 4109, 4113, 4127, 4129, 4133, 4144, 4145, 4151,\n                4157, 4161, 4163, 4177, 4201, 4211, 4213, 4217, 4219, 4229, 4231, 4233, 4241, 4244, 4249, 4251, 4253,\n                4257, 4261, 4271, 4273, 4283, 4289, 4297, 4306, 4309, 4327, 4337, 4339, 4341, 4347, 4348, 4357, 4359,\n                4363, 4373, 4391, 4396, 4397, 4409, 4421, 4423, 4427, 4429, 4451, 4452, 4453, 4457, 4469, 4471, 4483,\n                4487, 4499, 4511, 4523, 4547, 4559, 4567, 4583, 4591, 4597, 4603, 4619, 4621, 4622, 4623, 4626, 4627,\n                4629, 4641, 4643, 4644, 4649, 4651, 4653, 4657, 4663, 4667, 4673, 4679, 4691, 4703, 4725, 4730, 4732,\n                4743, 4745, 4749, 4751, 4759, 4761, 4762, 4762, 4769, 4776, 4778, 4789, 4791, 4801, 4819, 4823, 4829,\n                4835, 4838, 4839, 4841, 4843, 4859, 4867, 4871, 4878, 4881, 4882, 4888, 4897, 4904, 4909, 4917, 4921,\n                4922, 4924, 4939, 4959, 4967, 4969, 4979, 4981, 4982, 4984, 4984, 4987, 4999, 5006, 5007, 5018, 5020,\n                5023, 5039, 5052, 5053, 5056, 5060, 5066, 5068, 5069, 5070, 5075, 5080, 5085, 5086, 5087, 5091, 5096,\n                5097, 5101, 5102, 5105, 5106, 5107, 5111, 5112, 5114, 5115, 5117, 5118, 5125, 5126, 5127, 5128, 5132,\n                5134, 5135, 5136, 5137, 5139, 5143, 5145, 5146, 5147, 5148, 5149, 5151, 5156, 5157, 5158, 5159, 5163,\n                5167, 5168, 5169, 5171, 5172, 5173, 5174, 5177, 5181, 5183, 5184, 5186, 5187, 5189, 5191, 5192, 5194,\n                5195, 5196, 5197, 5198, 5199, 5201, 5202, 5203, 5204, 5205, 5206, 5207, 5208, 5209, 5210, 5211, 5212,\n                5213, 5215, 5216, 5218, 5219, 5220, 5221, 5222, 5224, 5226, 5227, "
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int( (n * (n + 1)) / 2 )\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = n+1\n    x = 1\n    while n > 0:\n        if n > 0:\n            x = x+1\n            n=n-1\n        else:\n            x = x*10\n            n = n\n    return x\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = n + 1\n    s = 0\n    for i in range(1,n):\n        s = s + (i * i * i)\n    return s\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n**(1/2) - 0.5) ** 2\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 1\n    decagonal = 1\n    while i <= n:\n        decagonal = decagonal*(i+1)\n        i += 1\n    return decagonal\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for x in range(0, len(dlist)):\n        if dlist[x] == item:\n            return True, x\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0, len(dlist)):\n        if item == dlist[i]:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # for i in range(len(dlist)):\n    #     if dlist[i] == item:\n    #         return (True, i)\n    # return (False, -1)\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            index = i\n            break\n    if index == -1:\n        return (False, -1)\n    return (True, index)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index in range(len(dlist)):\n        if dlist[index] == item:\n            return True, index\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    while pos < len(dlist) and found == False:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    if found == True:\n        return (found, pos)\n    else:\n        return (found, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = 0\n    while index < len(dlist) and not found:\n        if dlist[index] == item:\n            found = True\n        else:\n            index = index + 1\n    if not found:\n        return found, -1\n    else:\n        return found, index\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    n = len(dlist)\n    for i in range(n):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # START SOLUTION\n    # for index in range(len(dlist)):\n    #     if item == dlist[index]:\n    #         return (True, index)\n    # return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    #intialize the index\n    index = 0\n    #start with the first element\n    while index < len(dlist):\n        #if the element is equal to the one to find, then return the boolean and the index\n        if dlist[index] == item:\n            return True, index\n        #increment the index\n        index += 1\n    #return false if the element is not found\n    return False, -1\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n        if unique:\n            return True\n    return False\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    list_1 = []\n    for i in test_list:\n        if i not in list_1:\n            list_1.append(i)\n    return len(list_1) == len(test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) > 1:\n        if len(set(test_list)) == len(test_list):\n            return False\n        return True\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # in the list are duplicate elements\n    # if len(set(test_list)) == len(test_list):\n    #     print(\"List contains duplicates.\")\n    # else:\n    #     print(\"List does not contain duplicates.\")\n    # in the list are duplicate elements\n    if len(set(test_list)) == len(test_list):\n        print(\"List contains duplicates.\")\n    else:\n        print(\"List does not contain duplicates.\")\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n    # OR\n    # return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    flag = False\n    if len(test_list) > 1:\n        for i in range(len(test_list)):\n            for j in range(len(test_list)):\n                if test_list[i] == test_list[j]:\n                    flag = True\n                    break\n        if flag == True:\n            print(\"The given list is not unique.\")\n        else:\n            print(\"The given list is unique.\")\n    else:\n        print(\"The given list is not unique.\")\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) > 0:\n        if len(set(test_list)) == len(test_list):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) <= 0:\n        return True\n    if len(test_list) == 1:\n        return True\n    if len(test_list) == 2:\n        if test_list[0] == test_list[1]:\n            return True\n        else:\n            return False\n    if len(test_list) > 2:\n        if test_list[0] == test_list[1]:\n            return all_unique(test_list[2:])\n        else:\n            return False\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    l1 = []\n    l2 = []\n    for i in range(len(nums1)):\n        l1.append(nums1[i])\n        l2.append(nums2[i])\n    l3 = []\n    for i in range(len(l1)):\n        l3.append(l1[i]-l2[i])\n    return l3\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return list(set(nums1)-set(nums2))\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    lst_sum = []\n    if len(nums1) < len(nums2):\n        for i in range(len(nums1)):\n            lst_sum.append(nums1[i] - nums2[i])\n    else:\n        for i in range(len(nums2)):\n            lst_sum.append(nums1[i] - nums2[i])\n    return lst_sum\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    l1 = list(nums1)\n    l2 = list(nums2)\n    for i in range(len(l1)):\n        l1[i] = l1[i] - l2[i]\n    return l1\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]\n    \n    \ndef sub_sorted_list(nums1,nums2):\n    '''\n    Write a function that takes two sorted lists and returns their\n    difference in ascending order.\n    '''\n    diff_nums = []\n    # step 1: loop through both lists until the length of nums1 is greater than nums2\n    while len(nums1) > len(nums2):\n        # add nums2[-1] to diff_nums\n        diff_nums.append(nums2[-1])\n        # remove nums2[-1] from nums2\n        nums2.pop()\n    # step 2: add nums1[i] to diff_nums for i in range of len(nums1)\n    for i in range(len(nums1)):\n        diff_nums.append(nums1[i])\n    # step 3: reverse nums2\n    # the -1 is to keep the last element in nums2\n    nums2.reverse()\n    # step 4: loop through both lists until the length of nums2 is greater than nums1\n    while len(nums2) > len(nums1):\n        # add nums1[i] to diff_nums\n        diff_nums.append(nums1[i])\n        # remove nums1[i] from nums1\n        nums1.pop()\n    # step 5: reverse nums1\n    # the -1 is to keep the last element in nums1\n    nums1.reverse()\n    return diff_nums\n    \ndef sub_list2(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]\n    \n    \ndef sub_sorted_list2(nums1,nums2):\n    '''\n    Write a function that takes two sorted lists and returns their\n    difference in ascending order.\n    '''\n    diff_nums = []\n    # step 1: loop through nums1 until nums1 == nums2\n    while len(nums1) > len(nums2):\n        # add nums2[-1] to diff_nums\n        diff_nums.append(nums2[-1])\n        # remove nums2[-1] from nums2\n        nums2.pop()\n    # step 2: add nums1[i] to diff_nums for i in range of len(nums1)\n    for i in range(len(nums1)):\n        diff_nums.append(nums1[i])\n    # step 3: reverse nums2\n    # the -1 is to keep the last element in nums2\n    nums2.reverse()\n    # step 4: loop through nums1 until nums1 == nums2\n    while len(nums1) > len(nums2):\n        # add nums1[i] to diff_nums\n        diff_nums.append(nums1[i])\n        # remove nums1[i] from nums1\n        nums1.pop()\n    # step 5: reverse nums1\n    # the -1 is to keep the last element in nums1\n    nums1.reverse()\n    return diff_nums\n    \n    \ndef get_moves(nums):\n    '''\n    Write a function that takes in a list of integers and returns a \n    list of the moves needed to get the lowest element.\n    '''\n    # store the min value in a variable\n    min_value = nums[0]\n    # store the position of the min value in a variable\n    min_position = 0\n    # loop through the list\n    for i in range(1, len(nums)):\n        # if the value is greater than the stored value, the min value has changed\n        if nums[i] < min_value:\n            # set the new min value\n            min_value = nums[i]\n            # set the new min position\n            min_position = i\n    # store the min value in a variable\n    min_value = nums[min_position]\n    # store the position of the min value in a variable\n    min_position = min_position + 1\n    # store the min position in a variable\n    min_position = 0\n    # create a new list to return the moves\n    moves = []\n    # loop through the list\n    while min_position!= min_position:\n        # if the value is greater than the stored value, the min value has changed\n        if nums[min_position] == min_value:\n            # add the min position to the moves list\n            moves.append(min_position)\n            # increment the min position\n            min_position = min_position + 1\n        # if the value is not greater than the stored value, the min value has not changed\n        else:\n            # increment the min position\n            min_position = min_position + 1\n    # return the moves list\n    return moves\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sum = []\n    nums1.sort()\n    nums2.sort()\n    i = 0\n    j = 0\n    while i<len(nums1) and j<len(nums2):\n        if nums1[i] < nums2[j]:\n            sum.append(nums1[i])\n            i += 1\n        else:\n            sum.append(nums2[j])\n            j += 1\n    if i == len(nums1):\n        sum += nums2[j:]\n    else:\n        sum += nums1[i:]\n    return sum\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [n1-n2 for n1,n2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    \n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return (nums1 - nums2)\nprint(sub_list([1,2,3,4], [3,4,5,6]))\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    res = []\n    n = len(nums1)\n    m = len(nums2)\n    i = j = 0\n    while i < n and j < m:\n        if nums1[i] < nums2[j]:\n            res.append(nums1[i])\n            i += 1\n        else:\n            res.append(nums2[j])\n            j += 1\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    while n:\n        count += 1\n        n = n//10\n    if count <= len(str(n)):\n        print(n)\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    f = {}\n    for i in str(n):\n        if i not in f:\n            f[i] = 1\n        else:\n            f[i] += 1\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    frequency = {}\n    for i in str(n):\n        if i in frequency:\n            frequency[i] += 1\n        else:\n            frequency[i] = 1\n    for i in frequency:\n        if frequency[i] > i:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    temp = n\n    while temp>0:\n        count = count+1\n        temp = temp//10\n    for i in range(1,10):\n        if count >= i:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if (not type(n) == int): \n        return False\n    if (n < 0): \n        return False\n    if (n == 0): \n        return False\n    d = {} \n    while (n!= 0): \n        d[n%10] = d.get(n%10, 0) + 1\n        n = n//10\n    for key in d: \n        if (key == 0): \n            return False\n        if (d[key] > key): \n            return False\n    return True\ndef gcd(a, b): \n    '''\n    Write a python function that takes in two nonnegative integers a and b and returns their greatest common divisor using Euclid's algorithm.\n    '''\n    if (a == 0 or b == 0): \n        return 0\n    if (a == b): \n        return a \n    if (a > b): \n        return gcd(a-b, b) \n    return gcd(a, b-a)\ndef lcm(a, b): \n    '''\n    Write a python function that takes in two nonnegative integers a and b and returns their least common multiple using Euclid's algorithm.\n    '''\n    if (a == 0 or b == 0): \n        return 0\n    if (a == b): \n        return a\n    if (a > b): \n        return lcm(a-b, b) \n    return lcm(a, b-a)\ndef is_prime(n): \n    '''\n    Write a python function that takes in an integer and returns true if the integer is prime and false otherwise.\n    '''\n    if (n < 2): \n        return False\n    if (n == 2): \n        return True\n    for i in range(2, n): \n        if (n % i == 0): \n            return False\n    return True\ndef find_longest_common_prefix(arr): \n    '''\n    Write a python function that takes in an array of strings and returns the longest common prefix of all the strings in the array.\n    '''\n    s = ''\n    if (len(arr) == 0): \n        return \"\"\n    shortest = min(arr, key = len) \n    for i in range(len(shortest)): \n        if all(s[i] == x[i] for x in arr): \n            s += shortest[i] \n        else: \n            break\n    return s\ndef palindrome(s): \n    '''\n    Write a python function that takes in a string s and returns true if the string is a palindrome and false otherwise.\n    '''\n    if (s == s[::-1]): \n        return True\n    return False\ndef is_power(n): \n    '''\n    Write a python function that takes in an integer and returns true if the integer is a power of 2 and false otherwise.\n    '''\n    if (n == 0): \n        return False\n    if (n == 1): \n        return True\n    if (n & (n-1) == 0): \n        return True\n    return False\ndef is_palindrome(s): \n    '''\n    Write a python function that takes in a string s and returns true if the string is a palindrome and false otherwise.\n    '''\n    if (len(s) < 1): \n        return True\n    if (len(s) == 1): \n        return True\n    if (s == s[::-1]): \n        return True\n    return False\ndef is_prime(n): \n    '''\n    Write a python function that takes in an integer and returns true if the integer is a prime and false otherwise.\n    '''\n    if (n < 2): \n        return False\n    if (n == 2): \n        return True\n    for i in range(2, n): \n        if (n % i == 0): \n            return False\n    return True\ndef is_palindrome(s): \n    '''\n    Write a python function that takes in a string s and returns true if the string is a palindrome and false otherwise.\n    '''\n    if (len(s) < 1): \n        return True\n    if (len(s) == 1): \n        return True\n    if (s == s[::-1]): \n        return True\n    return False\ndef check_valid_parenthesis(s): \n    '''\n    Write a python function that takes in a string s and returns true if the string is a valid parenthesis string and false otherwise.\n    '''\n    if (s == \"\"): \n        return False\n    if (len(s) % 2!= 0): \n        return False\n    stack = [] \n    for i in s: \n        if i in \"([{\": \n            stack.append(i) \n        else: \n            if (len(stack) == 0): \n                return False\n            x = stack.pop() \n            if (i == \")\" and x!= \"(\"): \n                return False\n            if (i == \"]\" and x!= \"[\"): \n                return False\n            if (i == \"}\" and x!= \"{\"): \n                return False\n    if (len(stack)!= 0): \n        return False\n    return True\ndef get_next_smaller_number(n): \n    '''\n    Write a python function that takes in an integer n and returns the next smallest number that is a multiple of n.\n    '''\n    return (n - 1) * n + 1\ndef roman_to_integer(s): \n    '''\n    Write a python function that takes in a Roman numeral string s and returns an integer representing the Roman numeral.\n    '''\n    roman = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n    integer = 0\n    while s:\n        integer += roman[s[0]]\n        s = s[1:]\n    return integer\ndef get_next_smaller_number(n): \n    '''\n    Write a python function that takes in an integer n and returns the next smallest number that is a multiple of n.\n    '''\n    return (n - 1) * n + 1\ndef valid_parentheses(s): \n    '''\n    Write a python function that takes in a string s and returns true if the string is a valid parentheses string and false otherwise.\n    '''\n    stack = [] \n    if (len(s) % 2!= 0): \n        return False\n    for i in range(0, len(s)): \n        if (s[i] == \"(\"): \n            stack.append(s[i]) \n        else: \n            if (len(stack) == 0): \n                return False\n            x = stack.pop() \n            if (x!= \"(\"): \n                return False\n    return len(stack) == 0\ndef is_prime(n): \n    '''\n    Write a python function that takes in an integer n and returns true if the integer is a prime and false otherwise.\n    '''\n    if (n < 2): \n        return False\n    if (n == 2): \n        return True\n    if (n > 2 and n % 2 == 0): \n        return False\n    i = 3\n    while (i * i <= n): \n        if (n % i == 0): \n            return False\n        i += 2\n    return True\ndef is_prime(n): \n    '''\n    Write a python function that takes in an integer n and returns true if the integer is a prime and false otherwise.\n    '''\n    if (n < 2): \n        return False\n    if (n == 2): \n        return True\n    if (n > 2 and n % 2 == 0): \n        return False\n    i = 3\n    while (i * i <= n): \n        if (n % i == 0): \n            return False\n        i += 2\n    return True\ndef prime_factors(n): \n    '''\n    Write a python function that takes in an integer n and returns an array containing the prime factors of the integer.\n    '''\n    if (n == 1): \n        return []\n    prime_factors = [] \n    i = 2\n    while (n % i == 0): \n        prime_factors.append(i"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    import math\n    if n == None:\n        print('Enter a valid integer')\n    else:\n        if n > 0:\n            digits = list(str(n))\n            digits.sort()\n            for i in range(len(digits)):\n                d = int(digits[i])\n                if d < int(digits[i]):\n                    print('Invalid input')\n                    break\n                else:\n                    #print(d)\n                    if d == 0:\n                        return False\n            print('Valid')\n        else:\n            print('Enter a valid integer')\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if type(n) is not int or n < 0: \n        raise TypeError(\"Please enter positive integer\") \n    \n    digits = map(int,str(n))\n    count = 1\n    for i in digits:\n        if i < count:\n            return False\n        count = count * 10\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if not isinstance(n,int):\n        raise TypeError('Only Integer Numbers are accepted')\n    elif n < 0:\n        raise ValueError('Negative numbers are not allowed')\n    elif n == 0:\n        print('number is 0')\n    else:\n        d= {str(i):0 for i in range(10)}\n        while n>0:\n            d[str(n%10)]+=1\n            n=int(n/10)\n        \n        for i in d:\n            if d[i]>=i:\n                raise ValueError('Elements of the digit frequencies is greater than the digit itself')\n        print('The digits frequencies are valid')"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    #example:\n    #frequencies = {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    #validate(78)\n    #print(frequencies) #expected {2:0,3:0,4:0,5:0,6:1,7:0,8:0,9:0}\n    \n    #example 2:\n    #frequencies = {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    #validate(912352354)\n    #print(frequencies) #expected {2:0,3:0,4:0,5:0,6:1,7:0,8:0,9:0}\n    \n    #example 3:\n    #frequencies = {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    #validate(9123523543445543)\n    #print(frequencies) #expected {2:0,3:0,4:0,5:0,6:1,7:0,8:0,9:0}\n    \n    #example 4:\n    #frequencies = {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    #validate(1234)\n    #print(frequencies) #expected {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    \n    #example 5:\n    #frequencies = {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    #validate(12)\n    #print(frequencies) #expected {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    \n    #example 6:\n    #frequencies = {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    #validate(1222)\n    #print(frequencies) #expected {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    \n    #example 7:\n    #frequencies = {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    #validate(112)\n    #print(frequencies) #expected {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    \n    #example 8:\n    #frequencies = {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    #validate(11233)\n    #print(frequencies) #expected {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    \n    #example 9:\n    #frequencies = {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    #validate(12345678901234567890)\n    #print(frequencies) #expected {2:0,3:0,4:0,5:0,6:1,7:0,8:0,9:0}\n    \n    #example 10:\n    #frequencies = {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    #validate(12345678901234567890)\n    #print(frequencies) #expected {2:0,3:0,4:0,5:0,6:1,7:0,8:0,9:0}\n    \n    #example 11:\n    #frequencies = {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    #validate(0)\n    #print(frequencies) #expected {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    \n    #example 12:\n    #frequencies = {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    #validate(0)\n    #print(frequencies) #expected {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    \n    #example 13:\n    #frequencies = {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    #validate(0)\n    #print(frequencies) #expected {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    \n    #example 14:\n    #frequencies = {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    #validate(0)\n    #print(frequencies) #expected {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    \n    #example 15:\n    #frequencies = {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    #validate(0)\n    #print(frequencies) #expected {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    \n    #example 16:\n    #frequencies = {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    #validate(0)\n    #print(frequencies) #expected {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    \n    #example 17:\n    #frequencies = {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    #validate(0)\n    #print(frequencies) #expected {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    \n    #example 18:\n    #frequencies = {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    #validate(0)\n    #print(frequencies) #expected {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    \n    #example 19:\n    #frequencies = {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    #validate(0)\n    #print(frequencies) #expected {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    \n    #example 20:\n    #frequencies = {2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0}\n    #validate(0)\n    #print(frequencies) #expected {2:0,3"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    flag = 0\n    for i in range(10): \n        if n % 10 == i: \n            if n % (i+1) > i:\n                flag = 1\n                break\n    if flag == 1: \n        return 0\n    else: \n        return 1\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list == None:\n        return False\n    if list == []:\n        return False\n    if element not in list:\n        return False\n    if element == list[0]:\n        return True\n    return check_element(list[1:],element)\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return False\n    if list == element:\n        return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i == element:\n            return True\n    return False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    \n    count = 0\n    for i in range(len(list)):\n        if list[i] == element:\n            count +=1\n    if count == len(list):\n        print(True)\n    else:\n        print(False)\n    \n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for element in list:\n        if element!= element:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        list.remove(element)\n    return len(list) == 0\n    \n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 1:\n        return False\n    else:\n        #remove first element in list\n        index = 0\n        while index < len(list):\n            if list[index]!= element:\n                del list[index]\n                index -= 1\n            else:\n                del list[index]\n                index -= 1\n        return len(list) == 1\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # Your code goes here\n    for num in list:\n        if num!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list)==0:\n        return False\n    if element not in list:\n        return False\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    #! we can also use the re.findall() function and see if the pattern matches\n    #! for more information, read the documentation:\n    #! https://docs.python.org/3/library/re.html#re.findall\n    #! https://docs.python.org/3/library/re.html#re.search\n    match_two = re.findall(r\"a{1,2}b\", text)\n    match_three = re.findall(r\"a{1,3}b\", text)\n    return (match_two,match_three)\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # checks for a match\n    if (text.count(\"ab\")>0):\n        return True\n    else:\n        return False\n    \n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # checks for a match\n    if (text.count(\"aabb\")>0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    a = \"abc\"\n    for i in range(len(a)):\n        if a[i] in text:\n            if len(a) == 2:\n                if len(text) <= len(a):\n                    return True\n                else:\n                    return False\n            if len(a) == 3:\n                if len(text) <= len(a):\n                    return True\n                else:\n                    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    check = re.search(r'a(b\\w+)*',text)\n    return check\n    "
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text)<3:\n        return 'Invalid input'\n    elif text[0]=='a':\n        for i in range(1,len(text)):\n            if text[i]=='b':\n                if i<=len(text)-3 and text[i+1]=='b' and text[i+2]=='b':\n                    return 'Valid input'\n                else:\n                    return 'Invalid input'\n    else:\n        return 'Invalid input'\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    count = 0\n    while count < len(text):\n        if text[count] == 'a':\n            count += 1\n            while count < len(text) and text[count] == 'a':\n                count += 1\n        elif text[count] == 'b':\n            count += 1\n            while count < len(text) and text[count] == 'b':\n                count += 1\n        else:\n            count += 1\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return True if re.search('ab', text) else False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r\"ab\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    print(re.match(r'a{2,3}b', text))\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'ab\\w+b')\n    matches = pattern.finditer(text)\n    if not matches:\n        return None\n    return matches\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    max_sub_array_sum = 0\n    max_sub_array_sum_repeated = []\n    sum_of_k_arr = []\n    sum_of_k_arr.clear()\n    for i in range(n):\n        sum_of_k_arr.append(0)\n    for i in range(0, k):\n        sum_of_k_arr[i] = a[i]\n    \n    for i in range(n - k + 1):\n        sum_of_k_arr[i] += a[i + k - 1]\n        for j in range(k):\n            sum_of_k_arr[i + j] += a[i + j]\n            if (max_sub_array_sum < sum_of_k_arr[i + j]):\n                max_sub_array_sum = sum_of_k_arr[i + j]\n                max_sub_array_sum_repeated = a[i : i + k]\n    return max_sub_array_sum, max_sub_array_sum_repeated\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum = 0\n    max = 0\n    l = 0\n    r = 0\n    for i in range(n):\n        if sum < 0:\n            l = i\n            sum = 0\n        sum += a[i]\n        max = max if max > sum else sum\n        if max == k * sum:\n            r = i\n            break\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    '''\n    :type a: List[int]\n    :type n: int\n    :type k: int\n    :rtype: int\n    '''\n    \n    #n = len(a)\n    #a = a + a + a\n    #print(a)\n    #print(n)\n    #for i in range(n):\n        #a = a + a + a\n    #print(a)\n    sum_max = 0\n    sum_min = 0\n    max_sum = 0\n    min_sum = 0\n    \n    for i in range(n):\n        \n        sum_min += a[i]\n        #print(sum_min)\n        if sum_min > k:\n            sum_min = 0\n            min_sum = 0\n            continue\n        if sum_min == k:\n            sum_min = 0\n            min_sum = 0\n            \n        if max_sum < sum_min:\n            max_sum = sum_min\n        if max_sum == sum_min:\n            max_sum = sum_min\n            \n        \n        for j in range(i,n):\n            sum_min += a[j]\n            if sum_min > k:\n                sum_min = 0\n                min_sum = 0\n                break\n            if sum_min == k:\n                sum_min = 0\n                min_sum = 0\n                break\n            if max_sum < sum_min:\n                max_sum = sum_min\n            if max_sum == sum_min:\n                max_sum = sum_min\n            \n            \n    return max_sum\n    \n    \n    #O(n) time complexity\n    '''\n    if n == 0:\n        return 0\n    if k <= 0:\n        return 0\n    if n <= k:\n        return max(a)\n    \n    res = 0\n    curr_sum = 0\n    i = 1\n    while i <= k:\n        curr_sum += a[i-1]\n        i += 1\n    res = max(res, curr_sum)\n    \n    j = k - 1\n    while j >= 1:\n        curr_sum += a[j]\n        j -= 1\n    res = max(res, curr_sum)\n    \n    return res\n    '''\n    #O(n) time complexity\n    '''\n    if n == 0:\n        return 0\n    if k <= 0:\n        return 0\n    if n <= k:\n        return max(a)\n    \n    res = 0\n    curr_sum = 0\n    i = 1\n    while i <= k:\n        curr_sum += a[i-1]\n        i += 1\n    res = max(res, curr_sum)\n    \n    j = k - 1\n    while j >= 1:\n        curr_sum += a[j]\n        j -= 1\n    res = max(res, curr_sum)\n    \n    return res\n    '''\n    \n    '''\n    if n == 0:\n        return 0\n    if k <= 0:\n        return 0\n    if n <= k:\n        return max(a)\n    \n    res = 0\n    curr_sum = 0\n    i = 1\n    while i <= k:\n        curr_sum += a[i-1]\n        i += 1\n    res = max(res, curr_sum)\n    \n    j = k - 1\n    while j >= 1:\n        curr_sum += a[j]\n        j -= 1\n    res = max(res, curr_sum)\n    \n    return res\n    '''\n    '''\n    if n == 0:\n        return 0\n    if k <= 0:\n        return 0\n    if n <= k:\n        return max(a)\n    \n    res = 0\n    curr_sum = 0\n    i = 1\n    while i <= k:\n        curr_sum += a[i-1]\n        i += 1\n    res = max(res, curr_sum)\n    \n    j = k - 1\n    while j >= 1:\n        curr_sum += a[j]\n        j -= 1\n    res = max(res, curr_sum)\n    \n    return res\n    '''\n    '''\n    if n == 0:\n        return 0\n    if k <= 0:\n        return 0\n    if n <= k:\n        return max(a)\n    \n    res = 0\n    curr_sum = 0\n    i = 1\n    while i <= k:\n        curr_sum += a[i-1]\n        i += 1\n    res = max(res, curr_sum)\n    \n    j = k - 1\n    while j >= 1:\n        curr_sum += a[j]\n        j -= 1\n    res = max(res, curr_sum)\n    \n    return res\n    '''\n    '''\n    if n == 0:\n        return 0\n    if k <= 0:\n        return 0\n    if n <= k:\n        return max(a)\n    \n    res = 0\n    curr_sum = 0\n    i = 1\n    while i <= k:\n        curr_sum += a[i-1]\n        i += 1\n    res = max(res, curr_sum)\n    \n    j = k - 1\n    while j >= 1:\n        curr_sum += a[j]\n        j -= 1\n    res = max(res, curr_sum)\n    \n    return res\n    '''\n    '''\n    if n == 0:\n        return 0\n    if k <= 0:\n        return 0\n    if n <= k:\n        return max(a)\n    \n    res = 0\n    curr_sum = 0\n    i = 1\n    while i <= k:\n        curr_sum += a[i-1]\n        i += 1\n    res = max(res, curr_sum)\n    \n    j = k - 1\n    while j >= 1:\n        curr_sum += a[j]\n        j -= 1\n    res = max(res, curr_sum)\n    \n    return res\n    '''\n    '''\n    if n == 0:\n        return 0\n    if k <= 0:\n        return 0\n    if n <= k:\n        return max(a)\n    \n    res = 0\n    curr_sum = 0\n    i = 1\n    while i <= k:\n        curr_sum += a[i-1]\n        i += 1\n    res = max(res, curr_sum)\n    \n    j = k - 1\n    while j >= 1:\n        curr_sum += a[j]\n        j -= 1\n    res = max(res, curr_sum)\n    \n    return res\n    '''\n    '''\n    if n == 0:\n        return 0\n    if k <= 0:\n        return 0\n    if n <= k:\n        return max(a)\n    \n    res = 0\n    curr_sum = 0\n    i = 1\n    while i <= k:\n        curr_sum += a[i-1]\n        i += 1\n    res = max(res, curr_sum)\n    \n    j = k - 1\n    while j >= 1:\n        curr_sum += a[j]\n        j -= 1\n    res = max(res, curr_sum)\n    \n    return res\n    '''\n    '''\n    if n == 0:\n        return 0\n    if k <= 0:\n        return 0\n    if n <= k:\n        return max(a)\n    \n    res = 0\n    curr_sum = 0\n    i = 1\n    while i <= k:\n        curr_sum += a[i-1]\n        i += 1\n    res = max(res, curr_sum)\n    \n    j = k - 1\n    while j >= 1:\n        curr_sum += a[j]\n        j -= 1\n    res = max(res, curr_sum)\n    \n    return res\n    '''\n    '''\n    if n == 0:\n        return 0\n    if k <= 0:\n        return 0\n    if n <= k:\n        return max(a)\n    \n    res = 0\n    curr_sum = 0\n    i "
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # # Naive Approach - O(n*k)\n    # # Kadane's Algorithm\n    # for i in range(n):\n    #     for j in range(i, n):\n    #         s = 0\n    #         for k in range(i, j+1):\n    #             s += a[k]\n    #             if s > k:\n    #                 break\n    #         if s == k:\n    #             return s\n    # return -1\n    \n    # # Constant Space - O(1)\n    # return max(a[i: i+k])*k\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    \n    max_sum = -sys.maxsize - 1\n    max_start = 0\n    \n    for i in range(n):\n        \n        sum_temp = 0\n        start = i\n        \n        for j in range(k):\n            sum_temp += a[start]\n            start += 1\n            \n        if sum_temp > max_sum:\n            max_sum = sum_temp\n            max_start = start\n            \n    \n    return max_sum, max_start\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    for i in range(n-k+1):\n        s = 0\n        for j in range(i, i+k):\n            s += a[j]\n        if s > max_sum:\n            max_sum = s\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum_arr = sum(a)\n    if k > n:\n        return sum_arr\n    res = sum(a)\n    \n    for i in range(n):\n        if i < k-1:\n            res = max(res, sum(a[i:i+k]))\n        else:\n            res = max(res, sum(a[i:i+k-1]))\n            \n    return res\n    \n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sub_array = 0\n    curr_max_sum = 0\n    curr_max_sum_with_k_repeats = 0\n    max_with_k_repeats = 0\n    for i in range(n):\n        curr_max_sum = max(a[i], curr_max_sum + a[i])\n        max_sub_array = max(curr_max_sum, max_sub_array)\n        curr_max_sum_with_k_repeats = max(curr_max_sum_with_k_repeats, curr_max_sum)\n        max_with_k_repeats = max(curr_max_sum_with_k_repeats, max_with_k_repeats)\n        if curr_max_sum == max_with_k_repeats:\n            break\n    print(max_sub_array)\n    return max_sub_array\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    a = [0] + a + [0]\n    sums = []\n    for i in range(2, len(a)):\n        sums.append(a[i] + max(sums[-1], a[i] - sums[i-1]))\n    return max(sums) - k*sums[-1]\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    sum = 0\n    for i in range(0, n):\n        sum = sum + a[i]\n    max_sum = sum\n    for j in range(1, k+1):\n        sum = 0\n        for i in range(n-j, n):\n            sum = sum + a[i]\n        if sum > max_sum:\n            max_sum = sum\n    print(max_sum)\n    \n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #Solution 1\n    #sum = 0\n    #for i in range(0, n):\n        #if(i%2==0):\n            #sum = sum + (i*i)\n    #return sum\n    #Solution 2\n    #return sum(i*i for i in range(0, n) if i%2==0)\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i <= n:\n        sum += i**2\n        i += 1\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_sq = 0\n    for i in range(n):\n        if i%2==0:\n            sum_sq += i**2\n    return sum_sq\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    x=0\n    for i in range(1,n):\n        if i%2==0:\n            x=x+i**2\n    return x    \n    \n    '''\n    Write a python function takes in a number n and returns the sum of squares of first n odd natural numbers.\n    '''\n    \n    \ndef SumOfSquares(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n odd natural numbers.\n    '''\n    x=0\n    for i in range(1,n):\n        if i%2==1:\n            x=x+i**2\n    return x    \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_square = 0\n    for i in range(n):\n        if i%2 == 0:\n            sum_square += i**2\n    return sum_square\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    squares = 0\n    for i in range(n):\n        if i % 2 == 0:\n            squares = squares + i ** 2\n    return squares\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    # To avoid the error in the calculation \n    if n < 0:\n        print(\"Enter a positive number\")\n        return None\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    sum_squares = 0\n    for i in range(1,n+1):\n        if i%2 ==0:\n            sum_squares += i**2\n    return sum_squares\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([i**2 for i in range(n) if i % 2 == 0])\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for sub_list in list1:\n        if len(sub_list) > max_length:\n            max_length = len(sub_list)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    l = list1[0]\n    for i in range(1,len(list1)):\n        if len(l)<len(list1[i]):\n            l = list1[i]\n    return l\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    #Maxlength = 0\n    #for i in range(0,len(list1)):\n        #if len(list1[i])>Maxlength:\n            #Maxlength = len(list1[i])\n    #return Maxlength\n    return max([len(i) for i in list1])\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max([len(item) for item in list1])\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for element in list1:\n        if len(element) > max_length:\n            max_length = len(element)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    new_list = list(map(len, list1))\n    max_length = max(new_list)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for list_item in list1:\n        if len(list_item) > max_len:\n            max_len = len(list_item)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = 0\n    for item in list1:\n        if len(item) > max:\n            max = len(item)\n    return max\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if len(list1) == 0:\n        return False\n    else:\n        max_len = 0\n        for i in list1:\n            if len(i) > max_len:\n                max_len = len(i)\n        return max_len\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for i in range(n)] for j in range(k+1)]\n    \n    for i in range(n):\n        dp[1][i] = 1\n    \n    for i in range(2, k+1):\n        for j in range(n):\n            dp[i][j] = dp[i][j-1] + dp[i-1][j-1]\n    \n    return dp[k][n-1]\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if(n==0):\n        return 0\n    if(n<=2):\n        return 1\n    if(n>2 and n<=5):\n        return 2\n    if(n>5):\n        return 2\n    \n    return count_no_of_ways(n-2, k) + count_no_of_ways(n-1, k) + count_no_of_ways(n-3, k) + count_no_of_ways(n-5, k) + count_no_of_ways(n-6, k) + count_no_of_ways(n-7, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for i in range(n+1)] for j in range(k+1)]\n    #print(dp)\n    for i in range(1, k+1):\n        for j in range(1, n+1):\n            if i == 1:\n                dp[i][j] = 1\n            else:\n                if j == 1:\n                    dp[i][j] = i\n                else:\n                    if j == 2:\n                        dp[i][j] = i\n                    else:\n                        dp[i][j] = dp[i][j-1] + dp[i-1][j-1]\n    return dp[k][n]\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n <= k:\n        return 1\n    \n    if k == 1:\n        return n\n    \n    if n == k:\n        return 1\n    \n    ways = count_no_of_ways(n-2, k) + count_no_of_ways(n-2, k-1)\n    return ways\n    \n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    if n <= 0 or k <= 0: \n        return 0\n        \n    # Since we need to paint only the leftmost and rightmost columns of the \n    # posts, we can create the matrices to solve this problem for the leftmost \n    # and rightmost columns separately. \n    ways = [[0 for i in range(k + 1)] for j in range(n + 1)] \n    \n    for i in range(1, n + 1): \n        ways[i][0] = ways[i - 1][0] + 1\n    \n    for i in range(1, n): \n        for j in range(1, k + 1): \n            ways[i][j] = (ways[i - 1][j] + ways[i - 1][j - 1]) \n            \n    return ways[n][k] \n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 0 or k < 0:\n        return 0\n    dp = [[0]*k for _ in range(n)]\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    '''\n    Solution: Use Dynamic Programming\n    1.  use a helper function which recurisvely counts no. of ways to paint given n posts with k colors.\n    2.  then count the number of ways where at most 2 adjacent posts have the same color.\n    '''\n    # if k == 1:\n    #     return n-1\n    # if k == 2:\n    #     return n*(n-1)\n    # else:\n    #     if k > 2:\n    #         return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k)\n    #     else:\n    #         return count_no_of_ways(n-1, k)\n    \n    # 1.  use a helper function which recurisvely counts no. of ways to paint given n posts with k colors.\n    if k == 1:\n        return n-1\n    if k == 2:\n        return n*(n-1)\n    else:\n        return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def count_ways(n, k, j):\n        if n==1:\n            return 1\n        if j==0:\n            return 0\n        return (count_ways(n-1, k, j) + count_ways(n-1, k, j-1))%1000000007\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = 0\n    if k==0 or k==n or n==0 or n==1:\n        ways = 1\n    else:\n        for i in range(1,n-1):\n            if (k-i)%2==0:\n                ways += count_no_of_ways(n-1,k-i)\n        for i in range(1,n-1):\n            if (k-i)%2!=0:\n                ways += count_no_of_ways(n-1,k-i)\n    return ways\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for _ in range(k)] for _ in range(n+1)]\n    for i in range(n+1):\n        for j in range(k):\n            if j == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i][j-1] + dp[i-1][j-1]\n    return dp[n][k-1]\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n    \nn = 2\nm = 3\nprint(find(n,m)) # Output: 1\nprint(find(1,1)) # Output: 0\nprint(find(4,4)) # Output: 0\nprint(find(9,9)) # Output: 1\nprint(find(10,10)) # Output: 2\nprint(find(1,100000000)) # Output: 0\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n<m:\n        return -1\n    # if n==m:\n    #     return 0\n    # else:\n    #     quotient = 0\n    #     remainder = 0\n    #     while n >= m:\n    #         quotient = quotient + 1\n    #         remainder = n%m\n    #         if remainder == 0:\n    #             return quotient\n    #         n = n//m\n    # return -1\n    while n>=m:\n        if n%m == 0:\n            return int(n/m)\n        else:\n            n = n-1\n    return -1\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return 'Error: Divide by zero.'\n    else:\n        return int(n/m)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m==0:\n        return 'Enter a valid input'\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n==-1:\n        return -1\n    if n<0 and m>0:\n        return -find(abs(n),m)\n    if n>0 and m<0:\n        return find(n,abs(m))\n    return find(n//m,m)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if(n == 0):\n        return 0\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return 0\n    q = n // m\n    print(q)\n    return q\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0:\n        return 0\n    return (n//m)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+(h/2)**2\ndef otherside_parallelogram(w,h):\n    '''\n    Write a function to find the third side of a parallelogram.\n    '''\n    return w*h\ndef otherside_triangle(a,b,c):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    p= ((a**2 + b**2 - c**2) / 2)**0.5\n    return p*2\ndef otherside_rectangle(w,h):\n    '''\n    Write a function to find the third side of a rectangle.\n    '''\n    return w*h\ndef otherside_square(w):\n    '''\n    Write a function to find the third side of a square.\n    '''\n    return w**2\ndef area_of_circle(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    pi=3.142\n    return pi*radius**2\ndef area_of_rectangle(w,h):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return w*h\ndef area_of_square(w):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return w**2\ndef area_of_triangle(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef area_of_square(w):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return w**2\ndef area_of_parallelogram(w,h):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return w*h\ndef area_of_triangle(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef area_of_rectangle(w,h):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return w*h\ndef area_of_rectangle(w,h):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return w*h\ndef area_of_circle(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    pi=3.142\n    return pi*radius**2\ndef area_of_square(w):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return w**2\ndef area_of_circle(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    pi=3.142\n    return pi*radius**2\ndef area_of_triangle(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef area_of_circle(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    pi=3.142\n    return pi*radius**2\ndef area_of_square(w):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return w**2\ndef area_of_triangle(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef area_of_rectangle(w,h):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return w*h\ndef area_of_square(w):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return w**2\ndef area_of_circle(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    pi=3.142\n    return pi*radius**2\ndef area_of_triangle(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef area_of_square(w):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return w**2\ndef area_of_triangle(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef area_of_circle(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    pi=3.142\n    return pi*radius**2\ndef area_of_square(w):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return w**2\ndef area_of_circle(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    pi=3.142\n    return pi*radius**2\ndef area_of_triangle(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef area_of_square(w):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return w**2\ndef area_of_square(w):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return w**2\ndef area_of_square(w):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return w**2\ndef area_of_triangle(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef area_of_square(w):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return w**2\ndef area_of_square(w):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return w**2\ndef area_of_triangle(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef area_of_square(w):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return w**2\ndef area_of_rectangle(w,h):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return w*h\ndef area_of_triangle(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef area_of_triangle(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    s=(a+b+"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w == 0 or h == 0:\n        return 0\n    else:\n        return math.sqrt(w**2 + h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w*w + h*h)/2\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    \n    return math.sqrt(w**2 + h**2 - 2*h*w*math.cos(math.radians(30)))\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w*w + h*h)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*h*math.sqrt(3)/(2*math.tan(math.pi/3))\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    import math\n    return math.sqrt((w**2)+(h**2))\n    \ndef otherside_square(side1, side2):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (side1**2 + side2**2)**0.5\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w == 0 or h == 0:\n        return None\n    else:\n        return w**2 + h**2\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #Assume we have:\n    #width is the length of one of the two sides\n    #height is the length of the hypotenuse\n    #return the length of the hypotenuse\n    #w = 6\n    #h = 5\n    return math.sqrt(w**2 + h**2 - 2*w*h*math.cos(math.pi/6))\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    try:\n        if w>0 and h>0:\n            return math.sqrt(w**2+h**2)/2\n        else:\n            return \"Invalid input\"\n    except:\n        return \"Invalid input\"\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val=0\n    for i in listval:\n        if max_val < i:\n            max_val=i\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = 0\n    for i in range(len(listval)):\n        if listval[i] > max_value:\n            max_value = listval[i]\n    return max_value\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    result = None\n    for val in listval:\n        if result == None or val > result:\n            result = val\n    return result\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Your code here\n    max_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_value:\n            max_value = listval[i]\n    return max_value\n    \n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    mx = listval[0]\n    for i in listval:\n        if i > mx:\n            mx = i\n    return mx\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in listval:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    max_val = listval[0]\n    for val in listval:\n        if max_val < val:\n            max_val = val\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # print(listval)\n    # for i in range(len(listval)):\n    #     if listval[i] > max_val:\n    #         max_val = listval[i]\n    # return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for i in listval:\n        if i > max_num:\n            max_num = i\n    return max_num\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if(len(listval)==0):\n        return False\n    else:\n        max_val = listval[0]\n        for i in listval:\n            if max_val<i:\n                max_val = i\n    return max_val\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_divisors = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_divisors += i\n    return sum_divisors\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_list = []\n    for i in range(1,number):\n        if number % i == 0:\n            divisor_list.append(i)\n    return sum(divisor_list)\nprint(sum_div(100)"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    num_of_div = 0\n    if number < 0:\n        return 0\n    else:\n        for x in range(1, number+1):\n            if number % x == 0:\n                num_of_div += x\n        return num_of_div\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    n = 1\n    while(number > 0):\n        if number % n == 0:\n            number = number / n\n            if number == 1:\n                n = 1\n            else:\n                n += 1\n        else:\n            n += 1\n    return n\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 1\n    for i in range(1, number):\n        if number%i == 0:\n            div_sum += i\n    return div_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 1\n    for i in range(1, number):\n        if number%i == 0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1,number):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    i = 1\n    total = 0\n    while i * i <= number:\n        if number % i == 0:\n            total += i\n        i += 1\n    return total + number\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    print(\"No. of inversions in given array is : \", inv_count)\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return 0\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) == 1:\n        return 0\n    \n    '''\n    get the middle element and swap it to the end\n    (same as merge sort)\n    '''\n    middle = len(arr)//2\n    right_half = arr[middle:]\n    left_half = arr[:middle]\n    \n    '''\n    recur for left and right array\n    '''\n    get_Inv_Count(left_half)\n    get_Inv_Count(right_half)\n    \n    '''\n    left_half and right_half already sorted, \n    now merge the two lists\n    '''\n    i = 0\n    j = 0\n    k = 0\n    \n    while i < len(left_half) and j < len(right_half):\n        if left_half[i] < right_half[j]:\n            arr[k] = left_half[i]\n            i+=1\n        else:\n            arr[k] = right_half[j]\n            j+=1\n        k+=1\n    \n    '''\n    now check if i is still going to go further\n    '''\n    while i < len(left_half):\n        arr[k] = left_half[i]\n        i+=1\n        k+=1\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) > 1:\n        mid = len(arr)//2\n        L = arr[:mid]\n        R = arr[mid:]\n        get_Inv_Count(L)\n        get_Inv_Count(R)\n        i = j = k = 0\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n    else:\n        return arr\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def check_inv(l):\n        if len(l)<2:\n            return 0\n        pivot = l[len(l)-1]\n        l.pop()\n        i=0\n        while i<len(l):\n            if pivot<l[i]:\n                l.insert(i,pivot)\n                break\n            i+=1\n        if i == len(l):\n            l.insert(0,pivot)\n        return check_inv(l)\n    return check_inv(arr)\nprint(get_Inv_Count([10, 20, 30, 4, 5]))\nprint(get_Inv_Count([1, 3, 5, 2]))\nprint(get_Inv_Count([1, 1]))\nprint(get_Inv_Count([1]))\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    print(arr)\n    l_inversion_count = 0\n    l_temp_arr = arr\n    l_temp_arr.sort()\n    for i in range(1, len(l_temp_arr)):\n        if(l_temp_arr[i] < l_temp_arr[i-1]):\n            l_inversion_count = l_inversion_count + 1\n    return l_inversion_count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return Inv_Count(arr, 0, len(arr) - 1)\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return count\n    count = count + (arr[0] * get_Inv_Count(arr[1:]))\n    count = count + (arr[-1] * get_Inv_Count(arr[:-1]))\n    for i in range(1, n-1):\n        if arr[i] > arr[i+1]:\n            count = count + 1\n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    print(arr)\n    inversions = 0\n    if len(arr) == 1:\n        return 0\n    \n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inversions += 1\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) < 2: \n        return 0\n    if len(arr) == 2: \n        if arr[0] > arr[1]: \n            return 1\n        else: \n            return 0\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    \n    if len(list1) == 0:\n        return []\n    \n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for i in list1:\n        if type(i) == list:\n            result += flatten_list(i)\n        else:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    \n    if isinstance(list1, (list,)):\n        return list1\n    \n    else:\n        return []\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [item for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if isinstance(list1,list) == False:\n        return list1\n    else:\n        list_to_return = []\n        for i in list1:\n            if isinstance(i,list) == False:\n                list_to_return.append(i)\n            else:\n                list_to_return.extend(flatten_list(i))\n        return list_to_return\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for sublist in list1:\n        for element in sublist:\n            flat_list.append(element)\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for sublist in list1:\n        if isinstance(sublist, list):\n            flattened_list.extend(flatten_list(sublist))\n        else:\n            flattened_list.append(sublist)\n    return flattened_list\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 == None:\n        return None\n    elif type(list1) == str:\n        return list1\n    else:\n        return list1[0] + flatten_list(list1[1])\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    final_list = []\n    for i in list1:\n        if isinstance(i, list):\n            final_list.extend(flatten_list(i))\n        else:\n            final_list.append(i)\n    return final_list\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    if len(stdata)==0:\n        return (0,0)\n    max_sum=0\n    max_count=0\n    for i in stdata:\n        if i[1]>max_sum:\n            max_sum=i[1]\n            max_count=1\n        elif i[1]==max_sum:\n            max_count+=1\n    return (max_sum,max_count)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Your code here\n    count = defaultdict(int)\n    max_count = 0\n    for item in stdata:\n        count[item[1]] += item[0]\n        if count[item[1]] > max_count:\n            max_count = count[item[1]]\n    return max_count\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #dict_agg = defaultdict(lambda: 0)\n    dict_agg = {}\n    for val in stdata:\n        if val[0] in dict_agg.keys():\n            dict_agg[val[0]] += val[1]\n        else:\n            dict_agg[val[0]] = val[1]\n    return max(dict_agg.items(), key=lambda x: x[1])[0]\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    dic=defaultdict(lambda:defaultdict(lambda:0))\n    dic_i=defaultdict(lambda:defaultdict(lambda:0))\n    for elem in stdata:\n        if elem[0]==0:\n            dic[elem[1]][elem[2]]=elem[3]\n        else:\n            dic_i[elem[2]][elem[1]]=elem[3]\n    max_agg=0\n    for i in dic_i:\n        dic_i[i]['sum']=sum(dic_i[i].values())\n        max_agg=max(max_agg,dic_i[i]['sum'])\n    for i in dic:\n        dic[i]['sum']=sum(dic[i].values())\n        max_agg=max(max_agg,dic[i]['sum'])\n    return max_agg\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    maxagg = max(stdata)\n    maxagg1 = (0, 0)\n    for i in stdata:\n        if i[0] == maxagg[0]:\n            if i[1] > maxagg[1]:\n                maxagg = i\n                maxagg1 = maxagg\n        else:\n            maxagg = i\n            maxagg1 = maxagg\n    return maxagg1\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    print('\\n\\t\\t**********\\t\\t\\tMax Aggregate\\t\\t\\t**********')\n    #Write your logic here\n    first = 0\n    last = 0\n    max_agg = float('-inf')\n    for i in range(len(stdata)):\n        # print('\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t', i, stdata[i])\n        first += stdata[i][0]\n        last += stdata[i][1]\n        max_agg = max(max_agg, last - first)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = max(stdata, key=lambda x: x[1] - x[0] + x[2])\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Your code here\n    a=defaultdict(int)\n    for i,j in stdata:\n        a[i]+=j\n    m=max(a.values())\n    return (max(a.keys(), key=lambda x: a[x]))\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    min_val = []\n    max_val = []\n    \n    for i in range(0,len(stdata)):\n        if stdata[i][0]<stdata[i][1]:\n            min_val.append(stdata[i][0])\n        else:\n            min_val.append(stdata[i][1])\n            \n        if stdata[i][0]>stdata[i][1]:\n            max_val.append(stdata[i][1])\n        else:\n            max_val.append(stdata[i][0])\n            \n    #print(min_val)\n    #print(max_val)\n    \n    min_val_sum = sum(min_val)\n    max_val_sum = sum(max_val)\n    \n    if min_val_sum<max_val_sum:\n        return max_val_sum\n    else:\n        return min_val_sum\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    n = len(stdata)\n    max_sum = 0\n    max_idx = 0\n    max_val = None\n    for i in range(n):\n        s = sum(stdata[i])\n        if s > max_sum:\n            max_sum = s\n            max_idx = i\n            max_val = stdata[i]\n    return max_idx, max_val, max_sum\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    x=0\n    for i in range(0,n+1):\n        x=x+2**i\n    count=0\n    for i in range(0,x+1):\n        j=i\n        sum=0\n        while(j>0):\n            sum=sum+j%10\n            j=j//10\n        if(sum==i):\n            count=count+1\n    return count\nn=4\nprint(count_binary_seq(n))"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    res = 0\n    s = 0\n    \n    for i in range(0,2**n):\n        s = 0\n        for j in range(n):\n            s = s+((i>>j) & 1)\n        res = res + s\n    return res\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    assert n >= 1\n    counter = 0\n    for i in range(2**n):\n        arr = list(bin(i)[2:].zfill(n))\n        # print(arr)\n        if int(arr[0]) == int(arr[n-1]):\n            counter += 1\n    return counter\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    ans = 0\n    for i in range(n):\n        ans += (2**i)\n    return ans\n    \nprint(count_binary_seq(3))"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    total = 0\n    i = 0\n    while(i <= 2**n):\n        binary_seq = bin(i)[2:]\n        for j in range(len(binary_seq)):\n            if binary_seq[j] == \"0\":\n                binary_seq = binary_seq[j:]\n                break\n        total += 1\n        i += 1\n    return total\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 0\n    count = 0\n    for i in range(2**n):\n        a = 0\n        for j in range(n):\n            if i >> j & 1:\n                a += 2**(n-j-1)\n        if a == n-1:\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # p = 2n\n    # q = 2n\n    # if p = 2n+1, we have 0 and 1, p-1=n\n    # if q = 2n+1, we have 0, 1, 2,..., 2^n-1\n    # f(p, q) = f(p-1, q) + f(p-2, q)\n    # f(p, q) = f(p-2, q) + f(p-2, q) + f(p-3, q) + f(p-3, q) +...\n    # f(p, q) = f(p-2, q) + f(p-2, q) + f(p-3, q) + f(p-3, q) +...\n    # f(p, q) = f(p-3, q) + f(p-3, q) + f(p-4, q) + f(p-4, q) +...\n    # f(p, q) = f(p-4, q) + f(p-4, q) + f(p-5, q) + f(p-5, q) +...\n    # f(p, q) = f(p-5, q) + f(p-5, q) + f(p-6, q) + f(p-6, q) +...\n    # f(p, q) = f(p-6, q) + f(p-6, q) + f(p-7, q) + f(p-7, q) +...\n    # f(p, q) = f(p-7, q) + f(p-7, q) + f(p-8, q) + f(p-8, q) +...\n    # f(p, q) = f(p-8, q) + f(p-8, q) + f(p-9, q) + f(p-9, q) +...\n    # f(p, q) = f(p-9, q) + f(p-9, q) + f(p-10, q) + f(p-10, q) +...\n    # f(p, q) = f(p-10, q) + f(p-10, q) + f(p-11, q) + f(p-11, q) +...\n    # f(p, q) = f(p-11, q) + f(p-11, q) + f(p-12, q) + f(p-12, q) +...\n    # f(p, q) = f(p-12, q) + f(p-12, q) + f(p-13, q) + f(p-13, q) +...\n    # f(p, q) = f(p-13, q) + f(p-13, q) + f(p-14, q) + f(p-14, q) +...\n    # f(p, q) = f(p-14, q) + f(p-14, q) + f(p-15, q) + f(p-15, q) +...\n    # f(p, q) = f(p-15, q) + f(p-15, q) + f(p-16, q) + f(p-16, q) +...\n    # f(p, q) = f(p-16, q) + f(p-16, q) + f(p-17, q) + f(p-17, q) +...\n    # f(p, q) = f(p-17, q) + f(p-17, q) + f(p-18, q) + f(p-18, q) +...\n    # f(p, q) = f(p-18, q) + f(p-18, q) + f(p-19, q) + f(p-19, q) +...\n    # f(p, q) = f(p-19, q) + f(p-19, q) + f(p-20, q) + f(p-20, q) +...\n    # f(p, q) = f(p-20, q) + f(p-20, q) + f(p-21, q) + f(p-21, q) +...\n    # f(p, q) = f(p-21, q) + f(p-21, q) + f(p-22, q) + f(p-22, q) +...\n    # f(p, q) = f(p-22, q) + f(p-22, q) + f(p-23, q) + f(p-23, q) +...\n    # f(p, q) = f(p-23, q) + f(p-23, q) + f(p-24, q) + f(p-24, q) +...\n    # f(p, q) = f(p-24, q) + f(p-24, q) + f(p-25, q) + f(p-25, q) +...\n    # f(p, q) = f(p-25, q) + f(p-25, q) + f(p-26, q) + f(p-26, q) +...\n    # f(p, q) = f(p-26, q) + f(p-26, q) + f(p-27, q) + f(p-27, q) +...\n    # f(p, q) = f(p-27, q) + f(p-27, q) + f(p-28, q) + f(p-28, q) +...\n    # f(p, q) = f(p-28, q) + f(p-28, q) + f(p-29, q) + f(p-29, q) +...\n    # f(p, q) = f(p-29, q) + f(p-29, q) + f(p-30, q) + f(p-30, q) +...\n    # f(p, q) = f(p-30, q) + f(p-30, q) + f(p-31, q) + f(p-31, q) +...\n    # f(p, q) = f(p-31, q) + f(p-31, q) + f(p-32, q) + f(p-32, q) +...\n    # f(p, q) = f(p-32, q) + f(p-32, q) + f(p-33, q) + f(p-33, q) +...\n    # f(p, q) = f(p-33, q) + f(p-33, q) + f(p-34, q) + f(p-34, q) +...\n    # f(p, q) = f(p-34, q) + f(p-34, q) + f(p-35, q) + f(p-35, q) +...\n    # f(p, q) = f(p-35, q) + f(p-35, q) + f(p-36, q) + f(p-36, q) +...\n    # f(p, q) = f(p-36, q) + f(p-36, q) + f(p-37, q) + f(p-37, q) +...\n    # f(p, q) = f(p-37, q) + f(p-37, q) + f(p-38, q) + f(p-38, q) +...\n    # f(p, q) = f(p-38, q) + f(p-38, q) + f(p-39, q) + f(p-39, q) +...\n    # f(p, q) = f(p-39, q) + f(p-39, q) + f(p-40, q) + f(p-40, q) +...\n    # f(p, q) = f(p-40, q) + f(p-40, q) + f(p-41, q) + f(p-41, q) +...\n    # f(p, q) = f(p-41, q) + f(p-41, q) "
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # code here\n    if n == 1:\n        return 1\n    else:\n        return (count_binary_seq(n-1) * 2) + 1\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def bin_seq(n):\n        num = 0\n        for i in range(1<<n):\n            seq = (bin(i)[2:])\n            seq = \"0\"*(n-len(seq))+seq\n            num += int(seq,2)\n        return num\n    if n == 0:\n        return 1\n    return (count_binary_seq(n-1) + bin_seq(n))\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_of_sequence_sum_match(n, num_of_seq): \n        # base case \n        if n == 0: \n            return 1\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    assert isinstance(d, dict), 'Input must be a dictionary.'\n    depth = 0\n    for v in d.values():\n        if isinstance(v, dict):\n            depth += 1\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    def dict_depth_helper(d, level):\n        nonlocal max_depth\n        for key, value in d.items():\n            if isinstance(value, dict):\n                if level == 0:\n                    max_depth += 1\n                dict_depth_helper(value, level + 1)\n    dict_depth_helper(d, 0)\n    return max_depth\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not d: return 0\n    return max([dict_depth(v) for k, v in d.items()]) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key in d:\n        if isinstance(d[key],dict):\n            cur_depth = 1 + dict_depth(d[key])\n        else:\n            cur_depth = 1\n        if max_depth < cur_depth:\n            max_depth = cur_depth\n    return max_depth\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max([1]+[1+dict_depth(subdict) for subdict in d.values()]) if d else 0\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Your code here\n    if isinstance(d, dict):\n        return 1 + max(map(dict_depth, d.items()))\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        raise TypeError\n    return len(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            curr_depth = 1 + dict_depth(d[key])\n        else:\n            curr_depth = 1\n        if max_depth < curr_depth:\n            max_depth = curr_depth\n    return max_depth\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def helper(d,depth):\n        if not isinstance(d,dict):\n            return depth\n        else:\n            return max(helper(d[key],depth+1) for key in d)\n    return helper(d,1)\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return max([dict_depth(v) for v in d.values()]) + 1\n    else:\n        return 0\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(0,rotations) :\n        arr[index] = arr[index] + arr[index+1]\n        index += 1\n    return arr[index]\n    \nif __name__ == '__main__':\n    \n    arr = [10, 12, 13, 15]\n    ranges = [[1,3],[4,6],[1,8],[4,6]]\n    rotations = 4\n    index = 0\n    \n    print(find_Element(arr,ranges,rotations,index))\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # if index is greater than size of array, then return -1\n    if(index >= len(arr)) :\n        return -1\n    # if we are on the last element of the array, then return -1\n    elif(index == len(arr) -1) :\n        return -1\n    # if we are on the first element of the array, then return -1\n    elif(index == 0) :\n        return -1\n    else :\n        return arr[index] + (ranges * rotations)\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index < ranges : \n        rotations = rotations//2\n        find_Element(arr,ranges,rotations,index+1)\n    else :\n        return arr[index - ranges]\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)):\n        if index == arr[i]:\n            return i, index, rotations, ranges\n    if index < arr[0]:\n        return 0, index, rotations, ranges\n    else:\n        if index > arr[-1]:\n            return len(arr) - 1, index, rotations, ranges\n    i = 0\n    while i < len(arr):\n        if index == arr[i]:\n            return i, index, rotations, ranges\n        i = i + rotations\n    return len(arr) - 1, index, rotations, ranges\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    i=0\n    while i < len(arr):\n        if i == index:\n            return arr[i]\n        i += 1\n    if index == -1:\n        return -1\n    return find_Element(arr,ranges,rotations,index-1)\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(rotations) :\n        arr = rotate(arr)\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(ranges) :\n        arr[i] = arr[i] + rotations\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    count = 0\n    for i in range(rotations) :\n        if arr[index+count] == 0 :\n            count += 1\n        elif arr[index+count] == 1 :\n            index += count\n            count += 1\n        elif arr[index+count] == 2 :\n            index += count\n            count += 1\n        elif arr[index+count] == 3 :\n            index += count\n            count += 1\n        elif arr[index+count] == 4 :\n            index += count\n            count += 1\n        elif arr[index+count] == 5 :\n            index += count\n            count += 1\n        elif arr[index+count] == 6 :\n            index += count\n            count += 1\n        elif arr[index+count] == 7 :\n            index += count\n            count += 1\n    return index\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    result = -1\n    if(index>0) :\n        result = find_Element(arr,ranges,rotations-1,index-1)\n        if(index>=ranges[rotations-1] and index < ranges[rotations-1]+ranges[rotations]) :\n            return result\n        elif(index>=ranges[rotations-1]+ranges[rotations] and index < ranges[rotations-1]+ranges[rotations]+ranges[rotations+1]) :\n            return result + (ranges[rotations+1]-ranges[rotations])\n        else :\n            return result + ranges[rotations+1]\n    else :\n        return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotations = rotations%len(arr)\n    if index < rotations :\n        return arr[index]\n    else :\n        index = index - rotations\n        return arr[index]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in words:\n        if i[0] == 'p':\n            return i, words.index(i)+1\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = words[0].lower()\n    p2 = words[1].lower()\n    if p == 'p':\n        if p2 == 'p':\n            return words[0],words[1]\n        elif p2 == 'p':\n            return words[1]\n    elif p == 'p':\n        if p2 == 'p':\n            return words[0],words[1]\n        elif p2 == 'p':\n            return words[0]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if word[0].lower() == 'p':\n            result.append(word)\n    return result\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    #return \"p\"\n    for i in words:\n        if i.startswith(\"p\"):\n            return i[1:]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    x=[]\n    for i in words:\n        if i.startswith('p'):\n            x.append(i)\n    return x\ndef start_withp_2(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return_list=[]\n    for i in words:\n        if i.startswith('p'):\n            return_list.append(i)\n    return return_list\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    start_withp = re.findall(r'^p', words)\n    return start_withp\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = []\n    for i in words:\n        if i[0] == 'p':\n            p.append(i)\n    return p\ndef start_withp2(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = []\n    for i in words:\n        if i[0] == 'p':\n            p.append(i)\n    return p\ndef start_withp3(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = []\n    for i in words:\n        if i[0] == 'p':\n            p.append(i)\n    return p\ndef start_withp4(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = []\n    for i in words:\n        if i[0] == 'p':\n            p.append(i)\n    return p\ndef end_withp(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    p = []\n    for i in words:\n        if i[-1] == 'p':\n            p.append(i)\n    return p\ndef end_withp2(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    p = []\n    for i in words:\n        if i[-1] == 'p':\n            p.append(i)\n    return p\ndef end_withp3(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    p = []\n    for i in words:\n        if i[-1] == 'p':\n            p.append(i)\n    return p\ndef end_withp4(words):\n    '''\n    Write a function to return two words from a list of words ending with letter 'p'.\n    '''\n    p = []\n    for i in words:\n        if i[-1] == 'p':\n            p.append(i)\n    return p\ndef case_swapp(words):\n    '''\n    Write a function to return a new list of words by swapping the case of each word in the list.\n    '''\n    p = []\n    for i in words:\n        p.append(i.swapcase())\n    return p\ndef case_swapp2(words):\n    '''\n    Write a function to return a new list of words by swapping the case of each word in the list.\n    '''\n    p = []\n    for i in words:\n        p.append(i.swapcase())\n    return p\ndef case_swapp3(words):\n    '''\n    Write a function to return a new list of words by swapping the case of each word in the list.\n    '''\n    p = []\n    for i in words:\n        p.append(i.swapcase())\n    return p\ndef case_swapp4(words):\n    '''\n    Write a function to return a new list of words by swapping the case of each word in the list.\n    '''\n    p = []\n    for i in words:\n        p.append(i.swapcase())\n    return p\ndef char_atp(words,index):\n    '''\n    Write a function to return a word from a list of words that starts with a specific letter.\n    '''\n    p = []\n    for i in words:\n        if i[index] == 'p':\n            p.append(i)\n    return p\ndef char_atp2(words,index):\n    '''\n    Write a function to return a word from a list of words that starts with a specific letter.\n    '''\n    p = []\n    for i in words:\n        if i[index] == 'p':\n            p.append(i)\n    return p\ndef char_atp3(words,index):\n    '''\n    Write a function to return a word from a list of words that starts with a specific letter.\n    '''\n    p = []\n    for i in words:\n        if i[index] == 'p':\n            p.append(i)\n    return p\ndef char_atp4(words,index):\n    '''\n    Write a function to return a word from a list of words that starts with a specific letter.\n    '''\n    p = []\n    for i in words:\n        if i[index] == 'p':\n            p.append(i)\n    return p\ndef char_atp5(words,index):\n    '''\n    Write a function to return a word from a list of words that starts with a specific letter.\n    '''\n    p = []\n    for i in words:\n        if i[index] == 'p':\n            p.append(i)\n    return p\ndef char_atp6(words,index):\n    '''\n    Write a function to return a word from a list of words that starts with a specific letter.\n    '''\n    p = []\n    for i in words:\n        if i[index] == 'p':\n            p.append(i)\n    return p\ndef char_atp7(words,index):\n    '''\n    Write a function to return a word from a list of words that starts with a specific letter.\n    '''\n    p = []\n    for i in words:\n        if i[index] == 'p':\n            p.append(i)\n    return p\ndef char_atp8(words,index):\n    '''\n    Write a function to return a word from a list of words that starts with a specific letter.\n    '''\n    p = []\n    for i in words:\n        if i[index] == 'p':\n            p.append(i)\n    return p\ndef char_atp9(words,index):\n    '''\n    Write a function to return a word from a list of words that starts with a specific letter.\n    '''\n    p = []\n    for i in words:\n        if i[index] == 'p':\n            p.append(i)\n    return p\ndef char_atp10(words,index):\n    '''\n    Write a function to return a word from a list of words that starts with a specific letter.\n    '''\n    p = []\n    for i in words:\n        if i[index] == 'p':\n            p.append(i)\n    return p\ndef char_atp11(words,index):\n    '''\n    Write a function to return a word from a list of words that starts with a specific letter.\n    '''\n    p = []\n    for i in words:\n        if i[index] == 'p':\n            p.append(i)\n    return p\ndef char_atp12(words,index):\n    '''\n    Write a function to return a word from a list of words that starts with a specific letter.\n    '''\n    p = []\n    for i in words:\n        if i[index] == 'p':\n            p.append(i)\n    return p\ndef char_atp13(words,index):\n    '''\n    Write a function to return a word from a list of words that starts with a specific letter.\n    '''\n    p = []\n    for i in words:\n        if i[index] == 'p':\n            p.append(i)\n    return p\ndef char_atp14(words,index):\n    '''\n    Write a function to return a word from a list of words that starts with a specific letter.\n    '''\n    p = []\n    for i in words:\n        if i[index] == 'p':\n            p.append(i)\n    return p\ndef char_atp15(words,index):\n    '''\n    Write a function to return a word from a list of words that starts with a specific letter.\n    '''\n    p = []\n    for i in words:\n        if i[index] == 'p':\n            p.append(i)\n    return p\ndef char_atp16(words,index):\n    '''\n    Write a function to return a word from a list of words that starts with a specific letter.\n    '''"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words = words.split()\n    \n    p = words[0]\n    for i in range(1, len(words)):\n        if words[i][0] == 'p':\n            p = words[i]\n            break\n    return p, words[i + 1]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_list = []\n    for word in words:\n        if word.startswith('p'):\n            p_list.append(word)\n    return p_list\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words=[]\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    return p_words\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n <= 0:\n        return -1\n    if index == n:\n        return 0\n    if k > n or k <= 0:\n        return -1\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    dp = [[0 for x in range(k+1)] for x in range(n+1)]\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    if k == index:\n        return a[index]\n    max_sum_so_far = -100000\n    max_sum_in_subseq = 0\n    for i in range(index, n):\n        if a[i] > max_sum_in_subseq:\n            max_sum_in_subseq = a[i]\n        max_sum_so_far = max(max_sum_so_far, a[i] + max_sum_increasing_subseq(a, n, i+1, k))\n    return max_sum_so_far\n    \n    '''\n    brute force approach\n    def max_sum_increasing_subseq(a, n, k):\n    max_sum = -100000\n    sum_so_far = 0\n    for i in range(n):\n        if a[i] > max_sum:\n            max_sum = a[i]\n        sum_so_far += a[i]\n        if i >= k:\n            max_sum = max(max_sum, sum_so_far)\n        #print(max_sum, i, sum_so_far)\n    return max_sum\n    '''\n    \nif __name__ == \"__main__\":\n    '''\n    print(max_sum_increasing_subseq([3, 4, 2, 1, 6, 5, 9, 4, 8, 7], 9, 4))\n    '''\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 3, 0))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 3, 1))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 3, 2))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 3, 3))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 3, 4))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 3, 5))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 3, 6))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 3, 7))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 3, 8))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 3, 9))\n    '''\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 4, 0))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 4, 1))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 4, 2))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 4, 3))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 4, 4))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 4, 5))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 4, 6))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 4, 7))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 4, 8))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 4, 9))\n    '''\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 5, 0))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 5, 1))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 5, 2))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 5, 3))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 5, 4))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 5, 5))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 5, 6))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 5, 7))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 5, 8))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 5, 9))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 6, 0))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 6, 1))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 6, 2))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 6, 3))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 6, 4))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 6, 5))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 6, 6))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 6, 7))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 6, 8))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 6, 9))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 7, 0))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 7, 1))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 7, 2))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 7, 3))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 7, 4))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 7, 5))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 7, 6))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 7, 7))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 7, 8))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 7, 9))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 8, 0))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 8, 1))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 8, 2))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 8, 3))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 8, 4))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 8, 5))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 8, 6))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 8, 7))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 8, 8))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 8, 9))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 9, 0))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 9, 1))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 9, 2))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 9, 3))\n    print(max_sum_increasing_subseq([1, 2, 3, 4], 9, 4)"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # base case - all elements in a are increasing\n    if index == n:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    global prefix_sum_list\n    prefix_sum_list = a\n    l = 0\n    r = index\n    s = []\n    max_sum = 0\n    while l <= r:\n        if l == index:\n            sum = 0\n            for i in range(index):\n                sum += prefix_sum_list[i]\n            if k <= sum:\n                s.append(index)\n                l = index + 1\n            else:\n                l = index + 1\n        else:\n            s.append(l)\n            s.append(r)\n            l = s[0]\n            r = s[1]\n            sum = 0\n            for i in range(l):\n                sum += prefix_sum_list[i]\n            if k <= sum:\n                l = l + 1\n            else:\n                r = r - 1\n        if max_sum < max(s):\n            max_sum = max(s)\n        s = []\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index < n:\n        if k > index:\n            max_sum_increasing_subseq(a, n, index+1, k)\n        else:\n            max_sum_increasing_subseq(a, n, index+1, k)\n        temp = a[index]\n        while index > 0 and a[index] < temp:\n            a[index] = a[index-1]\n            index = index-1\n        a[index] = temp\n    else:\n        if k > index:\n            max_sum_increasing_subseq(a, n, 0, k)\n        return a\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum_arr = [0] * n\n    max_sum_arr[0] = a[0]\n    curr_max = a[0]\n    for i in range(1, n):\n        curr_max = max(curr_max, a[i])\n        max_sum_arr[i] = curr_max\n    curr_max = a[index]\n    if index == 0:\n        return curr_max\n    if index == 1:\n        return curr_max + a[index]\n    else:\n        for i in range(index - 1, -1, -1):\n            curr_max = max(curr_max, a[i])\n            max_sum_arr[i] = curr_max\n        return max_sum_arr[index] + a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    for j in range(index, n):\n        t = a[index:j+1]\n        t.sort()\n        if k <= len(t)-1:\n            return sum(t[:k+1])\n    return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    m = max_sum_increasing_subseq(a, n, index+1, k)\n    if k <= index and a[index] < a[index+1]:\n        m = max(m, a[index+1] + max_sum_increasing_subseq(a, n, index+2, k))\n    return m\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == n:\n        return\n    if k == index:\n        return\n    maximum = -float('inf')\n    for i in range(index, n):\n        if a[i] > maximum:\n            maximum = a[i]\n        else:\n            continue\n        if maximum > k:\n            break\n        else:\n            continue\n        if maximum == k:\n            break\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:\n            maximum = maximum\n        else:\n            continue\n        if maximum > maximum:"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    for i in range(m,n):\n        colon.append(tuplex[i])\n    return tuple(colon)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m-1] + tuplex[n-1]\ndef tuple_add(tuplex1,tuplex2):\n    '''\n    Write a function to add 2 tuples.\n    '''\n    return tuple(map(sum,zip(tuplex1,tuplex2)))\ndef tuple_sub(tuplex1,tuplex2):\n    '''\n    Write a function to subtract 2 tuples.\n    '''\n    return tuple(map(lambda x,y:x-y,tuplex1,tuplex2))\ndef tuple_mul(tuplex1,tuplex2):\n    '''\n    Write a function to multiply 2 tuples.\n    '''\n    return tuple(map(lambda x,y:x*y,tuplex1,tuplex2))\ndef tuple_div(tuplex1,tuplex2):\n    '''\n    Write a function to divide 2 tuples.\n    '''\n    return tuple(map(lambda x,y:x/y,tuplex1,tuplex2))\ndef tuple_min(tuplex1,tuplex2):\n    '''\n    Write a function to find the minimum of 2 tuples.\n    '''\n    return tuple(map(min,tuplex1,tuplex2))\ndef tuple_max(tuplex1,tuplex2):\n    '''\n    Write a function to find the maximum of 2 tuples.\n    '''\n    return tuple(map(max,tuplex1,tuplex2))\ndef tuple_any(tuplex1,tuplex2):\n    '''\n    Write a function to find the any of 2 tuples.\n    '''\n    return tuple(map(any,tuplex1,tuplex2))\ndef tuple_all(tuplex1,tuplex2):\n    '''\n    Write a function to find the all of 2 tuples.\n    '''\n    return tuple(map(all,tuplex1,tuplex2))\ndef tuple_all_except(tuplex1,tuplex2):\n    '''\n    Write a function to find the all of 2 tuples.\n    '''\n    return tuple(map(lambda x,y:x and y,tuplex1,tuplex2))\ndef tuple_all_except_only(tuplex1,tuplex2):\n    '''\n    Write a function to find the all of 2 tuples.\n    '''\n    return tuple(map(lambda x,y:x or y,tuplex1,tuplex2))\ndef tuple_max_index(tuplex1,tuplex2):\n    '''\n    Write a function to find the maximum index of 2 tuples.\n    '''\n    return tuple(map(max,tuplex1,tuplex2))\ndef tuple_min_index(tuplex1,tuplex2):\n    '''\n    Write a function to find the minimum index of 2 tuples.\n    '''\n    return tuple(map(min,tuplex1,tuplex2))\ndef tuple_intersect(tuplex1,tuplex2):\n    '''\n    Write a function to find the intersection of 2 tuples.\n    '''\n    return tuple(set(tuplex1).intersection(set(tuplex2)))\ndef tuple_union(tuplex1,tuplex2):\n    '''\n    Write a function to find the union of 2 tuples.\n    '''\n    return tuple(set(tuplex1).union(set(tuplex2)))\ndef tuple_set_diff(tuplex1,tuplex2):\n    '''\n    Write a function to find the difference of 2 tuples.\n    '''\n    return tuple(set(tuplex1).difference(set(tuplex2)))\ndef tuple_set_diff_only(tuplex1,tuplex2):\n    '''\n    Write a function to find the difference of 2 tuples.\n    '''\n    return tuple(set(tuplex1).difference(set(tuplex2)))\ndef tuple_contains(tuplex1,tuplex2):\n    '''\n    Write a function to find the contains of 2 tuples.\n    '''\n    return tuple(tuplex1.__contains__(tuplex2))\ndef tuple_count(tuplex1,tuplex2):\n    '''\n    Write a function to find the count of 2 tuples.\n    '''\n    return tuple(tuplex1.count(tuplex2))\ndef tuple_invert(tuplex1):\n    '''\n    Write a function to invert a tuple.\n    '''\n    return tuple(map(lambda x:x[::-1],tuplex1))\ndef tuple_first(tuplex1):\n    '''\n    Write a function to get the first of a tuple.\n    '''\n    return tuplex1[0]\ndef tuple_last(tuplex1):\n    '''\n    Write a function to get the last of a tuple.\n    '''\n    return tuplex1[-1]\ndef tuple_index(tuplex1,index):\n    '''\n    Write a function to get the index of a tuple.\n    '''\n    return tuplex1[index]\ndef tuple_index_last(tuplex1,index):\n    '''\n    Write a function to get the last index of a tuple.\n    '''\n    return tuplex1[-index]\ndef tuple_slice(tuplex1,m,n):\n    '''\n    Write a function to get the slice of a tuple.\n    '''\n    return tuple(tuplex1[m:n])\ndef tuple_slice_last(tuplex1,m,n):\n    '''\n    Write a function to get the last slice of a tuple.\n    '''\n    return tuple(tuplex1[-m:])\ndef tuple_slice_all(tuplex1,m,n):\n    '''\n    Write a function to get the all slice of a tuple.\n    '''\n    return tuple(tuplex1[m:n])\ndef tuple_slice_all_reverse(tuplex1,m,n):\n    '''\n    Write a function to get the all slice of a tuple.\n    '''\n    return tuple(tuplex1[:n-m])\ndef tuple_slice_all_reverse_sub(tuplex1,m,n):\n    '''\n    Write a function to get the all slice of a tuple.\n    '''\n    return tuple(tuplex1[n-m:])\ndef tuple_slice_all_reverse_sub(tuplex1,m,n):\n    '''\n    Write a function to get the all slice of a tuple.\n    '''\n    return tuple(tuplex1[-n+m:])\ndef tuple_slice_last_reverse(tuplex1,m,n):\n    '''\n    Write a function to get the last slice of a tuple.\n    '''\n    return tuple(tuplex1[:n-m])\ndef tuple_slice_last_reverse(tuplex1,m,n):\n    '''\n    Write a function to get the last slice of a tuple.\n    '''\n    return tuple(tuplex1[-n:])\ndef tuple_split(tuplex1,n):\n    '''\n    Write a function to split a tuple.\n    '''\n    return tuple(tuplex1[:n])\ndef tuple_remove(tuplex1,tuplex2):\n    '''\n    Write a function to remove tuples from tuples.\n    '''\n    tuplex1.remove(tuplex2)\ndef tuple_remove_all(tuplex1,tuplex2):\n    '''\n    Write a function to remove tuples from tuples.\n    '''\n    tuplex1.remove(tuplex2)\ndef tuple_clear(tuplex1):\n    '''\n    Write a function to clear tuples.\n    '''\n    tuplex1.clear()\ndef tuple_join(tuplex1,tuplex2):\n    '''\n    Write a function to join tuples.\n    '''\n    return tuple(tuplex1+tuplex2"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #print(m,n)\n    #print(tuplex[n])\n    colon = []\n    for i in range(m):\n        colon.append(tuplex[i])\n    #print(colon)\n    #print(len(colon))\n    #print(colon[m-1])\n    #print(type(colon))\n    #print(colon[0])\n    return colon\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:n]\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex=deepcopy(tuplex)\n    a=tuplex[0]\n    b=tuplex[1]\n    c=tuplex[2]\n    d=tuplex[3]\n    e=tuplex[4]\n    f=tuplex[5]\n    tuplex=tuplex[6:]\n    if m==1:\n        new_tuplex=[]\n        new_tuplex.append(a)\n        new_tuplex.append(c)\n        new_tuplex.append(b)\n        new_tuplex.append(d)\n        new_tuplex.append(e)\n        new_tuplex.append(f)\n        new_tuplex.append(tuplex)\n        return(new_tuplex)\n    else:\n        new_tuplex=[]\n        new_tuplex.append(tuplex[0:n])\n        new_tuplex.append(tuplex[n:])\n        return(new_tuplex)\ndef sum_colon(colonlist,m):\n    '''\n    Write a function to sum the colon of a list.\n    '''\n    if m==1:\n        colon=colonlist[0]\n        a=colon[0]\n        b=colon[1]\n        c=colon[2]\n        d=colon[3]\n        e=colon[4]\n        f=colon[5]\n        colonlist=colonlist[6:]\n        sum=a+b+c+d+e+f\n        return(sum)\n    elif m==2:\n        colon=colonlist[0]\n        a=colon[0]\n        b=colon[1]\n        c=colon[2]\n        d=colon[3]\n        e=colon[4]\n        f=colon[5]\n        colonlist=colonlist[6:]\n        sum=a+b+c+d\n        return(sum)\n    elif m==3:\n        colon=colonlist[0]\n        a=colon[0]\n        b=colon[1]\n        c=colon[2]\n        d=colon[3]\n        e=colon[4]\n        f=colon[5]\n        colonlist=colonlist[6:]\n        sum=a+b+c+d\n        return(sum)\ndef sum_colon_2(colonlist,m):\n    '''\n    Write a function to sum the colon of a list.\n    '''\n    colon=colonlist[0]\n    a=colon[0]\n    b=colon[1]\n    c=colon[2]\n    d=colon[3]\n    e=colon[4]\n    f=colon[5]\n    colonlist=colonlist[6:]\n    sum=a+b+c+d+e+f\n    return(sum)\ndef is_colon(colonlist,m):\n    '''\n    Write a function to check if the colon is or not.\n    '''\n    if m==1:\n        if len(colonlist)!=6:\n            return(False)\n        if type(colonlist[0])!=int or type(colonlist[1])!=int or type(colonlist[2])!=int or type(colonlist[3])!=int or type(colonlist[4])!=int or type(colonlist[5])!=int:\n            return(False)\n        if colonlist[0]>m or colonlist[1]>m or colonlist[2]>m or colonlist[3]>m or colonlist[4]>m or colonlist[5]>m:\n            return(False)\n        return(True)\n    elif m==2:\n        if len(colonlist)!=5:\n            return(False)\n        if type(colonlist[0])!=int or type(colonlist[1])!=int or type(colonlist[2])!=int or type(colonlist[3])!=int or type(colonlist[4])!=int:\n            return(False)\n        if colonlist[0]>m or colonlist[1]>m or colonlist[2]>m or colonlist[3]>m or colonlist[4]>m:\n            return(False)\n        return(True)\n    elif m==3:\n        if len(colonlist)!=4:\n            return(False)\n        if type(colonlist[0])!=int or type(colonlist[1])!=int or type(colonlist[2])!=int or type(colonlist[3])!=int:\n            return(False)\n        if colonlist[0]>m or colonlist[1]>m or colonlist[2]>m or colonlist[3]>m:\n            return(False)\n        return(True)\ndef colon_print(colonlist):\n    '''\n    Write a function to print the colon.\n    '''\n    colon=colonlist[0]\n    a=colon[0]\n    b=colon[1]\n    c=colon[2]\n    d=colon[3]\n    e=colon[4]\n    f=colon[5]\n    print(\"Sum = \",a,b,c,d,e,f)\ndef sum_colon_2_print(colonlist):\n    '''\n    Write a function to print the colon.\n    '''\n    colon=colonlist[0]\n    a=colon[0]\n    b=colon[1]\n    c=colon[2]\n    d=colon[3]\n    e=colon[4]\n    f=colon[5]\n    print(\"Sum = \",a,b,c,d,e,f)\ndef is_colon_2(colonlist):\n    '''\n    Write a function to check if the colon is or not.\n    '''\n    if len(colonlist)!=5:\n        return(False)\n    if type(colonlist[0])!=int or type(colonlist[1])!=int or type(colonlist[2])!=int or type(colonlist[3])!=int or type(colonlist[4])!=int:\n        return(False)\n    if colonlist[0]>m or colonlist[1]>m or colonlist[2]>m or colonlist[3]>m or colonlist[4]>m:\n        return(False)\n    return(True)\ndef sum_colon_3_print(colonlist):\n    '''\n    Write a function to print the colon.\n    '''\n    colon=colonlist[0]\n    a=colon[0]\n    b=colon[1]\n    c=colon[2]\n    d=colon[3]\n    e=colon[4]\n    f=colon[5]\n    print(\"Sum = \",a,b,c,d,e,f)\ndef is_colon_3(colonlist):\n    '''\n    Write a function to check if the colon is or not.\n    '''\n    if len(colonlist)!=6:\n        return(False)\n    if type(colonlist[0])!=int or type(colonlist[1])!=int or type(colonlist[2])!=int or type(colonlist[3])!=int or type(colonlist[4])!=int or type(colonlist[5])!=int:\n        return(False)\n    if colonlist[0]>m or colonlist[1]>m or colonlist[2]>m or colonlist[3]>m or colonlist[4]>m or colonlist[5]>m:\n        return(False)\n    return(True)\ndef is_colon_4(colonlist):\n    '''\n    Write a function to check if the colon is or not.\n    '''\n    if len(colonlist)!=4:\n        return(False)\n    if type(colonlist[0])!=int or type"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex=tuple(tuplex)\n    if(m<0 or n<0 or m>=len(tuplex) or n>=len(tuplex)):\n        return(tuplex)\n    else:\n        return((tuplex[m],tuplex[n]))\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    y,x=tuplex\n    x,y=tuple(map(int,(x,y)))\n    x=int(x/m)\n    y=int(y/n)\n    x,y=tuple(map(int,(x,y)))\n    return x,y\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[:m],tuplex[m:n+1],tuplex[n+1:]\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    l = []\n    for i in range(len(tuplex)):\n        l.append(tuplex[i])\n    l[m],l[n] = l[n],l[m]\n    return tuple(l)\ndef get_column_tuplex(tuplex,n):\n    '''\n    Write a function to get a column of a tuple.\n    '''\n    l = []\n    for i in range(len(tuplex)):\n        l.append(tuplex[i][n])\n    return tuple(l)\ndef swap_two_tuple(tuplex,m1,m2):\n    '''\n    Write a function to swap two elements in a tuple.\n    '''\n    l = []\n    for i in range(len(tuplex)):\n        l.append(tuplex[i])\n    l[m1],l[m2] = l[m2],l[m1]\n    return tuple(l)\ndef get_column_first(tuplex,n):\n    '''\n    Write a function to get a column of first element of a tuple.\n    '''\n    l = []\n    for i in range(len(tuplex)):\n        l.append(tuplex[i][n])\n    return tuple(l)\ndef swap_two_tuple_first(tuplex,m1,m2):\n    '''\n    Write a function to swap two elements of first element in a tuple.\n    '''\n    l = []\n    for i in range(len(tuplex)):\n        l.append(tuplex[i])\n    l[m1],l[m2] = l[m2],l[m1]\n    return tuple(l)\ndef get_element_tuple(tuplex,n):\n    '''\n    Write a function to get a element of a tuple.\n    '''\n    l = []\n    for i in range(len(tuplex)):\n        l.append(tuplex[i][n])\n    return tuple(l)\ndef swap_two_tuple_element(tuplex,m1,m2):\n    '''\n    Write a function to swap two elements of a tuple.\n    '''\n    l = []\n    for i in range(len(tuplex)):\n        l.append(tuplex[i])\n    l[m1],l[m2] = l[m2],l[m1]\n    return tuple(l)\ndef get_element_first(tuplex,n):\n    '''\n    Write a function to get a element of first element of a tuple.\n    '''\n    l = []\n    for i in range(len(tuplex)):\n        l.append(tuplex[i][n])\n    return tuple(l)\ndef swap_two_tuple_first_element(tuplex,m1,m2):\n    '''\n    Write a function to swap two elements of first element of a tuple.\n    '''\n    l = []\n    for i in range(len(tuplex)):\n        l.append(tuplex[i])\n    l[m1],l[m2] = l[m2],l[m1]\n    return tuple(l)\ndef get_first_tuple(tuplex):\n    '''\n    Write a function to get the first element of a tuple.\n    '''\n    l = []\n    for i in range(len(tuplex)):\n        l.append(tuplex[i][0])\n    return tuple(l)\ndef swap_two_tuple_first_element_first(tuplex,m1,m2):\n    '''\n    Write a function to swap two elements of first element of a tuple.\n    '''\n    l = []\n    for i in range(len(tuplex)):\n        l.append(tuplex[i])\n    l[m1],l[m2] = l[m2],l[m1]\n    return tuple(l)\ndef get_last_tuple(tuplex):\n    '''\n    Write a function to get the last element of a tuple.\n    '''\n    l = []\n    for i in range(len(tuplex)):\n        l.append(tuplex[i][-1])\n    return tuple(l)\ndef swap_two_tuple_last_element(tuplex,m1,m2):\n    '''\n    Write a function to swap two elements of last element of a tuple.\n    '''\n    l = []\n    for i in range(len(tuplex)):\n        l.append(tuplex[i])\n    l[m1],l[m2] = l[m2],l[m1]\n    return tuple(l)\ndef get_first_last_tuple(tuplex):\n    '''\n    Write a function to get first and last element of a tuple.\n    '''\n    l = []\n    for i in range(len(tuplex)):\n        l.append(tuplex[i][0])\n        l.append(tuplex[i][-1])\n    return tuple(l)\ndef swap_two_tuple_last_element_first(tuplex,m1,m2):\n    '''\n    Write a function to swap two elements of last element of a tuple.\n    '''\n    l = []\n    for i in range(len(tuplex)):\n        l.append(tuplex[i])\n    l[m1],l[m2] = l[m2],l[m1]\n    return tuple(l)\ndef get_mid_tuple(tuplex,m,n):\n    '''\n    Write a function to get a mid element of a tuple.\n    '''\n    l = []\n    for i in range(len(tuplex)):\n        l.append(tuplex[i][m:n])\n    return tuple(l)\ndef swap_two_tuple_mid_element(tuplex,m1,m2):\n    '''\n    Write a function to swap two elements of a tuple.\n    '''\n    l = []\n    for i in range(len(tuplex)):\n        l.append(tuplex[i])\n    l[m1],l[m2] = l[m2],l[m1]\n    return tuple(l)\ndef get_mid_first_tuple(tuplex,m,n):\n    '''\n    Write a function to get a mid element of first element of a tuple.\n    '''\n    l = []\n    for i in range(len(tuplex)):\n        l.append(tuplex[i][m])\n    return tuple(l)\ndef swap_two_tuple_mid_element_first(tuplex,m1,m2):\n    '''\n    Write a function to swap two elements of a tuple.\n    '''\n    l = []\n    for i in range(len(tuplex)):\n        l.append(tuplex[i])\n    l[m1],l[m2] = l[m2],l[m1]\n    return tuple(l)\ndef get_mid_last_tuple(tuplex,m,n):\n    '''\n    Write a function to get a mid element of last element of a tuple.\n    '''\n    l = []\n    for i in range(len(tuplex)):\n        l.append(tuplex[i][m:n])\n    return tuple(l)\ndef swap_two_tuple_mid_element_last(tuplex,m1,m2):\n    '''\n    Write a function to swap two elements of a tuple.\n    '''\n    l = []\n    for i in range(len(tuplex)):\n        l.append(tuplex[i])\n    l[m1],l[m2] = l[m2],l[m1]\n    return tuple(l)\ndef get_column_second(tuplex,n):\n    '''\n    Write a function to get a column of second element of a tuple.\n    '''\n    l = []\n    for i in range(len(tuplex)):\n        l.append(tuplex[i][1])\n    return tuple(l)\nde"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = tuplex[:m] + (' '*n,) + tuplex[m+1:]\n    return new_tuplex\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n    idx1 = 0\n    idx2 = 0\n    res = []\n    while idx1 < N and idx2 < N:\n        if nums1[idx1] < nums2[idx2]:\n            idx1 += 1\n        elif nums1[idx1] > nums2[idx2]:\n            idx2 += 1\n        else:\n            res.append(nums1[idx1] * nums2[idx2])\n            idx1 += 1\n            idx2 += 1\n    return res\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N < 1:\n        return 0\n    if N > len(nums1) or N > len(nums2):\n        return -1\n    sorted_nums = []\n    for n1 in sorted(nums1):\n        for n2 in sorted(nums2):\n            if n1 * n2 > 1e5:\n                sorted_nums.append(n1 * n2)\n                continue\n            if n1 * n2 <= 1e5 and len(sorted_nums) < N:\n                sorted_nums.append(n1 * n2)\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create dictionary for result, comparing a product with every factor in both lists\n    result = {}\n    for i in nums1:\n        for j in nums2:\n            # Get product\n            product = i * j\n            # Check if product is already in dictionary\n            if product in result:\n                result[product].append(i)\n                result[product].append(j)\n            # Add product to dictionary if not\n            else:\n                result[product] = [i, j]\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    from heapq import heappush, heappop\n    # nums1 = [3, 4, 5, 6, 7]\n    # nums2 = [9, 10, 11]\n    # N = 2\n    # Output: [[3, 11], [4, 10]]\n    # Output: [[3, 11], [4, 10], [5, 9], [6, 8], [7, 7]]\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    d = {}\n    for i in range(0, N):\n        d[nums1[i]] = i\n        d[nums2[i]] = i\n    for i in range(0, N):\n        if nums1[i] * nums2[i] in d:\n            result.append(nums1[i] * nums2[i])\n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    nums1.sort()\n    nums2.sort()\n    product_list = []\n    \n    while len(nums1) and len(nums2):\n        if nums1[0] < nums2[0]:\n            product_list.append(nums1[0] * nums2[0])\n            nums1.pop(0)\n            nums2.pop(0)\n        else:\n            product_list.append(nums2[0] * nums1[0])\n            nums1.pop(0)\n            nums2.pop(0)\n    \n    while len(nums1):\n        product_list.append(nums1[0] * nums2[0])\n        nums1.pop(0)\n    \n    while len(nums2):\n        product_list.append(nums1[0] * nums2[0])\n        nums2.pop(0)\n        \n    return product_list[::-1]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_size = min(len(nums1), len(nums2))\n    prod_list = []\n    for i in range(max_size):\n        prod_list.append((nums1[i] * nums2[i]))\n    prod_list.sort(reverse = True)\n    return prod_list[:N]\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1)==0 or len(nums2)==0:\n        return []\n    nums1.sort()\n    nums2.sort()\n    res = []\n    i = 0\n    j = 0\n    while len(res)<N:\n        while i<len(nums1) and nums1[i]<=nums2[j]:\n            i+=1\n        while j<len(nums2) and nums1[i]>nums2[j]:\n            j+=1\n        res.append(nums1[i]*nums2[j])\n    return res\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    assert isinstance(nums1, list)\n    assert isinstance(nums2, list)\n    assert len(nums1) == len(nums2)\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    curr = 0\n    for i in range(N):\n        curr = max(curr, nums1[i]*nums2[i])\n    return curr\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>=b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        return a\n    else:\n        return b\ndef main():\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    print(maximum(a=8,b=18))\n    print(maximum(a=32,b=18))\n    print(maximum(a=17,b=17))\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        return a\n    else:\n        return b\nprint(maximum(2,5))\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>=b:\n        return a\n    else:\n        return b\ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<=b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\nmaxi=maximum(10,20)\nprint(maxi)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        print(\"a is maximum\")\n    else:\n        print(\"b is maximum\")\nmaximum(3,5)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    maximum_value = a if a > b else b\n    return maximum_value\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    s = str1.split(\",\")\n    tuple_of_str = tuple(s)\n    return tuple_of_str\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    res = tuple(str1)\n    return res\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    t = tuple(str1)\n    return t\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tup1=()\n    for i in str1:\n        tup1+=(i,)\n    return tup1\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple1 = ()\n    list1 = list(str1)\n    for i in list1:\n        tuple1 += (i,)\n    return tuple1\n        \ndef tuple_to_string(t1):\n    '''\n    Write a function to convert a given tuple of characters to a string.\n    '''\n    str1 = ''\n    for i in t1:\n        str1 += i\n    return str1\n        \ndef max_length(tuple1):\n    '''\n    Write a function to find the maximum length of a tuple.\n    '''\n    max_len = 0\n    for i in tuple1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n        \ndef min_length(tuple1):\n    '''\n    Write a function to find the minimum length of a tuple.\n    '''\n    min_len = 0\n    for i in tuple1:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    a = str1.split()\n    b = tuple(a)\n    return b\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = (n << 1) | 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if (n == 0):\n        return 1\n    if (n == 1):\n        return 0\n    bit = 0\n    while (n):\n        bit = bit + (n & 1)\n        n = n >> 1\n    return bit\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Your code here\n    n = (n | (1<<31))\n    n = n - (n>>1)\n    n = n - (n>>2)\n    n = n - (n>>4)\n    n = n - (n>>8)\n    n = n - (n>>16)\n    n = n - (n>>32)\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        print(\"The value is already 0\")\n    else:\n        while (n & 1) == 0:\n            n = n >> 1\n        print(\"Left most unset bit is: \", n)\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = ~n & (~0)\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Flip the left most bit of n\n    return n ^ (1<<(32-1))\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    while (n & 1): \n        n = n & (n - 1)\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n | 1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i = 0\n    while (n & (1 << i)) == 0:\n        i = i + 1\n    i = i - 1\n    return (n | (1 << i))\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return (n | (1 << (n.bit_length() - 1))) \n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = (math.pi*r**2*h)/3\n    return vol\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v=math.pi*r**2*h/3\n    return v\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v=4/3*math.pi*r**3\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v=math.pi*r**2*h\n    return v\ndef volume_pyramid(w,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=w*l\n    return v\ndef volume_pyramid(w,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=w*l\n    return v\ndef volume_pyramid(w,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=w*l\n    return v\ndef volume_pyramid(h,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=l*h\n    return v\ndef volume_pyramid(h,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=l*h\n    return v\ndef volume_pyramid(h,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=l*h\n    return v\ndef volume_pyramid(w,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=w*h\n    return v\ndef volume_pyramid(w,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=w*h\n    return v\ndef volume_pyramid(w,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=w*h\n    return v\ndef volume_pyramid(w,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=w*l\n    return v\ndef volume_pyramid(w,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=w*l\n    return v\ndef volume_pyramid(w,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=w*l\n    return v\ndef volume_pyramid(w,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=w*l\n    return v\ndef volume_pyramid(l,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=l*h\n    return v\ndef volume_pyramid(l,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=l*h\n    return v\ndef volume_pyramid(l,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=l*h\n    return v\ndef volume_pyramid(h,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=l*h\n    return v\ndef volume_pyramid(h,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=l*h\n    return v\ndef volume_pyramid(h,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=l*h\n    return v\ndef volume_pyramid(h,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=l*h\n    return v\ndef volume_pyramid(w,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=w*h\n    return v\ndef volume_pyramid(w,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=w*h\n    return v\ndef volume_pyramid(w,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=w*h\n    return v\ndef volume_pyramid(w,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=w*l\n    return v\ndef volume_pyramid(w,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=w*l\n    return v\ndef volume_pyramid(w,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=w*l\n    return v\ndef volume_pyramid(h,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=l*h\n    return v\ndef volume_pyramid(h,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=l*h\n    return v\ndef volume_pyramid(h,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=l*h\n    return v\ndef volume_pyramid(h,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=l*h\n    return v\ndef volume_pyramid(h,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=l*h\n    return v\ndef volume_pyramid(h,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=l*h\n    return v\ndef volume_pyramid(h,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=l*h\n    return v\ndef volume_pyramid(h,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=l*h\n    return v\ndef volume_pyramid(h,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=l*h\n    return v\ndef volume_pyramid(w,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=w*h\n    return v\ndef volume_pyramid(w,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=w*h\n    return v\ndef volume_pyramid(w,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=w*h\n    return v\ndef volume_pyramid(w,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=w*l\n    return v\ndef volume_pyramid(w,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=w*l\n    return v\ndef volume_pyramid(w,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=w*l\n    return v\ndef volume_pyramid(w,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=w*l\n    return v\ndef volume_pyramid(w,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=w*l\n    return v\ndef volume_pyramid(h,l):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    v=l*h\n    return v\ndef volume_pyrami"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    from cmath import pi\n    volume = (pi * r**2 * h)/3\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = 4/3*math.pi*(r**3)\n    v = v*(h/r)\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #make sure to put your function in a function in order to save time\n    vol = (math.pi*r**2*h)\n    return vol\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #make sure to put your function in a function in order to save time\n    vol = (4*math.pi*(r**3))\n    return vol\ndef area_cube(a):\n    '''\n    Write a function to find the area of a cube.\n    '''\n    #make sure to put your function in a function in order to save time\n    area = (6*(a**2))\n    return area\ndef area_pyramid(a,h):\n    '''\n    Write a function to find the area of a pyramid.\n    '''\n    #make sure to put your function in a function in order to save time\n    area = ((2*(a**2))+(2*(a**2)*h))\n    return area\ndef area_cone(r,h):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    #make sure to put your function in a function in order to save time\n    area = (math.pi*r*h)\n    return area\ndef area_sphere(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    #make sure to put your function in a function in order to save time\n    area = ((4*math.pi*(r**2)))\n    return area\ndef circumcircle_sphere(r):\n    '''\n    Write a function to find the circumcircle of a sphere.\n    '''\n    #make sure to put your function in a function in order to save time\n    circum = 2*((math.pi*(r**2))**0.5)\n    return circum\ndef circumcircle_cube(a):\n    '''\n    Write a function to find the circumcircle of a cube.\n    '''\n    #make sure to put your function in a function in order to save time\n    circum = 2*((a**2)**0.5)\n    return circum\ndef circumcircle_cone(r,h):\n    '''\n    Write a function to find the circumcircle of a cone.\n    '''\n    #make sure to put your function in a function in order to save time\n    circum = (2*(r**2)*math.sin(h))\n    return circum\ndef circumference_sphere(r):\n    '''\n    Write a function to find the circumference of a sphere.\n    '''\n    #make sure to put your function in a function in order to save time\n    d = 2*math.pi*(r)\n    return d\ndef circumference_cube(a):\n    '''\n    Write a function to find the circumference of a cube.\n    '''\n    #make sure to put your function in a function in order to save time\n    d = 6*(a)\n    return d\ndef circumference_cone(r,h):\n    '''\n    Write a function to find the circumference of a cone.\n    '''\n    #make sure to put your function in a function in order to save time\n    d = 2*(r*math.sin(h))\n    return d\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #make sure to put your function in a function in order to save time\n    area = 4*((math.pi*(r**3))-((4/3)*(math.pi*(r**2))))\n    return area\ndef surface_area_cube(a):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    #make sure to put your function in a function in order to save time\n    area = (12*(a**2))\n    return area\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    #make sure to put your function in a function in order to save time\n    area = (2*((math.pi*r**2)*(h)))\n    return area\ndef surface_area_pyramid(a,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    #make sure to put your function in a function in order to save time\n    area = ((2*(a**2))+(2*(a**2)*h))\n    return area\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    #make sure to put your function in a function in order to save time\n    area = (math.pi*(r**2)*h)\n    return area\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #make sure to put your function in a function in order to save time\n    area = ((4*math.pi*(r**2))-((4/3)*(math.pi*(r**2))))\n    return area\ndef surface_area_cube(a):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    #make sure to put your function in a function in order to save time\n    area = ((12*a**2))\n    return area\ndef volume_pyramid(a,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    #make sure to put your function in a function in order to save time\n    vol = (a*h)\n    return vol\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #make sure to put your function in a function in order to save time\n    vol = (math.pi*(r**2)*h)\n    return vol\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #make sure to put your function in a function in order to save time\n    vol = ((4/3)*(math.pi*(r**3)))\n    return vol\ndef check_condition(a,b):\n    '''\n    Write a function that takes in two floating point numbers and returns True if\n    one is less than or equal to the other, and returns False otherwise.\n    '''\n    #make sure to put your function in a function in order to save time\n    if a < b:\n        return True\n    elif a == b:\n        return False\n    else:\n        return False\ndef area_triangle(a,b,c):\n    '''\n    Write a function that takes in three floating point numbers and returns the\n    area of the triangle with those sides.\n    '''\n    #make sure to put your function in a function in order to save time\n    s = (a+b+c)/2\n    area = (s*(s-a)*(s-b)*(s-c))**0.5\n    return area\ndef volume_triangle(a,b,c):\n    '''\n    Write a function that takes in three floating point numbers and returns the\n    volume of the triangle with those sides.\n    '''\n    #make sure to put your function in a function in order to save time\n    s = (a+b+c)/2\n    volume = (s*(s-a)*(s-b)*(s-c))**0.5\n    return volume\ndef area_circle(r):\n    '''\n    Write a function that takes in a floating point number and returns the area\n    of the circle with that radius.\n    '''\n    #make sure to put your function in a function in order to save time\n    area = (math.pi*(r**2))\n    return area\ndef volume_circle(r):\n    '''\n    Write a function that takes in a floating point number and returns the\n    volume of the circle with that radius.\n    '''\n    #make sure to put your function in a function in order to save time\n    volume = (4*math.pi*(r**3))\n    return volume\ndef surface_area_triangle(a,b,c):\n    '''\n    Write a function that takes in three floating point numbers and returns the\n    surface area of the triangle with those sides.\n    ''"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    from math import pi, pow\n    return pow(r,2) * pi * r * h\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * (r ** 2) * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r*r*math.pi*h\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #print(r,h)\n    volume = math.pi*r**2*h\n    #print(volume)\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v=math.pi*(r**2)*h\n    return v\ndef cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v=math.pi*(r**2)*h\n    return v\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    pass\ndef is_prime(n): \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    pass\ndef num_of_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef find_largest_prime_factor(n): \n    '''\n    Write a python function to find the largest prime factor of a given integer.\n    '''\n    pass\ndef find_largest_prime_factor(n): \n    '''\n    Write a python function to find the largest prime factor of a given integer.\n    '''\n    pass\ndef find_smallest_prime_factor(n): \n    '''\n    Write a python function to find the smallest prime factor of a given integer.\n    '''\n    pass\ndef is_prime(n): \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    pass\ndef prime_factors(n): \n    '''\n    Write a python function to print the prime factors of a given integer.\n    '''\n    pass\ndef number_of_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef number_of_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef number_of_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef number_of_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef prime_factors(n): \n    '''\n    Write a python function to print the prime factors of a given integer.\n    '''\n    pass\ndef is_prime(n): \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    pass\ndef is_prime(n): \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisors(n): \n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    pass\ndef count_divisor"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max_power = 0\n    while (1 << max_power) <= n:\n        max_power += 1\n    return max_power\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    high = 0\n    if n == 0:\n        return 0\n    for i in range(n):\n        if high < i:\n            high = i\n    return high\n    \nn = 15\nprint(highest_Power_of_2(n))\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while True:\n        if 2**i < n:\n            return i\n        else:\n            i += 1\n    return -1\n        \nif __name__ == '__main__':\n    n = 10\n    print(highest_Power_of_2(n))\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # n = int(input(\"Enter n: \"))\n    # n = 10\n    max_pow_of_2 = 0\n    while n:\n        n &= n - 1\n        if n: max_pow_of_2 += 1\n        n = n >> 1\n    print(\"n = \", n)\n    print(\"max_pow_of_2 = \", max_pow_of_2)\n    return max_pow_of_2\nhighest_Power_of_2(10)\nhighest_Power_of_2(12)\nhighest_Power_of_2(15)\nhighest_Power_of_2(1)"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        n2 = 1 << (n.bit_length() - 1) # Need to take the leftmost n.bit_length() bits\n        if n2 <= n:\n            return n2\n        else:\n            return n2 - 1\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    #base case\n    if n == 0:\n        return 0\n    \n    #recursive step\n    if n % 2 == 0:\n        return highest_Power_of_2(n//2)\n    \n    return 1 + highest_Power_of_2(n//2)\n    \n    \ndef factorial(n):\n    '''\n    Write a python function to compute the factorial of n\n    '''\n    \n    #base case\n    if n == 1:\n        return n\n    \n    #recursive step\n    return n * factorial(n-1)\n    \n    \ndef fibonacci(n):\n    '''\n    Write a python function to compute the nth Fibonacci number\n    '''\n    \n    #base case\n    if n == 0:\n        return 0\n    \n    #recursive step\n    if n == 1 or n == 2:\n        return 1\n    \n    return fibonacci(n-1) + fibonacci(n-2)\n    \n    \ndef prime_number_generator(max_number):\n    '''\n    Write a python function to generate all the prime numbers between 2 and n\n    '''\n    \n    #base case\n    if max_number <= 0:\n        return\n    \n    #recursive step\n    for i in range(2,max_number):\n        if i > 1:\n            for j in range(2,i):\n                if i % j == 0:\n                    break\n            else:\n                print(i,end=', ')\n                \n                \ndef palindrome_number_generator(max_number):\n    '''\n    Write a python function to generate all the palindrome numbers between 1 and n\n    '''\n    \n    #base case\n    if max_number <= 0:\n        return\n    \n    #recursive step\n    for i in range(max_number+1):\n        if i > 1:\n            for j in range(2,i):\n                if i % j == 0:\n                    break\n            else:\n                if str(i) == str(i)[::-1]:\n                    print(i,end=', ')\n                    \n                    \ndef prime_number_in_range(low,high):\n    '''\n    Write a python function to find the prime numbers in range between low and high\n    '''\n    \n    #base case\n    if low <= 1 or high <= 1:\n        return\n    \n    #recursive step\n    for i in range(low,high):\n        if i > 1:\n            for j in range(2,i):\n                if i % j == 0:\n                    break\n            else:\n                print(i,end=', ')\n    \n    \ndef unique_prime_number_generator(max_number):\n    '''\n    Write a python function to generate all the unique prime numbers between 2 and n\n    '''\n    \n    #base case\n    if max_number <= 0:\n        return\n    \n    #recursive step\n    for i in range(2,max_number):\n        if i > 1:\n            for j in range(2,i):\n                if i % j == 0:\n                    break\n            else:\n                if (str(i))[0]!= '0':\n                    print(i,end=', ')\n                    \n                    \ndef second_largest_prime_number(max_number):\n    '''\n    Write a python function to find the second largest prime number between 2 and n\n    '''\n    \n    #base case\n    if max_number <= 0:\n        return\n    \n    #recursive step\n    largest_prime = 0\n    for i in range(2,max_number):\n        if i > 1:\n            for j in range(2,i):\n                if i % j == 0:\n                    break\n            else:\n                if (str(i))[0]!= '0':\n                    largest_prime = i\n    \n    #recursive step\n    return largest_prime\n    \n    \ndef number_is_perfect(n):\n    '''\n    Write a python function to check if the number is perfect or not.\n    '''\n    \n    #base case\n    if n <= 0:\n        return False\n    \n    #recursive step\n    if n == 1:\n        return True\n    \n    return n == 2 * (n//2) + 1\n    \n    \ndef is_prime_number(n):\n    '''\n    Write a python function to check if the number is prime or not.\n    '''\n    \n    #base case\n    if n <= 0:\n        return False\n    \n    #recursive step\n    if n == 1 or n == 2 or n == 3 or n == 5 or n == 7:\n        return True\n    \n    #recursive step\n    if n % 2 == 0:\n        return False\n    \n    return is_prime_number(n-1)\n    \n    \ndef is_palindrome(n):\n    '''\n    Write a python function to check if the number is a palindrome or not.\n    '''\n    \n    #base case\n    if n < 1:\n        return False\n    \n    #recursive step\n    if n == 1:\n        return True\n    \n    if str(n) == str(n)[::-1]:\n        return True\n    \n    return is_palindrome(n-1)\n    \n    \ndef count_characters(string,ch):\n    '''\n    Write a python function to count the occurrences of character in string\n    '''\n    \n    #base case\n    if string == None or string == '' or ch == None or ch == '':\n        return 0\n    \n    #recursive step\n    if string[0] == ch:\n        return 1 + count_characters(string[1:],ch)\n    \n    return count_characters(string[1:],ch)\n    \n    \ndef count_characters_using_stack(string,ch):\n    '''\n    Write a python function to count the occurrences of character in string\n    '''\n    \n    #base case\n    if string == None or string == '' or ch == None or ch == '':\n        return 0\n    \n    #recursive step\n    if string[0] == ch:\n        return 1 + count_characters_using_stack(string[1:],ch)\n    \n    #recursive step\n    stack = []\n    stack.append(string[0])\n    count = 0\n    \n    for i in range(1,len(string)):\n        if string[i] == stack[-1]:\n            count += 1\n        else:\n            count = 0\n        stack.append(string[i])\n        \n    return count\n    \n    \ndef reverse_string(s):\n    '''\n    Write a python function to reverse the string\n    '''\n    \n    #base case\n    if s == None or len(s) == 0:\n        return ''\n    \n    #recursive step\n    if len(s) == 1:\n        return s\n    \n    return s[-1] + reverse_string(s[0:-1])\n    \n    \ndef is_pangram(sentence):\n    '''\n    Write a python function to check if the sentence is a pangram or not.\n    '''\n    \n    #base case\n    if sentence == None or sentence == '':\n        return False\n    \n    #recursive step\n    if len(sentence) <= 1:\n        return True\n    \n    if sentence[0].lower() not in string.ascii_lowercase:\n        return False\n    \n    if sentence[-1].lower() not in string.ascii_lowercase:\n        return False\n    \n    for i in range(0,len(sentence)-1):\n        if sentence[i].lower() not in string.ascii_lowercase:\n            return False\n    \n    return is_pangram(sentence[0:-1])\n    \n    \ndef is_pangram_using_stack(sentence):\n    '''\n    Write a python function to check if the sentence is a pangram or not.\n    '''\n    \n    #base case\n    if sentence == None or sentence == '':\n        return False\n    \n    #recursive step\n    if len(sentence) <= 1:\n        return True\n    \n    if sentence[0].lower() not in string.ascii_lowercase:\n        return False"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    else:\n        if n&(n-1)==0:\n            return 1\n        else:\n            return 2\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    count = 0\n    while True:\n        if 2 ** count <= n:\n            count += 1\n        else:\n            break\n    return count - 1\n    \n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # initialize the value of lucas number\n    # lucas = 0\n    # if n == 1:\n    #     return 2\n    # elif n == 2:\n    #     return 3\n    # else:\n    #     for i in range(1,n):\n    #         lucas += 1\n    # return lucas\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 1:\n        return -1\n    else:\n        return find_lucas(n - 1) + 2*find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = lucas_sequence_generator(n)\n    return lucas\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 1:\n        return 1\n    return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 2: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.append(string)\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return ['{}'.format(x) for x in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return list_.format(string)\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return list_.map(lambda x: '{}'.format(string))\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return ['{}'.format(string) for element in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.append(string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = format(list_[i], string)\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for x in list_:\n        print(string % x)\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [format_string % item for item in list_]\n    #return list(map(format_string % item, list_))\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return list_.__format__(string)\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    a = l1\n    b = l2\n    c = l3\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = dict()\n    for i in range(len(l1)):\n        key = l1[i]\n        value = l2[i]\n        d.update({key: value})\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    res = {}\n    for i in l1:\n        res[i] = {}\n        for j in l2:\n            res[i][j] = {}\n            for k in l3:\n                res[i][j][k] = 0\n    return res\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d={}\n    for i in range(len(l1)):\n        d[l1[i]]={}\n        d[l1[i]][l2[i]]=l3[i]\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    new_dictionary = {}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    for i in range(len(l1)):\n        dictionary[l1[i]] = l2[i]\n        dictionary[l1[i]] = l3[i]\n    return dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # l1 = ['Key1', 'Key2', 'Key3']\n    # l2 = ['value1', 'value2', 'value3']\n    # l3 = ['K1', 'K2', 'K3', 'K4', 'K5']\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {}\n    for idx in range(0, len(l1)):\n        nested_dict[l2[idx]] = l3[idx]\n    return nested_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    print(\"Original 1st list: \", l1)\n    print(\"Original 2nd list: \", l2)\n    print(\"Original 3rd list: \", l3)\n    \n    dict1 = {l1[i] : l2[i] for i in range(len(l1))}\n    dict2 = {l3[i] : l1[i] for i in range(len(l3))}\n    dict3 = {l2[i] : l3[i] for i in range(len(l2))}\n    \n    print(\"\\n\\nNested dictionary of 1st list: \", dict1)\n    print(\"Nested dictionary of 2nd list: \", dict2)\n    print(\"Nested dictionary of 3rd list: \", dict3)\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    new_dict = {}\n    \n    if len(l1)!= len(l2) or len(l1)!= len(l3):\n        return None\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 0:\n        return 0\n    return max(get_max_sum(n//2), get_max_sum(n//3), get_max_sum(n//4), get_max_sum(n//5)) + n\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return max((get_max_sum(int(n/2)), get_max_sum(int(n/3)), get_max_sum(int(n/4)), get_max_sum(int(n/5)) + n))\n    # return max((get_max_sum(int(n/2)), get_max_sum(int(n/3)), get_max_sum(int(n/4)), get_max_sum(int(n/5)) + n))\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f_simple(n):\n        if n == 0 or n == 1:\n            return n\n        return max(f_simple(n/2), f_simple(n/3), f_simple(n/4), f_simple(n/5)) + n\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if(n<0):\n        return 0\n    return max(get_max_sum(n//2), get_max_sum(n//3), get_max_sum(n//4), get_max_sum(n//5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # 3 nested loop.\n    # Outer loop to check if the n/2, n/3, n/4, or n/5 is the maximum.\n    # Inner loop to check if the n/2, n/3, or n/4 is maximum\n    # Check if the n/2, n/3, or n/4 is the maximum\n    # If yes, update the global maximum.\n    \n    # Outer loop\n    for i in range(1, n):\n        for j in range(1, n):\n            for k in range(1, n):\n                for l in range(1, n):\n                    if (i + j + k + l) == n:\n                        # print(i, j, k, l)\n                        if i >= j and i >= k and i >= l:\n                            maximum = max(i, j, k, l)\n                            if maximum == i:\n                                return i\n                            elif maximum == j:\n                                return j\n                            elif maximum == k:\n                                return k\n                            else:\n                                return l\n                    \n    \n    return -1\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    return get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def max_sum (n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 4\n        else:\n            return max(max_sum(n//2) + max_sum(n//3) + max_sum(n//4) + max_sum(n//5), n)\n    return max_sum(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        if n == 0:\n            return 0\n        return max(f(n/2), f(n/3), f(n/4), f(n/5)) + n\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    '''\n    #Solution 1.\n    #Brute Force Solution\n    def get_max_sum (n):\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 4\n        if n == 4:\n            return 6\n        if n == 5:\n            return 8\n        if n == 6:\n            return 10\n        if n == 7:\n            return 12\n        if n == 8:\n            return 14\n        if n == 9:\n            return 16\n        if n == 10:\n            return 18\n        if n == 11:\n            return 20\n        if n == 12:\n            return 22\n        if n == 13:\n            return 24\n        if n == 14:\n            return 26\n        if n == 15:\n            return 28\n        if n == 16:\n            return 30\n        if n == 17:\n            return 32\n        if n == 18:\n            return 34\n        if n == 19:\n            return 36\n        if n == 20:\n            return 38\n        if n == 21:\n            return 40\n        if n == 22:\n            return 42\n        if n == 23:\n            return 44\n        if n == 24:\n            return 46\n        if n == 25:\n            return 48\n        if n == 26:\n            return 50\n        if n == 27:\n            return 52\n        if n == 28:\n            return 54\n        if n == 29:\n            return 56\n        if n == 30:\n            return 58\n        if n == 31:\n            return 60\n        if n == 32:\n            return 62\n        if n == 33:\n            return 64\n        if n == 34:\n            return 66\n        if n == 35:\n            return 68\n        if n == 36:\n            return 70\n        if n == 37:\n            return 72\n        if n == 38:\n            return 74\n        if n == 39:\n            return 76\n        if n == 40:\n            return 78\n        if n == 41:\n            return 80\n        if n == 42:\n            return 82\n        if n == 43:\n            return 84\n        if n == 44:\n            return 86\n        if n == 45:\n            return 88\n        if n == 46:\n            return 90\n        if n == 47:\n            return 92\n        if n == 48:\n            return 94\n        if n == 49:\n            return 96\n        if n == 50:\n            return 98\n        if n == 51:\n            return 100\n        if n == 52:\n            return 102\n        if n == 53:\n            return 104\n        if n == 54:\n            return 106\n        if n == 55:\n            return 108\n        if n == 56:\n            return 110\n        if n == 57:\n            return 112\n        if n == 58:\n            return 114\n        if n == 59:\n            return 116\n        if n == 60:\n            return 118\n        if n == 61:\n            return 120\n        if n == 62:\n            return 122\n        if n == 63:\n            return 124\n        if n == 64:\n            return 126\n        if n == 65:\n            return 128\n        if n == 66:\n            return 130\n        if n == 67:\n            return 132\n        if n == 68:\n            return 134\n        if n == 69:\n            return 136\n        if n == 70:\n            return 138\n        if n == 71:\n            return 140\n        if n == 72:\n            return 142\n        if n == 73:\n            return 144\n        if n == 74:\n            return 146\n        if n == 75:\n            return 148\n        if n == 76:\n            return 150\n        if n == 77:\n            return 152\n        if n == 78:\n            return 154\n        if n == 79:\n            return 156\n        if n == 80:\n            return 158\n        if n == 81:\n            return 160\n        if n == 82:\n            return 162\n        if n == 83:\n            return 164\n        if n == 84:\n            return 166\n        if n == 85:\n            return 168\n        if n == 86:\n            return 170\n        if n == 87:\n            return 172\n        if n == 88:\n            return 174\n        if n == 89:\n            return 176\n        if n == 90:\n            return 178\n        if n == 91:\n            return 180\n        if n == 92:\n            return 182\n        if n == 93:\n            return 184\n        if n == 94:\n            return 186\n        if n == 95:\n            return 188\n        if n == 96:\n            return 190\n        if n == 97:\n            return 192\n        if n == 98:\n            return 194\n        if n == 99:\n            return 196\n        if n == 100:\n            return 198\n        if n == 101:\n            return 200\n        if n == 102:\n            return 202\n        if n == 103:\n            return 204\n        if n == 104:\n            return 206\n        if n == 105:\n            return 208\n        if n == 106:\n            return 210\n        if n == 107:\n            return 212\n        if n == 108:\n            return 214\n        if n == 109:\n            return 216\n        if n == 110:\n            return 218\n        if n == 111:\n            return 220\n        if n == 112:\n            return 222\n        if n == 113:\n            return 224\n        if n == 114:\n            return 226\n        if n == 115:\n            return 228\n        if n == 116:\n            return 230\n        if n == 117:\n            return 232\n        if n == 118:\n            return 234\n        if n == 119:\n            return 236\n        if n == 120:\n            return 238\n        if n == 121:\n            return 240\n        if n == 122:\n            return 242\n        if n == 123:\n            return 244\n        if n == 124:\n            return 246\n        if n == 125:\n            return 248\n        if n == 126:\n            return 250\n        if n == 127:\n            return 252\n        if n == 128:\n            return 254\n        if n == 129:\n            return 256\n        if n == 130:\n            return 258\n        if n == 131:\n            return 260\n        if n == 132:\n            return 262\n        if n == 133:\n            return 264\n        if n == 134:\n            return 266\n        if n == 135:\n            return 268\n        if n == 136:\n            return 270\n        if n == 137:\n            return 272\n        if n == 138:\n            return 274\n        if n == 139:\n            return 276\n        if n == 140:\n            return 278\n        if n == 141:\n            return 280\n        if n == 142:\n            return 282\n        if n == 143:\n            return 284\n        if n == 144:\n            return 286\n        if n == 145:\n            return 288\n        if n == 146:\n            return 290\n        if n == 147:\n            return 292\n        if n == 148:\n            return 294\n        if n == 149:\n            return 296\n        if n == 150:\n            return 29"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    def max_sum_1(n):\n        return max(n, max_sum_1(n//2), max_sum_1(n//3), max_sum_1(n//4), max_sum_1(n//5)) + n\n    \n    return max_sum_1(n)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    list_max = []\n    for i in range(len(input_list)):\n        if input_list.count(input_list[i]) == 1:\n            list_max.append(input_list[i])\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length = 0\n    max_length = 0\n    max_length_list = []\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = -1\n    max_val = None\n    for val in input_list:\n        if max_len < len(val):\n            max_len = len(val)\n            max_val = val\n    return max_val\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_index = 0\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if not input_list:\n        return []\n    max_length = 0\n    for item in input_list:\n        if max_length < len(item):\n            max_length = len(item)\n    return input_list[:max_length]\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    len_list = []\n    for i in input_list:\n        len_list.append(len(i))\n    return max(len_list)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    len_list = []\n    for num in input_list:\n        len_list.append(len(num))\n    max_len = max(len_list)\n    return len_list.index(max_len)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = -1\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return max_length\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in range(len(test_tup)):\n        for j in range(len(test_tup)):\n            if i!= j and test_tup[i] == test_tup[j]:\n                return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    s = set()\n    for i in test_tup:\n        if i in s:\n            return False\n        else:\n            s.add(i)\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    return False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    try:\n        set(test_tup)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    \n    test_list = []\n    if len(test_tup) <= 1:\n        return True\n    for x in test_tup:\n        if x not in test_list:\n            test_list.append(x)\n    if len(test_list) > 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    list_of_data = []\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    pass\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    #print(set(test_tup))\n    #print(len(set(test_tup)))\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    ans = \"\"\n    for i in range(len(str1)):\n        if str1.count(str1[i]) == 1:\n            ans = str1[i]\n            break\n    return ans\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if str1 == None:\n        return None\n    if len(str1) == 0:\n        return None\n    \n    hash_map = {}\n    for char in str1:\n        if char in hash_map.keys():\n            hash_map[char] += 1\n        else:\n            hash_map[char] = 1\n    \n    for key in hash_map:\n        if hash_map[key] == 1:\n            return key\n    \n    return None\n    \ndef second_non_repeating_character(str1):\n    '''\n    Write a python function to find the second non-repeated character in a given string.\n    '''\n    if str1 == None:\n        return None\n    if len(str1) == 0:\n        return None\n    \n    hash_map = {}\n    for char in str1:\n        if char in hash_map.keys():\n            hash_map[char] += 1\n        else:\n            hash_map[char] = 1\n    \n    for key in hash_map:\n        if hash_map[key] == 1:\n            return key\n    \n    return None\n    \n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    res=''\n    for i in range(len(str1)):\n        if str1[i] not in res:\n            res+=str1[i]\n    print(res)\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char not in char_set:\n            char_set.add(char)\n        else:\n            char_set.remove(char)\n    if char_set == set():\n        return 'Empty String'\n    return next(iter(char_set))\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_set = []\n    for char in str1:\n        if char not in char_set:\n            char_set.append(char)\n    return char_set[0]\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    # my_hash = {}\n    \n    # for i in str1:\n    #     if i in my_hash:\n    #         my_hash[i] += 1\n    #     else:\n    #         my_hash[i] = 1\n    \n    # for i in my_hash:\n    #     if my_hash[i] == 1:\n    #         return i\n    \n    # if str1 == '':\n    #     return None\n    \n    my_hash = {}\n    for i in range(0,len(str1)):\n        if str1[i] in my_hash:\n            my_hash[str1[i]] += 1\n        else:\n            my_hash[str1[i]] = 1\n        \n        if my_hash[str1[i]] == 1:\n            return str1[i]\n    \n    return None\n    \n    \n    \n    \n    \n    \n    \ndef word_break(str1,str2):\n    '''\n    Write a python function to check whether a given string can be segmented into two\n    substrings of equal lengths.\n    '''\n    \n    # 1. Check if it's a blank string\n    # 2. Check if it's a substring of other strings\n    \n    if str1 == '' or str2 == '':\n        return False\n    \n    # if str1 == str2:\n    #     return True\n    \n    # let's try all the possibilies\n    \n    # check if the strings are of equal length\n    \n    if len(str1)!= len(str2):\n        return False\n    \n    # if len(str1) == len(str2):\n    #     # check if the strings can be segmented\n    #     if len(str1) % 2 == 0:\n    #         return word_break(str1[:len(str1)/2],str2) and word_break(str1[len(str1)/2:],str2)\n    \n    #     else:\n    #         return word_break(str1[:len(str1)/2],str2) or word_break(str1[len(str1)/2+1:],str2)\n    \n    # else:\n    #     return False\n    \n    # Now, if the strings are of even length\n    \n    # check if the strings can be segmented\n    \n    if len(str1) % 2 == 0:\n        return word_break(str1[:len(str1)/2],str2) and word_break(str1[len(str1)/2:],str2)\n    \n    else:\n        return word_break(str1[:len(str1)/2],str2) or word_break(str1[len(str1)/2+1:],str2)\n    \n    \ndef is_paliindrome(str1):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    \n    if str1 == '':\n        return True\n    \n    str1_list = str1.split(' ')\n    str1_list = list(map(lambda x: x.lower(),str1_list))\n    \n    \n    str1_list.sort()\n    \n    for i in range(len(str1_list)):\n        if str1_list[i]!= str1_list[len(str1_list)-1-i]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if not str1:\n        return None\n    str1 = \"\".join(sorted(str1))\n    for i in range(len(str1)):\n        if str1[i] not in str1[i+1:]:\n            return str1[i]\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char = \"\"\n    for i in range(len(str1)):\n        if str1.count(str1[i])==1:\n            char = str1[i]\n            break\n    return char\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    d = {}\n    for x in str1:\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\n    for y in str1:\n        if d[y] == 1:\n            return y\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    counter = 0\n    \n    # a dict with keys: values\n    dict_ = {}\n    \n    for char in str1:\n        if char not in dict_:\n            dict_[char] = 0\n        dict_[char] += 1\n    \n    # print(dict_)\n    \n    for key, value in dict_.items():\n        if value == 1:\n            counter = key\n            break\n    \n    return counter\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    string = list(string)\n    if (string[0] == string[-1]) and (string[0]!= \" \"):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(re.match(regex,string)):\n        return True\n    return False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # if string == \"\": \n    #     return False\n    # for i in range(len(string)): \n    #     if i == len(string)-1: \n    #         break\n    #     if string[i]!= string[i+1]: \n    #         return False\n    # return True\n    return len(string) > 0 and (string[0] == string[-1])\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string)\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0] == string[-1]\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (re.search(regex, string)):\n        return \"True\"\n    else:\n        return \"False\"\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    #Use Regular expression\n    #Result -> True/False\n    return bool(re.match(regex,string))\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (re.match(regex, string)):\n        return True\n    else:\n        return False\n        \n    \n        \nif __name__ == '__main__': \n    \n    string = 'abc'\n    print(check_char(string)) \n    \n    string = 'a'\n    print(check_char(string)) \n    \n    string = 'a.b'\n    print(check_char(string)) \n    \n    string = 'ab.a'\n    print(check_char(string)) \n    \n    string = 'ab.a.'\n    print(check_char(string)) \n    \n    string = 'a-b-c'\n    print(check_char(string)) \n    \n    string = 'a-b.c'\n    print(check_char(string)) \n    \n    string = 'abc.'\n    print(check_char(string)) \n    \n    string = 'a.bc'\n    print(check_char(string)) \n    \n    string = 'a.bc.'\n    print(check_char(string)) \n    \n    string = 'a.bc.d'\n    print(check_char(string)) \n    \n    string = 'a..b'\n    print(check_char(string)) \n    \n    string = 'a.a.'\n    print(check_char(string)) \n    \n    string = 'ab.bc.'\n    print(check_char(string)) \n    \n    string = 'ab.abc.'\n    print(check_char(string)) \n    \n    string = 'a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a.a."
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    string = str(string)\n    print(string.startswith(string[0]))\n    print(string.endswith(string[0]))\n    print(string.startswith(string[-1]))\n    print(string.endswith(string[-1]))\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    list = [a,b,c]\n    list.sort()\n    list = sorted(list)\n    if len(list) == 1:\n        return list[0]\n    else:\n        if len(list)%2 == 0:\n            return (list[int(len(list)/2)] + list[int(len(list)/2 - 1)])/2\n        else:\n            return list[int(len(list)/2)]\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_nums = sorted([a,b,c])\n    if len(sorted_nums) == 1:\n        median = sorted_nums[0]\n    elif len(sorted_nums) == 2:\n        median = (sorted_nums[0] + sorted_nums[1])/2\n    elif len(sorted_nums) == 3:\n        median = (sorted_nums[0] + sorted_nums[1] + sorted_nums[2])/3\n    else:\n        median = None\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    assert type(a)==int and type(b)==int and type(c)==int, \"All inputs should be integers.\"\n    assert a>=b and b>=c, \"All inputs should be greater than or equal to zero.\"\n    assert a<=b+c, \"All inputs should be less than or equal to b+c\"\n    if a<b and a<c:\n        return a\n    if b<a and b<c:\n        return b\n    if c<a and c<b:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    if a <= b <= c or b <= a <= c:\n        return a\n    elif a <= b <= c or a <= b <= c:\n        return b\n    elif a <= b <= c or a <= c <= b:\n        return c\n    else:\n        return a\n        \n        "
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if b > c:\n            return b\n        else:\n            return c\n    else:\n        if a > c:\n            return a\n        else:\n            return c\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if (a+b+c) % 2 == 0:\n        return (a+b+c)//2\n    else:\n        return sorted([a,b,c])[1]\nprint(median_numbers(3,6,7))\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return (a+b+c)-(max(a,b,c)+(min(a,b,c)-max(a,b,c)))\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    all_values = [a, b, c]\n    all_values.sort()\n    numbers = all_values[1]\n    return numbers\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return sorted([a,b,c])[1]\nprint(median_numbers(2,3,4))\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    list_of_values = sorted([a,b,c])\n    \n    if list_of_values[0] + list_of_values[1] > list_of_values[2]:\n        return (list_of_values[1]+list_of_values[2])/2\n    \n    else:\n        return (list_of_values[0]+list_of_values[2])/2\n        \n    \n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(map(int, list(str(num))))\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(n) for n in nums])\n    \n    \ndef is_isogram(word):\n    '''\n    Write a function to check if a word is an isogram or not.\n    '''\n    return True if len(word) == len(set(word)) else False\n    \n    \ndef find_max(nums):\n    '''\n    Write a function that takes a list of numbers and returns the largest number in the list.\n    '''\n    return max(nums)\n    \n    \ndef find_min(nums):\n    '''\n    Write a function that takes a list of numbers and returns the smallest number in the list.\n    '''\n    return min(nums)\n    \n    \ndef get_length(nums):\n    '''\n    Write a function that takes a list of numbers and returns the length of the list.\n    '''\n    return len(nums)\n    \n    \ndef reverse_string(s):\n    '''\n    Write a function that takes a string and returns it in reverse order.\n    '''\n    return s[::-1]\n    \n    \ndef has_duplicates(nums):\n    '''\n    Write a function that takes a list and returns a boolean indicating whether there are duplicate values in the list.\n    '''\n    return True if len(nums)!= len(set(nums)) else False\n    \n    \ndef two_list_sum(list1, list2):\n    '''\n    Write a function that takes in a list and 2 lists of numbers. It returns a list that contains all the numbers in the first list \n    that are in the second list in the same order as they appear in the first list, with numbers from the first list \n    appearing in the second list.\n    '''\n    return list(set(list1).intersection(set(list2)))\n    \n    \ndef reverse_list(nums):\n    '''\n    Write a function that takes in a list and returns that list with values reversed.\n    '''\n    return nums[::-1]\n    \n    \ndef is_anagram(word1, word2):\n    '''\n    Write a function that takes in 2 words and determines if they are anagrams or not.\n    '''\n    return True if sorted(word1) == sorted(word2) else False\n    \n    \ndef find_subset(nums):\n    '''\n    Write a function that takes in a list of numbers and returns all the possible subsets in a list of lists, \n    of the given list.\n    '''\n    return [[n] for n in nums] + [[]] + [[n, n] for n in nums]\n    \n    \ndef sum_odd_digits(n):\n    '''\n    Write a function that takes a positive integer and returns the sum of all the digits in the number.\n    '''\n    return sum([int(n) for n in str(n)]) % 2 == 1\n    \n    \ndef odd_number_of_divisors(n):\n    '''\n    Write a function that takes a number and returns the number of positive divisors of a number.\n    '''\n    return sum([i for i in range(1, n) if n % i == 0]) % 2 == 1\n    \n    \ndef remove_duplicates(s):\n    '''\n    Write a function that takes a string and removes all duplicates from the string.\n    '''\n    return ''.join(set(s))\n    \n    \ndef sum_divisible_by(nums, d):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of all the numbers that are divisible by d.\n    '''\n    return sum([i for i in nums if i % d == 0])\n    \n    \ndef append_tuple(tup1, tup2):\n    '''\n    Write a function that takes in a tuple and returns a tuple with the elements from the first tuple appended to the end of the second tuple.\n    '''\n    return (tup1[0], tup1[1], tup1[2], tup2[0], tup2[1], tup2[2])\n    \n    \ndef format_phone_number(phone):\n    '''\n    Write a function that takes a string with the format of a phone number and returns a string in the format of a phone number.\n    '''\n    return phone[:3] + '-' + phone[3:6] + '-' + phone[6:10]\n    \n    \ndef find_list_sum(list1, list2):\n    '''\n    Write a function that takes in two lists and returns the sum of the elements in the second list in the first list.\n    '''\n    return sum(list2)\n    \n    \ndef get_max_sum_sublist(list1):\n    '''\n    Write a function that takes in a list of numbers and returns the maximum sum of a sublist of numbers.\n    '''\n    return sum(list1)\n    \n    \ndef get_median(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the median of the list.\n    '''\n    return sorted(nums)[len(nums) // 2]\n    \n    \ndef get_percentile(nums, percentile):\n    '''\n    Write a function that takes in a list of numbers and returns the percentile of the list.\n    '''\n    return sorted(nums)[(len(nums) * percentile) // 100]\n    \n    \ndef get_avg(nums):\n    '''\n    Write a function that takes in a list of numbers and returns the average of the list.\n    '''\n    return sum(nums) / len(nums)\n    \n    \ndef get_grade(score):\n    '''\n    Write a function that takes in a score and returns the grade of the student.\n    '''\n    if score >= 90 and score <= 100:\n        return 'A'\n    elif score >= 80 and score < 90:\n        return 'B'\n    elif score >= 70 and score < 80:\n        return 'C'\n    elif score >= 60 and score < 70:\n        return 'D'\n    elif score < 60:\n        return 'F'\n    \n    \ndef is_prime(n):\n    '''\n    Write a function that takes in a positive integer and returns True if it is prime, otherwise, return False.\n    '''\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome, otherwise, return False.\n    '''\n    return s == reverse_string(s)\n    \n    \ndef get_first_n_prime_numbers(n):\n    '''\n    Write a function that takes in a positive integer and returns the first n prime numbers.\n    '''\n    prime_list = []\n    for i in range(2, n + 1):\n        if is_prime(i):\n            prime_list.append(i)\n    return prime_list\n    \n    \ndef reverse_each_word(str):\n    '''\n    Write a function that takes in a string and returns a new string where each word is reversed.\n    '''\n    return str[::-1]\n    \n    \ndef has_duplicates(s):\n    '''\n    Write a function that takes in a string and returns True if it has any duplicate letters, otherwise, return False.\n    '''\n    return len(s)!= len(set(s))\n    \n    \ndef is_monotonic(nums):\n    '''\n    Write a function that takes in a list of integers and returns True if the list is monotonic, otherwise, return False.\n    '''\n    return sorted(nums) == nums\n    \n    \ndef get_nth_prime(n):\n    '''\n    Write a function that takes in a positive integer n and returns the nth prime number.\n    '''\n    prime_list = get_first_n_prime_numbers(n)\n    return prime_list[n - 1]\n    \n    \ndef find_max_consecutive_ones(nums):\n    '''\n    Write a function that take"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    for i in nums:\n        total = 0\n        while i > 0:\n            total += i % 10\n            i = i // 10\n        print(total)\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits_of_list = list()\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    if nums == None:\n        return 0\n    else:\n        return sum(int(x) for x in str(nums))\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for x in nums:\n        total += int(x)\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(x) for x in nums)\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    res = []\n    for i in nums:\n        res.append(sum(map(int, str(i))))\n    return res\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits_of_numbers = []\n    for num in nums:\n        sum_of_digits_of_numbers.append(sum(int(i) for i in str(num)))\n    return sum_of_digits_of_numbers\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in nums])\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor = 0\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            xor = xor ^ test_tup1[i] ^ test_tup2[i]\n    else:\n        raise Exception(\"Input tuple must have the same length\")\n    return xor\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup3 = ()\n    for num1, num2 in zip(test_tup1, test_tup2):\n        xor = num1 ^ num2\n        test_tup3 = test_tup3 + (xor,)\n    return test_tup3\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        result = []\n        for i in range(len(test_tup1)):\n            xor_result = ~test_tup1[i] ^ test_tup2[i]\n            result.append(xor_result)\n        return result\n    else:\n        return None\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    #initializing the output tuple\n    output_tuple = ()\n    #converting the tuples to the integer type\n    int_tup1 = int(test_tup1)\n    int_tup2 = int(test_tup2)\n    #performing the xor operation\n    xor_val = int_tup1 ^ int_tup2\n    #converting the xor value to the string type\n    xor_val = str(xor_val)\n    #appending the xor value to the output tuple\n    output_tuple = (xor_val)\n    #returning the output tuple\n    return output_tuple\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    res = ()\n    for x, y in zip(test_tup1, test_tup2):\n        res += (x ^ y,)\n    return res\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a^b for a,b in zip(test_tup1,test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = (\n        test_tup1[0] ^ test_tup2[0],\n        test_tup1[1] ^ test_tup2[1],\n        test_tup1[2] ^ test_tup2[2],\n        test_tup1[3] ^ test_tup2[3]\n    )\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_tup = (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n    return xor_tup\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    \n    # Initialize the output variable\n    output_list = []\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(tuple(i) for i in test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    result = []\n    result.append(len(test_list))\n    return result\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    output = []\n    for i in range(len(test_list)):\n        temp = []\n        for j in range(len(test_list)):\n            if test_list[i][j] in temp:\n                continue\n            else:\n                temp.append(test_list[i][j])\n        output.append(len(temp))\n    return output\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    a = set(test_list)\n    print(a)\n    return len(a)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list = test_list\n    d = {}\n    for i in test_list:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(tuple(t) for t in test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # return len(set(test_list))\n    return len(set(map(tuple, test_list)))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    ans = 0\n    if len(test_list) == 0:\n        return 0\n    ans = len(set(tuple(t) for t in test_list))\n    return ans\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list = test_list.split()\n    test_list = map(int, test_list)\n    test_set = set(test_list)\n    return len(test_set)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    ret_tup = []\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            ret_tup.append((test_tup1[i][0] + test_tup2[i][0], test_tup1[i][1] + test_tup2[i][1]))\n        else:\n            ret_tup.append((test_tup1[i][0] + 0, test_tup1[i][1] + 0))\n    return ret_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    temp = []\n    for i in range(len(test_tup1)):\n        temp.append((test_tup1[i][0] + test_tup2[i][0], test_tup1[i][1] + test_tup2[i][1]))\n    return temp\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # s1 = s2 = 0\n    # for i in range(len(test_tup1)):\n    #     s1 += test_tup1[i][0]\n    #     s2 += test_tup1[i][1]\n    # print(s1, s2)\n    test_tup1 = (1, 2, 3, 4)\n    test_tup2 = ('a', 'b', 'c', 'd')\n    s1 = 0\n    s2 = 0\n    for i in range(len(test_tup1)):\n        s1 += test_tup1[i]\n        s2 += test_tup2[i]\n    print(s1, s2)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(sum(x) for x in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    sum_tuple = ()\n    for i, j in zip(test_tup1, test_tup2):\n        sum_tuple = sum_tuple + (i+j,)\n    print(sum_tuple)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    l1 = list(test_tup1)\n    l2 = list(test_tup2)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    i,j = 0,0\n    res = []\n    while i < len(test_tup1) and j < len(test_tup2):\n        res.append(add_nested_elements(test_tup1[i],test_tup2[j]))\n        i += 1\n        j += 1\n    while i < len(test_tup1):\n        res.append(test_tup1[i])\n        i += 1\n    while j < len(test_tup2):\n        res.append(test_tup2[j])\n        j += 1\n    return tuple(res)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for tup in zip(test_tup1, test_tup2):\n        for i in range(len(tup[0])):\n            result.append(tup[0][i] + tup[1][i])\n    print(result)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    l1, l2 = test_tup1\n    l3, l4 = test_tup2\n    for i in range(len(l1)):\n        l1[i] = l1[i] + l2[i]\n    for j in range(len(l3)):\n        l3[j] = l3[j] + l4[j]\n    return l1, l3\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(a + b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \nprint(minimum(2,5))\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        print(a,\"is the minimum\")\n    elif a==b:\n        print(\"Both are equal\")\n    else:\n        print(b,\"is the minimum\")\nminimum(a=int(input(\"enter a\")),b=int(input(\"enter b\")))\nminimum(b=int(input(\"enter b\")),a=int(input(\"enter a\")))\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        print(f\"The minimum of {a} and {b} is {b}\")\n    else:\n        print(f\"The minimum of {a} and {b} is {a}\")\n    \n    \nminimum(10,20)\nminimum(10,100)\n    \n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    #m = max(a,b)\n    if a>b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return any(tuplex[0]==tuple1[0] for tuplex in tuple1)\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return True if tuplex == tuple1 else False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex == tuple1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex.count(tuple1) > 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n    \n    \n    "
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex: \n        if i in tuple1: \n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if (tuple1 in tuplex):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return False\n    else:\n        return True\n        \ndef find_Triangular_number(x):\n    '''\n    Write a python function to find whether the given number is triangular number.\n    '''\n    if x == 1:\n        return False\n    else:\n        n = 1\n        while n < x:\n            if x % n == 0:\n                return False\n            else:\n                n += 1\n        return True\n        \ndef find_prime_number(x):\n    '''\n    Write a python function to find whether the given number is prime number or not.\n    '''\n    if x > 1:\n        for i in range(2, x):\n            if x % i == 0:\n                return False\n        return True\n    else:\n        return False\n        \ndef find_Prime_number(x):\n    '''\n    Write a python function to find whether the given number is prime number or not.\n    '''\n    if x > 1:\n        for i in range(2, x):\n            if x % i == 0:\n                return False\n        return True\n    else:\n        return False\n        \ndef is_prime(x):\n    '''\n    Write a python function to check whether a number is prime number or not.\n    '''\n    if x > 1:\n        for i in range(2, x):\n            if x % i == 0:\n                return False\n        return True\n    else:\n        return False\n    \ndef find_squares(x):\n    '''\n    Write a python function to find squares of a given number.\n    '''\n    while x >= 0:\n        if x == 0:\n            return 0\n        elif x % 10 == 0:\n            return False\n        else:\n            return (x*x)\n            \ndef find_max_sum(x, y):\n    '''\n    Write a python function to find maximum of two numbers.\n    '''\n    if x > y:\n        return x\n    else:\n        return y\n        \ndef find_Max_sum(x):\n    '''\n    Write a python function to find maximum of a list of numbers.\n    '''\n    max = 0\n    for i in range(len(x)):\n        if x[i] > max:\n            max = x[i]\n    return max\n        \ndef find_same_num(x):\n    '''\n    Write a python function to find maximum of a list of numbers.\n    '''\n    s = x[0]\n    for i in range(1, len(x)):\n        if x[i] == s:\n            return True\n    return False\n        \ndef find_swap_pair(x):\n    '''\n    Write a python function to find maximum of a list of numbers.\n    '''\n    for i in range(len(x)):\n        for j in range(len(x)):\n            if x[i] < x[j] and i!= j:\n                return True\n    return False\n        \ndef find_Greatest_common_divisor(x, y):\n    '''\n    Write a python function to find the greatest common divisor of given numbers.\n    '''\n    while x!= y:\n        if x > y:\n            x = x-y\n        else:\n            y = y-x\n    return x\n        \ndef find_Greatest_Common_Divisor(x, y):\n    '''\n    Write a python function to find the greatest common divisor of given numbers.\n    '''\n    while x!= y:\n        if x > y:\n            x = x-y\n        else:\n            y = y-x\n    return x\n        \ndef find_Factors(x):\n    '''\n    Write a python function to find factors of a given number.\n    '''\n    factors = []\n    for i in range(1, x+1):\n        if x % i == 0:\n            factors.append(i)\n    return factors\n        \ndef find_Factors(x):\n    '''\n    Write a python function to find factors of a given number.\n    '''\n    factors = []\n    for i in range(1, x+1):\n        if x % i == 0:\n            factors.append(i)\n    return factors\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2 == 1\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"the parity of the number is even\")\n    else:\n        print(\"the parity of the number is odd\")\n    return\ndef find_Parity_rec(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"the parity of the number is even\")\n    else:\n        return 1 - x % 2\n    return\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    print(\"Hello World\")\n    if x%2 == 0:\n        print(\"Paritric number\")\n    else:\n        print(\"Odd number\")\n        \nfind_Parity(12)\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x%2\n    \n    \ndef find_Parity2(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x%2\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x & 0x1 : \n        return \"odd\"\n    else:\n        return \"even\"\n    "
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    #returns 1 for odd, 0 for even.\n    \n    if x % 2 == 0: \n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x % 2) == 1\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    print(n)\n    digits = []\n    while n > 0:\n        digits.append(n%10)\n        n //= 10\n    bigger = 0\n    for i in range(len(digits)):\n        digits[i] = (bigger*10 + digits[i])\n        bigger = bigger % 10\n    return digits[0]*10**len(digits)\n    \n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = str(n)\n    ans = ''\n    while s:\n        for i in range(len(s)):\n            ans += str(int(s[-1-i])*(10**i))\n        s = s[:-1]\n    return int(ans)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    \n    while len(n) > 1:\n        i = 0\n        while i < len(n)-1:\n            if int(n[i]) > int(n[i+1]):\n                n = str(int(n[:i+1]) + int(n[i+1:]) + int(n[i]))\n                break\n            i += 1\n        if i == len(n)-1:\n            n = str(int(n[:i+1]) + int(n[i+1:]))\n    \n    return int(n)\n    \ndef rearrange_smaller(n):\n    '''\n    Write a function to create the next smaller number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    \n    while len(n) > 1:\n        i = 0\n        while i < len(n)-1:\n            if int(n[i]) < int(n[i+1]):\n                n = str(int(n[:i+1]) + int(n[i+1:]) + int(n[i]))\n                break\n            i += 1\n        if i == len(n)-1:\n            n = str(int(n[:i+1]) + int(n[i+1:]))\n    \n    return int(n)\n    \n    \n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(map(int, str(n)))\n    for i in range(len(n)):\n        if i!= len(n) - 1:\n            if n[i] < n[i+1]:\n                n[i], n[i+1] = n[i+1], n[i]\n    return int(''.join(map(str, n)))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    while n > 0:\n        digits = sorted(list(str(n)))\n        last_digit = digits.pop()\n        new_number = int(''.join(digits))\n        n = new_number\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    n_str = str(n)\n    \n    def is_next_bigger(a, b):\n        '''\n        Returns True if a > b and False otherwise\n        '''\n        \n        a_str = str(a)\n        b_str = str(b)\n        \n        if len(a_str) > len(b_str):\n            return True\n        \n        if len(a_str) == len(b_str):\n            return a_str > b_str\n        \n        return False\n    \n    \n    def find_next_bigger(a, b):\n        '''\n        Finds next bigger number\n        '''\n        \n        for i in range(len(a_str)-1, -1, -1):\n            if a_str[i] > b_str[i]:\n                return a_str[:i] + a_str[i+1:] + a_str[i]\n        \n        return a\n    \n    \n    \n    while is_next_bigger(n, n+1):\n        n = find_next_bigger(n, n+1)\n    return int(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    bigger_number = int(''.join(sorted(n, reverse = True)))\n    return bigger_number\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    if n[0] < n[1]:\n        n = n[1:] + n[0]\n    elif n[0] == n[1]:\n        n = n[2:] + n[0]\n    for i in range(len(n)):\n        if n[i] < n[i+1]:\n            n = n[i+1:] + n[i]\n    return int(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    str_num = str(n)\n    \n    # The same as the previous algo\n    while True:\n        if not str_num:\n            break\n        \n        if str_num[0] == '0':\n            str_num = str_num[1:]\n            continue\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    number_str = str(n)\n    if number_str[0] == '0':\n        return n+1\n    else:\n        s = int(number_str[::-1])\n        s_str = str(s)\n        return int(s_str[::-1] + number_str)\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2 or not k:\n        return []\n    # for each num in nums1, find the nearest num in nums2\n    # sort them, see how many times num in nums2 that num appears\n    # how many times this num appears in nums1\n    # compare the nums2 times and nums1, see which num appears more, if it appears more, add it to the result.\n    # since it is sorted, will always be less than k.\n    # if more times, add to result.\n    # if less times, add to result.\n    # 2 pointers, one moving inwards and another moving inwards\n    # make a heap of size k, make it move as far as possible\n    # add to heap\n    # return the min\n    # add two pointers\n    # when one pointer hits the end of nums1, swap and continue\n    # when nums2 pointer reaches the end of nums2, swap and continue\n    \n    # before doing a swap, if the nums1[i] > nums2[j], swap\n    # if nums1[i] < nums2[j], swap\n    heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (nums2[i], nums1[i]))\n    res = []\n    j = 0\n    while len(res) < k and heap:\n        curr = heapq.heappop(heap)\n        res.append((curr[1], curr[0]))\n        if j < len(nums2):\n            heapq.heappush(heap, (nums2[j], nums1[i]))\n            j += 1\n    return res\n    \ndef k_smallest_pairs_by_sorting(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # if not nums1 or not nums2 or not k:\n    #     return []\n    # nums1 = sorted(nums1)\n    # nums2 = sorted(nums2)\n    # for i in range(k):\n    #     if not nums2:\n    #         return nums1[:i]\n    #     if not nums1:\n    #         return nums2[:i]\n    #     if nums1[0] > nums2[0]:\n    #         nums1.pop(0)\n    #         nums2.pop(0)\n    #     else:\n    #         return nums1[:i] + nums2[:i]\n    # return []\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    res = []\n    for i in range(k):\n        if not nums2:\n            return res[:i]\n        if not nums1:\n            return nums2[:i]\n        if nums1[0] > nums2[0]:\n            nums1.pop(0)\n            nums2.pop(0)\n        else:\n            res.append((nums1[0], nums2[0]))\n            nums1.pop(0)\n            nums2.pop(0)\n    return res\n    "
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # edge cases\n    if len(nums1) < k or len(nums2) < k:\n        return []\n    if len(nums1) == 0:\n        return []\n    if len(nums2) == 0:\n        return []\n    # create an adjacency list \n    adjList = {}\n    for i in range(len(nums1)):\n        adjList[i] = set()\n    for i in range(len(nums2)):\n        adjList[i].add(i)\n    # get indices of nums1 and nums2\n    p1 = 0\n    p2 = 0\n    pairs = []\n    while True:\n        if p1 >= len(nums1):\n            break\n        if p2 >= len(nums2):\n            break\n        if p1 == p2:\n            break\n        a, b = nums1[p1], nums2[p2]\n        # update indices\n        p1 += 1\n        p2 += 1\n        # check if all matched\n        if a == b:\n            pairs.append([a,b])\n            if len(pairs) == k:\n                return pairs\n            continue\n        # add to adj list\n        adjList[a].add(b)\n        adjList[b].add(a)\n    return pairs\n    "
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def findKSmallestPairs(nums1, nums2, k):\n        if len(nums1) == 0 or len(nums2) == 0:\n            return []\n        heap = []\n        d = {}\n        # Create a dictionary of num1[i] -> i, num2[i] -> i\n        for i, n1 in enumerate(nums1):\n            d[n1] = i\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    import collections\n    from heapq import *\n    if len(nums1) < k or len(nums2) < k:\n        return []\n    pq = []\n    pq2 = []\n    d = collections.defaultdict(int)\n    for i, n in enumerate(nums1):\n        d[n] += 1\n    for i, n in enumerate(nums2):\n        d[n] += 1\n    for i, n in enumerate(nums1):\n        if len(pq) == k:\n            while pq and pq2 and pq2[0] < pq[0]:\n                heappop(pq)\n                heappop(pq2)\n            if pq2:\n                heappush(pq, pq2[0])\n                heappop(pq2)\n        if d[n] > 0:\n            heappush(pq, (n, i))\n            d[n] -= 1\n    if pq:\n        pairs = []\n        while pq:\n            n, i = heappop(pq)\n            pairs.append((n, nums1[i]))\n        while pq2:\n            n, i = heappop(pq2)\n            pairs.append((n, nums2[i]))\n        return pairs\n    return []\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if nums1 == None or len(nums1) < k or nums2 == None or len(nums2) < k:\n        return None\n    l = [(nums1[i], nums2[i]) for i in range(len(nums1))]\n    heapq.heapify(l)\n    res = []\n    for i in range(k):\n        res.append(heapq.heappop(l)[1])\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    dummy = [-1]\n    m = len(nums1)\n    heap = nums1 + nums2\n    heapq.heapify(dummy)\n    for i in range(m):\n        if k > 0:\n            heapq.heappush(dummy, heapq.heappushpop(dummy, heap[0]))\n            k -= 1\n        heapq.heappop(heap)\n    return dummy[1:]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 1:\n        return nums1\n    if len(nums2) == 1:\n        return nums2\n    n = min(len(nums1), len(nums2))\n    \n    m = max(len(nums1), len(nums2))\n    res = []\n    for i in range(n):\n        x = nums1[i]\n        for j in range(m):\n            y = nums2[j]\n            if i == 0 and j == 0:\n                heapq.heappush(res, (x + y, x, y))\n            else:\n                heapq.heappush(res, (x + y, x, y))\n    \n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    if len(nums1) == 0 or len(nums2) == 0 or k > len(nums1) * len(nums2):\n        return []\n    \n    #  BSTs in python\n    # https://stackoverflow.com/questions/10509765/fast-and-efficient-sorting-algorithm-for-large-numbers-of-numbers-python\n    # https://en.wikipedia.org/wiki/Binary_search_tree\n    \n    def search(nums, value, start, end):\n        if start > end:\n            return False\n        if start == end:\n            return start == value\n        mid = start + (end-start)//2\n        if nums[mid] == value:\n            return True\n        if nums[mid] < value:\n            return search(nums, value, mid+1, end)\n        if nums[mid] > value:\n            return search(nums, value, start, mid-1)\n    \n    arr1 = sorted(nums1)\n    arr2 = sorted(nums2)\n    \n    min_pairs = []\n    for i in range(len(arr1)):\n        for j in range(len(arr2)):\n            if search(arr1, arr1[i], 0, len(arr1)-1) and search(arr2, arr2[j], 0, len(arr2)-1):\n                min_pairs.append((arr1[i], arr2[j]))\n                \n    return heapq.nsmallest(k, min_pairs)\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    visited = set()\n    for num1 in nums1:\n        heapq.heappush(pq, (abs(num1), num1))\n        visited.add(num1)\n    for num2 in nums2:\n        if len(pq) >= k:\n            if abs(num2) not in visited:\n                visited.add(num2)\n                heapq.heappush(pq, (abs(num2), num2))\n        else:\n            if abs(num2) in visited:\n                visited.remove(abs(num2))\n                heapq.heappop(pq)\n                visited.add(abs(num2))\n                heapq.heappush(pq, (abs(num2), num2))\n    res = []\n    while pq:\n        res.append((heapq.heappop(pq)[1], heapq.heappop(pq)[1]))\n    return res\ndef k_smallest_pairs_2(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    visited = set()\n    heapq.heappush(pq, (nums1[0], nums2[0]))\n    visited.add((nums1[0], nums2[0]))\n    for i in range(1, len(nums1)):\n        if len(pq) >= k:\n            if (nums1[i], nums2[i]) not in visited:\n                visited.add((nums1[i], nums2[i]))\n                heapq.heappush(pq, (nums1[i], nums2[i]))\n        else:\n            if (nums1[i], nums2[i]) in visited:\n                visited.remove((nums1[i], nums2[i]))\n                heapq.heappop(pq)\n                visited.add((nums1[i], nums2[i]))\n                heapq.heappush(pq, (nums1[i], nums2[i]))\n    res = []\n    while pq:\n        res.append((heapq.heappop(pq)[1], heapq.heappop(pq)[0]))\n    return res\ndef k_smallest_pairs_3(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    visited = set()\n    for num1 in nums1:\n        heapq.heappush(pq, (abs(num1), num1))\n        visited.add(num1)\n    for num2 in nums2:\n        if len(pq) >= k:\n            if abs(num2) not in visited:\n                visited.add(num2)\n                heapq.heappush(pq, (abs(num2), num2))\n        else:\n            if abs(num2) in visited:\n                visited.remove(abs(num2))\n                heapq.heappop(pq)\n                visited.add(abs(num2))\n                heapq.heappush(pq, (abs(num2), num2))\n    res = []\n    while pq:\n        res.append((heapq.heappop(pq)[1], heapq.heappop(pq)[1]))\n    return res\ndef k_smallest_pairs_4(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    visited = set()\n    for num1 in nums1:\n        heapq.heappush(pq, (abs(num1), num1))\n        visited.add(num1)\n    for num2 in nums2:\n        if len(pq) >= k:\n            if abs(num2) not in visited:\n                visited.add(num2)\n                heapq.heappush(pq, (abs(num2), num2))\n        else:\n            if abs(num2) in visited:\n                visited.remove(abs(num2))\n                heapq.heappop(pq)\n                visited.add(abs(num2))\n                heapq.heappush(pq, (abs(num2), num2))\n    res = []\n    while pq:\n        res.append((heapq.heappop(pq)[1], heapq.heappop(pq)[1]))\n    return res\ndef k_smallest_pairs_5(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    visited = set()\n    for num1 in nums1:\n        heapq.heappush(pq, (num1, num1))\n        visited.add(num1)\n    for num2 in nums2:\n        if len(pq) >= k:\n            if num2 not in visited:\n                visited.add(num2)\n                heapq.heappush(pq, (num2, num2))\n        else:\n            if num2 in visited:\n                visited.remove(num2)\n                heapq.heappop(pq)\n                visited.add(num2)\n                heapq.heappush(pq, (num2, num2))\n    res = []\n    while pq:\n        res.append((heapq.heappop(pq)[0], heapq.heappop(pq)[1]))\n    return res\ndef k_smallest_pairs_6(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    visited = set()\n    for num1 in nums1:\n        heapq.heappush(pq, (num1, num1))\n        visited.add(num1)\n    for num2 in nums2:\n        if len(pq) >= k:\n            if num2 not in visited:\n                visited.add(num2)\n                heapq.heappush(pq, (num2, num2))\n        else:\n            if num2 in visited:\n                visited.remove(num2)\n                heapq.heappop(pq)\n                visited.add(num2)\n                heapq.heappush(pq, (num2, num2))\n    res = []\n    while pq:\n        res.append((heapq.heappop(pq)[1], heapq.heappop(pq)[0]))\n    return res\ndef k_smallest_pairs_7(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    visited = set()\n    for num1 in nums1:\n        heapq.heappush(pq, (num1, num1))\n        visited.add(num1)\n    for num2 in nums2:\n        if len(pq) >= k:\n            if num2 not in visited:\n                visited.add(num2)\n                heapq.heappush(pq, (num2, num2))\n        else:\n            if num2 in visited:\n                visited.remove(num2)\n                heapq.heappop(pq)\n                visited.add(num"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if nums1 and nums2:\n        nums1_size = len(nums1)\n        nums2_size = len(nums2)\n        result = []\n        heapq.heapify(nums1)\n        heapq.heapify(nums2)\n        nums1_cnt = nums1_size\n        nums2_cnt = nums2_size\n        while k:\n            if nums1_cnt > 0 and nums2_cnt > 0:\n                if nums1[0] < nums2[0]:\n                    result.append((nums1[0], nums2[0]))\n                    heapq.heappop(nums1)\n                    nums1_cnt -= 1\n                else:\n                    result.append((nums2[0], nums1[0]))\n                    heapq.heappop(nums2)\n                    nums2_cnt -= 1\n            else:\n                if nums1_cnt > 0:\n                    result.append((nums1[0], 0))\n                    heapq.heappop(nums1)\n                    nums1_cnt -= 1\n                else:\n                    result.append((0, nums2[0]))\n                    heapq.heappop(nums2)\n                    nums2_cnt -= 1\n            k -= 1\n        return result\n    else:\n        return []\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    new_list = []\n    min_value = list1[0]\n    for each in range(len(list1)):\n        temp = list1[each]\n        if temp > 0:\n            new_list.append(temp)\n        elif temp == 0:\n            new_list.append(temp)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][0]*list1[0][1]\n    for i in range(1,len(list1)):\n        if (list1[i][0]*list1[i][1]) < min_product:\n            min_product = list1[i][0]*list1[i][1]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # assert isinstance(list1, list), 'Input is not a list'\n    list1.sort()\n    min_product = list1[0]\n    for i in range(1, len(list1)):\n        if min_product[0]*list1[i][0] > min_product[1]*list1[i][1]:\n            min_product = list1[i]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    res = None\n    for tup in list1:\n        if res is None or tup[0]*tup[1] < res:\n            res = tup[0]*tup[1]\n    return res\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort(key=lambda tup:tup[0])\n    result = list1[0][0]\n    for i in range(1, len(list1)):\n        if result > list1[i][1]:\n            result = list1[i][1]\n    return result\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 1\n    min_tuple = ()\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # declare two variables\n    minimum = list1[0]\n    minimum_product = list1[0]\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1)==1:\n        return list1[0]\n    min_product=list1[0][0]*list1[0][1]\n    for i in range(1,len(list1)):\n        if list1[i][0]*list1[i][1]<min_product:\n            min_product=list1[i][0]*list1[i][1]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) <= 1:\n        return (0,0)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = -1\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if min_prod < 0 or product < min_prod:\n                min_prod = product\n    return min_prod\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min:\n            min = listval[i]\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if listval:\n        min = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < min:\n                min = listval[i]\n        return min\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val=listval[0]\n    for x in listval:\n        if x < min_val:\n            min_val=x\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if(listval[i] < min_val):\n            min_val = listval[i]\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    listval.sort()\n    return listval[0]\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return -1\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minvalue = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < minvalue:\n            minvalue = listval[i]\n    return minvalue\n    \ndef min_val_list(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxvalue = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > maxvalue:\n            maxvalue = listval[i]\n    return maxvalue\n    \ndef max_val_list(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_val_pos(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list and return its position in the list.\n    '''\n    maxvalue = listval[0]\n    pos = 0\n    for i in range(1, len(listval)):\n        if listval[i] > maxvalue:\n            maxvalue = listval[i]\n            pos = i\n    return pos\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if listval == []:\n        return None\n    minimum = listval[0]\n    for i in range(len(listval)):\n        if minimum > listval[i]:\n            minimum = listval[i]\n    return minimum\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if listval == []:\n        return None\n    maximum = listval[0]\n    for i in range(len(listval)):\n        if maximum < listval[i]:\n            maximum = listval[i]\n    return maximum\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = listval[0]\n    for i in listval:\n        if i < minimum:\n            minimum = i\n    return minimum\n    \ndef list_val(list):\n    '''\n    Write a function to return the sum of all the values in the given heterogeneous list.\n    '''\n    sum_val = 0\n    for i in list:\n        sum_val += i\n    return sum_val\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # your code here\n    if word == None:\n        return word\n    word = word.split('_')\n    word = map(lambda x: x.title(), word)\n    word = map(lambda x: x.replace(' ', ''), word)\n    return ''.join(word)\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word_list = re.findall('[a-z]|[A-Z]', word)\n    word_list = list(map(lambda x: x.lower(), word_list))\n    return (''.join(word_list))[0].upper() + (''.join(word_list)[1:])\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join([i.capitalize() for i in word.split('_')])\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    splitted = word.split('_')\n    return splitted[0]+''.join([w.title() for w in splitted[1:]])\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.replace('_','')\n    word = word.title()\n    return word\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    words = ''.join(words)\n    words = words.title()\n    return words\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return word.title()\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.split(\"_\")\n    # for i in range(len(word)):\n    #     word[i] = word[i].capitalize()\n    return \"\".join(word)\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    list_word=list(word)\n    for i in range(len(list_word)):\n        if list_word[i]=='_':\n            list_word[i]=list_word[i].upper()\n        if list_word[i]==' ':\n            list_word[i]='-'\n    return ''.join(list_word)\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if re.match('^[a-z]', word):\n        return word\n    else:\n        if word[0]=='_':\n            return word[1:].lower()\n        else:\n            return word.lower().replace('_','')\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if l[i]%2!= 0:\n            l.remove(l[i])\n    return l\nprint(\"Odd numbers from the list: \",remove_odd([2,3,4,5,6,7]))\nprint(\"Odd numbers from the list: \",remove_odd([2,3,4,5,6,7,8,9,10]))\nprint(\"Odd numbers from the list: \",remove_odd([1,2,3,4,5,6,7,8,9,10,11,12]))\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.remove(l[0])\n    l.remove(l[1])\n    l.remove(l[2])\n    l.remove(l[3])\n    print(\"odd numbers are: \",l)\n    \ndef remove_even(l):\n    '''\n    Write a python function to remove even numbers from a given list.\n    '''\n    l.remove(l[0])\n    l.remove(l[1])\n    l.remove(l[2])\n    l.remove(l[3])\n    print(\"even numbers are: \",l)\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for i in l:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    \n    for num in l:\n        if num % 2!= 0:\n            l.remove(num)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for i in l:\n        if i % 2 == 0:\n            odd_list.append(i)\n    print(odd_list)\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # new_list = []\n    # for i in range(len(l)):\n    #     if l[i] % 2 == 0:\n    #         new_list.append(l[i])\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = l[::2]\n    return l\n    # return list(filter(lambda x: x % 2 == 0, l))\n    \n    \ndef replace_last(l, new_value):\n    '''\n    Write a python function to replace the last element of a list with a new value.\n    '''\n    l.pop()\n    l.append(new_value)\n    return l\n    # return l[:-1] + [new_value]\n    \n    \ndef reverse_iter(l):\n    '''\n    Write a python function to reverse the order of the elements of a given list.\n    '''\n    return l[::-1]\n    # return l[::-2]\n    \n    \ndef main():\n    '''\n    Write a python function to sum a list of numbers.\n    '''\n    l1 = [2, 3, 4, 5]\n    print(sum(l1))\n    # return sum(l1)\n    \n    \ndef main():\n    '''\n    Write a python function to count the number of strings where the string length is 2 or more and the first and last character are same from a given list of strings.\n    '''\n    l1 = ['abc', 'xyz', 'aba', '1221']\n    count = 0\n    for i in l1:\n        if len(i) >= 2 and i[0] == i[-1]:\n            count += 1\n    print(count)\n    # return count\n    \n    \ndef main():\n    '''\n    Write a python function to return the first non repeating character in a given string.\n    '''\n    s = 'geeksforgeeks'\n    for i in s:\n        if s.count(i) == 1:\n            return i\n    print(s[0])\n    # return s[0]\n    \n    \ndef main():\n    '''\n    Write a python function to print all the numbers from 1 to 10 using a while loop.\n    '''\n    l1 = []\n    while len(l1) < 10:\n        l1.append(len(l1))\n        # print(len(l1))\n    return l1\n    # return [len(l1)]\n    \n    \ndef main():\n    '''\n    Write a python function to print the first 5 multiples of 7.\n    '''\n    l1 = []\n    for i in range(1, 6):\n        if i % 7 == 0:\n            l1.append(i)\n    return l1\n    # return list(range(1, 6))\n    \n    \ndef main():\n    '''\n    Write a python function to print all the numbers from 1 to n using a while loop.\n    '''\n    l1 = []\n    while len(l1) < 10:\n        l1.append(len(l1))\n        # print(len(l1))\n    return l1\n    # return [len(l1)]\n    \n    \ndef main():\n    '''\n    Write a python function to print all the prime numbers from 1 to n using a while loop.\n    '''\n    l1 = []\n    while len(l1) < 10:\n        l1.append(len(l1))\n        # print(len(l1))\n    return l1\n    # return [len(l1)]\n    \n    \ndef main():\n    '''\n    Write a python function to print all the even numbers from 1 to n using a while loop.\n    '''\n    l1 = []\n    while len(l1) < 10:\n        l1.append(len(l1))\n        # print(len(l1))\n    return l1\n    # return [len(l1)]\n    \n    \ndef main():\n    '''\n    Write a python function to print all the odd numbers from 1 to n using a while loop.\n    '''\n    l1 = []\n    while len(l1) < 10:\n        l1.append(len(l1))\n        # print(len(l1))\n    return l1\n    # return [len(l1)]\n    \n    \ndef main():\n    '''\n    Write a python function to print all the prime numbers between 1 and n using a while loop.\n    '''\n    l1 = []\n    while len(l1) < 10:\n        l1.append(len(l1))\n        # print(len(l1))\n    return l1\n    # return [len(l1)]\n    \n    \ndef main():\n    '''\n    Write a python function to print all the even numbers between 1 and n using a while loop.\n    '''\n    l1 = []\n    while len(l1) < 10:\n        l1.append(len(l1))\n        # print(len(l1))\n    return l1\n    # return [len(l1)]\n    \n    \ndef main():\n    '''\n    Write a python function to print all the odd numbers between 1 and n using a while loop.\n    '''\n    l1 = []\n    while len(l1) < 10:\n        l1.append(len(l1))\n        # print(len(l1))\n    return l1\n    # return [len(l1)]\n    \n    \ndef main():\n    '''\n    Write a python function to print all the prime numbers between 1 and n using a for loop.\n    '''\n    l1 = []\n    for i in range(1, 5):\n        for j in range(1, 5):\n            if i!= j and i % 2 == 0:\n                l1.append(i)\n    return l1\n    # return [i for i in range(1, 5) if i % 2 == 0]\n    \n    \ndef main():\n    '''\n    Write a python function to print all the even numbers between 1 and n using a for loop.\n    '''\n    l1 = []\n    for i in range(1, 5):\n        for j in range(1, 5):\n            if i!= j and i % 2 == 0:\n                l1.append(i)\n    return l1\n    # return [i for i in range(1, 5) if i % 2 == 0]\n    \n    \ndef main():\n    '''\n    Write a python function to print all the odd numbers between 1 and n using a for loop.\n    '''\n    l1 = []\n    for i in range(1, 5):\n        for j in range(1, 5):\n            if i!= j and i % 2 == 1:\n                l1.append(i)\n    return l1\n    # return [i for i in range(1, 5) if i % 2 == 1]\n    \n    \ndef main():\n    '''\n    Write a python function to print all the prime numbers between 1 and n using a for loop.\n    '''\n    l1 = []\n    for i in range(1, 5):\n        for j in range(1, 5):\n            if i!= j and i % 2 == 0:\n                l1.append(i)\n    return l1\n    # return [i for i in range(1, 5) if i % 2 == 0]\n    \n    \ndef main():\n    '''\n    Write a python function to print all the even numbers between 1 and n using a for loop.\n    '''\n    l1 = []\n    for i in range(1, 5):\n        for j in range(1, 5):\n            if i!= j and i % 2 == 0:\n                l1.append(i)\n    return l1\n    # return [i for i in range(1, 5) if i % 2 == 0]\n    \n    \ndef main():\n    '''\n    Write a python function to print all the odd numbers between 1 and n using a for loop.\n    '''\n    l1 = []\n    for i in range(1, 5):\n        for j in range(1, 5):\n            if i!= j and i % 2 == 1:\n                l1.append(i)\n    return l1\n    # return [i for i in range(1, 5) if i % 2 == 1]\n    \n    \ndef main():\n    '''\n    Write a python function to print all the prime numbers between 1 and n using a for loop.\n    '''\n    l1 = []\n    for i in range(1, 5):\n        for j in range(1, 5):\n            if i!= j and i % 2 == 0:\n                l1.append(i)\n    return l1\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for n in l:\n        if n % 2!= 0:\n            odd_list.append(n)\n    return odd_list\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if len(l) == 0:\n        return l\n    else:\n        i = 0\n        while i < len(l):\n            if l[i] % 2 == 0:\n                l.remove(l[i])\n            else:\n                i += 1\n        return l\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n == 1:\n        return list1[0]\n    else:\n        list1 = list1[1:]\n        return extract_nth_element(list1, n-1)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    \n    return list1[n]\n    "
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    s = set()\n    for i in range(0,len(list1)):\n        if i == n-1:\n            s.add(list1[i])\n        elif list1[i] in s:\n            s.remove(list1[i])\n            s.add(list1[i])\n        else:\n            s.add(list1[i])\n    return s\nprint(extract_nth_element([(0, 3), (5, 10), (15, 20)], 2))\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n<0 or n>len(list1):\n        return None\n    else:\n        return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    n_tuple = []\n    for i in range(len(list1)):\n        n_tuple.append(list1[i][n])\n    return n_tuple\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    # Creating a set of unique elements\n    set1 = set(list1)\n    set2 = set(list2)\n    # print(set1)\n    # print(set2)\n    # if list1 == list2 :\n    #     print(\"True\")\n    # else :\n    #     print(\"False\")\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if (list2 in list1):\n        print(\"The values exist in the list\")\n    else:\n        print(\"The values does not exist in the list\")\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return list1.intersection(list2)\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    x = any(i in list1 for i in list2)\n    if x == True:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    if sorted(list1)!= sorted(list2):\n        return False\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if(i==j):\n                return True\n    return False\n    '''\n    for i in list1:\n        for j in list2:\n            if(i==j):\n                return True\n    return False\n    '''\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr) \n    max1 = arr[0]\n    max2 = arr[0]\n    max3 = arr[0]\n    \n    for i in range(1, n): \n        max1 = max(max1, arr[i]) \n        max2 = max(max2, max1*arr[i]) \n        max3 = max(max3, max2*arr[i]) \n        \n    print(\"The product of maximum product of 3 numbers from the given array is \", max3) \n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = 0\n    max2 = 0\n    for i in range(0, len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if (arr[i]*arr[j]>max1):\n                max1 = arr[i]*arr[j]\n                max2 = arr[i]\n            if (arr[i]*arr[j]==max1):\n                if(arr[i]>max2):\n                    max2 = arr[i]\n                if (arr[j]>max2):\n                    max2 = arr[j]\n    print(max1,max2)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    m1, m2 = 0, 0\n    for i in range(len(arr)):\n        if arr[i]>arr[m1]:\n            m2 = m1\n            m1 = i\n        elif arr[i]>arr[m2]:\n            m2 = i\n    return arr[m1]*arr[m2]\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = 0\n    max_pair = []\n    p = 1\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            p = arr[i] * arr[j]\n            if p > max_product:\n                max_product = p\n                max_pair = [arr[i], arr[j]]\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_pair = [0,1]\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]*arr[j] > max_pair[0]*max_pair[1]:\n                max_pair = [arr[i],arr[j]]\n    print(\"pair with max product : \",max_pair)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    i = 0\n    j = len(arr) - 1\n    max = 1\n    while i < j:\n        product = arr[i] * arr[j]\n        if product > max:\n            max = product\n        if arr[i] < arr[j]:\n            i += 1\n        else:\n            j -= 1\n    return max\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if not arr:\n        return None\n    if len(arr) < 2:\n        return None\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] >= 0:\n            max_product = max(max_product * arr[i], arr[i])\n        else:\n            return None\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max = 0\n    for i in range(len(arr)): \n        for j in range(len(arr)): \n            if (arr[i]*arr[j] > max and arr[i]!= arr[j]): \n                max = arr[i]*arr[j] \n    return max\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # arr = [1, 3, 5, 7, 2, 4, 6]\n    max_prod = 1\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_prod:\n                max_prod = arr[i] * arr[j]\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    print(arr)\n    high = 1\n    for i in range(0,len(arr)-1):\n        if(arr[i] * arr[i+1] > high):\n            high = arr[i] * arr[i+1]\n    return high\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    counts = {}\n    for i in range(0,len(Input)):\n        if(Input[i][0] in counts.keys()):\n            counts[Input[i][0]] += 1\n        else:\n            counts[Input[i][0]] = 1\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    a = []\n    for i in Input:\n        if i not in a:\n            a.append(i)\n    return a\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    lst=[]\n    for i in Input:\n        lst.append(i[0])\n    d={}\n    for i in set(lst):\n        d[i]=0\n    for i in d.keys():\n        for j in Input:\n            if i==j[0]:\n                d[i]+=1\n    for i in d.keys():\n        if d[i]==max(d.values()):\n            return i\n        \n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Unique_Elements = set(Input)\n    Common_Elements = list(Unique_Elements)\n    return Common_Elements\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = {}\n    for el in Input: \n        for i in el: \n            if i in Output: \n                Output[i] = Output[i] + 1 \n            else: \n                Output[i] = 1 \n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    uniq_1 = []\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if(Input[i][0] == Input[j][0]):\n                uniq_1.append(Input[i][0])\n                break\n    return uniq_1\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    print(\"Input : \", Input)\n    first = max(Input, key=lambda x : x[0])\n    print(\"First element : \", first)\n    second = max(Input, key=lambda x : x[1])\n    print(\"Second element : \", second)\n    third = max(Input, key=lambda x : x[2])\n    print(\"Third element : \", third)\n    if(first[0] == second[0] and first[0] == third[0]):\n        print(\"Common : \", first[0])\n    elif(first[1] == second[1] and first[1] == third[1]):\n        print(\"Common : \", first[1])\n    elif(first[2] == second[2] and first[2] == third[2]):\n        print(\"Common : \", first[2])\n    else:\n        print(\"No common element\")\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    def count_first(Input): \n        '''\n        Write a function to find the count of elements of first element in given list of tuple.\n        '''\n        def first_elem(Input): \n            '''\n            Write a function to find the first element of the list.\n            '''\n            return Input[0]\n        def count_first_elem(Input): \n            '''\n            Write a function to find the count of elements of first element in given list of tuple.\n            '''\n            return Input.count(first_elem(Input))\n        return count_first_elem(Input)\n    def elem_in_first(Input): \n        '''\n        Write a function to find the count of elements of first element in given list of tuple.\n        '''\n        def first_elem(Input): \n            '''\n            Write a function to find the first element of the list.\n            '''\n            return Input[0]\n        def count_first_elem(Input): \n            '''\n            Write a function to find the count of elements of first element in given list of tuple.\n            '''\n            return Input.count(first_elem(Input))\n        def count_total(Input): \n            '''\n            Write a function to find total count of elements of all other elements in given list of tuple.\n            '''\n            count_other_elem = 0\n            for i in Input: \n                if i!= first_elem(Input): \n                    count_other_elem += 1\n            return count_other_elem\n        return count_first_elem(Input)\n    def elem_in_first_with_count(Input): \n        '''\n        Write a function to find total count of elements of all other elements in given list of tuple.\n        '''\n        def count_total(Input): \n            '''\n            Write a function to find total count of elements of all other elements in given list of tuple.\n            '''\n            count_other_elem = 0\n            for i in Input: \n                if i!= first_elem(Input): \n                    count_other_elem += 1\n            return count_other_elem\n        def count_first_elem(Input): \n            '''\n            Write a function to find the count of elements of first element in given list of tuple.\n            '''\n            return Input.count(first_elem(Input))\n        def count_total_first_elem(Input): \n            '''\n            Write a function to find total count of elements of all other elements in given list of tuple.\n            '''\n            count_other_elem = 0\n            for i in Input: \n                if i!= first_elem(Input): \n                    count_other_elem += 1\n            return count_total(Input) - count_first_elem(Input)\n        return count_total_first_elem(Input)\n    def elem_in_all_other(Input): \n        '''\n        Write a function to find total count of elements of all other elements in given list of tuple.\n        '''\n        def elem_in_all_other_elem(Input): \n            '''\n            Write a function to find total count of elements of all other elements in given list of tuple.\n            '''\n            count_other_elem = 0\n            for i in Input: \n                if i!= first_elem(Input): \n                    count_other_elem += 1\n            return count_other_elem\n        def count_total(Input): \n            '''\n            Write a function to find total count of elements of all other elements in given list of tuple.\n            '''\n            count_other_elem = 0\n            for i in Input: \n                if i!= first_elem(Input): \n                    count_other_elem += 1\n            return count_other_elem\n        def elem_in_all_other_first_elem(Input): \n            '''\n            Write a function to find total count of elements of all other elements in given list of tuple.\n            '''\n            return elem_in_all_other_elem(Input) - first_elem(Input)\n        def count_total_first_elem(Input): \n            '''\n            Write a function to find total count of elements of all other elements in given list of tuple.\n            '''\n            count_other_elem = 0\n            for i in Input: \n                if i!= first_elem(Input): \n                    count_other_elem += 1\n            return count_total(Input) - count_first_elem(Input)\n        def count_total_first_elem_with_count(Input): \n            '''\n            Write a function to find total count of elements of all other elements in given list of tuple.\n            '''\n            count_other_elem = 0\n            for i in Input: \n                if i!= first_elem(Input): \n                    count_other_elem += 1\n            return count_total(Input) - count_first_elem(Input) - count_other_elem\n        return elem_in_all_other_first_elem(Input)\n    def group_size(Input): \n        '''\n        Write a function to find the count of elements of all other elements in given list of tuple.\n        '''\n        def elem_in_all_other_elem(Input): \n            '''\n            Write a function to find total count of elements of all other elements in given list of tuple.\n            '''\n            count_other_elem = 0\n            for i in Input: \n                if i!= first_elem(Input): \n                    count_other_elem += 1\n            return count_other_elem\n        def count_total(Input): \n            '''\n            Write a function to find total count of elements of all other elements in given list of tuple.\n            '''\n            count_other_elem = 0\n            for i in Input: \n                if i!= first_elem(Input): \n                    count_other_elem += 1\n            return count_other_elem\n        def elem_in_all_other_first_elem(Input): \n            '''\n            Write a function to find total count of elements of all other elements in given list of tuple.\n            '''\n            return elem_in_all_other_elem(Input) - first_elem(Input)\n        def count_total_first_elem(Input): \n            '''\n            Write a function to find total count of elements of all other elements in given list of tuple.\n            '''\n            count_other_elem = 0\n            for i in Input: \n                if i!= first_elem(Input): \n                    count_other_elem += 1\n            return count_total(Input) - count_first_elem(Input)\n        def count_total_first_elem_with_count(Input): \n            '''\n            Write a function to find total count of elements of all other elements in given list of tuple.\n            '''\n            count_other_elem = 0\n            for i in Input: \n                if i!= first_elem(Input): \n                    count_other_elem += 1\n            return count_total(Input) - count_first_elem(Input) - count_other_elem\n        return elem_in_all_other_first_elem(Input)\n    def count_first_elem_with_common(Input): \n        '''\n        Write a function to find total count of elements of all other elements in given list of tuple.\n        '''\n        def count_total(Input): \n            '''\n            Write a function to find total count of elements of all other elements in given list of tuple.\n            '''\n            count_other_elem = 0\n            for i in Input: \n                if i!= first_elem(Input): \n                    count_other_elem += 1\n            return count_other_elem\n        def elem_in_all_other_elem(Input): \n            '''\n            Write a function to find total count of elements of all other elements in given list of tuple.\n            '''\n            count_other_elem = 0\n            for i in Input: \n                if i!= first_elem(Input): \n                    count_other_elem += 1\n            return count_other_elem\n        def count_total_first_elem(Input)"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Common = []\n    for i in Input:\n        if i[0] in Common:\n            Common.append(i[1])\n            return Common\n        else:\n            Common.append(i[0])\n    return Common\n        \n        \n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #get list of tuples\n    l1 = Input\n    #print(l1)\n    for i in range(len(l1)):\n        #print(l1[i])\n        l1[i] = (l1[i][0], l1[i][1])\n        #print(l1[i])\n    #print(l1)\n    for i in range(len(l1)):\n        #print(l1[i])\n        if len(l1) == 1:\n            return l1[i]\n        else:\n            l1[i] = (l1[i][0], l1[i][1])\n            #print(l1[i])\n            for j in range(i+1, len(l1)):\n                if l1[i] == l1[j]:\n                    l1.remove(l1[j])\n                else:\n                    pass\n                #print(l1)\n    #print(l1)\n    return l1[0]\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=lst[0]\n    for i in range(1,len(lst)):\n        if max<lst[i]:\n            max=lst[i]\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = -1\n    for i in range(len(lst)):\n        if len(lst[i])>max_len:\n            max_len = len(lst[i])\n            max_index = i\n    return lst[max_index]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in range(len(lst)):\n        if len(lst[i])>max:\n            max = len(lst[i])\n            max_element = lst[i]\n    print(f\"Maximum element is: {max_element}\")\n    return max_element\n    \ndef Print_Matrix(matrix): \n    '''\n    Write a python function to print a matrix in a 2D list.\n    '''\n    print(\"Printing the matrix:\")\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            print(matrix[i][j],end=\" \")\n        print(\"\")\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    m = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > m:\n            m = len(lst[i])\n            element = lst[i]\n    return element\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = lst[0]\n    for i in range(len(lst)):\n        if(len(lst[i])>=len(max)):\n            max = lst[i]\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    max_val = lst[0][0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n            max_val = lst[i][0]\n    print(max_val)\n    return max_val"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_ele = lst[0]\n    for i in range(1,len(lst)):\n        if len(lst[i])>len(max_ele):\n            max_ele=lst[i]\n    print(max_ele)\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    Max_Num = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > Max_Num:\n            Max_Num = len(lst[i])\n    return Max_Num\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = len(max(lst, key=len))\n    for i in lst:\n        if len(i)==max_length:\n            return i\n    \n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst1 = []\n    for i in range(len(lst)): \n        if len(lst[i]) == max(len(x) for x in lst): \n            lst1.append(lst[i])\n    return lst1 \n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1_rounded = []\n    for i in list1:\n        i = round(i)\n        list1_rounded.append(i)\n    return sum(list1_rounded) * len(list1_rounded)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for x in list1:\n        total = total + x\n        total = round(total,2)\n    print(\"The total sum of the list is \" + str(total) + \"* \" + str(len(list1)) + \" = \" + str(total*len(list1)))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    #create a function that takes a list of numbers as an argument\n    def round_and_sum(list1):\n        '''\n        Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n        '''\n        print(sum(list1) * len(list1))\n    return round_and_sum(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for element in list1:\n        element = round(element)\n        sum += element\n    print(sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print(' '.join(map(str,list(map(lambda x: round(x,2), list1)))))\n    print(sum(list1)*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print(round(sum(list1) * len(list1)))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(round(list1[i], 2))\n    return new_list\n    \ndef sum_every_n_number(list2):\n    '''\n    Write a function to add the element of a given list at the end of the list\n    '''\n    new_list = []\n    for i in range(len(list2)-1):\n        new_list.append(list2[i])\n    new_list.append(list2[-1])\n    return new_list\n    \ndef sum_first_n_number(list3):\n    '''\n    Write a function to add the sum of the first n number of a given list\n    '''\n    new_list = []\n    for i in range(len(list3)):\n        new_list.append(list3[i])\n        new_list.append(sum(list3[:i+1]))\n    return new_list\n    \ndef find_the_number_of_matching_elements(list4):\n    '''\n    Write a function to find the number of matching elements in a given list.\n    '''\n    count = 0\n    for i in range(len(list4)):\n        for j in range(len(list4)):\n            if list4[i] == list4[j] and i!= j:\n                count += 1\n    return count\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    round_and_sum = 0\n    for number in list1:\n        number = int(number)\n        round_and_sum = round_and_sum + number\n        round_and_sum = round_and_sum * len(list1)\n        round_and_sum = round_and_sum / len(list1)\n        return round_and_sum\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    #first try\n    for element in list1:\n        element = round(element)\n        element = float(element)\n        print(element)\n    return sum(list1) * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print(f'The sum of all numbers rounded to the nearest integer is : {round(sum(list1))*len(list1)}')\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cubSum = 0\n    if n == 0:\n        return 0\n    else:\n        for i in range(n):\n            cubSum += pow(i,3)\n        return cubSum\n    \ndef max_in_array(arr): \n    '''\n    Write a python function to find and return maximum element of array.\n    '''\n    return max(arr)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i**3\n    return sum\nprint(cube_Sum(10))\n'''\nWrite a python function to find the cube sum of first n even natural numbers.\n'''\ndef cube_sum_list(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return[i**3 for i in range(1,n+1) if i%2==0]\nprint(cube_sum_list(10))\n'''\nWrite a python function to find the cube sum of first n even natural numbers.\n'''\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            cube_sum += i**3\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sum = i ** 3\n            print(sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n):\n        sum = sum + i**3\n    return sum\n    \n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    result = 0\n    i = 0\n    while i < n:\n        result = result + i**3\n        i = i + 1\n    return result\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(0,n):\n        cube_sum = cube_sum + i**3\n    return(cube_sum)\ndef cube_Sum_Iterative(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(n):\n        cube_sum += i**3\n    return(cube_sum)\ndef cube_Sum_Recursive(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n == 1:\n        return(0)\n    else:\n        return(n**3 + cube_Sum_Recursive(n-1))\ndef cube_Sum_Recursive_Optimized(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n == 1:\n        return(0)\n    return(cube_Sum_Recursive_Optimized(n-1)+n**3)\ndef sum_first_n_primes(n): \n    '''\n    Write a python function to find sum of first n prime numbers.\n    '''\n    import math\n    primes = []\n    for i in range(2,n):\n        isPrime = True\n        for j in range(2,math.floor(math.sqrt(i))):\n            if i%j==0:\n                isPrime = False\n        if isPrime:\n            primes.append(i)\n    sum = 0\n    for i in range(0,len(primes)):\n        sum += primes[i]\n    return(sum)\ndef sum_first_n_primes_iterative(n): \n    '''\n    Write a python function to find sum of first n prime numbers.\n    '''\n    import math\n    primes = []\n    for i in range(2,n):\n        isPrime = True\n        for j in range(2,math.floor(math.sqrt(i))):\n            if i%j==0:\n                isPrime = False\n        if isPrime:\n            primes.append(i)\n    sum = 0\n    for i in range(0,len(primes)):\n        sum += primes[i]\n    return(sum)\ndef sum_first_n_primes_recursive(n): \n    '''\n    Write a python function to find sum of first n prime numbers.\n    '''\n    import math\n    primes = []\n    for i in range(2,n):\n        isPrime = True\n        for j in range(2,math.floor(math.sqrt(i))):\n            if i%j==0:\n                isPrime = False\n        if isPrime:\n            primes.append(i)\n    if len(primes) == 0:\n        return(0)\n    return(sum(primes))\ndef sum_first_n_primes_recursive_optimized(n): \n    '''\n    Write a python function to find sum of first n prime numbers.\n    '''\n    import math\n    primes = []\n    for i in range(2,n):\n        isPrime = True\n        for j in range(2,math.floor(math.sqrt(i))):\n            if i%j==0:\n                isPrime = False\n        if isPrime:\n            primes.append(i)\n    if len(primes) == 0:\n        return(0)\n    return(sum(primes))\ndef fibonacci(n): \n    '''\n    Write a python function to find the nth Fibonacci number.\n    '''\n    if n==0:\n        return(0)\n    if n==1:\n        return(1)\n    if n==2:\n        return(1)\n    return(fibonacci(n-1)+fibonacci(n-2))\ndef fibonacci_iterative(n): \n    '''\n    Write a python function to find the nth Fibonacci number.\n    '''\n    if n==0:\n        return(0)\n    if n==1:\n        return(1)\n    a = 0\n    b = 1\n    for i in range(n):\n        a,b = b,a+b\n    return(a)\ndef fibonacci_recursive(n): \n    '''\n    Write a python function to find the nth Fibonacci number.\n    '''\n    if n==0:\n        return(0)\n    if n==1:\n        return(1)\n    a = 0\n    b = 1\n    while n>0:\n        a,b = b,a+b\n        n-=1\n    return(a)\ndef fibonacci_recursive_optimized(n): \n    '''\n    Write a python function to find the nth Fibonacci number.\n    '''\n    if n==0:\n        return(0)\n    if n==1:\n        return(1)\n    a = 0\n    b = 1\n    fib = a+b\n    while n>0:\n        a,b = b,fib\n        fib = a+b\n        n-=1\n    return(a)\ndef fibonacci_dynamic(n): \n    '''\n    Write a python function to find the nth Fibonacci number.\n    '''\n    if n==0:\n        return(0)\n    if n==1:\n        return(1)\n    if n==2:\n        return(1)\n    dynamic_fibonacci = [0,1,1]\n    while n>2:\n        dynamic_fibonacci.append(dynamic_fibonacci[-2]+dynamic_fibonacci[-1])\n        n-=1\n    return(dynamic_fibonacci[-1])\ndef fibonacci_dynamic_optimized(n): \n    '''\n    Write a python function to find the nth Fibonacci number.\n    '''\n    if n==0:\n        return(0)\n    if n==1:\n        return(1)\n    if n==2:\n        return(1)\n    dynamic_fibonacci = [0,1,1]\n    while n>2:\n        dynamic_fibonacci.append(dynamic_fibonacci[-2]+dynamic_fibonacci[-1])\n        n-=1\n    return(dynamic_fibonacci[-1])\ndef nth_fibonacci(n): \n    '''\n    Write a python function to find the nth Fibonacci number.\n    '''\n    if n==0:\n        return(0)\n    if n==1:\n        return(1)\n    if n==2:\n        return(1)\n    first = 0\n    second = 1\n    while n>2:\n        first,second = second,first+second\n        n-=1\n    return(second)\ndef nth_fibonacci_iterative(n): \n    '''\n    Write a python function to find the nth Fibonacci number.\n    '''\n    if n==0:\n        return(0)\n    if n==1:\n        return(1)\n    if n==2:\n        return(1)\n    first = 0\n    second = 1\n    for i in range(n):\n        first,second = second,first+second\n    return(second)\ndef nth_fibonacci_recursive(n): \n    '''\n    Write a python function to find the nth Fibonacci number.\n    '''\n    if n==0:\n        return(0)\n    if n==1:\n        return(1)\n    if n==2:\n        return(1)\n    first = 0\n    second = 1\n    while n>2:\n        first,second = second,first+second\n        n-=1\n    return(second)\ndef nth_fibonacci_recursive_optimized(n): \n    '''\n    Write a python function to find the nth Fibonacci number.\n    '''\n    if n==0:\n        return(0)\n    if n==1:\n        return(1)\n    if n==2:\n        return(1)"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_Sum = 0\n    for i in range(1,n+1):\n        cube_Sum = cube_Sum + i**3\n    return(cube_Sum)\n    \n    \ndef isPrime(n):\n    '''\n    Write a python function to find whether n is prime or not.\n    '''\n    if n == 1:\n        return False\n    for i in range(2, n//2):\n        if n % i == 0:\n            return False\n    return True\n    \n    \ndef isPowerOfThree(n):\n    '''\n    Write a python function to check whether n is a power of three or not.\n    '''\n    while n >= 0:\n        if n == 0:\n            return False\n        if n % 3 == 0:\n            return True\n        n = n // 3\n    return False\n    \n    \ndef countTriplets(arr, r):\n    '''\n    Write a python function to count the number of triplets such that sum of two elements in triplet is equal to the third element.\n    '''\n    sum_dict = {}\n    triplets = 0\n    for i in range(len(arr)):\n        diff = r - arr[i]\n        if diff in sum_dict:\n            triplets += sum_dict[diff]\n        if arr[i] in sum_dict:\n            sum_dict[arr[i]] += 1\n        else:\n            sum_dict[arr[i]] = 1\n    return triplets\n    \n    \ndef isAnagram(str1, str2):\n    '''\n    Write a python function to check whether two words are anagrams or not.\n    '''\n    s1 = sorted(str1)\n    s2 = sorted(str2)\n    if s1 == s2:\n        return True\n    return False\n    \n    \ndef isPalindrome(str1):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    str1 = str1.lower()\n    for i in range(len(str1)//2):\n        if str1[i]!= str1[len(str1)-1-i]:\n            return False\n    return True\n    \n    \ndef findMedian(arr):\n    '''\n    Write a python function to find the median from an unsorted array.\n    '''\n    if len(arr) % 2 == 1:\n        return arr[len(arr)//2]\n    else:\n        return (arr[len(arr)//2-1] + arr[len(arr)//2]) / 2\n    \n    \ndef countPrimes(n):\n    '''\n    Write a python function to count the number of prime numbers between 1 and n inclusive.\n    '''\n    count = 0\n    for i in range(2,n):\n        if isPrime(i):\n            count += 1\n    return(count)\n    \n    \ndef isHappy(n):\n    '''\n    Write a python function to check whether a number is a happy number or not.\n    '''\n    sum = 0\n    while True:\n        sum = sum * 10 + n % 10\n        n = n // 10\n        if sum == 1:\n            return True\n        elif sum == 4:\n            return False\n    \n    \ndef isAnagram(str1, str2):\n    '''\n    Write a python function to check whether two words are anagrams or not.\n    '''\n    s1 = sorted(str1)\n    s2 = sorted(str2)\n    if s1 == s2:\n        return True\n    return False\n    \n    \ndef vowelCount(string):\n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    vowels = ('a','e','i','o','u')\n    vowel_count = 0\n    for i in string:\n        if i in vowels:\n            vowel_count += 1\n    return vowel_count\n    \n    \ndef lengthOfLongestSubstring(str1):\n    '''\n    Write a python function to find the length of longest substring without repeating characters.\n    '''\n    lst = list(str1)\n    longest = \"\"\n    max_len = 0\n    for i in lst:\n        if i not in longest:\n            longest += i\n            max_len = max(max_len, len(longest))\n        else:\n            longest = longest[longest.index(i)+1:]\n            longest += i\n    return(max_len)\n    \n    \ndef moveZeroes(arr):\n    '''\n    Write a python function to move all zeroes to end of array.\n    '''\n    new_arr = []\n    for i in arr:\n        if i!= 0:\n            new_arr.append(i)\n    return(new_arr)\n    \n    \ndef findDuplicates(arr):\n    '''\n    Write a python function to find all the duplicate numbers in an array.\n    '''\n    dup_lst = []\n    for i in range(len(arr)):\n        if arr[abs(arr[i])-1] < 0:\n            dup_lst.append(abs(arr[i]))\n        else:\n            arr[abs(arr[i])-1] *= -1\n    return(dup_lst)\n    \n    \ndef palindrome(string):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    str1 = string.lower()\n    s = \"\"\n    for i in range(len(str1)):\n        if str1[i] =='':\n            s +=''\n        else:\n            s += str1[i]\n    str1 = s\n    if str1 == str1[::-1]:\n        return True\n    return False\n    \n    \ndef isAnagram(str1, str2):\n    '''\n    Write a python function to check whether two words are anagrams or not.\n    '''\n    s1 = sorted(str1)\n    s2 = sorted(str2)\n    if s1 == s2:\n        return True\n    return False\n    \n    \ndef bubbleSort(arr):\n    '''\n    Write a python function to sort an array in ascending order using bubble sort.\n    '''\n    n = len(arr)\n    for i in range(n):\n        for j in range(n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return(arr)\n    \n    \ndef findKthLargest(arr, k):\n    '''\n    Write a python function to find the kth largest element in an array.\n    '''\n    from heapq import nlargest\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap, arr[i])\n    for j in range(k, len(arr)):\n        if arr[j] > heap[0]:\n            heapq.heappushpop(heap, arr[j])\n    return(heapq.heappop(heap))\n    \n    \ndef findKthLargest(arr, k):\n    '''\n    Write a python function to find the kth largest element in an array.\n    '''\n    from heapq import heapify, heappop, heappush\n    \n    # min_heap = []\n    # for num in arr:\n    #     if len(min_heap) < k:\n    #         heappush(min_heap, num)\n    #     else:\n    #         heappushpop(min_heap, num)\n    # return(min_heap[0])\n    # min_heap = []\n    # for num in arr:\n    #     heappush(min_heap, num)\n    #     if len(min_heap) > k:\n    #         heappop(min_heap)\n    # return(min_heap[0])\n    \n    min_heap = []\n    for num in arr:\n        if len(min_heap) < k:\n            heappush(min_heap, num)\n        else:\n            heappushpop(min_heap, num)\n    retur"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    i = 1\n    while i <= n:\n        cube_sum += i**3\n        i += 1\n    return cube_sum\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delim = '$'\n    out = delim.join(test_tup)\n    return out\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    #test_tup = (1,2,3,4,5)\n    concat = ''\n    for elem in test_tup:\n        concat += str(elem)\n    return concat\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # s='{}'.format(test_tup)\n    # print(s)\n    # s=''.join(test_tup)\n    # print(s)\n    l1=[]\n    for x in test_tup:\n        # print(x)\n        s=x+'{}'.format(','+x)\n        l1.append(s)\n    print(l1)\n    result= ''.join(l1)\n    print(result)\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return_str = \"\"\n    for ele in test_tup:\n        return_str += str(ele)\n    return return_str\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for i in range(len(test_tup)-1):\n        result += test_tup[i] + test_tup[i+1]\n    result += test_tup[len(test_tup)-1]\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \"-\"\n    output_str = delimiter.join(str(x) for x in test_tup)\n    print(output_str)\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    count = 0\n    result = 0\n    while count <= n:\n        result += count ** 3\n        count += 1\n    result = result / n\n    return result\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    n = n+1\n    for i in range(n):\n        sum = sum + (i+1)**3\n    return (sum/n)\nprint(\"Average of Cubes of first 10 natural numbers is: \",find_Average_Of_Cube(10)) \n    "
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum = sum + i ** 3\n        i = i + 1\n    return sum / n\n    \n    \n    \ndef find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum = sum + i ** 3\n        i += 1\n    return sum / n\n    \n    \n    \n    \n    "
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    average = 0\n    for i in range(n):\n        average = average + pow(i, 3)\n    average = average / n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum=0\n    for i in range(n):\n        sum=sum+i*i*i\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum = sum + i**3\n    return sum / n\nprint(find_Average_Of_Cube(10))\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n <= 0:\n        print(\"ERROR: Please enter the value which is greater than 0\")\n        exit()\n    else:\n        total = 0\n        for i in range(n):\n            total += i**3\n        return total/n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+(i*i*i)\n    average=sum/n\n    print('The average is: ',average)\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + i**3\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    count = 0\n    sum = 0\n    \n    while (count < n):\n        sum += pow(count,3)\n        count += 1\n    \n    return (sum/n)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple((test_tuple[2]))\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [list(reversed(s)) for s in test_tuple]\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # Your code here\n    return (i[-1] for i in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple((test_tuple[1][::-1]))\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    for i in test_tuple:\n        i = i.split(',')\n        i[-1] = i[-1][:-1]\n        i = ','.join(i)\n    return test_tuple\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    output = []\n    for i in range(len(test_tuple)):\n        output.append(test_tuple[i][len(test_tuple[i])-1])\n    return tuple(output)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    list1 = []\n    for i in test_tuple:\n        if i == \"\":\n            i = 0\n        elif i.isalpha():\n            i = 0\n        else:\n            i = int(i)\n        list1.append(i)\n    return tuple(list1)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for x in test_tuple:\n        result.append(x[-1])\n    return tuple(result)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return (test_tuple[1][::-1])\n    \n    \n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return list1.count(x)\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    # i = 0\n    # while i < len(list1):\n    #     if list1[i] == x:\n    #         i += 1\n    #     else:\n    #         break\n    # return i\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for l in list1:\n        if l == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    # count = 0\n    # for x in list1:\n    #     if x == x:\n    #         count += 1\n    # return count\n    # return (list1.count(x))\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2!= 0:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x:x%2!=0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = filter(lambda n: n % 2 == 1, nums)\n    return list(odd_nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda num: num % 2 == 1, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x % 2!= 0, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odds = []\n    for num in nums:\n        if num % 2!= 0:\n            odds.append(num)\n    return odds\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [x for x in nums if x % 2 == 1]\n    \n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # First, let's handle common cases\n    d = re.findall('^(\\d{4})-(\\d{2})-(\\d{2})$', dt)\n    if len(d) == 0:\n        return False\n    else:\n        return '{}-{}-{}'.format(d[0][0], d[0][1], d[0][2])\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if dt == None:\n        return None\n    y,m,d = dt.split('-')\n    return f\"{d}-{m}-{y}\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return f\"{dt[6:10]}-{dt[3:5]}-{dt[0:2]}\"\ndef remove_vowels(string):\n    '''\n    Write a function to remove vowels from a string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    result = \"\"\n    for letter in string:\n        if letter not in vowels:\n            result += letter\n    return result\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = re.split(r'-|/| ',dt)\n    for i in range(len(date)):\n        if date[i] == '-':\n            date[i] = '/'\n        date[i] = date[i].strip()\n    return '-'.join(date)\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    s = dt.split(\"-\")\n    return f\"{int(s[2])}-{int(s[1])}-{int(s[0])}\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split(\"-\")\n    dt = dt[2] + \"-\" + dt[1] + \"-\" + dt[0]\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    \n    dt = dt.split('-')\n    # print(dt)\n    months = ['January','February','March','April','May','June','July','August','September','October','November','December']\n    month = months.index(dt[1]) + 1\n    dt[1] = str(month)\n    dt = '-'.join(dt)\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Date format in dd-mm-yyyy format\n    if re.search(r'\\d{2}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])', dt):\n        pattern = re.compile(r'(\\d{2})-(\\d{2})-(\\d{4})')\n        result = pattern.search(dt).groups()\n        date_to_convert = '-'.join(result)\n        return date_to_convert\n    # Date format in mm-dd-yyyy format\n    elif re.search(r'(\\d{2})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])([12][0-9]|3[01])', dt):\n        pattern = re.compile(r'(\\d{2})-(\\d{2})-(\\d{4})')\n        result = pattern.search(dt).groups()\n        date_to_convert = '-'.join(result)\n        return date_to_convert\n    # Date format in yyyy-mm-dd format\n    elif re.search(r'(\\d{4})-(\\d{2})-(\\d{2})', dt):\n        pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n        result = pattern.search(dt).groups()\n        date_to_convert = '-'.join(result)\n        return date_to_convert\n    # Date format in dd-mm-yyyy format\n    elif re.search(r'(\\d{2})-(\\d{2})-(\\d{4})', dt):\n        pattern = re.compile(r'(\\d{2})-(\\d{2})-(\\d{4})')\n        result = pattern.search(dt).groups()\n        date_to_convert = '-'.join(result)\n        return date_to_convert\n    # Date format in yyyy-mm format\n    elif re.search(r'(\\d{4})-(\\d{2})', dt):\n        pattern = re.compile(r'(\\d{4})-(\\d{2})')\n        result = pattern.search(dt).groups()\n        date_to_convert = '-'.join(result)\n        return date_to_convert\n    # Date format in dd-mm-yyyy format\n    elif re.search(r'(\\d{2})-(\\d{2})-(\\d{4})', dt):\n        pattern = re.compile(r'(\\d{2})-(\\d{2})-(\\d{4})')\n        result = pattern.search(dt).groups()\n        date_to_convert = '-'.join(result)\n        return date_to_convert\n    # Date format in yyyy format\n    elif re.search(r'(\\d{4})', dt):\n        pattern = re.compile(r'(\\d{4})')\n        result = pattern.search(dt).groups()\n        date_to_convert = '-'.join(result)\n        return date_to_convert\n    # Date format in dd-mm-yy format\n    elif re.search(r'(\\d{2})-(\\d{2})-(\\d{4})', dt):\n        pattern = re.compile(r'(\\d{2})-(\\d{2})-(\\d{4})')\n        result = pattern.search(dt).groups()\n        date_to_convert = '-'.join(result)\n        return date_to_convert\n    else:\n        return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Write your code here\n    date = dt.split('-')\n    if len(date) == 3:\n        date[0],date[2] = date[2],date[0]\n        date[1],date[2] = date[2],date[1]\n        return f'{date[2]}-{date[1]}-{date[0]}'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dd = dt.split('-')\n    dd_new = []\n    for i in dd:\n        dd_new.append(i[2:])\n    dd_new = '-'.join(dd_new)\n    return dd_new\n    \ndef change_date_format_1(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd/mm/yyyy format.\n    '''\n    dd = dt.split('-')\n    dd_new = []\n    for i in dd:\n        dd_new.append(i[2:])\n    dd_new = '/'.join(dd_new)\n    return dd_new\n    \n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i-gap\n            while j >= 0 and my_list[j] > temp:\n                my_list[j+gap] = my_list[j]\n                j -= gap\n            my_list[j+gap] = temp\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = 1\n    while gap < n // 3:\n        gap = gap * 3 + 1\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # first, find the length of the list\n    n = len(my_list)\n    # print(n)\n    # length = int(n/2)\n    # length = length - 1\n    # print(length)\n    length = n\n    while length > 0:\n        for i in range(length):\n            j = i + length\n            while j >= 0:\n                if my_list[j] < my_list[j - length]:\n                    temp = my_list[j]\n                    my_list[j] = my_list[j-length]\n                    my_list[j-length] = temp\n                j = j-length\n        length = int(length/2)\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap,n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] >temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap//2\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if len(my_list) < 2:\n        return my_list\n    else:\n        gap = len(my_list) // 2\n        while gap > 0:\n            for i in range(gap, len(my_list)):\n                curr = my_list[i]\n                j = i\n                while j >= gap and curr < my_list[j - gap]:\n                    my_list[j] = my_list[j - gap]\n                    j -= gap\n                my_list[j] = curr\n            gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if len(my_list) == 1:\n        return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    size = len(my_list)\n    gap = size/2\n    while gap > 0:\n        for i in range(gap, size):\n            current_value = my_list[i]\n            position = i\n            while position >= gap and my_list[position - gap] > current_value:\n                my_list[position] = my_list[position - gap]\n                position -= gap\n            my_list[position] = current_value\n        gap = int(gap / 2)\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j - gap] > my_list[j]:\n                my_list[j - gap], my_list[j] = my_list[j], my_list[j - gap]\n                j -= gap\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if len(my_list) <= 1:\n        return my_list\n    # Find the length of array\n    n = len(my_list)\n    gap = int(n/2)\n    # Sort the list\n    while gap > 0:\n        for i in range(gap, n):\n            tmp = my_list[i]\n            j = i - gap\n            while j >= 0 and tmp < my_list[j]:\n                my_list[j+gap] = my_list[j]\n                j -= gap\n            my_list[j+gap] = tmp\n        gap = int(gap/2)\n    return my_list\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    a = test_tup1\n    b = test_tup2\n    c = []\n    for i in range(len(a)):\n        c.append(a[i] & b[i])\n    return tuple(c)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tup1_elem_and_tup2 if tup1_elem_and_tup2 >= tup2_elem_and_tup1 else tup2_elem_and_tup1)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # code here\n    return (tup1, tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    print(\"\\n    EXTRACTING AND TUPLE ELEMENTS FROM THE GIVEN TWO TUPLES\")\n    return ((test_tup1[0] and test_tup2[0]), (test_tup1[1] and test_tup2[1]))\n    \ndef not_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise not tuples from the given two tuples.\n    '''\n    print(\"\\n    EXTRACTING NOT TUPLE ELEMENTS FROM THE GIVEN TWO TUPLES\")\n    return ((not test_tup1[0]) and (not test_tup2[0]), (not test_tup1[1]) and (not test_tup2[1]))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (element1 and element2) for element1, element2 in zip(test_tup1, test_tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    a = (1,2)\n    b = (4,5)\n    c = (9,10)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (x and y) for x, y in zip(test_tup1, test_tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (a and b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] and test_tup2[0]),(test_tup1[1] and test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] and test_tup2[0], test_tup1[1] and test_tup2[1])\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    import math\n    x = 0.5 * a * b * b\n    y = -1 * a * c\n    z = (a * a * b * b) * (((a * a) + (b * b) + (c * c)) - 3 * ((a * a) + (b * b) + (c * c)))\n    d = (x * x) + (y * y) + (z * z)\n    delta = math.sqrt(d)\n    return (delta, x / delta, y / delta)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    def directrix(x):\n        return a*x**2 + b*x + c\n    return directrix\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    parabol_a = a\n    parabol_b = b\n    parabol_c = c\n    m = (4 * a * parabol_b) - (2 * b * parabol_c)\n    c1 = (a * parabol_b) - (parabol_a * parabol_c)\n    c2 = (b * parabol_c) - (parabol_b * parabol_a)\n    x1 = (-c2 / (2 * m))\n    x2 = (-c1 / (2 * m))\n    return x1, x2\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        directrix = \"y = 0\"\n    else:\n        x = a\n        y = b*x**2 + c\n        directrix = \"y = {} * x ** 2 + {}\".format(b, c)\n    return directrix\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    t = 0\n    while True:\n        t += 0.1\n        x = a*t*t + b*t + c\n        y = a*t*t + b*t + c\n        print('\\n{:.4f} {:.4f}'.format(x, y))\n        if t == 1:\n            break\n    \n    \ndef parabola_circumcenter(a, b, c): \n    '''\n    Write a function to find the circumcenter of a parabola.\n    '''\n    t = 0\n    while True:\n        t += 0.1\n        x = a*t*t + b*t + c\n        y = a*t*t + b*t + c\n        print('\\n{:.4f} {:.4f}'.format(x, y))\n        if t == 1:\n            break\n    \n    \ndef parabola_tangent(a, b, c): \n    '''\n    Write a function to find the tangent of a parabola.\n    '''\n    t = 0\n    while True:\n        t += 0.1\n        x = a*t*t + b*t + c\n        y = a*t*t + b*t + c\n        print('\\n{:.4f} {:.4f}'.format(x, y))\n        if t == 1:\n            break\n    \n    \ndef parabola_angle(a, b, c): \n    '''\n    Write a function to find the angle of a parabola.\n    '''\n    t = 0\n    while True:\n        t += 0.1\n        x = a*t*t + b*t + c\n        y = a*t*t + b*t + c\n        print('\\n{:.4f} {:.4f}'.format(x, y))\n        if t == 1:\n            break\n    \n    \ndef parabola_roots(a, b, c): \n    '''\n    Write a function to find the roots of a parabola.\n    '''\n    print('\\nTreating the parabola as a quadratic equation (x2 = {}*x + {})'.format(a, b))\n    # solution to quadratic equation\n    d = b*b - 4*a*c\n    if d < 0:\n        print('\\nThis parabola is not a quadratic equation')\n    else:\n        r1 = (-b + math.sqrt(d))/(2*a)\n        r2 = (-b - math.sqrt(d))/(2*a)\n        print('\\nThe roots are:')\n        print('  r1 = {:.4f}'.format(r1))\n        print('  r2 = {:.4f}'.format(r2))\n        \n    \ndef parabola_roots2(a, b, c): \n    '''\n    Write a function to find the roots of a parabola.\n    '''\n    print('\\nTreating the parabola as a quadratic equation (x2 = {}*x + {})'.format(a, b))\n    # solution to quadratic equation\n    d = b*b - 4*a*c\n    if d < 0:\n        print('\\nThis parabola is not a quadratic equation')\n    else:\n        r1 = (-b + math.sqrt(d))/(2*a)\n        r2 = (-b - math.sqrt(d))/(2*a)\n        print('\\nThe roots are:')\n        print('  r1 = {:.4f}'.format(r1))\n        print('  r2 = {:.4f}'.format(r2))\n        \n    \ndef parabola_roots3(a, b, c): \n    '''\n    Write a function to find the roots of a parabola.\n    '''\n    print('\\nTreating the parabola as a quadratic equation (x2 = {}*x + {})'.format(a, b))\n    # solution to quadratic equation\n    d = b*b - 4*a*c\n    if d < 0:\n        print('\\nThis parabola is not a quadratic equation')\n    else:\n        x = (-b + math.sqrt(d))/(2*a)\n        y = (-b - math.sqrt(d))/(2*a)\n        print('\\nThe roots are:')\n        print('  x = {:.4f}'.format(x))\n        print('  y = {:.4f}'.format(y))\n        \n    \ndef parabola_roots4(a, b, c): \n    '''\n    Write a function to find the roots of a parabola.\n    '''\n    print('\\nTreating the parabola as a quadratic equation (x2 = {}*x + {})'.format(a, b))\n    # solution to quadratic equation\n    d = b*b - 4*a*c\n    if d < 0:\n        print('\\nThis parabola is not a quadratic equation')\n    else:\n        x = (-b + math.sqrt(d))/(2*a)\n        y = (-b - math.sqrt(d))/(2*a)\n        print('\\nThe roots are:')\n        print('  x = {:.4f}'.format(x))\n        print('  y = {:.4f}'.format(y))\n        \n    \ndef parabola_roots5(a, b, c): \n    '''\n    Write a function to find the roots of a parabola.\n    '''\n    print('\\nTreating the parabola as a quadratic equation (x2 = {}*x + {})'.format(a, b))\n    # solution to quadratic equation\n    d = b*b - 4*a*c\n    if d < 0:\n        print('\\nThis parabola is not a quadratic equation')\n    else:\n        x1 = (-b + math.sqrt(d))/(2*a)\n        x2 = (-b - math.sqrt(d))/(2*a)\n        print('\\nThe roots are:')\n        print('  x1 = {:.4f}'.format(x1))\n        print('  x2 = {:.4f}'.format(x2))\n        \n    \ndef parabola_roots6(a, b, c): \n    '''\n    Write a function to find the roots of a parabola.\n    '''\n    print('\\nTreating the parabola as a quadratic equation (x2 = {}*x + {})'.format(a, b))\n    # solution to quadratic equation\n    d = b*b - 4*a*c\n    if d < 0:\n        print('\\nThis parabola is not a quadratic equation')\n    else:\n        x1 = (-b + math.sqrt(d))/(2*a)\n        x2 = (-b - math.sqrt(d))/(2*a)\n        print('\\nThe roots are:')\n        print('  x1 = {:.4f}'.format(x1))\n        print('  x2 = {:.4f}'.format(x2))\n        \n    \ndef parabola_roots7(a, b, c): \n    '''\n    Write a function to find the roots of a parabola.\n    '''\n    print('\\nTreating the parabola as a quadratic equation (x2 = {}*x + {})'.format(a, b))\n    # solution to quadratic equation\n    d = b*b - 4*a*c\n    if d < 0:\n        print('\\nThis parabola is not a quadratic equation')\n    else:\n        x = (-b + math.sqrt(d))/(2*a)\n        y = (-b - math.sqrt(d))/(2*a)\n        print('\\nThe roots are:')\n        print('  x = {:.4f}'.format(x))\n        print('  y = {:.4f}'.format(y))\n        \n    \ndef parabola_roots8(a, b, c): \n    '''\n    Write a function to find the roots of a parabola.\n    '''\n    prin"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = y = 0\n    x2 = b\n    y2 = a * x2 + c\n    #initialise the points\n    points = []\n    points.append((x,y))\n    points.append((x,y2))\n    #initialise the slopes\n    slopes = []\n    slopes.append(2*a)\n    slopes.append(-2*c)\n    #loop for every point\n    while(True):\n        x2 = (x2 - y2) / slopes[0]\n        y2 = (a * x2 + c)\n        points.append((x,y))\n        points.append((x2,y2))\n        #check if we are done\n        if(abs(x2 - x) <.001):\n            break\n        #check if slope is in range\n        if(abs(slopes[0]) >.01 and abs(slopes[0]) <.999 and abs(slopes[1]) >.01 and abs(slopes[1]) <.999):\n            print(\"The point is \", x, \",\", y)\n        #if slope is in range, append to the list\n        slopes.append(slopes[0] + slopes[1])\n        slopes.append(slopes[0] - slopes[1])\n        #update the points\n        points.append((x2,y2))\n        points.append((x,y))\n        x = x2\n        y = y2\n    return points\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    import math\n    return (a * math.sqrt(b ** 2 - c ** 2) / (2 * b))\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    import math\n    ans = 0\n    i = 0\n    while (i <= 1):\n        ans = ans + (1 / (4 * a ** 2)) * ((i - b) ** 2)\n        i += 1\n    ans = math.sqrt(ans)\n    return ans\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    print(\"a = \", a, \"b = \", b, \"c = \", c, \"\\n\")\n    x = ((-b) - sqrt(b*b - 4*a*c))/(2*a)\n    print(\"x = \", x)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = Symbol('x')\n    return a * x**2 + b * x + c\n    \ndef parabola_roots(a, b, c):\n    '''\n    Write a function to find the roots of a parabola.\n    '''\n    x = Symbol('x')\n    return sqrt(-b / (2 * a)) * (sqrt(1 + (b / a) * x ** 2) - 1) + sqrt(b / (2 * a)) * (sqrt(1 + (b / a) * x ** 2) - 1)\n    \ndef parabola_equation(a, b, c):\n    '''\n    Write a function to find the equation of a parabola.\n    '''\n    x = Symbol('x')\n    return a * x ** 2 + b * x + c\n    \ndef parabola_roots_equation(a, b, c):\n    '''\n    Write a function to find the roots of an equation of a parabola.\n    '''\n    x = Symbol('x')\n    return sqrt(-b / (2 * a)) * (sqrt(1 + (b / a) * x ** 2) - 1) + sqrt(b / (2 * a)) * (sqrt(1 + (b / a) * x ** 2) - 1)\n    \ndef parabola_parabola(a1, b1, c1, a2, b2, c2): \n    '''\n    Write a function to find the parabola between a parabola and another parabola.\n    '''\n    x1 = Symbol('x1')\n    x2 = Symbol('x2')\n    f1 = parabola_equation(a1, b1, c1)\n    f2 = parabola_equation(a2, b2, c2)\n    g = f1.subs(x1, x2)\n    h = f2.subs(x1, x2)\n    \n    return ((-g + sqrt(g**2 - 4 * h))/(2 * h))\n    \ndef parabola_parabola_roots(a1, b1, c1, a2, b2, c2):\n    '''\n    Write a function to find the roots of the parabola between a parabola and another parabola.\n    '''\n    x1 = Symbol('x1')\n    x2 = Symbol('x2')\n    f1 = parabola_equation(a1, b1, c1)\n    f2 = parabola_equation(a2, b2, c2)\n    g = f1.subs(x1, x2)\n    h = f2.subs(x1, x2)\n    \n    return ((-g + sqrt(g**2 - 4 * h))/(2 * h))\n    \ndef parabola_parabola_equation(a1, b1, c1, a2, b2, c2): \n    '''\n    Write a function to find the equation of the parabola between a parabola and another parabola.\n    '''\n    x1 = Symbol('x1')\n    x2 = Symbol('x2')\n    f1 = parabola_equation(a1, b1, c1)\n    f2 = parabola_equation(a2, b2, c2)\n    g = f1.subs(x1, x2)\n    h = f2.subs(x1, x2)\n    \n    return g - h\n    \ndef parabola_parabola_equation_roots(a1, b1, c1, a2, b2, c2):\n    '''\n    Write a function to find the roots of the equation of the parabola between a parabola and another parabola.\n    '''\n    x1 = Symbol('x1')\n    x2 = Symbol('x2')\n    f1 = parabola_equation(a1, b1, c1)\n    f2 = parabola_equation(a2, b2, c2)\n    g = f1.subs(x1, x2)\n    h = f2.subs(x1, x2)\n    \n    return (sqrt(-g + sqrt(g**2 - 4 * h))/(2 * h))\n    \ndef parabola_parabola_cubic(a1, b1, c1, a2, b2, c2): \n    '''\n    Write a function to find the cubic parabola between a parabola and another parabola.\n    '''\n    x1 = Symbol('x1')\n    x2 = Symbol('x2')\n    f1 = parabola_equation(a1, b1, c1)\n    f2 = parabola_equation(a2, b2, c2)\n    g = f1.subs(x1, x2)\n    h = f2.subs(x1, x2)\n    \n    return ((a1 * b2 - a2 * b1) * g - (a1 * h - a2 * h) * h) / (a1 * g - a2 * h)\n    \ndef parabola_parabola_cubic_roots(a1, b1, c1, a2, b2, c2):\n    '''\n    Write a function to find the roots of the cubic parabola between a parabola and another parabola.\n    '''\n    x1 = Symbol('x1')\n    x2 = Symbol('x2')\n    f1 = parabola_equation(a1, b1, c1)\n    f2 = parabola_equation(a2, b2, c2)\n    g = f1.subs(x1, x2)\n    h = f2.subs(x1, x2)\n    \n    return ((-a1 * b2 + a2 * b1) * g - (a1 * h - a2 * h) * h) / (a1 * g - a2 * h)\n    \ndef parabola_parabola_cubic_equation(a1, b1, c1, a2, b2, c2): \n    '''\n    Write a function to find the equation of the cubic parabola between a parabola and another parabola.\n    '''\n    x1 = Symbol('x1')\n    x2 = Symbol('x2')\n    f1 = parabola_equation(a1, b1, c1)\n    f2 = parabola_equation(a2, b2, c2)\n    g = f1.subs(x1, x2)\n    h = f2.subs(x1, x2)\n    \n    return g - h\n    \ndef parabola_parabola_cubic_equation_roots(a1, b1, c1, a2, b2, c2):\n    '''\n    Write a function to find the roots of the equation of the cubic parabola between a parabola and another parabola.\n    '''\n    x1 = Symbol('x1')\n    x2 = Symbol('x2')\n    f1 = parabola_equation(a1, b1, c1)\n    f2 = parabola_equation(a2, b2, c2)\n    g = f1.subs(x1, x2)\n    h = f2.subs(x1, x2)\n    \n    return (sqrt(-a1 * b2 + a2 * b1) * sqrt(g - h))/(-a1 + a2)\n    \ndef parabola_parabola_cubic_intersection(a1, b1, c1, a2, b2, c2, x1, x2): \n    '''\n    Write a function to find the intersection of the cubic parabola between a parabola and another parabola.\n    '''\n    x1 = Symbol('x1')\n    x2 = Symbol('x2')\n    x3 = Symbol('x3')\n    f1 = parabola_equation(a1, b1, c1)\n    f2 = parabola_equation(a2, b2, c2)\n    g = f1.subs(x1, x2)\n    h = f"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # return list1.intersection(list2)\n    # return list1.intersection(list2, set)\n    # return list1.intersection(list2, set, True)\n    # return list1.intersection(list2, list2, True)\n    # return list1.intersection(list2, list2, True, True)\n    # return set(list1).intersection(set(list2))\n    return (list1 & list2) | ((list1 - list2) & (list2 - list1))\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    if list1[0] in list2:\n        return True\n    else:\n        return common_element(list1[1:], list2)\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < len(list2):\n        small = list1\n        big = list2\n    else:\n        small = list2\n        big = list1\n    for i in range(len(small)):\n        if small[i] in big:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return list(set(list1) & set(list2))!= []\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_element = []\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            common_element.append(list1[i])\n    if len(common_element) == 0:\n        return False\n    else:\n        return common_element\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_set = set(list1).intersection(set(list2))\n    if len(common_set) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_list = []\n    for i in range(len(list1)):\n        if list1[i] in list2 and list1[i] not in common_list:\n            common_list.append(list1[i])\n    if len(common_list) == 0:\n        return False\n    return True\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2)/2 * height\n    \ndef main():\n    base1 = int(input('Enter the base of the trapezium: '))\n    base2 = int(input('Enter the base of the trapezium: '))\n    height = int(input('Enter the height of the trapezium: '))\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    #if base1 + base2 < height:\n    #    raise Exception\n    if base1 <= height and base2 <= height:\n        if (base1+base2)%2 == 0:\n            return ((base1+base2)/2)\n        else:\n            return (base1+base2)/2 +.5\n    elif base1 < height and base2 >= height:\n        return (base2 + height) / 2\n    elif base1 >= height and base2 < height:\n        return (base1 + height) / 2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2)/2.0\n    print(f'The median length of the trapezium is {median}')\n    return median\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)*0.5 + height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2) / 2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    x_left = base1\n    x_right = base2\n    y_top = height\n    y_bottom = 0\n    height_left = 0\n    height_right = 0\n    area = 0\n    \n    x_left, x_right = sorted([x_left, x_right])\n    y_top, y_bottom = sorted([y_top, y_bottom])\n    height_left = (y_top-height) / 2\n    height_right = (y_bottom-height) / 2\n    area += height_left + height_right\n    \n    while x_right!= x_left and y_bottom!= y_top:\n        area += x_right - x_left\n        height_right = (y_bottom-height) / 2\n        area += height_right\n        height_left = (y_top-height) / 2\n        area += height_left\n        x_right += 1\n        y_bottom += 1\n        x_left += 1\n        y_top += 1\n    return area\n    \ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    #Calculate the height of the trapezium\n    height=height/2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    print(base1+base2,base1,base2)\n    if (base1+base2)%2 == 0:\n        # base1, base2 are even.\n        base1 = int(base1/2)\n        base2 = int(base2/2)\n    else:\n        # base1, base2 are odd\n        base2 = int((base1+base2)/2)\n    return (base1 + base2)*height\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return False\n    for i in range(0,len(arr)-1):\n        if number > arr[i]:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return number > arr[0]\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] >= number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    flag = False\n    for i in range(len(arr)):\n        if arr[i] > number:\n            flag = True\n    return flag\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] <= number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] <= number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number < i:\n            return True\n    return False\n    \n    \ndef check_equal(arr, number):\n    '''\n    Write a function to check whether the entered number is equal to the elements of the given array.\n    '''\n    for i in arr:\n        if number == i:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number < arr[0]:\n        print(\"False\")\n    else:\n        for i in range(len(arr)-1):\n            if number < arr[i]:\n                print(\"False\")\n                break\n            else:\n                print(\"True\")\n                break\n    \n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'(?:a+)', text)\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a+b')\n    result = pattern.search(text)\n    if result:\n        return result.group()\n    else:\n        return None\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    a = re.findall(r'(a){1}', text)\n    if len(a) == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'a(b+)+', text)\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r\"a{1,}b\",text)\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    result = re.search(pattern, text)\n    if result == None:\n        print(False)\n    else:\n        print(True)\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.match(r'ab+',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pass\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by more than one b's.\n    '''\n    pass\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one b followed by one c.\n    '''\n    pass\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one b followed by two c's.\n    '''\n    pass\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one b followed by two c's.\n    '''\n    pass\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by two b's followed by one c.\n    '''\n    pass\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by two b's followed by two c's.\n    '''\n    pass\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by three b's followed by one c.\n    '''\n    pass\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by three b's followed by two c's.\n    '''\n    pass\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by three b's followed by three c's.\n    '''\n    pass\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by four b's followed by one c.\n    '''\n    pass\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by four b's followed by two c's.\n    '''\n    pass\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by four b's followed by three c's.\n    '''\n    pass\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by four b's followed by four c's.\n    '''\n    pass\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by five b's followed by one c.\n    '''\n    pass\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by five b's followed by two c's.\n    '''\n    pass\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by five b's followed by three c's.\n    '''\n    pass\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by five b's followed by four c's.\n    '''\n    pass\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by six b's followed by one c.\n    '''\n    pass\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by six b's followed by two c's.\n    '''\n    pass\ndef text_match_twenty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by six b's followed by three c's.\n    '''\n    pass\ndef text_match_twenty_two(text):\n    '''\n    Write a function that matches a string that has an a followed by six b's followed by four c's.\n    '''\n    pass\ndef text_match_twenty_three(text):\n    '''\n    Write a function that matches a string that has an a followed by six b's followed by five c's.\n    '''\n    pass\ndef text_match_twenty_four(text):\n    '''\n    Write a function that matches a string that has an a followed by six b's followed by six c's.\n    '''\n    pass\ndef text_match_twenty_five(text):\n    '''\n    Write a function that matches a string that has an a followed by seven b's followed by one c.\n    '''\n    pass\ndef text_match_twenty_six(text):\n    '''\n    Write a function that matches a string that has an a followed by seven b's followed by two c's.\n    '''\n    pass\ndef text_match_twenty_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by seven b's followed by three c's.\n    '''\n    pass\ndef text_match_twenty_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by seven b's followed by four c's.\n    '''\n    pass\ndef text_match_twenty_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by seven b's followed by five c's.\n    '''\n    pass\ndef text_match_thirty(text):\n    '''\n    Write a function that matches a string that has an a followed by eight b's followed by one c.\n    '''\n    pass\ndef text_match_thirty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by eight b's followed by two c's.\n    '''\n    pass\ndef text_match_thirty_two(text):\n    '''\n    Write a function that matches a string that has an a followed by eight b's followed by three c's.\n    '''\n    pass\ndef text_match_thirty_three(text):\n    '''\n    Write a function that matches a string that has an a followed by eight b's followed by four c's.\n    '''\n    pass\ndef text_match_thirty_four(text):\n    '''\n    Write a function that matches a string that has an a followed by eight b's followed by five c's.\n    '''\n    pass\ndef text_match_thirty_five(text):\n    '''\n    Write a function that matches a string that has an a followed by eight b's followed by six c's.\n    '''\n    pass\ndef text_match_thirty_six(text):\n    '''\n    Write a function that matches a string that has an a followed by eight b's followed by seven c's.\n    '''\n    pass\ndef text_match_thirty_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by eight b's followed by eight c's.\n    '''\n    pass\ndef text_match_thirty_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by eight b's followed by nine c's.\n    '''\n    pass\ndef text_match_thirty_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by eight b's followed by ten c's.\n    '''\n    pass\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fourteen b's followed by one c.\n    '''\n    pass\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fourteen b's followed by two c's.\n    '''\n    pass\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fourteen b's followed by three c's.\n    '''\n    pass\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by fourteen b's followed by four c's.\n    '''\n    pass\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fourteen b's followed by five c's.\n    '''\n    pass\ndef text_match_nineteen(text):"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    res = re.match(r\"(ab*)\",text)\n    if res is not None:\n        return res.group(0)\n    else:\n        return None\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return text[0] == 'a' and text.count('b') >= 1\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\nprint(\"Example-1:\")\nprint(last_Digit(64)) # Should be 1\nprint(last_Digit(644829)) # Should be 4\nprint(last_Digit(11)) # Should be 1\nprint(last_Digit(1000)) # Should be 0\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = abs(n)\n    last = n % 10\n    return last\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last = 0\n    n = int(n)\n    while n!= 0:\n        last = n%10\n        n = n//10\n    return last\n    \ndef is_palindrome(n) :\n    '''\n    Write a python function to check whether the given number is a palindrome or not.\n    '''\n    #s = str(n)\n    #l = len(s)\n    #print(s, l)\n    if (n == 1) : return True\n    if (n == 0) : return False\n    if (last_Digit(n)!= last_Digit(n//10)) : return False\n    else :\n        n = n//10\n        return is_palindrome(n)\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(n%10)\ndef last_Digit_using_bit_mask(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    #n = n & 0xffff\n    #return n & 0xff\n    #using bit_mask\n    #n = (n & 0xffffffffffffffff)\n    #n = n & 0xff\n    n = n >> 32\n    return n & 0xff\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if(n == 0):\n        return 0\n    else:\n        return (n%10)\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    l = len(n)\n    return n[l-1]\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    while n >= 10:\n        n = n//10\n    return n\n    \n    # Code here\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n    \ndef next_Multiple_of_Digit(n) :\n    '''\n    Write a python function to find the next multiple of a given digit in a number.\n    '''\n    return int(n//10) * 10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = int(input())\n    last = 0\n    for i in range(len(str(n))):\n        last = int(str(n)[i])*10**(len(str(n))-i-1) + last\n    return last\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    \n    # YOUR CODE HERE\n    # if n > 0:\n    #     n = n % 10\n    #     return last_Digit(n)\n    # else:\n    #     return n\n    if n == 0:\n        return 0\n    if n < 10:\n        return n\n    return n % 10\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [-num for num in list1]\n    "
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i * -1 for i in list1 if i < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    lst = []\n    for i in range(len(list1)):\n        lst.append(-list1[i])\n    return lst\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    temp_list = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            temp_list.append(list1[i])\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list1 = []\n    for i in range(len(list1)):\n        list1.append(-list1[i])\n    return list1\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    res=[]\n    for i in list1:\n        if i<0:\n            res.append(i)\n    return res\nlist1=[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10]\nprint(neg_nos(list1))\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_nos = []\n    for num in list1:\n        if num < 0:\n            negative_nos.append(num)\n    return negative_nos\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    final_list = []\n    for item in list1:\n        final_list.append(-1*item)\n    return final_list\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # list1 = [1, -5, 6, 7, -10, 2, -10, 12]\n    result = []\n    for elem in list1:\n        if elem < 0:\n            result.append(elem)\n    return result\nprint(neg_nos([1, -5, 6, 7, -10, 2, -10, 12]))\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd = ''\n    for ch in str1:\n        if ch in 'aeiou':\n            odd += ch\n    return odd\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace('o',' ').replace('O',' ').replace('0',' ')\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = str1.strip()\n    new_str1 = \"\"\n    for i in str1:\n        if i.isdigit() or i.isalpha():\n            new_str1 += i\n    return new_str1\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            new_str += str1[i]\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd = str1[::2]\n    return odd\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = list(str1)\n    new_str = []\n    \n    for i in str1:\n        if i not in new_str:\n            new_str.append(i)\n    return ''.join(new_str)\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i % 2 == 0:\n            new_str += i\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    \n    new_str = \"\"\n    \n    for i in range(len(str1)):\n        if ord(str1[i]) % 2 == 0:\n            new_str += str1[i]\n            \n    return new_str\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    counter = 0\n    for i in test_list:\n        for j in i:\n            if j[0] == j[1]:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    a = len(test_list)\n    if a % 2 == 0:\n        #print(\"nope\")\n        return 0\n    else:\n        #print(\"yes\")\n        return a / 2\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        if test_list[i][0] > test_list[i][1]:\n            count+=1\n            \n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    counter = 0\n    for item in test_list:\n        item = item.split(',')\n        for item2 in test_list:\n            item2 = item2.split(',')\n            if item[0] == item2[-1] and item[1] == item2[0]:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    d = dict()\n    for i in test_list:\n        if i[0] not in d:\n            d[i[0]] = 1\n        else:\n            d[i[0]] += 1\n        if i[1] not in d:\n            d[i[1]] = 1\n        else:\n            d[i[1]] += 1\n    for i in d:\n        print(i, d[i])\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    def count_bidir(tuple_1, tuple_2):\n        if tuple_1[0] > tuple_2[0]:\n            return (tuple_1, tuple_2)\n        else:\n            return (tuple_2, tuple_1)\n    \n    bidir_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if count_bidir(test_list[i], test_list[j]) in test_list:\n                bidir_pairs += 1\n    return bidir_pairs\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    counter = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if (test_list[i] == test_list[j]):\n                counter += 1\n    return counter\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return sum(1 for i in test_list if i[1] < i[0])\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            # print(test_list[i], test_list[j])\n            if (test_list[i] == test_list[j]) and (test_list[j] == test_list[i]):\n                # print(test_list[i], test_list[j])\n                count += 1\n    print('The number of bidirectional tuple pairs is', count)\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Your code here\n    counter = 0\n    for i in test_list:\n        for j in test_list:\n            if i + j in test_list:\n                counter += 1\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L)==0:\n        return 0\n    else:\n        return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Your code here\n    return int(''.join(str(i) for i in L))\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int( ''.join(map(str,L)))\n    \n    \n    \n    \n    \n    \ndef main():\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    print(multiple_to_single([11,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    return L[0] * int(len(L)/2) + multiple_to_single(L[1:len(L)])\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = L[::-1]\n    s = 0\n    for i in L:\n        s = s + i\n    return s\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(x) for x in L))\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result\n    \ndef sum_to_single(L):\n    '''\n    Write a function to return the sum of all the numbers in a list.\n    '''\n    result = 0\n    for i in L:\n        result = result + i\n    return result\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    i = 0\n    j = 0\n    while (i < len(L)):\n        if (j == 0):\n            L[i] = L[i]\n            j = j + 1\n        elif (L[i]!= L[i - 1]):\n            L[i] = L[i] + L[i - 1]\n            j = j + 1\n        i = i + 1\n    return L\nprint(multiple_to_single([10, 10, 10, 10, 10]))\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join([str(n) for n in L]))\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    return False\n    #x = re.findall(r'\\b(?:never|late|early|now|in the past|about|some time)\\b', text)\n    #if x:\n    #    return (x[0], x[0].split(' '))\n    #else:\n    #    return False\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pos=[]\n    regex = r\"\\w+\"\n    for i in range(len(text)):\n        if re.findall(regex,text[i]):\n            if text[i][0] == \"a\":\n                pos.append(i)\n                \n    return pos\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    return\ndef find_noun_position(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    return\ndef find_verb_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    return\ndef find_all_positions(text):\n    '''\n    Write a function to find the all positions in a given sentence.\n    '''\n    return\ndef find_verb_adverb_position(text):\n    '''\n    Write a function to find the all positions in a given sentence.\n    '''\n    return\ndef find_syllable_count(text):\n    '''\n    Write a function to find the number of syllables in a given sentence.\n    '''\n    return\ndef find_words_count(text):\n    '''\n    Write a function to find the number of words in a given sentence.\n    '''\n    return\ndef find_sentence_count(text):\n    '''\n    Write a function to find the number of sentences in a given sentence.\n    '''\n    return\ndef find_sentence_length(text):\n    '''\n    Write a function to find the length of a sentence.\n    '''\n    return\ndef find_longest_word(text):\n    '''\n    Write a function to find the longest word in a given sentence.\n    '''\n    return\ndef find_shortest_word(text):\n    '''\n    Write a function to find the shortest word in a given sentence.\n    '''\n    return\ndef find_average_word_length(text):\n    '''\n    Write a function to find the average word length in a given sentence.\n    '''\n    return\ndef find_average_sentence_length(text):\n    '''\n    Write a function to find the average sentence length in a given sentence.\n    '''\n    return\ndef find_longest_sentence(text):\n    '''\n    Write a function to find the longest sentence in a given sentence.\n    '''\n    return\ndef find_shortest_sentence(text):\n    '''\n    Write a function to find the shortest sentence in a given sentence.\n    '''\n    return\ndef find_average_sentence_length(text):\n    '''\n    Write a function to find the average sentence length in a given sentence.\n    '''\n    return\ndef find_longest_sentence(text):\n    '''\n    Write a function to find the longest sentence in a given sentence.\n    '''\n    return\ndef find_shortest_sentence(text):\n    '''\n    Write a function to find the shortest sentence in a given sentence.\n    '''\n    return\ndef find_average_sentence_length(text):\n    '''\n    Write a function to find the average sentence length in a given sentence.\n    '''\n    return\ndef find_common_words(text):\n    '''\n    Write a function to find the common words in a given sentence.\n    '''\n    return\ndef find_average_letter_count(text):\n    '''\n    Write a function to find the average letter count in a given sentence.\n    '''\n    return\ndef find_average_syllable_count(text):\n    '''\n    Write a function to find the average syllable count in a given sentence.\n    '''\n    return\ndef find_average_word_length(text):\n    '''\n    Write a function to find the average word length in a given sentence.\n    '''\n    return\ndef find_average_sentence_length(text):\n    '''\n    Write a function to find the average sentence length in a given sentence.\n    '''\n    return\ndef find_average_syllable_count(text):\n    '''\n    Write a function to find the average syllable count in a given sentence.\n    '''\n    return\ndef find_average_word_length(text):\n    '''\n    Write a function to find the average word length in a given sentence.\n    '''\n    return\ndef find_average_sentence_length(text):\n    '''\n    Write a function to find the average sentence length in a given sentence.\n    '''\n    return\ndef find_average_syllable_count(text):\n    '''\n    Write a function to find the average syllable count in a given sentence.\n    '''\n    return\ndef find_average_word_length(text):\n    '''\n    Write a function to find the average word length in a given sentence.\n    '''\n    return\ndef find_average_sentence_length(text):\n    '''\n    Write a function to find the average sentence length in a given sentence.\n    '''\n    return\ndef find_average_syllable_count(text):\n    '''\n    Write a function to find the average syllable count in a given sentence.\n    '''\n    return\ndef find_average_word_length(text):\n    '''\n    Write a function to find the average word length in a given sentence.\n    '''\n    return\ndef find_average_sentence_length(text):\n    '''\n    Write a function to find the average sentence length in a given sentence.\n    '''\n    return\ndef find_average_syllable_count(text):\n    '''\n    Write a function to find the average syllable count in a given sentence.\n    '''\n    return\ndef find_average_word_length(text):\n    '''\n    Write a function to find the average word length in a given sentence.\n    '''\n    return\ndef find_average_sentence_length(text):\n    '''\n    Write a function to find the average sentence length in a given sentence.\n    '''\n    return\ndef find_average_syllable_count(text):\n    '''\n    Write a function to find the average syllable count in a given sentence.\n    '''\n    return\ndef find_average_word_length(text):\n    '''\n    Write a function to find the average word length in a given sentence.\n    '''\n    return\ndef find_average_sentence_length(text):\n    '''\n    Write a function to find the average sentence length in a given sentence.\n    '''\n    return\ndef find_average_syllable_count(text):\n    '''\n    Write a function to find the average syllable count in a given sentence.\n    '''\n    return\ndef find_average_word_length(text):\n    '''\n    Write a function to find the average word length in a given sentence.\n    '''\n    return\ndef find_average_sentence_length(text):\n    '''\n    Write a function to find the average sentence length in a given sentence.\n    '''\n    return\ndef find_average_syllable_count(text):\n    '''\n    Write a function to find the average syllable count in a given sentence.\n    '''\n    return\ndef find_average_word_length(text):\n    '''\n    Write a function to find the average word length in a given sentence.\n    '''\n    return\ndef find_average_sentence_length(text):\n    '''\n    Write a function to find the average sentence length in a given sentence.\n    '''\n    return\ndef find_average_syllable_count(text):\n    '''\n    Write a function to find the average syllable count in a given sentence.\n    '''\n    return\ndef find_average_word_length(text):\n    '''\n    Write a function to find the average word length in a given sentence.\n    '''\n    return\ndef find_average_sentence_length(text):\n    '''\n    Write a function to find the average sentence length in a given sentence.\n    '''\n    return\ndef find_average_syllable_count(text):\n    '''\n    Write a function to find the average syllable count in a given sentence.\n    '''\n    return\ndef find_average_word_length(text):\n    '''\n    Write a function to find the average word length in a given sentence.\n    '''\n    return\ndef find_average_sentence_length(text):\n    '''\n    Write a function to find the average sentence length in a given sentence.\n    '''\n    return\ndef find_average_syllable_count(text):\n    '''\n    Write a function to find the average syllable coun"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # search for adverb in text\n    result = re.findall(r'\\bADV\\b', text)\n    # if no adverb, return None\n    if not result:\n        return None\n    # iterate through adverbs\n    for i in range(0, len(result)):\n        # find adverb\n        if result[i].lower() == 'adverb':\n            # find first letter of adverb\n            for j in range(i+1, len(result)):\n                # check that it's not a sentence\n                if not re.findall(r'\\s\\bSENT\\b', text[i+j:]):\n                    # check that it's not a adverb\n                    if not re.findall(r'\\bADV\\b', text[i+j:]):\n                        # return first letter of adverb\n                        return result[i][0]\n    # if no adverb was found, return None\n    return None\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_positions = re.findall(r'\\w*\\b[adverb]\\b\\w*\\b\\w*',text)\n    # print(adverb_positions)\n    return adverb_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_positions = []\n    text_list = text.split()\n    #find first adverb\n    for idx in range(0,len(text_list)):\n        if text_list[idx] in ('is','are','were','have','had','would','should','would'):\n            #find its position\n            for i in range(idx+1,len(text_list)):\n                if text_list[i] == 'i':\n                    adverb_positions.append(idx)\n                    break\n    return adverb_positions\ndef find_adverb(text):\n    '''\n    Write a function to find the first adverb and its positions in a given sentence.\n    '''\n    adverb_positions = []\n    text_list = text.split()\n    #find first adverb\n    for idx in range(0,len(text_list)):\n        if text_list[idx] in ('is','are','were','have','had','would','should','would'):\n            #find its position\n            for i in range(idx+1,len(text_list)):\n                if text_list[i] == 'i':\n                    adverb_positions.append(idx)\n                    break\n    return adverb_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r\"\\b\\w+\\b\"\n    x = re.finditer(pattern, text)\n    adverbs = []\n    position = []\n    for i in x:\n        # print(i.group(0))\n        if i.group(0) == \"mam\":\n            adverbs.append(\"mam\")\n            position.append(i.span())\n        elif i.group(0) == \"pap\":\n            adverbs.append(\"pap\")\n            position.append(i.span())\n        elif i.group(0) == \"pap\":\n            adverbs.append(\"pap\")\n            position.append(i.span())\n        elif i.group(0) == \"kaca\":\n            adverbs.append(\"kaca\")\n            position.append(i.span())\n        elif i.group(0) == \"pem\":\n            adverbs.append(\"pem\")\n            position.append(i.span())\n        elif i.group(0) == \"aeg\":\n            adverbs.append(\"aeg\")\n            position.append(i.span())\n        elif i.group(0) == \"pem\":\n            adverbs.append(\"pem\")\n            position.append(i.span())\n        elif i.group(0) == \"tam\":\n            adverbs.append(\"tam\")\n            position.append(i.span())\n        elif i.group(0) == \"pem\":\n            adverbs.append(\"pem\")\n            position.append(i.span())\n        elif i.group(0) == \"pap\":\n            adverbs.append(\"pap\")\n            position.append(i.span())\n        elif i.group(0) == \"mam\":\n            adverbs.append(\"mam\")\n            position.append(i.span())\n        elif i.group(0) == \"kembali\":\n            adverbs.append(\"kembali\")\n            position.append(i.span())\n        elif i.group(0) == \"mem\":\n            adverbs.append(\"mem\")\n            position.append(i.span())\n        elif i.group(0) == \"pem\":\n            adverbs.append(\"pem\")\n            position.append(i.span())\n        elif i.group(0) == \"pem\":\n            adverbs.append(\"pem\")\n            position.append(i.span())\n        elif i.group(0) == \"cek\":\n            adverbs.append(\"cek\")\n            position.append(i.span())\n        elif i.group(0) == \"mei\":\n            adverbs.append(\"mei\")\n            position.append(i.span())\n        elif i.group(0) == \"cek\":\n            adverbs.append(\"cek\")\n            position.append(i.span())\n        elif i.group(0) == \"cek\":\n            adverbs.append(\"cek\")\n            position.append(i.span())\n        elif i.group(0) == \"mam\":\n            adverbs.append(\"mam\")\n            position.append(i.span())\n        elif i.group(0) == \"pem\":\n            adverbs.append(\"pem\")\n            position.append(i.span())\n        elif i.group(0) == \"pem\":\n            adverbs.append(\"pem\")\n            position.append(i.span())\n        elif i.group(0) == \"pem\":\n            adverbs.append(\"pem\")\n            position.append(i.span())\n        elif i.group(0) == \"tum\":\n            adverbs.append(\"tum\")\n            position.append(i.span())\n        elif i.group(0) == \"kembali\":\n            adverbs.append(\"kembali\")\n            position.append(i.span())\n        elif i.group(0) == \"kembali\":\n            adverbs.append(\"kembali\")\n            position.append(i.span())\n        elif i.group(0) == \"kembali\":\n            adverbs.append(\"kembali\")\n            position.append(i.span())\n        elif i.group(0) == \"kembali\":\n            adverbs.append(\"kembali\")\n            position.append(i.span())\n        elif i.group(0) == \"kembali\":\n            adverbs.append(\"kembali\")\n            position.append(i.span())\n        elif i.group(0) == \"pem\":\n            adverbs.append(\"pem\")\n            position.append(i.span())\n        elif i.group(0) == \"kembali\":\n            adverbs.append(\"kembali\")\n            position.append(i.span())\n        elif i.group(0) == \"pem\":\n            adverbs.append(\"pem\")\n            position.append(i.span())\n        elif i.group(0) == \"pem\":\n            adverbs.append(\"pem\")\n            position.append(i.span())\n        elif i.group(0) == \"pem\":\n            adverbs.append(\"pem\")\n            position.append(i.span())\n        elif i.group(0) == \"kembali\":\n            adverbs.append(\"kembali\")\n            position.append(i.span())\n        elif i.group(0) == \"tum\":\n            adverbs.append(\"tum\")\n            position.append(i.span())\n        elif i.group(0) == \"pem\":\n            adverbs.append(\"pem\")\n            position.append(i.span())\n        elif i.group(0) == \"tum\":\n            adverbs.append(\"tum\")\n            position.append(i.span())\n        elif i.group(0) == \"pem\":\n            adverbs.append(\"pem\")\n            position.append(i.span())\n        elif i.group(0) == \"pem\":\n            adverbs.append(\"pem\")\n            position.append(i.span())\n        elif i.group(0) == \"tum\":\n            adverbs.append(\"tum\")\n            position.append(i.span())\n        elif i.group(0) == \"tum\":\n            adverbs.append(\"tum\")\n            position.append(i.span())\n        elif i.group(0) == \"pem\":\n            adverbs.append(\"pem\")\n            position.append(i.span())\n        elif i.group(0) == \"kembali\":\n            adverbs.append(\"kembali\")\n            position.append(i.span())\n        elif i.group(0) == \"kembali\":\n            adverbs.append(\"kembali\")\n            position.append(i.span())\n        elif i.group(0) == \"kembali\":\n            adverbs.append(\"kembali\")\n            position.append(i.span())\n        elif i.group(0) == \"kembali\":\n            adverbs.append(\"kembali\")\n            position.append(i.span())\n        elif i.group(0) == \"kembali\":\n            adverbs.append(\"kembali\")\n            position.append(i.span())\n        elif i.group(0) == \"kembali\":\n            adverbs.append(\"kembali\")\n            position.append(i.span())\n        elif i.group(0) == \"kembali\":\n            adverbs.append(\"kembali\")\n            position.append(i.span())\n        elif i.group(0) == \"kembali\":\n            adverbs.append(\"kembali\")\n            position.append(i.span())\n        elif i.group(0) == \"kembali\":\n            adverbs.append(\"kembali\")\n            position.append(i.span())\n        elif i.group(0) == \"kembali\":\n            adverbs.append(\"kembali\")\n            position.append(i.span())\n        elif i.group(0) == \"kembali\":\n            adverbs.append(\"kembali\")\n            position.append(i.span())\n        elif i.group(0) == \"kembali\":\n            adverbs.append(\"kembali\""
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = re.compile(r'\\w+\\b(?![\\d\\.])(?![A-Z])')\n    matches = re.finditer(adverb_pattern, text)\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_positions = []\n    text = text.split()\n    for i in range(len(text)):\n        word = text[i]\n        if word in ['am', 'are', 'was', 'were', 'be', 'being', 'been', 'being']:\n            adverb_positions.append(i)\n    return adverb_positions\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # for each possible adverb\n    for adverb in ['amazing','awesome','best','brilliant', 'cool', 'fantastic', 'fantastically', 'good','great', 'horrible', 'horrific', 'informal', 'informally','inexpensive', 'interesting', 'invasively', 'noticeably', 'noticeably', 'optimal', 'perfect', 'precious', 'preferably', 'preferably', 'rather','relatively','relatively','requirement','requirements','superb','superbly','succinct','succinctly','successful','successfully', 'terrific', 'terrifically', 'terrificly', 'terrifics', 'tremendously', 'tremendously', 'typically']:\n        #  make a regex for the adverb\n        adverb_pattern = re.compile(adverb)\n        # find the pattern in the text\n        position = text.find(adverb)\n        # if pattern was found\n        if position!= -1:\n            print('The first adverb found is:'+ adverb)\n            print('The first adverb appears at position'+ str(position) +'in the sentence.')\n            return position\n        else:\n            print('Did not find a match for:'+ adverb)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return(l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 4 * l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l**2*6\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (l * 2) * 6\n    \n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surfacearea= (6*l**2) + (4*l**2)\n    return surfacearea\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # i = 0\n    # for i in range(len(nums)):\n    #     if nums[i] > 0:\n    #         pass\n    #     else:\n    #         nums[i] = 0\n    # return nums\n    # print(nums)\n    return sum(1 for n in nums if n > 0) / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # return len([num for num in nums if num > 0])\n    return sum([1 for num in nums if num > 0]) / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return len([i for i in nums if i > 0]) / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return len([i for i in nums if i > 0]) / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count = pos_count + 1\n    return pos_count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if nums is None:\n        return 0\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return len([n for n in nums if n>0]) / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    total = 0\n    for x in range(len(nums)):\n        if nums[x] > 0:\n            total += 1\n    return total/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count\nprint(positive_count([-1,2,-3,4]))\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    \n    largest_neg = -1\n    \n    for num in list1:\n        if num > 0:\n            if num > largest_neg:\n                largest_neg = num\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = 0\n    for i in list1:\n        if i < 0 and i > largest:\n            largest = i\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = list1[0]\n    for i in list1:\n        if i<0:\n            if i>largest_num:\n                largest_num = i\n    return largest_num\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = 0\n    for i in range(len(list1)):\n        if list1[i] < 0 and list1[i] > largest:\n            largest = list1[i]\n    return largest\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg_num = float('-inf')\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            if list1[i] > largest_neg_num:\n                largest_neg_num = list1[i]\n    if largest_neg_num == float('-inf'):\n        largest_neg_num = 0\n    return largest_neg_num\nprint(largest_neg([-2, 5, -1, 10]))\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1) == 0:\n        return -1\n    max_element = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] > 0:\n            if max_element < list1[i]:\n                max_element = list1[i]\n        else:\n            return -1\n    return max_element\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = 0\n    for i in list1:\n        if i < 0:\n            if i > max:\n                max = i\n    return max\n    \ndef smallest_pos(list1):\n    '''\n    Write a python function to find the smallest positive number from the given list.\n    '''\n    min = list1[0]\n    for i in list1:\n        if i > 0:\n            if i < min:\n                min = i\n    return min\n    \ndef smallest_neg(list1):\n    '''\n    Write a python function to find the smallest negative number from the given list.\n    '''\n    min = list1[0]\n    for i in list1:\n        if i < 0:\n            if i > min:\n                min = i\n    return min\n    \ndef sum_of_numbers(list1):\n    '''\n    Write a python function to calculate the sum of all the numbers from the given list.\n    '''\n    sum = 0\n    for i in list1:\n        sum = sum + i\n    return sum\n    \ndef avg_of_numbers(list1):\n    '''\n    Write a python function to calculate the average of all the numbers from the given list.\n    '''\n    sum = 0\n    count = 0\n    for i in list1:\n        sum = sum + i\n        count += 1\n    return sum/count\n    \ndef reverse_list(list1):\n    '''\n    Write a python function to reverse the elements of the given list.\n    '''\n    list1.reverse()\n    return list1\n    \ndef max_min(list1):\n    '''\n    Write a python function to find the maximum and minimum number in the given list.\n    '''\n    max = list1[0]\n    min = list1[0]\n    for i in list1:\n        if i > max:\n            max = i\n        if i < min:\n            min = i\n    return max, min\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max=-1\n    for i in range(len(list1)):\n        if list1[i]<0:\n            if list1[i]>max:\n                max=list1[i]\n    return max\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return max(neg_list)\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -99999999\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            if list1[i] > max_neg:\n                max_neg = list1[i]\n    return max_neg\n    \n    \nprint(\"Pass\" if (3 == largest_neg([-1, -2, -3, -4])) else \"Fail\")\nprint(\"Pass\" if (2 == largest_neg([2, 0, 1, -3])) else \"Fail\")\nprint(\"Pass\" if (0 == largest_neg([-1, -2, -3, -4])) else \"Fail\")\nprint(\"Pass\" if (0 == largest_neg([-1, -2, -3, -4])) else \"Fail\")\nprint(\"Pass\" if (999999999 == largest_neg([-1, -2, -3, -4])) else \"Fail\")\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for k in range(K):\n        for elem in test_list:\n            if k < len(elem):\n                new_list.append(elem[k])\n    return new_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(0, len(test_list)):\n        if i % K!= 0:\n            test_list[i] = (test_list[i][0], test_list[i][1])\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return_list = []\n    for element in test_list:\n        return_list.append(tuple(element[:K]))\n    return return_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return tuple([item[:K] for item in test_list])\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    n = len(test_list)\n    for i in range(0, n):\n        test_list[i] = test_list[i][0:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return tuple(test_list[:K])\n    "
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K])\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if K == 0:\n        return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(K,0,-1):\n        test_list = [ x[:i] for x in test_list ]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return test_list\n    else:\n        return trim_tuple(test_list[0:K]) + trim_tuple(test_list[K+1:])\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_result = (test_tup1[0]*test_tup2[0], test_tup1[1]*test_tup2[1], test_tup1[2]*test_tup2[2])\n    return test_result\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    final_tup = []\n    for i in range(len(test_tup1)):\n        final_tup.append(test_tup1[i]*test_tup2[i])\n    return final_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    list1 = []\n    for i in range(0,len(tup1)):\n        list1.append(tup1[i] * tup2[i])\n    return tuple(list1)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    mul_tup = ()\n    for i in range(len(test_tup1)):\n        mul_tup = mul_tup + (test_tup1[i]*test_tup2[i], )\n    return mul_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return (test_tup1[0]*test_tup2[0], test_tup1[1]*test_tup2[1])\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_result = []\n    for i,j in zip(test_tup1,test_tup2):\n        result = i*j\n        index_result.append(result)\n    print(index_result)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if(type(test_tup1) is not tuple or type(test_tup2) is not tuple):\n        return(0)\n    else:\n        if(len(test_tup1)!= len(test_tup2)):\n            return(0)\n        else:\n            i = 0\n            new_tup = []\n            while(i < len(test_tup1)):\n                new_tup.append(test_tup1[i] * test_tup2[i])\n                i += 1\n            return(tuple(new_tup))\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return (i * j for i, j in zip(test_tup1, test_tup2))\n    \ndef index_multiplication2(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return [i * j for i, j in zip(test_tup1, test_tup2)]\n    \ndef index_multiplication3(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return ((i, j) for i, j in zip(test_tup1, test_tup2))\n    \ndef index_multiplication4(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return [(i, j) for i, j in zip(test_tup1, test_tup2)]\n    \ndef index_multiplication5(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return (tuple(x * y for x, y in zip(test_tup1, test_tup2)) )\n    \ndef index_multiplication6(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return (list(x * y for x, y in zip(test_tup1, test_tup2)) )\n    \n    \ndef index_multiplication7(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return (tuple((i,j) for i,j in zip(test_tup1, test_tup2)) )\n    \ndef index_multiplication8(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return (list( (i,j) for i,j in zip(test_tup1, test_tup2)) )\n    \ndef index_multiplication9(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return list(zip(test_tup1, test_tup2))\n    \ndef index_multiplication10(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return list(zip(test_tup1, test_tup2))\n    \ndef index_multiplication11(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return (tuple(tuple(x * y) for x, y in zip(test_tup1, test_tup2)) )\n    \ndef index_multiplication12(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(tuple(x * y) for x, y in zip(test_tup1, test_tup2))\n    \n    "
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    new_tup = (0, 0)\n    for index, i in enumerate(test_tup1):\n        new_tup[index] = i * test_tup2[index]\n    return new_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        ans = []\n        for i in range(len(test_tup1)):\n            ans.append(test_tup1[i] * test_tup2[i])\n        return tuple(ans)\n    else:\n        return 'Both tuples must have equal length'\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    count_in_tup = 0\n    count_in_lst = 0\n    for i in lst:\n        for j in tup:\n            if i == j:\n                count_in_lst += 1\n        if count_in_lst == len(tup):\n            count_in_tup += 1\n        count_in_lst = 0\n    return count_in_tup\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] in tup:\n            count += 1\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_tuple = (tup[i] for i in range(len(tup)))\n    return Counter(count_tuple)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst = list(lst)\n    count = 0\n    for i in lst:\n        if i in tup:\n            count += 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in tup:\n        for j in range(len(lst)):\n            if i == lst[j]:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for i in lst:\n        if i not in tup:\n            print(f\"{i} is not in tuple\")\n            break\n        if i in tup:\n            count = tup.count(i)\n            print(f\"{i} = {count}\")\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    ans = []\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if tup[i] == tup[j]:\n                if j == i:\n                    ans.append(tup[j])\n    return Counter(ans)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(tup).items()\n    \ndef main():\n    tup1 = (1, 2, 3, 4, 4, 4)\n    lst1 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n    tup2 = (6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, "
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = 0\n    for i in lst:\n        if i == tup:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup=tup[0]\n    res_dict=Counter(tup)\n    for key, val in res_dict.items():\n        if val==lst.count(key):\n            return True\n    return False\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i**3)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return map(lambda x: x**3, nums)\nprint(cube_nums([1,2,3]))\nprint(cube_nums(['a','b','c']))\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    new_list = []\n    for num in nums:\n        new_list.append(num**3)\n    return new_list\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return map(lambda x: x ** 3, nums)\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    #SOLUTION\n    nums_cubes = []\n    for num in nums:\n        num_cubes = num ** 3\n        nums_cubes.append(num_cubes)\n    return nums_cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_nums = [num ** 3 for num in nums]\n    return cube_nums\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube = []\n    for num in nums:\n        cube.append(num**3)\n    return cube\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for i in nums:\n        cubes.append(i*i*i)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i*i*i for i in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**3\n    return nums\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n * (n + 1) / 2\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n+cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return sum(int(n) for n in str(n))\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    for i in range(1, n+1):\n        yield i\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i % 3 == 0 or i % 5 == 0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for x in range(1,n):\n        sum += x\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + cal_sum(n - 1) \n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    str = ''.join(str)\n    print(str[:l])\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    i = 0\n    while i < len(l):\n        s = l[i]\n        if len(s) <= l[i]:\n            break\n        else:\n            i += 1\n    return s\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    n=0\n    while n<l:\n        yield str[n]\n        n+=1\ndef even_list(l):\n    '''\n    Write a function to filter even numbers from a list.\n    '''\n    n=0\n    while n<l:\n        if (n%2)==0:\n            yield l[n]\n        n+=1\ndef sub_list(l):\n    '''\n    Write a function to create a sublist from a given list.\n    '''\n    n=0\n    while n<len(l):\n        yield l[n:n+2]\n        n+=1\ndef rotate_list(l):\n    '''\n    Write a function to rotate a list by given index.\n    '''\n    n=0\n    while n<len(l):\n        yield l[n]\n        n+=1\ndef remove_string(str):\n    '''\n    Write a function to remove a given string from the end of a given string.\n    '''\n    n=0\n    while n<len(str):\n        yield str[n]\n        n+=1\ndef remove_string_start(str,s):\n    '''\n    Write a function to remove a given string from the beginning of a given string.\n    '''\n    n=0\n    while n<len(str):\n        if str[n]==s:\n            yield str[n+1:]\n            break\n        n+=1\ndef string_join(l):\n    '''\n    Write a function to join two lists and give the output in string format.\n    '''\n    n=0\n    while n<len(l):\n        yield ''.join(l[n])\n        n+=1\ndef string_join_2(l1,l2):\n    '''\n    Write a function to join two lists and give the output in string format.\n    '''\n    n=0\n    while n<len(l1):\n        yield ''.join(l1[n])\n        n+=1\ndef string_join_3(l1,l2,l3):\n    '''\n    Write a function to join three lists and give the output in string format.\n    '''\n    n=0\n    while n<len(l1):\n        yield ''.join(l1[n])\n        n+=1\ndef string_join_4(l1,l2,l3,l4):\n    '''\n    Write a function to join four lists and give the output in string format.\n    '''\n    n=0\n    while n<len(l1):\n        yield ''.join(l1[n])\n        n+=1\ndef string_join_5(l1,l2,l3,l4,l5):\n    '''\n    Write a function to join five lists and give the output in string format.\n    '''\n    n=0\n    while n<len(l1):\n        yield ''.join(l1[n])\n        n+=1\ndef string_join_6(l1,l2,l3,l4,l5,l6):\n    '''\n    Write a function to join six lists and give the output in string format.\n    '''\n    n=0\n    while n<len(l1):\n        yield ''.join(l1[n])\n        n+=1\ndef string_join_7(l1,l2,l3,l4,l5,l6,l7):\n    '''\n    Write a function to join seven lists and give the output in string format.\n    '''\n    n=0\n    while n<len(l1):\n        yield ''.join(l1[n])\n        n+=1\ndef string_join_8(l1,l2,l3,l4,l5,l6,l7,l8):\n    '''\n    Write a function to join eight lists and give the output in string format.\n    '''\n    n=0\n    while n<len(l1):\n        yield ''.join(l1[n])\n        n+=1\ndef string_join_9(l1,l2,l3,l4,l5,l6,l7,l8,l9):\n    '''\n    Write a function to join nine lists and give the output in string format.\n    '''\n    n=0\n    while n<len(l1):\n        yield ''.join(l1[n])\n        n+=1\ndef string_join_10(l1,l2,l3,l4,l5,l6,l7,l8,l9,l10):\n    '''\n    Write a function to join ten lists and give the output in string format.\n    '''\n    n=0\n    while n<len(l1):\n        yield ''.join(l1[n])\n        n+=1\ndef string_join_11(l1,l2,l3,l4,l5,l6,l7,l8,l9,l10,l11):\n    '''\n    Write a function to join eleven lists and give the output in string format.\n    '''\n    n=0\n    while n<len(l1):\n        yield ''.join(l1[n])\n        n+=1\ndef string_join_12(l1,l2,l3,l4,l5,l6,l7,l8,l9,l10,l11,l12):\n    '''\n    Write a function to join twelve lists and give the output in string format.\n    '''\n    n=0\n    while n<len(l1):\n        yield ''.join(l1[n])\n        n+=1\ndef string_join_13(l1,l2,l3,l4,l5,l6,l7,l8,l9,l10,l11,l12,l13):\n    '''\n    Write a function to join thirteen lists and give the output in string format.\n    '''\n    n=0\n    while n<len(l1):\n        yield ''.join(l1[n])\n        n+=1\ndef string_join_14(l1,l2,l3,l4,l5,l6,l7,l8,l9,l10,l11,l12,l13,l14):\n    '''\n    Write a function to join fourteen lists and give the output in string format.\n    '''\n    n=0\n    while n<len(l1):\n        yield ''.join(l1[n])\n        n+=1\ndef string_join_15(l1,l2,l3,l4,l5,l6,l7,l8,l9,l10,l11,l12,l13,l14,l15):\n    '''\n    Write a function to join fifteen lists and give the output in string format.\n    '''\n    n=0\n    while n<len(l1):\n        yield ''.join(l1[n])\n        n+=1\ndef string_join_16(l1,l2,l3,l4,l5,l6,l7,l8,l9,l10,l11,l12,l13,l14,l15,l16):\n    '''\n    Write a function to join sixteen lists and give the output in string format.\n    '''\n    n=0\n    while n<len(l1):\n        yield ''.join(l1[n])\n        n+=1\ndef string_join_17(l1,l2,l3,l4,l5,l6,l7,l8,l9,l10,l11,l12,l13,l14,l15,l16,l17):\n    '''\n    Write a function to join seventeen lists and give the output in string format.\n    '''\n    n=0\n    while n<len(l1):\n        yield ''.join(l1[n])\n        n+=1\ndef string_join_18(l1,l2,l3,l4,l5,l6,l7,l8,l9,l10,l11,l12,l13,l14,l15,l16,l17,l18):\n    '''\n    Write a function to join eighteen lists and give the output in string format.\n    ''"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) > 0:\n        i = 0\n        while i < l:\n            if i+len(str) <= len(str):\n                return str[i:i+len(str)]\n            i += len(str)\n        return str[0:len(str)]\n    else:\n        return ''\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    print(\"Extracting strings of size {} from list of strings {}:\".format(l, str))\n    print(\"Extracted strings are:\")\n    for x in range(len(l)):\n        if len(l[x]) >= l:\n            print(l[x])\n        else:\n            print(\"{}\".format(l[x]))\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extract = []\n    for i in range(len(str)):\n        if len(extract) == l:\n            break\n        extract.append(str[i])\n    return extract\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l == []:\n        return ''\n    else:\n        return str[0:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    \n    # Below is the approach to extract multiple strings of specified size\n    # The approach uses two loops\n    # The outer loop iterates over the list of strings\n    # The inner loop is used to extract the strings of the specified size\n    # The approach returns a list of strings\n    \n    # Below is the solution using a generator\n    # The approach uses one generator\n    # The generator iterates over the list of strings\n    # The generator uses 'yield' to extract a specified size of strings\n    # The above approach returns a generator\n    \n    # The approach to extract multiple strings of specified size\n    # The approach uses two loops\n    # The outer loop iterates over the list of strings\n    # The inner loop is used to extract the strings of the specified size\n    # The approach returns a list of strings\n    \n    # Below is the solution using a generator\n    # The approach uses one generator\n    # The generator iterates over the list of strings\n    # The generator uses 'yield' to extract a specified size of strings\n    # The above approach returns a generator\n    \n    # Below is the solution using a generator\n    # The approach uses one generator\n    # The generator iterates over the list of strings\n    # The generator uses 'yield' to extract a specified size of strings\n    # The above approach returns a generator\n    \n    \n    \n    if len(str) >= l:\n        #print('Inside if else')\n        count = 0\n        l_string = ''\n        #print('Count:', count)\n        while count < l:\n            #print('Count:', count)\n            #print(str[count])\n            l_string = l_string + str[count]\n            #print('L String:', l_string)\n            count += 1\n        #print(l_string)\n        return l_string\n    else:\n        #print('Inside else')\n        return ''\n        \n    \ndef get_list_of_strings(str, l):\n    '''\n    Write a function to get a list of strings from a given string.\n    '''\n    # The approach is to iterate over the string using a loop\n    # The approach is to iterate over the string using a loop\n    \n    # Below is the solution\n    # The approach is to iterate over the string using a loop\n    # The above approach returns a list of strings\n    \n    \n    # Below is the solution using a generator\n    # The approach is to iterate over the string using a loop\n    # The above approach returns a generator\n    \n    # Below is the solution using a generator\n    # The approach is to iterate over the string using a loop\n    # The above approach returns a generator\n    \n    \n    \n    if len(str) >= l:\n        #print('Inside if else')\n        count = 0\n        l_string = ''\n        #print('Count:', count)\n        while count < l:\n            #print('Count:', count)\n            #print(str[count])\n            l_string = l_string + str[count]\n            #print('L String:', l_string)\n            count += 1\n        #print(l_string)\n        return l_string\n    else:\n        #print('Inside else')\n        return ''\n        \n    \ndef find_string_in_list(str, l):\n    '''\n    Write a function to find a string in a list.\n    '''\n    # The approach is to iterate over the string using a loop\n    # The approach is to iterate over the string using a loop\n    \n    # Below is the solution\n    # The approach is to iterate over the string using a loop\n    # The above approach returns a boolean\n    \n    \n    # Below is the solution using a generator\n    # The approach is to iterate over the string using a loop\n    # The above approach returns a boolean\n    \n    # Below is the solution using a generator\n    # The approach is to iterate over the string using a loop\n    # The above approach returns a boolean\n    \n    \n    \n    if str in l:\n        #print('Inside if else')\n        return True\n    else:\n        #print('Inside else')\n        return False\n        \n    \ndef get_count_of_substring_in_list(str, sub_str, l):\n    '''\n    Write a function to get the count of a particular substring in a list.\n    '''\n    # The approach is to iterate over the string using a loop\n    # The approach is to iterate over the string using a loop\n    \n    # Below is the solution\n    # The approach is to iterate over the string using a loop\n    # The above approach returns a boolean\n    \n    \n    # Below is the solution using a generator\n    # The approach is to iterate over the string using a loop\n    # The above approach returns a boolean\n    \n    # Below is the solution using a generator\n    # The approach is to iterate over the string using a loop\n    # The above approach returns a boolean\n    \n    \n    \n    count = 0\n    #print('Inside count if')\n    #print(count)\n    if str in l:\n        #print('Inside if else')\n        count = l.count(str)\n        #print(count)\n    else:\n        #print('Inside else')\n        count = 0\n        #print(count)\n    #print(count)\n    return count\n    \n    \ndef get_first_occurrence_of_substring_in_list(str, sub_str, l):\n    '''\n    Write a function to get the first occurrence of a particular substring in a list.\n    '''\n    # The approach is to iterate over the string using a loop\n    # The approach is to iterate over the string using a loop\n    \n    # Below is the solution\n    # The approach is to iterate over the string using a loop\n    # The above approach returns a boolean\n    \n    \n    # Below is the solution using a generator\n    # The approach is to iterate over the string using a loop\n    # The above approach returns a boolean\n    \n    # Below is the solution using a generator\n    # The approach is to iterate over the string using a loop\n    # The above approach returns a boolean\n    \n    \n    \n    count = 0\n    #print('Inside count if')\n    #print(count)\n    if str in l:\n        #print('Inside if else')\n        count = l.index(str)\n        #print(count)\n    else:\n        #print('Inside else')\n        count = -1\n        #print(count)\n    #print(count)\n    return count\n    \n    \ndef get_all_occurrences_of_substring_in_list(str, sub_str, l):\n    '''\n    Write a function to get all occurrences of a particular substring in a list.\n    '''\n    # The approach is to iterate over the string using a loop\n    # The approach is to iterate over the string using a loop\n    \n    # Below is the solution\n    # The approach is to iterate over the string using a loop\n    # The above approach returns a boolean\n    \n    \n    # Below is the solution using a generator\n    # The approach is to iterate over the string using a loop\n    # The above approach returns a boolean\n    \n    # Below is the solution using a generator\n    # The approach is to iterate over the string using a loop\n    # The above approach returns a boolean\n    \n    \n    \n    count = 0\n    #print('Inside count if')\n    #print(count)\n    if str in l:\n        #print('Inside if else')\n        count = l.count(str)\n        #print(count)\n    else:\n        #print('Inside else')\n        count = 0\n        #print(count)\n    #print(count)\n    return count\n    \n    \ndef find_and_replace_substring_in_list(str, sub_str, replacement_str, l):\n    '''\n    Write a function to replace a particular substring in a list with another substring.\n    '''\n    # The approach is to iterate over the string using a loop\n    # The approach is to iterate over the string using a loop\n    \n    # Below is the solution\n    # The approach is to iterate over the string using a loop\n    # The above approach returns a boolean\n    \n    \n    # Below is the solution using a generator\n    # The approach is to iterate over the string using a loop\n    # The above approach returns a boolean\n    \n    # Below is the solution using a generator\n    # The approach is to ite"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    str_list = []\n    for i in range(l):\n        str_list.append(str[i])\n    return str_list\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    string = str[l:len(str)]\n    print(string)\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.strip()\n    return text1\n    \ndef is_valid_phone_number(text1):\n    '''\n    Write a function to validate the given phone number.\n    '''\n    if not text1:\n        return False\n    phone_num = re.findall(r\"^[\\+]?[0-9]{3,4}[- ]?[0-9]{3,4}[- ]?[0-9]{4}$\", text1)\n    if phone_num:\n        return True\n    else:\n        return False\n    \ndef is_valid_email(text1):\n    '''\n    Write a function to validate the given email address.\n    '''\n    if not text1:\n        return False\n    email_regex = re.compile(\"\"\"(\n                        [a-zA-Z0-9_.-]+\n                        @\n                        [a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$)\"\"\", re.X)\n    return re.match(email_regex, text1)\n    \ndef is_valid_ipv4_address(text1):\n    '''\n    Write a function to validate the given IPv4 address.\n    '''\n    ipv4_regex = re.compile(r\"^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$\")\n    return re.match(ipv4_regex, text1)\n    \ndef is_valid_ipv6_address(text1):\n    '''\n    Write a function to validate the given IPv6 address.\n    '''\n    ipv6_regex = re.compile(r\"\"\"\n                            (\n                                \\[\n                                (\n                                    [0-9a-fA-F]{1,4}:\n                                    (\n                                        [0-9a-fA-F]{1,4}:\n                                        [0-9a-fA-F]{1,4}:\n                                        [0-9a-fA-F]{1,4}:\n                                        [0-9a-fA-F]{1,4}\n                                    )\n                                    |\n                                    (\n                                        :\n                                        [0-9a-fA-F]{1,4}:\n                                        [0-9a-fA-F]{1,4}:\n                                        [0-9a-fA-F]{1,4}:\n                                        [0-9a-fA-F]{1,4}\n                                    )\n                                    |\n                                    (\n                                        (\n                                            :[0-9a-fA-F]{1,4}\n                                            ){1,2}\n                                        |\n                                        :\n                                        :\n                                    )\n                                    (\n                                        [0-9a-fA-F]{1,4}:\n                                        [0-9a-fA-F]{1,4}:\n                                        [0-9a-fA-F]{1,4}:\n                                        [0-9a-fA-F]{1,4}\n                                    )\n                                    |\n                                    (\n                                        (\n                                            :[0-9a-fA-F]{1,4}\n                                            ){1,3}\n                                        |\n                                        :\n                                        :\n                                    )\n                                    (\n                                        [0-9a-fA-F]{1,4}:\n                                        [0-9a-fA-F]{1,4}:\n                                        [0-9a-fA-F]{1,4}:\n                                        [0-9a-fA-F]{1,4}\n                                    )\n                                    |\n                                    (\n                                        (\n                                            :[0-9a-fA-F]{1,4}\n                                            ){1,4}\n                                        |\n                                        :\n                                        :\n                                    )\n                                    (\n                                        [0-9a-fA-F]{1,4}:\n                                        [0-9a-fA-F]{1,4}:\n                                        [0-9a-fA-F]{1,4}:\n                                        [0-9a-fA-F]{1,4}\n                                    )\n                                    |\n                                    (\n                                        (\n                                            :[0-9a-fA-F]{1,4}\n                                            ){1,5}\n                                        |\n                                        :\n                                        :\n                                    )\n                                    [0-9a-fA-F]{1,4}:\n                                    [0-9a-fA-F]{1,4}:\n                                    [0-9a-fA-F]{1,4}:\n                                    [0-9a-fA-F]{1,4}\n                                    )\n                                )\n                            )\n                            |\n                            (\n                                ([0-9a-fA-F]{1,4}:){1,7}[0-9a-fA-F]{1,4}\n                            )\n                            \"\"\", re.X)\n    return re.match(ipv6_regex, text1)\n    \ndef is_valid_mac_address(text1):\n    '''\n    Write a function to validate the given MAC address.\n    '''\n    mac_regex = re.compile(r\"\"\"\n                            [0-9a-fA-F]{1,2}\n                            [-:]\n                            [0-9a-fA-F]{1,2}\n                            [-:]\n                            [0-9a-fA-F]{1,2}\n                            [-:]\n                            [0-9a-fA-F]{1,2}\n                            \"\"\", re.X)\n    return re.match(mac_regex, text1)\n    \ndef is_valid_uuid(text1):\n    '''\n    Write a function to validate the given UUID.\n    '''\n    uuid_regex = re.compile(r'^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$')\n    return re.match(uuid_regex, text1)\n    \ndef is_valid_phone_number(text1):\n    '''\n    Write a function to validate the given phone number.\n    '''\n    if not text1:\n        return False\n    phone_num = re.findall(r\"^[\\+]?[0-9]{3,4}[- ]?[0-9]{3,4}[- ]?[0-9]{4}$\", text1)\n    if phone_num:\n        return True\n    else:\n        return False\n    \ndef is_valid_email(text1):\n    '''\n    Write a function to validate the given email address.\n    '''\n    if not text1:\n        return False\n    email_regex = re.compile(\"\"\"(\n                        [a-zA-Z0-9_.-]+\n                        @\n                        [a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$)\"\"\", re.X)\n    return re.match(email_regex, text1)\n    \ndef is_valid_ipv4_address(text1):\n    '''\n    Write a function to validate the given IPv4 address.\n    '''\n    ipv4_regex = re.compile(r\"^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$\")\n    return re.match(ipv4_regex, text1)\n    \ndef is_valid_ipv6_address(text1):\n    '''\n    Write a function to validate the given IPv6 address.\n    '''\n    ipv6_regex = re.compile(r\"\"\"\n                            (\n                                \\[\n                                (\n                                    [0-9a-fA-F]{1,4}:\n                                    (\n                                        [0-9a-fA-F]{1,4}:\n                                        [0-9a-fA-"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pass\ndef multiply_words(text2):\n    '''\n    Write a function to multiply all the words present in the given string and return it as a single string.\n    '''\n    pass\ndef add_space_before_digit(text3):\n    '''\n    Write a function to add a space before every digit in the given string.\n    '''\n    pass\ndef add_space_after_string(text4):\n    '''\n    Write a function to add a space after each string in the given string.\n    '''\n    pass\ndef add_space_before_punctuations(text5):\n    '''\n    Write a function to add a space before each punctuation present in the given string.\n    '''\n    pass\ndef add_space_after_punctuations(text6):\n    '''\n    Write a function to add a space after each punctuation present in the given string.\n    '''\n    pass\ndef add_space_after_each_word(text7):\n    '''\n    Write a function to add a space after each word in the given string.\n    '''\n    pass\ndef add_space_before_each_word(text8):\n    '''\n    Write a function to add a space before each word in the given string.\n    '''\n    pass\ndef remove_space_between_words(text9):\n    '''\n    Write a function to remove a space between the words in the given string.\n    '''\n    pass\ndef count_no_of_words(text10):\n    '''\n    Write a function to count the number of words in the given string.\n    '''\n    pass\ndef reverse_string(text11):\n    '''\n    Write a function to reverse the given string.\n    '''\n    pass\ndef add_newline_after_first_occurence_of_word(text12):\n    '''\n    Write a function to add a new line after the first occurence of a word in the given string.\n    '''\n    pass\ndef remove_punctuation(text13):\n    '''\n    Write a function to remove all punctuations in the given string.\n    '''\n    pass\ndef remove_digits(text14):\n    '''\n    Write a function to remove all digits in the given string.\n    '''\n    pass\ndef remove_non_ascii_characters(text15):\n    '''\n    Write a function to remove all non ascii characters in the given string.\n    '''\n    pass\ndef remove_numbers(text16):\n    '''\n    Write a function to remove all numbers in the given string.\n    '''\n    pass\ndef remove_lowercase_characters(text17):\n    '''\n    Write a function to remove all lowercase characters in the given string.\n    '''\n    pass\ndef reverse_sentence(text18):\n    '''\n    Write a function to reverse the given string.\n    '''\n    pass\ndef is_palindrome(text19):\n    '''\n    Write a function to check if the given string is palindrome or not.\n    '''\n    pass\ndef is_anagram(text20):\n    '''\n    Write a function to check if two strings are anagrams or not.\n    '''\n    pass\ndef is_palindrome_with_space(text21):\n    '''\n    Write a function to check if the given string is palindrome or not.\n    '''\n    pass\ndef is_palindrome_with_space_and_concatenation(text22):\n    '''\n    Write a function to check if the given string is palindrome or not.\n    '''\n    pass\ndef reverse_sentence_with_space(text23):\n    '''\n    Write a function to reverse the given string.\n    '''\n    pass\ndef rotate_string_90(text24):\n    '''\n    Write a function to rotate the given string by 90 degrees.\n    '''\n    pass\ndef rotate_string_180(text25):\n    '''\n    Write a function to rotate the given string by 180 degrees.\n    '''\n    pass\ndef rotate_string_270(text26):\n    '''\n    Write a function to rotate the given string by 270 degrees.\n    '''\n    pass\ndef is_substring_present_in_string(text27):\n    '''\n    Write a function to check if the given substring is present in the given string.\n    '''\n    pass\ndef count_occurences_of_substring(text28):\n    '''\n    Write a function to count the number of occurences of the given substring in the given string.\n    '''\n    pass\ndef remove_whitespaces(text29):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pass\ndef remove_numbers(text30):\n    '''\n    Write a function to remove all numbers in the given string.\n    '''\n    pass\ndef remove_digits(text31):\n    '''\n    Write a function to remove all digits in the given string.\n    '''\n    pass\ndef add_lowercase_characters(text32):\n    '''\n    Write a function to add all lowercase characters in the given string.\n    '''\n    pass\ndef count_characters(text33):\n    '''\n    Write a function to count the number of characters in the given string.\n    '''\n    pass\ndef remove_newline_from_beginning_and_end(text34):\n    '''\n    Write a function to remove the new line from the beginning and the end of the given string.\n    '''\n    pass\ndef count_occurences_in_range(text35):\n    '''\n    Write a function to count the number of occurences of the given substring in the given string.\n    '''\n    pass\ndef replace_occurence_of_substring(text36):\n    '''\n    Write a function to replace the occurences of the given substring in the given string with the given string.\n    '''\n    pass\ndef remove_prefix(text37):\n    '''\n    Write a function to remove the prefix from the given string.\n    '''\n    pass\ndef reverse_string_substring(text38):\n    '''\n    Write a function to reverse the string and then substring from the given start position to the end position of the substring in the given string.\n    '''\n    pass\ndef reverse_substring(text39):\n    '''\n    Write a function to reverse the substring in the given string.\n    '''\n    pass\ndef is_palindrome(text40):\n    '''\n    Write a function to check if the given string is palindrome or not.\n    '''\n    pass\ndef is_palindrome_with_space(text41):\n    '''\n    Write a function to check if the given string is palindrome or not.\n    '''\n    pass\ndef is_palindrome_with_space_and_concatenation(text42):\n    '''\n    Write a function to check if the given string is palindrome or not.\n    '''\n    pass\ndef rotate_string_90(text43):\n    '''\n    Write a function to rotate the given string by 90 degrees.\n    '''\n    pass\ndef rotate_string_180(text44):\n    '''\n    Write a function to rotate the given string by 180 degrees.\n    '''\n    pass\ndef rotate_string_270(text45):\n    '''\n    Write a function to rotate the given string by 270 degrees.\n    '''\n    pass\ndef is_substring_present_in_string(text46):\n    '''\n    Write a function to check if the given substring is present in the given string.\n    '''\n    pass\ndef count_occurences_in_range(text47):\n    '''\n    Write a function to count the number of occurences of the given substring in the given string.\n    '''\n    pass\ndef replace_substring(text48):\n    '''\n    Write a function to replace the substring in the given string.\n    '''\n    pass\ndef remove_newline_from_beginning_and_end(text49):\n    '''\n    Write a function to remove the new line from the beginning and the end of the given string.\n    '''\n    pass\ndef count_occurences_of_substring(text50):"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # text1=re.sub('\\s+',' ',text1)\n    text1 = ''.join(text1.split())\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = re.compile(\"\\s+\")\n    return pattern.sub('',text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1\ndef remove_line_breaks(text2):\n    '''\n    Write a function to remove line breaks from the given string.\n    '''\n    text2 = re.sub(r'\\n','', text2)\n    text2 = re.sub(r'\\r','', text2)\n    return text2\ndef remove_capitalization(text3):\n    '''\n    Write a function to remove capitalization from the given string.\n    '''\n    text3 = re.sub(r'\\s([A-Z])', r'\\1', text3)\n    return text3\ndef remove_special_characters(text4):\n    '''\n    Write a function to remove special characters from the given string.\n    '''\n    text4 = re.sub(r'\\s([^\\s\\w]+)', r'\\1', text4)\n    return text4\ndef remove_parenthesis(text5):\n    '''\n    Write a function to remove parenthesis from the given string.\n    '''\n    text5 = re.sub(r'\\s\\(.*\\)', r'', text5)\n    return text5\ndef remove_whitespaces_inside_parenthesis(text6):\n    '''\n    Write a function to remove whitespaces inside parenthesis from the given string.\n    '''\n    text6 = re.sub(r'\\((.*)\\)', r'\\1', text6)\n    return text6\ndef remove_lowercase_letters(text7):\n    '''\n    Write a function to remove lowercase letters from the given string.\n    '''\n    text7 = re.sub(r'[a-z]+', '', text7)\n    return text7\ndef remove_uppercase_letters(text8):\n    '''\n    Write a function to remove uppercase letters from the given string.\n    '''\n    text8 = re.sub(r'[A-Z]+', '', text8)\n    return text8\ndef remove_whitespaces_from_sentence(text9):\n    '''\n    Write a function to remove whitespaces from sentence.\n    '''\n    text9 = re.sub(r'\\s', '', text9)\n    return text9\ndef remove_line_breaks_from_sentence(text10):\n    '''\n    Write a function to remove line breaks from sentence.\n    '''\n    text10 = re.sub(r'\\n', '', text10)\n    text10 = re.sub(r'\\r', '', text10)\n    return text10\ndef remove_special_characters_from_sentence(text11):\n    '''\n    Write a function to remove special characters from sentence.\n    '''\n    text11 = re.sub(r'\\s([^\\s\\w]+)', r'\\1', text11)\n    return text11\ndef remove_parenthesis_from_sentence(text12):\n    '''\n    Write a function to remove parenthesis from sentence.\n    '''\n    text12 = re.sub(r'\\s\\(.*\\)', r'', text12)\n    return text12\ndef remove_whitespaces_inside_parenthesis(text13):\n    '''\n    Write a function to remove whitespaces inside parenthesis from sentence.\n    '''\n    text13 = re.sub(r'\\((.*)\\)', r'\\1', text13)\n    return text13\ndef remove_capitalization_from_sentence(text14):\n    '''\n    Write a function to remove capitalization from sentence.\n    '''\n    text14 = re.sub(r'\\s([A-Z])', r'\\1', text14)\n    return text14\ndef remove_whitespaces_from_sentence(text15):\n    '''\n    Write a function to remove whitespaces from sentence.\n    '''\n    text15 = re.sub(r'\\s', '', text15)\n    return text15\ndef remove_line_breaks_from_sentence(text16):\n    '''\n    Write a function to remove line breaks from sentence.\n    '''\n    text16 = re.sub(r'\\n', '', text16)\n    text16 = re.sub(r'\\r', '', text16)\n    return text16\ndef remove_parenthesis_from_sentence(text17):\n    '''\n    Write a function to remove parenthesis from sentence.\n    '''\n    text17 = re.sub(r'\\s\\(.*\\)', r'', text17)\n    return text17\ndef remove_special_characters_from_sentence(text18):\n    '''\n    Write a function to remove special characters from sentence.\n    '''\n    text18 = re.sub(r'\\s([^\\s\\w]+)', r'\\1', text18)\n    return text18\ndef remove_lowercase_letters_from_sentence(text19):\n    '''\n    Write a function to remove lowercase letters from sentence.\n    '''\n    text19 = re.sub(r'[a-z]+', '', text19)\n    return text19\ndef remove_uppercase_letters_from_sentence(text20):\n    '''\n    Write a function to remove uppercase letters from sentence.\n    '''\n    text20 = re.sub(r'[A-Z]+', '', text20)\n    return text20\ndef remove_whitespaces_from_sentence(text21):\n    '''\n    Write a function to remove whitespaces from sentence.\n    '''\n    text21 = re.sub(r'\\s', '', text21)\n    return text21\ndef remove_line_breaks_from_sentence(text22):\n    '''\n    Write a function to remove line breaks from sentence.\n    '''\n    text22 = re.sub(r'\\n', '', text22)\n    text22 = re.sub(r'\\r', '', text22)\n    return text22\ndef remove_special_characters_from_sentence(text23):\n    '''\n    Write a function to remove special characters from sentence.\n    '''\n    text23 = re.sub(r'\\s([^\\s\\w]+)', r'\\1', text23)\n    return text23\ndef remove_parenthesis_from_sentence(text24):\n    '''\n    Write a function to remove parenthesis from sentence.\n    '''\n    text24 = re.sub(r'\\s\\(.*\\)', r'', text24)\n    return text24\ndef remove_whitespaces_inside_parenthesis(text25):\n    '''\n    Write a function to remove whitespaces inside parenthesis from sentence.\n    '''\n    text25 = re.sub(r'\\((.*)\\)', r'\\1', text25)\n    return text25\ndef remove_capitalization_from_sentence(text26):\n    '''\n    Write a function to remove capitalization from sentence.\n    '''\n    text26 = re.sub(r'\\s([A-Z])', r'\\1', text26)\n    return text26\ndef remove_whitespaces_from_sentence(text27):\n    '''\n    Write a function to remove whitespaces from sentence.\n    '''\n    text27 = re.sub(r'\\s', '', text27)\n    return text27\ndef remove_line_breaks_from_sentence(text28):\n    '''\n    Write a function to remove line breaks from sentence.\n    '''\n    text28 = re.sub(r'\\n', '', text28)\n    text28 = re.sub(r'\\r', '', text28)\n    return text28\ndef remove_parenthesis_from_sentence(text29):\n    '''\n    Write a function to remove parenthesis from sentence.\n    '''\n    text29 = re.sub(r'\\s\\(.*\\)', r'', text29)\n    return text29\ndef remove_whitespaces_inside_parenthesis(text30):\n    '''\n    Write a function to remove whitespaces inside parenthesis from sentence.\n    '''\n    text30 = re.sub(r'\\((.*)\\)', r'\\1', text30)\n    return text30\ndef remove_lowercase_letters_from_sentence(text31):\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    a_list = text1.split(' ')\n    a_list1 = []\n    for i in a_list:\n        if i.strip()!= '':\n            a_list1.append(i)\n    return''.join(a_list1)\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = text1.split()\n    return (\" \".join(text))\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\ndef remove_whitespaces(text):\n    text = text.replace(\" \", \"\")\n    return text\ndef remove_punctuations(text):\n    '''\n    Write a function to remove all punctuations from the given string.\n    '''\n    return text.translate(text.maketrans(\"\",\"\",\"!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\"))\ndef remove_punctuations(text):\n    text = re.sub(\"[^A-Za-z0-9]+\",' ',text)\n    return text\ndef is_ipv4_address(address):\n    '''\n    Write a function to check whether the given address is a valid IPv4 address or not.\n    '''\n    return bool(re.match(r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$', address))\ndef is_ipv4_address(address):\n    return address.count('.') == 3\ndef is_ipv4_address(address):\n    return address.count('.') == 3\ndef is_ipv4_address(address):\n    import re\n    regex = r\"^((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$\"\n    return bool(re.match(regex, address))\ndef is_ipv4_address(address):\n    return len(address.split('.')) == 4\ndef is_ipv4_address(address):\n    return len(address.split('.')) == 4\ndef is_ipv4_address(address):\n    return len(address.split('.')) == 4\ndef is_ipv4_address(address):\n    import re\n    regex = r\"^((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$\"\n    return bool(re.match(regex, address))\ndef is_ipv4_address(address):\n    return len(address.split('.')) == 4\ndef is_ipv4_address(address):\n    return len(address.split('.')) == 4\ndef is_ipv4_address(address):\n    import re\n    regex = r\"^((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$\"\n    return bool(re.match(regex, address))\ndef is_ipv4_address(address):\n    return len(address.split('.')) == 4\ndef is_ipv4_address(address):\n    return len(address.split('.')) == 4\ndef is_ipv4_address(address):\n    import re\n    regex = r\"^((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$\"\n    return bool(re.match(regex, address))\ndef is_ipv4_address(address):\n    return len(address.split('.')) == 4\ndef is_ipv4_address(address):\n    return len(address.split('.')) == 4\ndef is_ipv4_address(address):\n    import re\n    regex = r\"^((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$\"\n    return bool(re.match(regex, address))\ndef is_ipv4_address(address):\n    return len(address.split('.')) == 4\ndef is_ipv4_address(address):\n    return len(address.split('.')) == 4\ndef is_ipv4_address(address):\n    import re\n    regex = r\"^((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$\"\n    return bool(re.match(regex, address))\ndef is_ipv4_address(address):\n    return len(address.split('.')) == 4\ndef is_ipv4_address(address):\n    return len(address.split('.')) == 4\ndef is_ipv4_address(address):\n    import re\n    regex = r\"^((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$\"\n    return bool(re.match(regex, address))\ndef is_ipv4_address(address):\n    return len(address.split('.')) == 4\ndef is_ipv4_address(address):\n    return len(address.split('.')) == 4\ndef is_ipv4_address(address):\n    import re\n    regex = r\"^((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$\"\n    return bool(re.match(regex, address))\ndef is_ipv4_address(address):\n    return len(address.split('.')) == 4\ndef is_ipv4_address(address):\n    return len(address.split('.')) == 4\ndef is_ipv4_address(address):\n    import re\n    regex = r\"^((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$\"\n    return bool(re.match(regex, address))\ndef is_ipv4_address(address):\n    return len(address.split('.')) == 4\ndef is_ipv4_address(address):\n    return len(address.split('.')) == 4\ndef is_ipv4_address(address):\n    import re\n    regex = r\"^((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$\"\n    return bool(re.match(regex, address))\ndef is_ipv4_address(address):\n    return len(address.split('.')) == 4\ndef is_ipv4_address(address):\n    return len(address.split('.')) == 4\ndef is_ipv4_address(address):\n    import re\n    regex = r\"^((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$\"\n    return bool(re.match(regex, address))\ndef is_ipv4_address(address):\n    return len(address.split('.')) == 4\ndef is_ipv4_address(address):\n    return len(address.split('.')) == 4\ndef is_ipv4_address(address):\n    import re\n    regex = r\"^((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$\"\n    return bool"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    no_whitespaces = re.sub(r'\\s+', '', text1)\n    return no_whitespaces\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost > sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost-sale_amount < 0:\n        return 0\n    else:\n        return actual_cost-sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = 0\n    if actual_cost < sale_amount:\n        loss_amount = sale_amount - actual_cost\n    return loss_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return 0 if actual_cost>sale_amount else actual_cost-sale_amount\n    \n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost <= sale_amount:\n        return 0\n    else:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n    else:\n        loss_amount = 0\n    return loss_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n        \n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount=0\n    if(actual_cost<sale_amount):\n        loss_amount=(sale_amount-actual_cost)\n    return loss_amount\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                total = total + i\n    return total\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(i for i in range(1,n) if n % i == 0) \n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    \n    print(n)\n    SumofFactors = 0\n    for i in range(1,n+1):\n        if n%i==0:\n            SumofFactors += i\n    print(SumofFactors)\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    for i in range(1, n) :\n        if (n % i) == 0 : \n            total += i \n    return total\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum=0\n    for i in range(1,n+1) :\n        if(n%i==0) :\n            sum=sum+i\n    return sum\ndef sumofFactors_1(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(i for i in range(1,n+1) if not n%i)\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors=[]\n    \n    for i in range(1,n+1):\n        if(n%i==0) :\n            factors.append(i)\n    s=0\n    for i in factors :\n        if(i%2==0) :\n            s=s+i\n    return s\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, (n//2)+1):\n        if (n%i == 0) and (i%2 == 0) :\n            sum = sum + i\n    return sum\n    "
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if (i%2 == 0) :\n            sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if(n%i == 0):\n            if(i%2 == 0):\n                sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    while (n % 2 == 0): \n        sum += n // 2\n        n = n // 2\n    return sum + n \nprint(\"Sum of Even factors of a number : \", end = \"\")\nprint(sumofFactors(int(input()))) \n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    result = re.search(r'\\bz\\w+',text)\n    return result\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    reg = re.compile('z')\n    return reg.search(text)\ndef text_match_wordy(text):\n    '''\n    Write a function that matches a word containing 'y'.\n    '''\n    reg = re.compile('y')\n    return reg.search(text)\ndef text_match_wordx(text):\n    '''\n    Write a function that matches a word containing 'x'.\n    '''\n    reg = re.compile('x')\n    return reg.search(text)\ndef text_match_wordq(text):\n    '''\n    Write a function that matches a word containing 'q'.\n    '''\n    reg = re.compile('q')\n    return reg.search(text)\ndef text_match_wordn(text):\n    '''\n    Write a function that matches a word containing 'n'.\n    '''\n    reg = re.compile('n')\n    return reg.search(text)\ndef text_match_wordm(text):\n    '''\n    Write a function that matches a word containing'm'.\n    '''\n    reg = re.compile('m')\n    return reg.search(text)\ndef text_match_wordo(text):\n    '''\n    Write a function that matches a word containing 'o'.\n    '''\n    reg = re.compile('o')\n    return reg.search(text)\ndef text_match_wordp(text):\n    '''\n    Write a function that matches a word containing 'p'.\n    '''\n    reg = re.compile('p')\n    return reg.search(text)\ndef text_match_words(text):\n    '''\n    Write a function that matches a word containing's'.\n    '''\n    reg = re.compile('s')\n    return reg.search(text)\ndef text_match_wordt(text):\n    '''\n    Write a function that matches a word containing 't'.\n    '''\n    reg = re.compile('t')\n    return reg.search(text)\ndef text_match_wordf(text):\n    '''\n    Write a function that matches a word containing 'f'.\n    '''\n    reg = re.compile('f')\n    return reg.search(text)\ndef text_match_wordu(text):\n    '''\n    Write a function that matches a word containing 'u'.\n    '''\n    reg = re.compile('u')\n    return reg.search(text)\ndef text_match_wordr(text):\n    '''\n    Write a function that matches a word containing 'r'.\n    '''\n    reg = re.compile('r')\n    return reg.search(text)\ndef text_match_worda(text):\n    '''\n    Write a function that matches a word containing 'a'.\n    '''\n    reg = re.compile('a')\n    return reg.search(text)\ndef text_match_wordk(text):\n    '''\n    Write a function that matches a word containing 'k'.\n    '''\n    reg = re.compile('k')\n    return reg.search(text)\ndef text_match_wordo(text):\n    '''\n    Write a function that matches a word containing 'o'.\n    '''\n    reg = re.compile('o')\n    return reg.search(text)\ndef text_match_wordn(text):\n    '''\n    Write a function that matches a word containing 'n'.\n    '''\n    reg = re.compile('n')\n    return reg.search(text)\ndef text_match_wordl(text):\n    '''\n    Write a function that matches a word containing 'l'.\n    '''\n    reg = re.compile('l')\n    return reg.search(text)\ndef text_match_wordh(text):\n    '''\n    Write a function that matches a word containing 'h'.\n    '''\n    reg = re.compile('h')\n    return reg.search(text)\ndef text_match_wordd(text):\n    '''\n    Write a function that matches a word containing 'd'.\n    '''\n    reg = re.compile('d')\n    return reg.search(text)\ndef text_match_worda(text):\n    '''\n    Write a function that matches a word containing 'a'.\n    '''\n    reg = re.compile('a')\n    return reg.search(text)\ndef text_match_wordh(text):\n    '''\n    Write a function that matches a word containing 'h'.\n    '''\n    reg = re.compile('h')\n    return reg.search(text)\ndef text_match_wordy(text):\n    '''\n    Write a function that matches a word containing 'y'.\n    '''\n    reg = re.compile('y')\n    return reg.search(text)\ndef text_match_wordo(text):\n    '''\n    Write a function that matches a word containing 'o'.\n    '''\n    reg = re.compile('o')\n    return reg.search(text)\ndef text_match_wordc(text):\n    '''\n    Write a function that matches a word containing 'c'.\n    '''\n    reg = re.compile('c')\n    return reg.search(text)\ndef text_match_wordl(text):\n    '''\n    Write a function that matches a word containing 'l'.\n    '''\n    reg = re.compile('l')\n    return reg.search(text)\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    reg = re.compile('z')\n    return reg.search(text)\ndef text_match_wordq(text):\n    '''\n    Write a function that matches a word containing 'q'.\n    '''\n    reg = re.compile('q')\n    return reg.search(text)\ndef text_match_wordp(text):\n    '''\n    Write a function that matches a word containing 'p'.\n    '''\n    reg = re.compile('p')\n    return reg.search(text)\ndef text_match_wordw(text):\n    '''\n    Write a function that matches a word containing 'w'.\n    '''\n    reg = re.compile('w')\n    return reg.search(text)\ndef text_match_worde(text):\n    '''\n    Write a function that matches a word containing 'e'.\n    '''\n    reg = re.compile('e')\n    return reg.search(text)\ndef text_match_wordq(text):\n    '''\n    Write a function that matches a word containing 'q'.\n    '''\n    reg = re.compile('q')\n    return reg.search(text)\ndef text_match_wordm(text):\n    '''\n    Write a function that matches a word containing'm'.\n    '''\n    reg = re.compile('m')\n    return reg.search(text)\ndef text_match_wordx(text):\n    '''\n    Write a function that matches a word containing 'x'.\n    '''\n    reg = re.compile('x')\n    return reg.search(text)\ndef text_match_worde(text):\n    '''\n    Write a function that matches a word containing 'e'.\n    '''\n    reg = re.compile('e')\n    return reg.search(text)\ndef text_match_wordc(text):\n    '''\n    Write a function that matches a word containing 'c'.\n    '''\n    reg = re.compile('c')\n    return reg.search(text)\ndef text_match_wordo(text):\n    '''\n    Write a function that matches a word containing 'o'.\n    '''\n    reg = re.compile('o')\n    return reg.search(text)\ndef text_match_wordu(text):\n    '''\n    Write a function that matches a word containing 'u'.\n    '''\n    reg = re.compile('u')\n    return reg.search(text)\ndef text_match_wordr(text):\n    '''\n    Write a function that matches a word containing 'r'.\n    '''\n    reg = re.compile('r')\n    return reg.search(text)\ndef text_match_wordn(text):\n    '''\n    Writ"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.findall(r'z', text):\n        return True\n    else:\n        return False\n        \ndef text_match_word_start_end(text):\n    '''\n    Write a function that matches a word starting with 'z'.\n    '''\n    if re.findall(r'z', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word = re.findall(r'z',text)\n    return len(word) > 0\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\bz\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pat = re.compile(r'\\w+z\\b')\n    if re.search(pat,text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text_pattern = re.compile(r'z')\n    return text_pattern.search(text)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    try:\n        match = re.search(r'\\d{5}z',text)\n        if match:\n            return True\n        else:\n            return False\n    except TypeError:\n        return False\ndef text_match_wordz1(text):\n    '''\n    Write a function that matches a word containing 'z' and 'a'.\n    '''\n    try:\n        match = re.search(r'\\d{5}z(.*)a',text)\n        if match:\n            return match.group()\n        else:\n            return False\n    except TypeError:\n        return False\ndef text_match_wordz2(text):\n    '''\n    Write a function that matches a word containing 'z' and 'a' and 'i'.\n    '''\n    try:\n        match = re.search(r'\\d{5}z(.*)a(.*)i',text)\n        if match:\n            return match.group()\n        else:\n            return False\n    except TypeError:\n        return False\ndef text_match_wordz3(text):\n    '''\n    Write a function that matches a word containing 'z' and 'a' and 'i' and 'l'.\n    '''\n    try:\n        match = re.search(r'\\d{5}z(.*)a(.*)i(.*)l',text)\n        if match:\n            return match.group()\n        else:\n            return False\n    except TypeError:\n        return False\ndef text_match_wordz4(text):\n    '''\n    Write a function that matches a word containing 'z' and 'a' and 'i' and 'l' and 'o'.\n    '''\n    try:\n        match = re.search(r'\\d{5}z(.*)a(.*)i(.*)l(.*)o',text)\n        if match:\n            return match.group()\n        else:\n            return False\n    except TypeError:\n        return False\ndef text_match_wordz5(text):\n    '''\n    Write a function that matches a word containing 'z' and 'a' and 'i' and 'l' and 'o' and 'u'.\n    '''\n    try:\n        match = re.search(r'\\d{5}z(.*)a(.*)i(.*)l(.*)o(.*)u',text)\n        if match:\n            return match.group()\n        else:\n            return False\n    except TypeError:\n        return False\ndef text_match_wordz6(text):\n    '''\n    Write a function that matches a word containing 'z' and 'a' and 'i' and 'l' and 'o' and 'u' and 'e'.\n    '''\n    try:\n        match = re.search(r'\\d{5}z(.*)a(.*)i(.*)l(.*)o(.*)u(.*)e',text)\n        if match:\n            return match.group()\n        else:\n            return False\n    except TypeError:\n        return False\ndef text_match_wordz7(text):\n    '''\n    Write a function that matches a word containing 'z' and 'a' and 'i' and 'l' and 'o' and 'u' and 'e' and 'n'.\n    '''\n    try:\n        match = re.search(r'\\d{5}z(.*)a(.*)i(.*)l(.*)o(.*)u(.*)e(.*)n',text)\n        if match:\n            return match.group()\n        else:\n            return False\n    except TypeError:\n        return False\ndef text_match_wordz8(text):\n    '''\n    Write a function that matches a word containing 'z' and 'a' and 'i' and 'l' and 'o' and 'u' and 'e' and 'n' and 'd'.\n    '''\n    try:\n        match = re.search(r'\\d{5}z(.*)a(.*)i(.*)l(.*)o(.*)u(.*)e(.*)n(.*)d',text)\n        if match:\n            return match.group()\n        else:\n            return False\n    except TypeError:\n        return False\ndef text_match_wordz9(text):\n    '''\n    Write a function that matches a word containing 'z' and 'a' and 'i' and 'l' and 'o' and 'u' and 'e' and 'n' and 'd' and 'o'.\n    '''\n    try:\n        match = re.search(r'\\d{5}z(.*)a(.*)i(.*)l(.*)o(.*)u(.*)e(.*)n(.*)d(.*)o',text)\n        if match:\n            return match.group()\n        else:\n            return False\n    except TypeError:\n        return False\ndef text_match_wordz10(text):\n    '''\n    Write a function that matches a word containing 'z' and 'a' and 'i' and 'l' and 'o' and 'u' and 'e' and 'n' and 'd' and 'o' and 't'.\n    '''\n    try:\n        match = re.search(r'\\d{5}z(.*)a(.*)i(.*)l(.*)o(.*)u(.*)e(.*)n(.*)d(.*)o(.*)t',text)\n        if match:\n            return match.group()\n        else:\n            return False\n    except TypeError:\n        return False\ndef text_match_wordz11(text):\n    '''\n    Write a function that matches a word containing 'z' and 'a' and 'i' and 'l' and 'o' and 'u' and 'e' and 'n' and 'd' and 'o' and 't' and 'a'.\n    '''\n    try:\n        match = re.search(r'\\d{5}z(.*)a(.*)i(.*)l(.*)o(.*)u(.*)e(.*)n(.*)d(.*)o(.*)t(.*)a',text)\n        if match:\n            return match.group()\n        else:\n            return False\n    except TypeError:\n        return False\ndef text_match_wordz12(text):\n    '''\n    Write a function that matches a word containing 'z' and 'a' and 'i' and 'l' and 'o' and 'u' and 'e' and 'n' and 'd' and 'o' and 't' and 'a' and 'c'.\n    '''\n    try:\n        match = re.search(r'\\d{5}z(.*)a(.*)i(.*)l(.*)o(.*)u(.*)e(.*)n(.*)d(.*)o(.*)t(.*)a(.*)c',text)\n        if match:\n            return match.group()\n        else:\n            return False\n    except TypeError:\n        return False\ndef text_match_wordz13(text):\n    '''\n    Write a function that matches a word containing 'z' and 'a' and 'i' and 'l' and 'o' and 'u' and 'e' and 'n' and 'd' and 'o' and 't' and 'a' and 'c' and 'l'.\n    '''\n    try:\n        match = re.search(r'\\d{5}z(.*)a(.*)i(.*)l(.*)o(.*)u(.*)e(.*)n(.*)d(.*)o(.*)t(.*)a(.*)c(.*)l',text)\n        if match:\n            return match.group()\n        else:\n            return False\n    except TypeError:\n        return False\ndef text_match_wordz14(text):\n    '''\n    Write a function that matches a word containing 'z' and 'a' and 'i' and 'l' and 'o' and 'u' and 'e' and 'n' and 'd' and 'o' and 't' and 'a' and 'c' and 'l' and 'o'.\n    '''\n    try:\n        match = re.search(r'\\d{5}z(.*)a(.*)i"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    patterns = re.compile(r'z')\n    if re.search(patterns, text):\n        return True\n    else:\n        return False\n    # +++your code here+++\n    # LAB(begin solution)\n    # text = 'I love many zebra mountains.'\n    # patterns = re.compile(r'z')\n    # return patterns.search(text) is not None\n    # +++your code here+++\n    # LAB(end solution)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    list_w = re.findall(r'\\b[a-zA-Z]+z\\b', text)\n    return list_w\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1,13):\n        if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    for i in range(12):\n        if monthnum2 == i+1:\n            return True\n    return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if int(monthnum2) < 1 or int(monthnum2) > 12:\n        print('The number you entered is not between 1 and 12.')\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    months = {'January':31, 'February':28, 'March':31, 'April':30, 'May':31, 'June':30, 'July':31, 'August':31, 'September':30, 'October':31, 'November':30, 'December':31}\n    return months[monthnum2]\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month_dict = {\n                    1: 31,\n                    2: 28,\n                    3: 31,\n                    4: 30,\n                    5: 31,\n                    6: 30,\n                    7: 31,\n                    8: 31,\n                    9: 30,\n                    10: 31,\n                    11: 30,\n                    12: 31\n                }\n    if month_dict[monthnum2] == 31:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 > 0 and monthnum2 <= 12:\n        if monthnum2 == 2:\n            if (year % 4 == 0) and (year % 100!= 0 or year % 400 == 0):\n                if (monthnum2 == 2) and (year % 100 == 0) and (year % 400 == 0):\n                    print(monthnum2, \"month has 28 days\")\n                else:\n                    print(monthnum2, \"month has 29 days\")\n            else:\n                print(monthnum2, \"month has 28 days\")\n        elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n            print(monthnum2, \"month has 30 days\")\n        else:\n            print(monthnum2, \"month has 31 days\")\n    else:\n        print(\"Please give the valid month number\")\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum2 = int(monthnum2)\n    return monthnum2 % 12 == 0\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month_31 = [1, 3, 5, 7, 8, 10, 12]\n    month_30 = [4, 6, 9, 11]\n    if monthnum2 in month_31:\n        return 'The month contains 31 days'\n    elif monthnum2 in month_30:\n        return 'The month contains 30 days'\n    else:\n        return 'The month does not contain any days'\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 12:\n        if (monthnum2 > 0) and (monthnum2 < 6):\n            return True\n        else:\n            return False\n    elif monthnum2 == 0 or monthnum2 == 6:\n        return False\n    elif monthnum2 in range(1, 3) and monthnum2 > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist.reverse()\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # using a list of lists to store the result\n    revlist = []\n    for index in range(len(stringlist)):\n        revlist.append(stringlist[index][::-1])\n    return revlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    rev_stringlist = []\n    for item in stringlist:\n        rev_stringlist.append(item[::-1])\n    return rev_stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for index in range(len(stringlist)):\n        stringlist[index] = stringlist[index][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_stringlist = []\n    for i in range(0,len(stringlist)):\n        new_stringlist.append(stringlist[i][::-1])\n    return new_stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if len(stringlist) > 0:\n        return(reverse_string(stringlist[0])) + reverse_string_list(stringlist[1:])\n    return []\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist.reverse()\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    result = []\n    for word in stringlist:\n        result.append(word[::-1])\n    return result\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst.sort()\n    min_len=lst[0]\n    min_lst=[]\n    for i in range(len(lst)):\n        if len(lst[i])==min_len:\n            min_lst.append(lst[i])\n    min_lst.sort()\n    return min_lst[0]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst.sort()\n    print(\"Original List: \",lst)\n    return lst[0:lst.index(lst[-1])+1]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minimum_length = len(lst[0])\n    min_element = lst[0]\n    for i in range(1,len(lst)):\n        if len(lst[i]) < minimum_length:\n            minimum_length = len(lst[i])\n            min_element = lst[i]\n    return min_element\n    \ndef main():\n    '''\n    Write a Python function to convert a list of multiple integers to \n    an integer.\n    '''\n    lst = [1,2,3,4,5]\n    res = sum(lst)\n    print(res)\n    \n    lst = [2,1,5,3,9,5,5]\n    res = Find_Min(lst)\n    print(res)\n    \nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = lst[0]\n    min_len_index = 0\n    for i in range(1,len(lst)):\n        if lst[i]<min_len:\n            min_len=lst[i]\n            min_len_index = i\n    return min_len_index\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    for i in range(len(lst)):\n        min_len = min(len(lst[i]), min_len)\n    for i in range(len(lst)):\n        lst[i] = lst[i][:min_len]\n    return lst\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst = sorted(lst)\n    x = lst[0]\n    for i in range(len(lst)):\n        if(lst[i]!= x):\n            break\n    return i\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if len(lst[i])<len(lst[j]):\n                min=lst[i]\n                lst[i]=lst[j]\n                lst[j]=min\n    return lst\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst=sorted(lst)\n    n=len(lst)\n    i=0\n    j=n-1\n    while i<j:\n        if lst[i]!=lst[j]:\n            break\n        else:\n            i+=1\n            j-=1\n    return lst[i:j+1]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return min(lst[0], Find_Min(lst[1:]))\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_index = 0\n    for i in range(len(lst)):\n        if len(lst[i])<min_length:\n            min_length = len(lst[i])\n            min_index = i\n    return lst[min_index]\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    a = l * b\n    return a\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    a = l*b\n    print(a)\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    #s=\"HELLO\"\n    #print(s.islower())\n    #print(s.isupper())\n    return re.sub('[A-Z]','',str1)\n    \ns=\"HELLO\""
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = re.sub(r'[A-Z]', '', str1)\n    return str2\n    \n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str = str1.lower()\n    return new_str\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    upper = re.findall(r'[A-Z]', str1)\n    lower = re.findall(r'[a-z]', str1)\n    if len(upper) > len(lower):\n        result = ''\n        for i in str1:\n            if i.islower():\n                result = result + i\n        return result\n    else:\n        return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    res = str1.lower()\n    for i in res:\n        if i.isupper():\n            res = res.replace(i, '')\n    return res\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    return re.sub(pattern, '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = str1.lower()\n    str3 = str2.replace(\"[^a-z]\", \"\")\n    return str3\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    new_str = ''\n    for i in str1:\n        if i.isalpha():\n            new_str += i\n    return new_str\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(\"[A-Z]\",\"\",str1)\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if len(lst) == 0:\n        return lst\n    else:\n        return [lst[0]] + Extract(lst[1:])\n    \ndef Extract2(lst):\n    '''\n    Write a python function to get the first element of each sublist,\n    separated by a space, in a single string.\n    '''\n    if len(lst) == 0:\n        return lst\n    else:\n        return str(lst[0]) +'' + Extract2(lst[1:])\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0] \n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)-1):\n        lst[i]=lst[i][0]\n    return lst\n    \n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for sublist in lst:\n        for ele in sublist:\n            res.append(ele)\n    return res\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # Code here\n    res = []\n    for i in lst:\n        res.append(i[0])\n    return res\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for i in range(0,len(lst)):\n        res.append(lst[i][0])\n    return res\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst] \n    \nif __name__ == \"__main__\": \n    lst = [[1, 2], [3], [4, 5, 6], [7, 8, 9]] \n    print(\"The original list is : \" + str(lst)) \n    print(\"The extracted elements from list of lists : \" + str(Extract(lst))) "
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return Extract(lst[0])\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return map(lambda x: x[0],lst)\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst = map(lambda x: x[0],lst)\n    return lst\n    \n    \n    \ndef Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst = map(lambda x: x[0],lst)\n    return lst\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    \n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    print(\"The count of upper case characters in the string is : \",count)\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # Using upper() Function:\n    n = 0\n    for i in str:\n        if i.isupper():\n            n += 1\n    print(n)\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for c in str:\n        if c.isupper():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count = count + 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count += 1\n    return count\n        \ndef reverse(str):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    reverse_string = \"\"\n    for i in range(len(str)-1, -1, -1):\n        reverse_string = reverse_string + str[i]\n    return reverse_string\n        \ndef divisible_by_ten(num):\n    '''\n    Write a python function that returns true if the given number is divisible by 10, otherwise return false.\n    '''\n    if num % 10 == 0:\n        return True\n    else:\n        return False\n    \ndef invert(string):\n    '''\n    Write a python function to invert a given string.\n    '''\n    inverted = \"\"\n    for i in range(len(string)-1, -1, -1):\n        inverted = inverted + string[i]\n    return inverted\n        \ndef is_palindrome(str):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    is_palindrome = True\n    for i in range(len(str)//2):\n        if str[i]!= str[len(str)-1-i]:\n            is_palindrome = False\n    return is_palindrome\n    \ndef is_anagram(str_1, str_2):\n    '''\n    Write a python function to check whether a given string is anagram or not.\n    '''\n    is_anagram = True\n    letter_dict = {}\n    if len(str_1)!= len(str_2):\n        is_anagram = False\n    for i in range(len(str_1)):\n        letter_dict[str_1[i]] = str_1.count(str_1[i])\n        letter_dict[str_2[i]] = str_2.count(str_2[i])\n    for i in range(len(str_1)):\n        if letter_dict[str_1[i]]!= letter_dict[str_2[i]]:\n            is_anagram = False\n    return is_anagram\n    \ndef is_palindrome_without_reversal(str):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    is_palindrome = True\n    str_list = []\n    for i in range(len(str)):\n        str_list.append(str[i])\n    str_list.reverse()\n    if str == \"\".join(str_list):\n        return True\n    else:\n        return False\n    \ndef is_palindrome_without_reversal_v2(str):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    str_list = []\n    for i in range(len(str)):\n        str_list.append(str[i])\n    if str == \"\".join(str_list):\n        return True\n    else:\n        return False\n    \ndef is_palindrome_without_reversal_v3(str):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    str_list = []\n    for i in range(len(str)):\n        str_list.append(str[i])\n    str_list.reverse()\n    if str == \"\".join(str_list):\n        return True\n    else:\n        return False\n    \ndef is_palindrome_without_reversal_v4(str):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    str_list = []\n    for i in range(len(str)):\n        str_list.append(str[i])\n    if str == \"\".join(str_list):\n        return True\n    else:\n        return False\n    \ndef largest_number(l):\n    '''\n    Write a python function to find the largest number in the given list.\n    '''\n    largest_num = l[0]\n    for i in range(1, len(l)):\n        if l[i] > largest_num:\n            largest_num = l[i]\n    return largest_num\n    \ndef largest_number_v2(l):\n    '''\n    Write a python function to find the largest number in the given list.\n    '''\n    largest_num = l[0]\n    largest_index = 0\n    for i in range(1, len(l)):\n        if l[i] > largest_num:\n            largest_num = l[i]\n            largest_index = i\n    return largest_index\n    \ndef largest_number_v3(l):\n    '''\n    Write a python function to find the largest number in the given list.\n    '''\n    largest_num = l[0]\n    largest_index = 0\n    for i in range(1, len(l)):\n        if l[i] > largest_num:\n            largest_num = l[i]\n            largest_index = i\n    return largest_index\n    \ndef largest_number_v4(l):\n    '''\n    Write a python function to find the largest number in the given list.\n    '''\n    largest_num = l[0]\n    largest_index = 0\n    for i in range(1, len(l)):\n        if l[i] > largest_num:\n            largest_num = l[i]\n            largest_index = i\n    return largest_index\n    \ndef remove_vowels_from_string(s):\n    '''\n    Write a python function to remove the vowels from the given string.\n    '''\n    new_string = \"\"\n    vowels = [\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"]\n    for i in range(len(s)):\n        if s[i] not in vowels:\n            new_string = new_string + s[i]\n    return new_string\n    \ndef reverse_string(s):\n    '''\n    Write a python function to reverse the given string.\n    '''\n    reversed_string = \"\"\n    for i in range(len(s)-1, -1, -1):\n        reversed_string = reversed_string + s[i]\n    return reversed_string\n    \ndef swap_case(s):\n    '''\n    Write a python function to swap case of the given string.\n    '''\n    swap_string = \"\"\n    for i in range(len(s)):\n        if s[i].isupper():\n            swap_string = swap_string + s[i].lower()\n        elif s[i].islower():\n            swap_string = swap_string + s[i].upper()\n    return swap_string\n    \ndef find_index(arr, n):\n    '''\n    Write a python function to find the index of a given number in a given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == n:\n            return i\n    return -1\n    \ndef find_index_v2(arr, n):\n    '''\n    Write a python function to find the index of a given number in a given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == n:\n            return i\n    return -1\n    \ndef find_index_v3(arr, n):\n    '''\n    Write a python function to find the index of a given number in a given array.\n    '''\n    return arr.index(n)\n    \ndef find_index_v4(arr, n):\n    '''\n    Write a python function to find the index of a given number in a given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == n:\n            return i\n    return -1\n    \ndef find_index_v5(arr, n):\n    '''\n    Write a python function to find the index of a given number in a given array.\n    '''\n    return arr.index(n) if n in arr else -1\n    \ndef all_the_same(s):"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    x = str.count('U')\n    print(\"the upper case characters are:\",x)\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isupper():\n            count+=1\n    return count\n        \ndef upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return str.upper().count('U')\n    \n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    print('Combinations of given list is: ', end='')\n    for i in list1:\n        if len(list1) == 1:\n            print(i)\n        elif len(list1) >= 2:\n            for j in combinations_list(list1[1:]):\n                print(i, end='')\n                print(',', j, end='')\n    print()\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [[list1[0]]]\n    new_list = []\n    for i in range(len(list1)):\n        for j in combinations_list(list1[:i] + list1[i+1:]):\n            new_list.append([list1[i]] + j)\n    return new_list\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combination = []\n    list1.sort()\n    for i in range(0,len(list1)):\n        for j in range(i+1,len(list1)):\n            combination.append((list1[i],list1[j]))\n    return combination\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [[list1[0]]]\n    if len(list1) == 2:\n        return [[list1[0]],[list1[1]],[list1[0], list1[1]]]\n    lst = []\n    for i in range(len(list1)):\n        lst.append(list1[i])\n        for j in range(len(list1)):\n            if i!= j:\n                lst.append([list1[i],list1[j]])\n    return lst\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    if len(list1) == 1:\n        return [[list1[0]]]\n    else:\n        for i in range(len(list1)):\n            result.extend(combinations_list(list1[:i]) + combinations_list(list1[i+1:]))\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [[list1[0]]]\n    list_combinations = []\n    for i in range(len(list1)):\n        curr_sublist = []\n        for j in range(i+1, len(list1)):\n            curr_sublist.append(list1[j])\n            list_combinations.append([list1[i]]+curr_sublist)\n    return list_combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    l = len(list1)\n    if l == 0:\n        return []\n    elif l == 1:\n        return [[list1[0]]]\n    else:\n        ans = []\n        for i in range(0,l):\n            # ans.append(i)\n            new_ans = []\n            new_ans.append(list1[i])\n            for j in range(i+1, l):\n                new_ans.append(list1[j])\n                ans.append(new_ans)\n        return ans\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    #code here\n    length=len(list1)\n    combs=[]\n    for i in range(length+1):\n        for j in itertools.combinations(list1,i):\n            combs.append(j)\n    return combs\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations\n    return list(combinations(list1, 2))\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [[list1[0]]]\n    else:\n        result = []\n        for i in range(len(list1)):\n            result += [[list1[i]] + j for j in combinations_list(list1[:i] + list1[i+1:])]\n        return result\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Initialize the maximum product with the first element of the array.\n    # If the element in the array is negative, then its product should be negative\n    max_product = arr[0]\n    # Initialize the maximum product with the negative number itself.\n    # This is because if the maximum product for a subarray that doesn't contain\n    # negative elements, then its maximum product should also be negative\n    min_product = -1 * arr[0]\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = -float('inf')\n    max_ending_here = 1\n    max_product = -float('inf')\n    for i in range(len(arr)):\n        max_ending_here = max_ending_here * arr[i]\n        if max_ending_here > max_product:\n            max_product = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 1\n        if max_ending_here < 0:\n            max_ending_here = -float('inf')\n        if max_ending_here < 0:\n            max_ending_here = -float('inf')\n        if max_ending_here > 0:\n            max_ending_here = 1\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = -float('inf')\n    if len(arr)==0:\n        return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    def divide_two(arr,n):\n        return max(arr[:n], key= lambda x: x*arr[n])\n    def divide_three(arr,n):\n        return max(arr[:n],key=lambda x: x*arr[n]*arr[n+1])\n    def divide_four(arr,n):\n        return max(arr[:n],key=lambda x: x*arr[n]*arr[n]*arr[n+1])\n    def divide_five(arr,n):\n        return max(arr[:n],key=lambda x: x*arr[n]*arr[n]*arr[n]*arr[n+1])\n    def divide_six(arr,n):\n        return max(arr[:n],key=lambda x: x*arr[n]*arr[n]*arr[n]*arr[n]*arr[n+1])\n    def divide_seven(arr,n):\n        return max(arr[:n],key=lambda x: x*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n+1])\n    def divide_eight(arr,n):\n        return max(arr[:n],key=lambda x: x*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n+1])\n    def divide_nine(arr,n):\n        return max(arr[:n],key=lambda x: x*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n+1])\n    def divide_ten(arr,n):\n        return max(arr[:n],key=lambda x: x*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n+1])\n    def divide_eleven(arr,n):\n        return max(arr[:n],key=lambda x: x*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n+1])\n    def divide_twelve(arr,n):\n        return max(arr[:n],key=lambda x: x*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n+1])\n    def divide_thirteen(arr,n):\n        return max(arr[:n],key=lambda x: x*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n+1])\n    def divide_fourteen(arr,n):\n        return max(arr[:n],key=lambda x: x*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n+1])\n    def divide_fifteen(arr,n):\n        return max(arr[:n],key=lambda x: x*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n+1])\n    def divide_sixteen(arr,n):\n        return max(arr[:n],key=lambda x: x*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n+1])\n    def divide_seventeen(arr,n):\n        return max(arr[:n],key=lambda x: x*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n+1])\n    def divide_eighteen(arr,n):\n        return max(arr[:n],key=lambda x: x*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n+1])\n    def divide_nineteen(arr,n):\n        return max(arr[:n],key=lambda x: x*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n+1])\n    def divide_twenty(arr,n):\n        return max(arr[:n],key=lambda x: x*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n+1])\n    def divide_twentyone(arr,n):\n        return max(arr[:n],key=lambda x: x*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n+1])\n    def divide_twentytwo(arr,n):\n        return max(arr[:n],key=lambda x: x*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n]*arr[n+1])"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    product = arr[0]\n    max_product = product\n    for i in range(1, len(arr)):\n        product *= arr[i]\n        if product > max_product:\n            max_product = product\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    max_so_far = -99999999\n    max_ending_here = -99999999\n    for i in range(0,n):\n        max_ending_here = max_so_far*arr[i]\n        max_so_far = max(max_so_far,max_ending_here)\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # initialization\n    max_prod, current_prod = arr[0], arr[0]\n    for i in range(1, len(arr)):\n        current_prod = max(arr[i], arr[i]*current_prod)\n        max_prod = max(current_prod, max_prod)\n    return max_prod\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_sum = 0\n    max_start = 0\n    max_end = 0\n    max_product = 0\n    sum_i = arr[0]\n    product_i = arr[0]\n    for i in range(1, len(arr)):\n        sum_i = sum_i * arr[i]\n        product_i = product_i * arr[i]\n        if max_sum < product_i:\n            max_sum = product_i\n            max_start = i\n            max_end = i\n        if sum_i >= 0:\n            if product_i >= 0:\n                if max_product < product_i:\n                    max_product = product_i\n                    max_start = i\n                    max_end = i\n    return max_sum, max_start, max_end\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    max_product = arr[0]\n    curr_max = arr[0]\n    start = 0\n    for i in range(len(arr)):\n        curr_max = max(curr_max * arr[i], arr[i])\n        if curr_max > max_product:\n            max_product = curr_max\n            start = i\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # O(n^2)\n    if len(arr) == 1:\n        return arr[0]\n    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    flag = 0\n    if len(set(dict.values())) == 1:\n        flag = 1\n    return flag\n    \ndict1 = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\ndict2 = {'a': 1, 'b': 1, 'c': 3, 'd': 4, 'e': 5}\ndict3 = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\ndict4 = {'a': 1, 'b': 1, 'c': 3, 'd': 4}\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if dict.values().count(dict.values()[0]) == len(dict.values()):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(set(dict.values())) == 1\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    assert isinstance(dict, dict), 'Pass a dictionary'\n    return n == len(dict) and all(i == n for i in dict.values())\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = set(dict.values())\n    if len(value) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(dict.values())==n\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    \n    value_set = set()\n    \n    for value in dict.values():\n        value_set.add(value)\n        \n    return len(value_set) == 1\n    \n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    else:\n        for i in range(len(dict)):\n            if i == 0:\n                if dict[0]!= dict[1]:\n                    return False\n            elif i > 0:\n                if dict[i]!= dict[i-1]:\n                    return False\n        return True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.values()) == 1:\n        return True\n    else:\n        return False\n    \n    \ndef check_keys(dict):\n    '''\n    Write a function to check if all keys are same in a dictionary.\n    '''\n    if len(dict.keys()) == 1:\n        return True\n    else:\n        return False\n    \n    \ndef check_string(dict):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.values()) == 1:\n        return True\n    else:\n        return False\n    \n    \ndef check_dict(dict):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.values()) == 1:\n        return True\n    else:\n        return False\n    \n    \ndef main():\n    # dictionary for testing\n    dic = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n    \n    print('check_value:', check_value(dic, None))\n    print('check_keys:', check_keys(dic))\n    print('check_string:', check_string(dic))\n    print('check_dict:', check_dict(dic))\n    \n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if dict[key]!= n:\n            return False\n    return True\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key,value in dict1.items():\n        if value is None:\n            del dict1[key]\n    return dict1\nprint(drop_empty({\"name\":\"John\",\"age\":None,\"city\":\"Seattle\"}))\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i, v in dict1.items():\n        if not v:\n            del dict1[i]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {x: y for x, y in dict1.items() if y!= ''}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if not dict1:\n        return dict1\n    else:\n        return {k: v for k, v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    empty_dict = {}\n    for k,v in dict1.items():\n        if v!= None:\n            empty_dict[k] = v\n    return empty_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict(filter(lambda elem: elem[1]!= [], dict1.items()))\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict(filter(None, dict1.items()))\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    \n    lst=[]\n    for key, val in dict1.items():\n        if val:\n            lst.append(key)\n    return lst\n    \n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    #print(dict1)\n    if len(dict1) == 0:\n        print('No Empty Items')\n        return(dict1)\n    else:\n        return({k:v for k,v in dict1.items() if v})\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 0\n    for i in range(len(arr)):\n        # print(arr[i])\n        # print(max_product)\n        # print('----------------')\n        if i == 0:\n            max_product = max(max_product, arr[i])\n        else:\n            max_product = max(max_product, arr[i]*max_product)\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_prod = float('-inf')\n    if n<3:\n        return -1\n    for i in range(n-2):\n        temp = 1\n        for j in range(i+1,n-1):\n            temp *= arr[j]\n            if temp>max_prod:\n                max_prod = temp\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Brute force: O(n^3)\n    # for i in range(len(arr) - 1):\n    #     for j in range(i + 1, len(arr)):\n    #         for k in range(j + 1, len(arr)):\n    #             # print(i, j, k)\n    #             temp = arr[i] * arr[j] * arr[k]\n    #             if temp > max_product:\n    #                 max_product = temp\n    # return max_product\n    \n    # Dynamic programming approach: O(n)\n    '''\n    To get the maximum product, we need to maintain a cumulative maximum product at each index\n    and make sure we don't get a negative number at any index, if so, we start a new one, which is given by the\n    product of current number multiplied with the previous max.\n    '''\n    max_product = float('-inf')\n    cur_product = 1\n    \n    for i in range(len(arr)):\n        cur_product *= arr[i]\n        \n        # If cur_product is greater than max_product, then update max_product\n        max_product = max(max_product, cur_product)\n        \n        # If cur_product is negative, we need to start a new one.\n        if cur_product < 0:\n            cur_product = 1\n            \n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_num = arr[0]\n    max_product = arr[0]\n    for i in range(1,len(arr)):\n        max_num = max(max_num * arr[i], arr[i])\n        max_product = max(max_num, max_product)\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # Time: O(n) | Space: O(1)\n    max_product = -sys.maxsize\n    max_i = -sys.maxsize\n    for i in range(len(arr)):\n        if arr[i] >= max_product:\n            max_product = arr[i]\n            max_i = i\n    \n    result = 1\n    for i in range(max_i):\n        result *= arr[i]\n    \n    return result\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    ans=0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            ans=max(ans,arr[i]*arr[j])\n    return ans\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr: return\n    \n    if len(arr) == 1: return arr[0]\n    \n    # The maximum product is just the max product of the whole array.\n    max_prod = max(arr)\n    \n    # The minimum product is the min product of the whole array.\n    min_prod = min(arr)\n    \n    # The current_max is the maximum product of the current subsequence.\n    current_max = max_prod\n    \n    # The current_min is the minimum product of the current subsequence.\n    current_min = min_prod\n    \n    # The current_max_product is the max product of the current subsequence.\n    current_max_product = current_max\n    \n    for i in range(len(arr)):\n        current_max = max(arr[i] * current_max, arr[i] * current_min)\n        current_min = min(arr[i] * current_max, arr[i] * current_min)\n        current_max_product = max(current_max_product, current_max)\n        \n    return current_max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    for i in range(1,len(arr)):\n        arr[i] = max(arr[i-1]*arr[i],arr[i])\n    return arr[-1]\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    product = 1\n    prev = 1\n    \n    for num in arr:\n        product = max(prev*num, product)\n        prev = max(prev, num)\n        \n    return product\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    size = len(arr)\n    if size == 0:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    for i in range(1, size):\n        # print(i, arr[i])\n        temp = max_product\n        max_product = max(max_product * arr[i], arr[i])\n        min_product = min(min_product * arr[i], arr[i])\n        # print(temp, max_product)\n        # print(min_product)\n    return max_product\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum_tup = []\n    for i in range(1,len(test_tup)-1):\n        sum_tup.append(test_tup[i]+test_tup[i+1])\n    sum_tup.append(test_tup[0]+test_tup[-1])\n    return sum_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    res=[]\n    for i in range(len(test_tup)-1):\n        res.append(test_tup[i] + test_tup[i+1])\n    res.append(test_tup[-1] + test_tup[0])\n    return tuple(res)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    tup_sum = (test_tup[0] + test_tup[1], test_tup[2] + test_tup[3])\n    return tup_sum\n    \n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # print(test_tup)\n    a, b = test_tup\n    # print(a, b)\n    return tuple(map(sum,zip(a,b)))\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    \n    tup = test_tup\n    pairwise_tup = []\n    \n    for i in range(len(tup) - 1):\n        pairwise_tup.append(tup[i] + tup[i+1])\n        \n    return pairwise_tup\n    \n    \ntest_tup = (1,2,3)\nprint(add_pairwise(test_tup)) # => 1, 2, 4, 5, 6\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    test_tup = list(test_tup)\n    def add_pairwise(test_tup):\n        for i in range(len(test_tup)-1):\n            test_tup[i] = test_tup[i] + test_tup[i+1]\n        return test_tup\n    return add_pairwise\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup)<=1:\n        return test_tup\n    else:\n        x=test_tup[0]+test_tup[1]\n        test_tup=(test_tup[0],x)\n        return add_pairwise(test_tup)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    print(test_tup)\n    pairs = []\n    for i in range(0, len(test_tup)-1):\n        pairs.append((test_tup[i], test_tup[i+1]))\n    print(pairs)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    new_tup = (test_tup[0], test_tup[0] + test_tup[1])\n    return new_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    tupl = test_tup\n    tup_sum = 0\n    tup_sum = tuple(map(lambda i, j: i + j, tupl, tupl))\n    print(f\"The addition of the neighboring elements of the given tuple is {tup_sum}\")\n    return tup_sum\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    total = 1\n    for i in range(n):\n        total *= arr[i]\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    p = 1\n    for i in arr:\n        p *= i\n    p %= n\n    return p\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(n):\n        prod = prod * arr[i]\n    return prod % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(n):\n        prod = (prod * arr[i]) % n\n    return prod\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(n):\n        result = (result * arr[i]) % n\n    return result\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(n):\n        product *= arr[i]\n    return product % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return n * sum(arr) % n\n    \ndef find_remainder_using_loop(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    sum_of_nums = sum(arr)\n    prod = 1\n    for num in arr:\n        prod *= num % n\n    return (prod + sum_of_nums) % n\n    \nif __name__ == \"__main__\":\n    #print(find_remainder_using_loop([3, 1, 7], 5))\n    print(find_remainder([1, 3, 5], 7))\n    print(find_remainder_using_loop([1, 3, 5], 7))"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod_arr = 1\n    for i in range(len(arr)):\n        prod_arr *= arr[i]\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    return functools.reduce(lambda x,y:x*y%n,arr)\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    s = 1\n    for i in arr:\n        s *= i\n    s %= n\n    return s\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = 0\n    while n < len(l):\n        if l[n] + 1!= l[n+1]:\n            return False\n        n += 1\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if i == j:\n                continue\n            else:\n                if l[i] == l[j]:\n                    return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l)==0:\n        return True\n    else:\n        for i in range(0,len(l)-1):\n            if l[i]==l[i+1]:\n                return False\n        return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return True\n    return l[0] + 1 == l[1] and check_Consecutive(l[1:])\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    #code here\n    x = []\n    for i in range(len(l)):\n        if l[i] == l[i+1]:\n            x.append(True)\n        else:\n            x.append(False)\n    if True in x:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(0, len(l)-1):\n        if(l[i]!=l[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(1, len(l)): \n        if l[i]-l[i-1]!= 1: \n            return False\n    return True\n        \n        \n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if l == None: \n        return False\n    if len(l) == 0: \n        return False\n    l_set = set(l)\n    for i in l_set: \n        if l.count(i) > 1: \n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l)<=1:\n        return \"NO\"\n    else:\n        for i in range(len(l)-1):\n            if l[i]<=l[i+1]:\n                return \"YES\"\n            else:\n                return \"NO\"\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    lst = []\n    for i in test_list1:\n        if i in test_list2:\n            lst.append(i)\n    print(tuple(lst))\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    list1 = test_list1\n    list2 = test_list2\n    set1 = set(list1)\n    set2 = set(list2)\n    intersection = set1.intersection(set2)\n    result = list(intersection)\n    return result\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return set(test_list1) & set(test_list2)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Your Code here\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    print(list(set(test_list1).intersection(set(test_list2))))\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    final_list = []\n    for i in test_list1:\n        if i in test_list2:\n            final_list.append(i)\n    return final_list\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    ret_list = []\n    for ele in test_list1:\n        if ele in test_list2:\n            ret_list.append(ele)\n    return tuple(ret_list)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersect_list = []\n    for i in test_list1:\n        for j in test_list2:\n            if i == j:\n                intersect_list.append(i)\n    return intersect_list\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    res = []\n    for i in test_list1:\n        if i in test_list2:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # a = set(test_list1)\n    # b = set(test_list2)\n    # return (a & b)\n    return tuple(sorted(set(test_list1) & set(test_list2)))\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i in range(0,len(str1)):\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr=str1.replace(ch,newch)\n    return newstr\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = ''\n    for i in str1:\n        if i == ch:\n            str2 += newch\n        else:\n            str2 += i\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if str1 == str1[::-1]:\n        return str1.replace(ch,newch)\n    else:\n        str1 = str1.replace(ch,'')\n        return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    #str1 = list(str1)\n    #str1 = str1.replace(ch,'new')\n    #print(str1)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = str1.replace(ch,newch)\n    print(new_str)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    list1=list(str1)\n    list1[list1.index(ch)]=newch\n    str1=\"\".join(list1)\n    return str1\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    for key, value in sorted(dict1.items(), key=lambda item: item[1]):\n        print(key,': ', value)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda kv:(kv[1], kv[0]), reverse = True)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x:x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    list_of_tuples = []\n    sorted_dict = {}\n    for k,v in dict1.items():\n        list_of_tuples.append((k,v))\n    list_of_tuples.sort(key=lambda x:x[1], reverse=True)\n    for i in list_of_tuples:\n        sorted_dict[i[0]] = i[1]\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda kv: (kv[1], kv[0]), reverse=True)\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(),key=lambda x:x[1],reverse=True)\ndef get_top5(dict1):\n    '''\n    Write a function to get the top 5 most frequent words and their counts from a dictionary.\n    '''\n    return dict1.most_common(5)\ndef get_top5_sorted(dict1):\n    '''\n    Write a function to get the top 5 most frequent words and their counts from a dictionary, in the sorted order.\n    '''\n    return sorted(get_top5(dict1),key=lambda x:x[1],reverse=True)\ndef get_top5_sorted_key_value(dict1):\n    '''\n    Write a function to get the top 5 most frequent words and their counts from a dictionary, in the sorted order.\n    '''\n    return sorted(get_top5(dict1),key=lambda x:x[0],reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # dictionary of keys sorted by value\n    sorted_by_value = {k: v for k, v in sorted(dict1.items(), key=lambda item: item[1], reverse=True)}\n    return sorted_by_value\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda kv: kv[1], reverse=True)\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest_num = 0\n    smallest_num
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    big = nums[0]\n    small = nums[0]\n    for num in nums:\n        if num > big:\n            big = num\n        if num < small:\n            small = num\n    return big + small\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = 0\n    smallest = 0\n    for i in nums:\n        if i > largest:\n            largest = i\n    for i in nums:\n        if i < smallest:\n            smallest = i\n    return largest + smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum_big = 0\n    sum_small = 0\n    for num in nums:\n        if num > sum_big:\n            sum_big = num\n        if num < sum_small:\n            sum_small = num\n    print(\"The sum of the largest and smallest values in the array is :\",sum_big+sum_small)\n    return sum_big+sum_small\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    big_list=[]\n    small_list=[]\n    if len(nums)==0:\n        return big_list\n    if len(nums)>=1:\n        big_list.append(max(nums))\n        small_list.append(min(nums))\n        for i in range(0,len(nums)-1):\n            if nums[i]>=big_list[0]:\n                big_list.append(nums[i])\n            else:\n                big_list.append(big_list[0])\n                del big_list[0]\n        for i in range(0,len(nums)-1):\n            if nums[i]<=small_list[0]:\n                small_list.append(nums[i])\n            else:\n                small_list.append(small_list[0])\n                del small_list[0]\n        for i in range(0,len(nums)-1):\n            if nums[i]>big_list[0] and nums[i]<small_list[0]:\n                big_list.append(nums[i])\n        return big_list\n    else:\n        return big_list\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = -999999999999999999999\n    smallest = 999999\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest+smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    print(sum(sorted(nums)[0]),sum(sorted(nums)[-1]))\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # alist = [10,30,20,60,40,50]\n    # alist = [-1,10,5,6]\n    # alist = [-1,1,100,1]\n    # alist = [-1,0,1,1]\n    # alist = [-1,1,-10,100]\n    # alist = [-1,100,1,-1]\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    \n    # the list that we'll use to store the largest and smallest values\n    # this list must have at least two items because the smallest and largest values must exist in the list\n    nums_min = []\n    nums_max = []\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Algo:\n    # Use min() and max() to find the min and max numbers\n    # Add the min and max numbers and return\n    if not nums:\n        return 0\n    min_val = nums[0]\n    max_val = nums[0]\n    for num in nums:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n    return min_val + max_val\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower = ''\n    for c in string:\n        if c.isupper():\n            lower += c.lower()\n        else:\n            lower += c\n    return lower\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if len(string) == 0:\n        return string\n    else:\n        return string[0].lower() + string[1:]\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n    \nprint(is_lower('Hello'))\nprint(is_lower('hEllo'))\nprint(is_lower('heLLO'))\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    string=string.lower()\n    return string\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    new_string = string.lower()\n    return new_string\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    \n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_str = \"\"\n    for i in string:\n        if i.isupper():\n            i = i.lower()\n        lower_str += i\n    print(lower_str)\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_case = []\n    for char in string:\n        if char.islower():\n            lower_case.append(char)\n    return ''.join(lower_case)\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if len(str1) == 0:\n        return\n    \n    #Remove all lowercase characters\n    new_str = re.sub(r'[a-z]+', '', str1)\n    \n    #Remove all non-alphanumeric characters\n    new_str = re.sub(r'[\\W_]+', '', new_str)\n    \n    #Remove all punctuations\n    new_str = re.sub(r'[,;:!?()\\'\"<>@#$%^&*_\\-+=\\/\\|{}~`]', '', new_str)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # str1 = 'Hello, World!'\n    l = []\n    for i in str1:\n        if i.isupper():\n            l.append(i)\n    return ''.join(l)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.replace(\"i\", \"\")\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    #return str1.replace('a','').replace('b','').replace('c','').replace('d','').replace('e','').replace('f','').replace('g','').replace('h','').replace('i','').replace('j','').replace('k','').replace('l','').replace('m','').replace('n','').replace('o','').replace('p','').replace('q','').replace('r','').replace('s','').replace('t','').replace('u','').replace('v','').replace('w','').replace('x','').replace('y','').replace('z','')\n    return re.sub('[a-z]+', \"\", str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.replace(\"a\",\"\")\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.replace(\"a\",\"\").replace(\"b\",\"\").replace(\"c\",\"\").replace(\"d\",\"\").replace(\"e\",\"\").replace(\"f\",\"\").replace(\"g\",\"\").replace(\"h\",\"\").replace(\"i\",\"\").replace(\"j\",\"\").replace(\"k\",\"\").replace(\"l\",\"\").replace(\"m\",\"\").replace(\"n\",\"\").replace(\"o\",\"\").replace(\"p\",\"\").replace(\"q\",\"\").replace(\"r\",\"\").replace(\"s\",\"\").replace(\"t\",\"\").replace(\"u\",\"\").replace(\"v\",\"\").replace(\"w\",\"\").replace(\"x\",\"\").replace(\"y\",\"\").replace(\"z\",\"\")\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # the trick here is that we can just go through the string and keep track of \n    # the indices of all characters we have seen. Then we can delete all instances\n    # of those indices. \n    indices = []\n    for i in range(len(str1)):\n        if str1[i].islower():\n            indices.append(i)\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    x = str(n)\n    if(int(x[0]) == 1) :\n        return(10)\n    else :\n        return(int(x[0]))\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    if(n < 0):\n        return -1\n    \n    str_n = str(n)\n    return(int(str_n[0]))\n        \n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n==0:\n        return 0\n    elif n>0:\n        n=abs(n)\n        return (n%10)\n    else:\n        n=-n\n        return (n%10)\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while(n>9) :\n        n = n//10\n    return n\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    count=0\n    if n < 10 :\n        count=n\n        print(count)\n    else :\n        if (n % 10) == 0 :\n            count=0\n        else :\n            count=n%10\n        return count\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if(n == 0):\n        return 0\n    if(n < 0):\n        n = -n\n    \n    return n%10\n    "
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    n = int(input(\"enter a number\"))\n    return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if type(n)!= int:\n        print(\"Invalid input\")\n    else:\n        return(n%10)\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while(n>=10):\n        x = n%10\n        n = n//10\n    return x\n    \n    \n    \ndef count_even_Digits(n) :  \n    '''\n    Write a python function to count number of even digits in a given number.\n    '''\n    if (n == 0):\n        return 0\n    even = 0\n    while(n>0):\n        x = n%10\n        if(x%2 == 0):\n            even = even + 1\n        n = n//10\n    return even\n    \n    \n    \ndef Count_no_of_Digits(n) :  \n    '''\n    Write a python function to count number of digits in a given number.\n    '''\n    count = 0\n    while(n>0):\n        x = n%10\n        count = count + 1\n        n = n//10\n    return count\n    \n    \n    \ndef Count_no_of_Digits_with_Set(n) :  \n    '''\n    Write a python function to count number of digits in a given number with set.\n    '''\n    count = 0\n    while(n>0):\n        x = n%10\n        if(x%2 == 0):\n            count = count + 1\n        n = n//10\n    return count\n    \n    \n    \ndef count_odd_Digits(n) :  \n    '''\n    Write a python function to count number of odd digits in a given number.\n    '''\n    if (n == 0):\n        return 0\n    odd = 0\n    while(n>0):\n        x = n%10\n        if(x%2!= 0):\n            odd = odd + 1\n        n = n//10\n    return odd\n    \n    \n    \ndef count_odd_Digits_with_Set(n) :  \n    '''\n    Write a python function to count number of odd digits in a given number with set.\n    '''\n    count = 0\n    while(n>0):\n        x = n%10\n        if(x%2!= 0):\n            count = count + 1\n        n = n//10\n    return count\n    \n    \n    \ndef count_odd_Digits_with_Set_2(n) :  \n    '''\n    Write a python function to count number of odd digits in a given number with set.\n    '''\n    count = 0\n    if (n == 0):\n        return 0\n    odd = 0\n    while(n>0):\n        x = n%10\n        if(x%2!= 0):\n            odd = odd + 1\n        n = n//10\n    return odd\n    \n    \n    \ndef sum_digits(n) :  \n    '''\n    Write a python function to sum digits in a given number.\n    '''\n    s = 0\n    while(n>0):\n        s = s + n%10\n        n = n//10\n    return s\n    \n    \n    \ndef sum_digits_with_Set(n) :  \n    '''\n    Write a python function to sum digits in a given number with set.\n    '''\n    s = 0\n    while(n>0):\n        s = s + n%10\n        n = n//10\n    return s\n    \n    \n    \ndef sum_digits_with_Set_2(n) :  \n    '''\n    Write a python function to sum digits in a given number with set.\n    '''\n    s = 0\n    if (n == 0):\n        return 0\n    while(n>0):\n        s = s + n%10\n        n = n//10\n    return s\n    \n    \n    \ndef sum_digits_with_Set_3(n) :  \n    '''\n    Write a python function to sum digits in a given number with set.\n    '''\n    s = 0\n    if (n == 0):\n        return 0\n    while(n>0):\n        s = s + n%10\n        n = n//10\n    return s\n    \n    \n    \ndef is_Palindrome(n) :  \n    '''\n    Write a python function to check if the given number is palindrome or not.\n    '''\n    if (n == 0) :\n        return True\n    while (n>0):\n        x = n%10\n        n = n//10\n        if (x!= n) :\n            return False\n    return True\n    \n    \n    \ndef is_Palindrome_with_Set(n) :  \n    '''\n    Write a python function to check if the given number is palindrome or not with set.\n    '''\n    if (n == 0) :\n        return True\n    while (n>0):\n        x = n%10\n        if (x!= n) :\n            return False\n        n = n//10\n    return True\n    \n    \n    \ndef is_Palindrome_with_Set_2(n) :  \n    '''\n    Write a python function to check if the given number is palindrome or not with set.\n    '''\n    if (n == 0) :\n        return True\n    while (n>0):\n        x = n%10\n        if (x!= n) :\n            return False\n        n = n//10\n    return True\n    \n    \n    \ndef is_Palindrome_with_Set_3(n) :  \n    '''\n    Write a python function to check if the given number is palindrome or not with set.\n    '''\n    if (n == 0) :\n        return True\n    while (n>0):\n        x = n%10\n        if (x!= n) :\n            return False\n        n = n//10\n    return True\n    \n    \n    \ndef largest_odd_digit(n) :  \n    '''\n    Write a python function to find the largest odd digit in a given number.\n    '''\n    while(n>0):\n        x = n%10\n        n = n//10\n    return x\n    \n    \n    \ndef largest_odd_digit_with_Set(n) :  \n    '''\n    Write a python function to find the largest odd digit in a given number with set.\n    '''\n    while(n>0):\n        x = n%10\n        if(x%2!= 0):\n            return x\n        n = n//10\n    return x\n    \n    \n    \ndef largest_odd_digit_with_Set_2(n) :  \n    '''\n    Write a python function to find the largest odd digit in a given number with set.\n    '''\n    while(n>0):\n        x = n%10\n        if(x%2!= 0):\n            return x\n        n = n//10\n    return x\n    \n    \n    \ndef largest_odd_digit_with_Set_3(n) :  \n    '''\n    Write a python function to find the largest odd digit in a given number with set.\n    '''\n    while(n>0):\n        x = n%10\n        if(x%2!= 0):\n            return x\n        n = n//10\n    return x\n    \n    \n    \ndef largest_odd_digit_with_Set_4(n) :  \n    '''\n    Write a python function to find the largest odd digit in a given number with set.\n    '''\n    while(n>0):\n        x = n%10\n        if(x%2!= 0):\n            return x\n        n = n//10\n    return x\n    \n    \n    \ndef get_fibonacci_huge_naive(n, m) :  \n    '''\n    Write a python function to find the first fibonacci number with huge number.\n    '''\n    \n    #First Fibonacci Number\n    f1 = 1\n    f2 = 2\n    if(n <= 1):\n        return n\n    \n    #Second Fibonacci Number\n    f3 = f2 + f1\n    \n    #Put the first two values in the list\n    res = []\n    res.append(f1)\n    res.append(f2)\n    \n    #Find the rest fibonacci number\n    for i in range(2, n):\n        f3 = f1 + f2\n        res.append(f3)\n        f1 = f2\n        f2 = f3\n    \n    #Take the first valu"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    #Splitting the list \n    odd_list = []\n    even_list = []\n    for i in list:\n        if i%2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    print(odd_list)\n    print(even_list)\n    return odd_list, even_list\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for num in list:\n        if num % 2 == 1:\n            odd.append(num)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return(list[0:len(list):2])\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if(i % 2!= 0):\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even_list=[]\n    odd_list=[]\n    for i in list:\n        if i%2==0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    return even_list, odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list = list.sort()\n    print(list)\n    list = list.reverse()\n    print(list)\n    if (len(list) == 1):\n        return list\n    else:\n        return list[1:]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    for i in list:\n        if i%2 == 1:\n            odds.append(i)\n    return odds\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i%2==1]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in range(len(list)):\n        if list[i]%2 == 0:\n            odd_list.append(list[i])\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # list = list(map(int, list))\n    new_list = []\n    for i in list:\n        if i % 2!= 0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n=int(input('Enter a value of n'))\n    def sumOfCubes(n):\n        '''\n        Return the sum of the cubes of the first n natural numbers\n        '''\n        sum=0\n        for i in range(1,n+1):\n            sum+=i**3\n        return sum\n    def sumOfNumbers(n):\n        '''\n        Return the sum of the first n natural numbers\n        '''\n        sum=0\n        for i in range(1,n+1):\n            sum+=i\n        return sum\n    print('The difference of the sum of the cubes of the first',n,'natural numbers and the sum of the first',n,'natural numbers is',sumOfCubes(n)-sumOfNumbers(n))\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sumofcubes(n) : \n        return (n*(n+1)*(2*n+1))/6\n    \n    def sumofthenumbers(n) :\n        sum = 0\n        for i in range(1,n+1) :\n            sum += i\n        return sum*sum*sum\n    \n    return abs(sumofcubes(n) - sumofthenumbers(n))\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    sum_of_cubes = n * (n + 1) * (2 * n + 1) / 6\n    \n    diff = (sum_of_cubes - (n * (n + 1) * (2 * n + 1) / 6))\n    \n    return diff\n    \n    \n    \ndef sum_of_squares(n):\n    '''\n    Write a python function to find the sum of the squares of the first n natural numbers.\n    '''\n    \n    sum_of_squares = n * (n + 1) * (2 * n + 1)\n    \n    return sum_of_squares\n    \n    \n    \n    \ndef pow(a,b):\n    '''\n    Write a python function to compute x^y.\n    '''\n    \n    if b == 0 :\n        return 1\n    else:\n        return a * pow(a,b-1)\n    \n    \n    \ndef f(x):\n    '''\n    Write a python function to compute f(x) = x^3 + 2*x + 1.\n    '''\n    \n    return x**3 + 2*x + 1\n    \n    \n    \ndef g(x,y):\n    '''\n    Write a python function to compute g(x,y) = x^3 + 2*x + y^3 + 2*y + 1.\n    '''\n    \n    return x**3 + 2*x + y**3 + 2*y + 1\n    \n    \n    \ndef div(a,b):\n    '''\n    Write a python function to compute a/b = 5/2\n    '''\n    \n    return a/b\n    \n    \n    \ndef div_n_div(a,b):\n    '''\n    Write a python function to compute a/b = 5/2\n    '''\n    \n    return a//b, a % b\n    \n    \n    \ndef div_n(a,b):\n    '''\n    Write a python function to compute a/b = 5/2\n    '''\n    \n    return a/b\n    \n    \n    \ndef div_n_n(a,b):\n    '''\n    Write a python function to compute a/b = 5/2\n    '''\n    \n    return a//b, a % b\n    \n    \n    \ndef div_n_n(a,b):\n    '''\n    Write a python function to compute a/b = 5/2\n    '''\n    \n    return a//b, a % b\n    \n    \n    \ndef div_n(a,b):\n    '''\n    Write a python function to compute a/b = 5/2\n    '''\n    \n    return a/b\n    \n    \n    \n    \ndef div_n_div(a,b):\n    '''\n    Write a python function to compute a/b = 5/2\n    '''\n    \n    return a//b, a % b\n    \n    \n    \ndef div_n_n(a,b):\n    '''\n    Write a python function to compute a/b = 5/2\n    '''\n    \n    return a//b, a % b\n    \n    \n    \ndef div_n_n(a,b):\n    '''\n    Write a python function to compute a/b = 5/2\n    '''\n    \n    return a//b, a % b\n    \n    \n    \ndef add_even(n):\n    '''\n    Write a python function to add even numbers in the list\n    '''\n    \n    even_num = []\n    \n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_num.append(i)\n    \n    return even_num\n    \n    \n    \n    \ndef add_even(n):\n    '''\n    Write a python function to add even numbers in the list\n    '''\n    \n    even_num = []\n    \n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_num.append(i)\n    \n    return even_num\n    \n    \n    \n    \ndef print_even_and_odd(n):\n    '''\n    Write a python function to print even and odd numbers in the list\n    '''\n    \n    even_num = []\n    odd_num = []\n    \n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_num.append(i)\n        else:\n            odd_num.append(i)\n    \n    return even_num, odd_num\n    \n    \n    \n    \ndef print_even_and_odd(n):\n    '''\n    Write a python function to print even and odd numbers in the list\n    '''\n    \n    even_num = []\n    odd_num = []\n    \n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_num.append(i)\n        else:\n            odd_num.append(i)\n    \n    return even_num, odd_num\n    \n    \n    \n    \ndef add_odd_even(n):\n    '''\n    Write a python function to add even and odd numbers in the list\n    '''\n    \n    even_num = []\n    odd_num = []\n    \n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_num.append(i)\n        else:\n            odd_num.append(i)\n    \n    return even_num + odd_num\n    \n    \n    \n    \ndef add_odd_even(n):\n    '''\n    Write a python function to add even and odd numbers in the list\n    '''\n    \n    even_num = []\n    odd_num = []\n    \n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_num.append(i)\n        else:\n            odd_num.append(i)\n    \n    return even_num + odd_num\n    \n    \n    \n    \ndef add_odd_even(n):\n    '''\n    Write a python function to add even and odd numbers in the list\n    '''\n    \n    even_num = []\n    odd_num = []\n    \n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_num.append(i)\n        else:\n            odd_num.append(i)\n    \n    return even_num + odd_num\n    \n    \n    \n    \ndef multiplication(n):\n    '''\n    Write a python function to multiply the first n natural numbers.\n    '''\n    \n    \n    return n * (n - 1)\n    \n    \n    \ndef multiplication(n):\n    '''\n    Write a python function to multiply the first n natural numbers.\n    '''\n    \n    \n    return n * (n - 1)\n    \n    \n    \n    \ndef multiplication(n):\n    '''\n    Write a python function to multiply the first n natural numbers.\n    '''\n    \n    \n    return n * (n - 1)\n    \n    \n    \n    \ndef multiplication(n):\n    '''\n    Write a python function to multiply the first n natural numbers.\n    '''\n    \n    \n    return n * (n - 1)\n    \n    \n    \n    \ndef multiplication(n):\n    '''\n    Write a python function to multiply the first n natural numbers.\n    '''\n    \n    \n    return n * (n - 1)\n    \n    \n    \n    \ndef multiplication(n):\n    '''\n    Write a python function to multiply the first n natural numbers.\n    '''\n    \n    \n    return n * (n - 1)\n    \n    \n    \n    \ndef multiplication(n):\n    '''\n    Write a python function to multiply the first n natural numbers.\n    '''\n    \n    \n    return n * (n - 1)\n    \n    \n    \n    \ndef multiplication(n):\n    '''\n    Write a python function to multiply the first n natural numbers.\n    '''\n    \n    \n    return n * (n - 1)\n    \n    \n    \n    \ndef multiplication(n):\n    '''\n    Write a python function to multiply the first n natural numbers."
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    print(\"sum of cubes:\",sum([i**3 for i in range(1,n+1)]))\n    print(\"sum of first n natural numbers:\",sum(range(1,n+1)))\n    print(\"Difference:\",abs(sum([i**3 for i in range(1,n+1)])-sum(range(1,n+1))))\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    #A\n    def is_prime(n):\n      if n <= 1:\n         return False\n      for i in range(2, n):\n         if n % i == 0:\n           return False\n      return True\n    \n    \n    #B\n    def difference_binary(n):\n        if n <= 1: return 0\n        total = 0\n        while n > 0:\n            total += n\n            n = n // 2\n        return total\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    n = int(input(\"Enter number of natural numbers:\"))\n    \n    def sum_of_cubes(n):\n        return sum(x**3 for x in range(1, n+1))\n    \n    diff = abs(n * (n+1) * (2*n+1) / 6 - sum_of_cubes(n))\n    \n    print(diff)\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    #Solution 1\n    '''\n    Sum_of_cubes = 0\n    for num in range(1,n+1) :\n        sum_of_cubes = sum_of_cubes + (num**3)\n    print(sum_of_cubes - (n**3))\n    '''\n    #Solution 2\n    sum_of_cubes = 0\n    for i in range(1,n+1):\n        sum_of_cubes = sum_of_cubes + (i**3)\n    return sum_of_cubes - (n**3)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum1 = 0\n    sum2 = 0\n    for i in range(n):\n        sum1 += i\n        sum2 += (i**3)\n    return abs(sum1 - sum2)\n    "
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if(n == 0) : \n        return n\n    else: \n        return ((n**3) - sumOfCubes(n))\n        \ndef factorial(n): \n    '''\n    Write a python function to compute the factorial of a number. The factorial of a number is the product of all the integers from 1 to that number.\n    '''\n    if n == 0 or n == 1: \n        return 1\n    else: \n        return n * factorial(n - 1) \n    \ndef first_non_square(a): \n    '''\n    Write a python function to find the first non-square number from a list of numbers.\n    '''\n    for i in range(1, len(a)): \n        if(isSquare(a[i])): \n            continue\n        else: \n            return a[i]\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    def sum_of_cube(n) : \n        sum_of_cube = 0\n        for i in range(1, n+1) :\n            sum_of_cube += i**3\n        return sum_of_cube\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if (A[i] ^ A[j]) % 2!= 0 :\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    result = 0\n    for i in range(0,N):\n        for j in range(i+1,N):\n            if(A[i]^A[j] == 1):\n                result = result+1\n    return result\nA = [1,2,3,4,5,6,7,8]\nprint(find_Odd_Pair(A,8))"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # code here\n    return 0\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if N % 2!= 0 :\n        return None\n    if N == 1:\n        return 1\n    else:\n        l = 1\n        r = N\n        while l <= r:\n            m = l + (r-l) // 2\n            if (m * (m + 1)) / 2 == N:\n                return m\n            elif (m * (m + 1)) / 2 > N:\n                r = m - 1\n            else:\n                l = m + 1\n        return None\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # input:  A, array of numbers\n    # output: number of odd pairs\n    # idea: if sum(A) = 0, count = 0\n    # if sum(A) is not zero, check the sum = sum(A) - 0\n    # if sum(A) is not zero, check sum = sum(A) - A[i]\n    # if sum(A) is not zero, check sum = sum(A) - A[j]\n    # if sum(A) is not zero, check sum = sum(A) - A[i] - A[j]\n    # if sum(A) is not zero, check sum = sum(A) - A[i] - A[j] - A[k]\n    # if sum(A) is not zero, check sum = sum(A) - A[i] - A[j] - A[k] - A[l]\n    # if sum(A) is not zero, check sum = sum(A) - A[i] - A[j] - A[k] - A[l] - A[m]\n    #...\n    # if sum(A) is not zero, check sum = sum(A) - A[i] - A[j] - A[k] - A[l] - A[m] - A[n]\n    # if sum(A) is not zero, check sum = sum(A) - A[i] - A[j] - A[k] - A[l] - A[m] - A[n] - A[o]\n    #...\n    # if sum(A) is not zero, check sum = sum(A) - A[i] - A[j] - A[k] - A[l] - A[m] - A[n] - A[o] - A[p]\n    # if sum(A) is not zero, check sum = sum(A) - A[i] - A[j] - A[k] - A[l] - A[m] - A[n] - A[o] - A[p] - A[q]\n    # if sum(A) is not zero, check sum = sum(A) - A[i] - A[j] - A[k] - A[l] - A[m] - A[n] - A[o] - A[p] - A[q] - A[r]\n    # if sum(A) is not zero, check sum = sum(A) - A[i] - A[j] - A[k] - A[l] - A[m] - A[n] - A[o] - A[p] - A[q] - A[r] - A[s]\n    # if sum(A) is not zero, check sum = sum(A) - A[i] - A[j] - A[k] - A[l] - A[m] - A[n] - A[o] - A[p] - A[q] - A[r] - A[s] - A[t]\n    # if sum(A) is not zero, check sum = sum(A) - A[i] - A[j] - A[k] - A[l] - A[m] - A[n] - A[o] - A[p] - A[q] - A[r] - A[s] - A[t] - A[u]\n    #...\n    # if sum(A) is not zero, check sum = sum(A) - A[i] - A[j] - A[k] - A[l] - A[m] - A[n] - A[o] - A[p] - A[q] - A[r] - A[s] - A[t] - A[u] - A[v]\n    # if sum(A) is not zero, check sum = sum(A) - A[i] - A[j] - A[k] - A[l] - A[m] - A[n] - A[o] - A[p] - A[q] - A[r] - A[s] - A[t] - A[u] - A[v] - A[w]\n    # if sum(A) is not zero, check sum = sum(A) - A[i] - A[j] - A[k] - A[l] - A[m] - A[n] - A[o] - A[p] - A[q] - A[r] - A[s] - A[t] - A[u] - A[v] - A[w] - A[x]\n    # if sum(A) is not zero, check sum = sum(A) - A[i] - A[j] - A[k] - A[l] - A[m] - A[n] - A[o] - A[p] - A[q] - A[r] - A[s] - A[t] - A[u] - A[v] - A[w] - A[x] - A[y]\n    # if sum(A) is not zero, check sum = sum(A) - A[i] - A[j] - A[k] - A[l] - A[m] - A[n] - A[o] - A[p] - A[q] - A[r] - A[s] - A[t] - A[u] - A[v] - A[w] - A[x] - A[y] - A[z]\n    #...\n    # if sum(A) is not zero, check sum = sum(A) - A[i] - A[j] - A[k] - A[l] - A[m] - A[n] - A[o] - A[p] - A[q] - A[r] - A[s] - A[t] - A[u] - A[v] - A[w] - A[x] - A[y] - A[z] - A[a]\n    # if sum(A) is not zero, check sum = sum(A) - A[i] - A[j] - A[k] - A[l] - A[m] - A[n] - A[o] - A[p] - A[q] - A[r] - A[s] - A[t] - A[u] - A[v] - A[w] - A[x] - A[y] - A[z] - A[a] - A[b]\n    # if sum(A) is not zero, check sum = sum(A) - A[i] - A[j] - A[k] - A[l] - A[m] - A[n] - A[o] - A[p] - A[q] - A[r] - A[s] - A[t] - A[u] - A[v] - A[w] - A[x] - A[y] - A[z] - A[a] - A[b] - A[c]\n    #...\n    # if sum(A) is not zero, check sum = sum(A) - A[i] - A[j] - A[k] - A[l] - A[m] - A[n] - A[o] - A[p] - A[q] - A[r] - A[s] - A[t] - A[u] - A[v] - A[w] - A[x] - A[y] - A[z] - A[a] - A[b] - A[c] - A[d]\n    # if sum(A) is not zero, check sum = sum(A) - A[i] - A[j] - A[k] - A[l] - A[m] - A[n] - A[o] - A[p] - A[q] - A[r] - A[s] - A[t] - A[u] - A[v] - A[w] - A[x] - A[y] - A[z] - A[a] - A[b] - A[c] - A[d] - A[e]\n    # if sum(A) is not zero, check sum = sum(A) - A[i] - A[j] - A[k] - A[l] - A[m] - A[n] - A[o] - A[p] - A[q] - A[r] - A[s] - A[t] - A[u] - A"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N-1):\n        if A[i] ^ A[i+1] == 1 :\n            count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    sum = 0\n    for i in range(0,N-1,2):\n        sum += A[i] ^ A[i+1]\n    return sum\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if not N: \n        return 0\n    if N == 1: \n        return 1\n    \n    total = 0\n    for i in range(2, N + 1, 2): \n        if (A & i) > 0: \n            total += 1\n    return total\n    \n    \nprint(find_Odd_Pair(9,12))\nprint(find_Odd_Pair(15,7))\nprint(find_Odd_Pair(2147483647,12))\nprint(find_Odd_Pair(2147483647,8)"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if N==0 :\n        return 0\n    if N==1 :\n        if A[0]%2 == 1:\n            return 1\n        else:\n            return 0\n    if N==2 :\n        if A[0]%2 == 0 and A[1]%2 == 1:\n            return 2\n        elif A[0]%2 == 1 and A[1]%2 == 0:\n            return 2\n        else:\n            return 0\n    count = 0\n    for i in range(N) :\n        if A[i]%2 == 1 :\n            count +=1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    res=0\n    for i in range(N):\n        for j in range(i+1,N):\n            res+=int(A[i]!=A[j])\n    return res\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggle_string_new = ''\n    for i in range(len(string)):\n        if string[i].isupper():\n            toggle_string_new += string[i].lower()\n        else:\n            toggle_string_new += string[i].upper()\n    return toggle_string_new\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([chr(ord(x) + 32) if x.islower() else chr(ord(x) - 32) if x.isupper() else x for x in string])\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if not type(string) == str:\n        raise TypeError('The input must be a string.')\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # print(\"\\nDigit Distance Function\")\n    # print(\"\\n\\nInputs\")\n    # print(\"\\nn1\", n1)\n    # print(\"\\nn2\", n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == n2:\n        return 0\n    \n    n1_l = []\n    n2_l = []\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    distance = 0\n    # print(n1,n2)\n    while(n1!=n2):\n        # print(n1, n2)\n        n1 = int(str(n1)[-1]+str(n1)[:-1])\n        # print(n1)\n        n2 = int(str(n2)[-1]+str(n2)[:-1])\n        distance += 1\n        # print(n1, n2)\n    print(distance)\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    def get_digit(n):\n        return (n // 10) % 10\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    s1 = str(n1)\n    s2 = str(n2)\n    return sum(map(lambda x: abs(int(x[0])-int(x[1])), zip(s1, s2)))\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    s = 0\n    for i in range(10):\n        if n1%10 == n2%10:\n            s += 0\n        else:\n            s += abs(n1%10-n2%10)\n        n1 = n1//10\n        n2 = n2//10\n    return s\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    n1 = abs(n1)\n    n2 = abs(n2)\n    for i in range(10):\n        sum = sum + abs(n1 - n2)\n        n1 = n1 / 10\n        n2 = n2 / 10\n    return sum\n    \nprint(digit_distance_nums(-1,2)) # Should be 3\nprint(digit_distance_nums(123,456)) # Should be 17\nprint(digit_distance_nums(1234,5678)) # Should be 8\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    assert(n1!= n2)\n    s = 0\n    for i in range(len(str(n1))):\n        if n1 % 10!= n2 % 10:\n            s += abs(n1 % 10 - n2 % 10)\n        n1 = n1 // 10\n        n2 = n2 // 10\n    return s\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    assert isinstance(n1, int) and isinstance(n2, int)\n    assert n1 > -1 and n2 > -1\n    assert n1!= n2\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    from itertools import zip_longest\n    return sum(abs(n1 - n2) // 10 ** i for i in range(max(len(str(n1)), len(str(n2)))))\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    res = a[0]\n    count = 1\n    sum_so_far = a[0]\n    for i in range(1, size):\n        sum_so_far += a[i]\n        if sum_so_far > res:\n            res = sum_so_far\n            count = 1\n        elif sum_so_far == res:\n            count += 1\n    return (res, count)\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    curr_sum = 0\n    max_sum = float('-inf')\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    curr_sum = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    sum = 0\n    for i in range(size):\n        sum += a[i]\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = -99999999\n    current_sum = 0\n    for i in range(size):\n        current_sum = current_sum + a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = -sys.maxsize-1\n    temp = 0\n    start = 0\n    end = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    max_sum = -999999999999\n    for i in range(size):\n        cur_sum = 0\n        for j in range(i, size):\n            cur_sum = cur_sum + a[j]\n            if cur_sum > max_sum:\n                max_sum = cur_sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    # This is an example of a tail recursion\n    def max_sum_tail_recursion(a, size):\n        global max_sum\n        # Base case\n        if size == 1:\n            max_sum = max(max_sum, a[0])\n            return max_sum\n        else:\n            # If a sub-array is found, check for the sum and return the maximum of these sums\n            max_sum = max(max_sum, a[0] + max_sum_tail_recursion(a[1:], size - 1))\n            return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    sub_array_sum = a[0]\n    max_sub_array_sum = a[0]\n    \n    for i in range(1, size):\n        if a[i] > sub_array_sum:\n            sub_array_sum = a[i]\n        else:\n            sub_array_sum += a[i]\n        \n        if max_sub_array_sum < sub_array_sum:\n            max_sub_array_sum = sub_array_sum\n            \n    print(max_sub_array_sum)\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    i = 0\n    while i < size:\n        current_sum = a[i]\n        j = i\n        while j < size and a[j] < 0:\n            current_sum += a[j]\n            j += 1\n        if current_sum > max_sum:\n            max_sum = current_sum\n        i += 1\n    return max_sum\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    final = []\n    for i in test_tup1:\n        if i in test_tup2:\n            final.append(i)\n    for i in test_tup2:\n        if i not in final:\n            final.append(i)\n    final = tuple(sorted(final))\n    return final\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    a = set(test_tup1)\n    b = set(test_tup2)\n    return sorted(list(a|b))\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_elem = []\n    for elem1 in test_tup1:\n        for elem2 in test_tup2:\n            if elem1 == elem2:\n                union_elem.append(elem1)\n    union_elem.sort()\n    return union_elem\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = []\n    union = test_tup1 + test_tup2\n    union.sort()\n    return union\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_set = set(test_tup1) | set(test_tup2)\n    return tuple(sorted(test_set))\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) == 0 and len(test_tup2) == 0:\n        return ()\n    elif len(test_tup1) == 0:\n        return test_tup2\n    elif len(test_tup2) == 0:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        return (test_tup1[0], ) + union_elements(test_tup1[1:], test_tup2)\n    else:\n        return (test_tup2[0], ) + union_elements(test_tup1, test_tup2[1:])\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = list(set(test_tup1).union(set(test_tup2)))\n    union_list.sort()\n    return union_list\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    res = []\n    for i in test_tup1:\n        if i not in res:\n            res.append(i)\n    for j in test_tup2:\n        if j not in res:\n            res.append(j)\n    return sorted(res)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    return sorted(test_set1 | test_set2)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tuple = []\n    for i in test_tup1:\n        if i not in union_tuple:\n            union_tuple.append(i)\n    for i in test_tup2:\n        if i not in union_tuple:\n            union_tuple.append(i)\n    \n    return union_tuple\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 1\n    for i in range(1, len(lst)):\n        for j in range(i, len(lst)):\n            if(len(lst[i:j+1]) > max_length):\n                max_length = len(lst[i:j+1])\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(len(lst)-1):\n            if len(lst[i])+len(lst[j]) > max_len:\n                max_len = len(lst[i])+len(lst[j])\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    i = 0\n    while i < len(lst):\n        j = i + 1\n        while j < len(lst):\n            if lst[i] == lst[j]:\n                lst.pop(j)\n            else:\n                j += 1\n        i += 1\n    lst_len = len(lst)\n    return lst_len\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        cur_len = 0\n        max_len = 0\n        for i in range(len(lst)):\n            temp = lst[i]\n            for j in range(len(temp)):\n                cur_len += 1\n                if max_len < cur_len:\n                    max_len = cur_len\n        return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst)==0:\n        return 0\n    if len(lst)==1:\n        return 1\n    return max(Find_Max_Length(lst[1:]),Find_Max_Length(lst[:-1]))+1\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length=0\n    i=0\n    while i < len(lst):\n        lst_length = len(lst[i])\n        while i + 1 < len(lst) and lst_length < len(lst[i + 1]):\n            lst_length = len(lst[i + 1])\n            i += 1\n        if lst_length > max_length:\n            max_length = lst_length\n        i += 1\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 1\n    for i in range(len(lst)-1):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    def Find_Longest_Length(lst):\n        max_len = 0\n        for i in lst:\n            if max_len < len(i):\n                max_len = len(i)\n        return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest=0\n    for i in range(0,len(lst)):\n        curr_lst=lst[i]\n        count=0\n        for j in range(0,len(curr_lst)):\n            if(curr_lst[j]==1):\n                count+=1\n        if(count>longest):\n            longest=count\n    return longest\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lst = lst.split()\n    lengths = []\n    for i in lst:\n        lengths.append(len(i))\n    lengths.sort()\n    print(lengths)\n    print('Longest length of string: ', lengths[-1])\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    result = re.findall('\"([^\"]*)\"', text)\n    return result\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    \n    result = re.findall('\"(.*?)\"',text)\n    result = [i.strip('\"') for i in result]\n    return result\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    new_text = text.replace(\"'\", '\"')\n    result = re.search('\"(.*?)\"', new_text)\n    if result:\n        return result.group(1)\n    else:\n        return None\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.strip()\n    quotes = re.findall('[\"\u201c\u2018]',text)\n    if len(quotes) == 0:\n        return \"\"\n    quotes = re.findall('[\"\u201c\u2018](.*?)[\"\u201c\u2018]',text)\n    if len(quotes) == 0:\n        return \"\"\n    return quotes[0]\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r\"[^\\\"]+\", text)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    start = text.find('\"')\n    stop = text.find('\"',start+1)\n    return text[start+1:stop]\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if(text == None or text == \"\"):\n        return None\n    match = re.search(r'\\\"(.*?)\\\"', text)\n    if(match!= None):\n        return match.group(1)\n    return None\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r\"\\\"(.*?)\\\"\")\n    values = re.findall(pattern,text)\n    print(values)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'(\\\".+?\\\"|\\'.+?\\')')\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r\"(\\\".*?\\\"|'.*?'|[^\\\"'\\s]+)\"\n    values = re.findall(pattern, text)\n    return values\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (arr[i]!= arr[j]):\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    d = {}\n    for i in range(n):\n        d[i] = 0\n    for i in range(n):\n        d[arr[i]] += 1\n    count = 0\n    for i in range(n):\n        if arr[i] in d.keys():\n            if arr[i]+1 in d.keys():\n                count += d[arr[i]]*d[arr[i]+1]\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    count=0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count=count+1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n <= 2:\n        return 0\n    ans = 0\n    i = 0\n    while i < n:\n        j = 0\n        while j < n:\n            if arr[i] == arr[j]:\n                ans += 1\n                j += 1\n            elif j == n - 1:\n                i += 1\n            else:\n                j += 1\n    return ans\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n): \n        for j in range(i+1,n): \n            if (arr[i]!=arr[j]): \n                count = count + 1\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    dict = {}\n    for i in range(n):\n        dict[i] = 0\n    \n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                dict[i] += 1\n                dict[j] += 1\n    for i in range(n):\n        if dict[i] == 0:\n            print(arr[i], end ='')\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    cnt = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if(arr[i]!= arr[j]):\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    c = 0\n    i = 0\n    arr.sort()\n    while i < n:\n        if i < n-1:\n            if arr[i] == arr[i+1]:\n                c = c + 1\n                i = i+1\n            else:\n                i = i+1\n        else:\n            i = i+1\n    return c\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    i=0\n    j=1\n    while j<=n:\n        x=arr[i]\n        y=arr[j]\n        if x==y:\n            i=i+1\n            j=j+1\n        else:\n            break\n    print(\"Possible Unordered Pair: \",i)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [c for c in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    if not isinstance(word, str):\n        raise TypeError\n    return word.split()\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word) \n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n > 0:\n        s += n % 10\n        n = n // 10\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return sum_digits(-n)\n    return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    assert n >= 0\n    if n == 0:\n        return 0\n    else:\n        return (n % 10) + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    \n    # Loop through the string and add it's digits\n    \n    sum = 0\n    while n > 0:\n        sum += n%10\n        n = n // 10\n    \n    return sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    result = 0\n    while n > 0:\n        result += n % 10\n        n //= 10\n    return result\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return n\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(x) for x in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    n = abs(int(n))\n    if n == 0:\n        return 0\n    return n % 10 + sum_digits(n//10)\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 1:\n        return True\n    if len(list1) == 2:\n        if list1[0] > list1[1]:\n            return False\n        else:\n            return True\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if not list1:\n        return False\n    if not isinstance(list1, list):\n        return False\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n    \n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    #print(sorted(list1))\n    if sorted(list1) == list1:\n        print('It is sorted')\n    else:\n        print('It is not sorted')\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <=1:\n        return True\n    elif len(list1) > 1:\n        for i in range(len(list1)-1):\n            if list1[i+1] < list1[i]:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # if list1[0] < list1[1] < list1[2] < list1[3] < list1[4]:\n    #     return True\n    # else:\n    #     return False\n    l = len(list1)\n    i = 0\n    j = l-1\n    while i<j:\n        while list1[i] > list1[j]:\n            i += 1\n        while list1[j] < list1[i]:\n            j -= 1\n    if i==j:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    i = 0\n    if len(list1) == 0:\n        return False\n    while i < len(list1)-1:\n        if list1[i] > list1[i+1]:\n            return False\n        i = i + 1\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if(list1[i]>list1[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        print('Sorted')\n    else:\n        print('Not Sorted')\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # add your code here\n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return []\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    my_list = []\n    for i in range(length):\n        my_list.append({})\n    return my_list\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    my_list = []\n    for i in range(0,length):\n        my_list.append(dict())\n    return my_list\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}]*length\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return []\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    dummy_list = []\n    for x in range(length):\n        dummy_list.append(dict())\n    return dummy_list\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    a = []\n    for i in range(length):\n        a.append({})\n    return a\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1 = sorted(list1)\n    for l in range(len(list1)):\n        list1[l] = sorted(list1[l])\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    \n    return list1\n    \n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in list1:\n        new_list.append(sorted(sublist))\n    return new_list\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    lst = []\n    for sub_lst in list1:\n        sub_lst.sort()\n        lst.append(sub_lst)\n    return lst\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # If the list has no sublists, return the original list\n    if len(list1) == 0:\n        return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list_length = len(list1)\n    for i in range(0,list_length):\n        list1[i] = sorted(list1[i])\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)-1):\n        if len(list1[i]) > len(list1[i+1]):\n            list1[i], list1[i+1] = list1[i+1], list1[i]\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    for num in nums:\n        if num not in result:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_list = []\n    for num in nums:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    #Solution:\n    '''\n    Convert the list to a set.\n    If the set length is more than 2, the list will be uniqued.\n    Return the original list.\n    '''\n    #original list:\n    nums = [1,1,2,3,5,6,7,7]\n    #List length:\n    nums_length = len(nums)\n    #Remove duplicates:\n    if nums_length > 2:\n        nums_set = set(nums)\n        nums = list(nums_set)\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = set(nums)\n    return len(nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(set(nums))\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    l = []\n    for i in nums:\n        if i not in l:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    for n in nums:\n        n.remove(n)\n    for i in nums:\n        if len(i) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums.sort()\n    for i in range(len(nums)):\n        if nums[i] == nums[i-1]:\n            nums.pop(i)\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_list = []\n    for i in nums:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_uniq = []\n    for num in nums:\n        if num not in nums_uniq:\n            nums_uniq.append(num)\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # initializing the variable that stores the product\n    product = 1\n    # iterating over the list and if any number in the list is not a prime number\n    for num in list_data:\n        if not is_prime(num):\n            # if the number is not a prime number\n            product = product * num\n    # returning the product\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # list_data = [1,2,3,4,4,4,5]\n    # output = 1\n    # for i in list_data:\n    #     if i not in output:\n    #         output *= i\n    # print(output)\n    #Output:120\n    #using set\n    output = 1\n    for i in set(list_data):\n        output *= i\n    return output\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # print(list_data)\n    return reduce(lambda a, b: a * b, set(list_data))\n    \n    # return set(list_data)\n    # print(set(list_data))\n    # print(reduce(lambda a, b: a*b, set(list_data)))\n    # print(reduce(lambda a, b: a*b, {1,2,3,4}))\n    # print(reduce(lambda a, b: a*b, {4,2,3,4}))\n    # print(reduce(lambda a, b: a*b, {5,2,3,4,5}))\n    # print(reduce(lambda a, b: a*b, {2,2,3,4}))\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    #initializing the variable\n    prod = 1\n    #traversing the list\n    for i in list_data:\n        #checking if the element is unique\n        if i not in list_data[:list_data.index(i)]:\n            #incrementing the variable\n            prod = prod * i\n    return prod\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    result = 1\n    for x in list_data:\n        if x not in result:\n            result = result*x\n    return result\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = []\n    for i in list_data:\n        if i not in unique_numbers:\n            unique_numbers.append(i)\n    product = 1\n    for i in unique_numbers:\n        product = product * i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    \n    # write your solution below\n    product = 1\n    for i in range(len(list_data)):\n        if i == len(list_data)-1:\n            product = product * list_data[i]\n            break\n        else:\n            product = product * list_data[i]\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    result = 1\n    list_data = sorted(list_data)\n    for i in range(1,len(list_data)):\n        if list_data[i-1]!= list_data[i]:\n            result = result*list_data[i]\n    return result\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = [2, 4, 5, 1, 1, 1, 2, 1, 4, 4, 6]\n    res = 1\n    for ele in list_data:\n        if ele not in list_data[:list_data.index(ele)]:\n            res = res * ele\n    print(res)\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Initializing a variable to store the product\n    product = 1\n    # Iterating through the list and storing the count in a variable\n    for i in list_data:\n        count = list_data.count(i)\n        # Calculating the product\n        product = product * (count+1)\n    return product\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a=2*pi*r*h\n    s=pi*r**2\n    return a+s\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    if h<0:\n        raise ValueError(\"invalid input\")\n    return 2*pi*r*h + 2*pi*r**2\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi=3.14159265359\n    a=pi*r**2\n    surfacearea=2*pi*r*h+2*pi*r*h+a\n    return surfacearea\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*pi*(r**2)*h\n    return area\nprint(surfacearea_cylinder(4,2))\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    area = math.pi*(r**2)*h\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = math.pi\n    a = r * pi\n    print(\"The surface area of a cylinder with a radius of {} is {}\".format(r,2*pi*r*h))\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a = 2*pi*r*h\n    print('The surface area of the cylinder is: ',a)\n    return a\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    a = pi*r**2 + 2*pi*r*h + (pi**2)*h**2\n    print('The surface area of the cone is: ',a)\n    return a\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = (4/3)*pi*r**3\n    print('The surface area of the sphere is: ',a)\n    return a\ndef surfacearea_pyramid(l,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    a = 2*l*h + (2*l**2)*h\n    print('The surface area of the pyramid is: ',a)\n    return a\ndef surfacearea_parallelogram(l,b):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    a = l*b\n    print('The surface area of the parallelogram is: ',a)\n    return a\ndef surfacearea_trapezoid(a,b,c):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    a = a+b+c\n    print('The surface area of the trapezoid is: ',a)\n    return a\ndef surfacearea_trapezoid(a,b,c):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    a = a+b+c\n    print('The surface area of the trapezoid is: ',a)\n    return a\ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    a = pi*r**2\n    print('The surface area of the circle is: ',a)\n    return a\ndef surfacearea_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    a = a+b+c\n    print('The surface area of the triangle is: ',a)\n    return a\ndef surfacearea_rhombus(b,h):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    a = 2*b*h\n    print('The surface area of the rhombus is: ',a)\n    return a\ndef surfacearea_square(a,b):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    a = a+b\n    print('The surface area of the square is: ',a)\n    return a\ndef surfacearea_parallelogram(a,b):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    a = a+b\n    print('The surface area of the parallelogram is: ',a)\n    return a\ndef surfacearea_quad(a,b,c,d):\n    '''\n    Write a function to find the surface area of a quadrilateral.\n    '''\n    a = a+b+c+d\n    print('The surface area of the quadrilateral is: ',a)\n    return a\ndef surfacearea_rectangle(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    a = 2*a+2*b\n    print('The surface area of the rectangle is: ',a)\n    return a\ndef surfacearea_square(a,b):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    a = 2*a+2*b\n    print('The surface area of the square is: ',a)\n    return a\ndef surfacearea_ellipse(a,b):\n    '''\n    Write a function to find the surface area of an ellipse.\n    '''\n    a = 2*a+2*b\n    print('The surface area of the ellipse is: ',a)\n    return a\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4*pi*r**3\n    print('The surface area of the sphere is: ',a)\n    return a\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4*pi*r**3\n    print('The surface area of the sphere is: ',a)\n    return a\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4*pi*r**3\n    print('The surface area of the sphere is: ',a)\n    return a\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4*pi*r**3\n    print('The surface area of the sphere is: ',a)\n    return a\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4*pi*r**3\n    print('The surface area of the sphere is: ',a)\n    return a\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4*pi*r**3\n    print('The surface area of the sphere is: ',a)\n    return a\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4*pi*r**3\n    print('The surface area of the sphere is: ',a)\n    return a\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4*pi*r**3\n    print('The surface area of the sphere is: ',a)\n    return a\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4*pi*r**3\n    print('The surface area of the sphere is: ',a)\n    return a\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4*pi*r**3\n    print('The surface area of the sphere is: ',a)\n    return a\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4*pi*r**3\n    print('The surface area of the sphere is: ',a)\n    return a\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4*pi*r**3\n    print('The surface area of the sphere is: ',a)\n    return a\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4*pi*r**3\n    print('The surface area of the sphere is: ',a)\n    return a\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4*pi*r**3\n    print('The surface area of the sphere is: ',a)\n    return a\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4*pi*r**3\n    print('The surface area of the sphere is: ',a)\n    return a\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a = 4*pi*r**3\n    print('The surface area of the sphere is: ',"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    from math import pi\n    #radius = float(input('Enter radius of cylinder: '))\n    #height = float(input('Enter height of cylinder: '))\n    surface = pi * r * r + pi * r * h\n    return surface\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    pi = 3.14159265358979323\n    return 2*pi*r*h\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area=2*math.pi*r*h+2*math.pi*r**2\n    return surface_area\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    arr = []\n    for i in A:\n        if i not in arr:\n            arr.append(i)\n    for i in arr:\n        if i in B:\n            return True\n    return False\n    \n    \nif __name__ == \"__main__\":\n    A = [1, 2, 3, 4, 5]\n    B = [2, 3, 4]\n    if is_Sub_Array(A,B):\n        print(\"{} is a sublist of {}\".format(B,A))\n    else:\n        print(\"{} is not a sublist of {}\".format(B,A))\n    print(\"\\n\")\n    \n    # this is a sublist of [3, 4, 5]\n    A = [1, 2, 3, 4, 5]\n    B = [3, 4, 5]\n    if is_Sub_Array(A,B):\n        print(\"{} is a sublist of {}\".format(B,A))\n    else:\n        print(\"{} is not a sublist of {}\".format(B,A))\n    print(\"\\n\")\n    \n    # this is not a sublist of [3, 4, 5]\n    A = [1, 2, 3, 4, 5]\n    B = [1, 2, 3]\n    if is_Sub_Array(A,B):\n        print(\"{} is a sublist of {}\".format(B,A))\n    else:\n        print(\"{} is not a sublist of {}\".format(B,A))\n    print(\"\\n\")\n    \n    # this is a sublist of [1, 2, 3, 4, 5]\n    A = [1, 2, 3, 4, 5]\n    B = [1, 2, 3, 4]\n    if is_Sub_Array(A,B):\n        print(\"{} is a sublist of {}\".format(B,A))\n    else:\n        print(\"{} is not a sublist of {}\".format(B,A))\n    print(\"\\n\")\n    \n    # this is a sublist of []\n    A = [1, 2, 3, 4, 5]\n    B = []\n    if is_Sub_Array(A,B):\n        print(\"{} is a sublist of {}\".format(B,A))\n    else:\n        print(\"{} is not a sublist of {}\".format(B,A))\n    print(\"\\n\")\n    \n    # this is not a sublist of []\n    A = []\n    B = [1, 2, 3, 4, 5]\n    if is_Sub_Array(A,B):\n        print(\"{} is a sublist of {}\".format(B,A))\n    else:\n        print(\"{} is not a sublist of {}\".format(B,A))\n    print(\"\\n\")\n    \n    # this is a sublist of []\n    A = []\n    B = []\n    if is_Sub_Array(A,B):\n        print(\"{} is a sublist of {}\".format(B,A))\n    else:\n        print(\"{} is not a sublist of {}\".format(B,A))\n    print(\"\\n\")\n    \n    # this is not a sublist of []\n    A = []\n    B = [1, 2, 3, 4, 5]\n    if is_Sub_Array(A,B):\n        print(\"{} is a sublist of {}\".format(B,A))\n    else:\n        print(\"{} is not a sublist of {}\".format(B,A))\n    print(\"\\n\")\n    \n    # this is a sublist of []\n    A = []\n    B = [1, 2, 3, 4]\n    if is_Sub_Array(A,B):\n        print(\"{} is a sublist of {}\".format(B,A))\n    else:\n        print(\"{} is not a sublist of {}\".format(B,A))\n    print(\"\\n\")\n    \n    # this is a sublist of []\n    A = []\n    B = [1, 2, 3, 4, 5]\n    if is_Sub_Array(A,B):\n        print(\"{} is a sublist of {}\".format(B,A))\n    else:\n        print(\"{} is not a sublist of {}\".format(B,A))\n    print(\"\\n\")\n    \n    # this is not a sublist of []\n    A = []\n    B = [1, 2, 3, 4, 5]\n    if is_Sub_Array(A,B):\n        print(\"{} is a sublist of {}\".format(B,A))\n    else:\n        print(\"{} is not a sublist of {}\".format(B,A))\n    print(\"\\n\")\n    \n    # this is a sublist of []\n    A = []\n    B = []\n    if is_Sub_Array(A,B):\n        print(\"{} is a sublist of {}\".format(B,A))\n    else:\n        print(\"{} is not a sublist of {}\".format(B,A))\n    print(\"\\n\")\n    \n    # this is not a sublist of []\n    A = []\n    B = []\n    if is_Sub_Array(A,B):\n        print(\"{} is a sublist of {}\".format(B,A))\n    else:\n        print(\"{} is not a sublist of {}\".format(B,A))\n    print(\"\\n\")\n    \n    # this is a sublist of []\n    A = []\n    B = [1, 2, 3, 4, 5]\n    if is_Sub_Array(A,B):\n        print(\"{} is a sublist of {}\".format(B,A))\n    else:\n        print(\"{} is not a sublist of {}\".format(B,A))\n    print(\"\\n\")\n    \n    # this is a sublist of []\n    A = []\n    B = []\n    if is_Sub_Array(A,B):\n        print(\"{} is a sublist of {}\".format(B,A))\n    else:\n        print(\"{} is not a sublist of {}\".format(B,A))\n    print(\"\\n\")\n    \n    # this is not a sublist of []\n    A = []\n    B = []\n    if is_Sub_Array(A,B):\n        print(\"{} is a sublist of {}\".format(B,A))\n    else:\n        print(\"{} is not a sublist of {}\".format(B,A))\n    print(\"\\n\")\n    \n    # this is a sublist of []\n    A = []\n    B = []\n    if is_Sub_Array(A,B):\n        print(\"{} is a sublist of {}\".format(B,A))\n    else:\n        print(\"{} is not a sublist of {}\".format(B,A))\n    print(\"\\n\")\n    \n    # this is not a sublist of []\n    A = []\n    B = []\n    if is_Sub_Array(A,B):\n        print(\"{} is a sublist of {}\".format(B,A))\n    else:\n        print(\"{} is not a sublist of {}\".format(B,A))\n    print(\"\\n\")\n    \n    # this is not a sublist of []\n    A = []\n    B = []\n    if is_Sub_Array(A,B):\n        print(\"{} is a sublist of {}\".format(B,A))\n    else:\n        print(\"{} is not a sublist of {}\".format(B,A))\n    print(\"\\n\")\n    \n    # this is not a sublist of []\n    A = []\n    B = []\n    if is_Sub_Array(A,B):\n        print(\"{} is a sublist of {}\".format(B,A))\n    else:\n        print(\"{} is not a sublist of {}\".format(B,A))\n    print(\"\\n\")\n    \n    # this is not a sublist of []\n    A = []\n    B = []\n    if is_Sub_Array(A,B):\n        print(\"{} is a sublist of {}\".format(B,A))\n    else:\n        print(\"{} is not a sublist of {}\".format(B,A))\n    print(\"\\n\")\n    \n    "
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)): \n        if not A: \n            return False\n        if A[0] == B[i]: \n            A.pop(0) \n            return True\n    return False\n    \n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B):\n        return False\n    elif len(A) > len(B):\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    N=len(B)\n    if N==0:\n        return False\n    n=len(A)\n    i=0\n    j=0\n    flag=False\n    while i<n and j<N:\n        if A[i]==B[j]:\n            i+=1\n            j+=1\n        else:\n            i+=1\n        if j==N:\n            flag=True\n            break\n    return flag\n    \nprint(is_Sub_Array([1,2,3,4,5], [3,4]))\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(0,len(B)):\n        if A[0] == B[i]:\n            for j in range(0,len(A)):\n                if A[j] == B[i]:\n                    return True\n                else:\n                    break\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    A_index = 0\n    B_index = 0\n    while A_index<len(A):\n        if A_index == len(A) - 1 and B_index == len(B) - 1:\n            return True\n        elif A_index == len(A) - 1:\n            return False\n        elif A[A_index] == B[B_index]:\n            A_index += 1\n            B_index += 1\n        else:\n            A_index += 1\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A.count(B[0])>0:\n        i = A.index(B[0])\n        for j in range(1,len(B)):\n            if A[i+j]!= B[j]:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i = 0\n    j = 0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            j += 1\n        i += 1\n    if j == len(B):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i=0\n    j=0\n    l=len(A)\n    m=len(B)\n    while i<l and j<m:\n        if A[i]==B[j]:\n            i=i+1\n            j=j+1\n        else:\n            break\n    if j==m:\n        return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    found = False\n    \n    for i in range(0,len(A)):\n        if A[i:len(B)] == B:\n            found = True\n    \n    return found\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    # if n < 10:\n    #     return n\n    # else:\n    #     return n % 10\n    \n    res = 0\n    while n > 0:\n        res = 10*res + n % 10\n        n = n // 10\n    return res\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact = fact * i\n    return fact % 10\n    "
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 0:\n        return -1\n    count = 0\n    while (n!= 0):\n        count += 1\n        n = n // 10\n    return count\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0: \n        raise ValueError (\"factorial does not exist for negative numbers\") \n    else: \n        if n == 0: \n            return 1\n        else: \n            return n%10 * last_Digit_Factorial(n//10) \nn = 15\nprint(last_Digit_Factorial(n)) \n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    for i in range(1, n + 1):\n        fact = fact * i\n    return fact % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    elif n < 0:\n        raise ValueError(\"Factorial of a negative number doesn't exist\")\n    else:\n        res = n * last_Digit_Factorial(n-1)\n        return res % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n=n%10\n    n=n*10\n    n=n//10\n    factorial=1\n    i=1\n    while n>0:\n        factorial=factorial*n\n        i=i+1\n        n=n//10\n    print(factorial%10)\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    elif n < 0:\n        return -1\n    else:\n        return n % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    ans = 1\n    for i in range(1, n + 1):\n        ans = ans * i\n    return ans % 10\n    \n    \n    \n    \ndef set_Count_Digits_of_a_string(st):\n    '''\n    Write a python function to count the number of digits of a string.\n    '''\n    ans = 0\n    for i in range(len(st)):\n        if ord(st[i]) >= 48 and ord(st[i]) <= 57:\n            ans += 1\n    return ans\n    \n    \n    \n    \ndef sum_Digits_of_a_string(st):\n    '''\n    Write a python function to sum the digits of a string.\n    '''\n    ans = 0\n    for i in range(len(st)):\n        ans += ord(st[i]) - 48\n    return ans\n    \n    \n    \n    \ndef list_to_string(lst):\n    '''\n    Write a python function to convert a list to string.\n    '''\n    ans = \"\"\n    for i in range(len(lst)):\n        ans += str(lst[i])\n    return ans\n    \n    \n    \n    \ndef count_length_of_longest_substring(st):\n    '''\n    Write a python function to find the length of the longest substring.\n    '''\n    ans = 0\n    left, right = 0, 0\n    while left < len(st):\n        while right < len(st) and st[right]!= st[left]:\n            right += 1\n        ans = max(ans, right - left)\n        left, right = left + 1, right + 1\n    return ans\n    \n    \n    \n    \ndef count_longest_substring(st, k):\n    '''\n    Write a python function to find the length of the longest substring with no more than k distinct characters.\n    '''\n    ans = 0\n    left, right = 0, 0\n    h = {}\n    while left < len(st):\n        while right < len(st) and st[right] not in h:\n            h[st[right]] = 1\n            right += 1\n        h[st[left]] = h.get(st[left], 0) + 1\n        if h[st[left]] == 1:\n            del h[st[left]]\n        ans = max(ans, right - left)\n        left, right = left + 1, right + 1\n    return ans\n    \n    \n    \n    \ndef sum_arr(arr):\n    '''\n    Write a python function to sum of all the elements in an array.\n    '''\n    ans = 0\n    for i in range(len(arr)):\n        ans += arr[i]\n    return ans\n    \n    \n    \ndef sum_arr_with_consecutive_numbers(arr):\n    '''\n    Write a python function to sum of all the consecutive numbers in an array.\n    '''\n    ans = 0\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1] == 1:\n            ans += arr[i]\n    return ans\n    \n    \n    \ndef sum_arr_with_duplicates(arr):\n    '''\n    Write a python function to sum of all the elements with duplicate numbers in an array.\n    '''\n    ans = 0\n    for i in range(len(arr)):\n        if arr.count(arr[i]) > 1:\n            ans += arr[i]\n    return ans\n    \n    \n    \ndef string_to_array(st):\n    '''\n    Write a python function to convert a string to an array.\n    '''\n    ans = []\n    for i in range(len(st)):\n        ans.append(ord(st[i]) - 48)\n    return ans\n    \n    \n    \ndef sum_numbers_in_a_string(st):\n    '''\n    Write a python function to convert a string to a number.\n    '''\n    ans = 0\n    for i in range(len(st)):\n        ans += ord(st[i]) - 48\n    return ans\n    \n    \n    \n    \ndef sum_array(arr):\n    '''\n    Write a python function to sum of all the elements in an array.\n    '''\n    ans = 0\n    for i in range(len(arr)):\n        ans += arr[i]\n    return ans\n    \n    \n    \ndef sum_array_with_consecutive_numbers(arr):\n    '''\n    Write a python function to sum of all the consecutive numbers in an array.\n    '''\n    ans = 0\n    for i in range(1, len(arr)):\n        if arr[i] - arr[i - 1] == 1:\n            ans += arr[i]\n    return ans\n    \n    \n    \ndef sum_array_with_duplicates(arr):\n    '''\n    Write a python function to sum of all the elements with duplicate numbers in an array.\n    '''\n    ans = 0\n    for i in range(len(arr)):\n        if arr.count(arr[i]) > 1:\n            ans += arr[i]\n    return ans\n    \n    \n    \n    \ndef next_greater(arr):\n    '''\n    Write a python function to find the next greater element in a given array.\n    '''\n    ans = [-1] * len(arr)\n    stack = []\n    stack.append(0)\n    for i in range(1, len(arr)):\n        while len(stack) > 0 and arr[stack[-1]] < arr[i]:\n            ans[stack[-1]] = arr[i]\n            stack.pop()\n        stack.append(i)\n    return ans\n    \n    \n    \n    \ndef number_of_consecutive_ones(arr):\n    '''\n    Write a python function to find the number of consecutive ones in an array.\n    '''\n    ans = 0\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            ans += 1\n            if i == len(arr) - 1:\n                break\n        else:\n            ans = 0\n    return ans\n    \n    \n    \n    \ndef single_number(arr):\n    '''\n    Write a python function to find the single number in a given array.\n    '''\n    ans = -1\n    for i in range(len(arr)):\n        if arr[abs(arr[i]) - 1] < 0:\n            ans = abs(arr[i])\n        else:\n            arr[abs(arr[i]) - 1] = -arr[abs(arr[i]) - 1]\n    return ans\n    \n    \n    \n    \ndef minimum_number_of_flips(a, b):\n    '''\n    Write a python function to find the minimum number of flips required to convert A to B.\n    '''\n    a = list(a)\n    b = list(b)\n    ans = 0\n    while len(a) > 0 and len(b) > 0:\n        if a.pop()!= b.pop():\n            ans += 1\n    return ans\n    \n    \n    \n    \ndef find_pairs(arr, k):\n    '''\n    Write a python function to find all the pairs with a sum of k.\n    '''\n    ans = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == k:\n                ans.append((i, j))\n    return ans\n    \n    \n    \n    \ndef pairs_with_sum(arr, k):\n    '''\n    Write a python function to find all the pairs with a sum of k.\n    '''\n    ans = []\n    left, right = 0, 0\n    while left < len(arr):\n        while right < len(arr) and arr[right] - arr[left]!= k:\n            right += 1\n        if arr[right] - arr[left] == k:\n            ans.append((left, right))\n        left += 1\n        right += 1\n    return ans\n    \n    \n    \n    \ndef find_pairs_with_sum_in_array(arr, k):\n    '''\n    Write a python function to find all the pairs with a sum of k.\n    '"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # converting integer to string\n    n = str(n)\n    # getting the last digit of the string\n    n = n[-1]\n    # converting the digit to integer\n    n = int(n)\n    # multiplying the digit with itself till it is less than 1\n    n = n * (n-1)\n    return n\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return (list1+list2+list3)\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    output_list = []\n    \n    for index in range(len(list1)):\n        output_list.append(list1[index])\n        output_list.append(list2[index])\n        output_list.append(list3[index])\n    \n    return output_list\n    \n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # list1, list2, list3 = [1, 2, 3, 4, 5], [6, 7, 8], [9, 10, 11, 12, 13]\n    # list1, list2, list3 = [11, 12, 13], [14, 15, 16], [17, 18, 19]\n    # return [11, 12, 13, 14, 15, 16, 17, 18, 19]\n    flat = []\n    while list1 or list2 or list3:\n        if list1:\n            flat.append(list1.pop(0))\n        if list2:\n            flat.append(list2.pop(0))\n        if list3:\n            flat.append(list3.pop(0))\n    return flat\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(0,len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] for i in range(len(list1))] + \\\n           [list2[i] for i in range(len(list2))] + \\\n           [list3[i] for i in range(len(list3))]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    i = 0\n    for x in range(0,len(list1)):\n        for y in range(0,len(list2)):\n            for z in range(0,len(list3)):\n                if i==len(list1) and i==len(list2) and i==len(list3):\n                    return list1+list2+list3\n                yield list1[x]+list2[y]+list3[z]\n                i+=1\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list(chain(*zip(list1,list2,list3)))\n    "
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    for x in range(len(list1)):\n        if list1[x] == list2[x]:\n            list3.append(list1[x])\n            list3.append(list2[x])\n        else:\n            list3.append(list1[x])\n    return list3\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    if len(list1)==0:\n        return list3\n    elif len(list2)==0:\n        return list3 + list1\n    elif len(list3)==0:\n        return list3 + list1 + list2\n    else:\n        return list3 + list1 + list2 + list3\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n        new_list.append(list2[i])\n        new_list.append(list3[i])\n    return new_list\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    for x,y in zip(test_tup1, test_tup2):\n        if x!= y:\n            return (x,y)\n    return None\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    set_tup1 = set(test_tup1)\n    set_tup2 = set(test_tup2)\n    set_diff = set_tup1.difference(set_tup2)\n    return set_diff\n    \n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for index, value in enumerate(test_tup1):\n        if test_tup1[index]!= test_tup2[index]:\n            dissimilar_list.append(value)\n    return dissimilar_list\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    \n    if len(test_tup1)!= len(test_tup2):\n        return dissimilar_elements\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    \n    return dissimilar_elements\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return list(set(test_tup1) - set(test_tup2))\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    lst1 = set(test_tup1)\n    lst2 = set(test_tup2)\n    diff = lst1.difference(lst2)\n    return list(diff)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return tuple(i for i in range(len(test_tup1)) if test_tup1[i]!= test_tup2[i])\n    \n    \ndef find_dissimilar_list(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return list(i for i in range(len(test_tup1)) if test_tup1[i]!= test_tup2[i])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if (type(test_tup1)!= tuple) or (type(test_tup2)!= tuple):\n        raise Exception(\"Please enter valid tuples\")\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissim_elems = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissim_elems.append(test_tup1[i])\n    return dissim_elems\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    if len(test_tup1)!= len(test_tup2):\n        return (dissimilar)\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(i)\n    return dissimilar\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            even_ele(i, even_fnc)\n        else:\n            if not(even_fnc(i)):\n                test_tuple = test_tuple[:test_tuple.index(i)] + test_tuple[test_tuple.index(i)+1:]\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n    \ndef even_ele_2(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # this is not great but we can solve it \n    # using list comprehension. \n    return tuple(filter(even_fnc, map(lambda x: x, test_tuple)))\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Test Tuple\n    test_tuple = (\n    ('php', 'git', 'javascript'), ('java', 'python', 'c#'),\n    (1, 2, 3, 4, 5, 6, 7, 8, 9, 0), ('a', 'b', 'c'),\n    ('foo', 'bar', 'baz', 'qux'))\n    \n    # Function\n    even_ele(test_tuple, even_fnc)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    res = list()\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            res.extend(even_ele(item, even_fnc))\n        else:\n            if even_fnc(item):\n                res.append(item)\n    return tuple(res)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = ()\n    for element in test_tuple:\n        if type(element) == tuple:\n            new_tuple += even_ele(element, even_fnc)\n        elif even_fnc(element):\n            new_tuple += (element,)\n    return new_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], tuple) or isinstance(test_tuple[i], list):\n            test_tuple[i] = even_ele(test_tuple[i], even_fnc)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    final_tuple = test_tuple\n    for item in test_tuple:\n        if len(item) > 1:\n            if even_fnc(item):\n                continue\n            else:\n                final_tuple = remove_from_tuple(final_tuple, item)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if type(test_tuple) is not tuple:\n        raise TypeError('Only tuple can be treated')\n    for i in test_tuple:\n        if type(i) is not tuple:\n            raise TypeError('Only tuple can be treated')\n    for i in test_tuple:\n        if type(i) is tuple:\n            if even_fnc(i) == False:\n                test_tuple = test_tuple[0:test_tuple.index(i)] + test_tuple[test_tuple.index(i)+1:]\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Empty tuple.\n    if test_tuple == ():\n        return test_tuple\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    pi = 3.14159265358979323\n    s = float(s)\n    b = float(b)\n    area = (1/2)*b*s\n    return area*(s+b+b+s)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    import math\n    def surface_Area(b,s): \n      \n        # finding surface area of pyramid\n        surf_area = b*s*2\n        print(\"The surface area of the pyramid is: \", surf_area)\n        return surf_area\n    surface_Area(b,s)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surfaceArea(b,h): \n        if h <= 0 or b <= 0: \n            return -1\n        return 2 * (b * h) + 2 * (b + h) + (h - b) * 2\n    return surfaceArea(b,s)\n    "
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    import math \n    return(b * s * math.sqrt(2) )\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    Area = (1/3)*b*s\n    return Area\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    print('\\nSurface Area of a square pyramid with given base edge and height\\n')\n    print(b * s * s)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (1.5*b*s)\n    \ndef surface_Area_Formula(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (1.5*(b**2)*s)\n    \ndef surface_Area_Using_Loop(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0\n    for i in range(1,s+1):\n        area += (1.5*(b**2)*i)\n    return area\n    \nif __name__ == \"__main__\":\n    \n    # Test case 1\n    print(surface_Area(5,2))\n    print(surface_Area_Formula(5,2))\n    print(surface_Area_Using_Loop(5,2))\n    \n    # Test case 2\n    print(surface_Area(3,4))\n    print(surface_Area_Formula(3,4))\n    print(surface_Area_Using_Loop(3,4)"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    base = b\n    height = s\n    return (base*height*2)+(base*(height**2)+base*2)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (s*s*2)+(b*b*2)+(b*s*2)\n    print('The surface area of the pyramid is',area,'units')\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #a = b * s\n    #print(a)\n    area = (s * s * math.sin(math.radians(90))) - (s * (s - b))\n    print(area)\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for key in dict1:\n        if dict1[key]!= 0:\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n        \nprint(my_dict({})) \n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        return True\n    else:\n        return False\nprint(my_dict(dict1={}))\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    x = 1\n    for i in range(num):\n        x = (x*(2*i+1))/(i+1)\n    return x\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan_numbers = [0]\n    for i in range(num):\n        catalan_numbers.append(0)\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    C = 0\n    for i in range(0,num+1):\n        C += comb(num,i) * factorial(i) / factorial(i+1)\n    return C\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    res = 1\n    for i in range(1, num+1):\n        res *= i\n    return res\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    return 0\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # base case\n    if num == 0:\n        return 1\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = num\n    catalan_numbers = [0]*(n+1)\n    catalan_numbers[0] = 1\n    catalan_numbers[1] = 1\n    for i in range(2, n+1):\n        catalan_numbers[i] = 0\n        for j in range(1, i):\n            catalan_numbers[i] += catalan_numbers[j-1]*catalan_numbers[i-j]\n    return catalan_numbers[n]\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    assert(num >= 0), \"The catalan number is defined only for positive integers.\"\n    if num == 0:\n        return 1\n    else:\n        return sum([catalan_number(num - 1 - i) * num_i / (i + 1) for i, num_i in enumerate(range(num))])\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    pass\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return None\n    catal = 0\n    for i in range(num+1):\n        catal = catal + math.factorial(2*i)/(math.factorial(i)*math.factorial(i+1))\n    return catal\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #adverbs ending with ly\n    adverbs_ending_with_ly = re.findall(r\"\\b[ly]s\\b\",text)\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = []\n    adverb_strings = ['ly', 'bily', 'bly', 'emily', 'emilyy', 'ily', 'ilyy']\n    for a in adverb_strings:\n        if a in text:\n            result.append((text.index(a)+1, a))\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.finditer(r'\\bly\\b', text)\n    adverb_endings = []\n    for adverb in adverbs:\n        adverb_endings.append((adverb.start(),adverb.end()))\n    return adverb_endings\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text = text.lower()\n    pattern = re.compile(r'ly')\n    matches = pattern.findall(text)\n    for match in matches:\n        print(\"The first adverb ending with ly is\", match, \"in position\", matches.index(match))\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text = re.sub('[^a-zA-Z]','', text).split()\n    adverbs = []\n    for index, word in enumerate(text):\n        if word[-2:] == 'ly':\n            adverbs.append(index)\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #Initialize variables\n    found = False\n    adverbs = \"\"\n    begin = -1\n    end = -1\n    #Iterate through string\n    for i in range(0, len(text)):\n        if text[i] == \"ly\":\n            found = True\n        if found:\n            adverbs = adverbs + text[i]\n            if text[i] == \"ly\":\n                found = False\n        if found == False:\n            if text[i] == \".\" or text[i] == \",\" or text[i] == \"?\" or text[i] == \"!\":\n                break\n    #Return the results\n    return adverbs,begin,end\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_list = []\n    text = text.split()\n    for i, word in enumerate(text):\n        if word.endswith('ly'):\n            adverb_list.append(i)\n    return adverb_list\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text = text.lower()\n    adverb_positions = []\n    for r in re.finditer(r'ly$', text, re.I):\n        adverb_positions.append(r.span())\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    f = re.findall(\"(.*ly)\", text)\n    for i in range(len(f)):\n        f[i] = f[i].replace('ly', '')\n    return f\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = []\n    for i in range(len(text)):\n        if 'ly' in text[i:i+4] and text[i+4] =='':\n            result.append(i)\n    return result\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_heap = []\n    for price in items:\n        heapq.heappush(items_heap,(-price,price))\n        if len(items_heap) > n:\n            heapq.heappop(items_heap)\n    for i in items_heap:\n        print(i[1],end=' ')\n    print()\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    c=[]\n    for i in range(n):\n        c.append(items[i][1])\n    heapq.heapify(c)\n    for i in range(n,len(items)):\n        if(items[i][1]>c[0]):\n            heapq.heappushpop(c,items[i][1])\n    for i in range(len(c)):\n        print(c[i][0],c[i][1])\ndef test_expensive_items():\n    '''\n    Write a test that tests your function on the following items\n    '''\n    items = [(1, 100), (2, 200), (3, 100), (4, 200), (5, 300), (6, 150), (7, 40)]\n    expensive_items(items,3)\n    expensive_items(items,4)\n    expensive_items(items,5)\n    expensive_items(items,6)\ndef find_max(items):\n    '''\n    Write a function to find the maximum item in a list of items.\n    '''\n    max=items[0]\n    for i in range(1,len(items)):\n        if(items[i]>max):\n            max=items[i]\n    return max\ndef test_find_max():\n    '''\n    Write a test that tests your function on the following items\n    '''\n    items = [1,2,3,4,5,6,7,8]\n    print(find_max(items))\n    items = [5,2,3,4,1,6,7,8]\n    print(find_max(items))\ndef min_heapify(items, n, i):\n    '''\n    Write a function that takes in a list and a heap size n\n    and reorders the elements in the list to make a min heap.\n    '''\n    l=2*i+1\n    r=2*i+2\n    smallest=i\n    if l<n and items[l]<items[smallest]:\n        smallest=l\n    if r<n and items[r]<items[smallest]:\n        smallest=r\n    if smallest!=i:\n        items[i], items[smallest] = items[smallest], items[i]\n        min_heapify(items, n, smallest)\ndef test_min_heapify():\n    '''\n    Write a test that tests your function on the following items\n    '''\n    items=[5,2,3,4,1,6,7,8]\n    min_heapify(items,len(items),0)\n    print(items)\ndef heap_sort(items):\n    '''\n    Write a function to sort a list of items using a heap sort algorithm.\n    '''\n    n=len(items)\n    for i in range(n, -1, -1):\n        min_heapify(items,n,i)\n    for i in range(n-1, 0, -1):\n        items[i], items[0] = items[0], items[i]\n        min_heapify(items,i,0)\ndef test_heap_sort():\n    '''\n    Write a test that tests your function on the following items\n    '''\n    items = [9,8,7,6,5,4,3,2,1]\n    heap_sort(items)\n    print(items)\ndef bubble_sort(items):\n    '''\n    Write a function to sort a list of items using a bubble sort algorithm.\n    '''\n    n=len(items)\n    for i in range(n):\n        for j in range(n-i-1):\n            if(items[j]>items[j+1]):\n                items[j],items[j+1]=items[j+1],items[j]\ndef test_bubble_sort():\n    '''\n    Write a test that tests your function on the following items\n    '''\n    items = [9,8,7,6,5,4,3,2,1]\n    bubble_sort(items)\n    print(items)\ndef insertion_sort(items):\n    '''\n    Write a function to sort a list of items using the insertion sort algorithm.\n    '''\n    n=len(items)\n    for i in range(1,n):\n        for j in range(i):\n            if(items[i]<items[j]):\n                items[i],items[j]=items[j],items[i]\ndef test_insertion_sort():\n    '''\n    Write a test that tests your function on the following items\n    '''\n    items = [9,8,7,6,5,4,3,2,1]\n    insertion_sort(items)\n    print(items)\ndef merge_sort(items):\n    '''\n    Write a function to sort a list of items using the merge sort algorithm.\n    '''\n    def merge(items,left,middle,right):\n        n1=middle-left+1\n        n2=right-middle\n        left_buffer=[]\n        right_buffer=[]\n        for i in range(n1):\n            left_buffer.append(items[left+i])\n        for i in range(n2):\n            right_buffer.append(items[middle+i+1])\n        left_index=0\n        right_index=0\n        sorted_index=left\n        while left_index<n1 and right_index<n2:\n            if(left_buffer[left_index]<=right_buffer[right_index]):\n                items[sorted_index]=left_buffer[left_index]\n                left_index+=1\n            else:\n                items[sorted_index]=right_buffer[right_index]\n                right_index+=1\n            sorted_index+=1\n        while left_index<n1:\n            items[sorted_index]=left_buffer[left_index]\n            left_index+=1\n            sorted_index+=1\n        while right_index<n2:\n            items[sorted_index]=right_buffer[right_index]\n            right_index+=1\n            sorted_index+=1\n    def merge_sort_aux(items,left,right):\n        if(left<right):\n            middle=(left+right)//2\n            merge_sort_aux(items,left,middle)\n            merge_sort_aux(items,middle+1,right)\n            merge(items,left,middle,right)\n    n=len(items)\n    merge_sort_aux(items,0,n-1)\ndef test_merge_sort():\n    '''\n    Write a test that tests your function on the following items\n    '''\n    items = [9,8,7,6,5,4,3,2,1]\n    merge_sort(items)\n    print(items)\ndef quick_sort(items):\n    '''\n    Write a function to sort a list of items using the quick sort algorithm.\n    '''\n    def partition(items,low,high):\n        pivot=items[low]\n        j=low\n        for i in range(low,high+1):\n            if items[i]<pivot:\n                items[i],items[j]=items[j],items[i]\n                j+=1\n        items[low],items[j]=items[j],items[low]\n        return j\n    def quick_sort_aux(items,low,high):\n        if(low<high):\n            p=partition(items,low,high)\n            quick_sort_aux(items,low,p-1)\n            quick_sort_aux(items,p+1,high)\n    n=len(items)\n    quick_sort_aux(items,0,n-1)\ndef test_quick_sort():\n    '''\n    Write a test that tests your function on the following items\n    '''\n    items = [9,8,7,6,5,4,3,2,1]\n    quick_sort(items)\n    print(items)\ndef heap_sort_2(items):\n    '''\n    Write a function to sort a list of items using the heap sort algorithm.\n    '''\n    def parent(i):\n        return int(i/2)\n    def left(i):\n        return 2*i\n    def right(i):\n    "
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    table=dict()\n    for i in items:\n        if i in table:\n            table[i]=table[i]+1\n        else:\n            table[i]=1\n    table = {key:value for key,value in table.items() if value>=n}\n    return table\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # using min heap\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap,(-1*items[i],i))\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i in items:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a heap that will store the prices of the items\n    pq = []\n    \n    # For each item in the items array, push it on the heap and decrease its value\n    # by one, so that the item with the higher price is on top.\n    for item in items:\n        heapq.heappush(pq,item)\n        \n    # Sort the heap and return only the top n elements\n    return heapq.nlargest(n,pq)\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    item_count = {}\n    for item in items:\n        if item in item_count:\n            item_count[item] += 1\n        else:\n            item_count[item] = 1\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    answer = []\n    for i in range(n):\n        min = float('inf')\n        for item in items:\n            if item.price < min:\n                min = item.price\n                answer.append(item)\n    return answer\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    pq = []\n    for item, price in items:\n        heapq.heappush(pq, (-price, item))\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort(key=lambda x: x[1])\n    return items[-n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    \n    if n > len(l):\n        return l\n    if n == 1:\n        return l\n    if n == len(l):\n        return l[1:]\n    else:\n        return l[:n] + l[n:]\n        \n        \n    \n    \n    \ndef count_inversions_mergeSort(arr):\n    if len(arr) == 1:\n        return arr\n    \n    mid = len(arr)//2\n    a = arr[:mid]\n    b = arr[mid:]\n    \n    arr = count_inversions_mergeSort(a) + count_inversions_mergeSort(b)\n    return merge(arr, arr)\n    \ndef merge(arr1, arr2):\n    arr = []\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            arr.append(arr1[i])\n            i += 1\n        else:\n            arr.append(arr2[j])\n            j += 1\n    \n    arr += arr1[i:]\n    arr += arr2[j:]\n    return arr\n    \n    \n    \n    \n    \ndef count_inversions_recursive(arr):\n    if len(arr) == 1:\n        return arr\n    if len(arr) == 2:\n        if arr[0] < arr[1]:\n            return arr\n        else:\n            return arr[::-1]\n    arr1 = arr[:len(arr)//2]\n    arr2 = arr[len(arr)//2:]\n    return count_inversions_recursive(arr1) + count_inversions_recursive(arr2)\n    \n    \n    \n    \n    \n    \ndef count_inversions_iterative(arr):\n    arr_len = len(arr)\n    if arr_len == 1:\n        return arr\n    left = 0\n    right = len(arr)-1\n    i = 0\n    while i <= right:\n        if arr[i] < arr[right]:\n            arr[left] = arr[i]\n            i += 1\n            left += 1\n        else:\n            arr[left] = arr[right]\n            right -= 1\n            left += 1\n    \n    del arr[left:]\n    return arr\n    \n    \n    \n    \n    \ndef min_heapify(arr, i):\n    \n    smallest = i\n    left = 2*i\n    right = 2*i+1\n    if left < len(arr) and arr[smallest] > arr[left]:\n        smallest = left\n    if right < len(arr) and arr[smallest] > arr[right]:\n        smallest = right\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        min_heapify(arr, smallest)\n        \n        \n    \n    \n    \n    \n    \ndef build_min_heap(arr):\n    \n    for i in range(len(arr)-1,-1,-1):\n        min_heapify(arr, i)\n    \ndef heap_sort(arr):\n    \n    build_min_heap(arr)\n    for i in range(len(arr)-1,0,-1):\n        arr[0], arr[i] = arr[i], arr[0]\n        min_heapify(arr, 0)\n        \ndef heap_sort_using_recursive_iterative(arr):\n    \n    build_min_heap(arr)\n    sorted_arr = []\n    for i in range(len(arr)-1,0,-1):\n        arr[i], arr[0] = arr[0], arr[i]\n        sorted_arr.append(arr[i])\n        min_heapify(arr, 0)\n    return sorted_arr\n    \ndef heap_sort_using_recursive_recursive(arr):\n    \n    build_min_heap(arr)\n    sorted_arr = []\n    for i in range(len(arr)-1,0,-1):\n        arr[i], arr[0] = arr[0], arr[i]\n        sorted_arr.append(arr[i])\n        min_heapify(arr, 0)\n    return sorted_arr\n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef get_middle_index(arr):\n    return len(arr)//2\n    \ndef get_middle_value(arr, i):\n    middle_index = get_middle_index(arr)\n    return arr[middle_index]\n    \ndef get_middle_sorted_list(arr):\n    middle_index = get_middle_index(arr)\n    middle_value = get_middle_value(arr, middle_index)\n    return arr[middle_index+1:] + arr[:middle_index]\n    \n    \n    \ndef reverse_sorted_list(arr):\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        temp = arr[start]\n        arr[start] = arr[end]\n        arr[end] = temp\n        start += 1\n        end -= 1\n        \ndef reverse_sorted_list_using_recursive(arr):\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        temp = arr[start]\n        arr[start] = arr[end]\n        arr[end] = temp\n        start += 1\n        end -= 1\n        \n    \n    \ndef maximum_subarray_sum(arr):\n    if not arr:\n        return 0\n    max_subarray_sum = 0\n    max_subarray_sum = max(max_subarray_sum, arr[0])\n    \n    for i in range(len(arr)):\n        temp = arr[i]\n        for j in range(i, len(arr)):\n            temp += arr[j]\n            max_subarray_sum = max(max_subarray_sum, temp)\n    return max_subarray_sum\n    \n    \n    \ndef maximum_subarray_sum_using_recursive(arr):\n    if not arr:\n        return 0\n    \n    max_subarray_sum = arr[0]\n    \n    def maximum_subarray_sum_recursive(arr, i):\n        if i >= len(arr):\n            return\n        temp = arr[i]\n        for j in range(i, len(arr)):\n            temp += arr[j]\n            max_subarray_sum = max(max_subarray_sum, temp)\n            \n        maximum_subarray_sum_recursive(arr, i+1)\n        \n    maximum_subarray_sum_recursive(arr, 0)\n    return max_subarray_sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef print_in_browsing_order(arr):\n    if not arr:\n        return\n    \n    first_index = 0\n    last_index = len(arr) - 1\n    \n    def print_in_browsing_order_helper(arr, first_index, last_index):\n        if first_index >= last_index:\n            return\n        temp = arr[first_index]\n        \n        while first_index < last_index:\n            if temp < arr[last_index]:\n                print(temp, end = \" \")\n                temp = arr[last_index]\n                last_index -= 1\n            else:\n                first_index += 1\n                temp = arr[first_index]\n        print(temp, end = \" \")\n        first_index = last_index + 1\n        print_in_browsing_order_helper(arr, first_index, last_index)\n    \n    print_in_browsing_order_helper(arr, first_index, last_index)\n    \n    \n    \n    \n    \n    \n    \n    \ndef find_index_of_min_in_list(arr):\n    if not arr:\n        return -1\n    \n    min_value = arr[0]\n    for i in range(len(arr)):\n        if arr[i] < min_value:\n            min_value = arr[i]\n            min_index = i\n    return min_index\n    \ndef find_inde"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n+1:]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    size = len(l)\n    if n > size:\n        return\n    if n == size:\n        return\n    if n == 0:\n        return\n    for i in range(size-n+1):\n        l[i], l[i+n] = l[i+n], l[i]\n        print(l)\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return l\n    else:\n        return (l[:n]+l[n:])\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == 0:\n        return l\n    if l == []:\n        return []\n    return l[:n] + split_Arr(l[n:], n - 1)\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    a = l\n    b = []\n    if len(l) >= n:\n        for i in range(n):\n            c = l[i]\n            b.append(c)\n        for i in range(n,len(l)):\n            d = l[i]\n            b.append(d)\n        b = b + a\n    else:\n        b = a\n    return b\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    m = len(l)\n    for i in range(m):\n        if i == n:\n            l1 = l[:i]\n            l2 = l[i:]\n            return l1 + l2\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    arr = []\n    for i in range(len(l)):\n        if i == n:\n            arr.append(l[i])\n        else:\n            arr.append(l[i])\n    return arr\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first = l[:n]\n    last = l[n:]\n    return last + first\n    \n    \n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n    \ndef list_set(listx):\n    '''\n    Write a function to convert a list to a set.\n    '''\n    setx = set(listx)\n    return setx\n    \ndef list_dict(listx):\n    '''\n    Write a function to convert a list to a dictionary.\n    '''\n    dic = dict(listx)\n    return dic\n    \ndef list_sort(listx):\n    '''\n    Write a function to sort a list.\n    '''\n    listx.sort()\n    return listx\n    \ndef list_sort_reverse(listx):\n    '''\n    Write a function to sort a list in reverse.\n    '''\n    listx.sort(reverse=True)\n    return listx\n    \ndef list_append(listx, listy):\n    '''\n    Write a function to append listy to the end of listx.\n    '''\n    listx.append(listy)\n    return listx\n    \ndef list_remove(listx, listy):\n    '''\n    Write a function to remove listy from listx.\n    '''\n    listx.remove(listy)\n    return listx\n    \ndef list_pop(listx):\n    '''\n    Write a function to pop from the listx.\n    '''\n    listx.pop()\n    return listx\n    \ndef list_reverse(listx):\n    '''\n    Write a function to reverse the order of the listx.\n    '''\n    listx.reverse()\n    return listx\n    \ndef list_clear(listx):\n    '''\n    Write a function to clear listx.\n    '''\n    listx.clear()\n    return listx\n    \ndef list_count(listx, listy):\n    '''\n    Write a function to count the number of elements in listy is listx.\n    '''\n    count = 0\n    for item in listx:\n        if item == listy:\n            count += 1\n    return count\n    \ndef list_index(listx, listy):\n    '''\n    Write a function to get the index of listy in listx.\n    '''\n    index = 0\n    for item in listx:\n        if item == listy:\n            return index\n        else:\n            index += 1\n            \ndef list_count_if(listx, listy):\n    '''\n    Write a function to count the number of elements in listy is listx.\n    '''\n    count = 0\n    for item in listx:\n        if item == listy:\n            count += 1\n    return count\n    \ndef list_index_if(listx, listy):\n    '''\n    Write a function to get the index of listy in listx.\n    '''\n    index = 0\n    for item in listx:\n        if item == listy:\n            return index\n        else:\n            index += 1\n        \ndef list_min(listx):\n    '''\n    Write a function to get the minimum of listx.\n    '''\n    min = listx[0]\n    for item in listx:\n        if item < min:\n            min = item\n    return min\n        \ndef list_max(listx):\n    '''\n    Write a function to get the maximum of listx.\n    '''\n    max = listx[0]\n    for item in listx:\n        if item > max:\n            max = item\n    return max\n    \ndef list_sum(listx):\n    '''\n    Write a function to get the sum of listx.\n    '''\n    total = 0\n    for item in listx:\n        total += item\n    return total\n    \ndef list_length(listx):\n    '''\n    Write a function to get the length of listx.\n    '''\n    length = len(listx)\n    return length\n    \ndef list_reverse(listx):\n    '''\n    Write a function to reverse the order of the listx.\n    '''\n    listx.reverse()\n    return listx\n    \ndef list_to_string(listx):\n    '''\n    Write a function to convert a list to a string.\n    '''\n    string = \",\".join(listx)\n    return string\n    \ndef list_join(listx, listy):\n    '''\n    Write a function to join listx with listy.\n    '''\n    listx.join(listy)\n    return listx\n    \ndef list_sort_join(listx, listy):\n    '''\n    Write a function to sort a list, then join them into a string.\n    '''\n    listx.sort()\n    listx.join(listy)\n    return listx\n    \ndef list_join_split(listx):\n    '''\n    Write a function to split a string of a list.\n    '''\n    listx = listx.split(',')\n    return listx\n    \ndef list_sort_join_split(listx, listy):\n    '''\n    Write a function to sort a list, then join them into a string.\n    '''\n    listx.sort()\n    listx.join(listy)\n    return listx\n    \ndef list_join_sort_split(listx, listy):\n    '''\n    Write a function to join a list and sort it.\n    '''\n    listx.join(listy)\n    listx.sort()\n    return listx\n    \ndef list_join_sort_split_reverse(listx, listy):\n    '''\n    Write a function to join a list and sort it.\n    '''\n    listx.join(listy)\n    listx.sort(reverse=True)\n    return listx\n    \ndef list_join_sort_split_reverse_split(listx, listy):\n    '''\n    Write a function to join a list and sort it.\n    '''\n    listx.join(listy)\n    listx.sort(reverse=True)\n    listx.split(' ')\n    return listx\n    \ndef list_append_list(listx, listy):\n    '''\n    Write a function to append a list to the end of a list.\n    '''\n    listx.append(listy)\n    return listx\n    \ndef list_pop_list(listx):\n    '''\n    Write a function to pop a list from the end of a list.\n    '''\n    listx.pop()\n    return listx\n    \ndef list_remove_list(listx, listy):\n    '''\n    Write a function to remove a list from the end of a list.\n    '''\n    listx.remove(listy)\n    return listx\n    \ndef list_reverse_list(listx):\n    '''\n    Write a function to reverse the order of a list.\n    '''\n    listx.reverse()\n    return listx\n    \ndef list_clear_list(listx):\n    '''\n    Write a function to clear a list.\n    '''\n    listx.clear()\n    return listx\n    \ndef list_count_list(listx, listy):\n    '''\n    Write a function to count the number of elements in listy is listx.\n    '''\n    count = 0\n    for item in listx:\n        if item == listy:\n            count += 1\n    return count\n    \ndef list_index_list(listx, listy):\n    '''\n    Write a function to get the index of listy in listx.\n    '''\n    index = 0\n    for item in listx:\n        if item == listy:\n            return index\n        else:\n            index += 1\n            \ndef list_count_list_if(listx, listy):\n    '''\n    Write a function to count the number of elements in listy is listx.\n    '''\n    count = 0\n    for item in listx:\n        if item == listy:\n            count += 1\n    return count\n    \ndef list_index_list_if(listx, listy):\n    '''\n    Write a function to get the index of listy in listx.\n    '''\n    index = 0\n    for item in listx:\n        if item == listy:\n            return index\n        else"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    for i in listx:\n        if type(i) == list:\n            return tuple(i)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    #x = list(listx)\n    #y = tuple(x)\n    #return y\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    \n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    x = tuple(listx)\n    return x\n    \n    \ndef list_tuple_func(x):\n    '''\n    Write a function that takes a list of numbers and returns a tuple with\n    the square roots of those numbers.\n    '''\n    l = []\n    for i in x:\n        if i < 0:\n            l.append(i)\n    y = []\n    for i in range(len(x)):\n        y.append(math.sqrt(x[i]))\n    return tuple(y), tuple(l)\n    \n    \ndef list_tuple_func2(x):\n    '''\n    Write a function that takes a list of numbers and returns a tuple with\n    the square roots of those numbers.\n    '''\n    l = []\n    for i in x:\n        if i < 0:\n            l.append(i)\n    return tuple(math.sqrt(i) for i in x if i >= 0)\n    \n    \ndef list_tuple_func3(x):\n    '''\n    Write a function that takes a list of numbers and returns a tuple with\n    the square roots of those numbers.\n    '''\n    return tuple(math.sqrt(i) for i in x if i >= 0)\n    \n    \ndef list_tuple_func4(x):\n    '''\n    Write a function that takes a list of numbers and returns a tuple with\n    the square roots of those numbers.\n    '''\n    return tuple(math.sqrt(i) for i in x)\n    \n    \ndef list_tuple_func5(x):\n    '''\n    Write a function that takes a list of numbers and returns a tuple with\n    the square roots of those numbers.\n    '''\n    return tuple(i for i in x if i >= 0)\n    \n    \ndef list_tuple_func6(x):\n    '''\n    Write a function that takes a list of numbers and returns a tuple with\n    the square roots of those numbers.\n    '''\n    return tuple(i for i in x if i >= 0)\n    \n    \ndef list_tuple_func7(x):\n    '''\n    Write a function that takes a list of numbers and returns a tuple with\n    the square roots of those numbers.\n    '''\n    return tuple(math.sqrt(i) for i in x if i >= 0)\n    \n    \ndef list_tuple_func8(x):\n    '''\n    Write a function that takes a list of numbers and returns a tuple with\n    the square roots of those numbers.\n    '''\n    return tuple(math.sqrt(i) for i in x if i >= 0)\n    \n    \ndef list_tuple_func9(x):\n    '''\n    Write a function that takes a list of numbers and returns a tuple with\n    the square roots of those numbers.\n    '''\n    return tuple(i for i in x if i >= 0)\n    \n    \ndef list_tuple_func10(x):\n    '''\n    Write a function that takes a list of numbers and returns a tuple with\n    the square roots of those numbers.\n    '''\n    return tuple(math.sqrt(i) for i in x if i >= 0)\n    \n    \ndef list_tuple_func11(x):\n    '''\n    Write a function that takes a list of numbers and returns a tuple with\n    the square roots of those numbers.\n    '''\n    return tuple(i for i in x if i >= 0)\n    \n    \ndef list_tuple_func12(x):\n    '''\n    Write a function that takes a list of numbers and returns a tuple with\n    the square roots of those numbers.\n    '''\n    return tuple(math.sqrt(i) for i in x if i >= 0)\n    \n    \ndef list_tuple_func13(x):\n    '''\n    Write a function that takes a list of numbers and returns a tuple with\n    the square roots of those numbers.\n    '''\n    return tuple(i for i in x if i >= 0)\n    \n    \ndef list_tuple_func14(x):\n    '''\n    Write a function that takes a list of numbers and returns a tuple with\n    the square roots of those numbers.\n    '''\n    return tuple(math.sqrt(i) for i in x if i >= 0)\n    \n    \ndef list_tuple_func15(x):\n    '''\n    Write a function that takes a list of numbers and returns a tuple with\n    the square roots of those numbers.\n    '''\n    return tuple(i for i in x if i >= 0)\n    \n    \ndef list_tuple_func16(x):\n    '''\n    Write a function that takes a list of numbers and returns a tuple with\n    the square roots of those numbers.\n    '''\n    return tuple(math.sqrt(i) for i in x if i >= 0)\n    \n    \ndef list_tuple_func17(x):\n    '''\n    Write a function that takes a list of numbers and returns a tuple with\n    the square roots of those numbers.\n    '''\n    return tuple(i for i in x if i >= 0)\n    \n    \ndef list_tuple_func18(x):\n    '''\n    Write a function that takes a list of numbers and returns a tuple with\n    the square roots of those numbers.\n    '''\n    return tuple(math.sqrt(i) for i in x if i >= 0)\n    \n    \ndef list_tuple_func19(x):\n    '''\n    Write a function that takes a list of numbers and returns a tuple with\n    the square roots of those numbers.\n    '''\n    return tuple(i for i in x if i >= 0)\n    \n    \ndef list_tuple_func20(x):\n    '''\n    Write a function that takes a list of numbers and returns a tuple with\n    the square roots of those numbers.\n    '''\n    return tuple(math.sqrt(i) for i in x if i >= 0)\n    \n    \ndef list_tuple_func21(x):\n    '''\n    Write a function that takes a list of numbers and returns a tuple with\n    the square roots of those numbers.\n    '''\n    return tuple(i for i in x if i >= 0)\n    \n    \ndef list_tuple_func22(x):\n    '''\n    Write a function that takes a list of numbers and returns a tuple with\n    the square roots of those numbers.\n    '''\n    return tuple(math.sqrt(i) for i in x if i >= 0)\n    \n    \ndef list_tuple_func23(x):\n    '''\n    Write a function that takes a list of numbers and returns a tuple with\n    the square roots of those numbers.\n    '''\n    return tuple(i for i in x if i >= 0)\n    \n    \ndef list_tuple_func24(x):\n    '''\n    Write a function that takes a list of numbers and returns a tuple with\n    the square roots of those numbers.\n    '''\n    return tuple(math.sqrt(i) for i in x if i >= 0)\n    \n    \ndef list_tuple_func25(x):\n    '''\n    Write a function that takes a list of numbers and returns a tuple with\n    the square roots of those numbers.\n    '''\n    return tuple(i for i in x if i >= 0)\n    \n    \ndef list_tuple_func26(x):\n    '''\n    Write a function that takes a list of numbers and returns a tuple with\n    the square roots of those numbers.\n    '''\n    return tuple(math.sqrt(i) for i in x if i >= 0)\n    \n    \ndef list_tuple_func27(x):\n    '''\n    Write a function that takes a list of numbers and returns a tuple with\n    the square roots of those numbers.\n    '''\n    return tuple(i for i in x if i >= 0)\n    \n    \ndef list_tuple_func28(x):\n    '''\n    Write a function that takes a list of numbers and returns a tuple with\n    the square roots of those numbers.\n    '''\n    return tuple(math.sqrt(i) for i in x if i >= 0)\n    \n    \ndef list_tuple_func29(x):\n    '''\n    Write a function that takes a list of numbers and returns a tuple with\n    the square roots of those numbers"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    x = tuple(listx)\n    print(x)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return abs(nums[-1]-nums[0])\n    \ndef big_diff(nums):\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    i = 0\n    result = 0\n    for i in range(1, len(nums)):\n        if nums[i] > nums[i - 1]:\n            result = nums[i] - nums[i - 1]\n    if result > nums[0]:\n        return result\n    else:\n        return 0\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums = sorted(nums,reverse=True)\n    biggest = nums[0]\n    smallest = nums[0]\n    for i in range(1,len(nums)):\n        if nums[i] > biggest:\n            biggest = nums[i]\n        if nums[i] < smallest:\n            smallest = nums[i]\n    return biggest - smallest\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums)==0:\n        return []\n    if len(nums)==1:\n        return abs(nums[0]-nums[0])\n    nums = sorted(nums)\n    return abs(nums[-1]-nums[0])\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums)-min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return -1\n    nums = sorted(nums)\n    return nums[-1] - nums[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    if len(nums) == 1:\n        return nums[0]\n    \n    left_idx = 0\n    right_idx = len(nums) - 1\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = float('-inf')\n    smallest = float('inf')\n    for i in nums:\n        largest = max(i, largest)\n        smallest = min(i, smallest)\n    return largest - smallest\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    print(max(nums) - min(nums))\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [x for x in range(a,b+1) if x**2 == x]\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    \n    a, b = int(a), int(b)\n    if a < b:\n        for i in range(a, b - 1):\n            if i**2 == a:\n                print(a)\n            elif i**2 == b:\n                print(b)\n            else:\n                continue\n    elif a > b:\n        for i in range(a, b + 1):\n            if i**2 == a:\n                print(a)\n            elif i**2 == b:\n                print(b)\n            else:\n                continue\n    else:\n        print(a)\n        \n    \nif __name__ == '__main__':\n    import sys\n    if len(sys.argv)!= 3:\n        print('Invalid Syntax')\n    else:\n        perfect_squares(sys.argv[1], sys.argv[2])"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == b:\n        return a\n    while a!= b:\n        a += 1\n        if a**2 == b:\n            return b\n    return a\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b + 1):\n        if i ** 2 == a:\n            print(a)\n        elif i ** 2 == b:\n            print(b)\n        elif i ** 2 > b:\n            break\n        else:\n            print(i)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return a ** 2 == b\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Create a list of all perfect squares from both\n    # given numbers\n    ls = []\n    for i in range(a, b+1):\n        if is_perfect_square(i):\n            ls.append(i)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    count = 0\n    for num in range(a, b):\n        if(num ** 2 == a):\n            count += 1\n            print(count)\n    return count\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if (int(math.sqrt(i)) ** 2 == i):\n            result.append(i)\n    return result\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    def isPerfectSquare(x):\n        low = 0\n        high = x\n        mid = (low + high)//2\n        while (low <= high):\n            if mid*mid == x:\n                return True\n            elif mid*mid < x:\n                low = mid + 1\n            else:\n                high = mid - 1\n            mid = (low + high)//2\n        return False\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [i**2 for i in range(a, b+1) if i**2 == i]\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    print(\"x = {}, y = {}\".format(x, y))\n    r = math.sqrt(x**2+y**2)\n    theta = math.atan2(y, x)\n    print(\"r = {}, theta = {}\".format(r, theta))\n    \ndef rectangle(x1,y1,x2,y2):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    print(\"x1 = {}, y1 = {}, x2 = {}, y2 = {}\".format(x1, y1, x2, y2))\n    r = math.sqrt((x1-x2)**2 + (y1-y2)**2)\n    theta = math.atan2(y1-y2, x1-x2)\n    print(\"r = {}, theta = {}\".format(r, theta))\n    \ndef circle(x, y, r):\n    '''\n    Write a function to compute the area of a circle given its center and radius.\n    '''\n    import math\n    area = math.pi*r*r\n    print(\"The area of the circle is: {}\".format(area))\n    \ndef rectangle(x1,y1,x2,y2):\n    '''\n    Write a function to compute the length of the shortest distance between two points on a line.\n    '''\n    import math\n    x1 = float(x1)\n    y1 = float(y1)\n    x2 = float(x2)\n    y2 = float(y2)\n    x_diff = x1-x2\n    y_diff = y1-y2\n    x_square = x_diff**2\n    y_square = y_diff**2\n    dist = math.sqrt(x_square+y_square)\n    print(\"The distance between the points is: {}\".format(dist))\n    \ndef circle(x, y, r):\n    '''\n    Write a function to compute the area of a circle given its center and radius.\n    '''\n    import math\n    area = math.pi*r*r\n    print(\"The area of the circle is: {}\".format(area))\n    \ndef rectangle(x1,y1,x2,y2):\n    '''\n    Write a function to compute the length of the shortest distance between two points on a line.\n    '''\n    import math\n    x1 = float(x1)\n    y1 = float(y1)\n    x2 = float(x2)\n    y2 = float(y2)\n    x_diff = x1-x2\n    y_diff = y1-y2\n    x_square = x_diff**2\n    y_square = y_diff**2\n    dist = math.sqrt(x_square+y_square)\n    print(\"The distance between the points is: {}\".format(dist))\n    \ndef circle(x, y, r):\n    '''\n    Write a function to compute the area of a circle given its center and radius.\n    '''\n    import math\n    area = math.pi*r*r\n    print(\"The area of the circle is: {}\".format(area))\n    \ndef rectangle(x1,y1,x2,y2):\n    '''\n    Write a function to compute the length of the shortest distance between two points on a line.\n    '''\n    import math\n    x1 = float(x1)\n    y1 = float(y1)\n    x2 = float(x2)\n    y2 = float(y2)\n    x_diff = x1-x2\n    y_diff = y1-y2\n    x_square = x_diff**2\n    y_square = y_diff**2\n    dist = math.sqrt(x_square+y_square)\n    print(\"The distance between the points is: {}\".format(dist))\n    \ndef circle(x, y, r):\n    '''\n    Write a function to compute the area of a circle given its center and radius.\n    '''\n    import math\n    area = math.pi*r*r\n    print(\"The area of the circle is: {}\".format(area))\n    \ndef rectangle(x1,y1,x2,y2):\n    '''\n    Write a function to compute the length of the shortest distance between two points on a line.\n    '''\n    import math\n    x1 = float(x1)\n    y1 = float(y1)\n    x2 = float(x2)\n    y2 = float(y2)\n    x_diff = x1-x2\n    y_diff = y1-y2\n    x_square = x_diff**2\n    y_square = y_diff**2\n    dist = math.sqrt(x_square+y_square)\n    print(\"The distance between the points is: {}\".format(dist))\n    \ndef circle(x, y, r):\n    '''\n    Write a function to compute the area of a circle given its center and radius.\n    '''\n    import math\n    area = math.pi*r*r\n    print(\"The area of the circle is: {}\".format(area))\n    \ndef rectangle(x1,y1,x2,y2):\n    '''\n    Write a function to compute the length of the shortest distance between two points on a line.\n    '''\n    import math\n    x1 = float(x1)\n    y1 = float(y1)\n    x2 = float(x2)\n    y2 = float(y2)\n    x_diff = x1-x2\n    y_diff = y1-y2\n    x_square = x_diff**2\n    y_square = y_diff**2\n    dist = math.sqrt(x_square+y_square)\n    print(\"The distance between the points is: {}\".format(dist))\n    \ndef circle(x, y, r):\n    '''\n    Write a function to compute the area of a circle given its center and radius.\n    '''\n    import math\n    area = math.pi*r*r\n    print(\"The area of the circle is: {}\".format(area))\n    \ndef rectangle(x1,y1,x2,y2):\n    '''\n    Write a function to compute the length of the shortest distance between two points on a line.\n    '''\n    import math\n    x1 = float(x1)\n    y1 = float(y1)\n    x2 = float(x2)\n    y2 = float(y2)\n    x_diff = x1-x2\n    y_diff = y1-y2\n    x_square = x_diff**2\n    y_square = y_diff**2\n    dist = math.sqrt(x_square+y_square)\n    print(\"The distance between the points is: {}\".format(dist))\n    \ndef circle(x, y, r):\n    '''\n    Write a function to compute the area of a circle given its center and radius.\n    '''\n    import math\n    area = math.pi*r*r\n    print(\"The area of the circle is: {}\".format(area))\n    \ndef rectangle(x1,y1,x2,y2):\n    '''\n    Write a function to compute the length of the shortest distance between two points on a line.\n    '''\n    import math\n    x1 = float(x1)\n    y1 = float(y1)\n    x2 = float(x2)\n    y2 = float(y2)\n    x_diff = x1-x2\n    y_diff = y1-y2\n    x_square = x_diff**2\n    y_square = y_diff**2\n    dist = math.sqrt(x_square+y_square)\n    print(\"The distance between the points is: {}\".format(dist))\n    \ndef circle(x, y, r):\n    '''\n    Write a function to compute the area of a circle given its center and radius.\n    '''\n    import math\n    area = math.pi*r*r\n    print(\"The area of the circle is: {}\".format(area))\n    \ndef rectangle(x1,y1,x2,y2):\n    '''\n    Write a function to compute the length of the shortest distance between two points on a line.\n    '''\n    import math\n    x1 = float(x1)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=math.sqrt(x**2+y**2)\n    theta=math.atan2(y,x)\n    return r,theta\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = abs(x**2 + y**2)**0.5\n    theta = cmath.atan2(y,x)\n    return r, theta\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = math.sqrt(x**2 + y**2)\n    theta = math.atan2(y, x)\n    return (r, theta)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return cmath.sqrt(x**2+y**2), cmath.degrees(cmath.atan2(y,x))\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*y, x, y\ndef r_square(rectangle):\n    '''\n    Write a function to convert rectangular coordinates to the square of the rectangle.\n    '''\n    a,b,c = rectangle\n    return a*a + b*b\ndef rad_cube(radii):\n    '''\n    Write a function to convert radius to cube.\n    '''\n    return radii * radii * radii\ndef to_rad(degrees):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degrees / 180 * 3.14\ndef area_rect(rectangle):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return rectangle[0] * rectangle[1]\ndef calc_diameter(rectangle):\n    '''\n    Write a function to find the diameter of a rectangle.\n    '''\n    return 2 * max(rectangle[0], rectangle[1])\ndef dist_between_points(point1, point2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    return (point2[0] - point1[0])**2 + (point2[1] - point1[1])**2\ndef dist_rect(rectangle1, rectangle2):\n    '''\n    Write a function to calculate the distance between two rectangles.\n    '''\n    return dist_between_points(rectangle1[0], rectangle2[0]) + dist_between_points(rectangle1[1], rectangle2[1])\ndef rect_intersection(rectangle1, rectangle2):\n    '''\n    Write a function to find the intersection of two rectangles.\n    '''\n    a1,b1,c1 = rectangle1\n    a2,b2,c2 = rectangle2\n    if (b1 > a2) or (a2 > b2):\n        return None\n    if (b1 == a2 and c1 == c2):\n        return [a1, b1, a2, b2]\n    if (b1 == a2 and c2 == c1):\n        return [a1, b1, a2, b2]\n    if (b2 == a1 and c1 == c2):\n        return [a1, b1, a2, b2]\n    if (b2 == a1 and c2 == c1):\n        return [a1, b1, a2, b2]\n    x1 = (c2*a1 - c1*a2) / (b1 - b2)\n    x2 = (c1*a2 - c2*a1) / (b2 - b1)\n    y1 = (-c2*a1 - c1*a2) / (b1 - b2)\n    y2 = (-c1*a2 - c2*a1) / (b2 - b1)\n    return [x1,y1,x2,y2]\ndef is_rect_parallel(rectangle1, rectangle2):\n    '''\n    Write a function to determine whether two rectangles are parallel.\n    '''\n    if (rectangle1[0][0] - rectangle2[0][0]) == 0:\n        return True\n    if (rectangle1[0][1] - rectangle2[0][1]) == 0:\n        return True\n    return False\ndef perpendicular_line(p1, p2):\n    '''\n    Write a function to draw a perpendicular line.\n    '''\n    if p2[1] - p1[1] == 0:\n        return p1[0]\n    a = (p2[1] - p1[1]) / (p2[0] - p1[0])\n    b = (p1[1]*p2[0] - p2[1]*p1[0]) / (p2[0] - p1[0])\n    return (a * p1[0] + b)\ndef triangle_area(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s = (a + b + c) / 2\n    return (s*(s-a)*(s-b)*(s-c)) ** 0.5\ndef triangle_sides(a,b,c):\n    '''\n    Write a function to find the sum of all the sides of a triangle.\n    '''\n    return a + b + c\ndef circle_area(radius):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return 3.14 * radius ** 2\ndef r_square_cubic_root(r):\n    '''\n    Write a function to find the cubic root of r.\n    '''\n    r = 1/r\n    if r < 1:\n        return r**3\n    return 1/r**2\ndef r_square_sine(r):\n    '''\n    Write a function to find the square root of r.\n    '''\n    r = 1/r\n    if r < 1:\n        return r * r * r\n    return 1/r**2\ndef r_square_sqrt(r):\n    '''\n    Write a function to find the square root of r.\n    '''\n    return r**0.5\ndef r_square_cubic_root_iterative(r):\n    '''\n    Write a function to find the cubic root of r using iteration.\n    '''\n    r = 1/r\n    if r < 1:\n        return r**3\n    if r == 1:\n        return 1\n    x = 1\n    while abs(r - x) > 0.00001:\n        x = (x + r / x) / 2\n    return x\ndef r_square_cubic_root_binary(r):\n    '''\n    Write a function to find the cubic root of r using binary search.\n    '''\n    r = 1/r\n    if r < 1:\n        return r**3\n    if r == 1:\n        return 1\n    l, r = 1, r\n    while l < r:\n        mid = (l + r) / 2\n        if mid**3 < r:\n            l = mid\n        else:\n            r = mid\n    return l\ndef x_n_y_n(x, y, n):\n    '''\n    Write a function to find the sum of the x_n_y_n series of polynomials.\n    '''\n    if n == 0:\n        return x\n    if n == 1:\n        return y\n    return y * x_n_y_n(x, y, n - 1) - x * x_n_y_n(x, y, n - 2)\ndef cubic_roots_iterative(a,b,c):\n    '''\n    Write a function to find the cubic roots of a cubic polynomial using iteration.\n    '''\n    x = -b/(3*a)\n    if x > 0:\n        return x, x**2, x**3\n    if x == 0:\n        return x, x, x\n    x = -b/(3*a)\n    if x > 0:\n        return x, x**2, x**3\n    x = -b/(3*a)\n    if x > 0:\n        return x, x**2, x**3\n    x = -b/(3*a)\n    if x > 0:\n        return x, x**2, x**3\n    x = -b/(3*a)\n    if x > 0:\n        return x, x**2, x**3\ndef cubic_roots_binary(a,b,c):\n    '''\n    Write a function to find the cubic roots of a cubic polynomial using binary search.\n    '''\n    x = -b/(3*a)\n    if x > 0:\n        return x, x**2, x**3\n    x = -b/(3*a)\n    if x > 0:\n        return x, x**2, x**3\n    x = -b/(3*a)\n    if x > 0:\n        return x, x**2, x**3\n    x = -b/(3*a)\n    if x > 0:\n        return x, x**2, x**3\n    x = -b/(3*a)\n    if x > 0:\n        return x, x**2, x**3\n    x = -b/(3*a)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    angle = 2*math.pi*x/360\n    r = math.sqrt(math.pow(y,2) + math.pow(x,2))\n    x1 = r*math.cos(angle)\n    y1 = r*math.sin(angle)\n    return (x1,y1)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = abs(x)\n    theta = cmath.phase(x)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x\n    theta = y\n    if(r == 0):\n        theta = 0\n    \n    if(r > 0):\n        print(r * cmath.cos(theta),r * cmath.sin(theta))\n        return(r * cmath.cos(theta),r * cmath.sin(theta))\n    else:\n        print(-r * cmath.sin(theta),-r * cmath.cos(theta))\n        return(-r * cmath.sin(theta),-r * cmath.cos(theta))\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = abs(x)\n    theta = cmath.phase(x)\n    if r == 0:\n        return (0,theta)\n    else:\n        x_prime = r*cmath.exp(complex(0,theta))\n        y_prime = r*cmath.sin(theta)\n        return (x_prime, y_prime)\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    print(newList)\n    newList.pop()\n    newList.pop(0)\n    print(newList)\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Write your code here\n    x = newList[0]\n    newList.pop(0)\n    newList.pop(-1)\n    newList.append(x)\n    print(newList)\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) == 0:\n        return newList\n    elif len(newList) == 1:\n        return newList\n    else:\n        newList.append(newList.pop(0))\n        newList.append(newList.pop(len(newList)-1))\n        return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(newList)\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    # initialize a counter\n    count = 0\n    \n    # for the length of the list\n    for i in range(len(newList)):\n    \n        # if the element is not the last element\n        if i < (len(newList) - 1):\n        \n            # swapping\n            newList[i], newList[(i+1)] = newList[(i+1)], newList[i]\n        \n        # incrementing the counter\n        else:\n            continue\n    \n    # return the list\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if(len(newList) == 1):\n        return newList\n    if(len(newList) == 2):\n        if(newList[0] == newList[1]):\n            return newList\n        else:\n            return [newList[1]] + [newList[0]] + [newList[2]]\n    else:\n        swap_List(newList[1:len(newList) - 1])\n        return [newList[0]] + swap_List(newList[1:len(newList) - 1]) + [newList[-1]]\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1]=newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    x = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = x\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = a\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    return newList\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == k or n == 0:\n        return 1\n    elif k == 1:\n        return n\n    elif k == 2:\n        return n*(n-1)\n    elif k == 3:\n        return n*(n*(n-1))\n    else:\n        return n*(n-1)*(n-2)*(n-3)\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    n = n - k\n    C = 1\n    for i in range(n + 1):\n        C = C * (n + i - 1)\n    return C\ndef binomial_sum(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(n + 1):\n        sum = sum + (binomial_Coeff(n,i) * (k**i) * ((1 - k)**(n - i)))\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n <= 0 or k <= 0 or k > n: \n        raise ValueError(\"Invalid input\") \n    res = 1\n    for i in range(1,min(k,n-k)+1): \n        res = res * (n + 1 - i) // i \n    return res \n    \n    \ndef fibonacci_sum_squares_naive(n): \n    '''\n    Write a python function to find the sum of the squares of the first n Fibonacci numbers, where n is the input.\n    '''\n    # Naive\n    if n < 1: \n        return 0\n    if n <= 2: \n        return (1 + 1) * n \n    f1 = 1\n    f2 = 2\n    sum = 0\n    for i in range(3, n+1):\n        sum += f2 * f2\n        temp = f1\n        f1 = f2\n        f2 = temp + f2\n    return sum\n    \n    \ndef fibonacci_sum_squares_memoized(n, dp): \n    '''\n    Write a python function to find the sum of the squares of the first n Fibonacci numbers, where n is the input.\n    '''\n    # Memoized\n    if n < 1: \n        return 0\n    if n <= 2: \n        return (1 + 1) * n \n    if dp[n] > 0: \n        return dp[n]\n    else:\n        dp[n] = fibonacci_sum_squares_memoized(n - 1, dp) + fibonacci_sum_squares_memoized(n - 2, dp)\n        return dp[n]\n    \n    \ndef fibonacci_sum_squares_bottom_up(n): \n    '''\n    Write a python function to find the sum of the squares of the first n Fibonacci numbers, where n is the input.\n    '''\n    # Bottom Up\n    if n < 1: \n        return 0\n    a, b = 1, 2\n    sum = 0\n    for i in range(2, n+1):\n        sum = sum + (a + b) * (a + b)\n        temp = a \n        a = b \n        b = temp + b\n    return sum\n    \n    \ndef climbStairs(n): \n    '''\n    Write a python function to find the number of ways to climb a staircase having n steps.\n    '''\n    # Bottom Up\n    if n <= 2: \n        return n\n    a = 1\n    b = 2\n    for i in range(3, n+1):\n        c = a + b\n        a = b \n        b = c\n    return b\n    \n    \ndef climbStairs_memoized(n, dp): \n    '''\n    Write a python function to find the number of ways to climb a staircase having n steps.\n    '''\n    # Memoized\n    if n <= 2: \n        return n\n    if dp[n] > 0: \n        return dp[n]\n    else:\n        dp[n] = climbStairs_memoized(n - 1, dp) + climbStairs_memoized(n - 2, dp)\n        return dp[n]\n    \n    \ndef climbStairs_bottom_up(n): \n    '''\n    Write a python function to find the number of ways to climb a staircase having n steps.\n    '''\n    # Bottom Up\n    if n <= 2: \n        return n\n    a = 1\n    b = 2\n    for i in range(3, n+1):\n        c = a + b\n        a = b \n        b = c\n    return b\n    \n    \ndef fibonacci_huge(n, m): \n    '''\n    Write a python function to return the nth Fibonacci number modulo m.\n    '''\n    # Naive\n    if m == 0:\n        return 0\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n <= 2:\n        return 1\n    a = 0\n    b = 1\n    c = 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    else:\n        for i in range(5, n + 1):\n            c = a + b\n            a = b\n            b = c\n            if c > m:\n                return fibonacci_huge(n - 1, m)\n            if c < m:\n                fib = fibonacci_huge(n - 1, m)\n                return fib % m\n            if c == m:\n                return c\n    \n    \ndef fibonacci_huge_naive(n, m): \n    '''\n    Write a python function to return the nth Fibonacci number modulo m.\n    '''\n    # Naive\n    if m == 0:\n        return 0\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n <= 2:\n        return 1\n    a = 0\n    b = 1\n    c = 0\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 5\n    else:\n        for i in range(6, n + 1):\n            c = a + b\n            a = b\n            b = c\n            if c > m:\n                return fibonacci_huge_naive(n - 1, m)\n            if c < m:\n                fib = fibonacci_huge_naive(n - 1, m)\n                return fib % m\n            if c == m:\n                return c\n    \n    \ndef fibonacci_huge_bottom_up(n, m): \n    '''\n    Write a python function to return the nth Fibonacci number modulo m.\n    '''\n    # Bottom Up\n    if m == 0:\n        return 0\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n <= 2:\n        return 1\n    a = 0\n    b = 1\n    c = 0\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 5\n    else:\n        for i in range(6, n + 1):\n            c = a + b\n            a = b\n            b = c\n            if c > m:\n                return fibonacci_huge_bottom_up(n - 1, m)\n            if c < m:\n                fib = fibonacci_huge_bottom_up(n - 1, m)\n                return fib % m\n            if c == m:\n                return c\n    \n    \ndef fibonacci_sum_squares_naive(n): \n    '''\n    Write a python function to find the sum of the squares of the first n Fibonacci numbers, where n is the input.\n    '''\n    # Naive\n    if n <= 0: \n        return 0\n    if n <= 2: \n        return (1 + 1) * n \n    f1 = 1\n    f2 = 2\n    sum = 0\n    for i in range(3, n+1):\n        sum += f2 * f2\n        temp = f1\n        f1 = f2\n        f2 = temp + f2\n    return sum\n    \n    \ndef fibonacci_sum_squares_bottom_up(n): \n    '''\n    Write a python function to find the sum of the squares of the first n Fibonacci numbers, where n is the input.\n    '''\n    # Bottom Up\n    if n <= 0: \n        return 0\n    if n <= 2: \n        return (1 + 1) * n \n    a = 1\n    b = 2\n    for i in range(3, n+1):\n        c = a + b\n        a = b \n        b = c\n    return (c * (c + 1)) // 2\n    \n    \ndef fibonacci_sum_squares_fast(n): \n    '''\n    Write a python function to find the sum of the squares of the first n Fibonacci numbers, wher"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return (1.0/2) * ((2.0**k) * (1.0*(1.0-0.5)**(k-1)))\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    from math import factorial as f\n    if n==0 or k==0:\n        return 1\n    else:\n        return (f(n+k)/(f(k)*f(n-k)))\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n<k:\n        return 0\n    else:\n        binomial_coeff = 0\n        for i in range(n,k):\n            binomial_coeff+=factorial(n)/(factorial(i)*factorial(n-i))\n        return binomial_coeff\n    \n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    k = int(k)\n    if k>n or k<1:\n        return \"Incorrect Input\"\n    return ((n+k)/(k+1))*((n-k+1)/(k+1))\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n==k:\n        print(\"Your answer is: 1\")\n        exit()\n    if n==k+1:\n        print(\"Your answer is: 2\")\n        exit()\n    if n==k+2:\n        print(\"Your answer is: 6\")\n        exit()\n    if n==k+3:\n        print(\"Your answer is: 24\")\n        exit()\n    else:\n        n_n = (n-k)\n        n_k = (k-1)\n        print(n_n*(binomial_Coeff(n_n,n_k)+(n_k*(binomial_Coeff(n_n,n_k-1)))))\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    c = 1\n    product = 1\n    for i in range(1,n+1):\n        c = c*i\n    for j in range(1,k+1):\n        product = product*j\n    return product/c\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k>n:\n        return 0\n    else:\n        return (binomial_coeff(n-1,k) + k*binomial_coeff(n-1,k-1))\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('0+', '', ip)\ndef test_removezero_ip():\n    '''\n    You need to write the tests for this function.\n    '''\n    print(\"\\n#test_removezero_ip\")\n    testcases = {\n        ('127.0.0.1', '127.0.0.1'),\n        ('0.0.0.0', '0.0.0.0'),\n        ('0.0.0.0.0', '0.0.0.0'),\n        ('0.0.0.0.0.0', '0.0.0.0'),\n        ('0.0.0.0.0.0.0', '0.0.0.0'),\n        ('0.0.0.0.0.0.0.0', '0.0.0.0'),\n    }\n    for (ip, expected) in testcases:\n        result = removezero_ip(ip)\n        assert result == expected, '{}!= {}'.format(result, expected)\ndef removezero_mask(mask):\n    '''\n    Write a function to remove leading zeroes from an ip mask.\n    '''\n    return re.sub('0+', '', mask)\ndef test_removezero_mask():\n    '''\n    You need to write the tests for this function.\n    '''\n    print(\"\\n#test_removezero_mask\")\n    testcases = {\n        ('255.0.0.0', '255.0.0.0'),\n        ('0.0.0.0', '0.0.0.0'),\n        ('0.0.0.0.0', '0.0.0.0'),\n        ('0.0.0.0.0.0', '0.0.0.0'),\n        ('0.0.0.0.0.0.0', '0.0.0.0'),\n        ('0.0.0.0.0.0.0.0', '0.0.0.0'),\n    }\n    for (mask, expected) in testcases:\n        result = removezero_mask(mask)\n        assert result == expected, '{}!= {}'.format(result, expected)\ndef test_ip_address_mask_parse():\n    '''\n    You need to write the tests for this function.\n    '''\n    print(\"\\n#test_ip_address_mask_parse\")\n    testcases = {\n        ('127.0.0.1', (16, '127.0.0.0'), ('255.255.255.255', '127.0.0.0')),\n        ('0.0.0.0', (8, '0.0.0.0'), ('255.255.255.255', '0.0.0.0')),\n        ('0.0.0.0.0', (8, '0.0.0.0'), ('255.255.255.255', '0.0.0.0')),\n        ('0.0.0.0.0.0', (8, '0.0.0.0'), ('255.255.255.255', '0.0.0.0')),\n        ('0.0.0.0.0.0.0', (8, '0.0.0.0'), ('255.255.255.255', '0.0.0.0')),\n        ('0.0.0.0.0.0.0.0', (8, '0.0.0.0'), ('255.255.255.255', '0.0.0.0')),\n    }\n    for (ip, (octet_count, mask, expected_mask)) in testcases:\n        result = ip_address_mask_parse(ip)\n        assert result == (octet_count, mask), '{}!= {}'.format(result, expected_mask)\ndef ip_address_mask_parse(ip):\n    '''\n    Write a function to parse an ip address and mask.\n    '''\n    #return ip_octet_count, ip_mask\n    #return ip_octet_count, ip_mask_str\n    #return ip_octet_count, ip_mask\n    ip = ip.split('.')\n    octet_count = len(ip)\n    if (octet_count == 4):\n        octet_count = 8\n    return (octet_count, ip_mask_str_convert(octet_count, ip))\ndef ip_octet_count_valid(octet_count):\n    '''\n    You need to write the tests for this function.\n    '''\n    return octet_count in range(1,256)\ndef ip_octet_count_convert(octet_count, ip):\n    '''\n    Write a function that converts an ip octet count to an ip mask.\n    '''\n    return ip_octet_count_convert_dict[octet_count](ip)\ndef ip_octet_count_convert_dict(octet_count, ip):\n    '''\n    Write a function that converts an ip octet count to an ip mask.\n    '''\n    if ip_octet_count_valid(octet_count):\n        if (octet_count == 1):\n            return '0.0.0.0'\n        if (octet_count == 3):\n            return '0.0.0.0'\n        if (octet_count == 4):\n            return '0.0.0.0'\n        octet_count = octet_count - 4\n        octet_count_str = str(octet_count)\n        octet_count_str_reversed = octet_count_str[::-1]\n        octet_count_list = list(octet_count_str_reversed)\n        for i in range(0, len(octet_count_list)):\n            octet_count_list[i] = str(int(octet_count_list[i]) + 4)\n        octet_count_list = '.'.join(octet_count_list)\n        return octet_count_list\n    else:\n        return '0.0.0.0'\ndef ip_octet_count_convert_test():\n    '''\n    Write the tests for this function.\n    '''\n    testcases = {\n        1: '0.0.0.0',\n        2: '0.0.0.0',\n        3: '0.0.0.0',\n        4: '0.0.0.0',\n        5: '0.0.0.0',\n        6: '0.0.0.0',\n        7: '0.0.0.0',\n        8: '0.0.0.0',\n        9: '0.0.0.0',\n        10: '0.0.0.0',\n        11: '0.0.0.0',\n        12: '0.0.0.0',\n        13: '0.0.0.0',\n        14: '0.0.0.0',\n        15: '0.0.0.0',\n        16: '0.0.0.0',\n    }\n    for (octet_count, expected) in testcases.items():\n        result = ip_octet_count_convert(octet_count, '192.168.1.1')\n        assert result == expected, '{}!= {}'.format(result, expected)\ndef ip_address_str_valid(ip):\n    '''\n    You need to write the tests for this function.\n    '''\n    return ip_address_str_valid_ipv4(ip) or ip_address_str_valid_ipv6(ip)\ndef ip_address_str_valid_ipv4(ip):\n    '''\n    Write a function that checks whether the given ip address is a valid ipv4 address.\n    '''\n    ip = ip.split('.')\n    if (len(ip) == 4):\n        if ip_octet_count_valid(len(ip)):\n            for i in range(0, len(ip)):\n                if (len(ip[i]) == 0 or not str.isdigit(ip[i]) or int(ip[i]) > 255):\n                    return False\n            return True\n        else:\n            return False\n    else:\n        return False\ndef i"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = ip.split('.')\n    new_ip = []\n    for ele in ip_list:\n        if ele == '0':\n            continue\n        else:\n            new_ip.append(ele)\n    return '.'.join(new_ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    i=0\n    while i<len(ip) and ip[i]=='0':\n        i+=1\n    return ip[i:]\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if len(ip)<4:\n        return ip\n    if len(ip)>4 and ip[0]=='0' and ip[1]=='0' and ip[2]=='0' and ip[3]=='0':\n        return '0'\n    return ip[0] + '.' + ip[1] + '.' + ip[2] + '.' + ip[3]\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if len(ip) == 0:\n        return None\n    if len(ip) == 1:\n        return str(ip)\n    else:\n        return re.sub(\"0+\", \"\", str(ip))\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    new_ip=ip.split('.')\n    new_ip[3]=int(new_ip[3])\n    if new_ip[3]==0:\n        new_ip[3]=255\n    new_ip='.'.join(new_ip)\n    return new_ip\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if \".\" in ip:\n        ip = ip.split(\".\")\n        for i in range(len(ip)):\n            if ip[i] == \"0\":\n                ip[i] = \"\"\n    else:\n        return ip\n    return \".\".join(ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip=re.sub(r'\\.\\d+', '', ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    temp = ip.split('.')\n    for i in range(4):\n        temp[i] = str(int(temp[i]) - 1)\n        if int(temp[i]) < 0:\n            return '0' + temp[i] + \".\" + temp[i+1] + \".\" + temp[i+2] + \".\" + temp[i+3]\n    return temp[0] + \".\" + temp[1] + \".\" + temp[2] + \".\" + temp[3]\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if not isinstance(ip,list):\n        raise Exception(\"Expected ip to be a list\")\n    elif len(ip)!=4:\n        raise Exception(\"Expected ip to be a list of 4 numbers\")\n    elif not all(isinstance(i,int) and 0<=i<=255 for i in ip):\n        raise Exception(\"Expected ip to be a list of 4 numbers\")\n    else:\n        return map(int,ip)\n    \ndef all_diff_ip(ip):\n    '''\n    Write a function to check if all numbers in an ip address are different.\n    '''\n    if not isinstance(ip,list):\n        raise Exception(\"Expected ip to be a list\")\n    elif len(ip)!=4:\n        raise Exception(\"Expected ip to be a list of 4 numbers\")\n    elif not all(isinstance(i,int) and 0<=i<=255 for i in ip):\n        raise Exception(\"Expected ip to be a list of 4 numbers\")\n    else:\n        ip_copy=list(ip)\n        ip_copy.sort()\n        for i in range(0,3):\n            if ip_copy[i]==ip_copy[i+1]:\n                return False\n        else:\n            return True\ndef find_factors(number):\n    '''\n    Write a function that returns all factors of a given number.\n    '''\n    if not isinstance(number,int):\n        raise Exception(\"Expected number to be an integer\")\n    elif number<=0:\n        raise Exception(\"Expected number to be an integer greater than 0\")\n    else:\n        factors=[1]\n        for i in range(2,number+1):\n            if number%i==0:\n                factors.append(i)\n        return factors\ndef find_longest_consecutive_sequence(numbers):\n    '''\n    Write a function that returns the length of the longest consecutive sequence.\n    '''\n    if not isinstance(numbers,list):\n        raise Exception(\"Expected numbers to be a list\")\n    elif len(numbers)==0:\n        raise Exception(\"Expected numbers to be a non-empty list\")\n    elif not all(isinstance(i,int) and 0<=i<=2**32 for i in numbers):\n        raise Exception(\"Expected numbers to be a list of 32 bit integers\")\n    else:\n        longest_seq=1\n        for i in range(0,len(numbers)-1):\n            if numbers[i+1]-numbers[i]==1:\n                longest_seq=max(longest_seq,2)\n            else:\n                longest_seq=max(longest_seq,1)\n        return longest_seq\ndef generate_next_prime(n):\n    '''\n    Write a function that finds the next prime after the given number.\n    '''\n    if not isinstance(n,int):\n        raise Exception(\"Expected number to be an integer\")\n    elif n<=0:\n        raise Exception(\"Expected number to be an integer greater than 0\")\n    elif n<2:\n        raise Exception(\"Expected number to be greater than 1\")\n    else:\n        from math import sqrt\n        import time\n        start_time=time.time()\n        while True:\n            # Check if it is prime\n            if n%2==0:\n                n=n+1\n            else:\n                for i in range(3,int(sqrt(n))+1,2):\n                    if n%i==0:\n                        n=n+1\n                        break\n                else:\n                    return n\n                \n        end_time=time.time()\n        print(\"Time taken to find next prime {}\".format(end_time-start_time))\n        return n\ndef sort_list_of_dict(dict_list):\n    '''\n    Write a function that sorts the list of dictionaries according to their value.\n    '''\n    if not isinstance(dict_list,list):\n        raise Exception(\"Expected dict_list to be a list\")\n    elif len(dict_list)==0:\n        raise Exception(\"Expected dict_list to be a non-empty list\")\n    else:\n        new_list=sorted(dict_list,key=lambda k:k[\"value\"])\n        return new_list\ndef sort_list_of_tuple(tuple_list):\n    '''\n    Write a function that sorts the list of tuples according to the number of occurence.\n    '''\n    if not isinstance(tuple_list,list):\n        raise Exception(\"Expected dict_list to be a list\")\n    elif len(tuple_list)==0:\n        raise Exception(\"Expected dict_list to be a non-empty list\")\n    else:\n        new_list=sorted(tuple_list,key=lambda k:k[0])\n        return new_list\ndef get_unique_numbers(number):\n    '''\n    Write a function that finds the unique numbers in the list.\n    '''\n    if not isinstance(number,int):\n        raise Exception(\"Expected number to be an integer\")\n    elif number<=0:\n        raise Exception(\"Expected number to be an integer greater than 0\")\n    else:\n        unique_numbers=[]\n        for i in range(0,number):\n            if i not in unique_numbers:\n                unique_numbers.append(i)\n        return unique_numbers\ndef get_all_factors(number):\n    '''\n    Write a function that finds all factors of the number.\n    '''\n    if not isinstance(number,int):\n        raise Exception(\"Expected number to be an integer\")\n    elif number<=0:\n        raise Exception(\"Expected number to be an integer greater than 0\")\n    else:\n        factor_list=[number]\n        for i in range(2,number+1):\n            if number%i==0:\n                factor_list.append(i)\n        return factor_list\ndef list_to_dictionary(keys,values):\n    '''\n    Write a function to convert a list of (key,value) tuples to a dictionary.\n    '''\n    dic={}\n    if not isinstance(keys,list):\n        raise Exception(\"Expected keys to be a list\")\n    elif not isinstance(values,list):\n        raise Exception(\"Expected values to be a list\")\n    elif len(keys)!=len(values):\n        raise Exception(\"Expected the number of keys to be equal to the number of values\")\n    elif any(not isinstance(i,tuple) for i in keys) or any(not isinstance(i,int) for i in values):\n        raise Exception(\"Expected keys to be a list of tuples\")\n    elif any(i<0 for i in values):\n        raise Exception(\"Expected all the values to be positive\")\n    else:\n        for i in range(0,len(keys)):\n            dic[keys[i]]=values[i]\n        return dic\ndef reverse_dictionary(dic):\n    '''\n    Write a function to reverse a dictionary.\n    '''\n    if not isinstance(dic,dict):\n        raise Exception(\"Expected dictionary to be a dictionary\")\n    else:\n        reversed_dic={}\n        for i in dic:\n            reversed_dic[dic[i]]=i\n        return reversed_dic\ndef reverse_dict(dic):\n    '''\n    Write a function to reverse a dictionary.\n    '''\n    if not isinstance(dic,dict):\n        raise Exception(\"Expected dictionary to be a dictionary\")\n    else:\n        reversed_dic={}\n        for i in dic:\n            reversed_dic[i]=dic[i]\n        return reversed_dic\ndef flip_dict(dic):\n    '''\n    Write a function to reverse a dictionary.\n    '''\n    if not isinstance(dic,dict):\n        raise Exception(\"Expected dictionary to be a dictionary\")\n    else:\n        flipped_dict={}\n        for i in dic:\n            flipped_dict[dic[i]]=i\n        return flipped_dict\ndef max_list_sum(list_of_numbers):\n    '''\n    Write a function to find the maximum of a list.\n    '''\n    if not isinstance(lis"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in range(len(list1)):\n        if i%2 == 0:\n            even += list1[i]\n        else:\n            odd += list1[i]\n    return abs(even-odd)\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    return list1[0] - list1[1]\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_number = []\n    odd_number = []\n    for i in list1:\n        if i % 2 == 0:\n            even_number.append(i)\n        else:\n            odd_number.append(i)\n    return abs(even_number[0] - odd_number[0])\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = []\n    odd_num = []\n    for num in list1:\n        if num % 2 == 0:\n            even_num.append(num)\n        else:\n            odd_num.append(num)\n    return(odd_num[0] - even_num[0])\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for i in range(len(list1)):\n        if i%2 == 0:\n            even_list.append(list1[i])\n        else:\n            odd_list.append(list1[i])\n    return (even_list[0] - odd_list[0])\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_numbers=list1[0::2]\n    odd_numbers=list1[1::2]\n    print(f\"Difference between even numbers is {sum(even_numbers)-sum(odd_numbers)}\")\n    \n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd_index = 0\n    even_index = 1\n    odd_list = []\n    even_list = []\n    while list1:\n        if list1[odd_index]%2!=0:\n            odd_list.append(list1[odd_index])\n        else:\n            odd_list.append(list1[even_index])\n        even_list.append(list1[even_index])\n        odd_index +=2\n        even_index +=2\n        list1.pop(0)\n    return odd_list, even_list\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_number = 0\n    odd_number = 0\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            even_number = list1[i]\n        else:\n            odd_number = list1[i]\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            even += list1[i]\n        else:\n            odd += list1[i]\n    return even - odd\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    \n    if len(list1) == 0:\n        return False\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # return len(str1)-len(str1.replace('0',' ')) + len(str2)-len(str2.replace('1',' '))\n    # return min(len(str1), len(str2)) - (str1.replace('0',' ').count('0') + str2.replace('1',' ').count('1'))\n    # return min(len(str1), len(str2)) - (str1.count('0') + str2.count('1'))\n    return min(len(str1), len(str2)) - (str1.replace('0','').count(' ') + str2.replace('1','').count(' '))\n    "
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    #str1 = input(\"enter str1:\")\n    #str2 = input(\"enter str2:\")\n    if str1 == str2 :\n        print(\"same\")\n        return 0\n    \n    str1 = str1[::-1]\n    str2 = str2[::-1]\n    print(str1)\n    print(str2)\n    count = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            count += 1\n            ind = i\n            print(ind)\n            ind1 = str1.find('0',ind)\n            ind2 = str2.find('0',ind)\n            print(ind1)\n            print(ind2)\n            #str1.replace(str2[ind],str1[ind])\n            str1 = str1[:ind1] + str1[ind1+1:]\n            str1 = str1[:ind2] + str1[ind2+1:]\n            str2 = str2[:ind1] + str2[ind1+1:]\n            str2 = str2[:ind2] + str2[ind2+1:]\n            print(str1)\n            print(str2)\n    if str1 == str2 :\n        return count\n    else :\n        return -1\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1) == len(str2) :\n        count = 0\n        for i in range(len(str1)):\n            if str1[i]!= str2[i] :\n                count = count + 1\n        return count\n    else : \n        return -1\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if(len(str1)==len(str2)) :\n        return(0)\n    swaps=0\n    if(len(str1)>len(str2)) :\n        str2=str2+'0'\n    for i in range(0,len(str1)) :\n        if(str1[i]!=str2[i]) :\n            swaps=swaps+1\n    return(swaps)\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    def swap(x,i):\n        y=x[i]\n        x=x[:i]+x[i+1:]\n        x=x+y\n        return x\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count=0\n    n=len(str1)\n    if str1==str2:\n        return 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            str1=str1[:i]+str1[i+1:]\n            str2=str2[:i]+str2[i+1:]\n            count+=1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Make a copy of string s\n    s = list(str1) \n    # print(s)\n    # initialize min_swap count to 0\n    min_swaps = 0\n    \n    # Traverse through all characters of string s \n    for i in range(len(s)) :\n        if s[i]!= str2[i] :\n            # swap found, so decrease min_swaps \n            min_swaps += 1\n            t = s.index(str2[i]) \n            s[t], s[i] = s[i], s[t] \n    \n    return min_swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    '''\n    #sample \n    >>> min_Swaps(\"0001100\", \"011101\")\n    2\n    >>> min_Swaps(\"011101\",\"0001100\")\n    2\n    >>> min_Swaps(\"110111\",\"101111\")\n    1\n    >>> min_Swaps(\"110111\",\"101111\")\n    1\n    '''\n    count = 0\n    # using a list to track count\n    # make str1 as a list\n    str1_list = list(str1)\n    # make str2 as a list\n    str2_list = list(str2)\n    while(len(str1_list)!=len(str2_list)):\n        #swap occurence\n        str2_list.append(str2_list[0])\n        str2_list.remove(str2_list[0])\n        #update count \n        count += 1\n    # count\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # Transform str1 and str2 into list of digits\n    str1_list = list(str1)\n    str2_list = list(str2)\n    \n    # Initiate counter variable\n    swaps = 0\n    \n    # Iterate through each character in str1_list and str2_list\n    for i in range(len(str1_list)):\n        for j in range(len(str2_list)):\n            if str1_list[i] == str2_list[j]:\n                swaps += 1\n                str1_list[i], str2_list[j] = str2_list[j], str1_list[i]\n    \n    return swaps\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    bytes_size = 8*len(tuple_list)\n    return bytes_size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Iterate over each item in the list and calculate it's size\n    result = 0\n    for item in tuple_list:\n        result = result + sys.getsizeof(item)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list)*sys.getsizeof(tuple_list)\ndef get_values_as_list(string_list):\n    '''\n    Write a function to convert a list of strings to a list of integers.\n    '''\n    return map(int, string_list)\ndef get_values_as_string(string_list):\n    '''\n    Write a function to convert a list of integers to a list of strings.\n    '''\n    return map(str, string_list)\ndef get_count_of_dict(string_list):\n    '''\n    Write a function to count the number of times each item appears in a list of strings.\n    '''\n    return dict(collections.Counter(string_list))\ndef get_count_of_tuple(string_list):\n    '''\n    Write a function to count the number of times each item appears in a list of strings.\n    '''\n    return dict(collections.Counter(string_list))\ndef get_count_of_set(string_list):\n    '''\n    Write a function to count the number of times each item appears in a list of strings.\n    '''\n    return dict(collections.Counter(string_list))\ndef get_count_of_list(string_list):\n    '''\n    Write a function to count the number of times each item appears in a list of strings.\n    '''\n    return dict(collections.Counter(string_list))\ndef get_count_of_dict_with_nested_keys(string_list):\n    '''\n    Write a function to count the number of times each item appears in a list of strings.\n    '''\n    return dict(collections.Counter(string_list))\ndef get_count_of_tuple_with_nested_keys(string_list):\n    '''\n    Write a function to count the number of times each item appears in a list of strings.\n    '''\n    return dict(collections.Counter(string_list))\ndef get_count_of_set_with_nested_keys(string_list):\n    '''\n    Write a function to count the number of times each item appears in a list of strings.\n    '''\n    return dict(collections.Counter(string_list))\ndef get_count_of_list_with_nested_keys(string_list):\n    '''\n    Write a function to count the number of times each item appears in a list of strings.\n    '''\n    return dict(collections.Counter(string_list))\ndef get_count_of_dict_with_empty_values(string_list):\n    '''\n    Write a function to count the number of times each item appears in a list of strings.\n    '''\n    return dict(collections.Counter(string_list))\ndef get_count_of_tuple_with_empty_values(string_list):\n    '''\n    Write a function to count the number of times each item appears in a list of strings.\n    '''\n    return dict(collections.Counter(string_list))\ndef get_count_of_set_with_empty_values(string_list):\n    '''\n    Write a function to count the number of times each item appears in a list of strings.\n    '''\n    return dict(collections.Counter(string_list))\ndef get_count_of_list_with_empty_values(string_list):\n    '''\n    Write a function to count the number of times each item appears in a list of strings.\n    '''\n    return dict(collections.Counter(string_list))\ndef get_count_of_dict_with_null_values(string_list):\n    '''\n    Write a function to count the number of times each item appears in a list of strings.\n    '''\n    return dict(collections.Counter(string_list))\ndef get_count_of_tuple_with_null_values(string_list):\n    '''\n    Write a function to count the number of times each item appears in a list of strings.\n    '''\n    return dict(collections.Counter(string_list))\ndef get_count_of_set_with_null_values(string_list):\n    '''\n    Write a function to count the number of times each item appears in a list of strings.\n    '''\n    return dict(collections.Counter(string_list))\ndef get_count_of_list_with_null_values(string_list):\n    '''\n    Write a function to count the number of times each item appears in a list of strings.\n    '''\n    return dict(collections.Counter(string_list))\ndef get_count_of_dict_with_string_values(string_list):\n    '''\n    Write a function to count the number of times each item appears in a list of strings.\n    '''\n    return dict(collections.Counter(string_list))\ndef get_count_of_tuple_with_string_values(string_list):\n    '''\n    Write a function to count the number of times each item appears in a list of strings.\n    '''\n    return dict(collections.Counter(string_list))\ndef get_count_of_set_with_string_values(string_list):\n    '''\n    Write a function to count the number of times each item appears in a list of strings.\n    '''\n    return dict(collections.Counter(string_list))\ndef get_count_of_list_with_string_values(string_list):\n    '''\n    Write a function to count the number of times each item appears in a list of strings.\n    '''\n    return dict(collections.Counter(string_list))\ndef get_count_of_dict_with_missing_values(string_list):\n    '''\n    Write a function to count the number of times each item appears in a list of strings.\n    '''\n    return dict(collections.Counter(string_list))\ndef get_count_of_tuple_with_missing_values(string_list):\n    '''\n    Write a function to count the number of times each item appears in a list of strings.\n    '''\n    return dict(collections.Counter(string_list))\ndef get_count_of_set_with_missing_values(string_list):\n    '''\n    Write a function to count the number of times each item appears in a list of strings.\n    '''\n    return dict(collections.Counter(string_list))\ndef get_count_of_list_with_missing_values(string_list):\n    '''\n    Write a function to count the number of times each item appears in a list of strings.\n    '''\n    return dict(collections.Counter(string_list))\ndef get_count_of_dict_with_float_values(string_list):\n    '''\n    Write a function to count the number of times each item appears in a list of strings.\n    '''\n    return dict(collections.Counter(string_list))\ndef get_count_of_tuple_with_float_values(string_list):\n    '''\n    Write a function to count the number of times each item appears in a list of strings.\n    '''\n    return dict(collections.Counter(string_list))\ndef get_count_of_set_with_float_values(string_list):\n    '''\n    Write a function to count the number of times each item appears in a list of strings.\n    '''\n    return dict(collections.Counter(string_list))\ndef get_count_of_list_with_float_values(string_list):\n    '''\n    Write a function to count the number of times each item appears in a list of strings.\n    '''\n    return dict(collections.Counter(string_list))\ndef get_count_of_dict_with_string_and_float_values(string_list):\n    '''\n    Write a function to count the number of times each item appears in a list of strings.\n    '''\n    return dict(collections.Counter(string_list))\ndef get_count_of_tuple_with_string_and_float_values(string_list):\n    '''\n    Write a function to count the number of times each item appears in a list of strings.\n    '''\n    return dict(collections.Counter(string_list))\ndef get_count_of_set_with_string_and_float_values(string_list):\n    '''\n    Write a functio"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Replace pass with your solution\n    pass \n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    for t in tuple_list:\n        if type(t) == int:\n            continue\n        elif type(t) == float:\n            continue\n        else:\n            return 1\n    return 0\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for t in tuple_list:\n        size += sys.getsizeof(t)\n    return size\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # The kth element is in between both of the sorted arrays.\n    # So find the element in the first sorted array.\n    start_idx = find_kth_number(arr1, arr2, k, 0, len(arr1)-1)\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    if not arr1 or not arr2:\n        return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    return find_kth_recur(arr1, arr2, len(arr1), len(arr2), k)\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if (k > len(arr1) + len(arr2)):\n        return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr = []\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            arr.append(arr1[i])\n            i += 1\n        else:\n            arr.append(arr2[j])\n            j += 1\n    while i < len(arr1):\n        arr.append(arr1[i])\n        i += 1\n    while j < len(arr2):\n        arr.append(arr2[j])\n        j += 1\n    return arr[k-1]\n    \n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # To get the number of elements in arr1 and arr2, use len() function.\n    n = len(arr1)\n    m = len(arr2)\n    # if k is larger than the size of the final result, return None.\n    if k > n + m or k < 1:\n        return None\n    # if k is smaller than or equal to n, find the k-th element in arr1 and arr2.\n    if k <= n:\n        # arr1 is always the smaller array.\n        return find_kth_array(arr1, arr2, n, 0, m, k)\n    else:\n        # arr2 is always the smaller array.\n        return find_kth_array(arr2, arr1, m, 0, n, k)\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def binary_search(arr1, arr2, k):\n        lo, hi = 0, len(arr1)-1\n        while lo <= hi:\n            mid = lo + (hi - lo)//2\n            if arr1[mid] == k:\n                return arr2[mid]\n            elif arr1[mid] < k:\n                lo = mid + 1\n            else:\n                hi = mid - 1\n        return None\n    \n    def binary_search_left(arr1, arr2, k):\n        lo, hi = 0, len(arr1)-1\n        while lo <= hi:\n            mid = lo + (hi - lo)//2\n            if arr1[mid] == k:\n                return arr2[mid]\n            elif arr1[mid] < k:\n                lo = mid + 1\n            else:\n                hi = mid - 1\n        return None\n    \n    def binary_search_right(arr1, arr2, k):\n        lo, hi = 0, len(arr1)-1\n        while lo <= hi:\n            mid = lo + (hi - lo)//2\n            if arr1[mid] == k:\n                return arr2[mid]\n            elif arr1[mid] > k:\n                hi = mid - 1\n            else:\n                lo = mid + 1\n        return None\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = k - 1\n    n1 = len(arr1)\n    n2 = len(arr2)\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j -= 1\n    return arr1[i] if i < n1 else arr2[j]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    low = 0\n    high = len(arr1) - 1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1 == None or arr2 == None:\n        return\n    index1 = 0\n    index2 = 0\n    s1 = len(arr1)\n    s2 = len(arr2)\n    while index1 < s1 and index2 < s2:\n        if arr1[index1] < arr2[index2]:\n            index1 += 1\n        elif arr1[index1] > arr2[index2]:\n            index2 += 1\n        else:\n            return arr1[index1]\n    return -1\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    result = 0\n    while number!= 0:\n        result += number % 10\n        number //= 10\n    return result == number\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    n = number\n    while n!= 0:\n        rem = n%10\n        sum += rem**3\n        n = n//10\n    if sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum = sum + digit ** 3\n        temp //= 10\n    if number == sum:\n        print(f\"{number} is an Armstrong Number.\")\n    else:\n        print(f\"{number} is not an Armstrong Number.\")\n        \n        \ndef reverse_string(string):\n    '''\n    Write a function to reverse the string.\n    '''\n    new_string = \"\"\n    for i in range(len(string)-1, -1, -1):\n        new_string += string[i]\n    return new_string\n    \ndef replace_spaces(string):\n    '''\n    Write a function to replace all spaces in a string with %20\n    '''\n    new_string = \"\"\n    for i in range(len(string)):\n        if string[i] == \" \":\n            new_string += \"%20\"\n        else:\n            new_string += string[i]\n    return new_string\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number = str(number)\n    for i in range(len(number)):\n        x = pow(int(number[i]),len(number))\n        if x == int(number):\n            print(\"yes\")\n        else:\n            print(\"no\")\n        break\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp = temp // 10\n    return number == sum\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    #code here\n    \n    if number >= 10:\n        str_number = str(number)\n        sum_ = 0\n        for i in str_number:\n            sum_ += int(i)**3\n        return sum_ == number\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    result = 0\n    temp = number\n    while temp:\n        result += (temp % 10) ** 3\n        temp //= 10\n    return result == number\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    while temp!= 0:\n        digit = temp % 10\n        sum = sum + digit ** 3\n        temp //= 10\n    if number == sum:\n        print(\"Yes,\",number,\"is an Armstrong number\")\n    else:\n        print(\"No,\",number,\"is not an Armstrong number\")\n        \narmstrong_number(153)\narmstrong_number(12345)\narmstrong_number(2)\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    string = str(number)\n    sum = 0\n    for i in range(len(string)):\n        sum += int(string[i])**len(string)\n    if sum == number:\n        return True\n    else:\n        return False\nprint(armstrong_number(153))\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    while number > 0:\n        sum = sum + (number % 10) ** 3\n        number = number // 10\n    return sum == number\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    #Check if the number of natural numbers is not 0\n    if number!= 0:\n        #Sum of first n natural numbers\n        s = 0\n        #Number of natural numbers\n        c = 1\n        while c <= number:\n            s = s + c\n            c = c + 1\n        #Average of first n natural numbers\n        a = s / number\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    n = number\n    sum_n = 0\n    average = 0\n    for i in range(1,n+1):\n        sum_n += i\n    average = sum_n / n\n    print(\"Sum of first\",n,\"numbers is :\",sum_n)\n    print(\"Average of first\",n,\"numbers is :\",average)\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # No need to understand this function.\n    n = int(input())\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + i\n    avg = sum / n\n    print('sum = %d' % sum)\n    print('avg = %.1f' % avg)\n    print('%d' % sum)\n    print('%.1f' % avg)\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum/number\n    return (sum, average)\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_ = 0\n    average = 0\n    for i in range(1, number + 1):\n        sum_ += i\n    print(sum_)\n    print(sum_/number)\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1,number+1):\n        sum += i\n    average = sum/number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    n = int(input(\"Enter number of elements\"))\n    \n    sum_of_n = 0\n    average_of_n = 0\n    if n > 0:\n        for i in range(0, n):\n            sum_of_n = sum_of_n + i\n        average_of_n = sum_of_n / n\n        print(\"Sum of first n natural numbers is : \", sum_of_n)\n        print(\"Average of first n natural numbers is : \", average_of_n)\n    else:\n        print(\"Please enter positive integer\")\n        return\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    assert number > 0, \"number should be more than 0\"\n    sum = 0\n    count = 1\n    while count <= number:\n        sum = sum + count\n        count = count + 1\n    average = sum / number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    n = number\n    sum = 0\n    for i in range(n+1):\n        sum += i\n    average = sum / n\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum/number\n    return sum, average\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        print('%d is Even' % n)\n    else: \n        print('%d is Odd' % n)\n        \n    \n    \nis_Even(10)\nis_Even(3)\nis_Even(15)\nis_Even(2)\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return (n % 2 == 0)\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return (n % 2 == 0)\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2 == 0\n    \ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    return n%2!= 0\n    \ndef is_Multiple(n, m):\n    '''\n    Write a python function to check whether the given number is a multiple of the given number.\n    '''\n    return n%m == 0\n    \ndef is_Prime(n) :\n    '''\n    Write a python function to check whether the given number is a prime number.\n    '''\n    if n <= 1 :\n        return False\n    for i in range(2, n):\n        if n%i == 0:\n            return False\n    return True\n    \ndef is_Palindrome(n) : \n    '''\n    Write a python function to check whether the given number is a palindrome or not.\n    '''\n    if str(n) == str(n)[::-1]:\n        return True\n    return False\n    \ndef is_Reverse(n) : \n    '''\n    Write a python function to check whether the given number is a reverse number or not.\n    '''\n    if str(n) == str(n)[::-1]:\n        return True\n    return False\n    \ndef is_Permutation(n1, n2) :\n    '''\n    Write a python function to check whether the given number is a permutation of the given number.\n    '''\n    if n1 == sorted(n1) and n2 == sorted(n2):\n        return True\n    return False\n    \ndef is_Isosceles(n1, n2) :\n    '''\n    Write a python function to check whether the given number is an isosceles triangle or not.\n    '''\n    if sorted(n1) == sorted(n2):\n        return True\n    return False\n    \ndef is_Equilateral(n1, n2) :\n    '''\n    Write a python function to check whether the given number is an equilateral triangle or not.\n    '''\n    if sorted(n1) == sorted(n2):\n        return True\n    return False\n    \ndef is_Scalene(n1, n2, n3) :\n    '''\n    Write a python function to check whether the given number is a scalene triangle or not.\n    '''\n    if sorted(n1)!= sorted(n2) and sorted(n1)!= sorted(n3) and sorted(n2)!= sorted(n3) :\n        return True\n    return False\n    \ndef is_Isoceles(n1, n2, n3) :\n    '''\n    Write a python function to check whether the given number is an isosceles triangle or not.\n    '''\n    if sorted(n1) == sorted(n2) and sorted(n1)!= sorted(n3) and sorted(n2)!= sorted(n3) :\n        return True\n    return False\n    \ndef is_Right(n1, n2, n3) :\n    '''\n    Write a python function to check whether the given number is a right triangle or not.\n    '''\n    if sorted(n1) == sorted(n2) and sorted(n1)!= sorted(n3) and sorted(n2)!= sorted(n3) :\n        return True\n    return False\n    \ndef is_Right_Angle(n1, n2, n3) :\n    '''\n    Write a python function to check whether the given number is a right angle triangle or not.\n    '''\n    if sorted(n1) == sorted(n2) and sorted(n1)!= sorted(n3) and sorted(n2)!= sorted(n3):\n        return True\n    return False\n    \ndef is_Pentagonal(n1, n2) :\n    '''\n    Write a python function to check whether the given number is a pentagonal triangle or not.\n    '''\n    if sorted(n1) == sorted(n2) and sorted(n1)!= sorted(n2):\n        return True\n    return False\n    \ndef is_Hexagonal(n1, n2) :\n    '''\n    Write a python function to check whether the given number is a hexagonal triangle or not.\n    '''\n    if sorted(n1) == sorted(n2) and sorted(n1)!= sorted(n2):\n        return True\n    return False\n    \ndef is_Right_Triangle(n1, n2, n3) :\n    '''\n    Write a python function to check whether the given number is a right triangle or not.\n    '''\n    if sorted(n1) == sorted(n2) and sorted(n1) == sorted(n3):\n        return True\n    return False\n    \ndef is_Right_Right_Angle(n1, n2, n3) :\n    '''\n    Write a python function to check whether the given number is a right right angle triangle or not.\n    '''\n    if sorted(n1) == sorted(n2) and sorted(n1) == sorted(n3) and sorted(n2) == sorted(n3):\n        return True\n    return False\n    \ndef is_Isosceles_Triangle(n1, n2, n3) :\n    '''\n    Write a python function to check whether the given number is an isosceles triangle or not.\n    '''\n    if sorted(n1) == sorted(n2) and sorted(n1)!= sorted(n3) and sorted(n2)!= sorted(n3):\n        return True\n    return False\n    \ndef is_Scalene_Triangle(n1, n2, n3) :\n    '''\n    Write a python function to check whether the given number is a scalene triangle or not.\n    '''\n    if sorted(n1)!= sorted(n2) and sorted(n1)!= sorted(n3) and sorted(n2)!= sorted(n3):\n        return True\n    return False\n    \ndef is_Isoceles_Triangle(n1, n2, n3) :\n    '''\n    Write a python function to check whether the given number is an isosceles triangle or not.\n    '''\n    if sorted(n1) == sorted(n2) and sorted(n1)!= sorted(n3) and sorted(n2)!= sorted(n3):\n        return True\n    return False\n    \ndef is_Equilateral_Triangle(n1, n2, n3) :\n    '''\n    Write a python function to check whether the given number is an equilateral triangle or not.\n    '''\n    if sorted(n1) == sorted(n2) and sorted(n1) == sorted(n3):\n        return True\n    return False\n    \ndef is_Right_Triangle(n1, n2, n3) :\n    '''\n    Write a python function to check whether the given number is a right triangle or not.\n    '''\n    if sorted(n1) == sorted(n2) and sorted(n1) == sorted(n3) and sorted(n2)!= sorted(n3):\n        return True\n    return False\n    \ndef is_Right_Right_Angle(n1, n2, n3) :\n    '''\n    Write a python function to check whether the given number is a right right angle triangle or not.\n    '''\n    if sorted(n1) == sorted(n2) and sorted(n1) == sorted(n3) and sorted(n2) == sorted(n3):\n        return True\n    return False\n    \ndef is_Isosceles_Right_Angle(n1, n2, n3) :\n    '''\n    Write a python function to check whether the given number is an isosceles right angle triangle or not.\n    '''\n    if sorted(n1) == sorted(n2) and sorted(n1) == sorted(n3) and sorted(n2)!= sorted(n3):\n        return True\n    return False\n    \ndef is_Scalene_Right_Angle(n1, n2, n3) :\n    '''\n    Write a python function to check whether the given number is a scalene right angle triangle or not.\n    '''\n    if sorted(n1)!= sorted(n2) and sorted(n1)!= sorted(n3) and sorted(n2)!= sorted(n3):\n        return True\n    return Fals"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return True if n % 2 == 0 else False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True \n    else : \n        return False \n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False\ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    if n%2!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if len(str1) == 0:\n        print(\"Invalid Input\")\n        return \n    count = 0\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            count += 1\n            print(str1[i])\n            break\n    if count == 0:\n        print(\"No Repeated Character\")\n    else:\n        print(\"Repeat Character: \", count)\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    char_set = set()\n    for char in str1:\n        if char not in char_set:\n            char_set.add(char)\n        else:\n            return char\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i)>1:\n            return i\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    result = {}\n    for letter in str1:\n        if letter not in result:\n            result[letter] = 1\n        else:\n            result[letter] += 1\n    for key, value in result.items():\n        if value > 1:\n            return key\n    return \"None\"\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    d={}\n    for i in str1:\n        d[i]=d.get(i,0)+1\n    for k,v in d.items():\n        if v>1:\n            return k\n    return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    for i in str1:\n        if str1.count(i)>1:\n            return i\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    s = str1.strip()\n    res = []\n    if len(s) == 0:\n        return None\n    for i in range(len(s)):\n        if s[i] in s[i+1:]:\n            res.append(s[i])\n    if len(res) == 0:\n        return None\n    return res[0]\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    def is_repeated_char(str1, k):\n        if len(str1)==0:\n            return -1\n        for i in range(len(str1)):\n            if str1[i]==str1[k]:\n                return i\n        return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    count = 0\n    char = \"\"\n    if len(str1) == 0:\n        print('string is empty')\n    else:\n        for i in str1:\n            if str1.count(i) == 1:\n                count += 1\n                char = i\n    if count == 0:\n        print('string is empty')\n    else:\n        print('the first repeated character is',char)\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] in str1[i+1:]:\n            return str1[i]\n    return -1\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # solutions = []\n    ludics = []\n    for i in range(n):\n        if str(i) in '13579':\n            ludics.append(i)\n    return ludics\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # initialize an empty set\n    ludics = set()\n    # loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # compute the number of digits\n        n_digits = len(str(i))\n        # the first digit of the number is always a 1\n        if str(i)[0] == '1':\n            # the first digit of the number is a 1, so add the number\n            ludics.add(i)\n        else:\n            # get the number of times a digit is multiplied with a digit whose number is bigger than itself\n            ludics.add(i * 10**(n_digits-1))\n            # get the number of times a digit is multiplied with a digit whose number is smaller than itself\n            ludics.add(i * 10**n_digits)\n    # return the set\n    return ludics\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    l = []\n    for i in range(1, n + 1):\n        l.append(i)\n    n = 1\n    while len(l) > 0:\n        m = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                m += i\n        if m == n:\n            l.pop(l.index(n))\n        n += 1\n    return l"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n):\n        s = str(i)\n        l = len(s)\n        if int(s) < n:\n            if s[0] == '1' and s[1] == '0':\n                s = int(s[2:])\n            elif s[0] == '0':\n                s = int(s[1:])\n            else:\n                s = int(s)\n            if l == 1:\n                ludic.append(i)\n            else:\n                if s == 1:\n                    ludic.append(i)\n                elif s == l:\n                    ludic.append(i)\n                else:\n                    if s == 0:\n                        ludic.append(i)\n                    elif s < l:\n                        ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = list()\n    \n    for i in range(1,n):\n        n_str = str(i)\n        if len(n_str) > 1:\n            n_str = ''.join(n_str)\n            if int(n_str) > i:\n                lucid.append(i)\n    return lucid\n    \n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    i = 2\n    while i <= n:\n        if is_lucky(i) and is_lucky(n - i):\n            print(i)\n        i += 1\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    x = int(n**0.5) + 1\n    l = []\n    for i in range(1, x):\n        if (n % i) == 0:\n            l.append(i)\n    return l\n    \ndef get_lucid_cups(n):\n    '''\n    Write a function to get all lucids that can be formed from a given integer.\n    '''\n    l = get_ludic(n)\n    out = []\n    for i in l:\n        out.append(i**3)\n    return out\n    \ndef get_digit(n):\n    '''\n    Write a function to get the digit of an integer.\n    '''\n    while n > 10:\n        n = n//10\n    return n\n    \ndef get_digit_list(n):\n    '''\n    Write a function to get the digit list of an integer.\n    '''\n    l = []\n    while n > 10:\n        n = n//10\n        l.append(n)\n    l.append(get_digit(n))\n    return l\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(n):\n        if all(i%j for j in range(2,int(i**0.5)+1)):\n            lucids.append(i)\n    return lucids\n    \ndef get_biggest_prime_factor(n):\n    '''\n    Write a function that will find the biggest prime factor of a given number\n    '''\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            if i == 2:\n                while n % i!= 0:\n                    n = n // i\n            else:\n                i = i + 1\n                while n % i!= 0:\n                    n = n // i\n        else:\n            i = i + 1\n    if n!= 1:\n        return n\n    else:\n        return \"NO\"\n    \ndef get_largest_prime_factor(n):\n    '''\n    Write a function that will find the largest prime factor of a given number\n    '''\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            i = i + 1\n            if i == n:\n                return n\n        else:\n            i = i + 1\n    return n\n    \ndef get_prime_factors(n):\n    '''\n    Write a function that will find all prime factors of a given number\n    '''\n    i = 2\n    prime_factors = []\n    while i <= n:\n        if n % i == 0:\n            while n % i!= 0:\n                n = n // i\n            prime_factors.append(i)\n        else:\n            i = i + 1\n    return prime_factors\n    \ndef get_factors(n):\n    '''\n    Write a function that will find all factors of a given number\n    '''\n    i = 2\n    prime_factors = []\n    while i <= n:\n        if n % i == 0:\n            prime_factors.append(i)\n            while n % i!= 0:\n                n = n // i\n        i = i + 1\n    return prime_factors\n    \ndef get_square_root(n):\n    '''\n    Write a function to get the square root of a given integer\n    '''\n    i = 0\n    while i*i <= n:\n        if i*i == n:\n            return i\n        else:\n            i = i + 1\n    return \"NO\"\n    \ndef get_eights_to_the_power(n):\n    '''\n    Write a function that will find the number of eights that are less than the given integer\n    '''\n    eights = 0\n    while n >= 8:\n        n = n - 8\n        eights += 1\n    return eights\n    \ndef get_primes(n):\n    '''\n    Write a function that will find all prime numbers up to and including a given integer\n    '''\n    i = 2\n    prime_numbers = []\n    while i <= n:\n        prime = True\n        for j in range(2,i):\n            if i % j == 0:\n                prime = False\n                break\n        if prime:\n            prime_numbers.append(i)\n        i = i + 1\n    return prime_numbers\n    \ndef get_leap_years(year):\n    '''\n    Write a function that will find all leap years between two given years\n    '''\n    leap_years = []\n    for i in range(year,2201):\n        if i % 4 == 0:\n            if i % 100!= 0:\n                if i % 400 == 0:\n                    leap_years.append(i)\n                else:\n                    continue\n            else:\n                continue\n        else:\n            continue\n    return leap_years\n    \ndef get_vowels(n):\n    '''\n    Write a function that will count the number of vowels in a given string\n    '''\n    vowels = {'a','e','i','o','u'}\n    vowels_count = 0\n    for char in n:\n        if char in vowels:\n            vowels_count += 1\n    return vowels_count\n    \ndef get_largest_prime_factor(n):\n    '''\n    Write a function to find the largest prime factor of a given integer\n    '''\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            while n % i!= 0:\n                n = n // i\n        else:\n            i = i + 1\n    if n!= 1:\n        return n\n    else:\n        return \"NO\"\n    \ndef get_largest_prime_factor(n):\n    '''\n    Write a function to find the largest prime factor of a given integer\n    '''\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            i = i + 1\n            if i == n:\n                return n\n        else:\n            i = i + 1\n    return n\n    \ndef get_prime_factors(n):\n    '''\n    Write a function that will find all prime factors of a given number\n    '''\n    i = 2\n    prime_factors = []\n    while i*i <= n:\n        if n % i == 0:\n            while n % i!= 0:\n                n = n // i\n            prime_factors.append(i)\n        else:\n            i = i + 1\n    return prime_factors\n    \ndef get_number_of_gaps(n):\n    '''\n    Write a function that will count the number of gaps between two integers\n    '''\n    number_of_gaps = 0\n    while n > 0:\n        n = n - 1\n        if n % 2 == 0:\n            number_of_gaps += 1\n    return number_of_gaps\n    \ndef get_squares_sum(n):\n    '''\n    Write a function that will calculate the sum of the squares of all positive integers up to and including a given integer\n    '''\n    sum = 0\n    while n >= 0:\n        sum += (n**2)\n        n = n - 1\n    return sum\n    \ndef get_sum_of_divisors(n):\n    '''\n    Write a function that will calculate the sum of all divisors of a given integer\n    '''\n    sum = 1\n    for i in range(1,n):\n        if n % i == 0:\n            sum += i\n    return sum\n    \ndef get_number_of_primes(n):\n    '''\n    Write a function that will count the number of prime numbers up to and including a given integer\n    '''\n    primes = []\n    for i in range(2,n+1):\n        prime = True\n        for j in range(2,i):\n            if i % j == 0:\n                prime = False\n                break\n        if prime:\n            primes.append(i)\n    return len(primes)\n    \ndef get_number_of_prime_factors(n):\n    '''\n    Write a function that will count the number of prime factors of a given number\n    '''\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            while n % i!= 0:\n                n = n // i\n        else:\n            i = i + 1\n    if n!= 1:\n        return n\n    else:\n        return \"NO\"\n    \ndef get_number_of_prime_factors(n):\n    '''\n    Write a function that will count the number of prime factors of a given number\n    '''\n    i = 2\n    prime_factors = []\n    while i*i <= n:\n        if n % i == 0:\n            while n % i!= 0:\n                n = n // i\n            prime_factors.append(i)\n        else:\n            i = i + 1\n    return len(prime_factors)\n    \ndef get_sum_of_divisors(n):\n    '''\n    Write a function that will calculate the sum of all divisors of a given integer\n    '''\n    sum = 1\n    for i in range(1,n):\n        if n % i == 0:\n            sum += i\n    return sum\n    \ndef get_number_of_gaps(n):\n    '''\n    Write a function that will count the numbe"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n <= 1:\n        return []\n    ludic = []\n    for x in range(1, n + 1):\n        if is_ludic(x):\n            ludic.append(x)\n    return lucid\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def luc(n):\n        if n == 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        else:\n            return luc(3*n+1)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    new_words = words[::-1]\n    return''.join(new_words)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split(' ')\n    res = ''\n    for i in range(len(s)):\n        if i == len(s)-1:\n            res = res + s[i]\n        else:\n            res = res + s[i] +''\n    return res\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split(\" \")\n    s = s[::-1]\n    s = \" \".join(s)\n    return s\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s:\n        return ''\n    words = s.split(' ')\n    return''.join(reversed(words))\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split(' ')\n    s = s[::-1]\n    return''.join(s)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(' ')\n    s = ''\n    for w in words[::-1]:\n        s += w\n        s +=''\n    return s[:-1]\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split(' ')\n    words = reversed(words)\n    s =''.join(words)\n    return s\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    #create a variable to store the words\n    words = ''\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    for i in range(len(s)):\n        s[i] = s[i][::-1]\n    return''.join(s)\n    \n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                print(num, 'is not a prime number')\n                break\n        else:\n            print(num, 'is a prime number')\n    else:\n        print(num, 'is not a prime number')\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num==1:\n        return False\n    if num==2:\n        return True\n    if num>2 and num%2==0:\n        return False\n    for i in range(3,num,2):\n        if num%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    if num in (2,3):\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5, int(num**0.5)+1, 6):\n        if num % i == 0 or num % (i+2) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num in range(2,num//2+1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    def isprime(num):\n        if num > 1:\n            for i in range(2, num):\n                if num % i == 0:\n                    return False\n            return True\n        return False\n    if num > 1:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if num % i == 0:\n                print(num, \"is not a prime number\")\n                break\n        else:\n            print(num, \"is a prime number\")\n    else:\n        print(num, \"is not a prime number\")\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    count = 0\n    for i in range(1, num):\n        if num%i == 0:\n            count += 1\n        if count > 1:\n            break\n    return count == 1\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree\n    radian = degree * math.pi / 180\n    return radian\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    radian = radian\n    degree = radian * 180 / math.pi\n    return degree\ndef distance(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between two points\n    in the plane.\n    '''\n    distance = math.sqrt((x1-x2)**2 + (y1-y2)**2)\n    return distance\ndef form_points(point1,point2,point3):\n    '''\n    Write a function to calculate the middle point of 3 points.\n    '''\n    x1,y1 = point1\n    x2,y2 = point2\n    x3,y3 = point3\n    middle_point = ((x1+x2+x3)/3,(y1+y2+y3)/3)\n    return middle_point\ndef hypotenuse(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the length of the hypotenuse of a right-angled triangle.\n    '''\n    x1,y1 = x1,y1\n    x2,y2 = x2,y2\n    a = distance(x1,y1,x2,y2)\n    b = math.sqrt((a**2)-((a/2)**2))\n    c = distance(x1,y1,x2,y2)\n    c_ = math.sqrt((c**2)-((c/2)**2))\n    hypotenuse = math.sqrt((a**2)+(b**2)+(c_**2))\n    return hypotenuse\ndef law_of_cosine(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the length of a right-angled triangle using the Law of Cosines.\n    '''\n    x1,y1 = x1,y1\n    x2,y2 = x2,y2\n    x3,y3 = x3,y3\n    c = math.sqrt(((x2-x3)**2) + ((y2-y3)**2))\n    s = math.sqrt(((x1-x2)**2) + ((y1-y2)**2))\n    a = math.sqrt(((x1-x3)**2) + ((y1-y3)**2))\n    s_ = math.sqrt(((x1-x3)**2) + ((y1-y3)**2))\n    r = ((c**2) + (s**2) - (a**2))/2\n    r_ = ((c**2) + (s_**2) - (a**2))/2\n    law_of_cosine = math.sqrt(((r**2) + (r_**2) - (a**2)) / (2*a))\n    return law_of_cosine\ndef law_of_sine(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the length of a right-angled triangle using the Law of Sines.\n    '''\n    x1,y1 = x1,y1\n    x2,y2 = x2,y2\n    x3,y3 = x3,y3\n    b = math.sqrt(((x2-x3)**2) + ((y2-y3)**2))\n    a = math.sqrt(((x1-x2)**2) + ((y1-y2)**2))\n    s = math.sqrt(((x1-x3)**2) + ((y1-y3)**2))\n    a_ = math.sqrt(((x1-x3)**2) + ((y1-y3)**2))\n    s_ = math.sqrt(((x1-x3)**2) + ((y1-y3)**2))\n    law_of_sine = math.sqrt(((a**2) + (b**2) - (a_**2)) / 2)\n    law_of_sine_ = math.sqrt(((a**2) + (s_**2) - (a_**2)) / 2)\n    return law_of_sine,law_of_sine_\ndef law_of_cosine_bis(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the length of a right-angled triangle using the Law of Cosines.\n    '''\n    x1,y1 = x1,y1\n    x2,y2 = x2,y2\n    x3,y3 = x3,y3\n    a = math.sqrt(((x2-x3)**2) + ((y2-y3)**2))\n    s = math.sqrt(((x1-x2)**2) + ((y1-y2)**2))\n    c = math.sqrt(((x1-x3)**2) + ((y1-y3)**2))\n    s_ = math.sqrt(((x1-x3)**2) + ((y1-y3)**2))\n    r = ((c**2) + (s**2) - (a**2))/2\n    r_ = ((c**2) + (s_**2) - (a**2))/2\n    law_of_cosine_ = math.sqrt(((r**2) + (r_**2) - (a**2)) / (2*a))\n    return law_of_cosine_\ndef law_of_sine_bis(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the length of a right-angled triangle using the Law of Sines.\n    '''\n    x1,y1 = x1,y1\n    x2,y2 = x2,y2\n    x3,y3 = x3,y3\n    b = math.sqrt(((x2-x3)**2) + ((y2-y3)**2))\n    a = math.sqrt(((x1-x2)**2) + ((y1-y2)**2))\n    s = math.sqrt(((x1-x3)**2) + ((y1-y3)**2))\n    a_ = math.sqrt(((x1-x3)**2) + ((y1-y3)**2))\n    s_ = math.sqrt(((x1-x3)**2) + ((y1-y3)**2))\n    law_of_sine_ = math.sqrt(((a**2) + (b**2) - (a_**2)) / 2)\n    law_of_sine_ = math.sqrt(((a**2) + (s_**2) - (a_**2)) / 2)\n    return law_of_sine_,law_of_sine_\ndef law_of_sine_triangle(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the length of a right-angled triangle using the Law of Sines.\n    '''\n    x1,y1 = x1,y1\n    x2,y2 = x2,y2\n    x3,y3 = x3,y3\n    b = math.sqrt(((x2-x3)**2) + ((y2-y3)**2))\n    a = math.sqrt(((x1-x2)**2) + ((y1-y2)**2))\n    s = math.sqrt(((x1-x3)**2) + ((y1-y3)**2))\n    a_ = math.sqrt(((x1-x3)**2) + ((y1-y3)**2))\n    s_ = math.sqrt(((x1-x3)**2) + ((y1-y3)**2))\n    law_of_sine_ = math.sqrt(((a**2) + ("
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree*math.pi/180\n    return radian\ndef convert_to_radian(degree):\n    '''\n    Write a function to convert radian to degrees.\n    '''\n    radian = degree*180/math.pi\n    return radian\ndef angle_difference(degree1, degree2):\n    '''\n    Write a function to find the difference between two angles in degrees.\n    '''\n    rad1 = convert_to_radian(degree1)\n    rad2 = convert_to_radian(degree2)\n    radians = rad1-rad2\n    degree = math.degrees(radians)\n    return degree\ndef deg2rad(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree*math.pi/180\n    return radian\ndef rad2deg(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    degree = radian*180/math.pi\n    return degree\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n    \ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian*180/math.pi\n    \ndef distance_btw_two_points(point_a, point_b):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    return math.sqrt(((point_a[0]-point_b[0])**2)+((point_a[1]-point_b[1])**2))\n    \ndef two_points_to_coordinates(point_a, point_b):\n    '''\n    Write a function to convert points to coordinates\n    '''\n    return (point_a[0],point_a[1])\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    lit_reg = re.compile(pattern)\n    found = lit_reg.search(text)\n    \n    if found:\n        return found.group(), found.start(), found.end()\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    return match.group(0), match.start(), match.end()\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Compile the pattern\n    regex = re.compile(pattern)\n    match = regex.search(text)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Compiling regex pattern\n    # Compiling regex pattern\n    regex = re.compile(pattern)\n    matches = regex.finditer(text)\n    for match in matches:\n        print(match.group())\n        print(match.start())\n        print(match.end())\n        print(\"\\n\")\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    for match in re.finditer(pattern,text):\n        print(match)\n        return match\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pass\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #Find and return all matches in text\n    match_obj = re.finditer(pattern, text)\n    matches = list(match_obj)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #match = re.search(pattern, text)\n    \n    # if match:\n        # return match.group()\n    \n    # else:\n        # return None\n    \n    match = re.search(pattern, text)\n    return match\n    \n    \ndef find_numbers(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching substring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    try:\n        if re.search(pattern, text):\n            print(re.search(pattern, text).span())\n    except Exception as e:\n        print(e)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # code here\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # initialising first and second elements of the sequence.\n    first = 1\n    second = 1\n    # loop to calculate nth bell number.\n    for i in range(2,n+1):\n        # calculating first and second elements of the sequence.\n        first = first + second\n        second = first\n        \n    return first\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # base cases:\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return bell_Number(n-1)+bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_number = 0\n    while n > 0:\n        bell_number += (n*(n+1))//2\n        n = n -1\n    return bell_number\n    \nprint(\"bell_number(n) =\",bell_Number(4))\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 0\n    while n > 0:\n        bell += 1\n        n = n - 1\n    return bell\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return (n*bell_Number(n-1))+bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    i = 1\n    while(n!= 0):\n        i += 1\n        n = n - 1\n    return i\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell=0\n    for i in range(1,n+1):\n        bell=bell+i*(2*i-1)\n    return bell\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    arr = [0]*(n+1)\n    arr[0] = 0\n    arr[1] = 1\n    for i in range(2, n+1):\n        temp = 0\n        for j in range(i):\n            temp += arr[j]\n        arr[i] = temp\n    return arr[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 1\n    for i in range(1, n+1):\n        bell = bell + i*(i+1)/2\n    return bell\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if not list1:\n        return None\n    if L < 0:\n        return None\n    if L > len(list1):\n        return None\n    if L == 0:\n        return list1\n    if L == len(list1):\n        return None\n    # return list1[0:L-1] + list1[L:]\n    return list1[0:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    list1.pop(L)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    l1 = []\n    i = 0\n    for i in range(len(list1)):\n        if i!= L:\n            l1.append(list1[i])\n    return l1\n    # Code here\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Write your code here\n    return list1[:k] + list1[k+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    #n = len(list1)\n    k = L\n    return list1[0:k-1] + list1[k:]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L]+list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) == 0:\n        return []\n    else:\n        return list1[0:k] + list1[k+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N > len(test_list):\n        return\n    nth_col = []\n    for row in test_list:\n        nth_col.append(row[N-1])\n    return max(nth_col)\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    #Possible results\n    results = []\n    for i in range(len(test_list)):\n        current_list = []\n        for j in range(len(test_list[i])):\n            current_list.append(test_list[i][j])\n        results.append(current_list)\n    for i in range(len(results)):\n        results[i] = max(results[i])\n    print(results)\n    return results[N - 1]\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([row[N] for row in test_list])\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N == 1:\n        return max(test_list)\n    if N >= len(test_list):\n        return max(test_list)\n    return max(max_of_nth(test_list, N-1) + test_list[N-1])\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # I cannot get this to work with a list, it gives me a list of list and not the actual matrix\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    result = None\n    for i in range(0, len(test_list)):\n        if (result == None) or (test_list[i][N] > result):\n            result = test_list[i][N]\n    return result\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list[i][N-1] for i in range(len(test_list)))\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([i[N] for i in test_list])\n    \ndef min_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n    '''\n    return min([i[N] for i in test_list])\n    \ndef average_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the avg of then'th column.\n    '''\n    return sum([i[N] for i in test_list])/len(test_list)\n    \ndef sum_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the sum of then'th column.\n    '''\n    return sum([i[N] for i in test_list])\n    \ndef list_max(test_list):\n    '''\n    Write a function which given a list of lists returns the max of each column.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        temp = max([i[N] for i in test_list])\n        result.append(temp)\n    return result\n    \ndef list_min(test_list):\n    '''\n    Write a function which given a list of lists returns the min of each column.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        temp = min([i[N] for i in test_list])\n        result.append(temp)\n    return result\n    \ndef list_avg(test_list):\n    '''\n    Write a function which given a list of lists returns the avg of each column.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        temp = average_of_nth(test_list, N = i)\n        result.append(temp)\n    return result\n    \ndef list_sum(test_list):\n    '''\n    Write a function which given a list of lists returns the sum of each column.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        temp = sum_of_nth(test_list, N = i)\n        result.append(temp)\n    return result\n    \ndef matrix_max(test_matrix):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of each column.\n    '''\n    result = []\n    for i in range(len(test_matrix)):\n        temp = max_of_nth(test_matrix, N = i)\n        result.append(temp)\n    return result\n    \ndef matrix_min(test_matrix):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the min of each column.\n    '''\n    result = []\n    for i in range(len(test_matrix)):\n        temp = min_of_nth(test_matrix, N = i)\n        result.append(temp)\n    return result\n    \ndef matrix_avg(test_matrix):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the avg of each column.\n    '''\n    result = []\n    for i in range(len(test_matrix)):\n        temp = average_of_nth(test_matrix, N = i)\n        result.append(temp)\n    return result\n    \ndef matrix_sum(test_matrix):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the sum of each column.\n    '''\n    result = []\n    for i in range(len(test_matrix)):\n        temp = sum_of_nth(test_matrix, N = i)\n        result.append(temp)\n    return result\n    \ndef transpose(test_matrix):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the transpose of the matrix.\n    '''\n    result = []\n    for i in range(len(test_matrix)):\n        temp = []\n        for j in range(len(test_matrix)):\n            temp.append(test_matrix[j][i])\n        result.append(temp)\n    return result\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N >= len(test_list):\n        raise ValueError('N must be less than len(test_list)')\n    max = float('-inf')\n    for i in range(len(test_list)):\n        if test_list[i][N - 1] > max:\n            max = test_list[i][N - 1]\n    return max\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_so_far = 0\n    for i in range(len(test_list)):\n        curr_col = 0\n        for j in range(len(test_list[i])):\n            curr_col = curr_col + test_list[i][j]\n        if curr_col > max_so_far:\n            max_so_far = curr_col\n    return max_so_far\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first = []\n    second = []\n    for i in range(len(lst)):\n        first.append(lst[i][0])\n        second.append(lst[i][1])\n    return first, second\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    for i in range(len(lst)):\n        if len(lst[i]) < 2:\n            return lst[i]\n    \n    lst.sort(key=lambda x: x[0])\n    \n    return lst[0][0], lst[0][1]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    list_of_lists = []\n    for i in lst:\n        if i not in list_of_lists:\n            list_of_lists.append(i)\n    \n    for i in list_of_lists:\n        if i[0] not in list_of_lists:\n            list_of_lists.append([i[0],i[1]])\n        if i[1] not in list_of_lists:\n            list_of_lists.append([i[1],i[0]])\n            \n    return list_of_lists\n    \n    \n    \n    \n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list=[]\n    for i in lst:\n        merged_list.append(i[0])\n        merged_list.append(i[1])\n    return merged_list\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_list = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            new_list.append(lst[i])\n    for i in range(len(lst)):\n        if i % 2!= 0:\n            new_list.append(lst[i])\n    return new_list\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    def merge(lst):\n        final = []\n        while lst:\n            min1 = min(lst)\n            final.append(min1)\n            lst.remove(min1)\n        return final\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    mergedList = []\n    for i in lst:\n        mergedList.append(i[0])\n        mergedList.append(i[1])\n    return mergedList\n    \ndef drop(lst):\n    '''\n    Write a python function which takes a list, and returns the list without the first and last elements.\n    '''\n    dropList = lst[1:-1]\n    return dropList\n    \ndef reverse(lst):\n    '''\n    Write a python function which takes a list and reverses it, i.e. the first element becomes the last and the last one becomes the first.\n    '''\n    reverseList = lst[::-1]\n    return reverseList\n    \ndef reverse_even(lst):\n    '''\n    Write a python function which takes a list and returns the list with the elements reversed. \n    '''\n    reverseEvenList = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            reverseEvenList.append(lst[i])\n    return reverseEvenList\n    \ndef remove_duplicates(lst):\n    '''\n    Write a python function which takes a list and returns a list with only the first occurence of each distinct element in the list.\n    '''\n    returnList = []\n    for i in lst:\n        if i not in returnList:\n            returnList.append(i)\n    return returnList\n    \ndef element_count(lst):\n    '''\n    Write a python function which takes a list and returns a dictionary with the keys being the elements of the list and the values being the number of elements of the list that are the corresponding keys.\n    '''\n    elementCountDict = {}\n    for i in lst:\n        elementCountDict[i] = elementCountDict.get(i, 0) + 1\n    return elementCountDict\n    \ndef no_dups(lst):\n    '''\n    Write a python function which takes a list and returns a list with the duplicates removed.\n    '''\n    returnList = []\n    for i in lst:\n        if i not in returnList:\n            returnList.append(i)\n    return returnList\n    \ndef numbers_of_types(lst):\n    '''\n    Write a python function which takes a list of strings and returns a dictionary with the keys being the types of the elements in the list and the values being the number of times they appear in the list.\n    '''\n    dictionary = {}\n    for i in lst:\n        if i in dictionary.keys():\n            dictionary[i] += 1\n        else:\n            dictionary[i] = 1\n    return dictionary\n    \ndef string_join(lst):\n    '''\n    Write a python function which takes a list of strings and returns a string with all the strings joined together.\n    '''\n    stringJoin = \"\"\n    for i in lst:\n        stringJoin += i\n    return stringJoin\n    \ndef flatten(lst):\n    '''\n    Write a python function which takes a list of lists and returns a list with the elements flattened.\n    '''\n    flattenedList = []\n    for i in lst:\n        for j in i:\n            flattenedList.append(j)\n    return flattenedList\n    \ndef a_to_z(lst):\n    '''\n    Write a python function which takes a list and returns a list with the first character of each element in the list transformed to lowercase.\n    '''\n    aToZList = []\n    for i in lst:\n        aToZList.append(i[0].lower())\n    return aToZList\n    \ndef lower_case(lst):\n    '''\n    Write a python function which takes a list and returns a list with the elements transformed to lowercase.\n    '''\n    lowerCaseList = []\n    for i in lst:\n        lowerCaseList.append(i.lower())\n    return lowerCaseList\n    \ndef upper_case(lst):\n    '''\n    Write a python function which takes a list and returns a list with the elements transformed to uppercase.\n    '''\n    upperCaseList = []\n    for i in lst:\n        upperCaseList.append(i.upper())\n    return upperCaseList\n    \ndef reverse_dictionary(dictionary):\n    '''\n    Write a python function which takes a dictionary and returns a dictionary with the keys as the values and the values as the keys.\n    '''\n    reverseDictionary = {}\n    for i in dictionary:\n        reverseDictionary[dictionary[i]] = i\n    return reverseDictionary\n    \ndef unique_string(lst):\n    '''\n    Write a python function which takes a list and returns a list with the distinct elements of the list in the order they appear in the list.\n    '''\n    uniqueStringList = []\n    for i in lst:\n        if i not in uniqueStringList:\n            uniqueStringList.append(i)\n    return uniqueStringList\n    \ndef remove_duplicate_substrings(lst):\n    '''\n    Write a python function which takes a list and returns a list with the duplicate substrings of the list, where the substrings are the substrings of the list such that the substrings do not occur more than once in the list.\n    '''\n    noDupSubstringsList = []\n    for i in range(len(lst)-1):\n        substring = lst[i]\n        for j in range(i+1, len(lst)):\n            if substring == lst[j]:\n                if substring not in noDupSubstringsList:\n                    noDupSubstringsList.append(substring)\n    return noDupSubstringsList\n    \ndef find_duplicates(lst):\n    '''\n    Write a python function which takes a list and returns a list of all the sublists of the list such that the sublists do not contain the same element.\n    '''\n    noDuplicateList = []\n    for i in range(len(lst)):\n        subList = []\n        for j in range(len(lst)):\n            if i!= j:\n                if lst[i]!= lst[j]:\n                    subList.append(lst[j])\n        noDuplicateList.append(subList)\n    return noDuplicateList\n    \ndef a_zip(lst):\n    '''\n    Write a python function which takes a list and returns a list of tuples of the form (a, b) where a is the element of the list and b is the corresponding element of the list.\n    '''\n    aZipList = []\n    for i in range(len(lst)):\n        aZipList.append((lst[i], i))\n    return aZipList\n    \ndef sort_integer_list(lst):\n    '''\n    Write a python function which takes a list and returns a list of tuples of the form (a, b) where a is the element of the list and b is the corresponding element of the list.\n    '''\n    sortList = []\n    for i in range(len(lst)):\n        sortList.append((i, lst[i]))\n    return sortList\n    \ndef remove_from_list(lst, num):\n    '''\n    Write a python function which takes a list and a number N and returns a list with all the elements in the list that are not less than N and not greater than N.\n    '''\n    for i in range(len(lst)):\n        if lst[i] >= num:\n            lst.remove(lst[i])\n    return lst\n    \ndef remove_from_list_2(lst, num):\n    '''\n    Write a python function which takes a list and a number N and returns a list with all the elements in the list that are not greater than N.\n    '''\n    for i in range(len(lst)):\n        if lst[i] <= num:\n            lst.remove(lst[i])\n    return lst\n    \ndef remove_from_list_3(lst, num):\n    '''\n    Write a python function which takes a list and a number N and returns a list with all the elements in the list that are not less than N and greater than N.\n    '''\n    for i in range(len("
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    i = 1\n    while i < len(lst):\n        if lst[i][0] == lst[i-1][0]:\n            lst[i-1] = (lst[i-1][0], lst[i][1])\n            del lst[i]\n        else:\n            i += 1\n    return lst\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst_new = []\n    lst_new = sorted(lst, key=lambda x: x[0])\n    lst_new = sorted(lst_new, key=lambda x: x[1])\n    return lst_new\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new = []\n    for i in range(0, len(lst), 2):\n        new.append([lst[i], lst[i+1]])\n    return new\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return list(np.cumsum(test_list))\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        result.append(sum(test_list[0:i+1]))\n    return result\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    temp=0\n    for i in test_list:\n        temp+=i\n    return temp\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    def cummulative_sum_sum(list):\n        if len(list)==0:\n            return 0\n        else:\n            return list[0] + cummulative_sum_sum(list[1:])\n    return cummulative_sum_sum(test_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in range(len(test_list)):\n        total += test_list[i]\n    print(total)\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return sum(test_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if not test_list:\n        return test_list\n    else:\n        return test_list[0] + cummulative_sum(test_list[1:])\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    #initializing a list\n    test_list = list(test_list)\n    #performing calculation\n    for i in range(1,len(test_list)):\n        test_list[i] = test_list[i]+test_list[i-1]\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    list1 = []\n    for i in test_list:\n        list1.append(i)\n    total = 0\n    for i in range(len(list1)):\n        total += list1[i]\n    return total\n        \n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    for index in range(len(test_list)-1):\n        test_list[index+1] = test_list[index]+test_list[index+1]\n    return test_list\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    #create new list\n    newList = []\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for t in nums:\n        averages.append(sum(t)/len(t))\n    return averages\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    final_list = []\n    for i in range(len(nums)):\n        final_list.append(sum(nums[i])/len(nums[i]))\n    return final_list\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    count = 0\n    count_sum = 0\n    final_list = []\n    for i in range(len(nums)):\n        count += 1\n        count_sum += nums[i][1]\n        final_list.append(count_sum/count)\n    return final_list\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    my_list = []\n    for i in nums:\n        my_sum = 0\n        for j in i:\n            my_sum += j\n        my_list.append(my_sum / len(i))\n    return my_list\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    #SOLUTION-2\n    # average = []\n    # for i in range(len(nums)):\n    #     a = sum(nums[i])/len(nums[i])\n    #     average.append(a)\n    # return average\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    final_list = []\n    for i in nums:\n        x = 0\n        for y in i:\n            x += y\n        x = x / len(i)\n        final_list.append(x)\n    return final_list\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = []\n    for i in nums:\n        total.append(sum(i))\n    return total\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return (sum(t)/len(t))\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return tuple(map(lambda t: float(sum(t))/len(t), nums))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuple lengths don't match\")\n    return tuple([int(x%y) for x,y in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    return tuple(map(lambda x,y: x % y, test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    #print('Tuple_modulo')\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert (len(test_tup1) == len(test_tup2))\n    tup_modulo = ()\n    for i in range(len(test_tup1)):\n        tup_modulo = tup_modulo + (test_tup1[i] % test_tup2[i],)\n    return tup_modulo\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples are not of the same length\")\n        return None\n    else:\n        return tuple((i%j for i,j in zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([i % j for i,j in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n    return result\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # TODO: write your code here\n    return\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(x % y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def Jump(steps, d): \n        curr = 0\n        curr += steps\n        if curr >= d: \n            return True\n        else: \n            return False\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if (steps == 0): \n        return 0\n    steps = steps-1\n    return 1 + min(min_Jumps(steps, 2*d), min_Jumps(steps, d)) \n        \n    \nclass A: \n    def __init__(self, x, y): \n        self.x = x \n        self.y = y \n        self.visited = False\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    #Initialize\n    jumps = 0\n    #Go through the steps list and check if the value in the current step is greater than the step before.\n    for i in range(0, len(steps)-1):\n        #If the current step is greater than the previous step, increase the number of jumps\n        if steps[i] > steps[i+1]:\n            jumps += 1\n    #If the current step is less than the previous step, increase the number of jumps\n    if steps[-1] < d:\n        jumps += 1\n    #Return the number of jumps\n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 1:\n        return 0\n    if d == 0:\n        return 0\n    steps_n = steps - 1\n    max_steps = int(1e9)\n    min_jump = 1e9\n    for i in range(1, max_steps+1):\n        if i <= d:\n            jump = i + steps_n\n            if jump >= d:\n                min_jump = min(min_jump, jump - d)\n        else:\n            jump = d - i\n            if jump >= d:\n                min_jump = min(min_jump, d - i + steps_n)\n    return min_jump\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 1\n    while(steps!= 0):\n        if(steps >= d):\n            steps -= d\n            count += 1\n        else:\n            count += 1\n            steps = 0\n    print(count)\n    return count\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if not d: return 0\n    \n    if d == 0: return 1\n    \n    if d < 0: return 0\n    \n    n = len(steps)\n    \n    dp = [[0 for _ in range(d+1)] for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][0] = 1\n        \n        if i == 0: \n            continue\n        \n        for j in range(1, d+1):\n            if j - steps[i-1] >= 0:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-steps[i-1]] + 1)\n            else:\n                dp[i][j] = dp[i-1][j]\n    \n    return dp[-1][d]\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    d = d + 1\n    step = 1\n    J = 1\n    while step <= steps:\n        if (step + d) <= steps:\n            if steps % (step + d) == 0:\n                J = J + 1\n        step = step + 1\n    return J\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    \n    if steps == 0:\n        return jumps\n    if d == 1:\n        return jumps + 1\n    \n    while steps >= d:\n        jumps += 1\n        steps -= d\n    \n    return jumps\n    \ndef get_products(n):\n    '''\n    Write a function to calculate all the possible combinations of n products.\n    '''\n    return list(product(range(1, n+1), repeat=n))\n    \ndef get_even_index(l):\n    '''\n    Write a function to return the second even index in a given list.\n    '''\n    return l[1::2]\n    \ndef swap(a, b):\n    '''\n    Write a function to swap elements in a list without changing the order of elements in between.\n    '''\n    temp = a\n    a = b\n    b = temp\n    \n    return a, b\n    \ndef get_number_of_combinations(n):\n    '''\n    Write a function to calculate number of all possible combinations in a given length.\n    '''\n    return math.factorial(n)\n    \ndef is_prime(n):\n    '''\n    Write a function to check if a given number is prime.\n    '''\n    if n == 1:\n        return False\n    \n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n    \ndef maximum_index_product(l):\n    '''\n    Write a function to return the maximum value and its index in a given list.\n    '''\n    max_product = l[0]\n    max_index = 0\n    \n    for i in range(1, len(l)):\n        if l[i] > max_product:\n            max_index = i\n            max_product = l[i]\n            \n    return max_product, max_index\n    \ndef get_max_number(l):\n    '''\n    Write a function to return the maximum value in a given list.\n    '''\n    max_number = 0\n    \n    for i in range(0, len(l)):\n        if l[i] > max_number:\n            max_number = l[i]\n            \n    return max_number\n    \ndef is_power_of_two(n):\n    '''\n    Write a function to check if a given number is a power of 2.\n    '''\n    return n > 0 and n & (n-1) == 0\n    \ndef is_prime_number(n):\n    '''\n    Write a function to check if a given number is prime or not.\n    '''\n    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n    else:\n        return False\n    return True\n    \ndef get_maximum_prime_factor(n):\n    '''\n    Write a function to get the maximum prime factor of a given number.\n    '''\n    i = 2\n    while n % i!= 0:\n        i += 1\n    return i\n    \ndef get_divisors(n):\n    '''\n    Write a function to find the divisors of a given number.\n    '''\n    divisors = []\n    \n    if n == 1:\n        return divisors\n    if n == 2:\n        return divisors + [1]\n    \n    divisors.append(1)\n    \n    for i in range(2, n):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n//i)\n            \n    return divisors\n    \ndef max_digit(l):\n    '''\n    Write a function to get maximum digit in a given list.\n    '''\n    max_digit = l[0]\n    \n    for i in range(1, len(l)):\n        if l[i] > max_digit:\n            max_digit = l[i]\n            \n    return max_digit\n    \ndef is_palindrome(s):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef is_permutation(s1, s2):\n    '''\n    Write a function to check if two given strings are permutation of each other.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    \n    char_map = {}\n    for i in range(len(s1)):\n        if s1[i] not in char_map.keys():\n            char_map[s1[i]] = 1\n        else:\n            char_map[s1[i]] += 1\n    \n    for i in range(len(s2)):\n        if s2[i] not in char_map.keys():\n            return False\n        else:\n            if char_map[s2[i]]!= 1:\n                return False\n    return True\n    \ndef get_number_of_spaces(s):\n    '''\n    Write a function to return the total number of spaces in a given string.\n    '''\n    return s.count(\" \")\n    \ndef is_password_valid(pwd):\n    '''\n    Write a function to check if the given password is valid or not.\n    '''\n    password = list(pwd)\n    \n    if len(password) < 6:\n        return False\n    \n    lower_case_count = 0\n    upper_case_count = 0\n    digit_count = 0\n    special_char_count = 0\n    \n    for i in range(len(password)):\n        if password[i].islower():\n            lower_case_count += 1\n        elif password[i].isupper():\n            upper_case_count += 1\n        elif password[i].isdigit():\n            digit_count += 1\n        else:\n            special_char_count += 1\n    \n    return lower_case_count >= 1 and upper_case_count >= 1 and digit_count >= 1 and special_char_count >= 1\n    \ndef convert_to_binary(n):\n    '''\n    Write a function to convert a given decimal number to binary number.\n    '''\n    return bin(n)[2:]\n    \ndef has_duplicates(l):\n    '''\n    Write a function to check if a list contains any duplicates.\n    '''\n    return len(l)!= len(set(l))\n    \ndef remove_duplicates(l):\n    '''\n    Write a function to remove duplicates from a given list.\n    '''\n    if len(l) == 0:\n        return []\n    \n    l.sort()\n    temp = l[0]\n    new_list = []\n    \n    for i in range(1, len(l)):\n        if l[i]!= temp:\n            new_list.append(temp)\n            temp = l[i]\n            \n    new_list.append(temp)\n    \n    return new_list\n    \ndef remove_middle(l):\n    '''\n    Write a function to remove middle element from a given list.\n    '''\n    return l[1:len(l)-1]\n    \ndef is_palindrome_without_space(s):\n    '''\n    Write a function to check if a string is palindrome or not without using any space.\n    '''\n    if len(s) == 1:\n        return True\n    if s == s[::-1]:\n        return True\n    return False\n    \ndef remove_vowels(s):\n    '''\n    Write a function to remove vowels from a given string.\n    '''\n    if len(s) == 0:\n        return \"\"\n    \n    if s[0].lower() in 'aeiou':\n        return s[1:]\n    \n    if s[-1].lower() in 'aeiou':\n        return s[:-1]\n    \n    return s\n    \ndef get_frequency(l):\n    '''\n    Write a function to get frequency of each character in a given string.\n    '''\n    frequency = {}\n    \n    for i in range(len(l)):\n        if l[i] not in frequency.keys():\n            frequency[l[i]] "
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0: \n        return -1\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    if steps == 0:\n        return jumps\n    while d >= steps:\n        d = d - steps\n        jumps = jumps + 1\n    return jumps\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if (len(nums1)==0) or (len(nums2)==0):\n        return None\n    else:\n        if (len(nums1)==1) and (len(nums2)==1):\n            return (nums1[0]//nums2[0])\n        else:\n            div_list(nums1[1:],nums2[1:])\n            if (nums1[0]//nums2[0]) == nums1[0]:\n                return nums1[0]//nums2[0]\n            else:\n                return (nums1[0]//nums2[0]) + div_list(nums1[1:],nums2[1:])\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    res = []\n    i = 0\n    j = 0\n    while i < len(nums1) and j < len(nums2):\n        res.append(nums1[i]/nums2[j])\n        i += 1\n        j += 1\n    return res\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    i = 0\n    output_list = []\n    while i< len(nums1):\n        output_list.append(nums1[i]/nums2[i])\n        i+=1\n    return output_list\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    pass\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    list1 = list(nums1)\n    list2 = list(nums2)\n    for i in range(len(list1)):\n        list1[i] = list2[i] / list1[i]\n    return list1\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [x/y for x, y in zip(nums1, nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(0,len(nums1)):\n        try:\n            result.append(nums1[i]/nums2[i])\n        except ZeroDivisionError:\n            print(\"Can't divide by zero\")\n        except TypeError:\n            print(\"One of the list is not a number\")\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    \n    # base case \n    if not nums1 or not nums2:\n        return nums1 or nums2\n    \n    # divide the lists\n    n1, n2 = nums1[0], nums2[0]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) > len(nums2):\n        max_len = len(nums1)\n        nums2 = nums2 + [0]*(max_len - len(nums2))\n    else:\n        max_len = len(nums2)\n        nums1 = nums1 + [0]*(max_len - len(nums1))\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) < len(nums2):\n        return divide(nums1,nums2)\n    else:\n        return divide(nums2,nums1)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    #given_string = 'number is 23'\n    given_string = str(test_str)\n    #given_string = '12222223333334444'\n    #given_string = '123456789101112131415161718192021'\n    #given_string = '2323232'\n    if len(given_string) > 1:\n        while True:\n            print('while loop')\n            if given_string[0] =='':\n                print(given_string[0])\n                given_string = given_string[1:]\n                print('given_string after strremove')\n                print(given_string)\n            else:\n                print('no space')\n                given_string = given_string[1:]\n                print('given_string after strremove')\n                print(given_string)\n                break\n    else:\n        return given_string\n    #return given_string\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # create an empty string\n    new_string = ''\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # my_str = \"012345678901234\"\n    # print(my_str)\n    # for i in range(len(my_str)):\n    #     if my_str[i].isdigit():\n    #         print(my_str)\n    #         my_str = my_str.replace(my_str[i], '')\n    #         my_str += my_str[i]\n    # print(my_str)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    l = list(test_str)\n    l.sort(key=lambda x: x.isdigit())\n    return \"\".join(l)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    arr = []\n    for num in test_str:\n        if num.isnumeric():\n            arr.append(num)\n    for i in range(len(arr)):\n        if i == 0:\n            print(arr[0])\n        else:\n            print(arr[i], end=' ')\n    return\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize a str with all characters to move\n    result = \"\"\n    # iterate through the string to find the numbers and put them in the end of the string\n    for i in range(len(test_str)):\n        if test_str[i].isnumeric():\n            result += test_str[i]\n    # iterate through the string to find the letters\n    for i in range(len(test_str)):\n        if not test_str[i].isnumeric():\n            result += test_str[i]\n    return result\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    my_str = test_str.split()\n    str_list = []\n    for i in range(len(my_str)):\n        if my_str[i].isdigit():\n            str_list.append(my_str[i])\n    for i in range(len(my_str)):\n        if my_str[i].isdigit():\n            my_str.remove(my_str[i])\n            my_str.append(str_list[i])\n    return''.join(my_str)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    l = []\n    for i in test_str:\n        if i.isnumeric():\n            l.append(i)\n    l.sort(key=int, reverse=True)\n    return \"\".join(l)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if test_str == \"\":\n        return \"You gave an empty string\"\n    test_str = test_str.split()\n    print(test_str)\n    for i in range(len(test_str)):\n        if test_str[i].isnumeric():\n            if i == 0:\n                test_str.insert(0, test_str.pop(i))\n            else:\n                test_str.insert(i, test_str.pop(i))\n            break\n    return \" \".join(test_str)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if not isinstance(test_str, str):\n        raise TypeError('Argument test_str should be of type \"str\".')\n    if len(test_str) == 0:\n        raise ValueError('Argument test_str cannot be empty.')\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Initialize to 1\n    dp = [1] * len(a)\n    # Initialize to the number of elements\n    # start at the first element\n    for i in range(len(a)):\n        for j in range(i):\n            # For each pair, add the smaller one to the larger\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def subset(a,k):\n        s = set(a)\n        ans = 0\n        for x in s:\n            if x % k!= 0 or x == 0:\n                continue\n            elif x!= 0:\n                ans = x\n        return ans\n    ans = 0\n    for i in range(1,len(a)):\n        ans = max(ans,subset(a,i))\n    return ans\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for k in range(n):\n        for i in range(n-1, k-1, -1):\n            j = i+1\n            while j < n and k < n:\n                if a[i] % a[j] == 0:\n                    dp[i][k] = max(dp[i][k], dp[i+1][k] + 1)\n                j += 1\n    maxx = 0\n    for i in range(n):\n        maxx = max(maxx, dp[0][i])\n    return maxx\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    largest_set = set()\n    largest_set.add(tuple(sorted(a)))\n    \n    for i in range(len(a)):\n        subset = set()\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                subset.add(a[j])\n        \n        largest_set = largest_set.union(subset)\n        \n    return len(largest_set)\n    \n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def partition(lst,low,high):\n        i = low\n        pivot = lst[high]\n        for j in range(low,high):\n            if lst[j]<pivot:\n                lst[i],lst[j]=lst[j],lst[i]\n                i+=1\n        lst[i],lst[high]=lst[high],lst[i]\n        return i\n    def quickSort(lst,low,high):\n        if low<high:\n            pi=partition(lst,low,high)\n            quickSort(lst,low,pi-1)\n            quickSort(lst,pi+1,high)\n    quickSort(a,0,len(a)-1)\n    i=0\n    for j in range(1,len(a)):\n        if a[i]%a[j]==0:\n            i+=1\n    return i\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    def divisors(n):\n        divs = []\n        for i in range(1, n//2+1):\n            if n % i == 0:\n                divs.append(i)\n        return divs\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # print(a)\n    # print(len(a))\n    a.sort()\n    print(a)\n    # print(len(a))\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def largest_subset(a):\n        '''\n        Function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n        '''\n        import sys\n        ans = 1\n        for i in range(2, int(sys.maxsize)):\n            if(i == a[i-1] or a[i-1] == 1):\n                ans = max(ans, 2)\n            else:\n                for j in range(i, int(sys.maxsize)):\n                    if(a[j-1] == i and a[j-2] == i and a[j-3] == i):\n                        ans = max(ans, 3)\n                    elif(a[j-1] == i and a[j-2] == i):\n                        ans = max(ans, 2)\n        return ans\n    largest_subset(a)\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    m = max(a)\n    d = {}\n    for i in range(m + 1):\n        d[i] = 0\n    for i in range(1, m + 1):\n        for j in range(n):\n            if a[j] % i == 0:\n                d[i] = max(d[i], d[i - a[j]] + 1)\n    return d\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    largest_subset_list = []\n    all_subsets = []\n    if len(a) <= 1:\n        return a\n    subset = a\n    all_subsets.append(subset)\n    while len(subset)!= 1:\n        subset = find_all_subsets(subset)\n        all_subsets.append(subset)\n    for subset in all_subsets:\n        if len(largest_subset_list) == 0:\n            largest_subset_list.append(subset)\n        if len(subset) > len(largest_subset_list[-1]):\n            largest_subset_list.append(subset)\n    return largest_subset_list\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # If the length of the list is odd:\n    if n % 2 == 1:\n        # return the middle element of the first list\n        return arr1[n//2]\n    else:\n        # return the average of the middle and the end elements\n        return (arr1[n//2] + arr2[n//2]) / 2\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = sorted(arr1 + arr2)\n    size = len(arr)\n    if size % 2 == 0:\n        return (arr[size // 2 - 1] + arr[size // 2]) / 2\n    else:\n        return arr[size // 2]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # sort the lists\n    arr1.sort()\n    arr2.sort()\n    # take first n elements from the sorted array and take the middle of the sorted array\n    # then take the middle element of the previous sorted array and add it to the list\n    # to get the median\n    middle_element = (n//2) + (n%2)\n    m = n//2\n    if n%2 == 0:\n        return (arr1[m] + arr2[m])/2\n    else:\n        return arr1[m]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if(len(arr1) > len(arr2)):\n        return get_median(arr2, arr1, n)\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = arr1 + arr2\n    arr.sort()\n    return arr[n//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n%2 == 0:\n        x = n//2\n        x = arr1[x] + arr2[x]\n        print(x)\n    else:\n        x = (n+1)//2\n        x = arr1[x]\n        print(x)\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # if there is one element in the longer list\n    if n == 1:\n        return arr1[0]\n    \n    # if there are both elements\n    if n == 2:\n        return (arr1[0] + arr2[0])/2\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    l = n//2\n    r = n//2\n    if n%2 == 0:\n        return (arr1[l]+arr2[r])/2\n    return arr1[l]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # code here\n    l = len(arr1)\n    m = len(arr2)\n    if (l > m):\n        l = m\n        arr2 = arr1\n        arr1 = arr2\n    \n    cur = 0\n    a = arr1[cur]\n    b = arr1[cur + 1]\n    \n    for i in range(l):\n        if (a > b):\n            cur = cur + 1\n            a = arr1[cur]\n            b = arr1[cur + 1]\n    \n    return a\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    if len(arr1) > len(arr2):\n        i = len(arr1)\n        j = len(arr2)\n    else:\n        i = len(arr2)\n        j = len(arr1)\n    \n    while (i>0 and j>0):\n        if arr1[i] < arr2[j]:\n            i = i - 1\n        else:\n            j = j - 1\n    if i == 0:\n        return arr2[j]\n    if j == 0:\n        return arr1[i]\n    return (arr1[i-1] + arr2[j-1]) / 2\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    #iterate through the list of numbers\n    #create a new list called result\n    #iterate through nums and call num**n\n    #append result to result list\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    n_nums = []\n    for num in nums:\n        n_nums.append(num**n)\n    return n_nums\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i**n for i in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if len(nums)==0:\n        return []\n    else:\n        if n==1:\n            return nums\n        if n==0:\n            return []\n        else:\n            return [i**n for i in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    \n    if n == 0:\n        return []\n    if n == 1:\n        return nums\n    if n == 2:\n        return [x**2 for x in nums]\n    if n == 3:\n        return [x**3 for x in nums]\n    n -= 1\n    return [x**n for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return map(lambda num:num**n,nums)\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return list(map(lambda x:x**n,nums))\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    def power(x,n):\n        if n == 1:\n            return x\n        elif n == 2:\n            return x*x\n        else:\n            return x*power(x,n-1)\n    return power(nums,n)\nprint(nth_nums([1,2,3,4],5))\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n==0:\n        return []\n    if n==1:\n        return nums\n    \n    return [i*n for i in nums]\n    \nprint(nth_nums([1,2,3,4],3))\nprint(nth_nums([1,2,3,4],4))\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\nprint(is_upper(\"hello\"))\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if len(string) == 0:\n        return True\n    if len(string) == 1:\n        return string.isupper()\n    else:\n        return string[0].isupper() and all(c.isupper() for c in string[1:])\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) > 0:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        print(newList)\n    else:\n        print(\"List is empty.\")\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    head = newList\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return head\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    p = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = p\n    return newList\nprint(swap_List([1,2,3,4,5,6]))\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    a=newList[-1]\n    newList.pop()\n    newList.append(a)\n    print(\"New list: \" + str(newList))\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    l=newList\n    l[0],l[len(l)-1]=l[len(l)-1],l[0]\n    return l\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp=newList[0]\n    newList[0]=newList[len(newList)-1]\n    newList[len(newList)-1]=temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    if not newList:\n        return\n    if not isinstance(newList,list):\n        raise TypeError('Invalid Input')\n    if len(newList)<2:\n        return\n    if newList[0] == newList[-1]:\n        return\n    else:\n        newList[0],newList[-1]=newList[-1],newList[0]\n        return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    return newList[1:-1] + newList[0:1]\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def area(r):\n        a = math.pi*r*r\n        return a\n    r = int(input(\"enter radius of circle: \"))\n    area = area(r)\n    area = area/2\n    print(\"area of a largest triangle inscribed in a semicircle with a given radius is: \",area)\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area_of_triangle(a,b,c):\n        if (a+b) > c and (a+c) > b and (c+b) > a:\n            p = (a+b+c)/2\n            area = (p*(p-a)*(p-b)*(p-c))**0.5\n            return area\n        else:\n            return 0\n    a = float(input(\"Enter the first side: \"))\n    b = float(input(\"Enter the second side: \"))\n    c = float(input(\"Enter the third side: \"))\n    area = area_of_triangle(a,b,c)\n    if area == 0:\n        print(\"The triangle is not possible\")\n    else:\n        print(\"The area of the triangle is: \",area)\n    return area\nprint(triangle_area(4))"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def triangle_area(r) :\n        '''\n        Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n        Input:\n        radius - the radius of the semicircle\n        Output:\n        area - the area of the largest triangle\n        '''\n        def recur(r, cnt):\n            '''\n            Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n            Input:\n            radius - the radius of the semicircle\n            cnt - counter variable\n            Output:\n            area - the area of the largest triangle\n            '''\n            if r <= 0:\n                return 0\n            else:\n                area = cnt * (r ** 2) / 4\n                return area + recur(r - 1, cnt + 1)\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    print(r,\" is the radius of the semicircle\")\n    # get the value of r\n    radius = r\n    # calculate the area of the circle\n    circle_area = 3.14 * radius**2\n    # calculate the area of the triangle\n    triangle_area = 0.5 * (radius**2) * (r**2)\n    #print the result\n    print(\"The area of the circle is : \",circle_area)\n    print(\"The area of the triangle is : \",triangle_area)\n    # get the value of radius\n    r = int(input(\"Enter the radius of the circle : \"))\n    # call the function\n    triangle_area(r)"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    from math import pi\n    return r * r * pi/3\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    print('{0:=^40}'.format(' Triangle Area '))\n    import math\n    def area(a,b):\n        return (a*b)/2\n    import math\n    a,b = input('Enter the length and breadth : ').split()\n    a = float(a)\n    b = float(b)\n    area = area(a,b)\n    pi = math.pi\n    area_triangle = (area*(a+b)*(a-b)/2)\n    print(f'Area of the triangle is {area_triangle:.2f} ')\n    if area_triangle == area:\n        print('Triangle is rectangular')\n    else:\n        print('Triangle is irregular')\n    r = input('Input the radius of the semicircle : ')\n    if r == r :\n        print('The area of the largest triangle inscribed in the semicircle is :'+ str(area_triangle))\n    elif r!= r :\n        print('The area of the largest triangle inscribed in the semicircle is :'+ str(area_triangle))\n    else :\n        print('Please enter valid input')\n    print('{0:=^40}'.format('The End '))\n    return\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = 0\n    for i in range(1,r) :\n        j = math.sqrt((2*r)**2-2*i**2)\n        k = 2*r*i\n        area = max(area,j,k)\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r <= 0 :\n        raise ValueError(\"Error, Radius cannot be zero or negative\")\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    s = 3.14\n    area = (s*r*r) / 2\n    return area\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (1/2)*(r**2*math.sin(math.pi/3))\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end = len(array)-1\n    for i in range(start,end):\n        if array[i]!=i+1:\n            return i+1\n    return end+1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    for i in range(start,end):\n        if array[i]!= i+1:\n            return i+1\n    return end+1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    end=len(array) if end==None else end\n    for i in range(start,end):\n        if i not in array:\n            return i\n    return None\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    for i in range(start,end+1):\n        if i not in array:\n            return i\n    return None\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start == end:\n        return start+1\n    \n    if array[start] == start:\n        return find_First_Missing(array,start+1,end)\n    \n    if array[end] == end:\n        return find_First_Missing(array,start,end-1)\n        \n    if array[start] < end and array[end] > start:\n        index_left = start + (end-start)//2\n        if array[index_left] == index_left:\n            return find_First_Missing(array,start,index_left)\n        if array[index_left] < end and array[index_left] > start:\n            return find_First_Missing(array,index_left,end)\n        else:\n            return find_First_Missing(array,start,index_left)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end = len(array)-1\n    if array[start] <= end and array[start] >= 0:\n        return array[start]\n    if start<end:\n        middle = (start+end)//2\n        if array[middle] > array[start] and array[middle] > array[end]:\n            return find_First_Missing(array,start,middle-1)\n        elif array[middle]<array[start] and array[middle]<array[end]:\n            return find_First_Missing(array,middle+1,end)\n        else:\n            return find_First_Missing(array,start,middle-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    for i in range(start,end):\n        if(i not in array):\n            return i\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    start = start if end is None else end\n    if len(array)==0:\n        return 1\n    elif array[start]!= start+1:\n        return array[start]\n    return find_First_Missing(array,start+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end=len(array)-1\n    if start>end:\n        return None\n    if array[start]!=start+1:\n        return start+1\n    if array[end]!=end:\n        return end+1\n    start+=1\n    end-=1\n    while start<=end:\n        mid=(start+end)//2\n        if array[mid]==mid+1:\n            start=mid+1\n        else:\n            end=mid-1\n    return start+1\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # TODO: Write your code here\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    result = string.replace(' ','%20')\n    return result\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n    \nprint(replace_spaces('Mr John Smith    ')) # Should be 'Mr%20John%20Smith'\nprint(replace_spaces('Mr%20John%20Smith')) # Should be 'Mr%20John%20Smith'\nprint(replace_spaces('Hello there Mikey')) # Should be 'Hello%20there%20Mikey'\nprint(replace_spaces('Hello%20there%20Mikey')) # Should be 'Hello%20there%20Mikey'\nprint(replace_spaces(' ')) # Should be '%20'\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return '%20'.join(string.split())\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n    \n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list = input(\"enter the list of numbers: \")\n    list = list.split()\n    even = []\n    odd = []\n    for i in list:\n        if int(i)%2 == 0:\n            even.append(int(i))\n        else:\n            odd.append(int(i))\n    print(\"List of even numbers are: \",even)\n    print(\"List of odd numbers are: \",odd)\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for num in list:\n        if num%2 == 0:\n            evens.append(num)\n    return evens\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    new_list = []\n    for i in list:\n        if i%2 == 0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in range(0,len(list)):\n        if list[i] % 2 == 0:\n            even_list.append(list[i])\n    return even_list\n    "
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evenList = []\n    for i in list:\n        if (i % 2 == 0):\n            evenList.append(i)\n    return evenList\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for item in list:\n        if item % 2 == 0:\n            even_list.append(item)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evenList = []\n    oddList = []\n    for i in range(0, len(list)):\n        if (list[i] % 2 == 0):\n            evenList.append(list[i])\n        else:\n            oddList.append(list[i])\n    return evenList, oddList\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    result = []\n    for n in list:\n        if n % 2 == 0:\n            result.append(n)\n    return result\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evenList = []\n    oddList = []\n    for i in list:\n        if i%2 == 0:\n            evenList.append(i)\n        else:\n            oddList.append(i)\n    print(f\"Even numbers in the list are :{evenList}\")\n    print(f\"Odd numbers in the list are :{oddList}\")\n    return evenList,oddList\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evenList = [] \n    for i in list: \n        if (i%2==0): \n            evenList.append(i) \n    return evenList \n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    i = ele[0]\n    j = ele[1]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub.append(ele)\n    if (ele[0]+1, ele[1]) in sub and (ele[0]-1, ele[1]) in sub and (ele[0], ele[1]+1) in sub and (ele[0], ele[1]-1) in sub:\n        print(sub)\n        return(True)\n    else:\n        return(False)\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele not in sub:\n        sub.append(ele)\n        if ele[0]!= 0:\n            adjac(tuple((ele[0]-1, ele[1])), sub)\n        if ele[1]!= 0:\n            adjac(tuple((ele[0], ele[1]-1)), sub)\n        if ele[0]!= n-1:\n            adjac(tuple((ele[0]+1, ele[1])), sub)\n        if ele[1]!= n-1:\n            adjac(tuple((ele[0], ele[1]+1)), sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [(ele[0]+1, ele[1]), (ele[0]-1, ele[1]), (ele[0], ele[1]+1), (ele[0], ele[1]-1)] \n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x1,y1 = ele\n    sub.append((x1 - 1, y1 - 1))\n    sub.append((x1 + 1, y1 - 1))\n    sub.append((x1 - 1, y1))\n    sub.append((x1 + 1, y1))\n    sub.append((x1 - 1, y1 + 1))\n    sub.append((x1 + 1, y1 + 1))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # for x in range(len(sub)):\n        # print(sub[x])\n    # print(ele)\n    return [(ele[0]-1, ele[1]-1), (ele[0]+1, ele[1]-1), (ele[0]+1, ele[1]+1), (ele[0]-1, ele[1]+1)]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for i in range(ele[0] - 1, ele[0] + 2):\n        for j in range(ele[1] - 1, ele[1] + 2):\n            if i!= ele[0] and j!= ele[1] and i >= 0 and j >= 0:\n                sub.append((i, j))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for i in range(-1,2):\n        for j in range(-1,2):\n            if i == 0 and j == 0: continue\n            if -1<=i<=1 and -1<=j<=1:\n                if ele[0]+i >= 0 and ele[1]+j >= 0:\n                    sub.append((ele[0]+i,ele[1]+j))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [ele[0] + 1, ele[1] + 1, ele[0] - 1, ele[1] - 1, ele[0] + 1, ele[1] - 1, ele[0] - 1, ele[1] + 1]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [(x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)]\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = text.replace(\" \", \"_\")\n    result = result.replace(\"_\", \" \")\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Your code here\n    return text.replace(\" \",\"_\")\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ','_')\n    text = text.replace('_',' ')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    list1 = text.split()\n    new_text = ''\n    for i in list1:\n        if i.isalpha():\n            new_text += i.lower()\n        else:\n            new_text += i\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(\" \", \"_\")\n    print(new_text)\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return \"\".join(i if not i.isspace() else \"_\" for i in text)\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if len(text) > 0:\n        s = text.split(\" \")\n        for i in range(len(s)):\n            s[i] = s[i].replace(\" \", \"_\")\n        return \" \".join(s)\n    else:\n        return \"\"\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = num_list.count(0)\n    for _ in range(zero_count):\n        num_list.remove(0)\n        num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeros = []\n    for num in num_list:\n        if num == 0:\n            zeros.append(num)\n        else:\n            continue\n    while len(zeros) > 0:\n        num_list.append(zeros.pop())\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # initialize i, j to the list length and length + 1\n    i = 0\n    j = len(num_list) + 1\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        for j in range(i+1,len(num_list)):\n            if num_list[i]==0 and num_list[j]==0:\n                num_list.insert(i+1,num_list.pop(i))\n                break\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    j = 0\n    for i in range(0,len(num_list)):\n        if num_list[i]!= 0:\n            num_list[j] = num_list[i]\n            j += 1\n        else:\n            num_list[i] = 0\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # num_list = list(num_list)\n    # temp_list = []\n    # for i in num_list:\n    #     if i!= 0:\n    #         temp_list.append(i)\n    #     else:\n    #         temp_list.append(0)\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if num_list == None:\n        return None\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Your code here\n    for i in num_list:\n        if i == 0:\n            num_list.remove(i)\n            num_list.append(i)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    length = len(num_list)\n    index = 0\n    while index < length:\n        if num_list[index] == 0:\n            num_list.pop(index)\n            num_list.append(0)\n            length -= 1\n        else:\n            index += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[count], num_list[i] = num_list[i], num_list[count]\n            count += 1\n    return num_list\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    output = 0\n    for i in range(0,n):\n        for j in range(0,n):\n            output = output + arr[i] ^ arr[j]\n    return output\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    def pair_xor_Sum_helper(arr,i,j,Sum) : \n        if i == j : \n            return 0\n        \n        if arr[i] == arr[j] :\n            return 0\n        else :\n            return arr[i] ^ arr[j]\n        \n        if i == j : \n            return 0\n        \n        \n        return arr[i] ^ arr[j] + pair_xor_Sum_helper(arr,i+1,j-1,Sum)\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    Sum = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            #print(arr[i],arr[j])\n            if arr[i] ^ arr[j] == 0:\n                Sum += arr[i] ^ arr[j]\n    return Sum\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum = xor_sum + (arr[i] ^ arr[j])\n    return xor_sum\n    \ndef pair_xor_Diff(arr,n) : \n    '''\n    Write a python function to find the diff of xor of all pairs of numbers in the given list.\n    '''\n    xor_diff = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_diff = xor_diff + (arr[i] ^ arr[j])\n    return xor_diff\n    \ndef pair_xor_Prod(arr,n) : \n    '''\n    Write a python function to find the product of xor of all pairs of numbers in the given list.\n    '''\n    xor_prod = 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_prod = xor_prod * (arr[i] ^ arr[j])\n    return xor_prod\n    \ndef pair_xor_MinMax(arr,n) : \n    '''\n    Write a python function to find the min and max xor of all pairs of numbers in the given list.\n    '''\n    xor_min = 1\n    xor_max = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_min = xor_min ^ (arr[i] ^ arr[j])\n            xor_max = xor_max ^ (arr[i] ^ arr[j])\n    return xor_min, xor_max\n    \ndef pair_xor_Mod(arr,n) : \n    '''\n    Write a python function to find the mod of xor of all pairs of numbers in the given list.\n    '''\n    xor_mod = 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_mod = xor_mod * (arr[i] ^ arr[j])\n    return xor_mod\n    \ndef pair_xor_Add(arr,n) : \n    '''\n    Write a python function to find the add of xor of all pairs of numbers in the given list.\n    '''\n    add_xor = 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            add_xor = add_xor * (arr[i] ^ arr[j])\n    return add_xor\n    \ndef pair_xor_Div(arr,n) : \n    '''\n    Write a python function to find the div of xor of all pairs of numbers in the given list.\n    '''\n    div_xor = 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            div_xor = div_xor * (arr[i] ^ arr[j])\n    return div_xor\n    \ndef pair_xor_Mean(arr,n) : \n    '''\n    Write a python function to find the mean of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum = xor_sum + (arr[i] ^ arr[j])\n    return xor_sum / n\n    \ndef pair_xor_Median(arr,n) : \n    '''\n    Write a python function to find the median of xor of all pairs of numbers in the given list.\n    '''\n    xor_median = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_median = xor_median + (arr[i] ^ arr[j])\n    return (xor_median + 1) / 2\n    \ndef pair_xor_Mode(arr,n) : \n    '''\n    Write a python function to find the mode of xor of all pairs of numbers in the given list.\n    '''\n    arr_set = set(arr)\n    mode = list(arr_set)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] ^ arr[j]) in mode :\n                mode.remove((arr[i] ^ arr[j]))\n    return mode\n    \ndef pair_xor_Var(arr,n) : \n    '''\n    Write a python function to find the variance of xor of all pairs of numbers in the given list.\n    '''\n    xor_var = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_var = xor_var + (arr[i] ^ arr[j])\n    return (xor_var - pair_xor_Mean(arr,n) * pair_xor_Mean(arr,n)) / (n - 1)\n    \ndef pair_xor_SD(arr,n) : \n    '''\n    Write a python function to find the Standard deviation of xor of all pairs of numbers in the given list.\n    '''\n    return (pair_xor_Var(arr,n)) ** 0.5\n    \ndef pair_xor_Skew(arr,n) : \n    '''\n    Write a python function to find the skew of xor of all pairs of numbers in the given list.\n    '''\n    skew = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            skew = skew + (arr[i] ^ arr[j])\n    return skew / (n * (n - 1))\n    \ndef pair_xor_Kurtosis(arr,n) : \n    '''\n    Write a python function to find the Kurtosis of xor of all pairs of numbers in the given list.\n    '''\n    kurtosis = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            kurtosis = kurtosis + (arr[i] ^ arr[j])\n    return (kurtosis - 3 * pair_xor_Mean(arr,n) * pair_xor_SD(arr,n)) / (n * (n - 1))\n    \ndef pair_xor_Entropy(arr,n) : \n    '''\n    Write a python function to find the entropy of xor of all pairs of numbers in the given list.\n    '''\n    n_0 = 0\n    n_1 = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] == 0 :\n                n_0 = n_0 + 1\n            if arr[i] == 1 :\n                n_1 = n_1 + 1\n    entropy = 0\n    p_0 = n_0 / n\n    p_1 = n_1 / n\n    entropy = - (p_0 * log(p_0, 2)) - (p_1 * log(p_1, 2))\n    return entropy\n    \ndef pair_xor_Joint(arr,n) : \n    '''\n    Write a python function to find the joint entropy of xor of all pairs of numbers in the given list.\n    '''\n    joint_entropy = 0\n    n_0 = 0\n    n_1 = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] == 0 :\n                n_0 = n_0 + 1\n            if arr[i] == 1 :\n                n_1 = n_1 + 1\n    p_0 = n_0 / n\n    p_1 = n_1 / n\n    joint_entropy = - (p_0 * log(p_0, 2)) - (p_1 * log(p_1, 2))\n    return joint_entropy\n    \ndef pair_xor_Correlation(arr,n) : \n    '''\n    Write a python function to find the correlation of xor of all pairs of numbers in the given list.\n    '''\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            xor = xor + (arr[i] ^ arr[j])\n    return xor\n    \narr = [1,2,3,4,5]\nn = len(arr)\nprint(\"XOR of the given list is\",pair_xor_Sum(arr,n))"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    if n == 0 : \n        return 0\n    \n    # initializing summation with 0\n    result = 0\n    # in-built function for each and every pair\n    result += arr[0] ^ arr[1]\n    \n    # iterating over the array\n    for i in range(2,n) : \n        # calling pair_xor_Sum function \n        result += pair_xor_Sum(arr,i-1)\n        \n        # taking the pair_xor_Sum of i-1 and i\n        result ^= arr[i]\n    \n    return result\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n < 2:\n        return 0\n    sum = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            sum += arr[i] ^ arr[j]\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    count = 0\n    if arr == None or n == 0 :\n        return count\n    for i in range(n) :\n        for j in range(i+1,n) :\n            count += arr[i] ^ arr[j]\n    return count\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n) : \n        for j in range(i+1, n) : \n            sum += arr[i] ^ arr[j]\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    output = 0\n    for i in range(0,n) :\n        for j in range(i+1,n) :\n            output = output + (arr[i] ^ arr[j])\n    return output\n    \n    \ndef single_number(arr):\n    '''\n    Write a python function to find the single number in the given array.\n    '''\n    output = 0\n    for i in range(0,len(arr)) :\n        output = output ^ arr[i]\n    return output\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for num in iterable:\n        hq.heappush(heap, num)\n    return_array = []\n    while heap:\n        return_array.append(hq.heappop(heap))\n    return return_array\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for i in iterable:\n        hq.heappush(heap, i)\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    for i in range(1, len(iterable)):\n        iterable[i], iterable[0] = iterable[0], iterable[i]\n        hq.heapify(iterable)\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    res = []\n    for x in iterable:\n        if len(h) == 0:\n            h.append(x)\n        else:\n            if x < h[0]:\n                hq.heappush(h, x)\n            else:\n                hq.heappush(h, h[0])\n                hq.heappush(h, x)\n    \n    while len(h) > 0:\n        res.append(hq.heappop(h))\n    return res\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    size = len(iterable)\n    q = []\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq = []\n    for i in iterable:\n        hq.append(i)\n    heapq.heapify(hq)\n    for i in range(len(hq)-1):\n        hq[0], hq[i] = hq[i], hq[0]\n        heapq.heapify(hq)\n    return hq\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hp = []\n    for i in iterable:\n        hq.heappush(hp, i)\n    sorted_iterable = []\n    while len(hp)!= 0:\n        sorted_iterable.append(hq.heappop(hp))\n    return sorted_iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return iterable\n    '''\n    The function above was written using heapsort, which can be seen in the following program:\n    '''\n    def heap_sort(iterable):\n        iterable = iterable[::-1]\n        hq.heapify(iterable)\n        return iterable\n        '''\n        We can see that this function is exactly the same as the original function, except we call it\n        heap_sort() instead of heap_sort()\n        '''\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost-sale_amount <= 0\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost>sale_amount:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return \"No Profit and Loss\"\n    elif actual_cost >= sale_amount:\n        return \"Profit\"\n    else:\n        return \"Loss\"\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == 0 and sale_amount == 0:\n        return True\n    elif actual_cost == 0 or sale_amount == 0:\n        return False\n    elif actual_cost > 0 and sale_amount > 0:\n        if actual_cost >= sale_amount:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return 'The sale amount and cost are equal'\n    else:\n        return 'The sale amount and cost are not equal'\n    \n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # if actual_cost - sale_amount > 0:\n    #     print(f'Actual cost of the product is {actual_cost} and Sale amount is {sale_amount}')\n    #     print(f'The product has no profit and no loss')\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost-sale_amount>=0:\n        print(\"No Profit or Loss\")\n    else:\n        print(\"Profit and Loss\")\nnoprofit_noloss(actual_cost,sale_amount)\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        print(\"no profit or loss\")\n    elif actual_cost == sale_amount:\n        print(\"no profit or loss\")\n    else:\n        print(\"profit or loss\")\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n    \n    \n    \ndef find_profit(actual_cost,sale_amount):\n    '''\n    Write a function to find profit\n    '''\n    profit = 0\n    if actual_cost < sale_amount:\n        profit = sale_amount - actual_cost\n        \n    return profit\n    \n    \n    \ndef find_loss(actual_cost,sale_amount):\n    '''\n    Write a function to find loss\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n        \n    return 0\n    \n    \n    \ndef find_max_profit(actual_cost,sale_amount):\n    '''\n    Write a function to find the max profit\n    '''\n    profit = 0\n    if actual_cost < sale_amount:\n        profit = sale_amount - actual_cost\n        \n    return profit\n    \n    \n    \ndef find_min_loss(actual_cost,sale_amount):\n    '''\n    Write a function to find the min loss\n    '''\n    loss = 0\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        \n    return loss\n    \n    \n    \ndef find_average_profit(actual_cost,sale_amount):\n    '''\n    Write a function to find the average profit\n    '''\n    profit = 0\n    if actual_cost < sale_amount:\n        profit = sale_amount - actual_cost\n        \n    return profit\n    \n    \n    \ndef find_average_loss(actual_cost,sale_amount):\n    '''\n    Write a function to find the average loss\n    '''\n    loss = 0\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        \n    return loss\n    \n    \n    \ndef main():\n    actual_cost = 7\n    sale_amount = 5\n    print(\"Number of months: \",number_of_months(actual_cost,sale_amount))\n    print(\"The profit/losses in each month: \",profit_loss(actual_cost,sale_amount))\n    print(\"Total number of months: \",total_number_of_months(actual_cost,sale_amount))\n    print(\"The total profit/loss in a single month: \",total_profit_loss(actual_cost,sale_amount))\n    print(\"The profit of the investment: \",profit_of_investment(actual_cost,sale_amount))\n    print(\"The loss of the investment: \",loss_of_investment(actual_cost,sale_amount))\n    print(\"The amount saved/lost in each month: \",savings_loss_per_month(actual_cost,sale_amount))\n    print(\"The number of months: \",no_of_months(actual_cost,sale_amount))\n    print(\"The profit for a year: \",profit_in_a_year(actual_cost,sale_amount))\n    print(\"The profit for a month: \",profit_in_a_month(actual_cost,sale_amount))\n    print(\"The no. of months until the minimum profit is achieved: \",min_loss_per_month(actual_cost,sale_amount))\n    print(\"The no. of months until the max profit is achieved: \",max_profit_per_month(actual_cost,sale_amount))\n    print(\"No. of months until the max profit: \",max_profit(actual_cost,sale_amount))\n    print(\"No. of months until the min loss: \",min_loss(actual_cost,sale_amount))\n    print(\"The minimum profit: \",noprofit_noloss(actual_cost,sale_amount))\n    print(\"The profit: \",find_profit(actual_cost,sale_amount))\n    print(\"The loss: \",find_loss(actual_cost,sale_amount))\n    print(\"The max profit: \",find_max_profit(actual_cost,sale_amount))\n    print(\"The min loss: \",find_min_loss(actual_cost,sale_amount))\n    print(\"The average profit: \",find_average_profit(actual_cost,sale_amount))\n    print(\"The average loss: \",find_average_loss(actual_cost,sale_amount))\n    \n    \n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    #write the function here\n    if actual_cost - sale_amount == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n    e = 0.00028\n    f = 1.75\n    g = 0.11\n    return (v*v)*((a+((t+10.0) / 5.0)*(a+((t+10.0) / 5.0)*(c+(((t+10.0)/5.0)*(c+((t+10.0)/5.0)*d)))))-(e+((v*v)/(4.0*(v*v)))))-(f+(((v*v)*(v*v))/(((v*v)*(v*v)) + (g*(t+273.15)))))\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # the formula: T = 35.74 + 0.6215*v + 35.75*t - 35.75*t**0.16 + 0.4275*t**0.16\n    # where T is the temperature in celsius and v is the wind speed in km/h\n    \n    \n    # initialisation\n    \n    t = t+273.15\n    v = v * 0.1\n    \n    v_a = math.pow(v, 0.16)\n    temp_a = 35.74 + 0.6215*v + 35.75*t - 35.75*v_a\n    \n    v_b = math.pow(v, 0.16)\n    temp_b = 35.75 + 0.4275*v_b\n    \n    temp = t*temp_a/temp_b\n    \n    return int(temp)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n    e = 0.0811\n    f = 0.1277\n    g = 0.0592\n    h = -0.2242\n    i = 1.812\n    j = 0.4155\n    k = 0.37\n    l = 0.1255\n    m = 1.325\n    n = 0.1612\n    o = 0.1194\n    p = 2.056\n    q = 1.12\n    r = 0.7536\n    s = 0.4272\n    t1 = (a * (t - 273.15)) + (b * v**0.16)\n    t2 = t1 + (((17.27 * t1) / (t1 + 237.3)) * v**0.16)\n    t3 = t2 - ((((17.27 * t2) / (t2 + 237.3)) * (v**0.16)) * 0.6215)\n    t4 = t3 + (c * (t3 - 32))\n    t5 = t4 - (((((c * (t3 - 32)) / (t4 - 32)) * (v**0.16)) * 0.6215) * 0.4275)\n    t6 = t5 + (d * v**0.16)\n    t7 = t6 - (((((d * v**0.16) / (t6 + 237.3)) * 0.6215) * 0.4275) * 0.7536)\n    t8 = t7 + (e * (t7 - 32))\n    t9 = t8 - (((((e * (t7 - 32)) / (t8 - 32)) * (v**0.16)) * 0.6215) * 0.4275)\n    t10 = t9 + (f * v**0.16)\n    t11 = t10 - (((((f * v**0.16) / (t10 + 237.3)) * 0.6215) * 0.4275) * 0.7536)\n    t12 = t11 + (g * (t11 - 32))\n    t13 = t12 - (((((g * (t11 - 32)) / (t12 - 32)) * (v**0.16)) * 0.6215) * 0.4275)\n    t14 = t13 - (h * v**0.16)\n    t15 = t14 - (((((h * v**0.16) / (t14 - 32)) * (v**0.16)) * 0.6215) * 0.4275)\n    t16 = t15 + (i * (t15 - 32))\n    t17 = t16 - (((((i * (t15 - 32)) / (t16 - 32)) * (v**0.16)) * 0.6215) * 0.4275)\n    t18 = t17 + (j * v**0.16)\n    t19 = t18 - (((((j * v**0.16) / (t18 - 32)) * 0.6215) * 0.4275) * 0.7536)\n    t20 = t19 + (k * (t19 - 32))\n    t21 = t20 - (((((k * (t19 - 32)) / (t20 - 32)) * (v**0.16)) * 0.6215) * 0.4275)\n    t22 = t21 + (l * v**0.16)\n    t23 = t22 - (((((l * v**0.16) / (t22 - 32)) * 0.6215) * 0.4275) * 0.7536)\n    t24 = t23 + (m * (t23 - 32))\n    t25 = t24 - (((((m * (t23 - 32)) / (t24 - 32)) * (v**0.16)) * 0.6215) * 0.4275)\n    t26 = t25 + (n * v**0.16)\n    t27 = t26 - (((((n * v**0.16) / (t26 - 32)) * 0.6215) * 0.4275) * 0.7536)\n    t28 = t27 + (o * (t27 - 32))\n    t29 = t28 - (((((o * (t27 - 32)) / (t28 - 32)) * (v**0.16)) * 0.6215) * 0.4275)\n    t30 = t29 + (p * v**0.16)\n    t31 = t30 - (((((p * v**0.16) / (t30 - 32)) * 0.6215) * 0.4275) * 0.7536)\n    t32 = t31 + (q * v**0.16)\n    t33 = t32 - (((((q * v**0.16) / (t32 - 32)) * (v**0.16)) * 0.6215) * 0.4275)\n    t34 = t33 + (r * v**0.16)\n    t35 = t34 - (((((r * v**0.16) / (t34 - 32)) * 0.6215) * 0.4275) * 0.7536)\n    t36 = t35 + (s * v**0.16)\n    t37 = t36 - (((((s * v**0.16) / (t36 - 32)) * (v**0.16)) * 0.6215) * 0.4275)\n    t38 = t37 + (t1)\n    t39 = t38 - (((((t1) / (t38)) * (v**0.16)) * 0.6215) * 0.4275)\n    t40 = t39 + (t2)\n    t41 = t40 - (((((t2) / (t40)) * (v**0.16)) * 0.6215) * 0.4275)\n    t42 = t41 + (t3)\n    t43 = t42 - (((((t3) / (t42)) * (v**0.16)) * 0.6215) * 0.4275)\n    t44 = t43 + (t4)\n    t45 = t44 - (((((t4) / (t44)) * (v**0.16)) * 0.6215) * 0.4275)\n    t46 = t45 + (t5)\n    t47 = t46 - (((((t5) / (t46)) * (v**0.16)) * 0.6215) * 0.4275)\n    t48 = t47 + (t6)\n    t49 = t48 - (((((t6) / (t48)) * (v**0.16)) * 0.6215) * 0.4275)\n    t50 = t49 + (t7)\n    t51 = t50 - (((((t7) / (t50)) * (v**0.16)) * 0.6215) * 0.4275)\n    t52 = t51 + (t8)\n    t53 = t52 - (((((t8) / (t52)) * (v**0.16)) * 0.6215) * 0.4275)\n    t54 = t53 + (t9)\n    t55 = t54 - (((((t9) / (t54)) * (v**0.16)) * 0.6215) * 0.4275)\n    t56 = t55 + (t10)\n    t57 = t56 - (((((t10) / (t56)) * (v**0.16)) * 0.6215) * 0.4275)\n    t58 = t57 + (t11)\n    t59 = t58 - (((((t11) / (t58)) * (v**0.16)) * 0.6215) * 0.4275)\n    t60 = t59 + (t12)\n    t61 = t60 - (((((t12) / (t60)) * (v**0.16)) * 0.6215) * 0.4275)\n    t62 = t61 + (t13)\n    t63 = t62 - (((((t13) / (t62)) * (v**0.16)) * 0.6215) * 0.4275)\n    t64 = t63 + (t14)\n    t65 = t64 - (((((t14"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #since wind chill is based on t, the temperature in farenhite will change\n    tF=(t+459.67)*(5/9)\n    u=v*(1.75+0.6215*tF)\n    return u\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    ws = 6.11 * math.exp(17.27 * v / (237.7 + t))\n    return ws\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v == 0:\n        return 0\n    v0 = v*0.622\n    tc = t + 459.67\n    k = 35.74 + 0.6215*tc + 0.4275*v0 + 0.00146*v0**2\n    return int(k)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill = 35.74 + 0.6215 * t - 35.75 * math.pow(v,0.16) + 0.4275 * t * math.pow(v,0.16)\n    return int(chill)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n    e = 0.00028\n    f = -44.9\n    g = 0.62\n    h = 0.0283\n    wci = a + ((b * t) - (c * (t **.16)) + (d * (t **.16) * (v **.16))) * e + (f + (g * t) + (h * v))\n    return math.floor(wci)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill_index = 35.74 + (0.6215 * t) - (35.75 * math.pow((v/21),0.16)) + (0.4275 * t * math.pow((v/21),0.16))\n    return wind_chill_index\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v2 = (v * 1.8)**2\n    a = 35.74 + 0.6215 * t + 0.4275 * t**0.16 + 0.0065 * t**0.16 * v2\n    a = round(a,0)\n    return a\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    nam_summ = 0\n    for name in sample_names:\n        if name[0].islower():\n            nam_summ += len(name)\n    return nam_summ\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = []\n    return sample_names\n    #sample_names = ['a','b','c','d']\n    #return sum([len(name) for name in sample_names if name[0].isupper()])\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # list of sample_names\n    sample_names = sample_names\n    # list of sample_names that are not starting with a lowercase letter\n    sample_names_list = []\n    for i in range(len(sample_names)):\n        if sample_names[i][0] not in string.ascii_lowercase:\n            sample_names_list.append(sample_names[i])\n    # sum the length of the names that are not starting with a lowercase letter\n    sample_names_length = 0\n    for j in range(len(sample_names_list)):\n        sample_names_length = sample_names_length + len(sample_names_list[j])\n    # return the sum of the length of the names that are not starting with a lowercase letter\n    return sample_names_length\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # List comprehension\n    # return sum([len(name) for name in sample_names if name[0].isupper()])\n    # return sum([len(name) for name in sample_names if not name[0].isupper()])\n    # return sum([len(name) for name in sample_names if name.isupper()])\n    # return sum([len(name) for name in sample_names])\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names=list(filter(lambda name: name[0].isupper(),sample_names))\n    return len(sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total = 0\n    for i in sample_names:\n        if i[0].islower():\n            continue\n        total += len(i)\n    return total\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    n = 0\n    for i in sample_names:\n        if len(i) <= 1:\n            continue\n        if i[0].islower():\n            n += len(i)\n    return n\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    lengths = 0\n    for name in sample_names:\n        if len(name) > 0 and name[0].isupper():\n            lengths += len(name)\n    return lengths\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(name) for name in sample_names if name[0].isupper())\n    "
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    result = 0\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\(.*\\)', '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # your code here\n    return items.replace('(','').replace(')','')\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items) == 0:\n        return items\n    else:\n        if items[0] == \"(\":\n            return remove_parenthesis(items[1:])\n        elif items[len(items)-1] == \")\":\n            return remove_parenthesis(items[:-1])\n        else:\n            return items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while \"()\" in items:\n        items = items.replace(\"()\",'')\n    while \"()\" in items:\n        items = items.replace(\"( )\",'')\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i in range(len(items)):\n        if items[i] == '(':\n            items.remove(items[i])\n            items.remove(items[i])\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.strip('()')\ndef replace_parenthesis(items):\n    '''\n    Write a function to replace the parenthesis and what is inbetween them from a string.\n    '''\n    # return items.replace('(','').replace(')','')\n    return items.replace(' ','').replace('(','').replace(')','')\ndef reverse_string(items):\n    '''\n    Write a function to reverse a string.\n    '''\n    return items[::-1]\ndef is_palindrome(items):\n    '''\n    Write a function to check if the given string is a palindrome or not.\n    '''\n    if items == reverse_string(items):\n        return True\n    else:\n        return False\ndef remove_duplicate_letters(items):\n    '''\n    Write a function to remove the duplicate letters in a string.\n    '''\n    if type(items) == str:\n        items = items.lower()\n        temp = items\n        while ''.join(set(temp))!= temp:\n            temp = ''.join(set(temp))\n        return temp\n    else:\n        raise Exception('Input should be a string')\ndef check_if_anagram(items):\n    '''\n    Write a function to check if the given string is an anagram or not.\n    '''\n    if type(items) == str:\n        items = items.lower()\n        letters_dict = {}\n        for i in range(len(items)):\n            if items[i] in letters_dict:\n                letters_dict[items[i]] += 1\n            else:\n                letters_dict[items[i]] = 1\n        for i in range(len(items)):\n            if items[i] in letters_dict and letters_dict[items[i]] > 1:\n                letters_dict[items[i]] -= 1\n            else:\n                return False\n        return True\n    else:\n        raise Exception('Input should be a string')\ndef delete_space(items):\n    '''\n    Write a function to delete the space from a string.\n    '''\n    if type(items) == str:\n        return items.replace(' ','')\n    else:\n        raise Exception('Input should be a string')\ndef get_unique_characters(items):\n    '''\n    Write a function to get the unique characters in a string.\n    '''\n    if type(items) == str:\n        return list(set(items))\n    else:\n        raise Exception('Input should be a string')\ndef get_length(items):\n    '''\n    Write a function to get the length of a string.\n    '''\n    if type(items) == str:\n        return len(items)\n    else:\n        raise Exception('Input should be a string')\ndef get_first_index(items,items2):\n    '''\n    Write a function to get the index of the first occurence of a given element in the list.\n    '''\n    if type(items) == list:\n        return items.index(items2)\n    else:\n        raise Exception('Input should be a list')\ndef get_second_index(items,items2):\n    '''\n    Write a function to get the index of the second occurence of a given element in the list.\n    '''\n    if type(items) == list:\n        index = 0\n        if items2 in items:\n            while index < len(items):\n                if items2 == items[index]:\n                    return index\n                else:\n                    index += 1\n        else:\n            return -1\n    else:\n        raise Exception('Input should be a list')\ndef get_count_of_occurrence(items,items2):\n    '''\n    Write a function to get the count of the occurence of a given element in the list.\n    '''\n    if type(items) == list:\n        count = 0\n        if items2 in items:\n            for i in items:\n                if items2 == i:\n                    count += 1\n            return count\n        else:\n            return -1\n    else:\n        raise Exception('Input should be a list')\ndef get_first_occurrence(items,items2):\n    '''\n    Write a function to get the index of the first occurence of a given element in the list.\n    '''\n    if type(items) == list:\n        index = 0\n        if items2 in items:\n            while index < len(items):\n                if items2 == items[index]:\n                    return items2\n                index += 1\n        else:\n            return -1\n    else:\n        raise Exception('Input should be a list')\ndef get_second_occurrence(items,items2):\n    '''\n    Write a function to get the index of the second occurence of a given element in the list.\n    '''\n    if type(items) == list:\n        index = 0\n        if items2 in items:\n            while index < len(items):\n                if items2 == items[index]:\n                    return items2\n                index += 1\n        else:\n            return -1\n    else:\n        raise Exception('Input should be a list')\ndef get_count_of_occurrence_number_of_words(items,items2):\n    '''\n    Write a function to get the count of the occurence of a given element in the list.\n    '''\n    if type(items) == list:\n        count = 0\n        if items2 in items:\n            for i in items:\n                if items2 == i:\n                    count += 1\n            return count\n        else:\n            return -1\n    else:\n        raise Exception('Input should be a list')\ndef get_count_of_words(items):\n    '''\n    Write a function to get the count of the occurence of a given element in the list.\n    '''\n    if type(items) == list:\n        count = 0\n        for i in items:\n            if type(i) == list:\n                count += len(i)\n            else:\n                count += 1\n        return count\n    else:\n        raise Exception('Input should be a list')\ndef get_count_of_characters(items):\n    '''\n    Write a function to get the count of the occurence of a given element in the list.\n    '''\n    if type(items) == list:\n        count = 0\n        for i in items:\n            if type(i) == list:\n                count += len(i)\n            else:\n                count += 1\n        return count\n    else:\n        raise Exception('Input should be a list')\ndef get_count_of_characters_of_word(items,items2):\n    '''\n    Write a function to get the count of the occurence of a given element in the list.\n    '''\n    if type(items) == list:\n        count = 0\n        for i in items:\n            if type(i) == list:\n                count += len(i)\n            else:\n                count += 1\n            if items2 in i:\n                return count\n        return -1\n    else:\n        raise Exception('Input should be a list')\ndef get_count_of_substring(items,items2):\n    '''\n    Write a function to get the count of the occurence of a given element in the list.\n    '''\n    if type(items) == list:\n        count = 0\n        for i in items:\n            if i.startswith(items2):\n                count += 1\n        return count\n    else:\n        raise Exception('Input should be a list')\ndef get_length_of_longest_substring(items):\n    '''\n    Write a function to get the length of the longest substring.\n    '''\n    if type(items) == list:\n        substring = items[0]\n        substring_length = 0\n        index = 0\n        for i in items:\n            if index > len(substring) - 1:\n                substring = i\n                substring_length += 1\n            elif i == substring[0:len(i)]:\n                substring = substring[len(i):] + i\n                substring_length += 1\n            index += 1\n        return substring_length\n    else:\n        raise Exception('Input should be a list')\ndef get_average(items):\n    '''\n    Write a function to get the average of the items in a list.\n    '''\n    i"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for item in items:\n        if item == \")\":\n            continue\n        else:\n            return item\ndef remove_brackets(items):\n    '''\n    Write a function to remove the brackets and what is inbetween them from a string.\n    '''\n    for item in items:\n        if item == \"]\":\n            continue\n        else:\n            return item\ndef remove_comma(items):\n    '''\n    Write a function to remove the comma and what is inbetween them from a string.\n    '''\n    for item in items:\n        if item == \",\":\n            continue\n        else:\n            return item\ndef is_divisible_by_two(items):\n    '''\n    Write a function to check if a number is divisible by 2.\n    '''\n    for item in items:\n        if item % 2 == 0:\n            return True\n        else:\n            return False\ndef remove_brackets_and_dot(items):\n    '''\n    Write a function to remove the brackets and what is inbetween them from a string.\n    '''\n    for item in items:\n        if item == \"(\" or item == \")\":\n            continue\n        else:\n            return item\ndef is_anagram(word1,word2):\n    '''\n    Write a function that checks if the letters in word1 and word2 are anagrams.\n    '''\n    word1 = word1.lower()\n    word2 = word2.lower()\n    word1 = remove_parenthesis(word1)\n    word2 = remove_parenthesis(word2)\n    word1 = remove_brackets(word1)\n    word2 = remove_brackets(word2)\n    word1 = remove_comma(word1)\n    word2 = remove_comma(word2)\n    word1 = remove_brackets_and_dot(word1)\n    word2 = remove_brackets_and_dot(word2)\n    word1 = remove_parenthesis(word1)\n    word2 = remove_parenthesis(word2)\n    if word1 == word2:\n        return True\n    else:\n        return False\ndef find_difference(list1,list2):\n    '''\n    Write a function to find the difference between two lists.\n    '''\n    for item in list1:\n        if item not in list2:\n            return item\ndef find_first_missing_letter(word):\n    '''\n    Write a function that returns the first missing letter in a word.\n    '''\n    word = word.lower()\n    for letter in word:\n        if word.count(letter) == 1:\n            return letter\ndef is_pangram(sentence):\n    '''\n    Write a function to check if a sentence is a pangram.\n    '''\n    sentence = sentence.lower()\n    sentence = remove_parenthesis(sentence)\n    sentence = remove_brackets(sentence)\n    sentence = remove_comma(sentence)\n    sentence = remove_parenthesis(sentence)\n    sentence = remove_brackets(sentence)\n    sentence = remove_parenthesis(sentence)\n    for letter in sentence:\n        if letter!= \" \":\n            return True\n    return False\ndef is_triangle(items):\n    '''\n    Write a function to check if a number is a triangle number.\n    '''\n    for item in items:\n        if item <= 0:\n            return False\n    return True\ndef convert_to_roman(num):\n    '''\n    Write a function to convert a decimal to a roman numeral.\n    '''\n    roman = \"\"\n    if num >= 1000:\n        roman = roman + \"M\"\n        num = num - 1000\n    if num >= 900:\n        roman = roman + \"CM\"\n        num = num - 900\n    if num >= 500:\n        roman = roman + \"D\"\n        num = num - 500\n    if num >= 400:\n        roman = roman + \"CD\"\n        num = num - 400\n    if num >= 100:\n        roman = roman + \"C\"\n        num = num - 100\n    if num >= 90:\n        roman = roman + \"XC\"\n        num = num - 90\n    if num >= 50:\n        roman = roman + \"L\"\n        num = num - 50\n    if num >= 40:\n        roman = roman + \"XL\"\n        num = num - 40\n    if num >= 10:\n        roman = roman + \"X\"\n        num = num - 10\n    if num >= 9:\n        roman = roman + \"IX\"\n        num = num - 9\n    if num >= 5:\n        roman = roman + \"V\"\n        num = num - 5\n    if num >= 4:\n        roman = roman + \"IV\"\n        num = num - 4\n    if num >= 1:\n        roman = roman + \"I\"\n        num = num - 1\n    return roman\ndef is_perfect_square(num):\n    '''\n    Write a function that checks if a number is perfect square or not.\n    '''\n    if num >= 0:\n        return num == int(math.sqrt(num))**2\n    else:\n        return False\ndef is_palindrome(word):\n    '''\n    Write a function to check if a word is a palindrome.\n    '''\n    word = word.lower()\n    word = remove_parenthesis(word)\n    word = remove_brackets(word)\n    word = remove_comma(word)\n    word = remove_parenthesis(word)\n    word = remove_brackets(word)\n    word = remove_parenthesis(word)\n    return word == word[::-1]\ndef list_of_numbers(items):\n    '''\n    Write a function to return a list of numbers.\n    '''\n    for item in items:\n        if item == \" \":\n            continue\n        else:\n            return item\ndef sum_of_list(items):\n    '''\n    Write a function to return a sum of the list.\n    '''\n    for item in items:\n        if item == \" \":\n            continue\n        else:\n            return item\ndef remove_parenthesis_and_comma(items):\n    '''\n    Write a function to remove the parenthesis and comma from a string.\n    '''\n    for item in items:\n        if item == \"(\" or item == \")\":\n            continue\n        else:\n            return item\ndef has_alternating_characters(items):\n    '''\n    Write a function to check if a string has alternating characters.\n    '''\n    for item in items:\n        if item == \" \":\n            continue\n        else:\n            return True\n    return False\ndef is_palindrome_rec(items):\n    '''\n    Write a function to check if a string is palindrome.\n    '''\n    if items == \"\":\n        return True\n    else:\n        return items == items[::-1]\ndef find_longest_word(list1):\n    '''\n    Write a function that returns the longest word in a sentence.\n    '''\n    for item in list1:\n        if item == \" \":\n            continue\n        else:\n            return item\ndef is_valid_email(email):\n    '''\n    Write a function that checks if an email is valid.\n    '''\n    email = email.lower()\n    if \"@\" not in email:\n        return False\n    if \".\" not in email:\n        return False\n    if len(email.split(\".\")) == 2:\n        return True\n    else:\n        return False\ndef roman_to_int(roman):\n    '''\n    Write a function to convert a roman numeral to an integer.\n    '''\n    roman = roman.lower()\n    roman = remove_parenthesis(roman)\n    roman = remove_brackets(roman)\n    roman = remove_comma(roman)\n    roman = remove_parenthesis(roman)\n    roman = remove_brackets(roman)\n    roman = remove_parenthesis(roman)\n    roman = remove_parenthesis(roman)\n    roman = remove_parenthesis(roman)\n    roman = remove_parenthesis(roman)\n    roman = remove_parenthesis(roman)\n    roman = remove_parenthesis(roman)\n    roman = remove_parenthesis(roman)\n    roman = remov"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.split( )\n    for i in range(len(items)):\n        if items[i] == \"(\":\n            items.pop(i)\n    for i in range(len(items)):\n        if items[i] == \")\":\n            items.pop(i)\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    s = \"\"\n    for i in items:\n        if i in '{}()' and i!= '(' and i!= ')' and i!= '\\\"' and i!= '\\'':\n            s += i\n    return s\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    regex = re.compile('\\(.*\\)|\\(.*\\)|\\(.*\\)')\n    return re.sub(regex,'',items)\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    assert n > 0\n    assert isinstance(n, int)\n    return ((n-1)*(n+1))//2\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 1\n    while True:\n        a += 1\n        if (a+1)**2 == n:\n            return a\n        elif (a+1)**2 > n:\n            return -1\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return sum([int(i) for i in range(1, n+1)])\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n==0: return 1\n    if n==1: return 1\n    if n==2: return 1\n    if n==3: return 1\n    if n==4: return 1\n    if n==5: return 1\n    if n==6: return 1\n    if n==7: return 1\n    if n==8: return 1\n    if n==9: return 1\n    if n==10: return 1\n    if n==11: return 1\n    if n==12: return 1\n    if n==13: return 1\n    if n==14: return 1\n    if n==15: return 1\n    if n==16: return 1\n    if n==17: return 1\n    if n==18: return 1\n    if n==19: return 1\n    if n==20: return 1\n    if n==21: return 1\n    if n==22: return 1\n    if n==23: return 1\n    if n==24: return 1\n    if n==25: return 1\n    if n==26: return 1\n    if n==27: return 1\n    if n==28: return 1\n    if n==29: return 1\n    if n==30: return 1\n    if n==31: return 1\n    if n==32: return 1\n    if n==33: return 1\n    if n==34: return 1\n    if n==35: return 1\n    if n==36: return 1\n    if n==37: return 1\n    if n==38: return 1\n    if n==39: return 1\n    if n==40: return 1\n    if n==41: return 1\n    if n==42: return 1\n    if n==43: return 1\n    if n==44: return 1\n    if n==45: return 1\n    if n==46: return 1\n    if n==47: return 1\n    if n==48: return 1\n    if n==49: return 1\n    if n==50: return 1\n    if n==51: return 1\n    if n==52: return 1\n    if n==53: return 1\n    if n==54: return 1\n    if n==55: return 1\n    if n==56: return 1\n    if n==57: return 1\n    if n==58: return 1\n    if n==59: return 1\n    if n==60: return 1\n    if n==61: return 1\n    if n==62: return 1\n    if n==63: return 1\n    if n==64: return 1\n    if n==65: return 1\n    if n==66: return 1\n    if n==67: return 1\n    if n==68: return 1\n    if n==69: return 1\n    if n==70: return 1\n    if n==71: return 1\n    if n==72: return 1\n    if n==73: return 1\n    if n==74: return 1\n    if n==75: return 1\n    if n==76: return 1\n    if n==77: return 1\n    if n==78: return 1\n    if n==79: return 1\n    if n==80: return 1\n    if n==81: return 1\n    if n==82: return 1\n    if n==83: return 1\n    if n==84: return 1\n    if n==85: return 1\n    if n==86: return 1\n    if n==87: return 1\n    if n==88: return 1\n    if n==89: return 1\n    if n==90: return 1\n    if n==91: return 1\n    if n==92: return 1\n    if n==93: return 1\n    if n==94: return 1\n    if n==95: return 1\n    if n==96: return 1\n    if n==97: return 1\n    if n==98: return 1\n    if n==99: return 1\n    if n==100: return 1\n    if n==101: return 1\n    if n==102: return 1\n    if n==103: return 1\n    if n==104: return 1\n    if n==105: return 1\n    if n==106: return 1\n    if n==107: return 1\n    if n==108: return 1\n    if n==109: return 1\n    if n==110: return 1\n    if n==111: return 1\n    if n==112: return 1\n    if n==113: return 1\n    if n==114: return 1\n    if n==115: return 1\n    if n==116: return 1\n    if n==117: return 1\n    if n==118: return 1\n    if n==119: return 1\n    if n==120: return 1\n    if n==121: return 1\n    if n==122: return 1\n    if n==123: return 1\n    if n==124: return 1\n    if n==125: return 1\n    if n==126: return 1\n    if n==127: return 1\n    if n==128: return 1\n    if n==129: return 1\n    if n==130: return 1\n    if n==131: return 1\n    if n==132: return 1\n    if n==133: return 1\n    if n==134: return 1\n    if n==135: return 1\n    if n==136: return 1\n    if n==137: return 1\n    if n==138: return 1\n    if n==139: return 1\n    if n==140: return 1\n    if n==141: return 1\n    if n==142: return 1\n    if n==143: return 1\n    if n==144: return 1\n    if n==145: return 1\n    if n==146: return 1\n    if n==147: return 1\n    if n==148: return 1\n    if n==149: return 1\n    if n==150: return 1\n    if n==151: return 1\n    if n==152: return 1\n    if n==153: return 1\n    if n==154: return 1\n    if n==155: return 1\n    if n==156: return 1\n    if n==157: return 1\n    if n==158: return 1\n    if n==159: return 1\n    if n==160: return 1\n    if n==161: return 1\n    if n==162: return 1\n    if n==163: return 1\n    if n==164: return 1\n    if n==165: return 1\n    if n==166: return 1\n    if n==167: return 1\n    if n==168: return 1\n    if n==169: return 1\n    if n==170: return 1\n    if n==171: return 1\n    if n==172: return 1\n    if n==173: return 1\n    if n==174: return 1\n    if n==175: return 1\n    if n==176: return 1\n    if n==177: return 1\n    if n==178: return 1\n    if n==179: return 1\n    if n==180: return 1\n    if n==181: return 1\n    if n==182: return 1\n    if n==183: return 1\n    if n==184: return 1\n    if n==185: return 1\n    if n==186: return 1\n    if n==187: return 1\n    if n==188: return 1\n    if n==189: return 1\n    if n==190: return 1\n    if n==191: return 1\n    if n==192: return 1\n    if n==193: return 1\n    if n==194: return 1\n    if n==195: return 1\n    if n==196: return 1\n    if n==197: return 1\n    if n==198: return 1\n    if n==199: return 1\n    if n==200: return 1\n    if n==201: return 1\n    if n==202: return 1\n    if n==203: return 1\n    if n==204: return 1\n    if n==205: return 1\n    if n==206: return 1\n    if n==207: return 1\n    if n==208: return 1\n    if n==209: return 1\n    if n==210: return 1\n    if n==211: return 1\n    if n==212: return 1\n    if n==213: return 1\n    if n==214: return 1\n    if n==215: return 1\n    if n==216: return 1\n    if n==217: return 1\n    if n==218: return 1\n    if n==219: return 1\n    if n==220: return 1\n    if n==221: return 1\n    if n==222: return 1\n    if n==223: return 1"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = n+1\n    return sum(map(lambda x: (x*(x+1)), range(1,n)))\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Start off with 1 as the diagonal\n    n = 1\n    while n <= n ** 2:\n        # Find the number of rows, the number of columns, and the last number of the \n        # matrix and the the last diagonal number\n        rows = n\n        cols = 2 * n - 1\n        diag = n + 1\n        \n        # If we haven't found the answer yet, and we haven't hit the limit, keep searching\n        while diag < rows * cols:\n            # If the number of columns is divisible by the number of diagonals,\n            # then this is the non-diagonal number\n            if cols % diag == 0:\n                # Increment by the number of diagonals\n                n += diag\n                break\n            # Otherwise, we can't find this number and try again\n            diag += 1\n    return n\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = int(n)\n    \n    if n % 2 == 1:\n        # non-diagonal\n        n -= 1\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1: \n        return 1\n    else: \n        return (n - 1)*(n**2 - 1)/2 + (n - 2)*(n**2 - 2)/2 + 1\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Here is the equation\n    # return ((n * (n + 1)) / 2) + 1\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    \n    def get_nth_nonagonal(n):\n        \n        # The base case\n        if n == 1:\n            return 2\n        # The recursive step\n        else:\n            return get_nth_nonagonal(n-1) + n - 1\n    return get_nth_nonagonal(n)"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'z|the|a|an|of|and|or|but|by|be|is|are|was|were|am|are|was|were|been|has|have|had|hasn|hadn|hadn't|hasn't|haven't|hadn't|haven|haven|hadn|had|had|hadn|had|has|haven|haven|hasn|hasn't|haven't|hasn't|has|hadn|had|hadn't|hadn't|hadn|had|hadn|hadn|had|hadn't|hadn't|hadn't|hadn|hadn't|hadn't|hadn|had|hadn't|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn't|hadn|hadn't|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|hadn|hadn't|had"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return text[1:].split(' ')[0]\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    regex = r'\\bz\\b'\n    match = re.search(regex, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    new_text = re.sub('[a-z]*[A-Z]*\\Z','',text)\n    return text == new_text\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return (text[0] == 'z' or text[-1] == 'z') and text.find('z')!= -1\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'^(\\s|\\w)+\\sz(\\s|\\w)+\\s')\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # new_text = re.search(r\"[A-Za-z]\\Z|[A-Za-z]\\Z|[A-Za-z]|\\Z\",text)\n    # new_text = re.search(r\"^[A-Za-z]*$\",text)\n    # new_text = re.search(r\"^[A-Za-z]\\Z|[A-Za-z]\\Z|[A-Za-z]|\\Z\",text)\n    # new_text = re.search(r\"[A-Za-z]{2,}$|^[A-Za-z]{2,}$|^[A-Za-z]|[A-Za-z]\",text)\n    # new_text = re.search(r\"\\A[A-Za-z]{2,}\\Z|^[A-Za-z]{2,}\\Z|^[A-Za-z]|[A-Za-z]\",text)\n    # new_text = re.search(r\"\\A[A-Za-z]{2,}\\Z|^[A-Za-z]{2,}\\Z|^[A-Za-z]|[A-Za-z]\",text)\n    # new_text = re.search(r\"\\A[A-Za-z]{2,}\\Z|^[A-Za-z]{2,}\\Z|^[A-Za-z]|[A-Za-z]\",text)\n    # new_text = re.search(r\"\\A[A-Za-z]{2,}\\Z|^[A-Za-z]{2,}\\Z|^[A-Za-z]|[A-Za-z]\",text)\n    # new_text = re.search(r\"\\A[A-Za-z]{2,}\\Z|^[A-Za-z]{2,}\\Z|^[A-Za-z]|[A-Za-z]\",text)\n    new_text = re.search(r\"\\A[A-Za-z]{2,}\\Z|^[A-Za-z]{2,}\\Z|^[A-Za-z]|[A-Za-z]\",text)\n    return new_text\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text_match = re.search(r'\\bz\\b', text)\n    if text_match is not None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return text.find('z') in range(0,len(text)-1) and text.find('z') <= text.find('z') + 1\n    \n    \ndef text_match_words_end(text):\n    '''\n    Write a function that checks if a string contains an exclamation mark at the end of a word.\n    '''\n    for word in text.split(' '):\n        if word[-1] == '!':\n            return True\n        else:\n            return False\n    \ndef text_match_words_middle(text):\n    '''\n    Write a function that checks if a string contains an exclamation mark at the start of a word.\n    '''\n    for word in text.split(' '):\n        if word[0] == '!':\n            return True\n        else:\n            return False\n    \ndef text_match_letters_middle(text):\n    '''\n    Write a function that checks if a string contains a letter at the start of a word.\n    '''\n    for word in text.split(' '):\n        if word[0].isalpha():\n            return True\n        else:\n            return False\n    \ndef text_match_letters_end(text):\n    '''\n    Write a function that checks if a string contains a letter at the end of a word.\n    '''\n    for word in text.split(' '):\n        if word[-1].isalpha():\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if len(text)<2:\n        return False\n    try:\n        text = text.split()\n        for i in range(len(text)):\n            if len(text[i])<2:\n                return False\n    except:\n        return False\n    return True\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reverse_list = []\n    for i in range(len(input)-k):\n        reverse_list.append(input[i])\n    \n    reverse_list.append(input[k])\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    l = len(input)\n    if k <= l:\n        return input[l-k:] + input[0:l-k]\n    else:\n        return input[k:] + input[0:k]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(0,k):\n        input[i] = input[i] * -1\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = []\n    for x in range(0, k+1):\n        arr.append(input[x])\n    for x in range(k+1, len(input)):\n        arr.append(input[x])\n    arr.reverse()\n    for x in range(0, k+1):\n        print(arr[x])\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = []\n    for i in range(len(input)):\n        if i == k:\n            break\n        else:\n            output.append(input[i])\n    return output\n    \n    \n    \ndef is_it_palindrome(input):\n    '''\n    Write a python function to check if an input string is a palindrome or not.\n    '''\n    s1 = \"\"\n    for i in input:\n        s1 = s1 + i\n        s1 = s1.lower()\n    s2 = \"\"\n    for i in range(len(s1)):\n        if s1[i]!= s1[len(s1)-i-1]:\n            return False\n    return True\n    \n    \n    \ndef sub_string(s1, s2):\n    '''\n    Write a python function to find the common sub-strings of two strings.\n    '''\n    output = []\n    for i in range(len(s1)+1):\n        if s1[i:i+len(s2)] == s2:\n            output.append(s1[i:i+len(s2)])\n    return output\n    \n    \ndef is_palindrome_permutation(s1):\n    '''\n    Write a python function to check whether a string is a permutation of a palindrome or not.\n    '''\n    s1_c = s1.lower()\n    counter = {}\n    for i in s1_c:\n        if i in counter:\n            counter[i] += 1\n        else:\n            counter[i] = 1\n    odd_count = 0\n    for i in counter.values():\n        if i%2 == 0:\n            odd_count += 0\n        else:\n            odd_count += 1\n    if odd_count <= 1:\n        return True\n    return False\n    \n    \ndef swap_case(s1):\n    '''\n    Write a python function to swap the case of every letter in a string.\n    '''\n    output = \"\"\n    for i in s1:\n        if i.isupper():\n            output += i.lower()\n        else:\n            output += i.upper()\n    return output\n    \n    \ndef is_palindrome_subsequence(s1, s2):\n    '''\n    Write a python function to check whether a given string is a subsequence of another string.\n    '''\n    i = 0\n    j = 0\n    while i < len(s1) and j < len(s2):\n        if s1[i] == s2[j]:\n            i += 1\n            j += 1\n        else:\n            j += 1\n    if i == len(s1):\n        return True\n    else:\n        return False\n    \n    \ndef max_min(s1):\n    '''\n    Write a python function to find the minimum and maximum element from an array.\n    '''\n    max = -1000\n    min = 1000\n    for i in s1:\n        if i > max:\n            max = i\n        if i < min:\n            min = i\n    return (min, max)\n    \n    \ndef swap_case_v2(s1):\n    '''\n    Write a python function to swap the case of every letter in a string.\n    '''\n    output = \"\"\n    for i in s1:\n        if i.islower():\n            output += i.upper()\n        else:\n            output += i.lower()\n    return output\n    \n    \ndef is_valid_parenthesis(s1):\n    '''\n    Write a python function to check whether a given string is a valid parenthesis string or not.\n    '''\n    stack = []\n    for i in s1:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n    \n    \ndef is_palindrome_recursive(s1):\n    '''\n    Write a python function to check whether a string is a palindrome or not.\n    '''\n    def is_palindrome_helper(s1, i, j):\n        if j-i <= 1:\n            return True\n        else:\n            if s1[i] == s1[j]:\n                return is_palindrome_helper(s1, i+1, j-1)\n            else:\n                return False\n    return is_palindrome_helper(s1, 0, len(s1)-1)\n    \n    \ndef reverse_v2(s1):\n    '''\n    Write a python function to reverse an array or string.\n    '''\n    output = \"\"\n    for i in range(len(s1)):\n        output += s1[len(s1)-i-1]\n    return output\n    \n    \ndef is_substring(s1, s2):\n    '''\n    Write a python function to check whether a given string is a substring of another string.\n    '''\n    if s1.find(s2)!= -1:\n        return True\n    else:\n        return False\n    \n    \ndef is_palindrome_v1(s1):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    if s1 == s1[::-1]:\n        return True\n    else:\n        return False\n    \n    \ndef reverse_v3(s1):\n    '''\n    Write a python function to reverse an array or string.\n    '''\n    output = \"\"\n    for i in range(len(s1)):\n        output += s1[len(s1)-i-1]\n    return output\n    \n    \ndef reverse_v4(s1):\n    '''\n    Write a python function to reverse an array or string.\n    '''\n    output = \"\"\n    for i in range(len(s1)):\n        output += s1[len(s1)-i-1]\n    return output\n    \n    \ndef is_substring_v2(s1, s2):\n    '''\n    Write a python function to check whether a given string is a substring of another string.\n    '''\n    return s2 in s1\n    \n    \ndef is_palindrome_v2(s1):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    def is_palindrome_helper(s1, i, j):\n        if j-i <= 1:\n            return True\n        else:\n            if s1[i] == s1[j]:\n                return is_palindrome_helper(s1, i+1, j-1)\n            else:\n                return False\n    return is_palindrome_helper(s1, 0, len(s1)-1)\n    \n    \ndef is_palindrome_v3(s1):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    s2 = s1[::-1]\n    if s1 == s2:\n        return True\n    else:\n        return False\n    \n    \ndef is_palindrome_v4(s1):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    s1 = s1.lower()\n    s2 = \"\"\n    for i in s1:\n        if i.isalpha():\n            s2 += i\n    if s1 == s2:\n        return True\n    else:\n        return False\n    \n    \ndef is_palindrome_v5(s1):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    s1 = s1.lower()\n    s2 = \"\"\n    for i in s1:\n        if i.isalpha():\n            s2 += i\n    s2 = s2[::-1]\n    if s1 == s2:\n        return True\n    else:\n        return False\n    \n    \ndef is_palindrome_v6(s1):\n    '''\n    Write a python function to check whether "
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(len(input)):\n        if i == k:\n            return input[:k]\n        else:\n            input.append(input.pop(0))\n    return input[:k]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    rev_arr = []\n    for i in range(len(input)): \n        if i < k:\n            rev_arr.append(input[len(input)-1-i])\n    return rev_arr\n        \ndef reverse_Array_Upto_K_using_recursion(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k >= len(input): \n        return input \n    else: \n        input[:k+1] = reverse_Array_Upto_K_using_recursion(input, k+1)\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    new_arr = []\n    for i in range(k):\n        new_arr.append(input[i])\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k<=0:\n        return\n    input = input[::-1]\n    for i in range(len(input)):\n        if i>=k:\n            break\n        input[i],input[k] = input[k],input[i]\n        k-=1\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if input==None or k<=0:\n        return -1\n    count = 0\n    while count<k:\n        input[count], input[k] = input[k], input[count]\n        count+=1\n        k-=1\n    return input\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup += (test_dict, )\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, tuple(test_dict.values()))\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    if type(test_tup)!= tuple:\n        print('Tuple Error')\n    elif type(test_dict)!= dict:\n        print('Dictionary Error')\n    else:\n        tup_length = len(test_tup)\n        for i in range(tup_length):\n            test_tup = test_tup + (test_dict, )\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_tup[1].update(test_dict))\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = (test_tup[0], test_tup[1], test_tup[2], test_dict)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n    \ndef create_list_from_tuple(test_tup):\n    '''\n    Write a function to create a list from a tuple.\n    '''\n    test_list = []\n    for item in test_tup:\n        test_list.append(item)\n    return test_list\n    \ndef create_tuple_from_list(test_list):\n    '''\n    Write a function to create a tuple from a list.\n    '''\n    test_tup = ()\n    for item in test_list:\n        test_tup = test_tup + (item,)\n    return test_tup\n    \ndef tuple_merge(test_tup1, test_tup2):\n    '''\n    Write a function to merge two tuples. The output should be a tuple.\n    '''\n    merged_tuple = test_tup1 + test_tup2\n    return merged_tuple\n    \ndef add_strings(first, second):\n    '''\n    Write a function to combine two strings. The output should be a single string.\n    '''\n    test_string = first + second\n    return test_string\n    \ndef list_of_lists(nested_list):\n    '''\n    Write a function to convert a list of lists into a single list.\n    '''\n    test_list = nested_list\n    for item in test_list:\n        if type(item) == list:\n            for item1 in item:\n                if type(item1) == list:\n                    for item2 in item1:\n                        if type(item2) == list:\n                            for item3 in item2:\n                                if type(item3) == list:\n                                    for item4 in item3:\n                                        if type(item4) == list:\n                                            for item5 in item4:\n                                                if type(item5) == list:\n                                                    for item6 in item5:\n                                                        if type(item6) == list:\n                                                            for item7 in item6:\n                                                                if type(item7) == list:\n                                                                    for item8 in item7:\n                                                                        if type(item8) == list:\n                                                                        for item9 in item8:\n                                                                            if type(item9) == list:\n                                                                                for item10 in item9:\n                                                                                    if type(item10) == list:\n                                                                                        for item11 in item10:\n                                                                                            if type(item11) == list:\n                                                                                                for item12 in item11:\n                                                                                                if type(item12) == list:\n                                                                                                    for item13 in item12:\n                                                                                                    if type(item13) == list:\n                                                                                                    for item14 in item13:\n                                                                                                    if type(item14) == list:\n                                                                                                    for item15 in item14:\n                                                                                                    if type(item15) == list:\n                                                                                                    for item16 in item15:\n                                                                                                    if type(item16) == list:\n                                                                                                    for item17 in item16:\n                                                                                                    if type(item17) == list:\n                                                                                                    for item18 in item17:\n                                                                                                    if type(item18) == list:\n                                                                                                    for item19 in item18:\n                                                                                                    if type(item19) == list:\n                                                                                                    for item20 in item19:\n                                                                                                    if type(item20) == list:\n                                                                                                    for item21 in item20:\n                                                                                                    if type(item21) == list:\n                                                                                                    for item22 in item21:\n                                                                                                    if type(item22) == list:\n                                                                                                    for item23 in item22:\n                                                                                                    if type(item23) == list:\n                                                                                                    for item24 in item23:\n                                                                                                    if type(item24) == list:\n                                                                                                    for item25 in item24:\n                                                                                                    if type(item25) == list:\n                                                                                                    for item26 in item25:\n                                                                                                    if type(item26) == list:\n                                                                                                    for item27 in item26:\n                                                                                                    if type(item27) == list:\n                                                                                                    for item28 in item27:\n                                                                                                    if type(item28) == list:\n                                                                                                    for item29 in item28:\n                                                                                                    if type(item29) == list:\n                                                                                                    for item30 in item29:\n                                                                                                    if type(item30) == list:\n                                                                                                    for item31 in item30:\n                                                                                                    if type(item31) == list:\n                                                                                                    for item32 in item31:\n                                                                                                    if type(item32) == list:\n                                                                                                    for item33 in item32:\n                                                                                                    if type(item33) == list:\n                                                                                                    for item34 in item33:\n                                                                                                    if type(item34) == list:\n                                                                                                    for item35 in item34:\n                                                                                                    if type(item35) == list:\n                                                                                                    for item36 in item35:\n                                                                                                    if type(item36) == list:\n                                                                                                    for item37 in item36:\n                                                                                                    if type(item37) == list:\n                                                                                                    for item38 in item37:\n                                                                                                    if type(item38) == list:\n                                                                                                    for item39 in item38:\n                                                                                                    if type(item39) == list:\n                                                                                                    for item40 in item39:\n                                                                                                    if type(item40) == list:\n                                                                                                    for item41 in item40:\n                                                                                                    if type(item41) == list:\n                                                                                                    for item42 in item41:\n                                                                                                    if type(item42) == list:\n                                                                                                    for item43 in item42:\n                                                                                                    if type(item43) == list:\n                                                                                                    for item44 in item43:\n                                                                                                    if type(item44) == list:\n                                                                                                    for item45 in item44:\n                                                                                                    if type(item45) == list:\n                                                                                                    for item46 in item45:\n                                                                                                    if type(item46) == list:\n                                                                                                    for item47 in item46:\n                                                                                                    if type(item47) == list:\n                                                                                                    for item48 in item47:\n                                                                                                    if type(item48) == list:\n                                                                                                    for item49 in item48:\n                                                                                                    if type(item49) == list:\n                                                                                                    for item50 in item49:\n                                                                                                    if type(item50) == list:\n                                                                                                    for item51 in item50:\n                                                                                                    if type(item51) == list:\n                                                                                                    for item52 in item51:\n                                                                                                    if type(item52) == list:\n                                                                                                    for item53 in item52:\n                                                                                                    if type(item53) == list:\n                                                                                                    for item54 in item53:\n                                                                                                    if type(item54) == list:\n                                                                                    "
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    cols = len(cost[0])\n    dp = [[0 for i in range(cols)] for j in range(rows)]\n    \n    dp[0][0] = cost[0][0]\n    for row in range(1, rows):\n        dp[row][0] = dp[row - 1][0] + cost[row][0]\n    for col in range(1, cols):\n        dp[0][col] = dp[0][col - 1] + cost[0][col]\n        \n    for row in range(1, rows):\n        for col in range(1, cols):\n            dp[row][col] = max(dp[row - 1][col], dp[row][col - 1]) + cost[row][col]\n    \n    return max(dp[-1]) / (rows * cols)\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    if N == 0:\n        return 0\n    dp = [[0 for j in range(N)] for i in range(N)]\n    for i in range(N):\n        dp[i][i] = cost[i][i]\n    for j in range(1,N):\n        for i in range(N-j):\n            if i == 0:\n                dp[i][i+j] = dp[i][i+j-1] + cost[i][i+j]\n            elif i == N-j-1:\n                dp[i][i+j] = dp[i+1][i+j] + cost[i][i+j]\n            else:\n                dp[i][i+j] = max(dp[i][i+j-1] + cost[i][i+j], dp[i+1][i+j] + cost[i][i+j])\n    \n    return (dp[0][N-1]/N)\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if not cost:\n        return 0\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    res = 0\n    l = len(cost)\n    for i in range(l):\n        for j in range(l):\n            res = max(res, maxAverageOfPathRec(cost, i, j))\n    return res\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost) == 0 or len(cost[0]) == 0:\n        return 0\n    \n    N = len(cost)\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n    \n    for j in range(N):\n        for i in range(N):\n            if j == 0 and i == 0:\n                dp[j][i] = cost[j][i]\n            elif i == 0:\n                dp[j][i] = dp[j][i+1] + cost[j][i]\n            elif j == 0:\n                dp[j][i] = dp[j+1][i] + cost[j][i]\n            else:\n                dp[j][i] = max(dp[j][i-1], dp[j-1][i]) + cost[j][i]\n    \n    return (dp[-1][-1] / (N * N))\n    \n'''\nRuntime: 276 ms, faster than 54.77% of Python3 online submissions for Maximum Average of a Subarray.\nMemory Usage: 14.2 MB, less than 90.94% of Python3 online submissions for Maximum Average of a Subarray.\n''"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    if N == 0:\n        return 0\n    dp = [[0 for i in range(N)] for j in range(N)]\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n    for i in range(1, N):\n        dp[i][0] = cost[i][0]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = cost[i][j] + min(dp[i-1][j], dp[i][j-1])\n    return dp[N-1][N-1] / float(N*N)\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    res = -1\n    maxAvg = -1\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    paths = []\n    if cost == None or len(cost) == 0:\n        return paths\n    max_avg = -float('inf')\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            if i == 0 or j == 0:\n                paths.append([[i, j]])\n                avg = compute_average(cost, paths)\n                if avg > max_avg:\n                    max_avg = avg\n            else:\n                paths.append([[i, j]])\n                avg = compute_average(cost, paths)\n                if avg > max_avg:\n                    max_avg = avg\n                paths.pop()\n    return max_avg\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    n = len(cost)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    \n    for i in range(n):\n        for j in range(n):\n            if i==0 and j==0:\n                dp[i][j]=cost[i][j]\n            elif i==0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j==0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    return int(round(sum(dp[-1])/n))\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # create a 2d matrix with infinity\n    matrix = [[float('inf')]*N for _ in range(N)]\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Your code here\n    students = {'Ravi': (56, 63), 'Jaya': (60, 48), 'Shetty': (63, 75), 'Kumari': (70, 50), 'Aakash': (70, 60)}\n    # Filter out:\n    # students = {'Jaya': (60, 48), 'Shetty': (63, 75), 'Kumari': (70, 50), 'Aakash': (70, 60)}\n    # Filter by height\n    # students = {'Jaya': (60, 48), 'Shetty': (63, 75), 'Kumari': (70, 50), 'Aakash': (70, 60)}\n    # Filter by weight\n    # students = {'Jaya': (60, 48), 'Shetty': (63, 75), 'Kumari': (70, 50), 'Aakash': (70, 60)}\n    # Filter by height and weight\n    # students = {'Jaya': (60, 48), 'Shetty': (63, 75), 'Kumari': (70, 50), 'Aakash': (70, 60)}\n    # Filter by height\n    # students = {'Jaya': (60, 48), 'Shetty': (63, 75), 'Kumari': (70, 50), 'Aakash': (70, 60)}\n    # Filter by weight\n    # students = {'Jaya': (60, 48), 'Shetty': (63, 75), 'Kumari': (70, 50), 'Aakash': (70, 60)}\n    # Filter by height and weight\n    # students = {'Jaya': (60, 48), 'Shetty': (63, 75), 'Kumari': (70, 50), 'Aakash': (70, 60)}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    output = {k:v for k,v in students.items() if v[0] > h and v[1] > w}\n    return output\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    students_above_h = {}\n    students_above_w = {}\n    students_above_h_min = h\n    students_above_w_min = w\n    for student_name,(student_h,student_w) in students.items():\n        if student_h >= students_above_h_min and student_w >= students_above_w_min:\n            students_above_h[student_name] = student_h\n            students_above_w[student_name] = student_w\n    \n    return students_above_h, students_above_w\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    flag=True\n    l=[]\n    for i in range(len(students)):\n        if students[i][0]>h and students[i][1]>w:\n            l.append(students[i])\n    return l\n    \n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for key,value in students.items():\n        if value[0] < h and value[1] < w:\n            print(key)\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_students = []\n    for student in students:\n        if students[student][0] > h and students[student][1] > w:\n            new_students.append(student)\n    return new_students\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #passing tuples as arguments\n    students1={}\n    #for loop to iterate through all the dictionary values and return height and weight from each student\n    for i in students:\n        students1[i]=h,w\n    #returning only those student with height and weight above the min_height and min_weight given\n    return {k:v for k,v in students1.items() if v[0]>=h and v[1]>=w}\n    "
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for i in students:\n        if students[i][0]>=h and students[i][1]>=w:\n            print(i)\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {k: v for k, v in students.items() if v[0] >= h and v[1] >= w}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_data = {}\n    for key in students.keys():\n        if students[key][0] > h and students[key][1] > w:\n            filtered_data[key] = students[key]\n    return filtered_data\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    print(nums1, nums2)\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    #first we need to create a dictionary \n    #create a dictionary with key as the index and the value as the list in it.\n    dic = {}\n    for index in range(len(nums1)):\n        if nums1[index] not in dic:\n            dic[index] = nums1[index]\n    for index in range(len(nums2)):\n        if nums2[index] not in dic:\n            dic[index] = nums2[index]\n    #now we have a dictionary with the values as the list in it\n    #go over the list and if we see the value pair, we add it to the count.\n    count = 0\n    for index in range(len(nums1)):\n        if dic[index] == nums2[index]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # nums1 = [1,1,2,2]\n    # nums2 = [1,2,1,2]\n    # result = 3\n    # 0 0, 0 1, 1 0, 1\n    # 0 1, 1 0, 1\n    \n    # nums1 = [1,1,2,2]\n    # nums2 = [1,1,1,1]\n    # result = 0\n    \n    # nums1 = []\n    # nums2 = []\n    # result = 0\n    \n    # nums1 = []\n    # nums2 = []\n    # result = 0\n    # nums1 = [1,2,3,4]\n    # nums2 = [1,2,3,4]\n    # result = 4\n    # nums1 = [1,2,3,4]\n    # nums2 = [1,2,3,4,5]\n    # result = 2\n    # nums1 = [1,2,3,4]\n    # nums2 = [1,2,3,4,5]\n    # result = 3\n    \n    # nums1 = []\n    # nums2 = []\n    # result = 0\n    \n    if nums1 and nums2:\n        m = len(nums1)\n        n = len(nums2)\n        result = 0\n        for i in range(m):\n            if nums1[i] == nums2[i]:\n                result += 1\n        return result\n    \n    return 0\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    pairs = {}\n    for i in range(len(nums1)):\n        if nums1[i] in pairs:\n            pairs[nums1[i]] += 1\n        else:\n            pairs[nums1[i]] = 1\n    for i in range(len(nums2)):\n        if nums2[i] in pairs:\n            pairs[nums2[i]] -= 1\n    count = 0\n    for i in pairs:\n        if pairs[i] >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    n = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            n+=1\n    return n\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # This can be solved without checking each index.\n    cnt = 0\n    for i, n1 in enumerate(nums1):\n        for j, n2 in enumerate(nums2):\n            if n1 == n2:\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Your code here\n    # return sum(int(i) for i in str(base**power))\n    return sum(int(i) for i in str(base**power))\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(1, power + 1):\n        sum += int(base) ** i\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power!= 0:\n        sum += (base % 10)\n        base = base // 10\n        power -= 1\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    answer = 0\n    if power == 0:\n        return base\n    return base + power_base_sum(base, power - 1)\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(int(i) for i in str(base))**power\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(int(x) for x in str(base) if x.isdigit())**power\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 0 and power == 0:\n        return 0\n    \n    base_string = str(base)\n    power_string = str(power)\n    \n    if base_string == \"1\":\n        return 10**power\n    if power_string == \"1\":\n        return base\n    \n    if base_string[0] == \"0\":\n        return power_base_sum(base//10, power-1)\n    if power_string[0] == \"0\":\n        return base_base_sum(base//10, power)\n    \n    if power_string[0]!= \"0\":\n        return base_base_sum(base, power)\n    \n    if base_string[0] == \"0\":\n        return base_base_sum(base//10, power-1)\n    if power_string[0] == \"0\":\n        return base_base_sum(base, power)\n    \n    \ndef power_base_sum_2(base, power, result_number = 0):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 0 and power == 0:\n        return 0\n    \n    base_string = str(base)\n    power_string = str(power)\n    \n    if base_string == \"1\":\n        return 10**power\n    if power_string == \"1\":\n        return base\n    \n    if base_string[0] == \"0\":\n        return power_base_sum_2(base//10, power-1, result_number)\n    if power_string[0] == \"0\":\n        return base_base_sum_2(base//10, power, result_number)\n    \n    if power_string[0]!= \"0\":\n        return base_base_sum_2(base, power, result_number)\n    \n    if base_string[0] == \"0\":\n        return base_base_sum_2(base//10, power-1, result_number)\n    if power_string[0] == \"0\":\n        return base_base_sum_2(base, power, result_number)\n    \n    \ndef power_base_sum_3(base, power, result_number = 0):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 0 and power == 0:\n        return 0\n    \n    base_string = str(base)\n    power_string = str(power)\n    \n    if base_string == \"1\":\n        return 10**power\n    if power_string == \"1\":\n        return base\n    \n    if base_string[0] == \"0\":\n        return power_base_sum_3(base//10, power-1, result_number)\n    if power_string[0] == \"0\":\n        return base_base_sum_3(base//10, power, result_number)\n    \n    if power_string[0]!= \"0\":\n        return base_base_sum_3(base, power, result_number)\n    \n    if base_string[0] == \"0\":\n        return base_base_sum_3(base//10, power-1, result_number)\n    if power_string[0] == \"0\":\n        return base_base_sum_3(base, power, result_number)\n    \n    \n    \ndef power_base_sum_4(base, power, result_number = 0):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 0 and power == 0:\n        return 0\n    \n    base_string = str(base)\n    power_string = str(power)\n    \n    if base_string == \"1\":\n        return 10**power\n    if power_string == \"1\":\n        return base\n    \n    if base_string[0] == \"0\":\n        return power_base_sum_4(base//10, power-1, result_number)\n    if power_string[0] == \"0\":\n        return base_base_sum_4(base//10, power, result_number)\n    \n    if power_string[0]!= \"0\":\n        return base_base_sum_4(base, power, result_number)\n    \n    if base_string[0] == \"0\":\n        return base_base_sum_4(base//10, power-1, result_number)\n    if power_string[0] == \"0\":\n        return base_base_sum_4(base, power, result_number)\n    \n    \n    \ndef power_base_sum_5(base, power, result_number = 0):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 0 and power == 0:\n        return 0\n    \n    base_string = str(base)\n    power_string = str(power)\n    \n    if base_string == \"1\":\n        return 10**power\n    if power_string == \"1\":\n        return base\n    \n    if base_string[0] == \"0\":\n        return power_base_sum_5(base//10, power-1, result_number)\n    if power_string[0] == \"0\":\n        return base_base_sum_5(base//10, power, result_number)\n    \n    if power_string[0]!= \"0\":\n        return base_base_sum_5(base, power, result_number)\n    \n    if base_string[0] == \"0\":\n        return base_base_sum_5(base//10, power-1, result_number)\n    if power_string[0] == \"0\":\n        return base_base_sum_5(base, power, result_number)\n    \n    \n    \ndef power_base_sum_6(base, power, result_number = 0):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 0 and power == 0:\n        return 0\n    \n    base_string = str(base)\n    power_string = str(power)\n    \n    if base_string == \"1\":\n        return 10**power\n    if power_string == \"1\":\n        return base\n    \n    if base_string[0] == \"0\":\n        return power_base_sum_6(base//10, power-1, result_number)\n    if power_string[0] == \"0\":\n        return base_base_sum_6(base//10, power, result_number)\n    \n    if power_string[0]!= \"0\":\n        return base_base_sum_6(base, power, result_number)\n    \n    if base_string[0] == \"0\":\n        return base_base_sum_6(base//10, power-1, result_number)\n    if power_string[0] == \"0\":\n        return base_base_sum_6(base, power, result_number)\n    \n    \ndef power_base_sum_7(base, power, result_number = 0):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 0 and power == 0:\n        return 0\n    \n    base_string = str(base)\n    power_string = str(power)\n    \n    if base_string == \"1\":\n        return 10**power\n    if power_string == \"1\":\n        return base\n    \n    if base_string[0] == \"0\":\n        return power_base_sum_7(base//10, power-1, result_number)\n    if power_string[0] == \"0\":\n        return base_base_sum_7(base//10, power, result_number)\n    \n    if power_string[0]!= \"0\":\n        return base_base_sum_7(base, power, result_number)\n    \n    if base_string[0] == \"0\":\n        return base_base_sum_7(bas"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(power):\n        sum = sum + int(base)\n    return sum\n    \nprint(power_base_sum('2', 3))\nprint(power_base_sum('123', 5))\nprint(power_base_sum('4', 3))\nprint(power_base_sum('1000', 5))\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power:\n        sum += base%10\n        base = base//10\n        power -= 1\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Algorithm:\n    # 1. If base is zero, then return 0\n    # 2. If power is negative, then change base and power as above.\n    # 3. Use power_base_sum to calculate the sum of digits of base to the power of base.\n    # 4. Return the sum of digits.\n    if base == 0:\n        return 0\n    if power < 0:\n        base, power = abs(base), abs(power)\n        while (power!= 0):\n            base = base * 10\n            power = power - 1\n        return base\n    else:\n        return power_base_sum(base // 10, power - 1) + (base % 10)\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #text1=\"'The quote of the day' has been 'discussing' in the meantime\"\n    #print(extract_quotation(text1))\n    text1=text1.replace(\"'\",\"\")\n    text1=text1.replace('\"',' ')\n    text1=text1.replace('  ',' ')\n    text1=text1.split(' ')\n    text1=''.join(text1)\n    return text1\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = re.findall('\".*? \"',text1)\n    text =''.join(text)\n    return text\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quot_pos = re.compile(r'\"(.*?)\"')\n    quot_res = quot_pos.findall(text1)\n    if quot_res:\n        return quot_res\n    else:\n        return None\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    str1 = \"We have a new business at the local phone. And the employees are happy for it.\"\n    print('The extracted quotation is:',extract_quotation(str1))\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    start_index = 0\n    end_index = 0\n    result = ''\n    for i in range(len(text1)):\n        if (text1[i] == '\"'):\n            start_index = i+1\n            for j in range(i+1,len(text1)):\n                if (text1[j] == '\"'):\n                    end_index = j\n                    result = text1[start_index:end_index+1]\n                    break\n            break\n    return result\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #your code here\n    text1=text1.replace('\"',' ')\n    text1=re.findall('\"([^\"]*)\"',text1)\n    return text1\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    if type(text1)!= str:\n        raise TypeError(\"Extraction of quotation marks: input must be of type str\")\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    qtext = re.findall(r\"'(.*?)'\", text1)\n    return qtext\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # using re.findall\n    # s = 'From stephen.marquard@uct.ac.za Sat Jan 5 09:14:16 2008'\n    # print re.findall('From.*@(.*)', s)\n    # print re.findall('From (.*?)@(.*)', s)\n    # print re.findall('From ([^ ]*)@([^ ]*)', s)\n    # print re.findall('From.*\\s([^ ]*)@([^ ]*)', s)\n    # print re.findall('From (.*?)\\s([^ ]*)@([^ ]*)', s)\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(\"\\\"(.*?)\\\"\",text1)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Your code here\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    a = []\n    for i in range(len(test_tup)):\n        a.append(test_tup[i] * (i + 1))\n    return tuple(a)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = (0,0,0)\n    if len(test_tup) == 1:\n        return (0,0,0)\n    if len(test_tup) == 2:\n        return (test_tup[0] * test_tup[1],0,0)\n    if len(test_tup) == 3:\n        return (test_tup[0] * test_tup[1], test_tup[1] * test_tup[2], 0)\n    if len(test_tup) == 4:\n        return (test_tup[0] * test_tup[1], test_tup[1] * test_tup[2], test_tup[2] * test_tup[3])\n    if len(test_tup) == 5:\n        return (test_tup[0] * test_tup[1], test_tup[1] * test_tup[2], test_tup[2] * test_tup[3], test_tup[3] * test_tup[4])\n    if len(test_tup) == 6:\n        return (test_tup[0] * test_tup[1], test_tup[1] * test_tup[2], test_tup[2] * test_tup[3], test_tup[3] * test_tup[4], test_tup[4] * test_tup[5])\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    result = ()\n    i = 0\n    while i < len(test_tup)-1:\n        result += (test_tup[i]*test_tup[i+1],)\n        i += 1\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    test_tup = (1,2,3,4,5)\n    res = ()\n    for i in range(len(test_tup)):\n        res += (test_tup[i] * (test_tup[i+1]),)\n    return res\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    #You can assume that the input is a tuple of numbers\n    #You can assume that all the numbers in the tuple are ints\n    #It is important that the numbers in the tuple can be multiplied and each number in the resulting tuple must be an int.\n    \n    return tuple(map(lambda x, y: x * y, test_tup, test_tup[1:]))\n    \nmultiply_elements((5, 2, 5, 2))"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(t * (t + 1) for t in test_tup)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    temp = []\n    for i in range(len(test_tup)-1):\n        temp.append(test_tup[i] * test_tup[i+1])\n    temp.append(test_tup[-1])\n    return tuple(temp)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Your code here\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # len_tuple = len(test_tup)\n    # for i in range(len_tuple-1):\n    #     test_tup[i] *= test_tup[i+1]\n    # return test_tup\n    return tuple(element * (element+1) for element in test_tup)\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum_list = []\n    for i in range(len(lst1)):\n        sum_list.append(lst1[i] + lst2[i])\n    return sum_list\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1+lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    \n    for i in range(len(lst1)):\n        lst1[i] = lst1[i] + lst2[i]\n    return lst1\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1 + lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    l = []\n    for i in range(len(lst1)):\n        l.append(lst1[i]+lst2[i])\n    return l\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    \n    sum_lst = lst1 + lst2\n    \n    return sum_lst\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    \n    '''\n    for example\n    lst1 = [1,2,3]\n    lst2 = [4,5,6]\n    returns [1+4,2+5,3+6]\n    '''\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    \n    sum_list = []\n    for i in range(len(lst1)):\n        sum_list.append(lst1[i]+lst2[i])\n    return sum_list\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1+lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    x = []\n    for i in range(len(lst1)):\n        x.append(lst1[i]+lst2[i])\n    return x\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = sorted(set(nums))\n    i = 0\n    while i < len(nums) - 1:\n        if nums[i] == nums[i+1]:\n            nums.pop(i)\n            nums.pop(i)\n        else:\n            i+=1\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    new_list = []\n    for i,j in groupby(sorted(nums)):\n        new_list.append(list(j))\n    return new_list\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums = sorted(set(nums))\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for group in groupby(nums):\n        _ = group[0]\n    return _\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums.sort()\n    i = 1\n    while i < len(nums):\n        if nums[i] == nums[i-1]:\n            nums.pop(i)\n            i = i-1\n        i = i+1\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return(len(set(nums)))\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # iterate through the list\n    nums = sorted(nums)\n    output = []\n    i = 0\n    while i < len(nums):\n        # check if next elem is same as this elem and increase the count\n        if nums[i] == nums[i + 1]:\n            i += 1\n        # if not, add the next elem\n        else:\n            output.append(nums[i])\n            i += 1\n    return output\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    newlist = []\n    # loop through list\n    for k, g in groupby(nums):\n        newlist.append(list(g))\n    # remove consecutive duplicates\n    return list(filter(lambda x: len(x) == 1, newlist))\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    sorted_nums = sorted(nums)\n    i = 0\n    while i < len(sorted_nums) - 1:\n        if sorted_nums[i] == sorted_nums[i+1]:\n            del sorted_nums[i+1]\n        else:\n            i += 1\n    return sorted_nums\n    "
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for x, y in groupby(nums):\n        result.append(list(x))\n    return result\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = 3.14\n    a = 2*pi*r\n    b = a*h/2\n    l = 2*pi*r*h\n    print(\"The lateral surface area of the cone is: \",round(l,2))\nlateralsurface_cone(3,5)\nlateralsurface_cone(7,9)\nlateralsurface_cone(8,2)\ndef distance(x1,y1,x2,y2):\n    '''\n    Write a function to find the distance between any two points in a plane.\n    '''\n    dist = math.sqrt(((x1-x2)**2) + ((y1-y2)**2))\n    print(round(dist,2))\ndistance(2,4,6,8)\ndistance(2,4,6,9)\ndistance(2,4,6,7)\ndef area_rectangle(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    print(round(area,2))\narea_rectangle(2,3)\narea_rectangle(3,4)\narea_rectangle(5,6)\ndef area_triangle(l,b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = l*h/2\n    print(round(area,2))\narea_triangle(2,3,4)\narea_triangle(3,4,5)\narea_triangle(3,5,6)\ndef area_parallelogram(b,h):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    area = b*h\n    print(round(area,2))\narea_parallelogram(2,3)\narea_parallelogram(3,4)\narea_parallelogram(5,6)\ndef area_square(l):\n    '''\n    Write a function to find the area of a square.\n    '''\n    area = l*l\n    print(round(area,2))\narea_square(2)\narea_square(3)\narea_square(4)\ndef area_pyramid(l,h):\n    '''\n    Write a function to find the area of a pyramid.\n    '''\n    area = l*h/3\n    print(round(area,2))\narea_pyramid(3,5)\narea_pyramid(5,6)\narea_pyramid(8,9)\ndef area_trapezium(b,h):\n    '''\n    Write a function to find the area of a trapezium.\n    '''\n    area = (b+h)/2*h\n    print(round(area,2))\narea_trapezium(3,4)\narea_trapezium(3,4)\narea_trapezium(3,4)\ndef area_trapezium(b,h):\n    '''\n    Write a function to find the area of a trapezium.\n    '''\n    area = (b+h)/2*h\n    print(round(area,2))\narea_trapezium(3,4)\narea_trapezium(3,4)\narea_trapezium(3,4)\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = math.pi*r**2\n    print(round(area,2))\narea_circle(3)\narea_circle(4)\narea_circle(5)\ndef area_square(l):\n    '''\n    Write a function to find the area of a square.\n    '''\n    area = l*l\n    print(round(area,2))\narea_square(5)\narea_square(6)\narea_square(7)\ndef area_parabola(h,l):\n    '''\n    Write a function to find the area of a parabola.\n    '''\n    area = (1/2)*h*l**2\n    print(round(area,2))\narea_parabola(3,6)\narea_parabola(3,6)\narea_parabola(3,6)\ndef area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = 3.14\n    area = 4*pi*(r**2)\n    print(round(area,2))\narea_sphere(3)\narea_sphere(4)\narea_sphere(5)\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    pi = 3.14\n    a = 2*pi*r\n    b = a*h/2\n    l = 2*pi*r*h\n    volume = l*b\n    print(round(volume,2))\nvolume_cone(3,5)\nvolume_cone(7,9)\nvolume_cone(8,2)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given radius r and the height h.\n    '''\n    pi = 3.14\n    a = 2*pi*r\n    b = a*h/2\n    volume = pi*r**2*h\n    print(round(volume,2))\nvolume_cylinder(3,5)\nvolume_cylinder(7,9)\nvolume_cylinder(8,2)\ndef volume_pyramid(b,h):\n    '''\n    Write a function to find the volume of a pyramid given the base and the height h.\n    '''\n    pi = 3.14\n    volume = pi*(b*h)/3\n    print(round(volume,2))\nvolume_pyramid(2,3)\nvolume_pyramid(3,4)\nvolume_pyramid(5,6)\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    pi = 3.14\n    volume = (4/3)*pi*(r**3)\n    print(round(volume,2))\nvolume_sphere(3)\nvolume_sphere(4)\nvolume_sphere(5)\ndef volume_square(l):\n    '''\n    Write a function to find the volume of a square given length l.\n    '''\n    pi = 3.14\n    volume = l**3\n    print(round(volume,2))\nvolume_square(5)\nvolume_square(6)\nvolume_square(7)\ndef volume_triangle(l,b,h):\n    '''\n    Write a function to find the volume of a triangle given length l, base b, and height h.\n    '''\n    pi = 3.14\n    volume = l*h/2\n    print(round(volume,2))\nvolume_triangle(2,3,4)\nvolume_triangle(3,4,5)\nvolume_triangle(3,5,6)\ndef volume_rectangle(l,b):\n    '''\n    Write a function to find the volume of a rectangle given length l and base b.\n    '''\n    pi = 3.14\n    volume = l*b\n    print(round(volume,2))\nvolume_rectangle(2,3)\nvolume_rectangle(3,4)\nvolume_rectangle(3,4)\ndef volume_parabola(h,l):\n    '''\n    Write a function to find the volume of a parabola given height h and length l.\n    '''\n    pi = 3.14\n    volume = (1/2)*h*l**2\n    print(round(volume,2))\nvolume_parabola(3,6)\nvolume_parabola(3,6)\nvolume_parabola(3,6)\ndef volume_trapezium(b,h):\n    '''\n    Write a function to find the volume of a trapezium given base b and height h.\n    '''\n    pi = 3.14\n    volume = (1/2)*b*h\n    print(round(volume,2))\nvolume_trapezium(2,3)\nvolume_trapezium(3,4)\nvolume_trapezium("
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2*(h/2)**2\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface = 0.5*math.pi*r*h\n    return surface\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    a = math.asin(r/h)\n    # print(a)\n    return 2*math.pi*r*(r+a)\nprint(lateralsurface_cone(1,1))\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r*(h/2)\n    return area\n    \ndef cone(r,h):\n    '''\n    Write a function to find the area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r*(h)\n    return area\n    \ndef cone(r,h):\n    '''\n    Write a function to find the area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r*(h)\n    return area\n    \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r*(h)\n    return area\n    \ndef cone(r,h):\n    '''\n    Write a function to find the area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r*(h)\n    return area\n    \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r*(h)\n    return area\n    \ndef cone(r,h):\n    '''\n    Write a function to find the area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r*(h)\n    return area\n    \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r*(h)\n    return area\n    \ndef cone(r,h):\n    '''\n    Write a function to find the area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r*(h)\n    return area\n    \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r*(h)\n    return area\n    \ndef cone(r,h):\n    '''\n    Write a function to find the area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r*(h)\n    return area\n    \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r*(h)\n    return area\n    \ndef cone(r,h):\n    '''\n    Write a function to find the area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r*(h)\n    return area\n    \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r*(h)\n    return area\n    \ndef cone(r,h):\n    '''\n    Write a function to find the area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r*(h)\n    return area\n    \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r*(h)\n    return area\n    \ndef cone(r,h):\n    '''\n    Write a function to find the area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r*(h)\n    return area\n    \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r*(h)\n    return area\n    \ndef cone(r,h):\n    '''\n    Write a function to find the area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r*(h)\n    return area\n    \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r*(h)\n    return area\n    \ndef cone(r,h):\n    '''\n    Write a function to find the area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r*(h)\n    return area\n    \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r*(h)\n    return area\n    \ndef cone(r,h):\n    '''\n    Write a function to find the area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r*(h)\n    return area\n    \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r*(h)\n    return area\n    \ndef cone(r,h):\n    '''\n    Write a function to find the area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r*(h)\n    return area\n    \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r*(h)\n    return area\n    \ndef cone(r,h):\n    '''\n    Write a function to find the area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r*(h)\n    return area\n    \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r*(h)\n    return area\n    \ndef cone(r,h):\n    '''\n    Write a function to find the area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r*(h)\n    return area\n    \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r*(h)\n    return area\n    \ndef cone(r,h):\n    '''\n    Write a function to find the area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r*(h)\n    return area\n    \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r*(h)\n    return area\n    \ndef cone(r,h):\n    '''\n    Write a function to find the area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r*r*(h)\n    return area\n    \ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    theta = math.atan(h/r)\n    lateral_surface = (2*r*math.sin(theta))+(2*math.pi*r**2*math.cos(theta))\n    return lateral_surface\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    h_r = math.pow(h,2)\n    return math.pi * math.pow(r,2) * h_r\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surfacearea = (r**2)*math.pi*(h/2)\n    return surfacearea\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    # BASE CONSTANTS\n    r = float(r)\n    h = float(h)\n    \n    # Finds the base area of the cone\n    area = r**2 * math.pi\n    \n    # Finds the surface area of the cone given height and radius\n    surface = area * (r**2 + h**2)/2\n    \n    # Finds the lateral surface area of the cone\n    lateral = (r**2 * math.pi)/3\n    lateral_area = lateral * (r**2 + h**2)/2\n    \n    # Calculates the total lateral surface area\n    total_lateral_area = lateral_area + surface\n    \n    # Calculates the lateral surface area using the formula\n    #if h <= 0:\n    #    lateral_area = 0\n    #else:\n    #    lateral_area = r**2 * math.pi / 3\n    #    total_lateral_area = lateral_area + surface\n    \n    #returns the lateral surface area of the cone\n    return total_lateral_area\n    \ndef h_formula(r,h):\n    '''\n    Write a function to find the height given radius and height.\n    '''\n    \n    # BASE CONSTANTS\n    r = float(r)\n    h = float(h)\n    \n    # Finds the surface area of the cone\n    surface = r**2 * math.pi\n    \n    # Finds the lateral surface area of the cone\n    lateral = (r**2 * math.pi)/3\n    \n    # Calculates the total lateral surface area\n    total_lateral_area = lateral * (r**2 + h**2)/2\n    \n    # Calculates the lateral surface area using the formula\n    #if h <= 0:\n    #    lateral_area = 0\n    #else:\n    #    lateral_area = r**2 * math.pi / 3\n    #    total_lateral_area = lateral_area + surface\n    \n    # Calculates the total lateral surface area\n    total_lateral_area = lateral * (r**2 + h**2)/2\n    \n    # Calculates the height using the formula\n    height = total_lateral_area - surface\n    \n    # Calculates the lateral surface area using the formula\n    #if h <= 0:\n    #    lateral_area = 0\n    #else:\n    #    lateral_area = r**2 * math.pi / 3\n    #    total_lateral_area = lateral_area + surface\n    \n    # Calculates the lateral surface area using the formula\n    #if h <= 0:\n    #    lateral_area = 0\n    #else:\n    #    lateral_area = r**2 * math.pi / 3\n    #    total_lateral_area = lateral_area + surface\n    \n    # Calculates the total lateral surface area\n    total_lateral_area = lateral * (r**2 + h**2)/2\n    \n    # Calculates the lateral surface area using the formula\n    #if h <= 0:\n    #    lateral_area = 0\n    #else:\n    #    lateral_area = r**2 * math.pi / 3\n    #    total_lateral_area = lateral_area + surface\n    \n    # Calculates the lateral surface area using the formula\n    #if h <= 0:\n    #    lateral_area = 0\n    #else:\n    #    lateral_area = r**2 * math.pi / 3\n    #    total_lateral_area = lateral_area + surface\n    \n    # Calculates the lateral surface area using the formula\n    #if h <= 0:\n    #    lateral_area = 0\n    #else:\n    #    lateral_area = r**2 * math.pi / 3\n    #    total_lateral_area = lateral_area + surface\n    \n    # Calculates the lateral surface area using the formula\n    #if h <= 0:\n    #    lateral_area = 0\n    #else:\n    #    lateral_area = r**2 * math.pi / 3\n    #    total_lateral_area = lateral_area + surface\n    \n    # Calculates the lateral surface area using the formula\n    #if h <= 0:\n    #    lateral_area = 0\n    #else:\n    #    lateral_area = r**2 * math.pi / 3\n    #    total_lateral_area = lateral_area + surface\n    \n    # Calculates the lateral surface area using the formula\n    #if h <= 0:\n    #    lateral_area = 0\n    #else:\n    #    lateral_area = r**2 * math.pi / 3\n    #    total_lateral_area = lateral_area + surface\n    \n    # Calculates the lateral surface area using the formula\n    #if h <= 0:\n    #    lateral_area = 0\n    #else:\n    #    lateral_area = r**2 * math.pi / 3\n    #    total_lateral_area = lateral_area + surface\n    \n    # Calculates the lateral surface area using the formula\n    #if h <= 0:\n    #    lateral_area = 0\n    #else:\n    #    lateral_area = r**2 * math.pi / 3\n    #    total_lateral_area = lateral_area + surface\n    \n    # Calculates the lateral surface area using the formula\n    #if h <= 0:\n    #    lateral_area = 0\n    #else:\n    #    lateral_area = r**2 * math.pi / 3\n    #    total_lateral_area = lateral_area + surface\n    \n    # Calculates the lateral surface area using the formula\n    #if h <= 0:\n    #    lateral_area = 0\n    #else:\n    #    lateral_area = r**2 * math.pi / 3\n    #    total_lateral_area = lateral_area + surface\n    \n    # Calculates the lateral surface area using the formula\n    #if h <= 0:\n    #    lateral_area = 0\n    #else:\n    #    lateral_area = r**2 * math.pi / 3\n    #    total_lateral_area = lateral_area + surface\n    \n    # Calculates the lateral surface area using the formula\n    #if h <= 0:\n    #    lateral_area = 0\n    #else:\n    #    lateral_area = r**2 * math.pi / 3\n    #    total_lateral_area = lateral_area + surface\n    \n    # Calculates the lateral surface area using the formula\n    #if h <= 0:\n    #    lateral_area = 0\n    #else:\n    #    lateral_area = r**2 * math.pi / 3\n    #    total_lateral_area = lateral_area + surface\n    \n    # Calculates the lateral surface area using the formula\n    #if h <= 0:\n    #    lateral_area = 0\n    #else:\n    #    lateral_area = r**2 * math.pi / 3\n    #    total_lateral_area = lateral_area + surface\n    \n    # Calculates the lateral surface area using the formula\n    #if h <= 0:\n    #    lateral_area = 0\n    #else:\n    #    lateral_area = r**2 * math.pi / 3\n    #    total_lateral_area = lateral_area + surface\n    \n    # Calculates the lateral surface area using the formula\n    #if h <= 0:\n    #    lateral_area = 0\n    #else:\n    #    lateral_area = r**2 * math.pi / 3\n    #    total_lateral_area = lateral_area + surface\n    \n    # Calculates the lateral surface area using the formula\n    #if h <= 0:\n    #    lateral_area = 0\n    #else:\n    #    lateral_area = r**2 * math.pi / 3\n    #    total_lateral_area = lateral_area + surface\n    \n    # Calculates the lateral surface area using the formula\n    #if h <= 0:\n    #    lateral_area = 0\n    #else:\n    #    lateral_area = r**2 * math.pi / 3\n    #    total_lateral_area = lateral_area + surface\n    \n    # Calculates the lateral surface area using the formula\n    #if h <= 0:\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = h * r**2 * math.sin(r)/2\n    return area\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub('[^.\\,\\s]',':',text)\nprint(replace_specialchar('This is: a text'))\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(\",\", \":\")\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text_new = text.replace(' ',':')\n    text_new = text_new.replace(',',':')\n    text_new = text_new.replace('.',':')\n    return text_new\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'[,.]', ':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\",\",\":\")\n    text = text.replace(\" \",\":\")\n    text = text.replace(\".\",\":\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    new_text = re.sub(\"\\s\", \":\", text)\n    new_text = re.sub(\"\\,\", \":\", new_text)\n    new_text = re.sub(\"\\.\", \":\", new_text)\n    return new_text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[ ]|[,]|[.]', ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # replace all spaces\n    text = text.replace(' ', '.')\n    text = text.replace(',', '.')\n    # replace all dots with a colon\n    text = text.replace('.', ':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ',':').replace(',','.').replace('.',':')\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(',','.')\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A)-1\n    mid = 0\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if A==[]: return -1\n    #print('A', A, 'x', x)\n    low = 0\n    high = len(A)-1\n    while low <= high:\n        mid = low + (high-low)//2\n        if A[mid] > x:\n            high = mid-1\n        elif A[mid] < x:\n            low = mid+1\n        else:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                high = mid-1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    \n    if len(A) == 0:\n        return -1\n    \n    start = 0\n    end = len(A)-1\n    while start <= end:\n        mid = start + (end-start)//2\n        \n        if A[mid] == x:\n            return mid\n        \n        elif A[mid] > x:\n            end = mid-1\n        else:\n            start = mid+1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    \n    index = -1\n    size = len(A)\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    \n    if A is None or len(A)==0:\n        return -1\n    \n    low = 0\n    high = len(A) - 1\n    \n    while low <= high:\n        mid = low + (high-low)//2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n    \n    \n    \ndef find_last_occurrence(A, x):\n    '''\n    Write a function to find the index of the last occurrence of a given number in a sorted array.\n    '''\n    \n    if A is None or len(A) == 0:\n        return -1\n    \n    low = 0\n    high = len(A) - 1\n    \n    while low <= high:\n        mid = low + (high-low)//2\n        if A[mid] == x:\n            low = mid + 1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low - 1\n    \n    \n    \ndef find_index_of_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    \n    low = 0\n    high = len(A) - 1\n    \n    while low <= high:\n        mid = low + (high-low)//2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\n    \n    \n    \ndef find_index_of_last_occurrence(A, x):\n    '''\n    Write a function to find the index of the last occurrence of a given number in a sorted array.\n    '''\n    \n    low = 0\n    high = len(A) - 1\n    \n    while low <= high:\n        mid = low + (high-low)//2\n        if A[mid] == x:\n            high = mid - 1\n        elif A[mid] > x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return high + 1\n    \n    \n    \ndef find_index_of_first_and_last_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    \n    low = 0\n    high = len(A) - 1\n    \n    while low <= high:\n        mid = low + (high-low)//2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                low = mid + 1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n    \n    \n    \ndef find_index_of_all_occurrences(A, x):\n    '''\n    Write a function to find the index of all occurrences of a given number in a sorted array.\n    '''\n    \n    low = 0\n    high = len(A) - 1\n    \n    while low <= high:\n        mid = low + (high-low)//2\n        if A[mid] == x:\n            low = mid + 1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\n    \n    \n    \n    \ndef find_count_occurrences(A, x):\n    '''\n    Write a function to count the number of occurrences of a given number in a sorted array.\n    '''\n    \n    count = 0\n    low = 0\n    high = len(A) - 1\n    \n    while low <= high:\n        mid = low + (high-low)//2\n        if A[mid] == x:\n            count += 1\n            if mid == 0 or A[mid-1]!= x:\n                high = mid - 1\n            else:\n                low = mid + 1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return count\n    \n    \n    \ndef find_count_range(A, xlo, xhi):\n    '''\n    Write a function to count the number of occurrences of a given number in a sorted array.\n    '''\n    \n    count = 0\n    low = 0\n    high = len(A) - 1\n    \n    while low <= high:\n        mid = low + (high-low)//2\n        if A[mid] == xlo:\n            count += 1\n            if mid == 0 or A[mid-1]!= xlo:\n                low = mid + 1\n            else:\n                break\n        elif A[mid] > xlo:\n            high = mid - 1\n        else:\n            low = mid + 1\n    \n    if count == 0:\n        return -1\n    \n    count = 0\n    low = 0\n    high = len(A) - 1\n    \n    while low <= high:\n        mid = low + (high-low)//2\n        if A[mid] == xhi:\n            count += 1\n            if mid == len(A) - 1 or A[mid+1]!= xhi:\n                high = mid - 1\n            else:\n                break\n        elif A[mid] > xhi:\n            high = mid - 1\n        else:\n            low = mid + 1\n    \n    if count == 0:\n        return -1\n    \n    return count\n    \n    \n    \ndef find_min_and_max(A):\n    '''\n    Write a function to find the minimum and maximum numbers in a sorted array.\n    '''\n    \n    if A is None:\n        return -1\n    \n    low = 0\n    high = len(A) - 1\n    \n    while low <= high:\n        mid = low + (high-low)//2\n        if A[mid] > A[high]:\n            high = mid - 1\n        elif A[mid] < A[high]:\n            low = mid + 1\n        else:\n            high -= 1\n    return A[low], A[high]\n    \n    \n    \ndef find_min_and_max_in_rotated_array(A):\n    '''\n    Write a function to find the minimum and maximum numbers in a sorted array.\n    '''\n    \n    if A is None:\n        return -1\n    \n    low = 0\n    high = len(A) - 1\n    \n    while low <= high:\n        mid = low + (high-low)//2\n        if A[mid] > A[high]:\n            low = mid + 1\n        elif A[mid] < A[high]:\n            high = mid - 1\n        else:\n            if low == mid or A[low] > A[low+1]:\n                break\n            else:\n                high = low - 1\n    \n    return A[low], A[high]\n    \n    \n    \ndef find_min_and_max_in_rotated_array_2(A):\n    '''\n    Write a function to find the minimum and maximum numbers in a sorted array.\n    '''\n    \n    low = 0\n    high = len(A) - 1\n    \n    if A is None:\n        return -1\n    \n    while low <= high:\n        mid = low + (high-low)//2\n        if A[mid] > A[high]:\n            high = mid - 1\n        elif A[mid] < A[high]:\n            low = mid + 1\n        else:\n            low = mid + 1\n    \n    return A[low], A[high]\n    \n    \n    \ndef find_index_of_first_occurrence_in_rotated_array(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    \n    low = 0\n    high = len(A) - 1\n    \n    while low <= high:\n        mid = low + (high-low)//2\n        if A[mid] == x:\n            return mid\n        elif A[mi"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l = 0\n    r = len(A)-1\n    while l <= r:\n        mid = (l+r)//2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            r = mid-1\n        else:\n            l = mid+1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # arr = np.array(A)\n    low = 0\n    high = len(A) - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    first_occurrence = -1\n    low = 0\n    high = len(A) - 1\n    \n    while (low <= high):\n        mid = int((low + high)/2)\n        if A[mid] < x:\n            low = mid + 1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            first_occurrence = mid\n            break\n    return first_occurrence\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A):\n        if A[i] == x:\n            return i\n        if A[i] > x:\n            break\n        i += 1\n    return -1\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    s = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            s += arr[i] * arr[j]\n    return s\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    ans = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            ans += arr[i]*arr[j]\n    return ans\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    num_elements = len(arr)\n    sum = 0\n    for i in range(0, num_elements):\n        for j in range(i, num_elements):\n            sub_array = arr[i:j+1]\n            prod = 1\n            for k in sub_array:\n                prod *= k\n            sum += prod\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr)==0:\n        return 0\n    s=0\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            s+=arr[i]*arr[j]\n    return s\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    size = len(arr)\n    product = 1\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sub_sum = []\n    for i in range(1, len(arr)+1):\n        sub_sum.append(sum(arr[0:i]))\n    print(\"Sum of products of all possible sublists:\", sub_sum)\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    prod = 1\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            prod = prod*arr[i]\n            prod = prod*arr[j]\n            res = res + prod\n            prod = 1\n    return res\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    prod = 1\n    if len(arr) == 1:\n        return arr\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            prod *= arr[j]\n    return prod\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    ans = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            ans += arr[i] * arr[j]\n    return ans\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    # Initialization of an empty list to store the sums of products.\n    res = []\n    \n    # Iterating over each element of the list and storing it's sum in a list.\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            res.append(arr[i] * arr[j])\n    \n    # Printing the sums of products of all possible sublists of a given list.\n    print('Sum of products of all possible sublists of a given list is:', sum(res))\n    \n    return res\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n & (2**n.bit_length() - 1)\n    n = (n ^ (n >> 1)) & (2**n.bit_length() - 1)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    print('Before:',bin(n))\n    print('After:',bin(n^2))\n    print('\\n')\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n ^= (1 << n.bit_length() - 2)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = (1 << n) - 1\n    return n & ~(1 << (n-1))\n    \ndef set_all_bits(n):\n    '''\n    Write a python function to set all the bits of a number except the first and the last bit. https://www.geeksforgeeks.org/set-all-bits-number-except-first-and-last-bits/\n    '''\n    n = (1 << n) - 1\n    return n\n    \ndef flip_bits(n):\n    '''\n    Write a python function to flip the bits of a number except the first and the last bit. https://www.geeksforgeeks.org/flip-bits-number-except-first-and-last-bits/\n    '''\n    return n & ~(1 << (n-1))\n    \ndef flip_all_bits(n):\n    '''\n    Write a python function to flip the bits of a number except the first and the last bit. https://www.geeksforgeeks.org/flip-bits-number-except-first-and-last-bits/\n    '''\n    return ~n\n    \ndef reverse_bits(n):\n    '''\n    Write a python function to reverse the bits of a number except the first and the last bit. https://www.geeksforgeeks.org/reverse-bits-number-except-first-and-last-bits/\n    '''\n    n = (1 << n) - 1\n    return n\n    \ndef reverse_bits_alternate(n):\n    '''\n    Write a python function to reverse the bits of a number except the first and the last bit. https://www.geeksforgeeks.org/reverse-bits-number-except-first-and-last-bits/\n    '''\n    return n & 0xAAAAAAAA\n    \ndef reverse_bits_alternate_alternate(n):\n    '''\n    Write a python function to reverse the bits of a number except the first and the last bit. https://www.geeksforgeeks.org/reverse-bits-number-except-first-and-last-bits/\n    '''\n    #n = (1 << n) - 1\n    #return n\n    return n | 0xAAAAAAAA\n    \ndef reverse_bits_alternate_alternate_alternate(n):\n    '''\n    Write a python function to reverse the bits of a number except the first and the last bit. https://www.geeksforgeeks.org/reverse-bits-number-except-first-and-last-bits/\n    '''\n    #n = (1 << n) - 1\n    #return n\n    return n & 0xAAAAAAAA\n    \ndef reverse_bits_alternate_alternate_alternate_alternate(n):\n    '''\n    Write a python function to reverse the bits of a number except the first and the last bit. https://www.geeksforgeeks.org/reverse-bits-number-except-first-and-last-bits/\n    '''\n    return n | 0xAAAAAAAA\n    \ndef reverse_bits_alternate_alternate_alternate_alternate_alternate(n):\n    '''\n    Write a python function to reverse the bits of a number except the first and the last bit. https://www.geeksforgeeks.org/reverse-bits-number-except-first-and-last-bits/\n    '''\n    #n = (1 << n) - 1\n    #return n\n    return n & 0xAAAAAAAA\n    \ndef reverse_bits_alternate_alternate_alternate_alternate_alternate_alternate(n):\n    '''\n    Write a python function to reverse the bits of a number except the first and the last bit. https://www.geeksforgeeks.org/reverse-bits-number-except-first-and-last-bits/\n    '''\n    #n = (1 << n) - 1\n    #return n\n    return n | 0xAAAAAAAA\n    \ndef reverse_bits_alternate_alternate_alternate_alternate_alternate_alternate_alternate(n):\n    '''\n    Write a python function to reverse the bits of a number except the first and the last bit. https://www.geeksforgeeks.org/reverse-bits-number-except-first-and-last-bits/\n    '''\n    #n = (1 << n) - 1\n    #return n\n    return n & 0xAAAAAAAA\n    \ndef reverse_bits_alternate_alternate_alternate_alternate_alternate_alternate_alternate_alternate(n):\n    '''\n    Write a python function to reverse the bits of a number except the first and the last bit. https://www.geeksforgeeks.org/reverse-bits-number-except-first-and-last-bits/\n    '''\n    #n = (1 << n) - 1\n    #return n\n    return n & 0xAAAAAAAA\n    \ndef reverse_bits_alternate_alternate_alternate_alternate_alternate_alternate_alternate_alternate_alternate(n):\n    '''\n    Write a python function to reverse the bits of a number except the first and the last bit. https://www.geeksforgeeks.org/reverse-bits-number-except-first-and-last-bits/\n    '''\n    #n = (1 << n) - 1\n    #return n\n    return n & 0xAAAAAAAA\n    \ndef reverse_bits_alternate_alternate_alternate_alternate_alternate_alternate_alternate_alternate_alternate(n):\n    '''\n    Write a python function to reverse the bits of a number except the first and the last bit. https://www.geeksforgeeks.org/reverse-bits-number-except-first-and-last-bits/\n    '''\n    #n = (1 << n) - 1\n    #return n\n    return n & 0xAAAAAAAA\n    \ndef reverse_bits_alternate_alternate_alternate_alternate_alternate_alternate_alternate_alternate_alternate_alternate(n):\n    '''\n    Write a python function to reverse the bits of a number except the first and the last bit. https://www.geeksforgeeks.org/reverse-bits-number-except-first-and-last-bits/\n    '''\n    #n = (1 << n) - 1\n    #return n\n    return n & 0xAAAAAAAA\n    \ndef reverse_bits_alternate_alternate_alternate_alternate_alternate_alternate_alternate_alternate_alternate_alternate_alternate(n):\n    '''\n    Write a python function to reverse the bits of a number except the first and the last bit. https://www.geeksforgeeks.org/reverse-bits-number-except-first-and-last-bits/\n    '''\n    #n = (1 << n) - 1\n    #return n\n    return n & 0xAAAAAAAA\n    \ndef reverse_bits_alternate_alternate_alternate_alternate_alternate_alternate_alternate_alternate_alternate_alternate_alternate_alternate(n):\n    '''\n    Write a python function to reverse the bits of a number except the first and the last bit. https://www.geeksforgeeks.org/reverse-bits-number-except-first-and-last-bits/\n    '''\n    #n = (1 << n) - 1\n    #return n\n    return n & 0xAAAAAAAA\n    \ndef reverse_bits_alternate_alternate_alternate_alternate_alternate_alternate_alternate_alternate_alternate_alternate_alternate_alternate_alternate(n):\n    '''\n    Write a python function to reverse the bits of a number except the first and the last bit. https://www.geeksforgeeks.org/reverse-bits-number-except-first-and-last-bits/\n    '''\n    #n = (1 << n) - 1\n    #return n\n    return n & 0xAAAAAAAA\n    \ndef reverse_bits_alternate_alternate_alternate_alternate_alternate_alternate_alternate_alternate_alternate_alternate_alternate_alternate_alternate_alternate(n):\n    '''\n    Write a python function to reverse the bits of a number except the first and the last bit. https://www.geeksforgeeks.org/reverse-bits-number-except-firs"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # set rightmost and leftmost\n    res = n ^ (1 << 31)\n    res |= (1 << 30)\n    return res\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = 0b101\n    n_inv = n ^ 0b1111\n    n_inv = n_inv >> 1\n    n_inv = n_inv << 1\n    return n_inv\n    "
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n < 0:\n        return 0\n    n = n & (2**32 - 1)\n    n = n + (n >> 1)\n    n = n - (n >> 2)\n    n = n + (n >> 4)\n    n = n - (n >> 8)\n    n = n + (n >> 16)\n    n = n - (n >> 32)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    m = 0b00\n    n = (m | n) % 0xFFFFFFFF\n    m = 0b01\n    n = (m | n) % 0xFFFFFFFF\n    m = 0b10\n    n = (m | n) % 0xFFFFFFFF\n    m = 0b11\n    n = (m | n) % 0xFFFFFFFF\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    i = n\n    while i > 0:\n        i = i & (i - 1)\n        i = i >> 1\n    return n ^ i\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    print(\"{0:b}\".format(n))\n    print(\"{0:b}\".format(n<<1))\n    print(\"{0:b}\".format(n<<2))\n    print(\"{0:b}\".format(n<<3))\n    print(\"{0:b}\".format(n<<4))\n    print(\"{0:b}\".format(n<<5))\n    print(\"{0:b}\".format(n<<6))\n    print(\"{0:b}\".format(n<<7))\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # # ------ Code Here ------\n    #     l = 0\n    #     r = len(a) - 1\n    #     while l <= r:\n    #         mid = l + ((r - l) // 2)\n    #         if a[mid] == x:\n    #             return mid\n    #         elif a[mid] > x:\n    #             r = mid - 1\n    #         else:\n    #             l = mid + 1\n    #     return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = 0\n    right = len(a) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if x <= a[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return None\n    if x > a[i]:\n        return i\n    return i + 1\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return None\n    if x > a[i]:\n        return i\n    return i + 1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    k=bisect.bisect_left(a,x)\n    return k\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    k=bisect.bisect_right(a,x)\n    return k\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = bisect.bisect_left(a, x)\n    if left!= len(a) and a[left] == x:\n        return left\n    return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if not a:\n        return None\n    left = 0\n    right = len(a) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if x < a[mid]:\n            right = mid\n        else:\n            left = mid + 1\n    if a[left] == x:\n        return left\n    return None\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if not a:\n        return None\n    left = 0\n    right = len(a) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if x > a[mid]:\n            left = mid + 1\n        else:\n            right = mid\n    if a[right] == x:\n        return right\n    return None\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = -1\n    right = len(a)\n    while right > left:\n        middle = left + (right - left) // 2\n        if a[middle] >= x:\n            right = middle\n        else:\n            left = middle + 1\n    return left\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == 0:\n        return 0\n    elif x < a[i-1]:\n        return i\n    else:\n        return i-1\n    \ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return len(a)\n    elif x > a[i]:\n        return i\n    else:\n        return i+1\n    \ndef lower_bound(a, x):\n    '''\n    Write a function to find the position of an element in sorted array such that it is lower than or equal to the given element. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return -1\n    elif x > a[i]:\n        return i\n    else:\n        return i+1\n        \ndef upper_bound(a, x):\n    '''\n    Write a function to find the position of an element in sorted array such that it is higher than or equal to the given element. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return -1\n    elif x < a[i]:\n        return i\n    else:\n        return i-1\n        \ndef lower_bound_recursive(a, x):\n    '''\n    Write a function to find the position of an element in sorted array such that it is lower than or equal to the given element. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return -1\n    else:\n        if x < a[0]:\n            return 0\n        else:\n            return 1 + lower_bound_recursive(a[1:], x)\n    \ndef upper_bound_recursive(a, x):\n    '''\n    Write a function to find the position of an element in sorted array such that it is higher than or equal to the given element. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return -1\n    else:\n        if x > a[-1]:\n            return len(a)\n        else:\n            return 1 + upper_bound_recursive(a[:-1], x)\n        \ndef upper_bound_recursive_optimized(a, x):\n    '''\n    Write a function to find the position of an element in sorted array such that it is higher than or equal to the given element. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return -1\n    else:\n        l = 0\n        h = len(a)\n        while l < h:\n            mid = (l + h) // 2\n            if x > a[mid]:\n                l = mid + 1\n            else:\n                h = mid\n        return l\n    \ndef lower_bound_optimized(a, x):\n    '''\n    Write a function to find the position of an element in sorted array such that it is lower than or equal to the given element. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return -1\n    else:\n        l = 0\n        h = len(a)\n        while l < h:\n            mid = (l + h) // 2\n            if x < a[mid]:\n                h = mid\n            else:\n                l = mid + 1\n        return l\n        \ndef check_sort(a):\n    '''\n    Write a function to check if an array is sorted in ascending order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) <= 1:\n        return True\n    else:\n        return a[0] <= a[1] and check_sort(a[1:])\n        \ndef check_sort_optimized(a):\n    '''\n    Write a function to check if an array is sorted in ascending order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) <= 1:\n        return True\n    if a[0] <= a[1]:\n        return check_sort_optimized(a[1:])\n    else:\n        return False\n        \ndef sum_array(a):\n    '''\n    Write a function to find the sum of all array elements. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return 0\n    else:\n        return a[0] + sum_array(a[1:])\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = 0\n    r = len(a) - 1\n    while l <= r:\n        mid = l + (r - l) // 2\n        if x < a[mid]:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return l\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    if n == 0:\n        return 0\n    if n == 1:\n        if x > a[0]:\n            return 0\n        else:\n            return 1\n    lo = 0\n    hi = n - 1\n    while lo <= hi:\n        mid = lo + (hi - lo) // 2\n        if x > a[mid]:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return lo\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if bool(re.search(regex,string)):\n        return \"Your string is starting with a vowel.\"\n    else:\n        return \"Your string is not starting with a vowel.\"\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False\n        "
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n        \n    \n    \ndef get_vowel_count(string): \n    '''\n    Write a function to count the number of vowels in a given string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    for vowel in vowels: \n        count += string.count(vowel)\n    return count\n        \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex, string.lower()))\n    \nprint(check_str(\"anand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"ananda\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))\nprint(check_str(\"enand\"))"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    string = string.lower()\n    res = re.match(regex, string)\n    if res:\n        return True\n    return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    # write your solution here\n    # new_str = 'a'+string\n    # regex = re.compile('[aeiouAEIOU]')\n    # if regex.search(new_str):\n    #     return True\n    # else:\n    #     return False\n    if string[0] in 'aeiouAEIOU':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex,string) is not None\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    a=re.match(regex,string)\n    if a:\n        return True\n    return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex, string)!= None\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1/n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    return geometric_sum(n-1) + n\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n > 1:\n        return n + geometric_sum(n-1)\n    return n\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return n\n    else:\n        return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==1:\n        return n\n    else:\n        return n*(1+geometric_sum(n-1))\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 0:\n        return 0\n    return 1/n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*(n-1)\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # smallest_triangle_number = 0\n    # for i in range(1,n+1):\n    #     smallest_triangle_number = i*(i+1)/2\n    # return smallest_triangle_number\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # code here\n    n = int(math.log(n, 10) + 1)\n    for i in range(n):\n        for j in range(n-i):\n            for k in range(n-i-j):\n                if (i + j + k) == n:\n                    print(i+1, j+1, k+1)\n                    return\n                "
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    res = (math.floor(math.sqrt(n))**2)*2\n    #res = int(res)\n    return res \n    \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    res = (math.floor(math.sqrt(n))**2)*2\n    #res = int(res)\n    return res \n    \n    \ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    res = (math.floor(math.sqrt(n))**2)*2\n    #res = int(res)\n    return res \n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # the smallest triangular number with n digits\n    # can be found by generating triangle numbers with\n    # the numbers being the sum of the squares of numbers\n    # of a triangular number \n    return int(math.sqrt(1 + 8 * n) - 1)\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    n = 10 ** (n - 1)\n    for i in range(n, 0, -1): \n        for j in range(0, i): \n            x = i * j\n            if x > n: \n                break\n            elif x == n: \n                return j\n            else: \n                continue\n    return -1\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize min_num with the first value of the triangle number\n    min_num = 1\n    # Initialize index with 0\n    index = 0\n    while(True):\n        # Compute triangular number by summing each value \n        triangular_num = min_num * (min_num + 1) / 2\n        # Check if the current triangular number is less than min_num \n        if triangular_num < n:\n            # If yes, update index and min_num \n            index = min_num\n            min_num = triangular_num\n        else:\n            # Else return index \n            return index\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    for i in range(n-1,0,-1):\n        for j in range(i,0,-1):\n            if n%(j+1)==0:\n                if n%(j+2)==0:\n                    return n\n                else:\n                    return n-1\nn = int(input())\nprint(find_Index(n)) \n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if (n == 1):\n        return 0\n    elif (n == 2):\n        return 1\n    else:\n        return 2*find_Index(n - 1) + 1\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = n-1\n    # key is based on factors of n\n    # factors of n\n    f = []\n    for i in range(1,int(math.sqrt(n))+1):\n        if(n%i == 0):\n            f.append(i)\n            f.append(n//i)\n    #print(f)\n    return f.index(min(f))\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # print(int(math.sqrt(n)))\n    for i in range(int(math.sqrt(n)), -1, -1):\n        if (n-i**2) <= 0:\n            # print(i)\n            return i\n        elif (n-i**2)%2!= 0:\n            # print(i)\n            return i-1\n        elif (n-i**2)%2 == 0:\n            # print(i)\n            return i\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(len(test_tup)):\n        d[test_tup[i]] = test_tup[i + 1]\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(len(test_tup)):\n        d[i]= test_tup[i]\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    key_dict = {}\n    if type(test_tup) is tuple:\n        key_dict.update(dict(zip(test_tup[::2], test_tup[1::2])))\n        return key_dict\n    else:\n        return None\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    i = 0\n    while i < len(test_tup)-1:\n        d[test_tup[i]] = test_tup[i+1]\n        i += 2\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_dict = {test_tup[i]:test_tup[i+1] for i in range(0,len(test_tup),2)}\n    print(new_dict)\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    out = {}\n    for i in range(0, len(test_tup)-1, 2):\n        out[test_tup[i]] = test_tup[i+1]\n    return out\n    \n    \ndef dict_to_tuple(test_dict):\n    '''\n    Write a function to convert the given dictionary to a tuple using the key-value pairs. https://www.geeksforgeeks.org/python-convert-dictionary-to-tuple/\n    '''\n    out = ()\n    for i in test_dict:\n        out += (i, test_dict[i])\n    return out\n    \n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if test_tup == \"\":\n        return None\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {n[0]:n[1] for n in enumerate(test_tup)}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    my_dict = {}\n    for i in range(len(test_tup)):\n        if i == 0:\n            my_dict[test_tup[i]] = test_tup[i + 1]\n        elif i == len(test_tup) - 1:\n            my_dict[test_tup[i - 1]] = test_tup[i]\n        else:\n            my_dict[test_tup[i - 1]] = test_tup[i]\n            my_dict[test_tup[i]] = test_tup[i + 1]\n    return my_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_ = {}\n    for i in range(0,len(test_tup)-1,2):\n        dict_[test_tup[i]] = test_tup[i+1]\n    return dict_\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s)==1:\n        return True\n    else:\n        if s[0]==s[1] and s[1]==s[2] and s[2]==s[3] and s[3]==s[4] and s[4]==s[5]:\n            return True\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)) :\n        if(s[i]!= s[i+1]) :\n            return False\n    return True\n    \n    \n    \ndef special_Char(s) :\n    '''\n    Write a python function to check whether there are any special character in the string or not.\n    '''\n    l = []\n    for i in range(len(s)) :\n        l.append(s[i])\n    l = ''.join(l)\n    for i in range(len(l)):\n        if l.count(l[i]) > 1 :\n            return True\n    return False\n    \n    \ndef count_vowels(s) :\n    '''\n    Write a python function to count all vowels in the string.\n    '''\n    v = 0\n    for i in range(len(s)) :\n        if(s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u' or s[i] == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U') :\n            v += 1\n    return v\n    \n    \ndef count_vowels_rec(s) :\n    '''\n    Write a python function to count all vowels in the string.\n    '''\n    if s == '' :\n        return 0\n    if s[0] == 'a' or s[0] == 'e' or s[0] == 'i' or s[0] == 'o' or s[0] == 'u' or s[0] == 'A' or s[0] == 'E' or s[0] == 'I' or s[0] == 'O' or s[0] == 'U' :\n        return 1 + count_vowels_rec(s[1:])\n    else :\n        return count_vowels_rec(s[1:])\n        \n        \ndef count_vowels_dp(s) :\n    '''\n    Write a python function to count all vowels in the string.\n    '''\n    n = len(s)\n    v = 0\n    arr = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        arr[i][i] = True\n        \n    for i in range(1, n):\n        if s[i-1] == 'a' or s[i-1] == 'e' or s[i-1] == 'i' or s[i-1] == 'o' or s[i-1] == 'u' or s[i-1] == 'A' or s[i-1] == 'E' or s[i-1] == 'I' or s[i-1] == 'O' or s[i-1] == 'U' :\n            arr[i][i] = True\n        else :\n            arr[i][i] = False\n            \n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i+l-1\n            if(arr[i+1][j-1] and s[i] == s[j]):\n                arr[i][j] = True\n            else :\n                arr[i][j] = False\n                \n    for i in range(n):\n        v += arr[i][i]\n        \n    return v\n    \n    \ndef count_all_vowels(s) :\n    '''\n    Write a python function to count all vowels in the string.\n    '''\n    v = 0\n    for i in range(len(s)) :\n        if(s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u' or s[i] == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U') :\n            v += 1\n    return v\n    \n    \ndef is_palindrome(s) :\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    s = s.lower()\n    i = 0\n    j = len(s)-1\n    while(i<j):\n        if s[i] =='':\n            i += 1\n        elif s[j] =='':\n            j -= 1\n        elif s[i]!= s[j]:\n            return False\n        else :\n            i += 1\n            j -= 1\n    return True\n    \n    \ndef is_palindrome_rec(s) :\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    def check(s, i, j):\n        if(s[i] =='' or s[j] ==''):\n            return True\n        if(s[i]!= s[j]):\n            return False\n        else :\n            return check(s, i+1, j-1)\n    if len(s) == 1 :\n        return True\n    return check(s, 0, len(s)-1)\n    \n    \ndef is_palindrome_dp(s) :\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    n = len(s)\n    arr = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        arr[i][i] = True\n    \n    for i in range(1, n):\n        if s[i-1] =='' or s[i] =='':\n            arr[i][i] = True\n        else :\n            arr[i][i] = False\n        \n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i+l-1\n            if(arr[i+1][j-1] and s[i] == s[j]):\n                arr[i][j] = True\n            else :\n                arr[i][j] = False\n    for i in range(n):\n        for j in range(i, n):\n            if(arr[i][j] == False):\n                return False\n    return True\n    \n    \ndef is_palindrome_iterative(s) :\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    n = len(s)\n    i = 0\n    j = n-1\n    while(i<j):\n        while(s[i]!=''):\n            i += 1\n        while(s[j]!=''):\n            j -= 1\n        if(i<j) :\n            if(s[i]!= s[j]) :\n                return False\n            i += 1\n            j -= 1\n    return True\n    \n    \ndef count_special_char(s) :\n    '''\n    Write a python function to check whether there are any special character in the string or not.\n    '''\n    count = 0\n    for i in range(len(s)) :\n        if s[i] =='' or s[i] == '.' or s[i] == ',' or s[i] == ':' or s[i] == ';' or s[i] == '(' or s[i] == ')' or s[i] == '-' or s[i] == '*' or s[i] == '@' or s[i] == '$' or s[i] == '^' or s[i] == '&' or s[i] == '#' or s[i] == '!' or s[i] == ',' or s[i] == '.' or s[i] == '?' or s[i] == ';' or s[i] == ':' or s[i] =='' or s[i] == '-' or s[i] == '*' or s[i] == '+' or s[i] == '/' or s[i] == '(' or s[i] == ')':\n            count += 1\n    return count\n    \n    "
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\nprint(all_Characters_Same('abcd'))\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count=0\n    for i in range(len(s)):\n        if s[i]==s[i+1]:\n            count+=1\n        else:\n            return False\n    if count==len(s)-1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s)==len(set(s))\n    \n    "
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return s.lower() == s[0].lower()\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) == 1\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    \n    if len(s) == 0 :\n        return False\n    \n    i = 0\n    while i < len(s) :\n        if s[i]!= s[0] :\n            return False\n        else :\n            i = i + 1\n    return True\n    \ndef is_palindrome(s) :\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    \n    if len(s) == 0 :\n        return False\n    \n    i = 0\n    j = len(s) - 1\n    while i < j :\n        if s[i]!= s[j] :\n            return False\n        i = i + 1\n        j = j - 1\n    return True\n    \ndef reverse(s) :\n    '''\n    Write a python function to reverse a string.\n    '''\n    \n    if len(s) == 0 :\n        return\n    \n    i = 0\n    j = len(s) - 1\n    while i < j :\n        s[i], s[j] = s[j], s[i]\n        i = i + 1\n        j = j - 1\n    return s\n    \ndef find_biggest(l) :\n    '''\n    Write a python function to find the biggest element in a list.\n    '''\n    \n    if len(l) == 0 :\n        return\n    \n    big = l[0]\n    i = 1\n    while i < len(l) :\n        if l[i] > big :\n            big = l[i]\n        i = i + 1\n    return big\n    \ndef find_smallest(l) :\n    '''\n    Write a python function to find the smallest element in a list.\n    '''\n    \n    if len(l) == 0 :\n        return\n    \n    small = l[0]\n    i = 1\n    while i < len(l) :\n        if l[i] < small :\n            small = l[i]\n        i = i + 1\n    return small\n    \ndef remove_duplicates(l) :\n    '''\n    Write a python function to remove all duplicate element in a list.\n    '''\n    \n    if len(l) == 0 :\n        return\n    \n    i = 0\n    j = 1\n    while j < len(l) :\n        if l[i] == l[j] :\n            j = j + 1\n        else :\n            i = i + 1\n            l[i] = l[j]\n            j = j + 1\n    return l\n    \ndef get_sum(l) :\n    '''\n    Write a python function to get the sum of all elements in a list.\n    '''\n    \n    if len(l) == 0 :\n        return\n    \n    s = 0\n    for i in range(0, len(l)) :\n        s = s + l[i]\n    return s\n    \ndef get_average(l) :\n    '''\n    Write a python function to get the average of all elements in a list.\n    '''\n    \n    if len(l) == 0 :\n        return\n    \n    s = get_sum(l)\n    n = len(l)\n    return s / n\n    \ndef get_factorial(n) :\n    '''\n    Write a python function to get the factorial of a given number.\n    '''\n    \n    if n < 0 :\n        return None\n    \n    if n == 0 or n == 1 :\n        return 1\n    else :\n        return n * get_factorial(n - 1)\n    \ndef get_coefficient(a, b) :\n    '''\n    Write a python function to get the coefficient of a polynomial equation of the form a*x^n + b*x^n-1 +... + c*x^n-m\n    '''\n    \n    if a == 0 or b == 0 :\n        return None\n    else :\n        return get_factorial(len(a) - 1) / get_factorial(len(a) - 2)\n    \ndef get_roots(l) :\n    '''\n    Write a python function to get the roots of a quadratic equation of the form ax^2 + bx + c.\n    '''\n    \n    a = l[0]\n    b = l[1]\n    c = l[2]\n    \n    if a == 0 :\n        if c == 0 :\n            return None\n        else :\n            return -c / b\n    \n    D = b * b - 4 * a * c\n    \n    if D < 0 :\n        return\n    else :\n        return (-b + D ** 0.5) / (2 * a), (-b - D ** 0.5) / (2 * a)\n    \ndef convert_time(h, m, s) :\n    '''\n    Write a python function to convert the given hours, minutes and seconds into a string representing the time.\n    '''\n    \n    if h == 0 :\n        if m == 0 :\n            if s == 0 :\n                return\n            else :\n                return str(s) + \" seconds\"\n        else :\n            if s == 0 :\n                return str(m) + \" minutes\"\n            else :\n                return str(m) + \" minutes and \" + str(s) + \" seconds\"\n    else :\n        if m == 0 :\n            return str(h) + \" hours and \" + str(s) + \" seconds\"\n        else :\n            return str(h) + \" hours, \" + str(m) + \" minutes and \" + str(s) + \" seconds\"\n        \ndef write_to_file(fname, l) :\n    '''\n    Write a python function to write a list to a file.\n    '''\n    \n    if len(l) == 0 :\n        return\n    \n    f = open(fname, \"w\")\n    for i in range(0, len(l)) :\n        f.write(str(l[i]) + \"\\n\")\n    f.close()\n    \ndef read_from_file(fname) :\n    '''\n    Write a python function to read a list from a file.\n    '''\n    \n    l = []\n    \n    if os.path.exists(fname) :\n        f = open(fname, \"r\")\n        for line in f :\n            l.append(int(line))\n        f.close()\n    return l\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)) :\n        if s[i]!= s[i+1] :\n            return False\n    return True\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return(side**2)\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (0.5*(side**2)*(math.sqrt(3)-1))/2\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 1/2 * side ** 2 * 4\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side * side * side / 2\n    return a\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (0.25 * side * side * side)\n    \nprint(area_tetrahedron(5))\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side == 1:\n        return 6\n    elif side == 2:\n        return 4\n    elif side == 3:\n        return 5\n    else:\n        return 6\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side**2) * 0.5\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    #Calculate the semi-perimeter of the tetrahedron\n    s = side ** 2 / 4\n    #calculate the volume of the tetrahedron\n    v = (s * (s - 1) * (s - 2)) ** (1/3)\n    #calculate the area of the tetrahedron\n    A = v * 6 / 4\n    return A\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (math.sqrt(1/12)*side**2)\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return (side**2)\ndef area_rectangle(length,width):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    return (length*width)\ndef area_square(side):\n    '''\n    Write a function to caluclate the area of a square.\n    '''\n    return (side**2)\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    return (math.pi*radius**2)\ndef volume_cylinder(radius,height):\n    '''\n    Write a function to caluclate the volume of a cylinder.\n    '''\n    return (math.pi*radius**2*height)\ndef volume_cone(radius,height):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    return (math.pi*radius**2*height/3)\ndef volume_sphere(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return (4/3*math.pi*radius**3)\ndef volume_pyramid(height,length):\n    '''\n    Write a function to caluclate the volume of a pyramid.\n    '''\n    return (height*length**2)\ndef volume_cone_cylinder(radius,height):\n    '''\n    Write a function to caluclate the volume of a cone and cylinder.\n    '''\n    return (volume_cone(radius,height))\ndef volume_cone_pyramid(radius,height):\n    '''\n    Write a function to caluclate the volume of a cone and pyramid.\n    '''\n    return (volume_cone(radius,height))\ndef volume_pyramid_cylinder(height,length):\n    '''\n    Write a function to caluclate the volume of a pyramid and cylinder.\n    '''\n    return (volume_pyramid(height,length))\ndef volume_pyramid_cone(height,radius):\n    '''\n    Write a function to caluclate the volume of a pyramid and cone.\n    '''\n    return (volume_pyramid(height,radius))\ndef volume_cone_pyramid(radius,height):\n    '''\n    Write a function to caluclate the volume of a cone and pyramid.\n    '''\n    return (volume_cone(radius,height))\ndef volume_sphere_cylinder(radius,height):\n    '''\n    Write a function to caluclate the volume of a sphere and cylinder.\n    '''\n    return (volume_sphere(radius))\ndef volume_sphere_cone(radius,height):\n    '''\n    Write a function to caluclate the volume of a sphere and cone.\n    '''\n    return (volume_sphere(radius))\ndef volume_cone_sphere(radius,height):\n    '''\n    Write a function to caluclate the volume of a cone and sphere.\n    '''\n    return (volume_cone(radius,height))\ndef volume_sphere_pyramid(radius,height):\n    '''\n    Write a function to caluclate the volume of a sphere and pyramid.\n    '''\n    return (volume_sphere(radius))\ndef volume_pyramid_sphere(height,length):\n    '''\n    Write a function to caluclate the volume of a pyramid and sphere.\n    '''\n    return (volume_pyramid(height,length))\ndef volume_sphere_cone_pyramid(radius,height):\n    '''\n    Write a function to caluclate the volume of a sphere and cone and pyramid.\n    '''\n    return (volume_sphere(radius))\ndef volume_cone_sphere_pyramid(radius,height):\n    '''\n    Write a function to caluclate the volume of a cone and sphere and pyramid.\n    '''\n    return (volume_cone(radius,height))\ndef volume_cone_sphere_pyramid_cylinder(radius,height):\n    '''\n    Write a function to caluclate the volume of a cone and sphere and pyramid.\n    '''\n    return (volume_cone(radius,height))\ndef volume_cone_pyramid_cylinder(radius,height):\n    '''\n    Write a function to caluclate the volume of a cone and pyramid.\n    '''\n    return (volume_cone(radius,height))\ndef volume_sphere_cylinder_pyramid(radius,height):\n    '''\n    Write a function to caluclate the volume of a sphere and cylinder and pyramid.\n    '''\n    return (volume_sphere(radius))\ndef volume_pyramid_cylinder_sphere(height,length):\n    '''\n    Write a function to caluclate the volume of a pyramid and cylinder and sphere.\n    '''\n    return (volume_pyramid(height,length))\ndef volume_cone_pyramid_cylinder(radius,height):\n    '''\n    Write a function to caluclate the volume of a cone and pyramid and cylinder.\n    '''\n    return (volume_cone(radius,height))\ndef volume_cone_pyramid_cylinder_sphere(radius,height):\n    '''\n    Write a function to caluclate the volume of a cone and pyramid and cylinder.\n    '''\n    return (volume_cone(radius,height))\ndef volume_cylinder_pyramid_cone(radius,height):\n    '''\n    Write a function to caluclate the volume of a cylinder and pyramid and cone.\n    '''\n    return (volume_cylinder(radius,height))\ndef volume_cylinder_pyramid_cone_sphere(radius,height):\n    '''\n    Write a function to caluclate the volume of a cylinder and pyramid and cone.\n    '''\n    return (volume_cylinder(radius,height))\ndef volume_cone_pyramid_cylinder_sphere(radius,height):\n    '''\n    Write a function to caluclate the volume of a cone and pyramid and cylinder.\n    '''\n    return (volume_cone(radius,height))\ndef volume_cone_pyramid_cylinder_sphere_sphere(radius,height):\n    '''\n    Write a function to caluclate the volume of a cone and pyramid and cylinder and sphere.\n    '''\n    return (volume_cone(radius,height))\ndef volume_sphere_cone_pyramid_cylinder_sphere(radius,height):\n    '''\n    Write a function to caluclate the volume of a sphere, cone, pyramid and cylinder and sphere.\n    '''\n    return (volume_sphere(radius))\ndef volume_sphere_cylinder_pyramid_cone_sphere(radius,height):\n    '''\n    Write a function to caluclate the volume of a sphere, cylinder, pyramid and cone and sphere.\n    '''\n    return (volume_sphere(radius))\ndef volume_cone_pyramid_cylinder_sphere_sphere(radius,height):\n    '''\n    Write a function to caluclate the volume of a cone, pyramid, cylinder and sphere and sphere.\n    '''\n    return (volume_cone(radius,height))\ndef volume_sphere_cone_pyramid_cylinder_sphere_cylinder(radius,height):\n    '''\n    Write a function to caluclate the volume of a sphere, cone, pyramid and cylinder and cylinder.\n    '''\n    return (volume_sphere(radius))\ndef volume_cone_sphere_pyramid_cylinder_cylinder(radius,height):\n    '''\n    Write a function to caluclate the volume of a cone, sphere, pyramid and cylinder and cylinder.\n    '''\n    return (volume_cone(radius,height))\ndef volume_sphere_cone_pyramid_cylinder_cylinder_sphere(radius,height):\n    '''\n    Write a function to caluclate the volume of a sphere, cone, pyramid and cylinder and cylinder.\n    '''\n    return (volume_sphere(radius))\ndef volume_cone_sphere_pyramid_cylinder_cylinder_sphere(radius,height):\n    '''\n    Write a function to caluclate the volume of a cone, sphere, pyramid and cylinder and cylinder.\n    '''\n    return (volume"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # formula for area of tetrahedron\n    return (1/3)*(side*side*side)\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(len(list)-m):\n        list[i], list[i+m] = list[i+m], list[i]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list_length = len(list)\n    # count = 0\n    # if list_length <= 1:\n    #     print(\"Can't rotate a list with only one item\")\n    #     return\n    # else:\n    #     count = (list_length - 2) % m\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        list.append(list.pop(0))\n    print(list)\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list_len = len(list)\n    #print(list)\n    rot_len = list_len - m\n    #print(rot_len)\n    first_ele = list[0]\n    #print(first_ele)\n    temp = list[m]\n    #print(temp)\n    for i in range(m,list_len):\n        #print(list[i])\n        list[i] = list[i-1]\n        #print(list)\n    list[list_len-m] = first_ele\n    #print(list)\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    m = len(list)\n    if m == 0:\n        return list\n    else:\n        temp = list[m - 1]\n        for i in range(m - 1):\n            list[i] = list[i + 1]\n        list[m - 1] = temp\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # print(list[m:])\n    # print(list[:m])\n    # print(list[-m:])\n    # print(list[:len(list)-m])\n    list[:] = list[len(list)-m:] + list[:len(list)-m]\n    # print(list)\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        list.append(list.pop(0))\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    \n    # if list size is 1 or less, we can't rotate it.\n    if len(list) <= 1:\n        return\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(0, m):\n        x = list.pop()\n        list.insert(0, x)\n    return list\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return test_tup[0]!= None and test_tup[1]!= None\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    assert all(ele is not None for ele in test_tup), \"Some of the values in the tuple are None\"\n    print('Tuple passed all checks')\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return all([el is not None for el in test_tup])\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for t in test_tup:\n        if t is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    \n    for i in test_tup:\n        if i == None:\n            print('We have a None')\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x == None for x in test_tup):\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(range(startnum, endnum + 1))\\\n          [\n          :::\n            lambda rng: rng\\\n                  [\n                  :::\n                    lambda x: x if all(x % y == 0 for y in range(1, x)) else None\n                  :::\n                  ]\n          ]\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def check_for_divisible(num):\n        s = str(num)\n        for i in s:\n            if int(i) % int(s)!= 0:\n                return False\n        return True\n    return [x for x in range(startnum, endnum) if check_for_divisible(x)]\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(range(startnum, endnum))\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return (lambda start, end: range(start, end + 1) if sum(1 for i in range(start, end + 1) if all(i % x for x in map(int, str(i)))) > 0 else None) (startnum, endnum)\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # solution from \n    # https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    # for each digit in range, check if each digit in that number is divisible by it\n    # return the list of the numbers in range that are divisible by each digit\n    digits = list(range(0,10))\n    \n    def divisible_by_digits(startnum, endnum):\n        digits = list(range(0,10))\n        return list(filter(lambda x: (lambda f: f(f,startnum,endnum) for f in [lambda x,y,z: (x+y+z)%x==0 for x in digits]),digits))\n    \n    return divisible_by_digits(startnum, endnum)\n    \n    # solution\n    # def divisible_by_digits(startnum, endnum):\n    #     return [n for n in range(startnum, endnum + 1) if all(map(lambda x: x % n == 0, range(1,10)))]\n    \n    # https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-25.php\n    # def divisible_by_digits(startnum, endnum):\n    #     digits = list(range(0,10))\n    #     return list(filter(lambda x: (lambda f: f(f,startnum,endnum) for f in [lambda x,y,z: (x+y+z)%x==0 for x in digits]),digits))\n    \n    # https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-26.php\n    # def divisible_by_digits(startnum, endnum):\n    #     def divisible_by_digits(startnum, endnum):\n    #         return filter(lambda x: sum([(lambda f: f(f,startnum,endnum) for f in [lambda x,y,z: (x+y+z)%x==0 for x in range(1,10)])]) > 0,range(startnum, endnum+1))\n    \n    # https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-27.php\n    # def divisible_by_digits(startnum, endnum):\n    #     return list(filter(lambda x: sum([(lambda f: f(f,startnum,endnum) for f in [lambda x,y,z: (x+y+z)%x==0 for x in range(1,10)])]) > 0,range(startnum, endnum+1)))\n    \n    # https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-28.php\n    # def divisible_by_digits(startnum, endnum):\n    #     digits = list(range(0,10))\n    #     return list(filter(lambda x: sum([(lambda f: f(f,startnum,endnum) for f in [lambda x,y,z: (x+y+z)%x==0 for x in digits])]) > 0,range(startnum, endnum+1)))\n    \n    # https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-29.php\n    # def divisible_by_digits(startnum, endnum):\n    #     return list(filter(lambda x: sum([(lambda f: f(f,startnum,endnum) for f in [lambda x,y,z: (x+y+z)%x==0 for x in range(1,10)])]) > 0,range(startnum, endnum+1)))\n    \n    # https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-30.php\n    # def divisible_by_digits(startnum, endnum):\n    #     return list(filter(lambda x: sum([(lambda f: f(f,startnum,endnum) for f in [lambda x,y,z: (x+y+z)%x==0 for x in range(1,10)])]) > 0,range(startnum, endnum+1)))\n    \n    # https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-31.php\n    # def divisible_by_digits(startnum, endnum):\n    #     return list(filter(lambda x: sum([(lambda f: f(f,startnum,endnum) for f in [lambda x,y,z: (x+y+z)%x==0 for x in range(1,10)])]) > 0,range(startnum, endnum+1)))\n    \n    # https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-32.php\n    # def divisible_by_digits(startnum, endnum):\n    #     return list(filter(lambda x: sum([(lambda f: f(f,startnum,endnum) for f in [lambda x,y,z: (x+y+z)%x==0 for x in range(1,10)])]) > 0,range(startnum, endnum+1)))\n    \n    # https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-33.php\n    # def divisible_by_digits(startnum, endnum):\n    #     return list(filter(lambda x: sum([(lambda f: f(f,startnum,endnum) for f in [lambda x,y,z: (x+y+z)%x==0 for x in range(1,10)])]) > 0,range(startnum, endnum+1)))\n    \n    # https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-34.php\n    # def divisible_by_digits(startnum, endnum):\n    #     return list(filter(lambda x: sum([(lambda f: f(f,startnum,endnum) for f in [lambda x,y,z: (x+y+z)%x==0 for x in range(1,10)])]) > 0,range(startnum, endnum+1)))\n    \n    # https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-35.php\n    # def divisible_by_digits(startnum, endnum):\n    #     return list(filter(lambda x: sum([(lambda f: f(f,startnum,endnum) for f in [lambda x,y,z: (x+y+z)%x==0 for x in range(1,10)])]) > 0,range(startnum, endnum+1)))\n    \n    # https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-36.php\n    # def divisible_by_digits(startnum, endnum):\n    #     return list(filter(lambda x: sum([(lambda f: f(f,startnum,endnum) for f in [lambda x,y,z: (x+y+z)%x==0 for x in range(1,10)])]) > 0,range(startnum, endnum+1)))\n    \n    # https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-37.php\n    # def divisible_by_digits(startnum, endnum):\n    #     return list(filter(lambda x: sum([(lambda f: f(f,startnum,endnum) for f in [lambda x,y,z: (x+y+z)%x==0 for x in range(1,10)])]) > 0,range(startnum, endnum+1)))\n    \n    # https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-38.php\n    # def divisible_by"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    divisible_by_digits = []\n    startnum = int(startnum)\n    endnum = int(endnum)\n    for i in range(startnum, endnum):\n        lst = list(str(i))\n        if all(i%x == 0 for x in lst):\n            divisible_by_digits.append(i)\n    return divisible_by_digits\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return filter(lambda x: all(x % y == 0 for y in range(startnum, endnum + 1)), range(startnum, endnum + 1))\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return filter(lambda x: all(x%int(i) == 0 for i in str(x)), range(startnum, endnum))\nprint(divisible_by_digits(1300, 1500))"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for num in range(startnum, endnum + 1):\n        divisible_by_digits = lambda x: any(True for digit in str(x) if x % digit == 0)\n        print(f\"{num} is divisible by {divisible_by_digits(num)}\")\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    listofdiv = []\n    for num in range(startnum, endnum+1):\n        for i in range(1,len(str(num))+1):\n            if num%i == 0:\n                listofdiv.append(num)\n    return listofdiv\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return r**2 * math.sin(math.radians(a))\ndef area_of_circle(r):\n    '''\n    Write a function to find area of a circle. The function takes the radius as an input. Function should return None if the radius is zero.\n    '''\n    if r == 0:\n        return None\n    else:\n        return math.pi * r**2\ndef fuel_per_gallon(miles):\n    '''\n    Write a function that takes a distance in miles and returns the amount of fuel required to travel that distance.\n    '''\n    return (miles * 1.60934)\ndef bus_fuel(kms):\n    '''\n    Write a function that takes a distance in kilometers and returns the amount of fuel required to travel that distance.\n    '''\n    return (kms * 0.621371)\ndef distance_in_mile(km):\n    '''\n    Write a function that takes a distance in kilometers and returns the distance in miles.\n    '''\n    return (km * 0.621371)\ndef distance_in_kms(miles):\n    '''\n    Write a function that takes a distance in miles and returns the distance in kilometers.\n    '''\n    return (miles * 1.60934)\ndef is_prime(n):\n    '''\n    Write a function that checks whether a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\ndef number_of_divisors(n):\n    '''\n    Write a function to find the number of divisors of a given number.\n    '''\n    if n <= 1:\n        return None\n    else:\n        return int((n/2) + 1)\ndef maximum(a, b):\n    '''\n    Write a function that returns the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\ndef is_pythagorean_triplet(a, b, c):\n    '''\n    Write a function that takes three integers and returns True if they form a Pythagorean Triplet.\n    '''\n    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\ndef find_fibonacci_number_via_choprod(n):\n    '''\n    Write a function that uses the multiplication algorithm for finding the Fibonacci Number and returns the nth term of the Fibonacci Sequence.\n    '''\n    a, b = 0, 1\n    while n > 0:\n        a, b = b, a+b\n        n = n-1\n    return a\ndef find_fibonacci_number_via_choprod_without_loop(n):\n    '''\n    Write a function that uses the multiplication algorithm for finding the Fibonacci Number and returns the nth term of the Fibonacci Sequence.\n    '''\n    a, b = 0, 1\n    if n == 0:\n        return 0\n    else:\n        for i in range(n):\n            a, b = b, a+b\n        return a\ndef find_fibonacci_number_via_choprod_with_mod(n):\n    '''\n    Write a function that uses the multiplication algorithm for finding the Fibonacci Number and returns the nth term of the Fibonacci Sequence.\n    '''\n    a, b = 0, 1\n    while n > 0:\n        a, b = b, a+b\n        n = n-1\n    if n == 0:\n        return 0\n    else:\n        return a%(10**9 + 7)\ndef find_fibonacci_number_via_choprod_with_mod_without_loop(n):\n    '''\n    Write a function that uses the multiplication algorithm for finding the Fibonacci Number and returns the nth term of the Fibonacci Sequence.\n    '''\n    a, b = 0, 1\n    if n == 0:\n        return 0\n    else:\n        for i in range(n):\n            a, b = b, a+b\n        return a%(10**9 + 7)\ndef find_number_of_divisors(n):\n    '''\n    Write a function that takes a number as input and returns the number of divisors of that number.\n    '''\n    count = 1\n    for i in range(1, n):\n        if n % i == 0:\n            count = count + 1\n    return count\ndef find_number_of_divisors_via_loop(n):\n    '''\n    Write a function that takes a number as input and returns the number of divisors of that number.\n    '''\n    count = 1\n    for i in range(1, n):\n        if n % i == 0:\n            count = count + 1\n    return count\ndef find_number_of_divisors_via_loop_without_loop(n):\n    '''\n    Write a function that takes a number as input and returns the number of divisors of that number.\n    '''\n    count = 1\n    while n > 1:\n        if n % count == 0:\n            n = n/count\n            count = count + 1\n        else:\n            count = count + 1\n    return count\ndef find_number_of_divisors_via_loop_with_mod(n):\n    '''\n    Write a function that takes a number as input and returns the number of divisors of that number.\n    '''\n    count = 1\n    while n > 1:\n        if n % count == 0:\n            n = n/count\n            count = count + 1\n        else:\n            count = count + 1\n    if n == 1:\n        return 1\n    else:\n        return count%(10**9 + 7)\ndef find_number_of_divisors_via_loop_with_mod_without_loop(n):\n    '''\n    Write a function that takes a number as input and returns the number of divisors of that number.\n    '''\n    count = 1\n    while n > 1:\n        if n % count == 0:\n            n = n/count\n            count = count + 1\n        else:\n            count = count + 1\n    if n == 1:\n        return 1\n    else:\n        return count%(10**9 + 7)\ndef count_set_bits(n):\n    '''\n    Write a function that returns the number of set bits of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return int((math.log(n, 2)) + 1)\ndef count_set_bits_via_bit_manipulation(n):\n    '''\n    Write a function that returns the number of set bits of a given number.\n    '''\n    count = 0\n    while n > 0:\n        n = n&(n-1)\n        count = count + 1\n    return count\ndef find_smallest_int(x, y, z):\n    '''\n    Write a function that returns the smallest of three integers.\n    '''\n    if x < y < z:\n        return x\n    elif y < x < z:\n        return y\n    else:\n        return z\ndef next_lexicographical(s):\n    '''\n    Write a function that returns the next lexicographically ordered string.\n    '''\n    return s[1:] + s[0]\ndef next_lexicographical_in_place(s):\n    '''\n    Write a function that returns the next lexicographically ordered string.\n    '''\n    if s[-1] > s[-2]:\n        return s[:-1] + s[-1]\n    else:\n        return s[:-1] + s[0]\ndef next_lexicographical_in_place_without_loop(s):\n    '''\n    Write a function that returns the next lexicographically ordered string.\n    '''\n    if s[-1] > s[-2]:\n        return s[:-1] + s[0]\n    else:\n        return s[:-1] + s[-1]\ndef print_dictionary(dictionary):\n    '''\n    Write a function that takes a dictionar"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    s = math.pi*r*r\n    sector_area = s*a/360\n    return sector_area\n    \nsector_area(2,90)\nsector_area(2,360)\nsector_area(2,500)\nsector_area(2,800)\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a > 360):\n        return None\n    else:\n        return math.pi*r*r*(a/360)\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*(r**2)*(a/360)\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<0 or a>360:\n        return None\n    if r==0 or r==1 or r==-1:\n        return 0\n    else:\n        return (math.pi*(r**2))*(360/a)\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    if a == 0:\n        a = 1\n    if r == 0:\n        return math.pi*a*a\n    else:\n        return math.pi*a*r*r\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (a>=0) and (a<=360):\n        return math.pi * r * r * a / 180\n    else:\n        return None\n    pass\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*a**2*r\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r**2) * (a / 360)\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(r*math.sin(math.radians(a))>=0):\n        area=r*math.sin(math.radians(a))*2\n        print(area)\n    else:\n        return None\nsector_area(2,30)\nsector_area(3,40)\nsector_area(4,50)\nsector_area(1,30)\ndef n_sphere(r):\n    '''\n    Write a function to calculate the surface area of a sphere. The function takes the radius of the sphere as input. Function should return None if the radius is equal to zero.\n    '''\n    if(r<=0):\n        return None\n    else:\n        a=4*math.pi*r*r\n        print(a)\nn_sphere(2)\nn_sphere(3)\nn_sphere(4)\nn_sphere(1)\ndef perimeter(radius):\n    '''\n    Write a function to calculate the perimeter of a sphere. The function takes the radius of the sphere as input. Function should return None if the radius is equal to zero.\n    '''\n    if(radius<=0):\n        return None\n    else:\n        b=2*math.pi*radius\n        print(b)\nperimeter(2)\nperimeter(3)\nperimeter(4)\nperimeter(1)\ndef volume(radius):\n    '''\n    Write a function to calculate the volume of a sphere. The function takes the radius of the sphere as input. Function should return None if the radius is equal to zero.\n    '''\n    if(radius<=0):\n        return None\n    else:\n        c=4/3*math.pi*radius*radius*radius\n        print(c)\nvolume(2)\nvolume(3)\nvolume(4)\nvolume(1)\ndef area_of_cone(radius,height):\n    '''\n    Write a function to calculate the surface area of a cone. The function takes the radius and height of the cone as inputs. Function should return None if the height is equal to zero.\n    '''\n    if(height<=0):\n        return None\n    else:\n        a=math.pi*(radius**2)*height/3\n        print(a)\narea_of_cone(2,3)\narea_of_cone(3,4)\narea_of_cone(3,3)\narea_of_cone(1,3)\ndef surface_area_of_cylinder(radius,height):\n    '''\n    Write a function to calculate the surface area of a cylinder. The function takes the radius and height of the cylinder as inputs. Function should return None if the height is equal to zero.\n    '''\n    if(height<=0):\n        return None\n    else:\n        a=2*math.pi*radius*height+2*math.pi*radius**2\n        print(a)\nsurface_area_of_cylinder(2,3)\nsurface_area_of_cylinder(3,4)\nsurface_area_of_cylinder(3,3)\nsurface_area_of_cylinder(1,3)\ndef n_sphere(r):\n    '''\n    Write a function to calculate the surface area of a sphere. The function takes the radius of the sphere as input. Function should return None if the radius is equal to zero.\n    '''\n    if(r<=0):\n        return None\n    else:\n        a=4*math.pi*r*r\n        print(a)\nn_sphere(2)\nn_sphere(3)\nn_sphere(4)\nn_sphere(1)\ndef volume(radius):\n    '''\n    Write a function to calculate the volume of a sphere. The function takes the radius of the sphere as input. Function should return None if the radius is equal to zero.\n    '''\n    if(radius<=0):\n        return None\n    else:\n        b=4/3*math.pi*radius*radius*radius\n        print(b)\nvolume(2)\nvolume(3)\nvolume(4)\nvolume(1)\ndef surface_area_of_cylinder(radius,height):\n    '''\n    Write a function to calculate the surface area of a cylinder. The function takes the radius and height of the cylinder as inputs. Function should return None if the height is equal to zero.\n    '''\n    if(height<=0):\n        return None\n    else:\n        a=2*math.pi*radius*height+2*math.pi*radius**2\n        print(a)\nsurface_area_of_cylinder(2,3)\nsurface_area_of_cylinder(3,4)\nsurface_area_of_cylinder(3,3)\nsurface_area_of_cylinder(1,3)\ndef volume_of_cone(radius,height):\n    '''\n    Write a function to calculate the volume of a cone. The function takes the radius and height of the cone as inputs. Function should return None if the height is equal to zero.\n    '''\n    if(height<=0):\n        return None\n    else:\n        c=math.pi*radius*radius*height/3\n        print(c)\nvolume_of_cone(2,3)\nvolume_of_cone(3,4)\nvolume_of_cone(3,3)\nvolume_of_cone(1,3)\ndef n_sphere(r):\n    '''\n    Write a function to calculate the surface area of a sphere. The function takes the radius of the sphere as input. Function should return None if the radius is equal to zero.\n    '''\n    if(r<=0):\n        return None\n    else:\n        a=4*math.pi*r*r\n        print(a)\nn_sphere(2)\nn_sphere(3)\nn_sphere(4)\nn_sphere(1)\ndef volume(radius):\n    '''\n    Write a function to calculate the volume of a sphere. The function takes the radius of the sphere as input. Function should return None if the radius is equal to zero.\n    '''\n    if(radius<=0):\n        return None\n    else:\n        b=4/3*math.pi*radius*radius*radius\n        print(b)\nvolume(2)\nvolume(3)\nvolume(4)\nvolume(1)\ndef area_of_cone(radius,height):\n    '''\n    Write a function to calculate the surface area of a cone. The function takes the radius and height of the cone as inputs. Function should return None if the height is equal to zero.\n    '''\n    if(height<=0):\n        return None\n    else:\n        a=math.pi*(radius**2)*height/3\n        print(a)\narea_of_cone(2,3)\narea_of_cone(3,4)\narea_of_cone(3,3)\narea_of_cone(1,3)\ndef surface_area_of_cylinder(radius,height):\n    '''\n    Write a function to calculate the surface area of a cylinder. The function takes the radius and height of the cylinder as inputs. Function should return None if the height is equal to zero.\n    '''\n    if(height<=0):\n        return None\n    else:\n        a=2*math.pi*radius*height+2*math.pi*radius**2\n        print(a)\nsurface_area_of_cylinder(2,3)\nsurface_area_of_cylinder(3,4)\nsurface_area_of_cylinder(3,3)\nsurface_area_of_cylinder(1,3)\ndef volume_of_cone(radius,height):\n    '''\n    Write a function to calculate the volume of a cone. The function takes the radius and height of the cone as inputs. Function should return None if the height is equal to zero.\n    '''\n    if(height<=0):\n        return None\n    else:\n        c=math.pi*radius*radius*height/3\n        print(c)\nvolume_of_cone(2,3)\nvolume_of_cone(3,4)\nvolume_of_cone(3,3)\nvolume_of_cone(1,3)\ndef n_sphere(r):\n    '''\n    Write a function to calculate the surface area of a sphere. The function takes the radius of the sphere as input. Function should return None i"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # create 2D array to store values\n    M = [[0 for i in range(len(Y)+1)] for j in range(len(X)+1)] \n    print(M)\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    dp = [[[0] * (len(Z)+1) for j in range(len(Y)+1)] for i in range(len(X)+1)]\n    for i in range(1,len(X)+1):\n        for j in range(1,len(Y)+1):\n            for k in range(1,len(Z)+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    X, Y, Z = X.replace(' ', ''), Y.replace(' ', ''), Z.replace(' ', '')\n    \n    if len(X) == 0 or len(Y) == 0 or len(Z) == 0:\n        return None\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if len(X) < len(Y) or len(X) < len(Z):\n        if len(Y) < len(Z):\n            return lcs_of_three(Y, X, Z)\n        elif len(Y) > len(Z):\n            return lcs_of_three(X, Y, Z)\n        else:\n            return lcs_of_three(X, Y, Z)\n    elif len(X) == len(Y) and len(X) == len(Z):\n        if X == \"\":\n            return 0\n        if Y == \"\":\n            return 0\n        if Z == \"\":\n            return 0\n        # base cases\n        if X[0] == Y[0]:\n            return 1 + lcs_of_three(X[1:], Y[1:], Z[1:])\n        elif X[0] == Z[0]:\n            return 1 + lcs_of_three(X[1:], Y[1:], Z[1:])\n        else:\n            return 1 + max(lcs_of_three(X, Y, Z[1:]), lcs_of_three(X[1:], Y, Z[1:]))\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Initialization\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[0 for i in range(o+1)] for j in range(m+1)]\n    P = [[0 for i in range(o+1)] for j in range(n+1)]\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    X = 'abcd'\n    Y = 'acef'\n    Z = 'fgh'\n    #initialize m[][]\n    m = [[0 for x in range(len(Z)+1)] for y in range(len(Y)+1)]\n    for i in range(len(Y)+1): \n        for j in range(len(Z)+1): \n            if i == 0 or j == 0: \n                m[i][j] = 0\n    print (m)\n    # compute lcs of all substrings using recursion\n    for i in range(1, len(Y)+1): \n        for j in range(1, len(Z)+1): \n            if X[i-1] == Y[i-1] or X[i-1] == '*': \n                m[i][j] = max( m[i][j], m[i-1][j-1]+1 ) \n            elif Z[j-1] == Y[i-1] or Z[j-1] == '*': \n                m[i][j] = max( m[i][j], m[i-1][j-1]+1 ) \n    return m[-1][-1] \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    dp = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)] \n    \n    # Following steps to build dp_table in bottom up fashion. Note that dp_table is created in three nested loops, not in one. \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                # No. of operations to get to a cell are (i-1) + (j-1) + (k-1) \n                # This is handled by dp_table. Also, operations to get to current cell are (i-1) + (j) + (k-1) + (k) \n                if (i == 0 or j == 0 or k == 0): \n                    dp[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and Z[k-1] == Y[j-1]): \n                    dp[i][j][k] = 1 + dp[i-1][j-1][k-1] \n                else: \n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1]) \n                \n    # To find LCS, we need to return the value in top right corner of above created table. \n    return dp[m][n][o] \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    word_list = re.split(' ',str1)\n    for i in word_list:\n        if i.istitle():\n            continue\n        else:\n            word_list[word_list.index(i)] = i +''\n    return ''.join(word_list)\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    #sentence = re.sub(r\"(?<=[A-Z])\\w(?=[A-Z][a-z])\",\" \",str1)\n    return re.sub(r\"(?<=[A-Z])\\w(?=[A-Z][a-z])\",\" \",str1)\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This is a test of the emergency broadcast system. This is only a test\"))\nprint(capital_words_spaces(\"This i"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    regex = r'\\w+([\\S\\s]+)'\n    match = re.search(regex,str1)\n    if match:\n        return match.group(1)\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    #Solution\n    pattern1 = re.compile('(.+)(?=.*[A-Z])')\n    print(pattern1.search(str1).group())\n    return pattern1.search(str1).group()\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1=str1.split(' ')\n    for i in str1:\n        if i[0].isupper():\n            x=''.join(i.split(' '))\n            print(x)\n        else:\n            print(i)\ndef main():\n    print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello  world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_words_spaces(' hello world '))\n    # print(capital_word"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.lower()\n    result = \"\"\n    for i in str1:\n        if i.isupper():\n            if i == \" \":\n                result += \" \"\n            else:\n                result += \" \" + i\n        else:\n            result += i\n    return result\n    \ndef get_params(str1):\n    '''\n    Write a function to return all the parameters (key:value) in a string.\n    '''\n    key_value_list = re.findall(r'\\S+:\\S+', str1)\n    return key_value_list\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.split(\"\\s\", str1)\n    for i in range(len(words)):\n        if words[i].istitle():\n            words[i] = words[i] + \" \"\n    return \"\".join(words)\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    s=''\n    words=str1.split()\n    for i in words:\n        s+=i+' '\n    return s\ndef small_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with small letters in a given string.\n    '''\n    s=''\n    words=str1.split()\n    for i in words:\n        s+=i+' '\n    return s\ndef space_in_middle(str1):\n    '''\n    Write a function to add a space between every two words in a given string.\n    '''\n    words=str1.split()\n    s=''\n    for i in words:\n        if len(words)>1:\n            s+=i+' '\n        else:\n            s+=i\n    return s\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    s=''\n    words=str1.split()\n    for i in words:\n        if i[0].isupper():\n            s+=i+' '\n        else:\n            s+=i\n    return s\ndef lower_case_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with lower case letters in a given string.\n    '''\n    s=''\n    words=str1.split()\n    for i in words:\n        if i[0].islower():\n            s+=i+' '\n        else:\n            s+=i\n    return s\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation from a given string.\n    '''\n    s=str1.replace(\".\",\" \")\n    s=s.replace(\"-\",\" \")\n    s=s.replace(\"/\",\" \")\n    s=s.replace(\",\",\" \")\n    s=s.replace(\"'\",\" \")\n    s=s.replace(\"!\",\" \")\n    s=s.replace(\"?\",\" \")\n    s=s.replace(\";\",\" \")\n    s=s.replace(\":\",\" \")\n    s=s.replace(\"(\",\" \")\n    s=s.replace(\")\",\" \")\n    s=s.replace(\"[\",\" \")\n    s=s.replace(\"]\",\" \")\n    s=s.replace(\"{\",\" \")\n    s=s.replace(\"}\",\" \")\n    s=s.replace(\"#\",\" \")\n    s=s.replace(\"@\",\" \")\n    s=s.replace(\"+\",\" \")\n    s=s.replace(\"\\\\\",\" \")\n    s=s.replace(\"/\",\" \")\n    s=s.replace(\"_\",\" \")\n    s=s.replace(\"=\",\" \")\n    s=s.replace(\"\\\"\",\" \")\n    s=s.replace(\"~\",\" \")\n    s=s.replace(\"*\",\" \")\n    s=s.replace(\"%\",\" \")\n    s=s.replace(\"&\",\" \")\n    s=s.replace(\"$\",\" \")\n    s=s.replace(\"<\",\" \")\n    s=s.replace(\">\",\" \")\n    s=s.replace(\"@\",\" \")\n    s=s.replace(\"\\\\\",\" \")\n    s=s.replace(\"`\",\" \")\n    s=s.replace(\"|\",\" \")\n    s=s.replace(\"^\",\" \")\n    s=s.replace(\"#\",\" \")\n    s=s.replace(\"$\",\" \")\n    s=s.replace(\"*\",\" \")\n    s=s.replace(\"@\",\" \")\n    s=s.replace(\"_\",\" \")\n    s=s.replace(\"-\",\" \")\n    s=s.replace(\"+\",\" \")\n    s=s.replace(\"/\",\" \")\n    s=s.replace(\"(\",\" \")\n    s=s.replace(\")\",\" \")\n    s=s.replace(\"[\",\" \")\n    s=s.replace(\"]\",\" \")\n    s=s.replace(\"{\",\" \")\n    s=s.replace(\"}\",\" \")\n    s=s.replace(\"#\",\" \")\n    s=s.replace(\"@\",\" \")\n    s=s.replace(\"+\",\" \")\n    s=s.replace(\"\\\\\",\" \")\n    s=s.replace(\"`\",\" \")\n    s=s.replace(\"|\",\" \")\n    s=s.replace(\"^\",\" \")\n    s=s.replace(\"#\",\" \")\n    s=s.replace(\"$\",\" \")\n    s=s.replace(\"*\",\" \")\n    s=s.replace(\"@\",\" \")\n    s=s.replace(\"_\",\" \")\n    s=s.replace(\"-\",\" \")\n    s=s.replace(\"+\",\" \")\n    s=s.replace(\"/\",\" \")\n    s=s.replace(\"(\",\" \")\n    s=s.replace(\")\",\" \")\n    s=s.replace(\"[\",\" \")\n    s=s.replace(\"]\",\" \")\n    s=s.replace(\"{\",\" \")\n    s=s.replace(\"}\",\" \")\n    s=s.replace(\"#\",\" \")\n    s=s.replace(\"@\",\" \")\n    s=s.replace(\"+\",\" \")\n    s=s.replace(\"\\\\\",\" \")\n    s=s.replace(\"`\",\" \")\n    s=s.replace(\"|\",\" \")\n    s=s.replace(\"^\",\" \")\n    s=s.replace(\"#\",\" \")\n    s=s.replace(\"$\",\" \")\n    s=s.replace(\"*\",\" \")\n    s=s.replace(\"@\",\" \")\n    s=s.replace(\"_\",\" \")\n    s=s.replace(\"-\",\" \")\n    s=s.replace(\"+\",\" \")\n    s=s.replace(\"/\",\" \")\n    s=s.replace(\"(\",\" \")\n    s=s.replace(\")\",\" \")\n    s=s.replace(\"[\",\" \")\n    s=s.replace(\"]\",\" \")\n    s=s.replace(\"{\",\" \")\n    s=s.replace(\"}\",\" \")\n    s=s.replace(\"#\",\" \")\n    s=s.replace(\"@\",\" \")\n    s=s.replace(\"+\",\" \")\n    s=s.replace(\"\\\\\",\" \")\n    s=s.replace(\"`\",\" \")\n    s=s.replace(\"|\",\" \")\n    s=s.replace(\"^\",\" \")\n    s=s.replace(\"#\",\" \")\n    s=s.replace(\"$\",\" \")\n    s=s.replace(\"*\",\" \")\n    s=s.replace(\"@\",\" \")\n    s=s.replace(\"_\",\" \")\n    s=s.replace(\"-\",\" \")\n    s=s.replace(\"+\",\" \")\n    s=s.replace(\"/\",\" \")\n    s=s.replace(\"(\",\" \")\n    s=s.replace(\")\",\" \")\n    s=s.replace(\"[\",\" \")\n    s=s.replace(\"]\",\" \")\n    s=s.replace(\"{\",\" \")\n    s=s.replace(\"}\",\" \")\n    s=s.replace(\"#\",\" \")\n    s=s.replace(\"@\",\" \")\n    s=s.replace(\"+\",\" \")\n    s=s.replace(\"\\\\\",\" \")\n    s=s.replace(\"`\",\" \")\n    s=s.replace(\"|\",\" \")\n    s=s.replace(\"^\",\" \")\n    s=s.replace(\"#\",\" \")\n    s=s.replace(\"$\",\" \")\n    s=s.replace(\"*\",\" \")\n    s=s.replace(\"@\",\" \")\n    s=s.replace(\"_\",\" \")\n    s=s.replace(\"-\",\" \")\n    s=s.replace(\"+\",\" \")\n    s=s.replace(\"/\",\" \")\n    s=s.replace(\"(\",\" \")\n    s=s.replace(\")\",\" \")\n    s=s.replace(\"[\",\" \")\n    s=s.replace(\"]\",\" \")\n    s=s.replace(\"{\",\" \")\n    s=s.replace(\"}\",\" "
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\w+', str1)\n    # print(words)\n    new_str = ''\n    for i in words:\n        new_str = new_str + i.title() +''\n    return new_str\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    newstr = re.sub(r\"\\b[A-Z][a-z]*\\b\",lambda x: x.group()+\" \",str1).split()\n    return''.join(newstr)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    def sort_numeric(num_str):\n        '''\n        This is just a helper function to check if the input is a numeric string\n        '''\n        try:\n            return(int(num_str))\n        except ValueError:\n            return(float(num_str))\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    for i in range(len(nums_str)):\n        nums_str[i] = float(nums_str[i])\n    nums_str.sort(key = float)\n    nums_str.sort(key = int)\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = list(map(str, nums_str))\n    nums_str = sorted(nums_str, key=lambda nums_str: float(nums_str))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    def sort_numeric_strings_helper(list_of_strings):\n        list_of_strings_numeric_strings = []\n        for string in list_of_strings:\n            list_of_strings_numeric_strings.append(sorted([float(x) for x in string.split()], key=lambda x:x, reverse=True))\n        return list_of_strings_numeric_strings\n    return sort_numeric_strings_helper(nums_str)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # first: sort the input list\n    # second: loop through it\n    # third: append the index\n    \n    # sort the numbers\n    nums_list = sorted(nums_str, key=float)\n    \n    # index to keep track of the place the values are inserted\n    index_insert = 0\n    \n    # loop through the list\n    for i in range(len(nums_list)):\n        # set the index to where the index for the list index is\n        index = int(float(nums_list[i]))\n        \n        # if the index is smaller than the index for the list, the values are inserted in the correct position\n        if index < index_insert:\n            nums_list.insert(index, nums_str[i])\n            index_insert = index\n            \n        else:\n            # if the index is larger than the index for the list, the values are inserted in the correct position\n            nums_list.insert(index_insert, nums_str[i])\n            index_insert = index_insert + 1\n            \n            # once the index is inserted, the list is sorted and can be traversed again\n            nums_list = sorted(nums_list, key=float)\n        \n    return nums_list\n    \n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=int)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    try:\n        for i in range(len(nums_str)):\n            nums_str[i] = int(nums_str[i])\n    except:\n        return \"Please Enter Only Numbers\"\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    def sorted(numbers):\n        for i in range(0,len(numbers)):\n            for j in range(0,len(numbers)-i-1):\n                if numbers[j] > numbers[j+1]:\n                    numbers[j],numbers[j+1] = numbers[j+1],numbers[j]\n    return sorted(nums_str)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key = lambda x: float(x))\n    \ndef check_palindrome(n):\n    '''\n    Write a program to check if the given number is a palindrome or not. \n    A palindrome is a number which reads the same backward as forward. For example 121 is palindrome and 10 is not.\n    '''\n    return str(n)[::-1] == str(n)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    # Make a new list with string items, sorted numerically\n    nums = []\n    \n    for x in nums_str:\n        nums.append(int(x))\n    \n    nums.sort()\n    \n    return nums\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        if test_list[i] == test_tup:\n            test_list[i] += test_tup\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] > arr[2*i+1] and arr[i] > arr[2*i+2]:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Check if left child of root is greater than root\n    if (i*2) < len(arr):\n        if arr[i] > arr[(i*2)] :\n            return False\n        else:\n            return check_min_heap_helper(arr, (i*2))\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = i * 2\n    right = i * 2 + 1\n    if left < len(arr) and arr[left] > arr[i]:\n        return False\n    if right < len(arr) and arr[right] > arr[i]:\n        return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    l = 2 * i\n    r = 2 * i + 1\n    if l < len(arr):\n        if arr[l] > arr[i]:\n            return False\n    if r < len(arr):\n        if arr[r] < arr[i]:\n            return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    \n    root = (i - 1) // 2\n    # if arr[root] <= arr[i]:\n    #     return False\n    if arr[root] > arr[i]:\n        return False\n    return check_min_heap_helper(arr, root)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Check if all the elements in the array are in the heap order\n    if arr[i] > arr[i+1]:\n        return False\n    if i == 0:\n        return True\n    else:\n        if arr[i] > arr[i//2]:\n            return False\n        else:\n            # Again call the function recursively\n            return check_min_heap_helper(arr, i//2)\n    \n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # check the length of array\n    if len(arr) == 0:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    '''\n    Since we have to check that array is min heap in one pass, we can do the same as we did in min_heapify.\n    '''\n    return is_min_heap(arr) and check_min_heap_helper(arr[:i]) and check_min_heap_helper(arr[i+1:])\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if arr[i] < arr[i//2]:\n        return False\n    return check_min_heap_helper(arr, i//2)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    if i > n // 2:\n        return True\n    if arr[i] < arr[2 * i + 1] and arr[i] < arr[2 * i + 2]:\n        return True\n    return False\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    from math import sqrt\n    def jacobsthal(n):\n        if n <= 1:\n            return 1\n        else:\n            i = 0\n            while n >= i * i:\n                i += 1\n            return i - 1\n    def lucas(n):\n        if n <= 1:\n            return 2\n        else:\n            i = 0\n            while n >= i * i:\n                i += 1\n            return i - 1\n    return jacobsthal(n) + lucas(n)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # number = 0\n    # count = 0\n    # for i in range(0,n):\n    #     number += count\n    #     count = number - count\n    #     print(number)\n    # return number\n    # print(n)\n    # print(count)\n    # while count<n:\n    #     count+=1\n    #     number += 1\n    #     print(number)\n    # return number\n    #  1 \n    # 2 \n    # 3 \n    # 4 \n    # 5 \n    # 6 \n    # 7 \n    # 8 \n    # 9 \n    # 10 \n    # 11 \n    # 12 \n    # 13 \n    # 14 \n    # 15 \n    # 16 \n    # 17 \n    # 18 \n    # 19 \n    # 20 \n    # 21 \n    # 22 \n    # 23 \n    # 24 \n    # 25 \n    # 26 \n    # 27 \n    # 28 \n    # 29 \n    # 30 \n    # 31 \n    # 32 \n    # 33 \n    # 34 \n    # 35 \n    # 36 \n    # 37 \n    # 38 \n    # 39 \n    # 40 \n    # 41 \n    # 42 \n    # 43 \n    # 44 \n    # 45 \n    # 46 \n    # 47 \n    # 48 \n    # 49 \n    # 50 \n    # 51 \n    # 52 \n    # 53 \n    # 54 \n    # 55 \n    # 56 \n    # 57 \n    # 58 \n    # 59 \n    # 60 \n    # 61 \n    # 62 \n    # 63 \n    # 64 \n    # 65 \n    # 66 \n    # 67 \n    # 68 \n    # 69 \n    # 70 \n    # 71 \n    # 72 \n    # 73 \n    # 74 \n    # 75 \n    # 76 \n    # 77 \n    # 78 \n    # 79 \n    # 80 \n    # 81 \n    # 82 \n    # 83 \n    # 84 \n    # 85 \n    # 86 \n    # 87 \n    # 88 \n    # 89 \n    # 90 \n    # 91 \n    # 92 \n    # 93 \n    # 94 \n    # 95 \n    # 96 \n    # 97 \n    # 98 \n    # 99 \n    # 100 \n    # 101 \n    # 102 \n    # 103 \n    # 104 \n    # 105 \n    # 106 \n    # 107 \n    # 108 \n    # 109 \n    # 110 \n    # 111 \n    # 112 \n    # 113 \n    # 114 \n    # 115 \n    # 116 \n    # 117 \n    # 118 \n    # 119 \n    # 120 \n    # 121 \n    # 122 \n    # 123 \n    # 124 \n    # 125 \n    # 126 \n    # 127 \n    # 128 \n    # 129 \n    # 130 \n    # 131 \n    # 132 \n    # 133 \n    # 134 \n    # 135 \n    # 136 \n    # 137 \n    # 138 \n    # 139 \n    # 140 \n    # 141 \n    # 142 \n    # 143 \n    # 144 \n    # 145 \n    # 146 \n    # 147 \n    # 148 \n    # 149 \n    # 150 \n    # 151 \n    # 152 \n    # 153 \n    # 154 \n    # 155 \n    # 156 \n    # 157 \n    # 158 \n    # 159 \n    # 160 \n    # 161 \n    # 162 \n    # 163 \n    # 164 \n    # 165 \n    # 166 \n    # 167 \n    # 168 \n    # 169 \n    # 170 \n    # 171 \n    # 172 \n    # 173 \n    # 174 \n    # 175 \n    # 176 \n    # 177 \n    # 178 \n    # 179 \n    # 180 \n    # 181 \n    # 182 \n    # 183 \n    # 184 \n    # 185 \n    # 186 \n    # 187 \n    # 188 \n    # 189 \n    # 190 \n    # 191 \n    # 192 \n    # 193 \n    # 194 \n    # 195 \n    # 196 \n    # 197 \n    # 198 \n    # 199 \n    # 200 \n    # 201 \n    # 202 \n    # 203 \n    # 204 \n    # 205 \n    # 206 \n    # 207 \n    # 208 \n    # 209 \n    # 210 \n    # 211 \n    # 212 \n    # 213 \n    # 214 \n    # 215 \n    # 216 \n    # 217 \n    # 218 \n    # 219 \n    # 220 \n    # 221 \n    # 222 \n    # 223 \n    # 224 \n    # 225 \n    # 226 \n    # 227 \n    # 228 \n    # 229 \n    # 230 \n    # 231 \n    # 232 \n    # 233 \n    # 234 \n    # 235 \n    # 236 \n    # 237 \n    # 238 \n    # 239 \n    # 240 \n    # 241 \n    # 242 \n    # 243 \n    # 244 \n    # 245 \n    # 246 \n    # 247 \n    # 248 \n    # 249 \n    # 250 \n    # 251 \n    # 252 \n    # 253 \n    # 254 \n    # 255 \n    # 256 \n    # 257 \n    # 258 \n    # 259 \n    # 260 \n    # 261 \n    # 262 \n    # 263 \n    # 264 \n    # 265 \n    # 266 \n    # 267 \n    # 268 \n    # 269 \n    # 270 \n    # 271 \n    # 272 \n    # 273 \n    # 274 \n    # 275 \n    # 276 \n    # 277 \n    # 278 \n    # 279 \n    # 280 \n    # 281 \n    # 282 \n    # 283 \n    # 284 \n    # 285 \n    # 286 \n    # 287 \n    # 288 \n    # 289 \n    # 290 \n    # 291 \n    # 292 \n    # 293 \n    # 294 \n    # 295 \n    # 296 \n    # 297 \n    # 298 \n    # 299 \n    # 300 \n    # 301 \n    # 302 \n    # 303 \n    # 304 \n    # 305 \n    # 306 \n    # 307 \n    # 308 \n    # 309 \n    # 310 \n    # 311 \n    # 312 \n    # 313 \n    # 314 \n    # 315 \n    # 316 \n    # 317 \n    # 318 \n    # 319 \n    # 320 \n    # 321 \n    # 322 \n    # 323 \n    # 324 \n    # 325 \n    # 326 \n    # 327 \n    # 328 \n    # 329 \n    # 330 \n    # 331 \n    # 332 \n    # 333 \n    # 334 \n    # 335 \n    # 336 \n    # 337 \n    # 338 \n    # 339 \n    # 340 \n    # 341 \n    # 342 \n    # 343 \n    # 344 \n    # 345 \n    # 346 \n    # 347 \n    # 348 \n    # 349 \n    # 350 \n    # 351 \n    # 352 \n    # 353 \n    # 354 \n    # 355 \n    # 356 \n    # 357 \n    # 358 \n    # 359 \n    # 360 \n    # 361 \n    # 362 \n    # 363 \n    # 364 \n    # 365 \n    # 366 \n    # 367 \n    # 36"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n<1:\n        return None\n    if n<=4:\n        return n\n    else:\n        return (n-1)*n/2 + jacobsthal_num(n-1)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return int(1/2 + 0.6*(1 + sqrt(5))**n)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    #if n == 0:\n    #    return 1\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return n*(3*n-1)/2\nprint(jacobsthal_num(3))\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n<=0:\n        return 0\n    num=0\n    while(n-1):\n        num=num+2\n        n=n-1\n    return num\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    jacobsthal_num = 0\n    \n    while (n > jacobsthal_num):\n        jacobsthal_num += 1\n        if (jacobsthal_num == jacobsthal_num + 1):\n            jacobsthal_num += 1\n    return jacobsthal_num\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    n = int(n)\n    return 2 ** (n + 1) - 1 - 2 ** n\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sort the test_list by the minimum record first\n    test_list.sort()\n    # create an empty list for storing the records\n    result = []\n    # loop from least value to the maximum value of list\n    for i in range(len(test_list)):\n        # take the record from the list and add to the result list\n        result.append(test_list[i][0])\n        # check if length of result list is equal to k\n        if len(result) == K:\n            # if yes return the result list\n            return result\n    # if not return empty list\n    return result\n    \ndef min_k_start_index(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sort the test_list by the minimum record first\n    test_list.sort()\n    # create an empty list for storing the records\n    result = []\n    # create an empty list to store the index of minimum record first\n    min_index = []\n    # loop from least value to the maximum value of list\n    for i in range(len(test_list)):\n        # take the record from the list and add to the result list\n        result.append(test_list[i][0])\n        # check if length of result list is equal to k\n        if len(result) == K:\n            # if yes return the index of result list\n            return result\n        # check if length of result list is equal to k\n        if len(result) == K and i!= len(test_list) - 1:\n            # if yes return the index of result list\n            return result\n    # if not return empty list\n    return result\n    \ndef min_k_start_index_with_index(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sort the test_list by the minimum record first\n    test_list.sort()\n    # create an empty list for storing the records\n    result = []\n    # create an empty list to store the index of minimum record first\n    min_index = []\n    # loop from least value to the maximum value of list\n    for i in range(len(test_list)):\n        # take the record from the list and add to the result list\n        result.append(test_list[i][0])\n        # check if length of result list is equal to k\n        if len(result) == K:\n            # if yes return the index of result list\n            return result\n        # check if length of result list is equal to k\n        if len(result) == K and i!= len(test_list) - 1:\n            # if yes return the index of result list\n            return result\n        # check if length of result list is equal to k\n        if len(result) == K and i == len(test_list) - 1:\n            # if yes return the index of result list\n            return result\n    # if not return empty list\n    return result\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # your code here\n    return\n    \n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    '''\n    def min_k(test_list, K):\n    \n    test_list = (2, 5, 1, 7, 2, 4, 5, 2, 8)\n    k = 2\n    output = 2\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) == 0 or K > len(test_list):\n        return None\n    l = []\n    l = test_list[:K]\n    l.sort(key=lambda x:x[1])\n    return l\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    def sort_list(test_list):\n        for i in range(len(test_list)-1):\n            for j in range(len(test_list)-i-1):\n                if(test_list[j][0]>test_list[j+1][0]):\n                    test_list[j],test_list[j+1] = test_list[j+1],test_list[j]\n        return test_list\n    def len_list(test_list):\n        temp = test_list[0]\n        for i in range(len(test_list)-1):\n            if(temp[0]>test_list[i+1][0]):\n                temp = test_list[i+1]\n        return temp[0]\n    if(len(test_list) == 0):\n        return None\n    else:\n        result_list = sort_list(test_list)\n        #print(result_list)\n        if(len(result_list) < K):\n            return result_list\n        else:\n            result_list.sort(key=lambda x:x[0])\n            for i in range(K):\n                if(result_list[i] == result_list[0]):\n                    result_list.pop(0)\n                    result_list.append(result_list[0])\n                    result_list.pop(0)\n                else:\n                    break\n            return result_list\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Using heapq\n    # heapq.heapify(test_list)\n    # for i in range(K):\n    #     print(heapq.heappop(test_list), end ='')\n    # print()\n    # print(test_list)\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # return sorted(test_list)[0:K]\n    # return heapq.nsmallest(K, test_list)\n    return heapq.nsmallest(K, test_list, lambda x: x[1])\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) < K:\n        return None\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    k = []\n    for i in range(K):\n        m = min(test_list, key=lambda x: x[1])\n        k.append(m)\n        test_list.remove(m)\n    return k\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    import heapq\n    if K > len(test_list) or K <= 0:\n        return []\n    if K == len(test_list):\n        return test_list\n    minimum_k_heap = []\n    heapq.heapify(minimum_k_heap)\n    for i in test_list:\n        if i[2] == 1:\n            heapq.heappush(minimum_k_heap, i)\n        else:\n            heapq.heappush(minimum_k_heap, (i[0], i[1], 0))\n    for i in range(K):\n        minimum = heapq.heappop(minimum_k_heap)\n        heapq.heappush(minimum_k_heap, (minimum[0], minimum[1], 0))\n    return sorted(minimum_k_heap, key=lambda x: x[0])\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    indexes = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            indexes.append(i)\n    return indexes\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l = []\n    for i in range(len(l1)):\n        if l1.count(l1[i]) == 3 or l2.count(l2[i]) == 3 or l3.count(l3[i]) == 3:\n            l.append(l1[i])\n    return l\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    \n    for i in l1:\n        if i in l2 and i in l3:\n            index_list.append(l1.index(i))\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] == l2[j]:\n                for k in range(len(l3)):\n                    if l1[i] == l3[k]:\n                        result.append(l1[i])\n    return result\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    i1 = []\n    i2 = []\n    i3 = []\n    for i in l1:\n        if i in l2 and i in l3:\n            i1.append(i)\n    for i in l2:\n        if i in l1 and i in l3:\n            i2.append(i)\n    for i in l3:\n        if i in l1 and i in l2:\n            i3.append(i)\n    return i1, i2, i3\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common.append(l1[i])\n    return common\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    #Solution\n    #create lists\n    l1_index = []\n    l2_index = []\n    l3_index = []\n    \n    #loop through l1\n    for i in range(len(l1)):\n        #find the index\n        l1_index.append(l1.index(l1[i]))\n        l2_index.append(l2.index(l2[i]))\n        l3_index.append(l3.index(l3[i]))\n        \n    #find common elements\n    common_elements = []\n    for i in range(len(l1_index)):\n        if(l1_index[i] == l2_index[i] and l1_index[i] == l3_index[i]):\n            common_elements.append(l1[i])\n            \n    #return common elements\n    return common_elements\n    \n    \n    \n    #solution2\n    #first, we create two lists for l1 and l2\n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    #second, we sort the third list\n    l3 = sorted(l3)\n    #then, we loop through the sorted lists\n    common_elements = []\n    for i in range(len(l1)):\n        #if the elements are in the same index\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            #append to common_elements\n            common_elements.append(l1[i])\n    #return common elements\n    return common_elements\n    \n    #solution3\n    #we sort l1 and l2\n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    #we sort l3\n    l3 = sorted(l3)\n    #we loop through l1\n    common_elements = []\n    for i in range(len(l1)):\n        #if the elements are in the same index\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            #append to common_elements\n            common_elements.append(l1[i])\n    #return common elements\n    return common_elements\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    index_list.append(i)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list_l1 = []\n    index_list_l2 = []\n    index_list_l3 = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            index_list_l1.append(i)\n    for i in range(len(l2)):\n        if l2[i] in l1 and l2[i] in l3:\n            index_list_l2.append(i)\n    for i in range(len(l3)):\n        if l3[i] in l1 and l3[i] in l2:\n            index_list_l3.append(i)\n    index_list = list(set(index_list_l1).intersection(set(index_list_l2),set(index_list_l3)))\n    return index_list\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 0:\n        return None\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] > numbers[j]:\n                second_smallest = numbers[i]\n    return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) > 1:\n        numbers.sort()\n        return numbers[1]\n    return numbers[0]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return min(numbers, key=lambda x: x[1])[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) <= 1:\n        return None\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    print(numbers[1])\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = sorted(numbers)\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = sorted(numbers)\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = numbers[0]\n    secondSmallest = None\n    for i in range(1, len(numbers)):\n        if numbers[i] < smallest:\n            secondSmallest = smallest\n            smallest = numbers[i]\n        elif numbers[i] < secondSmallest and numbers[i]!= smallest:\n            secondSmallest = numbers[i]\n    return secondSmallest\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    p = re.compile(\"ab*\")\n    print(p.findall(text))\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = text.lower()\n    text = re.sub(r'[^ab]', '', text)\n    if re.search(r'[^ab]a', text):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match_pattern = re.compile(r'ab*')\n    string = match_pattern.findall(text)\n    print(string)\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = 'ab'\n    if re.search(pattern, text):\n        print(\"Match Found\")\n    else:\n        print(\"No Match Found\")\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search('a+b',text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.findall(r'a\\bb',text)\n    if result == []:\n        return 0\n    else:\n        return 1\n    \n    \n    \ndef text_match_zero_one_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.findall(r'a\\b*',text)\n    if result == []:\n        return 0\n    else:\n        return 1\n    \ndef text_match_zero_one_two(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.findall(r'a{1,}b',text)\n    if result == []:\n        return 0\n    else:\n        return 1\n    \ndef text_match_zero_one_three(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.findall(r'a{0,}b',text)\n    if result == []:\n        return 0\n    else:\n        return 1\n    \ndef text_match_zero_one_four(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.findall(r'a\\b\\+',text)\n    if result == []:\n        return 0\n    else:\n        return 1\n    \ndef text_match_zero_one_five(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.findall(r'a\\bb',text)\n    if result == []:\n        return 0\n    else:\n        return 1\n    \ndef text_match_zero_one_six(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.findall(r'a\\b*',text)\n    if result == []:\n        return 0\n    else:\n        return 1\n    \ndef text_match_zero_one_seven(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.findall(r'a{1,}b',text)\n    if result == []:\n        return 0\n    else:\n        return 1\n    \ndef text_match_zero_one_eight(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.findall(r'a{0,}b',text)\n    if result == []:\n        return 0\n    else:\n        return 1\n    \ndef text_match_zero_one_nine(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.findall(r'a\\+',text)\n    if result == []:\n        return 0\n    else:\n        return 1\n    \ndef text_match_zero_one_ten(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.findall(r'a\\b',text)\n    if result == []:\n        return 0\n    else:\n        return 1\n    \ndef text_match_zero_one_eleven(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.findall(r'a{1,}',text)\n    if result == []:\n        return 0\n    else:\n        return 1\n    \ndef text_match_zero_one_twelve(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.findall(r'a{0,}',text)\n    if result == []:\n        return 0\n    else:\n        return 1\n    \ndef text_match_zero_one_thirteen(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.findall(r'a+',text)\n    if result == []:\n        return 0\n    else:\n        return 1\n    \ndef text_match_zero_one_fourteen(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.findall(r'a{0,}',text)\n    if result == []:\n        return 0\n    else:\n        return 1\n    \ndef text_match_zero_one_fifteen(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.findall(r'a{1,}',text)\n    if result == []:\n        return 0\n    else:\n        return 1\n    \ndef text_match_zero_one_sixteen(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.findall(r'a{0,}',text)\n    if result == []:\n        return 0\n    else:\n        return 1\n    \ndef text_match_zero_one_seventeen(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.findall(r'a{1,}',text)\n    if result == []:\n        return 0\n    els"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search(r\"a{1,}b\", text)\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #pattern = 'a'+'\\s+'+'b'\n    pattern = r'a\\s+b'\n    return re.match(pattern,text)\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match('ab*', text)\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = text.lower()\n    text = text.replace(\" \", \"\")\n    text = text.replace(\"'\", \"\")\n    return re.search(r'(?i)ab+', text)\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pairs = 0\n    for index in range(len(test_list)-1):\n        if test_list[index] == test_list[index+1][::-1]:\n            pairs += 1\n    print(f'The number of pairs of reverse strings are: {pairs}')\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    if not test_list:\n        return 0\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #return (test_list.count(x)//2) + (test_list.count(y)//2)\n    return sum([1 for i in range(0,len(test_list)-1) if test_list[i] == test_list[i+1][::-1]])\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    test_list = test_list[::-1]\n    pairs = 0\n    for i in range(len(test_list)):\n        if test_list[i] == test_list[i + 1]:\n            pairs = pairs + 1\n    return pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # count = 0\n    # # for i in range(len(test_list)):\n    # #     for j in range(i+1, len(test_list)):\n    # #         if test_list[i] == test_list[j][::-1]:\n    # #             count += 1\n    # # return count\n    for i in range(len(test_list)):\n        for j in range(len(test_list)-1,i,-1):\n            if test_list[i] == test_list[j][::-1]:\n                return test_list[i], test_list[j]\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    '''\n    Two pointer solution\n    '''\n    # number_of_reverse = 0\n    # for i in range(len(test_list)):\n    #     for j in range(i+1, len(test_list)):\n    #         if test_list[i] == test_list[j]:\n    #             number_of_reverse += 1\n    # return number_of_reverse\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    rev_pair = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                rev_pair += 1\n                \n    return rev_pair\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # TODO: start writing your code here\n    # return sum([1 for i in range(0, len(test_list)-1) if test_list[i] == test_list[i+1][::-1]])\n    temp_dict = {}\n    for elem in test_list:\n        # print(elem)\n        if elem not in temp_dict:\n            temp_dict[elem] = 0\n        else:\n            temp_dict[elem] += 1\n    # print(temp_dict)\n    return sum([1 for elem in temp_dict if elem in reversed(temp_dict)])\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    for i in range(len(test_list)):\n        if test_list[i] == \"\":\n            continue\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                print(\"%s, %s\" % (test_list[i], test_list[j]))\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    if list1 == []:\n        return None\n    else:\n        return {tuple(list1): list1.count(list1[0])}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for i in list1:\n        if type(i) is list:\n            for j in i:\n                d[j] = d.get(j,0) + 1\n        else:\n            d[i] = d.get(i,0) + 1\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return len(set(tuple(x) for x in list1))\n    \n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    dict1 = {}\n    \n    for i in range(0, len(list1)):\n        if tuple(list1[i]) not in dict1:\n            dict1[tuple(list1[i])] = 1\n        else:\n            dict1[tuple(list1[i])] += 1\n    \n    return dict1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict1={}\n    for i in range(len(list1)):\n        if list1[i] not in dict1.keys():\n            dict1[tuple(list1[i])]=1\n        else:\n            dict1[tuple(list1[i])]+=1\n    return dict1\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    res = {}\n    for i in list1:\n        res[tuple(i)] = list1.count(i)\n    return res\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    #Create a dictionary\n    counts = {}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict1 = {}\n    for item in list1:\n        if item in dict1:\n            dict1[item] += 1\n        else:\n            dict1[item] = 1\n    return dict1\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list2 = []\n    for i in range(0,len(list1)):\n        list2.append(list1[i:i+1])\n    list3 = []\n    for i in range(0,len(list2)):\n        if list2[i] not in list3:\n            list3.append(list2[i])\n    res = {}\n    for i in range(0,len(list3)):\n        res[tuple(list3[i])] = list3.count(list3[i])\n    return res\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_sublist = {}\n    for sublist in list1:\n        unique_sublist[tuple(sublist)] = list1.count(sublist)\n    return unique_sublist\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return \".\" in num and \"0\" not in num\n    # or if len(num) <= 2:\n    # return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    \n    #Convert the string into a number\n    try:\n        num = float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if isinstance(num, str):\n        if num == '0' or num == '0.':\n            return True\n        if '.' in num:\n            if 'e' in num:\n                num_array = num.split('e')\n                if len(num_array) == 2:\n                    if num_array[0].replace('.', '') == '0' or num_array[1].replace('.', '') == '0':\n                        return True\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                num_array = num.split('.')\n                if len(num_array) == 2:\n                    if num_array[0].replace('.', '') == '0' or num_array[1].replace('.', '') == '0':\n                        return True\n                    else:\n                        return False\n                else:\n                    return False\n        else:\n            if 'e' in num:\n                num_array = num.split('e')\n                if len(num_array) == 2:\n                    if num_array[0] == '0':\n                        return True\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                if num == '0':\n                    return True\n                else:\n                    return False\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return isinstance(num, (int, float)) and float(num) == round(float(num), 2)\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        return float(num) == round(float(num), 2)\n    except ValueError:\n        return False\n    except:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return str(num).count('.')==1 and str(num).count('e')==1\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if(num == int(num)):\n            return True\n        else:\n            return False\n    except:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in range(0, len(arr)):\n        check = arr[i]\n        for j in range(i+1, len(arr)):\n            if arr[j] == check:\n                print(\"Element found\", check)\n                return False\n    print(\"No duplicate found\")\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    d={}\n    for x in arr:\n        if x in d:\n            d[x]=d[x]+1\n        else:\n            d[x]=1\n    for x in d.keys():\n        if d[x]==1:\n            return True\n    return False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr = list(arr)\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                print(\"False\")\n                return False\n    print(\"True\")\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    my_list = []\n    for x in arr:\n        if x not in my_list:\n            my_list.append(x)\n    if len(my_list) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    n = len(arr)\n    seen = set()\n    for i in range(n):\n        if arr[i] in seen:\n            return False\n        else:\n            seen.add(arr[i])\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return False\n        else:\n            seen.add(num)\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    i=1\n    while(i<len(arr)):\n        if(arr[i]==arr[0]):\n            del(arr[0])\n            i=0\n        else:\n            i+=1\n    if(len(arr)==1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = []\n    for i in range(len(arr)):\n        if arr[i] not in unique:\n            unique.append(arr[i])\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == len(arr)\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if int(monthnum3)>12 or int(monthnum3)<=0:\n        return False\n    elif int(monthnum3)==2:\n        if int(year)%4==0 and int(year)%100!=0 or int(year)%400==0:\n            if int(monthnum3)>29:\n                return False\n            else:\n                return True\n        else:\n            if int(monthnum3)>28:\n                return False\n            else:\n                return True\n    elif int(monthnum3)==4 or int(monthnum3)==6 or int(monthnum3)==9 or int(monthnum3)==11:\n        if int(monthnum3)>30:\n            return False\n        else:\n            return True\n    else:\n        return True\ndef check_number_of_days(daynum2):\n    '''\n    Write a function to check whether the given date contains valid days or not.\n    '''\n    if int(daynum2)>31 or int(daynum2)<1:\n        return False\n    elif int(daynum2)>29 and int(monthnum3)==2:\n        if int(year)%4==0 and int(year)%100!=0 or int(year)%400==0:\n            if int(daynum2)>29:\n                return False\n            else:\n                return True\n        else:\n            if int(daynum2)>28:\n                return False\n            else:\n                return True\n    else:\n        return True\ndef check_date(daynum,monthnum,yearnum):\n    '''\n    Write a function to check whether the given date contains valid dates or not.\n    '''\n    if daynum.isdigit() and monthnum.isdigit() and yearnum.isdigit() and (int(daynum)>31 or int(daynum)<1) and (int(monthnum)>12 or int(monthnum)<1) and (int(yearnum)>3000 or int(yearnum)<1):\n        return False\n    elif daynum.isdigit() and monthnum.isdigit() and yearnum.isdigit() and (int(daynum)>31 or int(daynum)<1) and (int(monthnum)>12 or int(monthnum)<1) and (int(yearnum)>3001 or int(yearnum)<1):\n        return True\n    elif daynum.isdigit() and monthnum.isdigit() and yearnum.isdigit() and (int(daynum)>28 or int(daynum)<1) and (int(monthnum)>12 or int(monthnum)<1) and (int(yearnum)>2901 or int(yearnum)<1):\n        return False\n    elif daynum.isdigit() and monthnum.isdigit() and yearnum.isdigit() and (int(daynum)>28 or int(daynum)<1) and (int(monthnum)>12 or int(monthnum)<1) and (int(yearnum)>3001 or int(yearnum)<1):\n        return True\n    else:\n        return True\ndef valid_date(daynum,monthnum,yearnum):\n    '''\n    Write a function to get the valid dates for a given date.\n    '''\n    if check_date(daynum,monthnum,yearnum):\n        return True\n    else:\n        return False\ndef check_monthnumber_yearnumber(monthnum3,yearnum3):\n    '''\n    Write a function to check whether the given month number and year number contain valid dates or not.\n    '''\n    if int(yearnum3)>3000 or int(yearnum3)<1 or int(monthnum3)>12 or int(monthnum3)<1:\n        return False\n    else:\n        return True\ndef check_monthnumber_yearnumber_and_date(monthnum3,yearnum3,daynum):\n    '''\n    Write a function to check whether the given month number, year number, and day number contain valid dates or not.\n    '''\n    if int(yearnum3)>3000 or int(yearnum3)<1 or int(monthnum3)>12 or int(monthnum3)<1 or int(daynum)>31 or int(daynum)<1:\n        return False\n    else:\n        return True\ndef check_monthnumber_yearnumber_and_date_number(monthnum3,yearnum3,daynum,daynum2):\n    '''\n    Write a function to check whether the given month number, year number, day number and day number contain valid dates or not.\n    '''\n    if int(yearnum3)>3000 or int(yearnum3)<1 or int(monthnum3)>12 or int(monthnum3)<1 or int(daynum)>31 or int(daynum)<1 or int(daynum2)>31 or int(daynum2)<1:\n        return False\n    else:\n        return True\ndef check_monthnumber_yearnumber_and_date_number_and_daynumber(monthnum3,yearnum3,daynum,daynum2,daynum3):\n    '''\n    Write a function to check whether the given month number, year number, day number, day number, and day number contain valid dates or not.\n    '''\n    if int(yearnum3)>3000 or int(yearnum3)<1 or int(monthnum3)>12 or int(monthnum3)<1 or int(daynum)>31 or int(daynum)<1 or int(daynum2)>31 or int(daynum2)<1 or int(daynum3)>31 or int(daynum3)<1:\n        return False\n    else:\n        return True\ndef check_day_number_month_number(daynum2,monthnum3):\n    '''\n    Write a function to check whether the given day number and month number contain valid dates or not.\n    '''\n    if int(monthnum3)>12 or int(monthnum3)<1 or int(daynum2)>31 or int(daynum2)<1:\n        return False\n    else:\n        return True\ndef check_day_number_month_number_and_yearnumber(daynum2,monthnum3,yearnum3):\n    '''\n    Write a function to check whether the given day number, month number, and year number contain valid dates or not.\n    '''\n    if int(monthnum3)>12 or int(monthnum3)<1 or int(daynum2)>31 or int(daynum2)<1 or int(yearnum3)>3000 or int(yearnum3)<1:\n        return False\n    else:\n        return True\ndef check_day_number_month_number_and_yearnumber_and_daynumber(daynum2,monthnum3,yearnum3,daynum3):\n    '''\n    Write a function to check whether the given day number, month number, year number, and day number contain valid dates or not.\n    '''\n    if int(yearnum3)>3000 or int(yearnum3)<1 or int(monthnum3)>12 or int(monthnum3)<1 or int(daynum2)>31 or int(daynum2)<1 or int(daynum3)>31 or int(daynum3)<1:\n        return False\n    else:\n        return True\ndef check_month_number_year_number(monthnum3,yearnum3):\n    '''\n    Write a function to check whether the given month number and year number contain valid dates or not.\n    '''\n    if int(yearnum3)>3000 or int(yearnum3)<1 or int(monthnum3)>12 or int(monthnum3)<1:\n        return False\n    else:\n        return True\ndef check_month_number_year_number_and_daynumber(monthnum3,yearnum3,daynum2):\n    '''\n    Write a function to check whether the given month number, year number, and day number contain valid dates or not.\n    '''\n    if int(yearnum3)>3000 or int(yearnum3)<1 or int(monthnum3)>12 or int(monthnum3)<1 or int(daynum2)>31 or int(daynum2)<1:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 30:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 4 == 0:\n        if monthnum3 % 100!= 0:\n            if monthnum3 % 400 == 0:\n                print(\"{} is leap year\".format(monthnum3))\n            else:\n                print(\"{} is not leap year\".format(monthnum3))\n        else:\n            print(\"{} is leap year\".format(monthnum3))\n    else:\n        print(\"{} is not leap year\".format(monthnum3))\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1:\n        return '31'\n    elif monthnum3 == 2:\n        return '28'\n    elif monthnum3 == 3:\n        return '31'\n    elif monthnum3 == 4:\n        return '30'\n    elif monthnum3 == 5:\n        return '31'\n    elif monthnum3 == 6:\n        return '30'\n    elif monthnum3 == 7:\n        return '31'\n    elif monthnum3 == 8:\n        return '31'\n    elif monthnum3 == 9:\n        return '30'\n    elif monthnum3 == 10:\n        return '31'\n    elif monthnum3 == 11:\n        return '30'\n    elif monthnum3 == 12:\n        return '31'\n    else:\n        return 'Invalid month number'\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    for i in range(1,13):\n        if (monthnum3 == i):\n            if i % 2 == 0:\n                print(\"No of days in the month = 30\")\n            else:\n                print(\"No of days in the month = 29\")\n    \n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in range(1,3):\n        return 30\n    if monthnum3 in range(3,6):\n        return 31\n    if monthnum3 in range(6,9):\n        return 30\n    if monthnum3 in range(9,12):\n        return 31\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # Conditions to check months having 30 days\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    # Conditions to check months having 31 days\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    # Conditions to check months having 28 days\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if(monthnum3>12 or monthnum3<1):\n        return False\n    month_30_days = [4,6,9,11]\n    if monthnum3 in month_30_days:\n        return True\n    else:\n        return False\n    \nmonthnumber3 = 30\nprint(check_monthnumber_number(monthnumber3))\n    \n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    daysinmonth=[\"31\",\"28\",\"31\",\"30\",\"31\",\"30\",\"31\",\"31\",\"30\",\"31\",\"30\",\"31\"]\n    if monthnum3 == 1 or monthnum3 == 2:\n        return True\n    elif monthnum3 == 3 or monthnum3 == 4:\n        return True\n    elif monthnum3 == 5 or monthnum3 == 6:\n        return True\n    elif monthnum3 == 7 or monthnum3 == 8:\n        return True\n    elif monthnum3 == 9 or monthnum3 == 10:\n        return True\n    elif monthnum3 == 11 or monthnum3 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 1 and monthnum3 < 13:\n        if (monthnum3 % 2 == 0 and monthnum3!= 2) or (monthnum3 % 2!= 0 and monthnum3!= 3) or (monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12):\n            return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # your code here\n    if n <= 1:\n        return None\n    arr.sort()\n    \n    min_diff = abs(arr[0]-arr[1])\n    for i in range(1,n-1):\n        diff = abs(arr[i]-arr[i+1])\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            diff = abs(arr[i]-arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    max_element = max(arr)\n    min_element = min(arr)\n    min_diff = min_element\n    for i in range(min_element,max_element):\n        if i in arr and i-min_diff in arr:\n            min_diff = i-min_diff\n            break\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    s_arr = sorted(arr) \n    d = abs(s_arr[1] - s_arr[0]) \n    for i in range(1,n-1): \n        if abs(s_arr[i] - s_arr[i-1]) < d: \n            d = abs(s_arr[i] - s_arr[i-1])\n    return d\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n == 1:\n        return (arr[0], arr[0])\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr = sorted(arr)\n    min_diff = float('inf')\n    for i in range(0,n-1):\n        min_diff = min(min_diff,abs(arr[i+1]-arr[i]))\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff=100000000\n    for i in range(n-1):\n        min_diff=min(min_diff,abs(arr[i+1]-arr[i]))\n    print(min_diff)\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = arr[0] - arr[1]\n    i = 0\n    j = 1\n    while (j < n-1): \n        if min_diff > (arr[j + 1] - arr[j]): \n            min_diff = (arr[j + 1] - arr[j]) \n        j += 1\n    return min_diff \n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    if n == 1:\n        return arr[1] - arr[0]\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    if len(arr)>1:\n        return abs(arr[0]-arr[len(arr)-1])\n    else:\n        return float(\"inf\")\n        \nif __name__ == \"__main__\":\n    arr = [3,3,5,5,4,0,3]\n    print(find_min_diff(arr,len(arr)))\n    print(find_min_diff_2(arr,len(arr)))"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str.strip())\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num_ctr = 0\n    for i in str:\n        if i.isdigit():\n            num_ctr += 1\n    return num_ctr\nprint(number_ctr('123abc'))\nprint(number_ctr('abc123abc'))\nprint(number_ctr('12a3bc'))\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    c=0\n    for i in str:\n        if i.isnumeric():\n            c+=1\n    return c\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)-(str.count(\" \"))\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    sum = 0\n    for i in str:\n        if i.isdigit():\n            sum += 1\n    print(sum)\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isdigit():\n            count = count + 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    l = len(str)\n    count = 0\n    for i in range(l):\n        if str[i]=='0' or str[i]=='1' or str[i]=='2' or str[i]=='3' or str[i]=='4' or str[i]=='5' or str[i]=='6' or str[i]=='7' or str[i]=='8' or str[i]=='9':\n            count+=1\n    print(count)\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    number = 0\n    for i in str:\n        if i.isdigit():\n            number += 1\n    return number\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return (n-1) * (n+2) // 2\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    polite = [0,1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,10,11,11,11,12,12,12,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19,20,20,20,21,21,21,22,22,22,23,23,23,24,24,24,25,25,25,26,26,26,27,27,27,28,28,28,29,29,29,30,30,30,31,31,31,32,32,32,33,33,33,34,34,34,35,35,35,36,36,36,37,37,37,38,38,38,39,39,39,40,40,40,41,41,41,42,42,42,43,43,43,44,44,44,45,45,45,46,46,46,47,47,47,48,48,48,49,49,49,50,50,50,51,51,51,52,52,52,53,53,53,54,54,54,55,55,55,56,56,56,57,57,57,58,58,58,59,59,59,60,60,60,61,61,61,62,62,62,63,63,63,64,64,64,65,65,65,66,66,66,67,67,67,68,68,68,69,69,69,70,70,70,71,71,71,72,72,72,73,73,73,74,74,74,75,75,75,76,76,76,77,77,77,78,78,78,79,79,79,80,80,80,81,81,81,82,82,82,83,83,83,84,84,84,85,85,85,86,86,86,87,87,87,88,88,88,89,89,89,90,90,90,91,91,91,92,92,92,93,93,93,94,94,94,95,95,95,96,96,96,97,97,97,98,98,98,99,99,99,100,100,100,101,101,101,102,102,102,103,103,103,104,104,104,105,105,105,106,106,106,107,107,107,108,108,108,109,109,109,110,110,110,111,111,111,112,112,112,113,113,113,114,114,114,115,115,115,116,116,116,117,117,117,118,118,118,119,119,119,120,120,120,121,121,121,122,122,122,123,123,123,124,124,124,125,125,125,126,126,126,127,127,127,128,128,128,129,129,129,130,130,130,131,131,131,132,132,132,133,133,133,134,134,134,135,135,135,136,136,136,137,137,137,138,138,138,139,139,139,140,140,140,141,141,141,142,142,142,143,143,143,144,144,144,145,145,145,146,146,146,147,147,147,148,148,148,149,149,149,150,150,150,151,151,151,152,152,152,153,153,153,154,154,154,155,155,155,156,156,156,157,157,157,158,158,158,159,159,159,160,160,160,161,161,161,162,162,162,163,163,163,164,164,164,165,165,165,166,166,166,167,167,167,168,168,168,169,169,169,170,170,170,171,171,171,172,172,172,173,173,173,174,174,174,175,175,175,176,176,176,177,177,177,178,178,178,179,179,179,180,180,180,181,181,181,182,182,182,183,183,183,184,184,184,185,185,185,186,186,186,187,187,187,188,188,188,189,189,189,190,190,190,191,191,191,192,192,192,193,193,193,194,194,194,195,195,195,196,196,196,197,197,197,198,198,198,199,199,199,200,200,200,201,201,201,202,202,202,203,203,203,204,204,204,205,205,205,206,206,206,207,207,207,208,208,208,209,209,209,210,210,210,211,211,211,212,212,212,213,213,213,214,214,214,215,215,215,216,216,216,217,217,217,218,218,218,219,219,219,220,220,220,221,221,221,222,222,222,223,223,223,224,224,224,225,225,225,226,226,226,227,227,227,228,228,228,229,229,229,230,230,230,231,231,231,232,232,232,233,233,233,234,234,234,235,235,235,236,236,236,237,237,237,238,238,238,239,239,239,240,240,240,241,241,241,242,242,242,243,243,243,244,244,244,245,245,245,246,246,246,247,247,247,248,248,248,249,249,249,250,250,250,251,251,251,252,252,252,253,253,253,254,254,254,255,255,255,256,256,256,257,257,257,258,258,258,259,259,259,260,260,260,261,261,261,262,262,262,263,263,263,264,264,264,265,265,265,266,266,266,267,267,267,268,268,268,269,269,269,270,270,270,271,271,271,272,272,272,273,273,273,274,274,274,275,275,275,276,276,276,277,277,277,278,278,278,279,279,279,280,280,280,281,281,281,282,282,282,283,283,283,284,284,284,285,285,285,286,286,286,287,287,287,288,288,288,289,289,289,290,290,290,291,291,291,292,292,292,293,293,293,294,294,294,295,295,295,296,296,296,297,297,297,298,298,298,299,299,299,300,300,300,301,301,301,302,302,302,303,303,303,304,304,304,305,305,305,306,306,306,307,307,307,308,308,308,309,309,309,310,310,310,311,311,311,312,312,312,313,313,313,314,314,314,315,315,315,316,316,316,317,317,317,318,318,318,319,319,319,320,320,320,321,321,321,322,322,322,323,323,323,324,324,324,325,325,325,326,326,326,327"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def _polite(n): \n        if n == 1: \n            return 1\n        if n == 2: \n            return 2\n        if n == 3: \n            return 4\n        if n == 4: \n            return 7\n        if n == 5: \n            return 11\n        else: \n            return n*_polite(n-1) + 1\n    return _polite(n) \n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n + 1\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    res = 0\n    while(res < n):\n        res = res + 1\n        if res%5==0:\n            continue\n        if res%3==0:\n            continue\n        if res%2==0:\n            continue\n        if res%1==0:\n            continue\n        if res%4==0:\n            continue\n        if res%7==0:\n            continue\n        if res%5==0:\n            continue\n        if res%3==0:\n            continue\n        if res%2==0:\n            continue\n        if res%1==0:\n            continue\n        if res%4==0:\n            continue\n        if res%7==0:\n            continue\n        if res%5==0:\n            continue\n        if res%3==0:\n            continue\n        if res%2==0:\n            continue\n        if res%1==0:\n            continue\n        if res%4==0:\n            continue\n        if res%7==0:\n            continue\n        if res%5==0:\n            continue\n        if res%3==0:\n            continue\n        if res%2==0:\n            continue\n        if res%1==0:\n            continue\n        return res\nprint(is_polite(100000000))\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n = int(n) \n    polite = 1\n    if (n%2) == 1: \n        polite = 0\n    while (n > 1): \n        n = n/2\n        polite = polite + n\n        if (n%2) == 1: \n            polite = 0\n    if polite%2 == 0: \n        return polite \n    else: \n        return polite + 1\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    # divide by 2 and subtract 1\n    return int(math.log2(n)) - 1\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_arr = [0, 5, 10, 20, 30, 40, 50, 100, 200, 500, 1000]\n    return polite_arr[n]\n    \nprint(is_polite(4))\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    import math \n    if n == 0: \n        return 0\n    for i in range(1, n+1): \n        if (i * 2)**2 == n: \n            return i\ndef nth_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    from math import sqrt\n    n = int(n)\n    return n*(n+1)//2\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    for i in range(n): \n        for j in range(i+1): \n            print(j+1, end = \" \") \n        print( ) \n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append([l1[i],l1[i+1]])\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if l1 == None:\n        return None\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1)<=1:\n        return []\n    pairs=[]\n    for i in range(len(l1)-1):\n        pairs.append((l1[i],l1[i+1]))\n    pairs.append((l1[-1],l1[0]))\n    return pairs\n    \nprint(pair_wise([1,2,3,4,5,6,7,8,9]))\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)-1):\n        l2.append([l1[i],l1[i+1]])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    l = []\n    for i in range(n):\n        if i == n-1:\n            break\n        l.append([l1[i], l1[i+1]])\n    return l\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    lst = []\n    for i in range(len(l1)-1):\n        lst.append(l1[i:i+2])\n    return lst\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    s=list(l1)\n    a=[]\n    for i in range(len(s)-1):\n        a.append((s[i],s[i+1]))\n    return a\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1_len = len(l1)\n    if l1_len == 1:\n        return [[l1[0]]]\n    elif l1_len == 2:\n        return [[l1[0], l1[1]]]\n    else:\n        pairs = []\n        for i in range(l1_len):\n            if i!= l1_len - 1:\n                pairs.append([l1[i], l1[i + 1]])\n        return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    length = len(l1)\n    new = []\n    for i in range(length-1):\n        new.append([l1[i], l1[i+1]])\n    return new\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    l3 = []\n    for i in range(0,len(l1)-1):\n        l2.append(l1[i])\n        l2.append(l1[i+1])\n        l3.append(l2)\n        l2 = []\n    return l3\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]+arr[j] == sum:\n                return 1\n    return 0\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(n):\n            if arr[i] + arr[j] == sum and i!= j:\n                pairs += 1\n    print(\"The number of pairs whose sum is equal to \",sum,\"is:\",pairs)\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    def get_count_pair(arr, sum):\n        d = {}\n        for i in range(len(arr)):\n            d[arr[i]] = d.get(arr[i], 0) + 1\n        print(d)\n        return d[sum]\n    return get_count_pair(arr, sum)\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (arr[i]+arr[j]) == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1) - set(li2)))\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3=[]\n    for i in li1:\n        if i not in li2:\n            li3.append(i)\n    return li3\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = []\n    for i in li1:\n        if i not in li2:\n            li_dif.append(i)\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    \n    li3 = [i for i in li1 if i not in li2]\n    return li3\n    \n    # Code here\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_diff = []\n    for i in li1:\n        if i not in li2:\n            li_diff.append(i)\n    return li_diff\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3 = list(set(li1).difference(set(li2)))\n    return li3\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_diff = list(set(li1)-set(li2))\n    return li_diff\n    \nif __name__ == '__main__':\n    '''\n    Write a python function to convert an integer to its equivalent binary representation.\n    '''\n    li1 = [1,2,3,4,5]\n    li2 = ['a','b','c','d','e']\n    li_join = list(map(list,zip(li1,li2)))\n    print(li_join)\n    \n    \n    '''\n    Write a python function to count the no of words in a string.\n    '''\n    str1 = 'I am a Student.'\n    str2 = 'I am a teacher'\n    #count = len(str1.split())\n    count = str1.count(' ') + str2.count(' ')\n    print(count)\n    \n    \n    '''\n    Write a python function to check if a string is palindrome.\n    '''\n    str_check ='revgeek'\n    print(str_check.isalpha())\n    print(str_check.lower())\n    \n    \n    '''\n    Write a python function to get the smallest value in the list.\n    '''\n    li = [1,2,3,4,5,6]\n    min_val = li[0]\n    for i in range(1,len(li)):\n        if min_val > li[i]:\n            min_val = li[i]\n    print(min_val)\n    \n    \n    '''\n    Write a python function to convert a list of tuples to a dictionary of dictionaries.\n    '''\n    li1 = [(1,2),(3,4),(5,6)]\n    li2 = ['A','B','C','D']\n    li3 = [{'key1':1,'key2':2},{'key3':3,'key4':4}]\n    dict = dict(zip(li1,li2))\n    dict_2 = dict(zip(li2,li1))\n    print(dict)\n    print(dict_2)\n    \n    \n    '''\n    Write a python function to convert a list of lists into a dictionary of dictionaries.\n    '''\n    li = [[1,2,3],[4,5,6],[7,8,9]]\n    \n    #A = {1:li[0],2:li[1],3:li[2]}\n    #A = {'key1':li[0][0],'key2':li[1][0],'key3':li[2][0]}\n    \n    #B = {'key1':{1:li[0][0],'2':li[0][1],'3':li[0][2]},\n    #     'key2':{1:li[1][0],'2':li[1][1],'3':li[1][2]},\n    #     'key3':{1:li[2][0],'2':li[2][1],'3':li[2][2]}}\n    \n    #C = {'key1':{'key1':li[0][0],'key2':li[0][1],'key3':li[0][2]},\n    #     'key2':{'key1':li[1][0],'key2':li[1][1],'key3':li[1][2]},\n    #     'key3':{'key1':li[2][0],'key2':li[2][1],'key3':li[2][2]}}\n    \n    #print(A)\n    #print(B)\n    #print(C)\n    \n    '''\n    Write a python function to check if a given string is palindrome or not.\n    '''\n    #str1 ='revgeek'\n    #str2 = str1[::-1]\n    #print(str2)\n    #if str1 == str2:\n    #    print('Yes')\n    #else:\n    #    print('No')\n    \n    '''\n    Write a python function to check if a given string is a palindrome or not.\n    '''\n    #str1 = 'Amar'\n    #str2 = str1[::-1]\n    #if str1 == str2:\n    #    print('Yes')\n    #else:\n    #    print('No')\n    \n    '''\n    Write a python function to sort a given string in the increasing order.\n    '''\n    #str1 = 'aemrvjo'\n    #str2 = sorted(str1)\n    #print(str2)\n    \n    '''\n    Write a python function to sort a given string in the decreasing order.\n    '''\n    #str1 = 'aemrvjo'\n    #str2 = sorted(str1,reverse = True)\n    #print(str2)\n    \n    '''\n    Write a python function to count the number of even and odd numbers in a given list.\n    '''\n    li = [1,2,3,4,5,6]\n    #count_even = 0\n    #count_odd = 0\n    #for i in li:\n    #    if i%2 == 0:\n    #        count_even += 1\n    #    else:\n    #        count_odd += 1\n    #print(count_even,count_odd)\n    \n    \n    \n    '''\n    Write a python function to get the common items in two lists.\n    '''\n    li1 = [1,2,3,4,5]\n    li2 = ['a','b','c','d','e']\n    #common = set(li1) & set(li2)\n    #print(common)\n    #common = sorted(list(common))\n    #print(common)\n    #print(list(common))\n    \n    \n    '''\n    Write a python function to reverse a string.\n    '''\n    str1 = 'hello'\n    #str2 = str1[::-1]\n    #str1 = list(str1)\n    #str1.reverse()\n    #str2 = ''.join(str1)\n    #print(str2)\n    \n    \n    '''\n    Write a python function to rotate the given list by n positions in clockwise direction.\n    '''\n    #li = [1,2,3,4,5]\n    #n = 4\n    #n = n % len(li)\n    #print(n)\n    #li_new = li[n:] + li[:n]\n    #print(li_new)\n    \n    \n    '''\n    Write a python function to remove duplicates from a list.\n    '''\n    #li = ['a','b','b','b','c','d','d','d']\n    #li_new = list(dict.fromkeys(li))\n    #print(li_new)\n    \n    \n    '''\n    Write a python function to remove duplicates from a list and preserve the order of the elements.\n    '''\n    #li = ['a','b','b','b','c','d','d','d']\n    #li_new = list(set(li))\n    #print(li_new)\n    \n    \n    '''\n    Write a python function to get the intersection of two lists.\n    '''\n    #li1 = [1,2,3,4,5]\n    #li2 = [3,4,5,6,7]\n    #li_intersect = list(set(li1) & set(li2))\n    #print(li_intersect)\n    \n    \n    '''\n    Write a python function to get the union of two lists.\n    '''\n    #li1 = [1,2,3,4,5]\n    #li2 = [3,4,5,6,7]\n    #li_union = list(set(li1) | set(li2))\n    #print(li_union)\n    \n    \n    '''\n    Write a python function to get the difference of two lists.\n    '''\n    #li1 = [1,2,3,4,5]\n    #li2 = [3,4,5,6,7]\n    #li_diff = list(set(li1) - set(li2))\n    #print(li_diff)\n    \n    \n    '''\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    l1 = []\n    l2 = []\n    for item in li1:\n        if item not in li2:\n            l1.append(item)\n    for item in li2:\n        if item not in li1:\n            l2.append(item)\n    return l1 + l2\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum(list(filter(lambda x: x%2!=0,range(1,n+1))))\n    \n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1,2) :\n        s += i**4\n    return s"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    import math\n    n = int(input(\"Enter number of terms : \"))\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum = sum + math.pow(i, 4)\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_odd_num = 0\n    if n <= 0 :\n        print(\"Please enter a positive integer\")\n    else:\n        i = 1\n        while i <= n:\n            if (i%2)!=0:\n                sum_odd_num += i**4\n            i += 1\n        print(sum_odd_num)\nodd_num_sum(4)\nodd_num_sum(5)\nodd_num_sum(6)\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n) :\n        if (i + 1) % 2!= 0 :\n            sum = sum + (i + 1)**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    #n = int(input(\"Enter no. of elements : \"))\n    #a = range(1,n+1)\n    #for i in range(1,n+1) :\n    #    if i % 2!= 0 :\n    #        a = a+[i**3]\n    #s = 0\n    #for i in range(0,n) :\n    #    s = s+a[i]\n    #print(s)\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n + 1):\n        if i % 2!= 0:\n            total += i ** 4\n    return total\n        \n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if(i%2!=0) :\n            sum += i**4\n    return sum\nprint(odd_num_sum(20)) \n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n) :\n        if i%2!= 0:\n            sum = sum + pow(i, 4)\n    print(sum)\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_num_list = []\n    for i in range(1,n+1) :\n        if(i%2!= 0) :\n            odd_num_list.append(i**3)\n    return(sum(odd_num_list))\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    \n    stack = []\n    brace_map = {')': '(', ']': '[', '}': '{'}\n    for i in range(len(exp)):\n        if exp[i] in brace_map:\n            stack.append(brace_map[exp[i]])\n        else:\n            if not stack or stack.pop()!= exp[i]:\n                return False\n    return not stack\ndef get_next_operand(exp):\n    '''\n    Return the next operand from the expression\n    '''\n    \n    if exp:\n        return exp[0]\n    return None\ndef swap(exp, i, j):\n    '''\n    Swap the element at given indexes in the expression\n    '''\n    \n    tmp = exp[i]\n    exp[i] = exp[j]\n    exp[j] = tmp\n    return exp\ndef swap_nearest(exp, i, j):\n    '''\n    Swap the element at given indexes in the expression\n    '''\n    \n    if i == j:\n        return exp\n    if i < j:\n        i, j = j, i\n    tmp = exp[i]\n    exp[i] = exp[j]\n    exp[j] = tmp\n    return exp\ndef next_op(exp, i):\n    '''\n    Return the next operand from the expression\n    '''\n    \n    if i < len(exp)-1:\n        return get_next_operand(exp[i+1:])\n    return None\ndef get_braces_indices(exp):\n    '''\n    Return the left and right braces indices in the expression\n    '''\n    \n    left_braces_indices = []\n    right_braces_indices = []\n    \n    if exp:\n        open_brace_index = -1\n        close_brace_index = -1\n        for i in range(len(exp)):\n            if exp[i] == '(':\n                open_brace_index = i\n            elif exp[i] == ')':\n                close_brace_index = i\n                break\n        if open_brace_index >= 0 and close_brace_index >= 0:\n            left_braces_indices = [open_brace_index, i]\n            right_braces_indices = [i, close_brace_index]\n    return left_braces_indices, right_braces_indices\ndef get_braces_map(exp, left_braces_indices, right_braces_indices):\n    '''\n    Return the mapping between open and close braces\n    '''\n    \n    open_map = {}\n    if left_braces_indices:\n        open_map[left_braces_indices[0]] = '('\n    if right_braces_indices:\n        open_map[right_braces_indices[1]] = ')'\n    return open_map\ndef is_balanced(exp):\n    '''\n    Return if the expression is balanced or not\n    '''\n    \n    stack = []\n    if not exp:\n        return True\n    left_braces_indices, right_braces_indices = get_braces_indices(exp)\n    if left_braces_indices and right_braces_indices:\n        left_brace_map = get_braces_map(exp, left_braces_indices, right_braces_indices)\n        if left_brace_map:\n            for i in range(len(exp)):\n                if exp[i] in left_brace_map:\n                    if stack and stack[-1] == left_brace_map[exp[i]]:\n                        stack.pop()\n                    else:\n                        return False\n                else:\n                    stack.append(exp[i])\n    else:\n        return False\n    return True\ndef brackets_balance(exp):\n    '''\n    Return the balance of open and close braces\n    '''\n    \n    left_braces_indices, right_braces_indices = get_braces_indices(exp)\n    if left_braces_indices and right_braces_indices:\n        left_brace_map = get_braces_map(exp, left_braces_indices, right_braces_indices)\n        if left_brace_map:\n            return len(left_brace_map) == 1\n    return False\ndef swap_braces(exp, i, j):\n    '''\n    Return the expression after swapping the open and close braces\n    '''\n    \n    tmp = exp[i]\n    exp[i] = exp[j]\n    exp[j] = tmp\n    return exp\ndef swap_nearest_braces(exp, i, j):\n    '''\n    Return the expression after swapping the open and close braces\n    '''\n    \n    if i < j:\n        i, j = j, i\n    tmp = exp[i]\n    exp[i] = exp[j]\n    exp[j] = tmp\n    return exp\ndef fix_unbalanced_braces(exp):\n    '''\n    Return the expression after swapping the open and close braces\n    '''\n    \n    stack = []\n    open_braces_indices, right_braces_indices = get_braces_indices(exp)\n    if open_braces_indices and right_braces_indices:\n        open_brace_map = get_braces_map(exp, open_braces_indices, right_braces_indices)\n        if open_brace_map:\n            left_braces_indices = list(open_brace_map.keys())\n            left_braces_indices.sort(reverse=True)\n            for i in range(len(exp)):\n                if exp[i] == '(' and i in left_braces_indices:\n                    stack.append(exp[i])\n                elif exp[i] == ')' and i in right_braces_indices:\n                    if not stack:\n                        return exp\n                    tmp = stack.pop()\n                    if tmp == '(':\n                        return exp\n                    exp = swap_braces(exp, i, i+1)\n                    break\n            return exp\n    return exp\ndef fix_unbalanced_braces_recursive(exp):\n    '''\n    Return the expression after swapping the open and close braces\n    '''\n    \n    stack = deque()\n    open_braces_indices, right_braces_indices = get_braces_indices(exp)\n    if open_braces_indices and right_braces_indices:\n        open_brace_map = get_braces_map(exp, open_braces_indices, right_braces_indices)\n        if open_brace_map:\n            left_braces_indices = list(open_brace_map.keys())\n            left_braces_indices.sort(reverse=True)\n            for i in range(len(exp)):\n                if exp[i] == '(' and i in left_braces_indices:\n                    stack.append(exp[i])\n                elif exp[i] == ')' and i in right_braces_indices:\n                    if not stack:\n                        return exp\n                    tmp = stack.pop()\n                    if tmp == '(':\n                        return exp\n                    exp = swap_braces(exp, i, i+1)\n                    break\n            return exp\n    return exp\ndef get_operand(exp, i):\n    '''\n    Return the operand of given index\n    '''\n    \n    if i < len(exp):\n        return exp[i]\n    return None\ndef get_next_left_brace_index(exp):\n    '''\n    Return the index of the next left brace\n    '''\n    \n    left_brace_index = -1\n    if exp:\n        i = 0\n        while i < len(exp):\n            if exp[i] == '(':\n                left_brace_index = i\n                break\n            i += 1\n    return left_brace_index\ndef get_next_right_brace_index(exp):\n    '''\n    Return the index of the next right brace\n    '''\n    \n    right_brace_index = -1\n    if exp:\n        i = 0\n        while i < le"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(exp[i])\n        elif exp[i] == ')':\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    map_ = {'(': ')', '{': '}', '[': ']'}\n    for x in exp:\n        if x in map_:\n            stack.append(x)\n        else:\n            try:\n                if x == ')' and stack[-1]!= '(':\n                    return False\n                elif x == ']' and stack[-1]!= '[':\n                    return False\n                elif x == '}' and stack[-1]!= '{':\n                    return False\n            except:\n                return False\n            stack.pop()\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # DFS using stack \n    # TC : O(n) and SC : O(n)\n    stack = []\n    map = {'(':')','[':']','{':'}'}\n    for i in exp:\n        if i in map:\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return False\n            x = stack.pop()\n            if map[x]!= i:\n                return False\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp) == 0:\n        return True\n    stack = []\n    for c in exp:\n        if c=='(':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack)==0\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_list = [\"(\", \"{\", \"[\"]\n    close_list = [\")\", \"}\", \"]\"]\n    stack = []\n    \n    if len(exp) % 2!= 0:\n        return False\n    \n    for char in exp:\n        if char in open_list:\n            stack.append(char)\n        elif char in close_list:\n            pos = close_list.index(char)\n            if len(stack) > 0 and open_list[pos] == stack[len(stack)-1]:\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # max_stack = []\n    # for i in range(len(exp)):\n    #     if exp[i] == '(':\n    #         max_stack.append(exp[i])\n    #     else:\n    #         if len(max_stack) == 0:\n    #             return False\n    #         else:\n    #             max_stack.pop()\n    # if len(max_stack) == 0:\n    #     return True\n    # else:\n    #     return False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    opening = set('([{')\n    closing = set(')}])')\n    mapping = set(['{','[',')','}',']'])\n    if len(exp) == 0:\n        return True\n    for char in exp:\n        if char in opening:\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            top = stack.pop()\n            if char == ')':\n                if top == '{':\n                    continue\n                elif top == '(':\n                    return False\n                else:\n                    return False\n            elif char == ']':\n                if top == '(':\n                    continue\n                elif top == '{':\n                    return False\n                else:\n                    return False\n            elif char == '}':\n                if top == '(':\n                    continue\n                elif top == '{':\n                    return False\n                else:\n                    return False\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # Stack to keep track of opening brackets\n    stack = deque()\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in exp:\n        if i == \"(\":\n            stack.append(i)\n        elif i == \")\":\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == \"(\":\n                del stack[-1]\n            else:\n                return False\n    return len(stack) == 0\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    str_list = []\n    for i in test_str.split():\n        if len(i) == K:\n            str_list.append(i)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    out_str = []\n    if test_str == None or len(test_str) == 0:\n        return \"\"\n    for i in range(len(test_str)):\n        if len(test_str) < K:\n            return \"\".join(out_str)\n        if len(test_str) > K:\n            if i < K:\n                out_str.append(test_str[i])\n            continue\n        out_str.append(test_str[i])\n    return \"\".join(out_str)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    for i in range(len(test_str)-K):\n        if test_str[i:i+K+1] in test_str:\n            test_str = test_str.replace(test_str[i:i+K+1],\"\")\n    return test_str\nprint(remove_length(\"The quick brown fox jumps over the lazy dog\",3))\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    #if K <= len(test_str)\n    if K <= len(test_str):\n        # remove_words = test_str.split()\n        # return''.join(remove_words[K:])\n        return''.join([word for word in test_str.split() if len(word)!= K])\n    else:\n        return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for word in words:\n        if len(word) == K:\n            words.remove(word)\n    return words\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if K == 0:\n        return test_str\n    else:\n        if len(test_str) == 0:\n            return None\n        else:\n            return remove_length(test_str.replace(test_str[0], '', 1), K - 1)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    #build the index mapping the words\n    word_index_map = {'Word1' : 0, 'Word2' : 1, 'Word3' : 2}\n    \n    #indexing of the string\n    string_index_map = {}\n    #traverse through the string and build the index mapping\n    for i in range(len(test_str)):\n        if test_str[i] not in string_index_map:\n            string_index_map[test_str[i]] = i\n    \n    #now we have a map of the indices and words with length K\n    \n    #now we have to remove the words\n    result = []\n    for word in test_str.split():\n        if len(word) == K:\n            result.append(word)\n    result = \" \".join(result)\n    \n    return result\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return test_str.split()[K:]\n    \n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    result = \"\"\n    length = 0\n    for char in test_str:\n        if length == K:\n            result += char\n            length = 0\n        else:\n            result += char\n            length += 1\n    return result\n    \ndef remove_all(test_str, K):\n    '''\n    Write a function to remove all the words in the given string if they have less than K characters.\n    '''\n    result = \"\"\n    for char in test_str:\n        if len(result) <= K:\n            result += char\n    return result\n    \ndef remove_range(test_str, start, end):\n    '''\n    Write a function to remove all the words in the given string if they are between the start and end.\n    '''\n    result = \"\"\n    for char in test_str:\n        if start <= result <= end:\n            result += char\n    return result\n    \ndef remove_even_length(test_str):\n    '''\n    Write a function to remove all the words whose length is even in the given string.\n    '''\n    result = \"\"\n    for char in test_str:\n        if len(result) % 2!= 0:\n            result += char\n    return result\n    \ndef remove_odd_length(test_str):\n    '''\n    Write a function to remove all the words whose length is odd in the given string.\n    '''\n    result = \"\"\n    for char in test_str:\n        if len(result) % 2!= 0:\n            result += char\n    return result\n    \ndef remove_repetition(test_str):\n    '''\n    Write a function to remove the repetition of words in the given string.\n    '''\n    result = \"\"\n    words = []\n    for char in test_str:\n        if char not in words:\n            result += char\n            words.append(char)\n    return result\n    \ndef remove_common_words(test_str, K):\n    '''\n    Write a function to remove the words in the given string that appear at least K times.\n    '''\n    result = \"\"\n    word_count = {}\n    for char in test_str:\n        if char in word_count:\n            word_count[char] += 1\n        else:\n            word_count[char] = 1\n    for key, value in word_count.items():\n        if value >= K:\n            result += key\n    return result\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    def helper(test_str, K):\n        tmp = []\n        for i in range(len(test_str)-K+1):\n            tmp.append(test_str[i:i+K])\n        return tmp\n    \n    test_str = test_str.split()\n    ans = []\n    for word in test_str:\n        if len(word)!= K:\n            ans.append(word)\n    return''.join(ans)\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.finditer(pattern,text)\n    for i in match:\n        if i.start()==0 and i.end()==0:\n            return None\n        else:\n            return i.start(),i.end()\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    regex = re.compile(pattern)\n    result = re.findall(regex,text)\n    if len(result)==0:\n        return None\n    return (result[0],result[0][0])\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pos = -1\n    while True:\n        pos = text.find(pattern,pos+1)\n        if pos == -1:\n            return None\n        else:\n            return pos\ndef test_occurance_substring():\n    print(occurance_substring(\"abcabc\",\"abc\"))\n    print(occurance_substring(\"abcabc\",\"abcbc\"))\n    print(occurance_substring(\"abcabc\",\"ababc\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"\",\"c\"))\n    print(occurance_substring(\"ab\",\"ab\"))\n    print(occurance_substring(\"\",\"ab\"))\n    print(occurance_substring(\"\",\"\"))\n    print(occurance_substring(\"\",\"aa\"))\n    print(occurance_substring(\"\",\"aa\"))\n    print(occurance_substring(\"abcabc\",\"abc\"))\n    print(occurance_substring(\"abcabc\",\"abcabc\"))\n    print(occurance_substring(\"abcabc\",\"abcbc\"))\n    print(occurance_substring(\"abcabc\",\"ababc\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))\n    print(occurance_substring(\"abcabc\",\"ab\"))"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_pattern = re.compile(pattern)\n    return pattern_pattern.findall(text)\n    \ndef occurance_substring_using_split(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_pattern = re.compile(pattern)\n    return pattern_pattern.findall(text.split())\n    \ndef find_index(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_pattern = re.compile(pattern)\n    return pattern_pattern.findall(text)\n    \ndef find_index_using_split(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_pattern = re.compile(pattern)\n    return pattern_pattern.findall(text.split())\n    \ndef findall_using_re_object(text,pattern):\n    '''\n    Write a function to find all the occurrence of a pattern in a text. Return a list of tuples.\n    '''\n    pattern_pattern = re.compile(pattern)\n    return re.findall(pattern_pattern,text)\n    \ndef findall_using_re_object_using_finditer(text,pattern):\n    '''\n    Write a function to find all the occurrence of a pattern in a text. Return a list of tuples.\n    '''\n    pattern_pattern = re.compile(pattern)\n    return pattern_pattern.findall(text)\n    \ndef find_iter(text,pattern):\n    '''\n    Write a function to find all the occurrence of a pattern in a text. Return a list of tuples.\n    '''\n    pattern_pattern = re.compile(pattern)\n    return pattern_pattern.finditer(text)\n    \ndef find_iter_using_findall(text,pattern):\n    '''\n    Write a function to find all the occurrence of a pattern in a text. Return a list of tuples.\n    '''\n    pattern_pattern = re.compile(pattern)\n    return pattern_pattern.findall(text)\n    \ndef find_iter_using_findall_return_strings(text,pattern):\n    '''\n    Write a function to find all the occurrence of a pattern in a text. Return a list of tuples.\n    '''\n    pattern_pattern = re.compile(pattern)\n    return pattern_pattern.findall(text)\n    \ndef find_iter_using_findall_return_strings_return_strings(text,pattern):\n    '''\n    Write a function to find all the occurrence of a pattern in a text. Return a list of tuples.\n    '''\n    pattern_pattern = re.compile(pattern)\n    return pattern_pattern.findall(text)\n    \ndef find_iter_using_findall_return_strings_return_strings_return_strings(text,pattern):\n    '''\n    Write a function to find all the occurrence of a pattern in a text. Return a list of tuples.\n    '''\n    pattern_pattern = re.compile(pattern)\n    return pattern_pattern.findall(text)\n    \ndef find_iter_using_findall_return_strings_return_strings_return_strings_return_strings(text,pattern):\n    '''\n    Write a function to find all the occurrence of a pattern in a text. Return a list of tuples.\n    '''\n    pattern_pattern = re.compile(pattern)\n    return pattern_pattern.findall(text)\n    \ndef find_iter_using_findall_return_strings_return_strings_return_strings_return_strings_return_strings(text,pattern):\n    '''\n    Write a function to find all the occurrence of a pattern in a text. Return a list of tuples.\n    '''\n    pattern_pattern = re.compile(pattern)\n    return pattern_pattern.findall(text)\n    \ndef find_iter_using_findall_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings(text,pattern):\n    '''\n    Write a function to find all the occurrence of a pattern in a text. Return a list of tuples.\n    '''\n    pattern_pattern = re.compile(pattern)\n    return pattern_pattern.findall(text)\n    \ndef find_iter_using_findall_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings(text,pattern):\n    '''\n    Write a function to find all the occurrence of a pattern in a text. Return a list of tuples.\n    '''\n    pattern_pattern = re.compile(pattern)\n    return pattern_pattern.findall(text)\n    \ndef find_iter_using_findall_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings(text,pattern):\n    '''\n    Write a function to find all the occurrence of a pattern in a text. Return a list of tuples.\n    '''\n    pattern_pattern = re.compile(pattern)\n    return pattern_pattern.findall(text)\n    \ndef find_iter_using_findall_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings(text,pattern):\n    '''\n    Write a function to find all the occurrence of a pattern in a text. Return a list of tuples.\n    '''\n    pattern_pattern = re.compile(pattern)\n    return pattern_pattern.findall(text)\n    \ndef find_iter_using_findall_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings(text,pattern):\n    '''\n    Write a function to find all the occurrence of a pattern in a text. Return a list of tuples.\n    '''\n    pattern_pattern = re.compile(pattern)\n    return pattern_pattern.findall(text)\n    \ndef find_iter_using_findall_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings(text,pattern):\n    '''\n    Write a function to find all the occurrence of a pattern in a text. Return a list of tuples.\n    '''\n    pattern_pattern = re.compile(pattern)\n    return pattern_pattern.findall(text)\n    \ndef find_iter_using_findall_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings(text,pattern):\n    '''\n    Write a function to find all the occurrence of a pattern in a text. Return a list of tuples.\n    '''\n    pattern_pattern = re.compile(pattern)\n    return pattern_pattern.findall(text)\n    \ndef find_iter_using_findall_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings(text,pattern):\n    '''\n    Write a function to find all the occurrence of a pattern in a text. Return a list of tuples.\n    '''\n    pattern_pattern = re.compile(pattern)\n    return pattern_pattern.findall(text)\n    \ndef find_iter_using_findall_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings_return_strings(text,pattern):\n    '''\n    Write a function to find all the occurrence of a pattern in a text. Return a list of tuples.\n    '''\n    pattern_pattern = re.compile(pattern)\n    return pattern_patter"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    a=text.find(pattern)\n    b=pattern.find(pattern)\n    if a!=-1 and b!=-1:\n        if a<b:\n            return a\n        else:\n            return b\n    else:\n        return None\n    \n    \n    \ndef re_composite_substring(text,patterns):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    lst=[]\n    for p in patterns:\n        a=text.find(p)\n        b=p.find(p)\n        if a!=-1 and b!=-1:\n            if a<b:\n                lst.append(a)\n            else:\n                lst.append(b)\n        else:\n            continue\n    return lst\n    \n    \n    \ndef re_substring_with_fixed_chars(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result=re.findall(pattern,text)\n    if result:\n        return result\n    else:\n        return None\n    \n    \n    \ndef re_match_position(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pos=re.search(pattern,text)\n    if pos:\n        return pos.start()\n    else:\n        return None\n    \n    \n    \ndef re_match_position_with_fixed_chars(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pos=re.search(pattern,text)\n    if pos:\n        return pos.start()\n    else:\n        return None\n    \n    \n    \ndef re_findall_with_fixed_chars(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result=re.findall(pattern,text)\n    if result:\n        return result\n    else:\n        return None\n    \n    \n    \ndef re_replace_with_fixed_chars(text,pattern,repl):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result=re.sub(pattern,repl,text)\n    if result:\n        return result\n    else:\n        return None\n    \n    \n    \ndef re_match_with_fixed_chars(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pos=re.search(pattern,text)\n    if pos:\n        return True\n    else:\n        return False\n    \n    \n    \ndef re_match_with_fixed_chars_re(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    regex=re.compile(pattern)\n    result=regex.search(text)\n    if result:\n        return True\n    else:\n        return False\n    \n    \n    \ndef re_match_with_fixed_chars_re(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    regex=re.compile(pattern)\n    result=regex.search(text)\n    if result:\n        return result.span()\n    else:\n        return None\n    \n    \n    \ndef re_match_with_fixed_chars_re(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    regex=re.compile(pattern)\n    result=regex.search(text)\n    if result:\n        return result.span()\n    else:\n        return None\n    \n    \n    \ndef re_match_with_fixed_chars_re(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    regex=re.compile(pattern)\n    result=regex.search(text)\n    if result:\n        return result.span()\n    else:\n        return None\n    \n    \n    \ndef re_match_with_fixed_chars_re(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    regex=re.compile(pattern)\n    result=regex.search(text)\n    if result:\n        return result.span()\n    else:\n        return None\n    \n    \n    \ndef re_match_with_fixed_chars_re(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    regex=re.compile(pattern)\n    result=regex.search(text)\n    if result:\n        return result.span()\n    else:\n        return None\n    \n    \n    \ndef re_match_with_fixed_chars_re(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    regex=re.compile(pattern)\n    result=regex.search(text)\n    if result:\n        return result.span()\n    else:\n        return None\n    \n    \n    \ndef re_match_with_fixed_chars_re(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    regex=re.compile(pattern)\n    result=regex.search(text)\n    if result:\n        return result.span()\n    else:\n        return None\n    \n    \n    \ndef re_match_with_fixed_chars_re(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    regex=re.compile(pattern)\n    result=regex.search(text)\n    if result:\n        return result.span()\n    else:\n        return None\n    \n    \n    \ndef re_match_with_fixed_chars_re(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    regex=re.compile(pattern)\n    result=regex.search(text)\n    if result:\n        return result.span()\n    else:\n        return None\n    \n    \n    \ndef re_match_with_fixed_chars_re(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    regex=re.compile(pattern)\n    result=regex.search(text)\n    if result:\n        return result.span()\n    else:\n        return None\n    \n    \n    \ndef re_match_with_fixed_chars_re(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    regex=re.compile(pattern)\n    result=regex.search(text)\n    if result:\n        return result.span()\n    else:\n        return None\n    \n    \n    \ndef re_match_with_fixed_chars_re(text,pattern):\n    ''"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occur={}\n    i=0\n    for p in pattern:\n        occur[p]=text.count(p,i)\n        i+=occur[p]\n    return occur\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occ = re.findall(r'(%s)'%pattern,text)\n    print(occ)\n    if(len(occ)==0):\n        return None\n    else:\n        for i in range(0,len(occ)):\n            print(occ[i][0],occ[i][1])\n    \noccurance_substring('In this case \"acb\" is a substring of \"aababcdabc\".', 'a')\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    x = re.findall(pattern,text)\n    return x\n    \nif __name__ == \"__main__\":\n    text = \"It was a bright cold day in April, and the clocks were striking thirteen.\"\n    pattern = r\"thi\"\n    print(\"Input :\",text)\n    print(\"Pattern :\",pattern)\n    print(\"Output :\",occurance_substring(text,pattern))\n    \n    text = \"Python is a high level, interpreted, interactive and object-oriented scripting programming language.\"\n    pattern = r\"high\"\n    print(\"Input :\",text)\n    print(\"Pattern :\",pattern)\n    print(\"Output :\",occurance_substring(text,pattern))\n    \n    text = \"Python is a high level, interpreted, interactive and object-oriented scripting programming language.\"\n    pattern = r\"is\"\n    print(\"Input :\",text)\n    print(\"Pattern :\",pattern)\n    print(\"Output :\",occurance_substring(text,pattern))\n    \n    text = \"Python is a high level, interpreted, interactive and object-oriented scripting programming language.\"\n    pattern = r\"high\"\n    print(\"Input :\",text)\n    print(\"Pattern :\",pattern)\n    print(\"Output :\",occurance_substring(text,pattern))\n    \n    text = \"Python is a high level, interpreted, interactive and object-oriented scripting programming language.\"\n    pattern = r\"high\"\n    print(\"Input :\",text)\n    print(\"Pattern :\",pattern)\n    print(\"Output :\",occurance_substring(text,pattern))\n    \n    text = \"Python is a high level, interpreted, interactive and object-oriented scripting programming language.\"\n    pattern = r\"is\"\n    print(\"Input :\",text)\n    print(\"Pattern :\",pattern)\n    print(\"Output :\",occurance_substring(text,pattern))\n    \n    text = \"Python is a high level, interpreted, interactive and object-oriented scripting programming language.\"\n    pattern = r\"High level\"\n    print(\"Input :\",text)\n    print(\"Pattern :\",pattern)\n    print(\"Output :\",occurance_substring(text,pattern))\n    \n    text = \"Python is a high level, interpreted, interactive and object-oriented scripting programming language.\"\n    pattern = r\"High level\"\n    print(\"Input :\",text)\n    print(\"Pattern :\",pattern)\n    print(\"Output :\",occurance_substring(text,pattern))\n    \n    text = \"Python is a high level, interpreted, interactive and object-oriented scripting programming language.\"\n    pattern = r\"High\"\n    print(\"Input :\",text)\n    print(\"Pattern :\",pattern)\n    print(\"Output :\",occurance_substring(text,pattern))\n    \n    text = \"Python is a high level, interpreted, interactive and object-oriented scripting programming language.\"\n    pattern = r\"High level\"\n    print(\"Input :\",text)\n    print(\"Pattern :\",pattern)\n    print(\"Output :\",occurance_substring(text,pattern))\n    \n    text = \"Python is a high level, interpreted, interactive and object-oriented scripting programming language.\"\n    pattern = r\"is\"\n    print(\"Input :\",text)\n    print(\"Pattern :\",pattern)\n    print(\"Output :\",occurance_substring(text,pattern))\n    \n    text = \"Python is a high level, interpreted, interactive and object-oriented scripting programming language.\"\n    pattern = r\"is\"\n    print(\"Input :\",text)\n    print(\"Pattern :\",pattern)\n    print(\"Output :\",occurance_substring(text,pattern))\n    \n    text = \"Python is a high level, interpreted, interactive and object-oriented scripting programming language.\"\n    pattern = r\"is\"\n    print(\"Input :\",text)\n    print(\"Pattern :\",pattern)\n    print(\"Output :\",occurance_substring(text,pattern))\n    \n    text = \"Python is a high level, interpreted, interactive and object-oriented scripting programming language.\"\n    pattern = r\"is\"\n    print(\"Input :\",text)\n    print(\"Pattern :\",pattern)\n    print(\"Output :\",occurance_substring(text,pattern))\n    \n    text = \"Python is a high level, interpreted, interactive and object-oriented scripting programming language.\"\n    pattern = r\"High level\"\n    print(\"Input :\",text)\n    print(\"Pattern :\",pattern)\n    print(\"Output :\",occurance_substring(text,pattern))\n    \n    text = \"Python is a high level, interpreted, interactive and object-oriented scripting programming language.\"\n    pattern = r\"High level\"\n    print(\"Input :\",text)\n    print(\"Pattern :\",pattern)\n    print(\"Output :\",occurance_substring(text,pattern))\n    \n    text = \"Python is a high level, interpreted, interactive and object-oriented scripting programming language.\"\n    pattern = r\"is\"\n    print(\"Input :\",text)\n    print(\"Pattern :\",pattern)\n    print(\"Output :\",occurance_substring(text,pattern))\n    \n    text = \"Python is a high level, interpreted, interactive and object-oriented scripting programming language.\"\n    pattern = r\"is\"\n    print(\"Input :\",text)\n    print(\"Pattern :\",pattern)\n    print(\"Output :\",occurance_substring(text,pattern))\n    \n    text = \"Python is a high level, interpreted, interactive and object-oriented scripting programming language.\"\n    pattern = r\"is\"\n    print(\"Input :\",text)\n    print(\"Pattern :\",pattern)\n    print(\"Output :\",occurance_substring(text,pattern))\n    \n    text = \"Python is a high level, interpreted, interactive and object-oriented scripting programming language.\"\n    pattern = r\"is\"\n    print(\"Input :\",text)\n    print(\"Pattern :\",pattern)\n    print(\"Output :\",occurance_substring(text,pattern))\n    \n    text = \"Python is a high level, interpreted, interactive and object-oriented scripting programming language.\"\n    pattern = r\"is\"\n    print(\"Input :\",text)\n    print(\"Pattern :\",pattern)\n    print(\"Output :\",occurance_substring(text,pattern))\n    \n    text = \"Python is a high level, interpreted, interactive and object-oriented scripting programming language.\"\n    pattern = r\"is\"\n    print(\"Input :\",text)\n    print(\"Pattern :\",pattern)\n    print(\"Output :\",occurance_substring(text,pattern))\n    \n    text = \"Python is a high level, interpreted, interactive and object-oriented scripting programming language.\"\n    pattern = r\"is\"\n    print(\"Input :\",text)\n    print(\"Pattern :\",pattern)\n    print(\"Output :\",occurance_substring(text,pattern))\n    \n    text = \"Python is a high level, interpreted, interactive and object-oriented scripting programming language.\"\n    pattern = r\"is\"\n    print(\"Input :\",text)\n    print(\"Pattern :\",pattern)\n    print(\"Output :\",occurance_substring(text,pattern))\n    \n    text = \"Python is a high level, interpreted, interactive and object-oriented scripting programming language.\"\n    pattern = r\"is\"\n    print(\"Input :\",text)\n    print(\"Pattern :\",pattern)\n    print(\"Output :\",occurance_substring(text,pattern))\n    \n    text = \"Python is a high level, interpreted, interactive and object-oriented scripting programming language.\"\n    pattern = r\"is\"\n    print(\"Input :\",text)\n    print(\"Pattern :\",pattern)\n    print(\"Output :\",occurance_substring(text,pattern))\n    \n    text = \"Python is a high level, interpreted, interactive and object-oriented scripting programming language.\"\n    pattern = r\"is\"\n    print(\"Input :\",text)\n    print(\"Pattern :\",pattern)\n    print(\"Output :\",occurance_substring(text,pattern))\n    \n    text = \"Python is a high level, interpreted, interactive and object-oriented scripting programming language.\"\n    pattern = r\"is\"\n    print(\"Input :\",text)\n    print(\"Pattern :\",pattern)\n    print(\"Output :\",occurance_substring(text,pattern))\n    \n    text = \"Python is a high level, interpreted, interactive and object-oriented scripting programming language.\"\n    pattern = r\"is\"\n    print(\"Input :\",text)\n    print(\"Pattern :\",pattern)\n    print(\"Output :\",occurance_substring(text,pattern))\n    \n    text = \"Python is a high level, interpreted, interactive and object-oriented scripting programming languag"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    s = re.findall(pattern,text)\n    if s == None:\n        return None\n    else:\n        for i in range(len(s)):\n            print(\"the substring occurance:\",i,\"the position is:\",text.index(s[i]))\n    return s\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if type(text) == str and type(pattern) == str:\n        pos = []\n        if pattern in text:\n            i = 0\n            while i < len(text):\n                if pattern in text:\n                    pos.append(i)\n                    while text[i] == pattern[0]:\n                        i += 1\n                        if len(pattern) == len(text) - i:\n                            pos.append(i)\n                            break\n            return pos\n        else:\n            return None\n    else:\n        raise Exception(\"Text and pattern are of different data types. Please enter only string\")\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(n%2 == 1 for n in nums)\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    #List comprehension - O(n)\n    # return all(i % 2!= 0 for i in range(len(nums)))\n    return [i % 2!= 0 for i in range(len(nums))]\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if type(nums) == type([]):\n        for i in range(len(nums)):\n            if i % 2!= 0:\n                if nums[i] % 2!= 0:\n                    return False\n                else:\n                    continue\n            else:\n                continue\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # Your code here\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            continue\n        else:\n            print(\"False\")\n            return False\n    print(\"True\")\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i%2 == 1 and nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_index = [i for i in range(0,len(nums)) if i%2 == 1]\n    odd_nums = [nums[i] for i in odd_index]\n    return odd_nums\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue\n        else:\n            if nums[i] % 2!= 0:\n                return False\n    return True\n    \ndef check_odd_index(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue\n        else:\n            if nums[i] % 2 == 0:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i%2!= 0:\n            if nums[i]%2!=0:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue\n        elif nums[i] % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set('aeiou')\n    count = 0\n    for i in range(1, len(test_str)):\n        if test_str[i] in vowels:\n            if test_str[i - 1] in vowels:\n                count += 1\n            if test_str[i + 1] in vowels:\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    count = 0\n    for char in test_str:\n        if char in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    char_dict = {}\n    vowels = set(\"aeiou\")\n    for i in test_str:\n        char_dict[i] = 0\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(0,len(test_str)-1):\n        if test_str[i] == \"a\" or test_str[i] == \"e\" or test_str[i] == \"i\" or test_str[i] == \"o\" or test_str[i] == \"u\":\n            if test_str[i+1] == \"a\" or test_str[i+1] == \"e\" or test_str[i+1] == \"i\" or test_str[i+1] == \"o\" or test_str[i+1] == \"u\":\n                count = count + 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    counter = 0\n    str_length = len(test_str)\n    for i in range(str_length):\n        if test_str[i] in vowels:\n            if test_str[i-1] not in vowels:\n                counter += 1\n            if test_str[i+1] not in vowels:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    test_str = test_str.lower()\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in \"aeiou\":\n            if i == 0:\n                if test_str[i] == test_str[i+1]:\n                    count += 1\n            elif i == len(test_str)-1:\n                if test_str[i-1] == test_str[i]:\n                    count += 1\n            elif test_str[i-1] == test_str[i] and test_str[i+1] == test_str[i]:\n                count += 1\n            else:\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    if len(test_str) < 1:\n        return 0\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    if len(test_str) == 0:\n        return 0\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            for j in range(i + 1, len(test_str)):\n                if test_str[j] in vowels:\n                    count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    cnt = 0\n    for i in range(len(test_str)):\n        if test_str[i] in \"aeiou\":\n            cnt+=1\n    return cnt\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    def count_vowels(test_str):\n        if test_str is None:\n            raise ValueError(\"Invalid input\")\n        vowels = \"aeiou\"\n        dict_vowels = {}\n        total_vowels = 0\n        for vowel in vowels:\n            dict_vowels[vowel] = 0\n        for i in range(0, len(test_str)):\n            if test_str[i] in vowels:\n                dict_vowels[test_str[i]] += 1\n        for key in dict_vowels.keys():\n            total_vowels += dict_vowels[key]\n        return total_vowels\n    return count_vowels\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # we need to keep track of index \n    index = -1\n    # keep track of sum \n    total = 0\n    # loop through elements of the array \n    for i in arr:\n        # update the index \n        index += 1\n        # keep adding \n        total += i \n    # return the sum \n    return total\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr = sorted(arr)\n    i = 0\n    j = len(arr)-1\n    sum = 0\n    while i <= j:\n        if i==j:\n            sum = arr[i]\n            break\n        if arr[i] == arr[j]:\n            i += 1\n            j -= 1\n        else:\n            sum = arr[i] + arr[j]\n            break\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    temp_arr = list(set(arr))\n    sum_of_arr = sum(temp_arr)\n    return sum_of_arr\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            sum += i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    res = 0\n    for i in arr:\n        if i not in res:\n            res += i\n    return res\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    my_dict = {}\n    for item in arr:\n        if item not in my_dict:\n            my_dict[item] = True\n        else:\n            my_dict[item] = False\n    return sum(my_dict.keys())\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    seen = set()\n    for element in arr:\n        if element not in seen:\n            sum += element\n            seen.add(element)\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    total = 0\n    seen = set()\n    for element in arr:\n        if element not in seen:\n            seen.add(element)\n            total = total + element\n    return total\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum_num = 0\n    for num in arr:\n        if num not in arr:\n            sum_num += num\n    return sum_num\n        \n        \n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if list1==[]:\n        return [[]]\n    else:\n        start = list1[0]\n        end = list1[0]\n        result = []\n        for i in range(len(list1)):\n            if i==len(list1)-1:\n                end = list1[i]\n                result.append([start,end])\n            else:\n                if list1[i]!=list1[i+1]:\n                    if list1[i]==start:\n                        start = list1[i+1]\n                    else:\n                        end = list1[i+1]\n                        result.append([start,end])\n                        start = list1[i+1]\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1.sort()\n    result = []\n    for key,group in groupby(list1):\n        result.append([elem for elem in group])\n    print(result)\n    \nif __name__ == '__main__':\n    pack_consecutive_duplicates([0,1,2,3,4,5,6,7,8,9])"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = []\n    for i, elem in groupby(sorted(list1)):\n        elem = list(elem)\n        list2.append(elem)\n    return list2\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    res = []\n    for k, g in groupby(enumerate(list1), lambda i:i[0] - i[1]):\n        res.append(list(map(lambda i:i[1], g)))\n    return res\nif __name__ == '__main__':\n    print(\"Enter the list elements:\")\n    li = list(map(int, input().split()))\n    print(pack_consecutive_duplicates(li))\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    final_list=[]\n    temp=[]\n    #print(len(list1))\n    for i in range(len(list1)):\n        #print(list1[i])\n        if list1[i] not in temp:\n            temp.append(list1[i])\n        elif list1[i]==temp[-1]:\n            temp.append(list1[i])\n        else:\n            final_list.append(temp)\n            temp=[]\n    if temp:\n        final_list.append(temp)\n    return final_list\n        \ndef find_special_letters(input_string):\n    '''\n    Write a function to find any special character which occur after every even index.\n    '''\n    def even_index_is_special(input_string, idx):\n        if input_string[idx] in \"aeiouAEIOU\":\n            return True\n        else:\n            return False\n    special_char = []\n    for i in range(len(input_string)):\n        if even_index_is_special(input_string, i) is True:\n            special_char.append(input_string[i])\n    return special_char\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    my_list = list(list1)\n    my_dict = dict(groupby(my_list))\n    new_list = []\n    if len(list1) == 1:\n        new_list = [[my_list[0]]]\n    elif len(my_list) == 1:\n        new_list = [[my_list[0]]]\n    else:\n        for item in my_dict.items():\n            if len(item[1]) > 1:\n                my_str = str(item[0])\n                my_str = my_str.replace('[', '')\n                my_str = my_str.replace(']', '')\n                new_list.append([my_str])\n        \n    return new_list\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [[list1[0]]]\n    ans = []\n    prev = list1[0]\n    for i in range(1,len(list1)):\n        if list1[i]!= prev:\n            if len(list1[i:]) == 1:\n                ans.append([list1[i]])\n                prev = list1[i]\n            else:\n                ans.append([list1[i]])\n                prev = list1[i]\n    return ans\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # for index, values in enumerate(list1):\n    #     if list1.count(values) > 1:\n    #         sub_list = list(groupby(list1))\n    #         first_list = sub_list.get(1)[0]\n    #         list1.remove(values)\n    #         list1.extend(first_list)\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1 = list(filter(lambda x: x!=None, list1))\n    if(len(list1) == 0):\n        return []\n    else:\n        list1.sort()\n        sublists = []\n        sublist = []\n        if(list1[0]!= list1[1]):\n            sublist.append(list1[0])\n        sublist.append(list1[1])\n        sublists.append(sublist)\n        return sublists\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    a=[]\n    s = []\n    b = []\n    for i in list1:\n        if i not in s:\n            s.append(i)\n        else:\n            b.append(i)\n    a.append(s)\n    a.append(b)\n    return a\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    uniq_sub_lists = {}\n    \n    for item in list1:\n        if item in uniq_sub_lists.keys():\n            uniq_sub_lists[item] += 1\n        else:\n            uniq_sub_lists[item] = 1\n    \n    return(uniq_sub_lists)\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    res = {}\n    for i in range(len(list1)):\n        res[tuple(list1[i])] = list1[i].count(list1[i])\n    return res\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    return {list1: 1}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    my_dict = {}\n    for i in list1:\n        my_dict[tuple(i)] = list1.count(tuple(i))\n    return my_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list2 = list(list1)\n    list2 = sorted(list2)\n    list3 = dict()\n    for i in range(len(list2)):\n        if list2[i] in list3:\n            list3[list2[i]] += 1\n        else:\n            list3[list2[i]] = 1\n    return list3\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    lst = []\n    for i in list1:\n        if isinstance(i,list):\n            lst.append(tuple(i))\n    lst = dict(Counter(tuple(lst)))\n    return lst\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = []\n    for i in list1:\n        if i not in unique_list:\n            unique_list.append(i)\n    return len(unique_list)\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    lists = []\n    for i in range(len(list1)):\n        if list1[i] not in lists:\n            lists.append(list1[i])\n        else:\n            counts[tuple(lists)] += 1\n    return counts\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dictionary = {}\n    for lst in list1:\n        if not dictionary.get(type(lst)):\n            dictionary[type(lst)] = 1\n        else:\n            dictionary[type(lst)] += 1\n    return dictionary\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_dict = {}\n    for lst in list1:\n        tup = tuple(lst)\n        unique_dict.setdefault(tup, 0)\n        unique_dict[tup] += 1\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if sum(test_list[i]) == sum(test_list[j]) and test_list[i]!= test_list[j]:\n                combinations_list.append((test_list[i], test_list[j]))\n    return combinations_list\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for x in range(len(test_list)):\n        for y in range(x+1,len(test_list)):\n            for z in range(y+1,len(test_list)):\n                sum_of_tuple = (test_list[x],test_list[y],test_list[z])\n                result.append(sum_of_tuple)\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Initializing a set of all the elements\n    summ = set()\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_sum = set()\n    for i in range(0, len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            sum_of_combinations = test_list[i] + test_list[j]\n            combinations_sum.add(sum_of_combinations)\n    print(combinations_sum)\nfind_combinations([1,2,3,4,5]"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                if test_list[i] + test_list[j] == sum(test_list):\n                    result.append((test_list[i],test_list[j]))\n    return result\ntest_list = [1,2,3,4,5,6,7,8,9,10]\nprint(find_combinations(test_list))\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combs = list(combinations(test_list, 2))\n    for tup in combs:\n        if (sum(tup)) in test_list:\n            test_list.remove(sum(tup))\n    return combs \n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    combinations = list(combinations(test_list, 2))\n    combinations_tuple = []\n    for c in combinations:\n        combinations_tuple.append(tuple(c))\n    return combinations_tuple\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combs = []\n    for i in range(len(test_list)-1):\n        for j in combinations(test_list, i+1):\n            combs.append(j)\n    return combs\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    ans = combinations(test_list, 2)\n    ans = map(sum, ans)\n    return list(ans)\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # code here\n    if not test_list:\n        return []\n    return_list = []\n    s = sum(test_list)\n    if s==0:\n        return_list.append(tuple(test_list))\n        return return_list\n    for i in range(len(test_list)):\n        if test_list[i]==0:\n            continue\n        if test_list[i]==1:\n            return_list.append(tuple(test_list))\n            return return_list\n        else:\n            for temp in find_combinations(test_list[:i]+test_list[i+1:]):\n                return_list.append((test_list[i],)*(test_list[i]-1) + (temp,)+((test_list[i] + 1,)*(test_list[i]-1)))\n    return return_list\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 1\n    # write your logic here\n    while count*count <= n :\n        count = count + 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    count = 0\n    while i <= n :\n        if n % i == 0 :\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    i = 1\n    while (i <= math.sqrt(n)) : \n        if n % i == 0 : \n            count += 2\n        i += 1\n    if n == 1 : \n        count = 1\n    return count \n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    cnt = 0\n    for i in range(1,n):\n        if n % i == 0:\n            cnt += 1\n    if cnt % 2 == 0:\n        print(True)\n    else:\n        print(False)\ncount_divisors(5)\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    i = 1\n    while(i <= n) :\n        if (n % i == 0) :\n            count += 1\n        i += 1\n    return count\ndef is_prime(n) :\n    '''\n    Write a python function to check whether a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n == 1) :\n        return False\n    else :\n        for i in range(2, n) :\n            if (n % i == 0) :\n                return False\n        return True\ndef prime_factors(n) : \n    '''\n    Write a python function to find the prime factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 2\n    result = []\n    while(i <= n) :\n        if (n % i == 0) :\n            while (n % i == 0) :\n                n = n / i\n            result.append(i)\n        i += 1\n    return result\ndef is_square(n) :\n    '''\n    Write a python function to check whether the number is a perfect square or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    while (n > 1) :\n        i = int(math.sqrt(n))\n        if (i * i == n) :\n            return True\n        n -= 1\n    return False\ndef number_of_divisors(n) : \n    '''\n    Write a python function to find the number of divisors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n + 1) :\n        if (n % i == 0) :\n            count += 1\n    return count\ndef is_perfect(n) : \n    '''\n    Write a python function to check whether a number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    sum = 0\n    while (i <= n) :\n        if (n % i == 0) :\n            sum += i\n        i += 1\n    if (n == sum) :\n        return True\n    return False\ndef smallest_divisor(n) :\n    '''\n    Write a python function to find the smallest divisor of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    while (i <= n) :\n        if (n % i == 0) :\n            return i\n        i += 1\n    return n\ndef smallest_divisor_lcm(n,m) :\n    '''\n    Write a python function to find the least common multiple of two numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n > m) :\n        return smallest_divisor(m) * smallest_divisor(n)\n    return smallest_divisor(n) * smallest_divisor(m)\ndef largest_divisor(n) :\n    '''\n    Write a python function to find the largest divisor of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    while (i <= n) :\n        if (n % i == 0) :\n            return i\n        i += 1\n    return n\ndef largest_prime_factor(n) : \n    '''\n    Write a python function to find the largest prime factor of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 2\n    while(i < n) :\n        if (n % i == 0) :\n            while (n % i == 0) :\n                n = n / i\n            return i\n        i += 1\n    return n\ndef is_power(x, y) :\n    '''\n    Write a python function to check whether a number is a power of another number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return x == y**(1/2)\ndef is_palindrome(n) :\n    '''\n    Write a python function to check whether a number is a palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    s = str(n)\n    if (s == s[::-1]) :\n        return True\n    return False\ndef product_sum(n, k) :\n    '''\n    Write a python function to calculate the product sum of N numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    i = 0\n    while(i <= k) :\n        count = count + i\n        i += 1\n    return count\ndef sum_of_squares(n) : \n    '''\n    Write a python function to find the sum of squares of a range of numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    s = 0\n    i = 0\n    while (i <= n) :\n        s = s + i*i\n        i += 1\n    return s\ndef sum_of_squares_series(n) : \n    '''\n    Write a python function to find the sum of squares of a range of numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    s = 0\n    i = 1\n    while (i <= n) :\n        s = s + i*i\n        i += 1\n    return s\ndef factorial(n) : \n    '''\n    Write a python function to find the factorial of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n == 0) :\n        return 1\n    return n * factorial(n-1)\ndef factorial_rec(n) : \n    '''\n    Write a python function to find the factorial of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n == 0) :\n        return 1\n    return n * factorial_rec(n-1)\ndef sum_of_series(n, k) : \n    '''\n    Write a python function to find the sum of N numbers in a series. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    i = 1\n    s = 0\n    while (i <= k) :\n        s = s + i\n        i += 1\n    return s\ndef sum_of_series_rec(n, k) : \n    '''\n    Write a python function to find the sum of N numbers in a series. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (k == 0) :\n        return 0\n    if (n == 0) :\n        return 0\n    if (k == n) :\n        return n\n    return sum_of_series_rec(n-1, k) + "
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n) : \n        if n % i == 0: \n            count = count + 1\n    if count % 2 == 0 : \n        return True\n    else : \n        return False \ndef is_prime(n) : \n    '''\n    Write a python function to check whether the number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n <= 1 : \n        return False\n    if n == 2 : \n        return True\n    if n > 2 and n % 2 == 0 : \n        return False\n    for i in range(3,int(math.sqrt(n))+1,2) : \n        if n % i == 0 : \n            return False\n    return True \ndef sum_of_divisors(n) : \n    '''\n    Write a python function to sum of all the divisors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 1\n    for i in range(2,int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            count = count + i + n // i\n            count = count - i + n // i\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n) : \n        if (n % i == 0) : \n            count += 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1 :\n        return 0\n    else :\n        return n + count_divisors(n - 1)\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    def divisors(n):\n        if n == 1:\n            return 1\n        else:\n            count = 1\n            for i in range(2, int(math.sqrt(n)) + 1):\n                if n % i == 0:\n                    count += 1\n            if n % 2 == 0:\n                count -= 1\n            return count\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            odd_sum = odd_sum + arr[j]\n    return odd_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if not arr:\n        return -1\n    \n    odd_sum = 0\n    length = len(arr)\n    for i in range(1, length):\n        odd_sum += arr[i - 1] * (length - i)\n    \n    return odd_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if not arr:\n        return 0\n    sum_odd_len = 0\n    n = len(arr)\n    for i in range(0, n, 2):\n        sum_odd_len += sum(arr[i:i + 2])\n    return sum_odd_len\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (j - i) % 2 == 1:\n                result += arr[i:j+1]\n                print(result)\n    return result\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Solution using naive approach\n    sum_odd_length_subarray = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if(j - i == 1):\n                sum_odd_length_subarray += arr[i]\n            else:\n                pass\n    return sum_odd_length_subarray\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total_sum = 0\n    for length in range(len(arr)-1):\n        if length % 2!= 0:\n            total_sum += arr[length]\n    return total_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    #   O(n*k)\n    arr_len = len(arr)\n    sum_odd_length = 0\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum=0\n    for i in range(len(arr)):\n        odd_sum+=sum(arr[i:i+2])\n    return odd_sum\n        \n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length_sum = 0\n    for i in range(0, len(arr)):\n        for j in range(i, len(arr)):\n            odd_length_sum += arr[j]\n    return odd_length_sum\n    \n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Check for edge cases\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    pass\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #print(\"rgb_to_hsv(r, g, b): \",r, g, b)\n    if not all([isinstance(r, int), isinstance(g, int), isinstance(b, int)]):\n        raise ValueError(\"Invalid input\")\n    r, g, b = map(lambda x: min(255, max(0, x)), (r, g, b))\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r - g) / df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df / mx\n    v = mx\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # start with the maximum value\n    max_val = max(r, g, b)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # convert rgb to hsv\n    r, g, b = r/255, g/255, b/255\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = 60 * (((g-b)/df) % 6)\n    elif mx == g:\n        h = 60 * (((b-r)/df) + 2)\n    else:\n        h = 60 * (((r-g)/df) + 4)\n    \n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255, g/255, b/255\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    delta = max_color - min_color\n    if delta == 0:\n        h = 0\n    elif max_color == r:\n        h = (60 * ((g-b)/delta) + 360) % 360\n    elif max_color == g:\n        h = (60 * ((b-r)/delta) + 120) % 360\n    else:\n        h = (60 * ((r-g)/delta) + 240) % 360\n    s = delta / max_color\n    v = max_color\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # calculate maximum value\n    max_value = max(r, g, b)\n    \n    # calculate minimum value\n    min_value = min(r, g, b)\n    \n    # calculate delta\n    delta = max_value - min_value\n    \n    # calculate saturation\n    saturation = 0\n    \n    if delta == 0:\n        h = 0\n        s = 0\n    else:\n        # calculate hue\n        if r == max_value:\n            h = (60 * (((g - b) / delta) % 6))\n        elif g == max_value:\n            h = (60 * (((b - r) / delta) + 2))\n        else:\n            h = (60 * (((r - g) / delta) + 4))\n        \n        # calculate chroma\n        s = (delta / max_value)\n        \n        # convert to hsv\n        h = h / 360\n        s = s / 255\n        v = max_value / 255\n        \n        return (h, s, v)\n    \n    \n    \n    \n    # define function\n    def get_rgb_hsv(r,g,b):\n        return rgb_to_hsv(r, g, b)\n    \n    return get_rgb_hsv(r,g,b)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Calculate maximum value\n    mx = max(r, g, b)\n    # Calculate minimum value\n    mn = min(r, g, b)\n    # Calculate delta\n    delta = mx-mn\n    # Calculate hsv value\n    if delta == 0:\n        h = 0\n    else:\n        if mx == r:\n            h = ((g-b)/delta)*60\n        if mx == g:\n            h = ((b-r)/delta+2)*60\n        if mx == b:\n            h = ((r-g)/delta+4)*60\n    # Calculate s value\n    if mx == 0:\n        s = 0\n    else:\n        s = (delta/mx)*100\n    # Calculate v value\n    v = mx*100\n    # Return hsv value\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    min_color = (min(r, g, b),)\n    max_color = (max(r, g, b),)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #initialize the variables\n    min_v = 0\n    max_v = 0\n    min_s = 0\n    max_s = 0\n    min_v = min(min(r, g, b), min_v)\n    max_v = max(max(r, g, b), max_v)\n    var_v = max_v - min_v\n    if var_v == 0:\n        max_s = 0\n        min_s = 0\n    else:\n        max_s = max_v / var_v\n        min_s = min_v / var_v\n    if max_s == 0:\n        max_h = 0\n        min_h = 0\n    else:\n        max_h = (max_v - min_v) / max_s\n        min_h = (max_v - min_v) / min_s\n    if max_h == 0:\n        max_h = 0\n        min_h = 0\n    else:\n        max_h = max_h / (max_v / 255)\n        min_h = min_h / (max_v / 255)\n    return [round(max_h*360,2), round(min_s*100,2), round(max_s*100,2)]\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in list1:\n        if (i%2 == 0):\n            even.append(i)\n        else:\n            odd.append(i)\n    return (even[0]*odd[0], even[1]*odd[1])\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n    for i in range(0,len(list1)):\n        if list1[i]%2 == 0:\n            even = even * list1[i]\n        else:\n            odd = odd * list1[i]\n    return even, odd\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_prod, odd_prod = 1, 1\n    for i in list1:\n        if i % 2 == 0:\n            even_prod *= i\n        else:\n            odd_prod *= i\n    return even_prod, odd_prod\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_prod = 0\n    odd_prod = 0\n    \n    for i in list1:\n        if i%2==0:\n            even_prod = even_prod + i\n        else:\n            odd_prod = odd_prod + i\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product_even = 1\n    product_odd = 1\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            product_even *= list1[i]\n        else:\n            product_odd *= list1[i]\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_no = list1[::2]\n    odd_no = list1[1::2]\n    product = 0\n    for i in range(len(even_no)):\n        product = product + even_no[i] * odd_no[i]\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in range(len(list1)):\n        if i%2 == 0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    result = 1\n    for i in range(len(even)):\n        result *= even[i]\n    for i in range(len(odd)):\n        result *= odd[i]\n    return result\n    \nlist1 = list(map(int,input(\"Enter the list elements: \").split()))\nprint(mul_even_odd(list1))\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for i in list1:\n        if i%2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    print(f\"even_list = {even_list} \\nodd_list = {odd_list}\")\n    even_product = 1\n    odd_product = 1\n    for i in even_list:\n        even_product *= i\n    for i in odd_list:\n        odd_product *= i\n    print(f\"Even product = {even_product}\")\n    print(f\"Odd product = {odd_product}\")\n    final_product = even_product*odd_product\n    return final_product\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    \n    even_list = []\n    odd_list = []\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    odd = 0\n    even = 1\n    product_odd_even = 0\n    for i in range(0,len(list1)):\n        if list1[i]%2 == 0:\n            product_odd_even += list1[i]\n            even = even * list1[i]\n        else:\n            odd = odd * list1[i]\n            \n    return product_odd_even, even, odd\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split()))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_str = test_str.strip('()').split(',')\n    res = []\n    for i in tuple_str:\n        res.append(int(i))\n    return tuple(res)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return (int(item) for item in test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.replace(' ','')\n    test_str = test_str.replace('-',' -')\n    test_str = test_str.replace('_',' -')\n    test_str = test_str.replace(':','')\n    if test_str[-1] == ',':\n        test_str = test_str[:-1]\n    return tuple(map(int, test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return eval(test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int,test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str_list = test_str.split(',')\n    test_list = list(map(int, test_str_list))\n    return tuple(test_list)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.replace('(', '')\n    test_str = test_str.replace(')', '')\n    test_str = test_str.replace(',', '')\n    test_str = test_str.strip()\n    return tuple(map(int, test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if ',' in test_str:\n        return tuple(int(num) for num in test_str.split(','))\n    else:\n        return tuple(int(num) for num in test_str.split())\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return eval(test_str)\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if not a:\n        return 1\n    i = bisect.bisect_left(a, x)\n    if a[i-1] <= x:\n        return i\n    else:\n        return i-1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if a[0]>x:\n        return 0\n    else:\n        return bisect.bisect_right(a,x)\n    \ndef left_insertion(a, x):\n    if a[-1]<x:\n        return len(a)\n    else:\n        return bisect.bisect_left(a,x)\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l= bisect.bisect_left(a,x)\n    if l == 0 or x < a[l-1]:\n        return l\n    else:\n        return l-1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # check if the key is in the list\n    # return the index where key is inserted\n    if len(a) == 0:\n        return 0\n    if x <= a[0]:\n        return 0\n    if x > a[-1]:\n        return len(a)\n    # else, check for the indices where x lies between two elements\n    # return the leftmost index that satisfies x between the leftmost two elements\n    # for every index i, check if x is between a[i] and a[i+1]\n    l = bisect.bisect_left(a, x)\n    if x == a[l - 1]:\n        return l\n    else:\n        return l + 1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = 0\n    r = len(a)-1\n    while l <= r:\n        mid = l + (r - l) // 2\n        if x > a[mid]:\n            l = mid + 1\n        elif x < a[mid]:\n            r = mid - 1\n        else:\n            return mid\n    return l\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a) or a[i] == x:\n        return i\n    else:\n        return i + 1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0:\n        return 0\n    index = bisect.bisect_left(a, x)\n    if index == len(a) or a[index] == x:\n        return index\n    else:\n        return index+1\ndef find_sum(a,x):\n    '''\n    Write a function to calculate the sum of the numbers in a list.\n    '''\n    if len(a) == 0:\n        return 0\n    index = bisect.bisect_left(a, x)\n    if index == 0 or a[index] == x:\n        return a[index]\n    else:\n        return a[index] + find_sum(a[index+1:], x)\ndef find_sum_index(a,x):\n    '''\n    Write a function to calculate the sum of the numbers in a list.\n    '''\n    if len(a) == 0:\n        return -1\n    index = bisect.bisect_left(a, x)\n    if index == len(a) or a[index] == x:\n        return index\n    else:\n        return index+find_sum_index(a[index+1:],x)\ndef find_count(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a list.\n    '''\n    if len(a) == 0:\n        return 0\n    index = bisect.bisect_left(a, x)\n    if index == 0 or a[index] == x:\n        return 1\n    else:\n        return find_count(a[index+1:],x) + find_count(a[:index],x)\ndef find_count_index(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a list.\n    '''\n    if len(a) == 0:\n        return -1\n    index = bisect.bisect_left(a, x)\n    if index == len(a) or a[index] == x:\n        return 1\n    else:\n        return 1 + find_count_index(a[index+1:], x)\ndef find_max(a):\n    '''\n    Write a function to find the maximum value in a list.\n    '''\n    if len(a) == 0:\n        return 0\n    max_value = a[0]\n    for i in range(1,len(a)):\n        if a[i] > max_value:\n            max_value = a[i]\n    return max_value\ndef find_max_index(a):\n    '''\n    Write a function to find the maximum value in a list.\n    '''\n    if len(a) == 0:\n        return -1\n    max_value = a[0]\n    for i in range(1,len(a)):\n        if a[i] > max_value:\n            max_value = a[i]\n    return a.index(max_value)\ndef find_min(a):\n    '''\n    Write a function to find the minimum value in a list.\n    '''\n    if len(a) == 0:\n        return 0\n    min_value = a[0]\n    for i in range(1,len(a)):\n        if a[i] < min_value:\n            min_value = a[i]\n    return min_value\ndef find_min_index(a):\n    '''\n    Write a function to find the minimum value in a list.\n    '''\n    if len(a) == 0:\n        return -1\n    min_value = a[0]\n    for i in range(1,len(a)):\n        if a[i] < min_value:\n            min_value = a[i]\n    return a.index(min_value)\ndef find_duplicate(a):\n    '''\n    Write a function to find the duplicate value in a list.\n    '''\n    if len(a) == 0:\n        return 0\n    for i in range(len(a)):\n        if a[i] < 0:\n            return a[i]\n    return 0\ndef find_duplicate_index(a):\n    '''\n    Write a function to find the duplicate value in a list.\n    '''\n    if len(a) == 0:\n        return -1\n    for i in range(len(a)):\n        if a[i] < 0:\n            return i\n    return -1\ndef is_sorted(a):\n    '''\n    Write a function to check whether the array is sorted or not.\n    '''\n    if len(a) == 0:\n        return True\n    for i in range(len(a)-1):\n        if a[i] > a[i+1]:\n            return False\n    return True\ndef find_middle(a):\n    '''\n    Write a function to find the middle element of a sorted array.\n    '''\n    if len(a) == 0:\n        return 0\n    if len(a) % 2 == 1:\n        return a[len(a)//2]\n    return (a[len(a)//2] + a[len(a)//2-1])/2\ndef find_middle_index(a):\n    '''\n    Write a function to find the middle element of a sorted array.\n    '''\n    if len(a) == 0:\n        return -1\n    if len(a) % 2 == 1:\n        return a[len(a)//2]\n    return (a[len(a)//2] + a[len(a)//2-1])/2\ndef min_2(a):\n    '''\n    Write a function to find the minimum element in an array.\n    '''\n    if len(a) == 0:\n        return 0\n    min_element = a[0]\n    for i in range(1,len(a)):\n        if a[i] < min_element:\n            min_element = a[i]\n    return min_element\ndef max_2(a):\n    '''\n    Write a function to find the maximum element in an array.\n    '''\n    if len(a) == 0:\n        return 0\n    max_element = a[0]\n    for i in range(1,len(a)):\n        if a[i] > max_element:\n            max_element = a[i]\n    return max_element\ndef min_2_index(a):\n    '''\n    Write a function to find the minimum element in an array.\n    '''\n    if len(a) == 0:\n        return -1\n    min_element = a[0]\n    for i in range(1,len(a)):\n        if a[i] < min_element:\n            min_element = a[i]\n    return a.index(min_element)\ndef max_2_index(a):\n    '''\n    Write a function to find the maximum element in an array.\n    '''\n    if len(a) == 0:\n        return -1\n    max_element = a[0]\n    for i in range(1,len(a)):\n        if a[i] > max_element:\n            max_element = a[i]\n    return a.index(max_element)\ndef find_middle_two(a):\n    '''\n    Write a function to find the middle element of an array.\n    '''\n    if len(a) == 0:\n        return 0\n    middle = len(a)//2\n    if len(a) % 2 == 0:\n        return (a[middle] + a[middle-1])/2\n    return a[middle]\ndef find_middle_two_index(a):\n    '''\n    Write a function to find the middle element of an array.\n    '''\n    if len(a) == 0:\n        return -1\n    middle = len(a)//2\n    if len(a) % 2 == 0:\n        return (a[middle] + a[middle-1])/2\n    return a[middle]\ndef sum_list(a):\n    '''\n    Write a function to find the sum of all numbers in an array.\n    '''\n    if len(a) == 0:\n        return 0\n    total = 0\n    for i in range(len(a)):\n        total = total + a["
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if not a:\n        return -1\n    index = bisect.bisect_right(a, x)\n    if index == 0:\n        return 0\n    return index\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    a.insert(i, x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return i + 1\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    p = re.compile(r'ab+b')\n    matches = p.findall(text)\n    return matches\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pat = r'ab*b'\n    if re.match(pat, text):\n        print('Match')\n    else:\n        print('No Match')\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if text.find('ab') >= 0 and text.find('abb') >= 0 and text.find('abab') < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    \n    pat = re.compile(\"ab{3}\")\n    \n    if(pat.search(text)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.match(r\"a{3}b\", text)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.match(r'^a\\bbb', text)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if text.count('ab') == 3:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    \n    #Regex version 1.\n    #match = re.match(r'ab*b*b', text)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if text.find('ab') > 0 and text.find('ab') < len(text)-2:\n        return True\n    else:\n        return False\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by two 'b'.\n    '''\n    if text.find('ab') > 0 and text.find('ab') < len(text)-2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab+')\n    \n    if re.search(pattern, text)!= None:\n        print('Found string')\n    else:\n        print('No match found')\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab*')\n    \n    if re.search(pattern, text)!= None:\n        print('Found string')\n    else:\n        print('No match found')\n    \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    \n    if re.search(pattern, text)!= None:\n        print('Found string')\n    else:\n        print('No match found')\n    \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3,5}')\n    \n    if re.search(pattern, text)!= None:\n        print('Found string')\n    else:\n        print('No match found')\n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}')\n    \n    if re.search(pattern, text)!= None:\n        print('Found string')\n    else:\n        print('No match found')\n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    \n    if re.search(pattern, text)!= None:\n        print('Found string')\n    else:\n        print('No match found')\n    \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}?')\n    \n    if re.search(pattern, text)!= None:\n        print('Found string')\n    else:\n        print('No match found')\n    \ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}?')\n    \n    if re.search(pattern, text)!= None:\n        print('Found string')\n    else:\n        print('No match found')\n    \ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}?')\n    \n    if re.search(pattern, text)!= None:\n        print('Found string')\n    else:\n        print('No match found')\n    \ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}?')\n    \n    if re.search(pattern, text)!= None:\n        print('Found string')\n    else:\n        print('No match found')\n    \ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}?')\n    \n    if re.search(pattern, text)!= None:\n        print('Found string')\n    else:\n        print('No match found')\n    \ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}?')\n    \n    if re.search(pattern, text)!= None:\n        print('Found string')\n    else:\n        print('No match found')\n    \ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}?')\n    \n    if re.search(pattern, text)!= None:\n        print('Found string')\n    else:\n        print('No match found')\n    \ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}?')\n    \n    if re.search(pattern, text)!= None:\n        print('Found string')\n    else:\n        print('No match found')\n    \ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}?')\n    \n    if re.search(pattern, text)!= None:\n        print('Found string')\n    else:\n        print('No match found')\n    \ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}?')\n    \n    if re.search(pattern, text)!= None:\n        print('Found string')\n    else:\n        print('No match found')\n    \ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}?')\n    \n    if re.search(pattern, text)!= None:\n        print('Found string')\n    else:\n        print('No match found')\n    \ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}?')\n    \n    if re.search(pattern, text)!= None:\n        print('Found string')\n    else:\n        print('No match found')\n    \ndef text_match_twentyone(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}?')\n    \n    if re.search(pattern, text)!= None:\n        print('Found string')\n    else:\n        print('No match found')\n    \ndef text_match_twentytwo(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}?')\n    \n    if re.search(pattern, text)!= None:\n        print('Found string')\n    else:\n        print('No match found')\n    \ndef text_match_twentythree(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}?')\n    \n    if re.search(pattern, text)!= None:\n        print('Found string')\n    else:\n        print('No match found')\n    \ndef text_match_twentyfour(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3,}?')\n    \n    if re.search(pattern, text)!= None:\n        print('Found string')\n    else:\n        print('No match found')\n    \ndef text_match_twentyfive(text):\n    '''\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple = ()\n    for item in test_list:\n        tuple = tuple + (item,)\n    tuple = tuple + (test_str,)\n    return tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Your code here\n    new_tuple = (test_str, test_list)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str + test_list)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list), test_str\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # new_tuple(['a', 'b', 'c'], 'abc')\n    # Output: ('a', 'b', 'c')\n    # Output: ('c', 'b', 'a')\n    # Output: ('b', 'c', 'a')\n    # Output: ('a', 'c', 'b')\n    # Output: ('c', 'a', 'b')\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if len(test_list)==0:\n        return tuple()\n    elif len(test_list)==1:\n        return (test_list[0],)\n    return tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_tuple = ()\n    test_list = test_list\n    test_str = test_str\n    for i in test_list:\n        test_tuple = test_tuple + (i, )\n    for i in range(len(test_str)):\n        test_tuple = test_tuple + (test_str[i], )\n    return test_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list)\n    new_tuple = tuple(test_str)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # TODO: Write your solution below\n    #  populate the new_tuple variable with the appropriate values\n    #  for the new tuple.\n    new_tuple = ()\n    return new_tuple\n    pass\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return len(list(filter(lambda x: x%2 == 0, nums))) == 0\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    print(nums)\n    n = len(nums)\n    for i in range(n):\n        if i % 2 == 0:\n            if nums[i] % 2 == 1:\n                return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    odds = []\n    for i in range(0,len(nums)):\n        if i%2==0 and nums[i]%2 == 0:\n            odds.append(i)\n    print(odds)\n    return odds\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # for i in range(0,len(nums)):\n    #     if nums[i]%2 == 0:\n    #         print(nums[i]%2 == 0)\n    for i in range(0,len(nums)):\n        if nums[i]%2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    assert nums, 'nums cannot be an empty list.'\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True\n    \nassert even_position([1,2,3,4,5,6,7,8,9]) == True, 'Wrong output'\nassert even_position([1,2,3,4,5,6]) == False, 'Wrong output'\nassert even_position([1,3,5,7]) == True, 'Wrong output'\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(n % 2 == 0 for i, n in enumerate(nums) if i % 2 == 0)\n    \n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_pos=[]\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            even_pos.append(nums[i])\n    return even_pos\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    i = 0\n    while i < len(nums):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n        i += 1\n    return True\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup.remove(())\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    res = ()\n    for i in test_tup:\n        if type(i) is tuple:\n            res = res + i\n        else:\n            res = res + (i,)\n    return res"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return tuple([num for num in test_tup if num is not None])\n    return test_tup\n    "
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_list = list(test_tup)\n    # print(test_list)\n    for i in range(len(test_list)-1):\n        if(test_list[i] == test_list[i+1]):\n            test_list.remove(test_list[i])\n    return tuple(test_list)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if len(test_tup)==0:\n        return(test_tup)\n    elif len(test_tup)==1:\n        return(test_tup[0])\n    else:\n        return(test_tup[:1]+(remove_nested(test_tup[1:]),))\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return (test_tup[0],) + test_tup[2:]\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    \n    return [x for x in test_tup if x!=(] and x!=()) ]\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[0]\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_list = list(test_tup)\n    for i in test_list:\n        if isinstance(i, tuple):\n            test_list.remove(i)\n    return tuple(test_list)\n    "
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    while type(test_tup) == tuple:\n        test_tup = test_tup[1]\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    #input_list= [1,2,3,4,5,6,7,8,9,10]\n    count=0\n    for i in input_list:\n        if type(i)==list:\n            count+=1\n    print(\"Number of lists in the list:\", count)\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # your code here\n    return 0\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    number_of_list = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) == list:\n            number_of_list += 1\n    return number_of_list\n    \n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    i=0\n    for i in range(len(input_list)):\n        if type(input_list[i])==list:\n            i+=1\n    return i\n    \n    \n    \n    "
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return input_list.count(list)\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # number of lists\n    num_lists = int(input_list)\n    # number of lists in a given list\n    num_lists_in_a_given_list = 0\n    # total number of lists\n    total_num_lists = 0\n    # no of lists in total\n    print(\"Total no. of lists = \", num_lists)\n    # iterate through each list in the given number of lists\n    for i in range(num_lists):\n        # if list\n        if(isinstance(input_list[i], list)):\n            # add 1 to the total no. of lists\n            total_num_lists += 1\n            # add 1 to the total no. of lists in a given list\n            num_lists_in_a_given_list += 1\n    print(\"Total no. of lists in a given list = \", num_lists_in_a_given_list)\n    print(\"Total no. of lists = \", total_num_lists)\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i=0\n    j=len(arr)-1\n    while i<j:\n        mid=(i+j)//2\n        if x<arr[mid]:\n            j=mid-1\n        else:\n            i=mid+1\n    return i\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if arr==[]:\n        return -1\n    else:\n        left,right=0,len(arr)-1\n        mid=(left+right)//2\n        if arr[mid]==x:\n            return mid\n        elif arr[mid]>x:\n            return last(arr[:mid],x)\n        elif arr[mid]<x:\n            return last(arr[mid+1:],x)\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr)-1\n    while(low<=high):\n        mid = low + (high - low) // 2\n        if arr[mid] == x:\n            if mid == len(arr)-1 or arr[mid+1]!= x:\n                return mid\n            else:\n                high = mid -1\n        elif arr[mid] > x:\n            high = mid -1\n        else:\n            low = mid + 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    if arr[-1]==x:\n        return len(arr)-1\n    if arr[0]==x:\n        return 0\n    low=0\n    high=len(arr)-1\n    while low<=high:\n        mid=low+(high-low)//2\n        if x>arr[mid]:\n            low=mid+1\n        else:\n            high=mid-1\n    if x>arr[mid]:\n        mid+=1\n    if mid==high:\n        return mid\n    return mid-1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return -(arr.index(x)+1)\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    left = 0\n    right = n-1\n    while left < right:\n        mid = (left+right)//2\n        if arr[mid] == x:\n            if mid == n-1:\n                return mid\n            elif arr[mid+1] == x:\n                right = mid\n            else:\n                return mid\n        elif arr[mid] > x:\n            right = mid\n        else:\n            left = mid + 1\n    return -1\ndef first(arr,x):\n    '''\n    Write a python function to find the first position of an element in a sorted array.\n    '''\n    n = len(arr)\n    left = 0\n    right = n-1\n    while left <= right:\n        mid = (left+right)//2\n        if arr[mid] == x:\n            if mid == 0:\n                return mid\n            elif arr[mid-1] == x:\n                left = mid\n            else:\n                return mid\n        elif arr[mid] > x:\n            right = mid\n        else:\n            left = mid + 1\n    return -1\ndef count(arr,x):\n    '''\n    Write a python function to count the occurrences of an element in a sorted array.\n    '''\n    n = len(arr)\n    left = 0\n    right = n-1\n    occ = 0\n    while left <= right:\n        mid = (left+right)//2\n        if arr[mid] == x:\n            occ = occ + 1\n            if mid == n-1:\n                return occ\n            elif arr[mid+1] == x:\n                occ = occ - 1\n                right = mid\n            else:\n                left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return occ\ndef search(arr,l,r,x):\n    '''\n    Write a python function to search an element in a sorted array.\n    '''\n    if r >= l:\n        mid = (l+r)//2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return search(arr,l,mid-1,x)\n        else:\n            return search(arr,mid+1,r,x)\n    else:\n        return -1\ndef twoPointer(arr,x):\n    '''\n    Write a python function to find the first and last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    left = 0\n    right = n-1\n    while left <= right:\n        mid = (left+right)//2\n        if arr[mid] == x:\n            if mid == n-1:\n                return mid\n            elif arr[mid+1] == x:\n                right = mid\n            else:\n                return mid\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\ndef range(arr,x):\n    '''\n    Write a python function to find the first position of an element in a sorted array.\n    '''\n    n = len(arr)\n    left = 0\n    right = n-1\n    while left < right:\n        mid = (left+right)//2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            right = mid\n        else:\n            left = mid + 1\n    return -1\ndef range_rec(arr,x,left,right,n):\n    '''\n    Write a python function to find the first position of an element in a sorted array.\n    '''\n    if left > right:\n        return -1\n    mid = (left+right)//2\n    if arr[mid] == x:\n        return mid\n    elif arr[mid] > x:\n        if mid == n:\n            return -1\n        return range_rec(arr,x,left,mid-1,n)\n    else:\n        return range_rec(arr,x,mid+1,right,n)\ndef range_2(arr,x,left,right,n):\n    '''\n    Write a python function to find the first position of an element in a sorted array.\n    '''\n    if left > right:\n        return -1\n    mid = (left+right)//2\n    if arr[mid] == x:\n        if mid == n:\n            return mid\n        else:\n            return range_2(arr,x,mid+1,right,n)\n    elif arr[mid] > x:\n        return range_2(arr,x,left,mid-1,n)\n    else:\n        return range_2(arr,x,mid+1,right,n)\ndef median(arr,n):\n    '''\n    Write a python function to find the median of a given array.\n    '''\n    arr.sort()\n    median = arr[n//2]\n    return median\ndef median_recursive(arr,n):\n    '''\n    Write a python function to find the median of a given array.\n    '''\n    if n == 0:\n        return -1\n    if n == 1:\n        return arr[0]\n    median = (arr[n//2] + arr[n//2-1])/2\n    if n%2 == 0:\n        return median\n    else:\n        return arr[n//2]\ndef median_2(arr,n):\n    '''\n    Write a python function to find the median of a given array.\n    '''\n    if n == 0:\n        return -1\n    if n == 1:\n        return arr[0]\n    median = (arr[n//2] + arr[n//2-1])/2\n    return median\ndef median_of_medians(arr,n):\n    '''\n    Write a python function to find the median of a given array.\n    '''\n    mid = median_recursive(arr,n)\n    m = n//2\n    return m\ndef median_of_medians_2(arr,n):\n    '''\n    Write a python function to find the median of a given array.\n    '''\n    arr = sorted(arr)\n    while len(arr)!= 0:\n        m = median_2(arr,len(arr))\n        arr = arr[:m] + arr[m+1:]\n    return arr[n//2]\ndef median_of_medians_3(arr,n):\n    '''\n    Write a python function to find the median of a given array.\n    '''\n    arr.sort()\n    n = len(arr)\n    if n == 0:\n        return -1\n    if n == 1:\n        return arr[0]\n    i = 0\n    while i < n:\n        m = (i+n-1)//2\n        if arr[m] == arr[i]:\n            i = i + 1\n        elif arr[m] < arr[i]:\n            i = m + 1\n        else:\n            j = m + 1\n            while arr[j] < arr[i]:\n                j = j + 1\n            tmp = arr[i]\n            arr[i] = arr[j]\n            arr[j] = tmp\n            arr = arr[:m+1] + arr[m+1:j] + arr[m:i] + arr[i+1:]\n    if n % 2 == 1:\n        return arr[n//2]\n    else:\n        return (arr[n//2] + arr[n//2 - 1])/2\ndef merge(arr,l,m,r):\n    '''\n    Write a python function to merge two sorted arrays.\n    '''\n    n = m-l+1\n    m1 = []\n    for i in range(n):\n        m1.append(arr[l+i])\n    i = 0\n    j = 0\n    k = l\n    while k <= r:\n        if i == n:\n            arr[k] = m1[j]\n            j = j + 1\n        elif m1[j] < arr[k]:\n            arr[k] = m1[j]\n            j = j + 1\n        else:\n            arr[k] = arr[k]\n        k = k + 1\n    return arr\ndef merge_"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    #code here\n    flag=0\n    l=0\n    h=len(arr)-1\n    while l<=h:\n        mid=l+(h-l)//2\n        if arr[mid]==x:\n            flag=1\n            break\n        elif arr[mid]>x:\n            h=mid-1\n        else:\n            l=mid+1\n    if flag==1:\n        print(mid)\n    else:\n        print(-1)\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    start = 0\n    end = n-1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1,-1,-1):\n        if arr[i]==x:\n            return i\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    arr = sorted(arr)\n    if len(arr) == 0:\n        return -1\n    else:\n        return arr.index(x,len(arr)-1)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'^a+[^b]*b$'\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = r\"a*b\"\n    if re.match(regex, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(r'a([^b]*b)', text)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r'^a.*b$',text)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.findall(r'a.*?b',text)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[\\w]*b'\n    return re.findall(pattern, text)\n    # findall takes a regular expression and returns a list of all matches\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.match(r'^a.*b$', text)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*?b'\n    pattern = re.compile(pattern)\n    result = pattern.findall(text)\n    return result\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = 'ab'\n    if re.search(pattern, text):\n        print(re.search(pattern, text))\n    else:\n        print('Pattern not found!')\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pat1 = r'^a.*?b$'\n    matches = re.findall(pat1, text)\n    return matches\nprint(text_starta_endb('bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for x in dict:\n        sum += dict[x]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in range(len(dict)):\n        sum += dict[i]\n    return sum\n    \ndef return_sum_2(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in range(len(dict)):\n        sum += dict[i]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum = sum + value\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict:\n        total += dict[i]\n    return total\nprint(return_sum({\"milk\":200, \"eggs\":150, \"flour\":100}))\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    summ = 0\n    for i in dict:\n        summ += dict[i]\n    return summ\n    \ndef return_occur(dict):\n    '''\n    Write function to find the number of items in the given dictionary\n    that are greater than 3.\n    '''\n    count = 0\n    for i in dict:\n        if dict[i] > 3:\n            count += 1\n    return count\n    \ndef return_average(dict):\n    '''\n    Write function to find the average of the given dictionary.\n    '''\n    summ = 0\n    for i in dict:\n        summ += dict[i]\n    return summ / len(dict)\n    \ndef return_max(dict):\n    '''\n    Write function to find the maximum value from the given dictionary.\n    '''\n    maximum = -1\n    for i in dict:\n        if maximum < dict[i]:\n            maximum = dict[i]\n    return maximum\n    \ndef return_minimum(dict):\n    '''\n    Write function to find the minimum value from the given dictionary.\n    '''\n    minimum = 1\n    for i in dict:\n        if minimum > dict[i]:\n            minimum = dict[i]\n    return minimum\n    \ndef return_mode(dict):\n    '''\n    Write function to find the mode value from the given dictionary.\n    '''\n    mode = -1\n    max = 0\n    for i in dict:\n        if dict[i] > max:\n            max = dict[i]\n            mode = i\n    return mode\n    \ndef return_frequency(dict):\n    '''\n    Write function to find the frequency of a given value in the given dictionary.\n    '''\n    frequency = -1\n    for i in dict:\n        if dict[i] == 2:\n            frequency += 1\n    return frequency\n    \ndef return_median(dict):\n    '''\n    Write function to find the median value from the given dictionary.\n    '''\n    dict_sorted = sorted(dict.keys())\n    median = dict_sorted[len(dict_sorted) // 2]\n    return median\n    \ndef return_variance(dict):\n    '''\n    Write function to find the variance of the given dictionary.\n    '''\n    variance = 0\n    mean = return_average(dict)\n    for i in dict:\n        variance += ((dict[i] - mean) ** 2)\n    return variance / len(dict)\n    \ndef return_standard_deviation(dict):\n    '''\n    Write function to find the standard deviation of the given dictionary.\n    '''\n    variance = return_variance(dict)\n    return variance ** 0.5\n    \ndef return_range(dict):\n    '''\n    Write function to find the range value from the given dictionary.\n    '''\n    range = max(dict) - min(dict)\n    return range\n    \ndef return_max_min_occur(dict):\n    '''\n    Write function to find the maximum and minimum value from the given dictionary.\n    '''\n    max_occur = -1\n    min_occur = -1\n    for i in dict:\n        if dict[i] > max_occur:\n            max_occur = dict[i]\n        if dict[i] < min_occur:\n            min_occur = dict[i]\n    return max_occur, min_occur\n    \ndef return_sorted_keys(dict):\n    '''\n    Write function to find the sorted dictionary keys from the given dictionary.\n    '''\n    keys = sorted(dict.keys())\n    return keys\n    \ndef return_sorted_values(dict):\n    '''\n    Write function to find the sorted dictionary values from the given dictionary.\n    '''\n    values = sorted(dict.values())\n    return values\n    \ndef return_sorted_items(dict):\n    '''\n    Write function to find the sorted dictionary items from the given dictionary.\n    '''\n    items = sorted(dict.items())\n    return items\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum = sum + i\n    print('Sum of all items in a dictionary is : ', sum)\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # Your code here\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum\nprint(return_sum({\"a\": 1, \"b\": 2, \"c\": 3}))\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l=int(input(\"enter lower range : \"))\n    r=int(input(\"enter upper range : \"))\n    sum=0\n    for i in range(l,r+1):\n        if i%2!=0:\n            sum=sum+i\n    print(sum)\ndef average(l,r):\n    '''\n    Write a python function to find the average of all natural numbers in the range l and r.\n    '''\n    l=int(input(\"enter lower range : \"))\n    r=int(input(\"enter upper range : \"))\n    sum=0\n    for i in range(l,r+1):\n        sum=sum+i\n    print(sum)\n    average=sum/int(r-l)\n    print(average)\ndef factors(n):\n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    print(\"Enter the number\")\n    n=int(input())\n    factors=[]\n    for i in range(1,n+1):\n        if n%i==0:\n            factors.append(i)\n    print(factors)\ndef fact_number(n):\n    '''\n    Write a python function to find the factorial of a number using recursion.\n    '''\n    def fact(n):\n        if n==1:\n            return 1\n        else:\n            return n*fact(n-1)\n    print(fact(n))\ndef sum_of_series(n):\n    '''\n    Write a python function to find the sum of first n numbers in the series.\n    '''\n    n=int(input(\"enter the range : \"))\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+i\n    print(sum)\ndef prime_factor(n):\n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    print(\"Enter the number\")\n    n=int(input())\n    factors=[]\n    for i in range(1,n+1):\n        if n%i==0:\n            factors.append(i)\n    print(factors)\ndef fact_number_2(n):\n    '''\n    Write a python function to find the factorial of a number using recursion.\n    '''\n    def fact(n):\n        if n==1:\n            return 1\n        else:\n            return n*fact(n-1)\n    print(fact(n))\ndef sum_of_series_2(n):\n    '''\n    Write a python function to find the sum of first n numbers in the series.\n    '''\n    n=int(input(\"enter the range : \"))\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+i\n    print(sum)\ndef prime_factor_2(n):\n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    print(\"Enter the number\")\n    n=int(input())\n    factors=[]\n    for i in range(1,n+1):\n        if n%i==0:\n            factors.append(i)\n    print(factors)\ndef fact_number_3(n):\n    '''\n    Write a python function to find the factorial of a number using recursion.\n    '''\n    def fact(n):\n        if n==1:\n            return 1\n        else:\n            return n*fact(n-1)\n    print(fact(n))\ndef sum_of_series_3(n):\n    '''\n    Write a python function to find the sum of first n numbers in the series.\n    '''\n    n=int(input(\"enter the range : \"))\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+i\n    print(sum)\ndef prime_factor_3(n):\n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    print(\"Enter the number\")\n    n=int(input())\n    factors=[]\n    for i in range(1,n+1):\n        if n%i==0:\n            factors.append(i)\n    print(factors)\ndef fact_number_4(n):\n    '''\n    Write a python function to find the factorial of a number using recursion.\n    '''\n    def fact(n):\n        if n==1:\n            return 1\n        else:\n            return n*fact(n-1)\n    print(fact(n))\ndef sum_of_series_4(n):\n    '''\n    Write a python function to find the sum of first n numbers in the series.\n    '''\n    n=int(input(\"enter the range : \"))\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+i\n    print(sum)\ndef prime_factor_4(n):\n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    print(\"Enter the number\")\n    n=int(input())\n    factors=[]\n    for i in range(1,n+1):\n        if n%i==0:\n            factors.append(i)\n    print(factors)\ndef fact_number_5(n):\n    '''\n    Write a python function to find the factorial of a number using recursion.\n    '''\n    def fact(n):\n        if n==1:\n            return 1\n        else:\n            return n*fact(n-1)\n    print(fact(n))\ndef sum_of_series_5(n):\n    '''\n    Write a python function to find the sum of first n numbers in the series.\n    '''\n    n=int(input(\"enter the range : \"))\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+i\n    print(sum)\ndef prime_factor_5(n):\n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    print(\"Enter the number\")\n    n=int(input())\n    factors=[]\n    for i in range(1,n+1):\n        if n%i==0:\n            factors.append(i)\n    print(factors)\ndef fact_number_6(n):\n    '''\n    Write a python function to find the factorial of a number using recursion.\n    '''\n    def fact(n):\n        if n==1:\n            return 1\n        else:\n            return n*fact(n-1)\n    print(fact(n))\ndef sum_of_series_6(n):\n    '''\n    Write a python function to find the sum of first n numbers in the series.\n    '''\n    n=int(input(\"enter the range : \"))\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+i\n    print(sum)\ndef prime_factor_6(n):\n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    print(\"Enter the number\")\n    n=int(input())\n    factors=[]\n    for i in range(1,n+1):\n        if n%i==0:\n            factors.append(i)\n    print(factors)\ndef fact_number_7(n):\n    '''\n    Write a python function to find the factorial of a number using recursion.\n    '''\n    def fact(n):\n        if n==1:\n            return 1\n        else:\n            return n*fact(n-1)\n    print(fact(n))\ndef sum_of_series_7(n):\n    '''\n    Write a python function to find the sum of first n numbers in the series.\n    '''\n    n=int(input(\"enter the range : \"))\n    sum=0\n    for i in range(1,n+1):\n        sum=sum+i\n    print(sum)\ndef prime_factor_7(n):\n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    print(\"Enter the number\")\n    n=int(input())\n    factors=[]\n    for i in range(1,n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if(n<1):\n        return -1\n    return (n*(n+1))//2\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if i % 2!= 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if (n == 0 or n == 1): \n        return n; \n    else: \n        return n + sum_odd(n - 1); \n  "
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n < 1:\n        print('Must be >= 1')\n        return 0\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odd = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum_odd += i\n    return sum_odd\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    odd = 0\n    if n < 1:\n        return odd\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total_sum = 0\n    while n <= r:\n        if n % 2!= 0:\n            total_sum += n\n        n += 1\n    return total_sum\n    \ndef odd_list(n): \n    '''\n    Write a python function to convert a list of numbers into an odd list and return the new list.\n    '''\n    odd_list = []\n    while n!= 0:\n        odd_list.append(n % 2)\n        n = n//2\n    return odd_list\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n>=1 and n<=100:\n        sum=0\n        for i in range(n+1):\n            if i%2==1:\n                sum=sum+i\n        return sum\n    else:\n        return -1\nprint(sum_odd(0))\nprint(sum_odd(10))\nprint(sum_odd(11))\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(x for x in range(n+1) if x%2!= 0)\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    arr = []\n    for i in range(len(arr)):\n        arr.append(int(input('Enter the element: ')))\n    print(arr)\n    sum = sum(arr)\n    print('The sum of the array is: ',sum)\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr)==1:\n        return arr[0]\n    else:\n        return arr[0] + _sum(arr[1:])\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # Your code here\n    sum = 0 \n    for i in arr: \n        sum = sum + i \n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    res = arr[0]\n    for i in range(1, n):\n        res = res + arr[i]\n    return res\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s = 0\n    for i in range(len(arr)):\n        s += arr[i]\n    return s\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n << d | n >> (32 - d)\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    temp = 0\n    num = n\n    d = d % 32\n    \n    for i in range(32):\n        temp = num & 1\n        num = num >> 1\n        if i == d:\n            temp = temp << 1\n        if temp == 0:\n            temp = temp << 1\n        \n    return (temp | num)\n    "
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (((n << d) | ((n & 0xFFFFFFFF) >> (32 - d))) & 0xFFFFFFFF)\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #n = 2**32 -1\n    n = n >> d\n    n = n << 32\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d = d % 32\n    return (n << d) | (n >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    assert(n>=0 and d>=0)\n    assert(n<=2147483647 and d<=32)\n    mask = 0xffffffff\n    while d!= 0:\n        if d & 1:\n            n = (n << 1) ^ mask\n        d = d >> 1\n        n = n >> 1\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n<<d)|(n>>(32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    print(n)\n    print(d)\n    return ((n << d) | (n >> (32-d))) & 0xFFFFFFFF\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if (d == 0):\n        return n\n    \n    n_shift_left = n << d\n    return n_shift_left | (n >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    temp = n\n    shift = d\n    for i in range(32):\n        if (((temp & 0x01)!= 0):\n            if shift == 0:\n                return (n ^ 0x01)\n            else:\n                shift -= 1\n                temp = (temp << 1) ^ 0x01\n        else:\n            if shift == 0:\n                return (n ^ 0x00)\n            else:\n                shift -= 1\n                temp = (temp << 1) ^ 0x00\n    return temp\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.replace(\"\\n\", \" \")\n    text = text.replace(\"\\t\", \" \")\n    text = text.replace(\"\\r\", \" \")\n    text = text.replace(\" \", \"\")\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    #strips = str.strip()\n    #strips = text.strip()\n    #strips = text.strip().replace(' ','').replace('\\n','').replace('\\t','')\n    #strips = text.strip().replace(' ','').replace('\\n','')\n    #strips = text.strip().replace(' ','').replace('\\n','').replace('\\t','').replace('\\r','').replace('\\f','')\n    #strips = text.strip().replace('\\n','').replace('\\t','').replace('\\r','').replace('\\f','')\n    #strips = text.strip().replace('\\n','').replace('\\t','').replace('\\r','').replace('\\f','').replace('\\b','')\n    #strips = text.strip().replace('\\n','').replace('\\t','').replace('\\r','').replace('\\f','').replace('\\b','').replace(' ','').replace(',','').replace('.','').replace('?','').replace('!','').replace(';','').replace(':','').replace('-','').replace('|','').replace('_','').replace('/','').replace('\"','')\n    #strips = text.strip().replace('\\n','').replace('\\t','').replace('\\r','').replace('\\f','').replace('\\b','').replace(' ','')\n    return re.sub(r'\\s+','',text)\ndef remove_numeric_chars(text):\n    '''\n    Write a function to remove numeric characters from a string.\n    '''\n    # text = str(text)\n    # pattern = re.compile(r'\\d')\n    # text = pattern.sub('',text)\n    # pattern = re.compile(r'\\d+')\n    # text = pattern.sub('',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # pattern = re.compile(r'\\d+')\n    # text = pattern.sub('',text)\n    # text = text.replace(' ','')\n    # pattern = re.compile(r'\\d+')\n    # text = pattern.sub('',text)\n    # text = text.replace(' ','')\n    # pattern = re.compile(r'\\d+')\n    # text = pattern.sub('',text)\n    # text = text.replace(' ','')\n    # pattern = re.compile(r'\\d+')\n    # text = pattern.sub('',text)\n    # pattern = re.compile(r'\\d+')\n    # text = pattern.sub('',text)\n    # pattern = re.compile(r'\\d+')\n    # text = pattern.sub('',text)\n    # pattern = re.compile(r'\\d+')\n    # text = pattern.sub('',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # pattern = re.compile(r'\\d+')\n    # text = pattern.sub('',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = text.replace(' ','')\n    # text = re.sub(r'\\d+','',text)\n    # text = tex"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    \n    # Returns the text without any whitespaces\n    return text.replace(\" \", \"\")\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \",\"\")\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \",\"\")\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if(x == y == z):\n        return \"All integers are equal\"\n    else:\n        return \"No integers are equal\"\n    \n    \nx = 0\ny = 0\nz = 0\nprint(test_three_equal(x,y,z))\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x,y+1):\n        if x == y and x == z:\n            count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y and x==z:\n        return 3\n    elif y==x and y==z:\n        return 3\n    elif z==x and z==y:\n        return 3\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    sum = x + y + z\n    count = 0\n    for i in range(1,sum+1):\n        if x==y==z:\n            count+=1\n    print(count)\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] == z[i]:\n            count += 1\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    \n    count = 0\n    x = x.lower()\n    y = y.lower()\n    z = z.lower()\n    \n    if x == y == z:\n        count = count + 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    num = 0\n    if (x == y == z):\n        num = num + 1\n    return num\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    #x = 20\n    #y = 20\n    #z = 20\n    if(x == y == z):\n        return 3\n    else:\n        return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(1,len(arr)):\n        if arr[i] < arr[i-1]:\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    def rotation_count(arr,low,high):\n        if(low==high):\n            return 0\n        if(high-low<=1):\n            return 1\n        mid = (low+high)//2\n        return rotation_count(arr,low,mid)+rotation_count(arr,mid+1,high)+1\n    return rotation_count(arr,0,len(arr)-1)\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    rotations = 0\n    left = 0\n    right = len(arr)-1\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    # Define the base case\n    base_case = 0\n    \n    # We have to make sure that we are using the right variable\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            base_case += 1\n    return base_case\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    #brute force\n    #n=len(arr)\n    #for i in range(n):\n    #    for j in range(i+1,n):\n    #        if arr[j]<arr[i]:\n    #            return -1\n    #return 1\n    #O(n)\n    n=len(arr)\n    #inversions count\n    inversions=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]>arr[j]:\n                inversions+=1\n    return n*(n-1)//2-inversions\n    #O(nlogn)\n    \n    #def count(arr):\n    #    n=len(arr)\n    #    if n<=1:\n    #        return n\n    #    #count of inversions\n    #    i=0\n    #    j=0\n    #    res=0\n    #    while i<n and j<n:\n    #        if arr[i]<arr[j]:\n    #            res+=j-i\n    #            i+=1\n    #        else:\n    #            j+=1\n    #    return res\n    \n    #O(n^2)\n    #count of inversions\n    #def count(arr):\n    #    n=len(arr)\n    #    if n<=1:\n    #        return n\n    #    count=0\n    #    for i in range(n):\n    #        for j in range(i+1,n):\n    #            if arr[i]>arr[j]:\n    #                count+=1\n    #    return count\n    #O(n)\n    #array of occurences of each element\n    #def count(arr):\n    #    n=len(arr)\n    #    occur=0\n    #    for i in range(n):\n    #        occur+=arr.count(arr[i])\n    #    return occur\n    #O(n^2)\n    #count of inversions\n    #def count(arr):\n    #    n=len(arr)\n    #    if n<=1:\n    #        return n\n    #    count=0\n    #    #storing the occurences of each element\n    #    occur={}\n    #    for i in range(n):\n    #        occur[arr[i]]=occur.get(arr[i],0)+1\n    #    for i in range(n):\n    #        for j in range(i+1,n):\n    #            if arr[i]>arr[j]:\n    #                count+=occur[arr[j]]\n    #    return count\n    #O(n^2)\n    #count of inversions\n    #def count(arr):\n    #    n=len(arr)\n    #    if n<=1:\n    #        return n\n    #    count=0\n    #    #storing the occurences of each element\n    #    occur={}\n    #    for i in range(n):\n    #        occur[arr[i]]=occur.get(arr[i],0)+1\n    #    for i in range(n):\n    #        for j in range(i+1,n):\n    #            if arr[i]>arr[j]:\n    #                count+=occur[arr[j]]\n    #    return count\n    #O(n)\n    #count of inversions\n    #def count(arr):\n    #    n=len(arr)\n    #    if n<=1:\n    #        return n\n    #    count=0\n    #    #storing the occurences of each element\n    #    occur={}\n    #    for i in range(n):\n    #        occur[arr[i]]=occur.get(arr[i],0)+1\n    #    for i in range(n):\n    #        for j in range(i+1,n):\n    #            if arr[i]>arr[j]:\n    #                count+=occur[arr[j]]\n    #    return count\n    #O(n)\n    #count of inversions\n    #def count(arr):\n    #    n=len(arr)\n    #    if n<=1:\n    #        return n\n    #    count=0\n    #    #storing the occurences of each element\n    #    occur={}\n    #    for i in range(n):\n    #        occur[arr[i]]=occur.get(arr[i],0)+1\n    #    for i in range(n):\n    #        for j in range(i+1,n):\n    #            if arr[i]>arr[j]:\n    #                count+=occur[arr[j]]\n    #    return count\n    #O(n^2)\n    #count of inversions\n    #def count(arr):\n    #    n=len(arr)\n    #    if n<=1:\n    #        return n\n    #    count=0\n    #    #storing the occurences of each element\n    #    occur={}\n    #    for i in range(n):\n    #        occur[arr[i]]=occur.get(arr[i],0)+1\n    #    for i in range(n):\n    #        for j in range(i+1,n):\n    #            if arr[i]>arr[j]:\n    #                count+=occur[arr[j]]\n    #    return count\n    #O(n)\n    #count of inversions\n    #def count(arr):\n    #    n=len(arr)\n    #    if n<=1:\n    #        return n\n    #    count=0\n    #    #storing the occurences of each element\n    #    occur={}\n    #    for i in range(n):\n    #        occur[arr[i]]=occur.get(arr[i],0)+1\n    #    for i in range(n):\n    #        for j in range(i+1,n):\n    #            if arr[i]>arr[j]:\n    #                count+=occur[arr[j]]\n    #    return count\n    \n    #O(nlogn)\n    #def count(arr):\n    #    n=len(arr)\n    #    #inversions count\n    #    inversions=0\n    #    for i in range(n):\n    #        for j in range(i+1,n):\n    #            if arr[i]>arr[j]:\n    #                inversions+=1\n    #    return n*(n-1)//2-inversions\n    #O(nlogn)\n    #array of occurences of each element\n    #def count(arr):\n    #    n=len(arr)\n    #    if n<=1:\n    #        return n\n    #    count=0\n    #    occur={}\n    #    for i in range(n):\n    #        occur[arr[i]]=occur.get(arr[i],0)+1\n    #    for i in range(n):\n    #        for j in range(i+1,n):\n    #            if arr[i]>arr[j]:\n    #                count+=occur[arr[j]]\n    #    return count\n    #O(nlogn)\n    #count of inversions\n    #def count(arr):\n    #    n=len(arr)\n    #    if n<=1:\n    #        return n\n    #    count=0\n    #    #storing the occurences of each element\n    #    occur={}\n    #    for i in range(n):\n    #        occur[arr[i]]=occur.get(arr[i],0)+1\n    #    for i in range(n):\n    #        for j in range(i+1,n):\n    #            if arr[i]>arr[j]:\n    #                count+=occur[arr[j]]\n    #    return count\n    #O(n^2)\n    #count of inversions\n    #def count(arr):\n    #    n=len"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    def check_rotation(arr):\n        start_index = 0\n        end_index = len(arr) - 1\n        while (start_index < end_index):\n            if arr[start_index] > arr[end_index]:\n                return False\n            start_index += 1\n            end_index -= 1\n        return True\n    \n    def swap(arr, index1, index2):\n        temp = arr[index1]\n        arr[index1] = arr[index2]\n        arr[index2] = temp\n    \n    def get_count(arr, start_index, end_index):\n        while start_index < end_index:\n            if arr[start_index] > arr[end_index]:\n                swap(arr, start_index, end_index)\n                return get_count(arr, start_index + 1, end_index)\n            start_index += 1\n        return 1\n    \n    if len(arr) == 1:\n        return 0\n    if len(arr) == 2:\n        return 1\n    if check_rotation(arr):\n        return get_count(arr, 0, len(arr) - 1)\n    \n    count = 0\n    for i in range(len(arr)):\n        if i!= len(arr) - 1 and arr[i] > arr[i + 1]:\n            swap(arr, i, i + 1)\n            count += 1\n        #print(arr)\n        if count == 1:\n            return 1\n        count = get_count(arr, 0, len(arr) - 1)\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    if n == 1:\n        return 0\n    count = 0\n    start = 0\n    end = n - 1\n    while start < end:\n        if arr[start] > arr[end]:\n            count += 1\n            temp = arr[start]\n            arr[start] = arr[end]\n            arr[end] = temp\n        start += 1\n        end -= 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    #base condition: 1 element, if it's sorted, then its rotated by 0, else it is rotated by 1\n    if len(arr) == 1:\n        return 0\n    \n    #if it's sorted, then its rotated by 0\n    if arr[0] < arr[1]:\n        return 0\n        \n    count = 1   #to count the number of rotations required\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(1,n):\n        if arr[i-1]>arr[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # number = int(n**0.5)\n    # if number * number == n:\n    #     return True\n    # else:\n    #     return False\n    res = int(n ** 0.5)\n    if res * res == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = int(n**0.5)\n    return x*x == n\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Note: If number is not perfect square\n    # then sqrt(number) - int(sqrt(number))!= 0\n    # if both are same we can skip the sqrt() call\n    # e.g. number = 9 and sqrt(number) = 4\n    return int(n**(0.5))**2 == n\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0 :\n        return False\n    x = n\n    i = 0\n    while (x*x > n) :\n        x = (x*x) / 2\n        i += 1\n    return (x == n)\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # code here\n    return math.sqrt(n) % 1 == 0"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # if (n < 0) : return False;\n    # while (n!= 1) :\n    #     n = (n+1)/2;\n    # return True;\n    \n    # if (n > 1) :\n    #     i = 1\n    #     while (i <= (n / i)) :\n    #         if (i * i == n) :\n    #             return True\n    #         i = i + 1\n    #     return False\n    # else :\n    #     return True\n    \n    # if (n > 1) :\n    #     i = 1\n    #     while (i <= (n / i)) :\n    #         if (i * i == n) :\n    #             return True\n    #         i = i + 1\n    #     return False\n    # else :\n    #     return True\n    \n    # x = 2**n\n    # if x == n :\n    #     return True\n    # else :\n    #     return False\n    \n    # if (n < 0) : return False;\n    # i = 1\n    # s = 1\n    # while (i <= n) :\n    #     s = s + 1\n    #     i = i + 1\n    # return s == n\n    \n    # x = 2**n\n    # if (x == n) :\n    #     return True\n    # else :\n    #     return False\n    \n    # x = n\n    # if (x == 1 or x == 0) : return False\n    # else :\n    #     i = 1\n    #     while (i <= x) :\n    #         if (x % i == 0) :\n    #             return False\n    #         i = i + 1\n    # return True\n    \n    # if (n < 0) : return False;\n    # if (n == 0) : return True;\n    # s = 0;\n    # while (n!= 0) :\n    #     s = s + 1\n    #     n = n / 2;\n    # return s == 2;\n    \n    # if (n < 0) : return False;\n    # if (n == 0) : return True;\n    # s = 0;\n    # while (n!= 0) :\n    #     s = s + 1\n    #     n = n / 2;\n    # return s == 1;\n    \n    # if (n < 0) : return False;\n    # if (n == 0) : return True;\n    # s = 0;\n    # while (n!= 0) :\n    #     s = s + 1\n    #     n = n / 2;\n    # return s == 0;\n    \n    # if (n < 0) : return False;\n    # if (n == 0) : return True;\n    # x = n\n    # i = 1\n    # s = 0\n    # while (i <= x) :\n    #     if (x % i == 0) :\n    #         s = s + 1\n    #     i = i + 1\n    # return s == 2\n    \n    # if (n < 0) : return False;\n    # if (n == 0) : return True;\n    # x = n\n    # i = 1\n    # s = 0\n    # while (i <= x) :\n    #     if (x % i == 0) :\n    #         s = s + 1\n    #     i = i + 1\n    # return s == 1\n    \n    # if (n < 0) : return False;\n    # if (n == 0) : return True;\n    # x = n\n    # i = 1\n    # s = 0\n    # while (i <= x) :\n    #     if (x % i == 0) :\n    #         s = s + 1\n    #     i = i + 1\n    # return s == 0\n    \n    # if (n < 0) : return False;\n    # if (n == 0) : return True;\n    # x = n\n    # i = 1\n    # s = 0\n    # while (i <= x) :\n    #     if (x % i == 0) :\n    #         s = s + 1\n    #     i = i + 1\n    # return s == 1\n    \n    # if (n < 0) : return False;\n    # if (n == 0) : return True;\n    # x = n\n    # i = 1\n    # s = 0\n    # while (i <= x) :\n    #     if (x % i == 0) :\n    #         s = s + 1\n    #     i = i + 1\n    # return s == 2\n    \n    # if (n < 0) : return False;\n    # if (n == 0) : return True;\n    # x = n\n    # i = 1\n    # s = 0\n    # while (i <= x) :\n    #     if (x % i == 0) :\n    #         s = s + 1\n    #     i = i + 1\n    # return s == 1\n    \n    # if (n < 0) : return False;\n    # if (n == 0) : return True;\n    # x = n\n    # i = 1\n    # s = 0\n    # while (i <= x) :\n    #     if (x % i == 0) :\n    #         s = s + 1\n    #     i = i + 1\n    # return s == 2\n    \n    # if (n < 0) : return False;\n    # if (n == 0) : return True;\n    # x = n\n    # i = 1\n    # s = 0\n    # while (i <= x) :\n    #     if (x % i == 0) :\n    #         s = s + 1\n    #     i = i + 1\n    # return s == 1\n    \n    # if (n < 0) : return False;\n    # if (n == 0) : return True;\n    # x = n\n    # i = 1\n    # s = 0\n    # while (i <= x) :\n    #     if (x % i == 0) :\n    #         s = s + 1\n    #     i = i + 1\n    # return s == 2\n    \n    # if (n < 0) : return False;\n    # if (n == 0) : return True;\n    # x = n\n    # i = 1\n    # s = 0\n    # while (i <= x) :\n    #     if (x % i == 0) :\n    #         s = s + 1\n    #     i = i + 1\n    # return s == 1\n    \n    # if (n < 0) : return False;\n    # if (n == 0) : return True;\n    # x = n\n    # i = 1\n    # s = 0\n    # while (i <= x) :\n    #     if (x % i == 0) :\n    #         s = s + 1\n    #     i = i + 1\n    # return s == 2\n    \n    # if (n < 0) : return False;\n    # if (n == 0) : return True;\n    # x = n\n    # i = 1\n    # s = 0\n    # while (i <= x) :\n    #     if (x % i == 0) :\n    #         s = s + 1\n    #     i = i + 1\n    # return s == 1\n    \n    # if (n < 0) : return False;\n    # if (n == 0) : return True;\n    # x = n\n    # i = 1\n    # s = 0\n    # while (i <= x) :\n    #     if (x % i == 0) :\n    #         s = s + 1\n    #     i = i + 1\n    # return s == 2\n    \n    # if (n < 0) : return False;\n    # if (n == 0) : return True;\n    # x = n\n    # i = 1\n    # s = 0\n    # while (i <= x) :\n    #     i"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    #code here\n    if n < 0 :\n        return False\n    sq = int(math.sqrt(n))\n    if sq * sq == n :\n        return True\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if(n <= 0) :\n        return False\n    if(n <= 3) :\n        return True\n    \n    left = 1\n    right = n // 2\n    \n    while(left <= right) :\n        mid = (left + right) // 2\n        if(mid*mid == n) :\n            return True\n        elif(mid*mid < n) :\n            left = mid + 1\n        else :\n            right = mid - 1\n    \n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    is_square = n**.5 == int(n**.5)\n    return is_square\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    \n    # Helper function to get square root\n    def sqrt(n):\n        return n ** 0.5\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    # i can't think of a better solution to this problem\n    if len(arr) == 0:\n        return False\n    \n    num = 1\n    for i in arr:\n        num *= i\n    return num % 2 == 0\n    "
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return False if (sum(arr) % 2 == 1) else True\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return False\n    else:\n        product = 1\n        for i in range(len(arr)):\n            product *= arr[i]\n        return True if product % 2 == 0 else False\n        \n    \n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    for i in arr:\n        if i%2==0:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return 1 if arr[0]*arr[1] == 0 or arr[0]*arr[-1] == 0 else 0\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # # iterate through the list and then calculate the product\n    # product = 1\n    # for num in arr:\n    #     product *= num\n    # if product % 2 == 0:\n    #     return True\n    # else:\n    #     return False\n    # # return product % 2 == 0\n    return sum(arr) % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        return True\n    if arr[0] == 0:\n        return False\n    if arr[0]!= 0 and arr[0]!= 1:\n        if arr[0] % 2 == 0:\n            return True\n        else:\n            return False\n    if arr[0]!= 0 and arr[0]!= 1 and arr[0]!= -1:\n        if arr[0] % 2 == 0:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    count = 0\n    for i in arr:\n        if i%2 == 0:\n            count += 1\n    return count == 1\nprint(is_product_even([2, 3, 4, 8]))\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if isinstance(arr, int) == False:\n        raise TypeError(\"Input must be an integer\")\n    if isinstance(arr, float) == True:\n        raise TypeError(\"Input must be an integer\")\n    if isinstance(arr, list) == False:\n        raise TypeError(\"Input must be a list\")\n    if len(arr) == 0:\n        raise TypeError(\"Input must contain at least one element\")\n    if len(arr) == 1:\n        return True\n    if arr[0]!= 0:\n        if arr[0] < 0:\n            return False\n    for i in range(1, len(arr)):\n        if arr[i] == 0:\n            return False\n        if arr[i] < 0:\n            return False\n        if arr[i] * arr[0]!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return (sum(arr) % 2 == 0)\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    max_sum = -9999999999999999999\n    sum_list = []\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = -sys.maxsize\n    max_sum_list = []\n    for nums in lists:\n        # If list is empty or only contains one element\n        if not nums:\n            return []\n        sum = 0\n        for num in nums:\n            sum += num\n        if sum > max_sum:\n            max_sum = sum\n            max_sum_list = [nums]\n        elif sum == max_sum:\n            max_sum_list.append(nums)\n    return max_sum_list\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    current_sum = lists[0][0]\n    best_sum = current_sum\n    for row in lists:\n        current_sum = current_sum + row[1]\n        if current_sum > best_sum:\n            best_sum = current_sum\n    return best_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return lists\n    else:\n        lists_copy = lists.copy()\n        lists_copy.sort()\n        max_sum = 0\n        max_sum_index = 0\n        for index in range(1,len(lists_copy)):\n            current_sum = lists_copy[index] + lists_copy[index - 1]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_sum_index = index\n        return lists_copy[:max_sum_index + 1]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) <= 1:\n        return lists\n    \n    summ = 0\n    for i in range(len(lists)):\n        summ += lists[i][0]\n    if summ < 0:\n        max_sum = summ\n    else:\n        max_sum = 0\n    \n    for i in range(len(lists)):\n        if summ <= 0:\n            summ = 0\n            lists.pop(i)\n            continue\n        if lists[i][0] < 0:\n            lists[i][0] = 0\n            summ -= lists[i][0]\n            continue\n        if lists[i][0] > summ:\n            lists[i][0] = summ\n            summ = lists[i][0]\n    if summ < 0:\n        lists.pop(0)\n    \n    return lists\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = lists[0]\n    for i in range(1, len(lists)):\n        if max_sum[1] < lists[i][0]:\n            max_sum = lists[i]\n        else:\n            if max_sum[1] < lists[i][1]:\n                max_sum = lists[i]\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize the max_sum_list\n    max_sum_list = []\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    # creating a temporary list to store maximum values\n    max_list = []\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return []\n    if len(lists) == 1:\n        return lists\n    new_lists = []\n    for i in range(len(lists)):\n        if i == 0:\n            new_lists.append(lists[i])\n        elif i == len(lists)-1:\n            new_lists.append(lists[i])\n        else:\n            new_lists.append(lists[i]+lists[i-1])\n    max_sum = 0\n    for i in range(len(new_lists)):\n        if max_sum < new_lists[i]:\n            max_sum = new_lists[i]\n    return new_lists\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    max_sum = -math.inf\n    \n    for i in range(len(lists)):\n        s = 0\n        for j in range(len(lists[i])):\n            s += lists[i][j]\n        if s > max_sum:\n            max_sum = s\n            \n    return max_sum\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    #code here\n    n = len(test_str)\n    res = 0\n    curr = 0\n    for i in range(n):\n        if test_str[i].isupper():\n            curr = 1\n        else:\n            curr = 0\n        res = max(res, curr)\n    return res\n    "
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    curr_count = 0\n    for i in range(len(test_str)):\n        if test_str[i] >= 'A' and test_str[i] <= 'Z':\n            curr_count += 1\n        else:\n            if curr_count > max_count:\n                max_count = curr_count\n            curr_count = 0\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    #print(test_str)\n    #print()\n    \n    test_str = test_str.upper()\n    #print(test_str)\n    #print()\n    \n    maximum_val = -float('inf')\n    maximum_index = -1\n    \n    for i in range(len(test_str)):\n        #print('i =', i)\n        if test_str[i].isalpha() and maximum_val < len(test_str[i]):\n            maximum_index = i\n            maximum_val = len(test_str[i])\n    #print('Maximum val =', maximum_val)\n    #print('Maximum index =', maximum_index)\n    \n    return maximum_index, maximum_val\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    #make a character map\n    map_char = {}\n    #initialize the map\n    for ch in test_str:\n        if ch not in map_char:\n            map_char[ch] = 1\n        else:\n            map_char[ch] = map_char[ch] + 1\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    str_len = len(test_str)\n    for i in range(str_len):\n        if test_str[i] >= 'A' and test_str[i] <= 'Z':\n            count += 1\n        else:\n            count = 0\n        if count > max_count:\n            max_count = count\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    #code here\n    s=0\n    for i in range(len(test_str)):\n        if test_str[i]>=\"A\" and test_str[i]<=\"Z\":\n            s=s+1\n    return s\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run=1\n    for i in range(1,len(test_str)):\n        if test_str[i]==test_str[i-1]:\n            max_run+=1\n        else:\n            max_run=1\n        if max_run>max_run_uppercase.max_run:\n            max_run_uppercase.max_run=max_run\n    return max_run_uppercase.max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    ans = 0\n    for i in range(len(test_str)):\n        if (ord(test_str[i]) >= 97 and ord(test_str[i]) <= 122):\n            if(ans < ord(test_str[i])-96):\n                ans = ord(test_str[i])-96\n    return(ans)\n    \n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run_count = 0\n    # write your solution here\n    for i in range(0, len(test_str)):\n        if test_str[i] >= 'A' and test_str[i] <= 'Z':\n            if run_count < i:\n                run_count = i\n    return run_count\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(test_str):\n        if (test_str[i] == test_str[i+1] and test_str[i]!= test_str[i+2]):\n            count = count + 1\n            i = i + 1\n            continue\n        count = count + 1\n        i = i + 1\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for x in nums:\n        if x % 2!= 0:\n            return x\n    return False\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2==1:\n            return i\n    return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return -1\n    for i in nums:\n        if i % 2!= 0:\n            return i\n    return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2!= 0:\n            return nums[i]\n    return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return 'Not Found'\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num%2!=0:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # list_1 = list(map(int, input().split()))\n    list_1 = nums\n    for i in range(len(list_1)):\n        if i%2!= 0:\n            print(list_1[i])\n            break\n    \ndef prime(n):\n    '''\n    Write a python function prime which accept a number and return True if the number is prime.\n    '''\n    # num = int(input())\n    num = n\n    if num <= 1:\n        return False\n    if num == 2:\n        return True\n    if num%2 == 0:\n        return False\n    for i in range(3, int(num**0.5)+1, 2):\n        if num%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2 == 1:\n            return i\n            break\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return nums[i]\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num%2 == 1:\n            return num\n    return -1\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    \n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    l = 0\n    for tup in test_tup:\n        if tup[0] == K:\n            l = 1\n        else:\n            continue\n    return l\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # base case: if K is 1, just return True\n    if K == 1:\n        return True\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    test_string = \"\"\n    for i in range(len(test_tup)):\n        test_string += str(test_tup[i]) + \" \"\n    test_string += str(K)\n    return test_string in string.split()\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    a,b,c = test_tup\n    if a+b+c == K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    result = False\n    for tup in test_tup:\n        if tup[0] == K:\n            result = True\n            break\n    return result\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) <= K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] == test_tup[1] or test_tup[0] == test_tup[2] or test_tup[1] == test_tup[2]:\n        return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # TODO: implement the function\n    if test_tup in K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return all(a < b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return all([num2 < num1 for (num1, num2) in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    \n    # if test_tup1[i] < test_tup2[i]:\n    #     return True\n    # else:\n    #     return False\n    \n    if test_tup1[0] <= test_tup2[0]:\n        return True\n    else:\n        return False\n    \n    \n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    \n    if (test_tup1[0] > test_tup2[0] or test_tup1[1] > test_tup2[1]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] < test_tup2[i]:\n                return False\n        return True\n    \ndef check_equal(test_tup1, test_tup2):\n    '''\n    Write a function to check if the elements of the 2 tuples are the same\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i]!= test_tup2[i]:\n                return False\n        return True\n    \ndef check_positive(test_tup1):\n    '''\n    Write a function that returns True if the tuple contains all positive numbers, and False otherwise.\n    '''\n    if len(test_tup1) == 0:\n        return True\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] <= 0:\n                return False\n        return True\n        \ndef check_even(test_tup1):\n    '''\n    Write a function that returns True if the tuple contains all even numbers, and False otherwise.\n    '''\n    if len(test_tup1) == 0:\n        return True\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] % 2!= 0:\n                return False\n        return True\n    \ndef check_all(test_tup1, test_tup2):\n    '''\n    Write a function that returns True if both the tuples contain all numbers, and False otherwise.\n    '''\n    if len(test_tup1) == 0 and len(test_tup2) == 0:\n        return True\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] not in test_tup2:\n                return False\n        for j in range(len(test_tup2)):\n            if test_tup2[j] not in test_tup1:\n                return False\n        return True\n        \ndef check_divisible(test_tup1, test_tup2):\n    '''\n    Write a function that returns True if each element of the first tuple is divisible by each element of the second tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] % test_tup2[i]!= 0:\n                return False\n        return True\n    \ndef check_all_smaller(test_tup1, test_tup2):\n    '''\n    Write a function that returns True if all elements of the first tuple are smaller than all elements of the second tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] >= test_tup2[i]:\n                return False\n        return True\n    \ndef check_all_positive(test_tup1):\n    '''\n    Write a function that returns True if all elements of the first tuple are positive, and False otherwise.\n    '''\n    if len(test_tup1) == 0:\n        return True\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] < 0:\n                return False\n        return True\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for num in test_tup2:\n        if num < test_tup1[num-1]:\n            return False\n    return True\n    \ndef check_sum(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is sum of its corresponding element in the first tuple.\n    '''\n    for num in test_tup2:\n        if num < test_tup1[num-1] + test_tup2[num-1]:\n            return False\n    return True\n    \ndef check_mean(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is mean of its corresponding element in the first tuple.\n    '''\n    for num in test_tup2:\n        if num < (test_tup1[num-1] + test_tup2[num-1])/2:\n            return False\n    return True\n    \ndef check_median(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is median of its corresponding element in the first tuple.\n    '''\n    for num in test_tup2:\n        if num < (test_tup1[num-1] + test_tup2[num-1])/2:\n            return False\n    return True\n    \ndef check_mode(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is mode of its corresponding element in the first tuple.\n    '''\n    for num in test_tup2:\n        if test_tup1.count(num) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Check if test_tup1 and test_tup2 have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The tuples must have the same number of elements')\n    \n    # Check if test_tup1 and test_tup2 are both tuples\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise ValueError('The input should be a tuple')\n    \n    # Iterate over all elements in the tuple\n    for idx, value in enumerate(test_tup1):\n        # If test_tup1[idx] > test_tup2[idx] then return False\n        if test_tup1[idx] > test_tup2[idx]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for item1, item2 in zip(test_tup1, test_tup2):\n        if item1 <= item2:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    assert len(test_tup1) == len(test_tup2), \"Both tuples should contain the same number of elements\"\n    for i in range(0, len(test_tup1)):\n        assert test_tup1[i] >= test_tup2[i], \"Element in the first tuple should be greater than element in the second tuple\"\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    \n    #first try without using enumerate, then with enumerate and try-except\n    try:\n        for i in range(len(test_tup2)):\n            if test_tup1[i] > test_tup2[i]:\n                return False\n    except:\n        for i in range(len(test_tup2)):\n            if test_tup1[i] > test_tup2[i]:\n                return False\n    return True\n"
    }
]